
../../initrfs/ibin/cat:     file format elf32-i386


Disassembly of section .text:

40000000 <main>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 e4 f0             	and    $0xfffffff0,%esp
40000006:	83 ec 20             	sub    $0x20,%esp
    if(argc < 2) {
40000009:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
4000000d:	7f 46                	jg     40000055 <main+0x55>
        //printf("cat: No file specified\n");

        HANDLE in = fopen("/dev/urandom", FM_READ);
4000000f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
40000016:	00 
40000017:	c7 04 24 00 20 00 40 	movl   $0x40002000,(%esp)
4000001e:	e8 76 06 00 00       	call   40000699 <fopen>
40000023:	89 44 24 1c          	mov    %eax,0x1c(%esp)

        char c;

        while(1) {
            fread(in, &c, sizeof(char));
40000027:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
4000002e:	00 
4000002f:	8d 44 24 1b          	lea    0x1b(%esp),%eax
40000033:	89 44 24 04          	mov    %eax,0x4(%esp)
40000037:	8b 44 24 1c          	mov    0x1c(%esp),%eax
4000003b:	89 04 24             	mov    %eax,(%esp)
4000003e:	e8 1b 08 00 00       	call   4000085e <fread>
            putchar(c);
40000043:	0f b6 44 24 1b       	movzbl 0x1b(%esp),%eax
40000048:	0f be c0             	movsbl %al,%eax
4000004b:	89 04 24             	mov    %eax,(%esp)
4000004e:	e8 78 0a 00 00       	call   40000acb <putchar>
        }
40000053:	eb d2                	jmp    40000027 <main+0x27>
    }
    return 0;
40000055:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000005a:	c9                   	leave  
4000005b:	c3                   	ret    

4000005c <return_rpc>:
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
4000005c:	55                   	push   %ebp
4000005d:	89 e5                	mov    %esp,%ebp
4000005f:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000062:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .eax = 30,
      .ebx = (uint32_t)code,
40000069:	8b 45 08             	mov    0x8(%ebp),%eax
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
    struct regstate state = {
4000006c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000006f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000076:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000007d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000084:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000008b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000008e:	89 04 24             	mov    %eax,(%esp)
40000091:	e8 13 16 00 00       	call   400016a9 <syscall>

    while(1);
40000096:	eb fe                	jmp    40000096 <return_rpc+0x3a>

40000098 <call_rpc>:
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
40000098:	55                   	push   %ebp
40000099:	89 e5                	mov    %esp,%ebp
4000009b:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000009e:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
400000a5:	8b 45 08             	mov    0x8(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
400000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400000ab:	8b 45 0c             	mov    0xc(%ebp),%eax
400000ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
400000b1:	8b 45 10             	mov    0x10(%ebp),%eax
400000b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
400000b7:	8b 45 14             	mov    0x14(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
400000ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
400000bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };

    syscall(&state);
400000c4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400000c7:	89 04 24             	mov    %eax,(%esp)
400000ca:	e8 da 15 00 00       	call   400016a9 <syscall>

    return state.eax;
400000cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400000d2:	c9                   	leave  
400000d3:	c3                   	ret    

400000d4 <fetch_rpc_data>:

void fetch_rpc_data(void* dest) {
400000d4:	55                   	push   %ebp
400000d5:	89 e5                	mov    %esp,%ebp
400000d7:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400000da:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
      .eax = 33,
      .ebx = (uint32_t)dest,
400000e1:	8b 45 08             	mov    0x8(%ebp),%eax

    return state.eax;
}

void fetch_rpc_data(void* dest) {
    struct regstate state = {
400000e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400000e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400000ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400000f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400000fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000103:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000106:	89 04 24             	mov    %eax,(%esp)
40000109:	e8 9b 15 00 00       	call   400016a9 <syscall>
}
4000010e:	c9                   	leave  
4000010f:	c3                   	ret    

40000110 <register_irq_rpc_syscall>:

static uint32_t register_irq_rpc_syscall(uint32_t irq) {
40000110:	55                   	push   %ebp
40000111:	89 e5                	mov    %esp,%ebp
40000113:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000116:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
4000011d:	8b 45 08             	mov    0x8(%ebp),%eax
40000120:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000123:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000012a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000131:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000138:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000013f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000142:	89 04 24             	mov    %eax,(%esp)
40000145:	e8 5f 15 00 00       	call   400016a9 <syscall>

    return state.eax;
4000014a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000014d:	c9                   	leave  
4000014e:	c3                   	ret    

4000014f <register_irq_handler>:

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
4000014f:	55                   	push   %ebp
40000150:	89 e5                	mov    %esp,%ebp
40000152:	83 ec 18             	sub    $0x18,%esp
    if(register_irq_rpc_syscall(irq)) {
40000155:	8b 45 08             	mov    0x8(%ebp),%eax
40000158:	89 04 24             	mov    %eax,(%esp)
4000015b:	e8 b0 ff ff ff       	call   40000110 <register_irq_rpc_syscall>
40000160:	85 c0                	test   %eax,%eax
40000162:	74 14                	je     40000178 <register_irq_handler+0x29>
        irq_handlers[irq] = handler;
40000164:	8b 45 08             	mov    0x8(%ebp),%eax
40000167:	8b 55 0c             	mov    0xc(%ebp),%edx
4000016a:	89 14 85 00 30 00 40 	mov    %edx,0x40003000(,%eax,4)
        return 1;
40000171:	b8 01 00 00 00       	mov    $0x1,%eax
40000176:	eb 05                	jmp    4000017d <register_irq_handler+0x2e>
    }
    return 0;
40000178:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000017d:	c9                   	leave  
4000017e:	c3                   	ret    

4000017f <_handle_rpc>:

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
4000017f:	55                   	push   %ebp
40000180:	89 e5                	mov    %esp,%ebp
40000182:	83 ec 28             	sub    $0x28,%esp
    void* localData = malloc(datasize);
40000185:	8b 45 10             	mov    0x10(%ebp),%eax
40000188:	89 04 24             	mov    %eax,(%esp)
4000018b:	e8 dc 11 00 00       	call   4000136c <malloc>
40000190:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fetch_rpc_data(localData);
40000193:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000196:	89 04 24             	mov    %eax,(%esp)
40000199:	e8 36 ff ff ff       	call   400000d4 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
4000019e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400001a2:	75 2c                	jne    400001d0 <_handle_rpc+0x51>
        if(irq_handlers[funcID]) {
400001a4:	8b 45 0c             	mov    0xc(%ebp),%eax
400001a7:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
400001ae:	85 c0                	test   %eax,%eax
400001b0:	74 1e                	je     400001d0 <_handle_rpc+0x51>
            irq_handlers[funcID](funcID);
400001b2:	8b 45 0c             	mov    0xc(%ebp),%eax
400001b5:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
400001bc:	8b 55 0c             	mov    0xc(%ebp),%edx
400001bf:	89 14 24             	mov    %edx,(%esp)
400001c2:	ff d0                	call   *%eax
            return_rpc(0);
400001c4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400001cb:	e8 8c fe ff ff       	call   4000005c <return_rpc>
        }
    }

    printf("Unhandled RPC!\n");
400001d0:	c7 04 24 10 20 00 40 	movl   $0x40002010,(%esp)
400001d7:	e8 a0 0a 00 00       	call   40000c7c <printf>

    free(localData);
400001dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
400001df:	89 04 24             	mov    %eax,(%esp)
400001e2:	e8 c2 13 00 00       	call   400015a9 <free>
    return_rpc(0);
400001e7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400001ee:	e8 69 fe ff ff       	call   4000005c <return_rpc>
}
400001f3:	c9                   	leave  
400001f4:	c3                   	ret    

400001f5 <set_rpc_handler>:

void set_rpc_handler() {
400001f5:	55                   	push   %ebp
400001f6:	89 e5                	mov    %esp,%ebp
400001f8:	83 ec 38             	sub    $0x38,%esp
    memset(irq_handlers, 0, sizeof(irq_handlers));
400001fb:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
40000202:	00 
40000203:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
4000020a:	00 
4000020b:	c7 04 24 00 30 00 40 	movl   $0x40003000,(%esp)
40000212:	e8 d5 0b 00 00       	call   40000dec <memset>

    struct regstate state = {
40000217:	c7 45 e0 20 00 00 00 	movl   $0x20,-0x20(%ebp)
      .eax = 32,
      .ebx = (uint32_t)_handle_rpc,
4000021e:	b8 7f 01 00 40       	mov    $0x4000017f,%eax
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));

    struct regstate state = {
40000223:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000226:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000022d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000234:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000023b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000242:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000245:	89 04 24             	mov    %eax,(%esp)
40000248:	e8 5c 14 00 00       	call   400016a9 <syscall>
}
4000024d:	c9                   	leave  
4000024e:	c3                   	ret    

4000024f <getargs>:
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
4000024f:	55                   	push   %ebp
40000250:	89 e5                	mov    %esp,%ebp
40000252:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000255:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000025c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000263:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000026a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000271:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000278:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000027f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000282:	89 04 24             	mov    %eax,(%esp)
40000285:	e8 1f 14 00 00       	call   400016a9 <syscall>

    return state.eax;
4000028a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000028d:	c9                   	leave  
4000028e:	c3                   	ret    

4000028f <_start>:

void _start() {
4000028f:	55                   	push   %ebp
40000290:	89 e5                	mov    %esp,%ebp
40000292:	83 ec 28             	sub    $0x28,%esp
  char** args = (char**) getargs();
40000295:	e8 b5 ff ff ff       	call   4000024f <getargs>
4000029a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int argc = 0;
4000029d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if(args != 0) {
400002a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400002a8:	74 1b                	je     400002c5 <_start+0x36>
      while(args[argc] != 0) {
400002aa:	eb 04                	jmp    400002b0 <_start+0x21>
          argc++;
400002ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
400002b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
400002b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
400002ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
400002bd:	01 d0                	add    %edx,%eax
400002bf:	8b 00                	mov    (%eax),%eax
400002c1:	85 c0                	test   %eax,%eax
400002c3:	75 e7                	jne    400002ac <_start+0x1d>
          argc++;
      }
  }

  set_rpc_handler();
400002c5:	e8 2b ff ff ff       	call   400001f5 <set_rpc_handler>

  int result = main(argc, args);
400002ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
400002cd:	89 44 24 04          	mov    %eax,0x4(%esp)
400002d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
400002d4:	89 04 24             	mov    %eax,(%esp)
400002d7:	e8 24 fd ff ff       	call   40000000 <main>
400002dc:	89 45 ec             	mov    %eax,-0x14(%ebp)

  exit(result);
400002df:	8b 45 ec             	mov    -0x14(%ebp),%eax
400002e2:	89 04 24             	mov    %eax,(%esp)
400002e5:	e8 40 00 00 00       	call   4000032a <exit>
}
400002ea:	c9                   	leave  
400002eb:	c3                   	ret    

400002ec <yield>:

void yield() {
400002ec:	55                   	push   %ebp
400002ed:	89 e5                	mov    %esp,%ebp
400002ef:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400002f2:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
400002f9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000300:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000307:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000030e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000315:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000031c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000031f:	89 04 24             	mov    %eax,(%esp)
40000322:	e8 82 13 00 00       	call   400016a9 <syscall>

    return;
40000327:	90                   	nop
}
40000328:	c9                   	leave  
40000329:	c3                   	ret    

4000032a <exit>:

void exit(int returncode) {
4000032a:	55                   	push   %ebp
4000032b:	89 e5                	mov    %esp,%ebp
4000032d:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000330:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000337:	8b 45 08             	mov    0x8(%ebp),%eax
4000033a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000033d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000344:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000034b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000352:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000359:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000035c:	89 04 24             	mov    %eax,(%esp)
4000035f:	e8 45 13 00 00       	call   400016a9 <syscall>

    while(1) {
      printf("error\n");
40000364:	c7 04 24 20 20 00 40 	movl   $0x40002020,(%esp)
4000036b:	e8 0c 09 00 00       	call   40000c7c <printf>
    }
40000370:	eb f2                	jmp    40000364 <exit+0x3a>

40000372 <getExecPath>:
}

void getExecPath(char* dest) {
40000372:	55                   	push   %ebp
40000373:	89 e5                	mov    %esp,%ebp
40000375:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000378:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
4000037f:	8b 45 08             	mov    0x8(%ebp),%eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000382:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000385:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000038c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000393:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000039a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400003a1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003a4:	89 04 24             	mov    %eax,(%esp)
400003a7:	e8 fd 12 00 00       	call   400016a9 <syscall>
}
400003ac:	c9                   	leave  
400003ad:	c3                   	ret    

400003ae <changeExecPath>:

int changeExecPath(char* path) {
400003ae:	55                   	push   %ebp
400003af:	89 e5                	mov    %esp,%ebp
400003b1:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003b4:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
        .eax = 7,
        .ebx = (uint32_t)path,
400003bb:	8b 45 08             	mov    0x8(%ebp),%eax

    syscall(&state);
}

int changeExecPath(char* path) {
    struct regstate state = {
400003be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400003dd:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003e0:	89 04 24             	mov    %eax,(%esp)
400003e3:	e8 c1 12 00 00       	call   400016a9 <syscall>

    return state.eax;
400003e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400003eb:	c9                   	leave  
400003ec:	c3                   	ret    

400003ed <cd>:

void cd(char* path) {
400003ed:	55                   	push   %ebp
400003ee:	89 e5                	mov    %esp,%ebp
400003f0:	83 ec 18             	sub    $0x18,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
400003f3:	8b 45 08             	mov    0x8(%ebp),%eax
400003f6:	89 04 24             	mov    %eax,(%esp)
400003f9:	e8 b0 ff ff ff       	call   400003ae <changeExecPath>
400003fe:	85 c0                	test   %eax,%eax
40000400:	75 14                	jne    40000416 <cd+0x29>
40000402:	e8 48 01 00 00       	call   4000054f <getLastVFSErr>
40000407:	89 44 24 04          	mov    %eax,0x4(%esp)
4000040b:	8b 45 08             	mov    0x8(%ebp),%eax
4000040e:	89 04 24             	mov    %eax,(%esp)
40000411:	e8 7a 00 00 00       	call   40000490 <printFilesystemError>
}
40000416:	c9                   	leave  
40000417:	c3                   	ret    

40000418 <exec>:

int exec(char* path, char** args) {
40000418:	55                   	push   %ebp
40000419:	89 e5                	mov    %esp,%ebp
4000041b:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000041e:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
40000425:	8b 45 08             	mov    0x8(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
40000428:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
4000042b:	8b 45 0c             	mov    0xc(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
4000042e:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000431:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000438:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000043f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000446:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000449:	89 04 24             	mov    %eax,(%esp)
4000044c:	e8 58 12 00 00       	call   400016a9 <syscall>

    return state.eax;
40000451:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000454:	c9                   	leave  
40000455:	c3                   	ret    

40000456 <texec>:

int texec(char* path, char** args) {
40000456:	55                   	push   %ebp
40000457:	89 e5                	mov    %esp,%ebp
40000459:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = exec(path, args);
4000045c:	8b 45 0c             	mov    0xc(%ebp),%eax
4000045f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000463:	8b 45 08             	mov    0x8(%ebp),%eax
40000466:	89 04 24             	mov    %eax,(%esp)
40000469:	e8 aa ff ff ff       	call   40000418 <exec>
4000046e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!res) {
40000471:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000475:	75 14                	jne    4000048b <texec+0x35>
        printFilesystemError(path, getLastVFSErr());
40000477:	e8 d3 00 00 00       	call   4000054f <getLastVFSErr>
4000047c:	89 44 24 04          	mov    %eax,0x4(%esp)
40000480:	8b 45 08             	mov    0x8(%ebp),%eax
40000483:	89 04 24             	mov    %eax,(%esp)
40000486:	e8 05 00 00 00       	call   40000490 <printFilesystemError>
    }

    return res;
4000048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000048e:	c9                   	leave  
4000048f:	c3                   	ret    

40000490 <printFilesystemError>:

void printFilesystemError(char* path, uint32_t code) {
40000490:	55                   	push   %ebp
40000491:	89 e5                	mov    %esp,%ebp
40000493:	83 ec 18             	sub    $0x18,%esp
    switch(code) {
40000496:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000049a:	0f 87 8d 00 00 00    	ja     4000052d <printFilesystemError+0x9d>
400004a0:	8b 45 0c             	mov    0xc(%ebp),%eax
400004a3:	c1 e0 02             	shl    $0x2,%eax
400004a6:	05 f4 20 00 40       	add    $0x400020f4,%eax
400004ab:	8b 00                	mov    (%eax),%eax
400004ad:	ff e0                	jmp    *%eax
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
400004af:	8b 45 08             	mov    0x8(%ebp),%eax
400004b2:	89 44 24 04          	mov    %eax,0x4(%esp)
400004b6:	c7 04 24 27 20 00 40 	movl   $0x40002027,(%esp)
400004bd:	e8 ba 07 00 00       	call   40000c7c <printf>
        break;
400004c2:	eb 7d                	jmp    40000541 <printFilesystemError+0xb1>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
400004c4:	8b 45 08             	mov    0x8(%ebp),%eax
400004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
400004cb:	c7 04 24 3c 20 00 40 	movl   $0x4000203c,(%esp)
400004d2:	e8 a5 07 00 00       	call   40000c7c <printf>
        break;
400004d7:	eb 68                	jmp    40000541 <printFilesystemError+0xb1>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
400004d9:	8b 45 08             	mov    0x8(%ebp),%eax
400004dc:	89 44 24 04          	mov    %eax,0x4(%esp)
400004e0:	c7 04 24 5c 20 00 40 	movl   $0x4000205c,(%esp)
400004e7:	e8 90 07 00 00       	call   40000c7c <printf>
        break;
400004ec:	eb 53                	jmp    40000541 <printFilesystemError+0xb1>
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
400004ee:	8b 45 08             	mov    0x8(%ebp),%eax
400004f1:	89 44 24 04          	mov    %eax,0x4(%esp)
400004f5:	c7 04 24 86 20 00 40 	movl   $0x40002086,(%esp)
400004fc:	e8 7b 07 00 00       	call   40000c7c <printf>
        break;
40000501:	eb 3e                	jmp    40000541 <printFilesystemError+0xb1>
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
40000503:	8b 45 08             	mov    0x8(%ebp),%eax
40000506:	89 44 24 04          	mov    %eax,0x4(%esp)
4000050a:	c7 04 24 9c 20 00 40 	movl   $0x4000209c,(%esp)
40000511:	e8 66 07 00 00       	call   40000c7c <printf>
        break;
40000516:	eb 29                	jmp    40000541 <printFilesystemError+0xb1>
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
40000518:	8b 45 08             	mov    0x8(%ebp),%eax
4000051b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000051f:	c7 04 24 d7 20 00 40 	movl   $0x400020d7,(%esp)
40000526:	e8 51 07 00 00       	call   40000c7c <printf>
        break;
4000052b:	eb 14                	jmp    40000541 <printFilesystemError+0xb1>
    default:
        printf("%s: WTF", path);
4000052d:	8b 45 08             	mov    0x8(%ebp),%eax
40000530:	89 44 24 04          	mov    %eax,0x4(%esp)
40000534:	c7 04 24 ea 20 00 40 	movl   $0x400020ea,(%esp)
4000053b:	e8 3c 07 00 00       	call   40000c7c <printf>
        break;
40000540:	90                   	nop

    }
    printf("\n");
40000541:	c7 04 24 f2 20 00 40 	movl   $0x400020f2,(%esp)
40000548:	e8 2f 07 00 00       	call   40000c7c <printf>
}
4000054d:	c9                   	leave  
4000054e:	c3                   	ret    

4000054f <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
4000054f:	55                   	push   %ebp
40000550:	89 e5                	mov    %esp,%ebp
40000552:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000555:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
4000055c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000563:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000056a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000571:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000057f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000582:	89 04 24             	mov    %eax,(%esp)
40000585:	e8 1f 11 00 00       	call   400016a9 <syscall>

    return state.eax;
4000058a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000058d:	c9                   	leave  
4000058e:	c3                   	ret    

4000058f <getpmhandle>:

static HANDLE getpmhandle   (uint32_t pmid) {
4000058f:	55                   	push   %ebp
40000590:	89 e5                	mov    %esp,%ebp
40000592:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000595:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
4000059c:	8b 45 08             	mov    0x8(%ebp),%eax
4000059f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400005a2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400005be:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005c1:	89 04 24             	mov    %eax,(%esp)
400005c4:	e8 e0 10 00 00       	call   400016a9 <syscall>

    return (HANDLE)state.eax;
400005c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400005cc:	c9                   	leave  
400005cd:	c3                   	ret    

400005ce <getstdout>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
400005ce:	55                   	push   %ebp
400005cf:	89 e5                	mov    %esp,%ebp
400005d1:	83 ec 18             	sub    $0x18,%esp
400005d4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400005db:	e8 af ff ff ff       	call   4000058f <getpmhandle>
400005e0:	c9                   	leave  
400005e1:	c3                   	ret    

400005e2 <getstdin>:
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
400005e2:	55                   	push   %ebp
400005e3:	89 e5                	mov    %esp,%ebp
400005e5:	83 ec 18             	sub    $0x18,%esp
400005e8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400005ef:	e8 9b ff ff ff       	call   4000058f <getpmhandle>
400005f4:	c9                   	leave  
400005f5:	c3                   	ret    

400005f6 <getstderr>:
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };
400005f6:	55                   	push   %ebp
400005f7:	89 e5                	mov    %esp,%ebp
400005f9:	83 ec 18             	sub    $0x18,%esp
400005fc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000603:	e8 87 ff ff ff       	call   4000058f <getpmhandle>
40000608:	c9                   	leave  
40000609:	c3                   	ret    

4000060a <fopenpmhandle>:

int fopenpmhandle (uint32_t pmid, char* path) {
4000060a:	55                   	push   %ebp
4000060b:	89 e5                	mov    %esp,%ebp
4000060d:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000610:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000617:	8b 45 08             	mov    0x8(%ebp),%eax
4000061a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 21,
      .ebx = pmid,
      .ecx = (uint32_t)path,
4000061d:	8b 45 0c             	mov    0xc(%ebp),%eax
static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
    struct regstate state = {
40000620:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000623:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000062a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000631:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000638:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000063b:	89 04 24             	mov    %eax,(%esp)
4000063e:	e8 66 10 00 00       	call   400016a9 <syscall>

    return (HANDLE)state.eax;
40000643:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000646:	c9                   	leave  
40000647:	c3                   	ret    

40000648 <setstdout>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
40000648:	55                   	push   %ebp
40000649:	89 e5                	mov    %esp,%ebp
4000064b:	83 ec 18             	sub    $0x18,%esp
4000064e:	8b 45 08             	mov    0x8(%ebp),%eax
40000651:	89 44 24 04          	mov    %eax,0x4(%esp)
40000655:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000065c:	e8 a9 ff ff ff       	call   4000060a <fopenpmhandle>
40000661:	c9                   	leave  
40000662:	c3                   	ret    

40000663 <setstdin>:
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
40000663:	55                   	push   %ebp
40000664:	89 e5                	mov    %esp,%ebp
40000666:	83 ec 18             	sub    $0x18,%esp
40000669:	8b 45 08             	mov    0x8(%ebp),%eax
4000066c:	89 44 24 04          	mov    %eax,0x4(%esp)
40000670:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000677:	e8 8e ff ff ff       	call   4000060a <fopenpmhandle>
4000067c:	c9                   	leave  
4000067d:	c3                   	ret    

4000067e <setstderr>:
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
4000067e:	55                   	push   %ebp
4000067f:	89 e5                	mov    %esp,%ebp
40000681:	83 ec 18             	sub    $0x18,%esp
40000684:	8b 45 08             	mov    0x8(%ebp),%eax
40000687:	89 44 24 04          	mov    %eax,0x4(%esp)
4000068b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000692:	e8 73 ff ff ff       	call   4000060a <fopenpmhandle>
40000697:	c9                   	leave  
40000698:	c3                   	ret    

40000699 <fopen>:

HANDLE fopen(char* path, uint32_t mode) {
40000699:	55                   	push   %ebp
4000069a:	89 e5                	mov    %esp,%ebp
4000069c:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000069f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
      .eax = 10,
      .ebx = (uint32_t)path,
400006a6:	8b 45 08             	mov    0x8(%ebp),%eax
int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
    struct regstate state = {
400006a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006ac:	8b 45 0c             	mov    0xc(%ebp),%eax
400006af:	89 45 e8             	mov    %eax,-0x18(%ebp)
400006b2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400006c7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006ca:	89 04 24             	mov    %eax,(%esp)
400006cd:	e8 d7 0f 00 00       	call   400016a9 <syscall>

    return (HANDLE)state.eax;
400006d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400006d5:	c9                   	leave  
400006d6:	c3                   	ret    

400006d7 <fclose>:

int fclose(uint32_t handle) {
400006d7:	55                   	push   %ebp
400006d8:	89 e5                	mov    %esp,%ebp
400006da:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400006dd:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400006e4:	8b 45 08             	mov    0x8(%ebp),%eax
400006e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006ea:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000706:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000709:	89 04 24             	mov    %eax,(%esp)
4000070c:	e8 98 0f 00 00       	call   400016a9 <syscall>

    return (int)state.eax;
40000711:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000714:	c9                   	leave  
40000715:	c3                   	ret    

40000716 <printrwerror>:

static void printrwerror(HANDLE handle, uint32_t res) {
40000716:	55                   	push   %ebp
40000717:	89 e5                	mov    %esp,%ebp
40000719:	83 ec 18             	sub    $0x18,%esp
    if(res == RW_ERR_VFS) {
4000071c:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
40000720:	75 13                	jne    40000735 <printrwerror+0x1f>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
40000722:	8b 45 08             	mov    0x8(%ebp),%eax
40000725:	89 44 24 04          	mov    %eax,0x4(%esp)
40000729:	c7 04 24 0c 21 00 40 	movl   $0x4000210c,(%esp)
40000730:	e8 47 05 00 00       	call   40000c7c <printf>
    }

    if(res == RW_ERR_DRIVER) {
40000735:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
40000739:	75 13                	jne    4000074e <printrwerror+0x38>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
4000073b:	8b 45 08             	mov    0x8(%ebp),%eax
4000073e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000742:	c7 04 24 24 21 00 40 	movl   $0x40002124,(%esp)
40000749:	e8 2e 05 00 00       	call   40000c7c <printf>
    }

    if(res == RW_NOFM_READ) {
4000074e:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
40000752:	75 13                	jne    40000767 <printrwerror+0x51>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
40000754:	8b 45 08             	mov    0x8(%ebp),%eax
40000757:	89 44 24 04          	mov    %eax,0x4(%esp)
4000075b:	c7 04 24 40 21 00 40 	movl   $0x40002140,(%esp)
40000762:	e8 15 05 00 00       	call   40000c7c <printf>
    }

    if(res == RW_NOFM_WRITE) {
40000767:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000076b:	75 13                	jne    40000780 <printrwerror+0x6a>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
4000076d:	8b 45 08             	mov    0x8(%ebp),%eax
40000770:	89 44 24 04          	mov    %eax,0x4(%esp)
40000774:	c7 04 24 6c 21 00 40 	movl   $0x4000216c,(%esp)
4000077b:	e8 fc 04 00 00       	call   40000c7c <printf>
    }
}
40000780:	c9                   	leave  
40000781:	c3                   	ret    

40000782 <frwrite>:

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
40000782:	55                   	push   %ebp
40000783:	89 e5                	mov    %esp,%ebp
40000785:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000788:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
4000078f:	8b 45 08             	mov    0x8(%ebp),%eax
40000792:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 12,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
40000795:	8b 45 0c             	mov    0xc(%ebp),%eax
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
    struct regstate state = {
40000798:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000079b:	8b 45 10             	mov    0x10(%ebp),%eax
4000079e:	89 45 ec             	mov    %eax,-0x14(%ebp)
400007a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400007af:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007b2:	89 04 24             	mov    %eax,(%esp)
400007b5:	e8 ef 0e 00 00       	call   400016a9 <syscall>

    return (int)state.eax;
400007ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400007bd:	c9                   	leave  
400007be:	c3                   	ret    

400007bf <fwrite>:

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
400007bf:	55                   	push   %ebp
400007c0:	89 e5                	mov    %esp,%ebp
400007c2:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frwrite(handle, src, length);
400007c5:	8b 45 10             	mov    0x10(%ebp),%eax
400007c8:	89 44 24 08          	mov    %eax,0x8(%esp)
400007cc:	8b 45 0c             	mov    0xc(%ebp),%eax
400007cf:	89 44 24 04          	mov    %eax,0x4(%esp)
400007d3:	8b 45 08             	mov    0x8(%ebp),%eax
400007d6:	89 04 24             	mov    %eax,(%esp)
400007d9:	e8 a4 ff ff ff       	call   40000782 <frwrite>
400007de:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
400007e1:	eb 21                	jmp    40000804 <fwrite+0x45>
        yield();
400007e3:	e8 04 fb ff ff       	call   400002ec <yield>
        res = frwrite(handle, src, length);
400007e8:	8b 45 10             	mov    0x10(%ebp),%eax
400007eb:	89 44 24 08          	mov    %eax,0x8(%esp)
400007ef:	8b 45 0c             	mov    0xc(%ebp),%eax
400007f2:	89 44 24 04          	mov    %eax,0x4(%esp)
400007f6:	8b 45 08             	mov    0x8(%ebp),%eax
400007f9:	89 04 24             	mov    %eax,(%esp)
400007fc:	e8 81 ff ff ff       	call   40000782 <frwrite>
40000801:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
40000804:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000808:	74 d9                	je     400007e3 <fwrite+0x24>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
4000080a:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000080d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000811:	8b 45 08             	mov    0x8(%ebp),%eax
40000814:	89 04 24             	mov    %eax,(%esp)
40000817:	e8 fa fe ff ff       	call   40000716 <printrwerror>

    return res;
4000081c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000081f:	c9                   	leave  
40000820:	c3                   	ret    

40000821 <frread>:

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
40000821:	55                   	push   %ebp
40000822:	89 e5                	mov    %esp,%ebp
40000824:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000827:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
4000082e:	8b 45 08             	mov    0x8(%ebp),%eax
40000831:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 13,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
40000834:	8b 45 0c             	mov    0xc(%ebp),%eax

    return res;
}

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
    struct regstate state = {
40000837:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000083a:	8b 45 10             	mov    0x10(%ebp),%eax
4000083d:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000840:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000847:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000084e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000851:	89 04 24             	mov    %eax,(%esp)
40000854:	e8 50 0e 00 00       	call   400016a9 <syscall>

    return (int)state.eax;
40000859:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000085c:	c9                   	leave  
4000085d:	c3                   	ret    

4000085e <fread>:

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
4000085e:	55                   	push   %ebp
4000085f:	89 e5                	mov    %esp,%ebp
40000861:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frread(handle, dest, length);
40000864:	8b 45 10             	mov    0x10(%ebp),%eax
40000867:	89 44 24 08          	mov    %eax,0x8(%esp)
4000086b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000086e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000872:	8b 45 08             	mov    0x8(%ebp),%eax
40000875:	89 04 24             	mov    %eax,(%esp)
40000878:	e8 a4 ff ff ff       	call   40000821 <frread>
4000087d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000880:	eb 21                	jmp    400008a3 <fread+0x45>
        yield();
40000882:	e8 65 fa ff ff       	call   400002ec <yield>
        res = frread(handle, dest, length);
40000887:	8b 45 10             	mov    0x10(%ebp),%eax
4000088a:	89 44 24 08          	mov    %eax,0x8(%esp)
4000088e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000891:	89 44 24 04          	mov    %eax,0x4(%esp)
40000895:	8b 45 08             	mov    0x8(%ebp),%eax
40000898:	89 04 24             	mov    %eax,(%esp)
4000089b:	e8 81 ff ff ff       	call   40000821 <frread>
400008a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
400008a3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
400008a7:	74 d9                	je     40000882 <fread+0x24>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
400008a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
400008ac:	89 44 24 04          	mov    %eax,0x4(%esp)
400008b0:	8b 45 08             	mov    0x8(%ebp),%eax
400008b3:	89 04 24             	mov    %eax,(%esp)
400008b6:	e8 5b fe ff ff       	call   40000716 <printrwerror>

    return res;
400008bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
400008be:	c9                   	leave  
400008bf:	c3                   	ret    

400008c0 <fmkfifo>:

HANDLE fmkfifo(char* path) {
400008c0:	55                   	push   %ebp
400008c1:	89 e5                	mov    %esp,%ebp
400008c3:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400008c6:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
      .eax = 14,
      .ebx = (uint32_t)path,
400008cd:	8b 45 08             	mov    0x8(%ebp),%eax

    return res;
}

HANDLE fmkfifo(char* path) {
    struct regstate state = {
400008d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400008d3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400008da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400008ef:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008f2:	89 04 24             	mov    %eax,(%esp)
400008f5:	e8 af 0d 00 00       	call   400016a9 <syscall>

    return (HANDLE)state.eax;
400008fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400008fd:	c9                   	leave  
400008fe:	c3                   	ret    

400008ff <resolveHandle>:

static HANDLE resolveHandle(HANDLE hdl) {
400008ff:	55                   	push   %ebp
40000900:	89 e5                	mov    %esp,%ebp
40000902:	83 ec 18             	sub    $0x18,%esp
    if(hdl < 0xFFF) {
40000905:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
4000090c:	77 0e                	ja     4000091c <resolveHandle+0x1d>
        hdl = getpmhandle(hdl);
4000090e:	8b 45 08             	mov    0x8(%ebp),%eax
40000911:	89 04 24             	mov    %eax,(%esp)
40000914:	e8 76 fc ff ff       	call   4000058f <getpmhandle>
40000919:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    return hdl;
4000091c:	8b 45 08             	mov    0x8(%ebp),%eax
}
4000091f:	c9                   	leave  
40000920:	c3                   	ret    

40000921 <fgetc>:

char fgetc(HANDLE hdl) {
40000921:	55                   	push   %ebp
40000922:	89 e5                	mov    %esp,%ebp
40000924:	83 ec 28             	sub    $0x28,%esp
    hdl = resolveHandle(hdl);
40000927:	8b 45 08             	mov    0x8(%ebp),%eax
4000092a:	89 04 24             	mov    %eax,(%esp)
4000092d:	e8 cd ff ff ff       	call   400008ff <resolveHandle>
40000932:	89 45 08             	mov    %eax,0x8(%ebp)
    char in = 0;
40000935:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
40000939:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000093d:	74 1a                	je     40000959 <fgetc+0x38>
        fread(hdl, &in, sizeof(char));
4000093f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000946:	00 
40000947:	8d 45 f7             	lea    -0x9(%ebp),%eax
4000094a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000094e:	8b 45 08             	mov    0x8(%ebp),%eax
40000951:	89 04 24             	mov    %eax,(%esp)
40000954:	e8 05 ff ff ff       	call   4000085e <fread>
    }
    return in;
40000959:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
4000095d:	c9                   	leave  
4000095e:	c3                   	ret    

4000095f <fgets>:

char* fgets(char* str, int num, HANDLE hdl) {
4000095f:	55                   	push   %ebp
40000960:	89 e5                	mov    %esp,%ebp
40000962:	53                   	push   %ebx
40000963:	83 ec 24             	sub    $0x24,%esp
    for(int n = 0; n < (num - 1); n++) {
40000966:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000096d:	eb 3d                	jmp    400009ac <fgets+0x4d>
        str[n] = fgetc(hdl);
4000096f:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000972:	8b 45 08             	mov    0x8(%ebp),%eax
40000975:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
40000978:	8b 45 10             	mov    0x10(%ebp),%eax
4000097b:	89 04 24             	mov    %eax,(%esp)
4000097e:	e8 9e ff ff ff       	call   40000921 <fgetc>
40000983:	88 03                	mov    %al,(%ebx)
        if(str[n] == 0 || str[n] == '\0') {
40000985:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000988:	8b 45 08             	mov    0x8(%ebp),%eax
4000098b:	01 d0                	add    %edx,%eax
4000098d:	0f b6 00             	movzbl (%eax),%eax
40000990:	84 c0                	test   %al,%al
40000992:	74 0f                	je     400009a3 <fgets+0x44>
40000994:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000997:	8b 45 08             	mov    0x8(%ebp),%eax
4000099a:	01 d0                	add    %edx,%eax
4000099c:	0f b6 00             	movzbl (%eax),%eax
4000099f:	84 c0                	test   %al,%al
400009a1:	75 05                	jne    400009a8 <fgets+0x49>
            return str;
400009a3:	8b 45 08             	mov    0x8(%ebp),%eax
400009a6:	eb 1d                	jmp    400009c5 <fgets+0x66>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
400009a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
400009ac:	8b 45 0c             	mov    0xc(%ebp),%eax
400009af:	83 e8 01             	sub    $0x1,%eax
400009b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400009b5:	7f b8                	jg     4000096f <fgets+0x10>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
400009b7:	8b 55 0c             	mov    0xc(%ebp),%edx
400009ba:	8b 45 08             	mov    0x8(%ebp),%eax
400009bd:	01 d0                	add    %edx,%eax
400009bf:	c6 00 00             	movb   $0x0,(%eax)
    return str;
400009c2:	8b 45 08             	mov    0x8(%ebp),%eax
}
400009c5:	83 c4 24             	add    $0x24,%esp
400009c8:	5b                   	pop    %ebx
400009c9:	5d                   	pop    %ebp
400009ca:	c3                   	ret    

400009cb <getc>:

char getc(HANDLE hdl) {
400009cb:	55                   	push   %ebp
400009cc:	89 e5                	mov    %esp,%ebp
400009ce:	83 ec 18             	sub    $0x18,%esp
    return fgetc(hdl);
400009d1:	8b 45 08             	mov    0x8(%ebp),%eax
400009d4:	89 04 24             	mov    %eax,(%esp)
400009d7:	e8 45 ff ff ff       	call   40000921 <fgetc>
}
400009dc:	c9                   	leave  
400009dd:	c3                   	ret    

400009de <getchar>:

char getchar() {
400009de:	55                   	push   %ebp
400009df:	89 e5                	mov    %esp,%ebp
400009e1:	83 ec 18             	sub    $0x18,%esp
    return fgetc(PMID_STDIN);
400009e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400009eb:	e8 31 ff ff ff       	call   40000921 <fgetc>
}
400009f0:	c9                   	leave  
400009f1:	c3                   	ret    

400009f2 <getln>:

char* getln(char* str) {
400009f2:	55                   	push   %ebp
400009f3:	89 e5                	mov    %esp,%ebp
400009f5:	83 ec 28             	sub    $0x28,%esp
    uint32_t index = 0;
400009f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char lastChar = 0;
400009ff:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)

    while((lastChar = fgetc(PMID_STDIN))) {
40000a03:	eb 5b                	jmp    40000a60 <getln+0x6e>
        if(lastChar == '\n') {
40000a05:	80 7d f3 0a          	cmpb   $0xa,-0xd(%ebp)
40000a09:	75 0e                	jne    40000a19 <getln+0x27>
            putchar('\n');
40000a0b:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
40000a12:	e8 b4 00 00 00       	call   40000acb <putchar>
            break;
40000a17:	eb 5c                	jmp    40000a75 <getln+0x83>
        }

        if(lastChar == 8) {
40000a19:	80 7d f3 08          	cmpb   $0x8,-0xd(%ebp)
40000a1d:	75 23                	jne    40000a42 <getln+0x50>
            if(index != 0) {
40000a1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000a23:	74 10                	je     40000a35 <getln+0x43>
                index--;
40000a25:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
                putchar(8);
40000a29:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
40000a30:	e8 96 00 00 00       	call   40000acb <putchar>
            }
            str[index] = 0;
40000a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000a38:	8b 55 08             	mov    0x8(%ebp),%edx
40000a3b:	01 d0                	add    %edx,%eax
40000a3d:	c6 00 00             	movb   $0x0,(%eax)
            continue;
40000a40:	eb 1e                	jmp    40000a60 <getln+0x6e>
        }

        str[index] = lastChar;
40000a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000a45:	8b 55 08             	mov    0x8(%ebp),%edx
40000a48:	01 c2                	add    %eax,%edx
40000a4a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
40000a4e:	88 02                	mov    %al,(%edx)
        putchar(lastChar);
40000a50:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000a54:	89 04 24             	mov    %eax,(%esp)
40000a57:	e8 6f 00 00 00       	call   40000acb <putchar>

        index++;
40000a5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000a60:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000a67:	e8 b5 fe ff ff       	call   40000921 <fgetc>
40000a6c:	88 45 f3             	mov    %al,-0xd(%ebp)
40000a6f:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
40000a73:	75 90                	jne    40000a05 <getln+0x13>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000a78:	8b 55 08             	mov    0x8(%ebp),%edx
40000a7b:	01 d0                	add    %edx,%eax
40000a7d:	c6 00 00             	movb   $0x0,(%eax)

    return str;
40000a80:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000a83:	c9                   	leave  
40000a84:	c3                   	ret    

40000a85 <kputc>:

static int kputc(char c) {
40000a85:	55                   	push   %ebp
40000a86:	89 e5                	mov    %esp,%ebp
40000a88:	83 ec 38             	sub    $0x38,%esp
40000a8b:	8b 45 08             	mov    0x8(%ebp),%eax
40000a8e:	88 45 d4             	mov    %al,-0x2c(%ebp)
  struct regstate state = {
40000a91:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
    .eax = 201,
    .ebx = (uint32_t)c,
40000a98:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax

    return str;
}

static int kputc(char c) {
  struct regstate state = {
40000a9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a9f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000aa6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000aad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000ab4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000abb:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000abe:	89 04 24             	mov    %eax,(%esp)
40000ac1:	e8 e3 0b 00 00       	call   400016a9 <syscall>
  
  return state.eax;
40000ac6:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000ac9:	c9                   	leave  
40000aca:	c3                   	ret    

40000acb <putchar>:

int putchar(char c) {
40000acb:	55                   	push   %ebp
40000acc:	89 e5                	mov    %esp,%ebp
40000ace:	83 ec 18             	sub    $0x18,%esp
40000ad1:	8b 45 08             	mov    0x8(%ebp),%eax
40000ad4:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, PMID_STDOUT);
40000ad7:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000adb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000ae2:	00 
40000ae3:	89 04 24             	mov    %eax,(%esp)
40000ae6:	e8 23 00 00 00       	call   40000b0e <fputc>
}
40000aeb:	c9                   	leave  
40000aec:	c3                   	ret    

40000aed <putc>:

int putc(char c, HANDLE hdl) {
40000aed:	55                   	push   %ebp
40000aee:	89 e5                	mov    %esp,%ebp
40000af0:	83 ec 18             	sub    $0x18,%esp
40000af3:	8b 45 08             	mov    0x8(%ebp),%eax
40000af6:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, hdl);
40000af9:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000afd:	8b 55 0c             	mov    0xc(%ebp),%edx
40000b00:	89 54 24 04          	mov    %edx,0x4(%esp)
40000b04:	89 04 24             	mov    %eax,(%esp)
40000b07:	e8 02 00 00 00       	call   40000b0e <fputc>
}
40000b0c:	c9                   	leave  
40000b0d:	c3                   	ret    

40000b0e <fputc>:

int fputc(char c, HANDLE hdl) {
40000b0e:	55                   	push   %ebp
40000b0f:	89 e5                	mov    %esp,%ebp
40000b11:	83 ec 18             	sub    $0x18,%esp
40000b14:	8b 45 08             	mov    0x8(%ebp),%eax
40000b17:	88 45 f4             	mov    %al,-0xc(%ebp)
    hdl = resolveHandle(hdl);
40000b1a:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b1d:	89 04 24             	mov    %eax,(%esp)
40000b20:	e8 da fd ff ff       	call   400008ff <resolveHandle>
40000b25:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000b28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000b2c:	74 1c                	je     40000b4a <fputc+0x3c>
        return fwrite(hdl, &c, sizeof(char));
40000b2e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000b35:	00 
40000b36:	8d 45 f4             	lea    -0xc(%ebp),%eax
40000b39:	89 44 24 04          	mov    %eax,0x4(%esp)
40000b3d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b40:	89 04 24             	mov    %eax,(%esp)
40000b43:	e8 77 fc ff ff       	call   400007bf <fwrite>
40000b48:	eb 0f                	jmp    40000b59 <fputc+0x4b>
    }
    return kputc(c);
40000b4a:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
40000b4e:	0f be c0             	movsbl %al,%eax
40000b51:	89 04 24             	mov    %eax,(%esp)
40000b54:	e8 2c ff ff ff       	call   40000a85 <kputc>
}
40000b59:	c9                   	leave  
40000b5a:	c3                   	ret    

40000b5b <kputs>:

static int kputs(const char* cp) {
40000b5b:	55                   	push   %ebp
40000b5c:	89 e5                	mov    %esp,%ebp
40000b5e:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40000b61:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
    .eax = 202,
    .ebx = (uint32_t)cp,
40000b68:	8b 45 08             	mov    0x8(%ebp),%eax
    }
    return kputc(c);
}

static int kputs(const char* cp) {
  struct regstate state = {
40000b6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b6e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000b8a:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000b8d:	89 04 24             	mov    %eax,(%esp)
40000b90:	e8 14 0b 00 00       	call   400016a9 <syscall>
  
  return state.eax;
40000b95:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000b98:	c9                   	leave  
40000b99:	c3                   	ret    

40000b9a <puts>:

int puts(const char* c) {
40000b9a:	55                   	push   %ebp
40000b9b:	89 e5                	mov    %esp,%ebp
40000b9d:	83 ec 18             	sub    $0x18,%esp
    return fputs(c, PMID_STDOUT);
40000ba0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000ba7:	00 
40000ba8:	8b 45 08             	mov    0x8(%ebp),%eax
40000bab:	89 04 24             	mov    %eax,(%esp)
40000bae:	e8 02 00 00 00       	call   40000bb5 <fputs>
}
40000bb3:	c9                   	leave  
40000bb4:	c3                   	ret    

40000bb5 <fputs>:

int fputs(const char* c, HANDLE hdl) {
40000bb5:	55                   	push   %ebp
40000bb6:	89 e5                	mov    %esp,%ebp
40000bb8:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
40000bbe:	89 04 24             	mov    %eax,(%esp)
40000bc1:	e8 39 fd ff ff       	call   400008ff <resolveHandle>
40000bc6:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000bc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000bcd:	74 23                	je     40000bf2 <fputs+0x3d>
        return fwrite(hdl, c, strlen(c));
40000bcf:	8b 45 08             	mov    0x8(%ebp),%eax
40000bd2:	89 04 24             	mov    %eax,(%esp)
40000bd5:	e8 68 03 00 00       	call   40000f42 <strlen>
40000bda:	89 44 24 08          	mov    %eax,0x8(%esp)
40000bde:	8b 45 08             	mov    0x8(%ebp),%eax
40000be1:	89 44 24 04          	mov    %eax,0x4(%esp)
40000be5:	8b 45 0c             	mov    0xc(%ebp),%eax
40000be8:	89 04 24             	mov    %eax,(%esp)
40000beb:	e8 cf fb ff ff       	call   400007bf <fwrite>
40000bf0:	eb 0b                	jmp    40000bfd <fputs+0x48>
    }
    return kputs(c);
40000bf2:	8b 45 08             	mov    0x8(%ebp),%eax
40000bf5:	89 04 24             	mov    %eax,(%esp)
40000bf8:	e8 5e ff ff ff       	call   40000b5b <kputs>
}
40000bfd:	c9                   	leave  
40000bfe:	c3                   	ret    

40000bff <putn>:

static int putn(unsigned long x, int base)
{
40000bff:	55                   	push   %ebp
40000c00:	89 e5                	mov    %esp,%ebp
40000c02:	53                   	push   %ebx
40000c03:	83 ec 64             	sub    $0x64,%esp
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
40000c06:	c7 45 ec 98 21 00 40 	movl   $0x40002198,-0x14(%ebp)
  char* p;
  int wrt = 0;
40000c0d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  if (base > 36) {
40000c14:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000c18:	7e 07                	jle    40000c21 <putn+0x22>
    return 0;
40000c1a:	b8 00 00 00 00       	mov    $0x0,%eax
40000c1f:	eb 55                	jmp    40000c76 <putn+0x77>
  }

  p = buf + 64;
40000c21:	8d 45 ab             	lea    -0x55(%ebp),%eax
40000c24:	83 c0 40             	add    $0x40,%eax
40000c27:	89 45 f4             	mov    %eax,-0xc(%ebp)
  *p = '\0';
40000c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c2d:	c6 00 00             	movb   $0x0,(%eax)
  do {
    wrt++;
40000c30:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    *--p = digits[x % base];
40000c34:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
40000c38:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000c3b:	8b 45 08             	mov    0x8(%ebp),%eax
40000c3e:	ba 00 00 00 00       	mov    $0x0,%edx
40000c43:	f7 f1                	div    %ecx
40000c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000c48:	01 d0                	add    %edx,%eax
40000c4a:	0f b6 10             	movzbl (%eax),%edx
40000c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c50:	88 10                	mov    %dl,(%eax)
    x /= base;
40000c52:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c55:	8b 45 08             	mov    0x8(%ebp),%eax
40000c58:	ba 00 00 00 00       	mov    $0x0,%edx
40000c5d:	f7 f3                	div    %ebx
40000c5f:	89 45 08             	mov    %eax,0x8(%ebp)
  } while (x);
40000c62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000c66:	75 c8                	jne    40000c30 <putn+0x31>
  puts(p);
40000c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c6b:	89 04 24             	mov    %eax,(%esp)
40000c6e:	e8 27 ff ff ff       	call   40000b9a <puts>
  
  return wrt;
40000c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40000c76:	83 c4 64             	add    $0x64,%esp
40000c79:	5b                   	pop    %ebx
40000c7a:	5d                   	pop    %ebp
40000c7b:	c3                   	ret    

40000c7c <printf>:

int printf(const char* fmt, ...)
{
40000c7c:	55                   	push   %ebp
40000c7d:	89 e5                	mov    %esp,%ebp
40000c7f:	83 ec 38             	sub    $0x38,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;
	int wrt = 0;
40000c82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  va_start(ap, fmt);
40000c89:	8d 45 0c             	lea    0xc(%ebp),%eax
40000c8c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while (*fmt) {
40000c8f:	e9 42 01 00 00       	jmp    40000dd6 <printf+0x15a>
    if (*fmt == '%') {
40000c94:	8b 45 08             	mov    0x8(%ebp),%eax
40000c97:	0f b6 00             	movzbl (%eax),%eax
40000c9a:	3c 25                	cmp    $0x25,%al
40000c9c:	0f 85 1c 01 00 00    	jne    40000dbe <printf+0x142>
      fmt++;
40000ca2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
40000ca6:	8b 45 08             	mov    0x8(%ebp),%eax
40000ca9:	0f b6 00             	movzbl (%eax),%eax
40000cac:	0f be c0             	movsbl %al,%eax
40000caf:	83 f8 64             	cmp    $0x64,%eax
40000cb2:	74 68                	je     40000d1c <printf+0xa0>
40000cb4:	83 f8 64             	cmp    $0x64,%eax
40000cb7:	7f 1f                	jg     40000cd8 <printf+0x5c>
40000cb9:	83 f8 25             	cmp    $0x25,%eax
40000cbc:	0f 84 c5 00 00 00    	je     40000d87 <printf+0x10b>
40000cc2:	83 f8 63             	cmp    $0x63,%eax
40000cc5:	0f 84 9d 00 00 00    	je     40000d68 <printf+0xec>
40000ccb:	85 c0                	test   %eax,%eax
40000ccd:	0f 84 13 01 00 00    	je     40000de6 <printf+0x16a>
40000cd3:	e9 c0 00 00 00       	jmp    40000d98 <printf+0x11c>
40000cd8:	83 f8 73             	cmp    $0x73,%eax
40000cdb:	74 1e                	je     40000cfb <printf+0x7f>
40000cdd:	83 f8 73             	cmp    $0x73,%eax
40000ce0:	7f 0a                	jg     40000cec <printf+0x70>
40000ce2:	83 f8 70             	cmp    $0x70,%eax
40000ce5:	74 5b                	je     40000d42 <printf+0xc6>
40000ce7:	e9 ac 00 00 00       	jmp    40000d98 <printf+0x11c>
40000cec:	83 f8 75             	cmp    $0x75,%eax
40000cef:	74 2b                	je     40000d1c <printf+0xa0>
40000cf1:	83 f8 78             	cmp    $0x78,%eax
40000cf4:	74 4c                	je     40000d42 <printf+0xc6>
40000cf6:	e9 9d 00 00 00       	jmp    40000d98 <printf+0x11c>
        case 's':
          s = va_arg(ap, char*);
40000cfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000cfe:	8d 50 04             	lea    0x4(%eax),%edx
40000d01:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d04:	8b 00                	mov    (%eax),%eax
40000d06:	89 45 f0             	mov    %eax,-0x10(%ebp)
          wrt += puts(s);
40000d09:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000d0c:	89 04 24             	mov    %eax,(%esp)
40000d0f:	e8 86 fe ff ff       	call   40000b9a <puts>
40000d14:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d17:	e9 a0 00 00 00       	jmp    40000dbc <printf+0x140>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000d1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000d1f:	8d 50 04             	lea    0x4(%eax),%edx
40000d22:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d25:	8b 00                	mov    (%eax),%eax
40000d27:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 10);
40000d2a:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
40000d31:	00 
40000d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000d35:	89 04 24             	mov    %eax,(%esp)
40000d38:	e8 c2 fe ff ff       	call   40000bff <putn>
40000d3d:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d40:	eb 7a                	jmp    40000dbc <printf+0x140>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000d42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000d45:	8d 50 04             	lea    0x4(%eax),%edx
40000d48:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d4b:	8b 00                	mov    (%eax),%eax
40000d4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 16);
40000d50:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
40000d57:	00 
40000d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000d5b:	89 04 24             	mov    %eax,(%esp)
40000d5e:	e8 9c fe ff ff       	call   40000bff <putn>
40000d63:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d66:	eb 54                	jmp    40000dbc <printf+0x140>
        case 'c':
          c = va_arg(ap, int);
40000d68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000d6b:	8d 50 04             	lea    0x4(%eax),%edx
40000d6e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d71:	8b 00                	mov    (%eax),%eax
40000d73:	88 45 eb             	mov    %al,-0x15(%ebp)
          wrt += putchar(c);
40000d76:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
40000d7a:	89 04 24             	mov    %eax,(%esp)
40000d7d:	e8 49 fd ff ff       	call   40000acb <putchar>
40000d82:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d85:	eb 35                	jmp    40000dbc <printf+0x140>
        case '%':
          wrt += putchar('%');
40000d87:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000d8e:	e8 38 fd ff ff       	call   40000acb <putchar>
40000d93:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d96:	eb 24                	jmp    40000dbc <printf+0x140>
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000d98:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000d9f:	e8 27 fd ff ff       	call   40000acb <putchar>
40000da4:	01 45 f4             	add    %eax,-0xc(%ebp)
          wrt += putchar(*fmt);
40000da7:	8b 45 08             	mov    0x8(%ebp),%eax
40000daa:	0f b6 00             	movzbl (%eax),%eax
40000dad:	0f be c0             	movsbl %al,%eax
40000db0:	89 04 24             	mov    %eax,(%esp)
40000db3:	e8 13 fd ff ff       	call   40000acb <putchar>
40000db8:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000dbb:	90                   	nop
40000dbc:	eb 14                	jmp    40000dd2 <printf+0x156>
      }
    } else {
      wrt += putchar(*fmt);
40000dbe:	8b 45 08             	mov    0x8(%ebp),%eax
40000dc1:	0f b6 00             	movzbl (%eax),%eax
40000dc4:	0f be c0             	movsbl %al,%eax
40000dc7:	89 04 24             	mov    %eax,(%esp)
40000dca:	e8 fc fc ff ff       	call   40000acb <putchar>
40000dcf:	01 45 f4             	add    %eax,-0xc(%ebp)
    }

    fmt++;
40000dd2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000dd6:	8b 45 08             	mov    0x8(%ebp),%eax
40000dd9:	0f b6 00             	movzbl (%eax),%eax
40000ddc:	84 c0                	test   %al,%al
40000dde:	0f 85 b0 fe ff ff    	jne    40000c94 <printf+0x18>
40000de4:	eb 01                	jmp    40000de7 <printf+0x16b>
          break;
        case '%':
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
40000de6:	90                   	nop
  }

out:
  va_end(ap);

  return wrt;
40000de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000dea:	c9                   	leave  
40000deb:	c3                   	ret    

40000dec <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000dec:	55                   	push   %ebp
40000ded:	89 e5                	mov    %esp,%ebp
40000def:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
40000df2:	8b 45 08             	mov    0x8(%ebp),%eax
40000df5:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
40000df8:	eb 0e                	jmp    40000e08 <memset+0x1c>
        *p++ = c;
40000dfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000dfd:	8d 50 01             	lea    0x1(%eax),%edx
40000e00:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000e03:	8b 55 0c             	mov    0xc(%ebp),%edx
40000e06:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000e08:	8b 45 10             	mov    0x10(%ebp),%eax
40000e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
40000e0e:	89 55 10             	mov    %edx,0x10(%ebp)
40000e11:	85 c0                	test   %eax,%eax
40000e13:	75 e5                	jne    40000dfa <memset+0xe>
        *p++ = c;
    }

    return buf;
40000e15:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000e18:	c9                   	leave  
40000e19:	c3                   	ret    

40000e1a <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000e1a:	55                   	push   %ebp
40000e1b:	89 e5                	mov    %esp,%ebp
40000e1d:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
40000e20:	8b 45 08             	mov    0x8(%ebp),%eax
40000e23:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
40000e26:	8b 45 0c             	mov    0xc(%ebp),%eax
40000e29:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
40000e2c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000e30:	75 07                	jne    40000e39 <memcpy+0x1f>
40000e32:	b8 00 00 00 00       	mov    $0x0,%eax
40000e37:	eb 29                	jmp    40000e62 <memcpy+0x48>

    while (n--) {
40000e39:	eb 17                	jmp    40000e52 <memcpy+0x38>
        *(d++) = *(s++);
40000e3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e3e:	8d 50 01             	lea    0x1(%eax),%edx
40000e41:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000e44:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000e47:	8d 4a 01             	lea    0x1(%edx),%ecx
40000e4a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
40000e4d:	0f b6 12             	movzbl (%edx),%edx
40000e50:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000e52:	8b 45 10             	mov    0x10(%ebp),%eax
40000e55:	8d 50 ff             	lea    -0x1(%eax),%edx
40000e58:	89 55 10             	mov    %edx,0x10(%ebp)
40000e5b:	85 c0                	test   %eax,%eax
40000e5d:	75 dc                	jne    40000e3b <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
40000e5f:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000e62:	c9                   	leave  
40000e63:	c3                   	ret    

40000e64 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000e64:	55                   	push   %ebp
40000e65:	89 e5                	mov    %esp,%ebp
40000e67:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
40000e6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000e6e:	75 07                	jne    40000e77 <memcmp+0x13>
        return -1;
40000e70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000e75:	eb 7c                	jmp    40000ef3 <memcmp+0x8f>
    if (ptr2 == 0)
40000e77:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000e7b:	75 07                	jne    40000e84 <memcmp+0x20>
        return 1;
40000e7d:	b8 01 00 00 00       	mov    $0x1,%eax
40000e82:	eb 6f                	jmp    40000ef3 <memcmp+0x8f>
    if (num == 0)
40000e84:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000e88:	75 07                	jne    40000e91 <memcmp+0x2d>
        return 0;
40000e8a:	b8 00 00 00 00       	mov    $0x0,%eax
40000e8f:	eb 62                	jmp    40000ef3 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
40000e91:	8b 45 08             	mov    0x8(%ebp),%eax
40000e94:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
40000e97:	8b 45 0c             	mov    0xc(%ebp),%eax
40000e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
40000e9d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000ea4:	eb 40                	jmp    40000ee6 <memcmp+0x82>
        if (pa[i] != pb[i]) {
40000ea6:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ea9:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000eac:	01 d0                	add    %edx,%eax
40000eae:	0f b6 10             	movzbl (%eax),%edx
40000eb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000eb4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000eb7:	01 c8                	add    %ecx,%eax
40000eb9:	0f b6 00             	movzbl (%eax),%eax
40000ebc:	38 c2                	cmp    %al,%dl
40000ebe:	74 22                	je     40000ee2 <memcmp+0x7e>
            return pa[i] - pb[i];
40000ec0:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ec3:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000ec6:	01 d0                	add    %edx,%eax
40000ec8:	0f b6 00             	movzbl (%eax),%eax
40000ecb:	0f b6 d0             	movzbl %al,%edx
40000ece:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ed1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000ed4:	01 c8                	add    %ecx,%eax
40000ed6:	0f b6 00             	movzbl (%eax),%eax
40000ed9:	0f b6 c0             	movzbl %al,%eax
40000edc:	29 c2                	sub    %eax,%edx
40000ede:	89 d0                	mov    %edx,%eax
40000ee0:	eb 11                	jmp    40000ef3 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000ee2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ee9:	3b 45 10             	cmp    0x10(%ebp),%eax
40000eec:	72 b8                	jb     40000ea6 <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
40000eee:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000ef3:	c9                   	leave  
40000ef4:	c3                   	ret    

40000ef5 <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000ef5:	55                   	push   %ebp
40000ef6:	89 e5                	mov    %esp,%ebp
40000ef8:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
40000efb:	8b 45 08             	mov    0x8(%ebp),%eax
40000efe:	89 04 24             	mov    %eax,(%esp)
40000f01:	e8 3c 00 00 00       	call   40000f42 <strlen>
40000f06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
40000f09:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f0c:	89 04 24             	mov    %eax,(%esp)
40000f0f:	e8 2e 00 00 00       	call   40000f42 <strlen>
40000f14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
40000f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000f1a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
40000f1d:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
40000f21:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40000f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000f27:	83 c0 01             	add    $0x1,%eax
40000f2a:	89 44 24 08          	mov    %eax,0x8(%esp)
40000f2e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f31:	89 44 24 04          	mov    %eax,0x4(%esp)
40000f35:	8b 45 08             	mov    0x8(%ebp),%eax
40000f38:	89 04 24             	mov    %eax,(%esp)
40000f3b:	e8 24 ff ff ff       	call   40000e64 <memcmp>
}
40000f40:	c9                   	leave  
40000f41:	c3                   	ret    

40000f42 <strlen>:

unsigned int strlen(const char* str) {
40000f42:	55                   	push   %ebp
40000f43:	89 e5                	mov    %esp,%ebp
40000f45:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
40000f48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000f4c:	75 07                	jne    40000f55 <strlen+0x13>
        return 0;
40000f4e:	b8 00 00 00 00       	mov    $0x0,%eax
40000f53:	eb 1f                	jmp    40000f74 <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000f55:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000f5c:	eb 04                	jmp    40000f62 <strlen+0x20>
40000f5e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000f62:	8b 55 fc             	mov    -0x4(%ebp),%edx
40000f65:	8b 45 08             	mov    0x8(%ebp),%eax
40000f68:	01 d0                	add    %edx,%eax
40000f6a:	0f b6 00             	movzbl (%eax),%eax
40000f6d:	84 c0                	test   %al,%al
40000f6f:	75 ed                	jne    40000f5e <strlen+0x1c>
        ;
    return i;
40000f71:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
40000f74:	c9                   	leave  
40000f75:	c3                   	ret    

40000f76 <strcpy>:

char* strcpy(char* dest, const char* src) {
40000f76:	55                   	push   %ebp
40000f77:	89 e5                	mov    %esp,%ebp
40000f79:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
40000f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f7f:	89 04 24             	mov    %eax,(%esp)
40000f82:	e8 bb ff ff ff       	call   40000f42 <strlen>
40000f87:	83 c0 01             	add    $0x1,%eax
40000f8a:	89 44 24 08          	mov    %eax,0x8(%esp)
40000f8e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f91:	89 44 24 04          	mov    %eax,0x4(%esp)
40000f95:	8b 45 08             	mov    0x8(%ebp),%eax
40000f98:	89 04 24             	mov    %eax,(%esp)
40000f9b:	e8 7a fe ff ff       	call   40000e1a <memcpy>
    return dest;
40000fa0:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000fa3:	c9                   	leave  
40000fa4:	c3                   	ret    

40000fa5 <strclone>:

char* strclone(char* str) {
40000fa5:	55                   	push   %ebp
40000fa6:	89 e5                	mov    %esp,%ebp
40000fa8:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000fab:	8b 45 08             	mov    0x8(%ebp),%eax
40000fae:	89 04 24             	mov    %eax,(%esp)
40000fb1:	e8 8c ff ff ff       	call   40000f42 <strlen>
40000fb6:	83 c0 01             	add    $0x1,%eax
40000fb9:	89 04 24             	mov    %eax,(%esp)
40000fbc:	e8 ab 03 00 00       	call   4000136c <malloc>
40000fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
40000fc4:	8b 45 08             	mov    0x8(%ebp),%eax
40000fc7:	89 44 24 04          	mov    %eax,0x4(%esp)
40000fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000fce:	89 04 24             	mov    %eax,(%esp)
40000fd1:	e8 a0 ff ff ff       	call   40000f76 <strcpy>

    return ret;
40000fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000fd9:	c9                   	leave  
40000fda:	c3                   	ret    

40000fdb <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
40000fdb:	55                   	push   %ebp
40000fdc:	89 e5                	mov    %esp,%ebp
40000fde:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40000fe1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000fe5:	74 3c                	je     40001023 <strtok+0x48>
        if(fr != 0) {
40000fe7:	a1 04 32 00 40       	mov    0x40003204,%eax
40000fec:	85 c0                	test   %eax,%eax
40000fee:	74 0d                	je     40000ffd <strtok+0x22>
            free(fr);
40000ff0:	a1 04 32 00 40       	mov    0x40003204,%eax
40000ff5:	89 04 24             	mov    %eax,(%esp)
40000ff8:	e8 ac 05 00 00       	call   400015a9 <free>
        }
        fr = strclone(str);
40000ffd:	8b 45 08             	mov    0x8(%ebp),%eax
40001000:	89 04 24             	mov    %eax,(%esp)
40001003:	e8 9d ff ff ff       	call   40000fa5 <strclone>
40001008:	a3 04 32 00 40       	mov    %eax,0x40003204
        return strtoknc(fr, delimiters);
4000100d:	a1 04 32 00 40       	mov    0x40003204,%eax
40001012:	8b 55 0c             	mov    0xc(%ebp),%edx
40001015:	89 54 24 04          	mov    %edx,0x4(%esp)
40001019:	89 04 24             	mov    %eax,(%esp)
4000101c:	e8 17 00 00 00       	call   40001038 <strtoknc>
40001021:	eb 13                	jmp    40001036 <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
40001023:	8b 45 0c             	mov    0xc(%ebp),%eax
40001026:	89 44 24 04          	mov    %eax,0x4(%esp)
4000102a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40001031:	e8 02 00 00 00       	call   40001038 <strtoknc>
}
40001036:	c9                   	leave  
40001037:	c3                   	ret    

40001038 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
40001038:	55                   	push   %ebp
40001039:	89 e5                	mov    %esp,%ebp
4000103b:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
4000103e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
40001045:	8b 45 0c             	mov    0xc(%ebp),%eax
40001048:	89 04 24             	mov    %eax,(%esp)
4000104b:	e8 f2 fe ff ff       	call   40000f42 <strlen>
40001050:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
40001053:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001057:	75 0a                	jne    40001063 <strtoknc+0x2b>
        return 0;
40001059:	b8 00 00 00 00       	mov    $0x0,%eax
4000105e:	e9 ef 00 00 00       	jmp    40001152 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
40001063:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001067:	75 13                	jne    4000107c <strtoknc+0x44>
40001069:	a1 00 32 00 40       	mov    0x40003200,%eax
4000106e:	85 c0                	test   %eax,%eax
40001070:	75 0a                	jne    4000107c <strtoknc+0x44>
        return 0;
40001072:	b8 00 00 00 00       	mov    $0x0,%eax
40001077:	e9 d6 00 00 00       	jmp    40001152 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
4000107c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001080:	74 08                	je     4000108a <strtoknc+0x52>
        sp = str;
40001082:	8b 45 08             	mov    0x8(%ebp),%eax
40001085:	a3 00 32 00 40       	mov    %eax,0x40003200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
4000108a:	a1 00 32 00 40       	mov    0x40003200,%eax
4000108f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
40001092:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40001099:	eb 1f                	jmp    400010ba <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
4000109b:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000109e:	0f b6 10             	movzbl (%eax),%edx
400010a1:	8b 4d fc             	mov    -0x4(%ebp),%ecx
400010a4:	8b 45 0c             	mov    0xc(%ebp),%eax
400010a7:	01 c8                	add    %ecx,%eax
400010a9:	0f b6 00             	movzbl (%eax),%eax
400010ac:	38 c2                	cmp    %al,%dl
400010ae:	75 06                	jne    400010b6 <strtoknc+0x7e>
                p_start++;
400010b0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
400010b4:	eb 0c                	jmp    400010c2 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
400010b6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
400010ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
400010bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400010c0:	7c d9                	jl     4000109b <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
400010c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
400010c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400010c8:	75 17                	jne    400010e1 <strtoknc+0xa9>
            sp = p_start;
400010ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
400010cd:	a3 00 32 00 40       	mov    %eax,0x40003200
            break;
400010d2:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
400010d3:	a1 00 32 00 40       	mov    0x40003200,%eax
400010d8:	0f b6 00             	movzbl (%eax),%eax
400010db:	84 c0                	test   %al,%al
400010dd:	75 15                	jne    400010f4 <strtoknc+0xbc>
400010df:	eb 02                	jmp    400010e3 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
400010e1:	eb af                	jmp    40001092 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
400010e3:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
400010ea:	00 00 00 
        return sp;
400010ed:	a1 00 32 00 40       	mov    0x40003200,%eax
400010f2:	eb 5e                	jmp    40001152 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400010f4:	eb 4d                	jmp    40001143 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
400010f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
400010fd:	eb 25                	jmp    40001124 <strtoknc+0xec>
            if (*sp == delimiters[i]) {
400010ff:	a1 00 32 00 40       	mov    0x40003200,%eax
40001104:	0f b6 10             	movzbl (%eax),%edx
40001107:	8b 4d fc             	mov    -0x4(%ebp),%ecx
4000110a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000110d:	01 c8                	add    %ecx,%eax
4000110f:	0f b6 00             	movzbl (%eax),%eax
40001112:	38 c2                	cmp    %al,%dl
40001114:	75 0a                	jne    40001120 <strtoknc+0xe8>
                *sp = '\0';
40001116:	a1 00 32 00 40       	mov    0x40003200,%eax
4000111b:	c6 00 00             	movb   $0x0,(%eax)
                break;
4000111e:	eb 0c                	jmp    4000112c <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
40001120:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40001124:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001127:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000112a:	7c d3                	jl     400010ff <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
4000112c:	a1 00 32 00 40       	mov    0x40003200,%eax
40001131:	83 c0 01             	add    $0x1,%eax
40001134:	a3 00 32 00 40       	mov    %eax,0x40003200
        if (i < len)
40001139:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000113c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000113f:	7d 02                	jge    40001143 <strtoknc+0x10b>
            break;
40001141:	eb 0c                	jmp    4000114f <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
40001143:	a1 00 32 00 40       	mov    0x40003200,%eax
40001148:	0f b6 00             	movzbl (%eax),%eax
4000114b:	84 c0                	test   %al,%al
4000114d:	75 a7                	jne    400010f6 <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
4000114f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
40001152:	c9                   	leave  
40001153:	c3                   	ret    

40001154 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
40001154:	55                   	push   %ebp
40001155:	89 e5                	mov    %esp,%ebp
40001157:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
4000115a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
40001161:	8b 45 08             	mov    0x8(%ebp),%eax
40001164:	8b 00                	mov    (%eax),%eax
40001166:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
40001169:	eb 38                	jmp    400011a3 <remove_from_list+0x4f>
        if (cur == element) {
4000116b:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000116e:	3b 45 0c             	cmp    0xc(%ebp),%eax
40001171:	75 21                	jne    40001194 <remove_from_list+0x40>
            if (last == 0) {
40001173:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001177:	75 0d                	jne    40001186 <remove_from_list+0x32>
                *root = cur->next;
40001179:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000117c:	8b 50 08             	mov    0x8(%eax),%edx
4000117f:	8b 45 08             	mov    0x8(%ebp),%eax
40001182:	89 10                	mov    %edx,(%eax)
                return;
40001184:	eb 23                	jmp    400011a9 <remove_from_list+0x55>
            } else {
                last->next = cur->next;
40001186:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001189:	8b 50 08             	mov    0x8(%eax),%edx
4000118c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000118f:	89 50 08             	mov    %edx,0x8(%eax)
                return;
40001192:	eb 15                	jmp    400011a9 <remove_from_list+0x55>
            }
        }
        last = cur;
40001194:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001197:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
4000119a:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000119d:	8b 40 08             	mov    0x8(%eax),%eax
400011a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
400011a3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
400011a7:	75 c2                	jne    4000116b <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
400011a9:	c9                   	leave  
400011aa:	c3                   	ret    

400011ab <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
400011ab:	55                   	push   %ebp
400011ac:	89 e5                	mov    %esp,%ebp
    element->next = *root;
400011ae:	8b 45 08             	mov    0x8(%ebp),%eax
400011b1:	8b 10                	mov    (%eax),%edx
400011b3:	8b 45 0c             	mov    0xc(%ebp),%eax
400011b6:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
400011b9:	8b 45 08             	mov    0x8(%ebp),%eax
400011bc:	8b 55 0c             	mov    0xc(%ebp),%edx
400011bf:	89 10                	mov    %edx,(%eax)
}
400011c1:	5d                   	pop    %ebp
400011c2:	c3                   	ret    

400011c3 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
400011c3:	55                   	push   %ebp
400011c4:	89 e5                	mov    %esp,%ebp
400011c6:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
400011c9:	8b 45 08             	mov    0x8(%ebp),%eax
400011cc:	8b 00                	mov    (%eax),%eax
400011ce:	85 c0                	test   %eax,%eax
400011d0:	75 07                	jne    400011d9 <pop_from_list+0x16>
        return 0;
400011d2:	b8 00 00 00 00       	mov    $0x0,%eax
400011d7:	eb 1d                	jmp    400011f6 <pop_from_list+0x33>
    struct memory_node* pop = *root;
400011d9:	8b 45 08             	mov    0x8(%ebp),%eax
400011dc:	8b 00                	mov    (%eax),%eax
400011de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
400011e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011e4:	89 44 24 04          	mov    %eax,0x4(%esp)
400011e8:	8b 45 08             	mov    0x8(%ebp),%eax
400011eb:	89 04 24             	mov    %eax,(%esp)
400011ee:	e8 61 ff ff ff       	call   40001154 <remove_from_list>
    return pop;
400011f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
400011f6:	c9                   	leave  
400011f7:	c3                   	ret    

400011f8 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
400011f8:	55                   	push   %ebp
400011f9:	89 e5                	mov    %esp,%ebp
400011fb:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
400011fe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40001205:	e8 e7 03 00 00       	call   400015f1 <vmm_alloc_cont>
4000120a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
4000120d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
40001214:	00 
40001215:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
4000121c:	00 
4000121d:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001220:	89 04 24             	mov    %eax,(%esp)
40001223:	e8 c4 fb ff ff       	call   40000dec <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40001228:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
4000122f:	eb 27                	jmp    40001258 <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
40001231:	8b 55 f4             	mov    -0xc(%ebp),%edx
40001234:	89 d0                	mov    %edx,%eax
40001236:	01 c0                	add    %eax,%eax
40001238:	01 d0                	add    %edx,%eax
4000123a:	c1 e0 02             	shl    $0x2,%eax
4000123d:	89 c2                	mov    %eax,%edx
4000123f:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001242:	01 d0                	add    %edx,%eax
40001244:	89 44 24 04          	mov    %eax,0x4(%esp)
40001248:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
4000124f:	e8 57 ff ff ff       	call   400011ab <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40001254:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
40001258:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
4000125f:	76 d0                	jbe    40001231 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
40001261:	c9                   	leave  
40001262:	c3                   	ret    

40001263 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
40001263:	55                   	push   %ebp
40001264:	89 e5                	mov    %esp,%ebp
40001266:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
40001269:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001270:	e8 4e ff ff ff       	call   400011c3 <pop_from_list>
40001275:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
40001278:	eb 14                	jmp    4000128e <pop_unused_node+0x2b>
        allocate_unused_nodes();
4000127a:	e8 79 ff ff ff       	call   400011f8 <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
4000127f:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001286:	e8 38 ff ff ff       	call   400011c3 <pop_from_list>
4000128b:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
4000128e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001292:	74 e6                	je     4000127a <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
40001294:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40001297:	c9                   	leave  
40001298:	c3                   	ret    

40001299 <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
40001299:	55                   	push   %ebp
4000129a:	89 e5                	mov    %esp,%ebp
4000129c:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
4000129f:	8b 45 08             	mov    0x8(%ebp),%eax
400012a2:	89 44 24 04          	mov    %eax,0x4(%esp)
400012a6:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
400012ad:	e8 a2 fe ff ff       	call   40001154 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
400012b2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    cur = first_free;
400012b9:	a1 10 32 00 40       	mov    0x40003210,%eax
400012be:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
400012c1:	e9 87 00 00 00       	jmp    4000134d <merge_into_frees+0xb4>
        if (cur->address + cur->size == tf->address) {
400012c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012c9:	8b 50 04             	mov    0x4(%eax),%edx
400012cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012cf:	8b 00                	mov    (%eax),%eax
400012d1:	01 c2                	add    %eax,%edx
400012d3:	8b 45 08             	mov    0x8(%ebp),%eax
400012d6:	8b 40 04             	mov    0x4(%eax),%eax
400012d9:	39 c2                	cmp    %eax,%edx
400012db:	75 21                	jne    400012fe <merge_into_frees+0x65>
            tf->address = cur->address;
400012dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012e0:	8b 50 04             	mov    0x4(%eax),%edx
400012e3:	8b 45 08             	mov    0x8(%ebp),%eax
400012e6:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
400012e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012ec:	89 44 24 04          	mov    %eax,0x4(%esp)
400012f0:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400012f7:	e8 58 fe ff ff       	call   40001154 <remove_from_list>
            goto editedList;
400012fc:	eb b4                	jmp    400012b2 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
400012fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001301:	8b 50 04             	mov    0x4(%eax),%edx
40001304:	8b 45 08             	mov    0x8(%ebp),%eax
40001307:	8b 48 04             	mov    0x4(%eax),%ecx
4000130a:	8b 45 08             	mov    0x8(%ebp),%eax
4000130d:	8b 00                	mov    (%eax),%eax
4000130f:	01 c8                	add    %ecx,%eax
40001311:	39 c2                	cmp    %eax,%edx
40001313:	75 29                	jne    4000133e <merge_into_frees+0xa5>
            tf->size += cur->size;
40001315:	8b 45 08             	mov    0x8(%ebp),%eax
40001318:	8b 10                	mov    (%eax),%edx
4000131a:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000131d:	8b 00                	mov    (%eax),%eax
4000131f:	01 c2                	add    %eax,%edx
40001321:	8b 45 08             	mov    0x8(%ebp),%eax
40001324:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
40001326:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001329:	89 44 24 04          	mov    %eax,0x4(%esp)
4000132d:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001334:	e8 1b fe ff ff       	call   40001154 <remove_from_list>
            goto editedList;
40001339:	e9 74 ff ff ff       	jmp    400012b2 <merge_into_frees+0x19>
        }

        last = cur;
4000133e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001341:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
40001344:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001347:	8b 40 08             	mov    0x8(%eax),%eax
4000134a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
4000134d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001351:	0f 85 6f ff ff ff    	jne    400012c6 <merge_into_frees+0x2d>

        last = cur;
        cur = cur->next;
    }

    append_to_list(&first_free, tf);
40001357:	8b 45 08             	mov    0x8(%ebp),%eax
4000135a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000135e:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001365:	e8 41 fe ff ff       	call   400011ab <append_to_list>
}
4000136a:	c9                   	leave  
4000136b:	c3                   	ret    

4000136c <malloc>:

void* malloc(size_t size) {
4000136c:	55                   	push   %ebp
4000136d:	89 e5                	mov    %esp,%ebp
4000136f:	83 ec 38             	sub    $0x38,%esp
    struct memory_node* last = 0;
40001372:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    struct memory_node* cur = first_free;
40001379:	a1 10 32 00 40       	mov    0x40003210,%eax
4000137e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001381:	eb 1b                	jmp    4000139e <malloc+0x32>
        if (cur->size >= size) {
40001383:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001386:	8b 00                	mov    (%eax),%eax
40001388:	3b 45 08             	cmp    0x8(%ebp),%eax
4000138b:	72 02                	jb     4000138f <malloc+0x23>
            break;
4000138d:	eb 15                	jmp    400013a4 <malloc+0x38>
        }
        last = cur;
4000138f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001392:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cur = cur->next;
40001395:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001398:	8b 40 08             	mov    0x8(%eax),%eax
4000139b:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
4000139e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400013a2:	75 df                	jne    40001383 <malloc+0x17>
        }
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
400013a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400013a8:	0f 85 a4 00 00 00    	jne    40001452 <malloc+0xe6>
        uint32_t pgs = size / PAGESIZE;
400013ae:	8b 45 08             	mov    0x8(%ebp),%eax
400013b1:	c1 e8 0c             	shr    $0xc,%eax
400013b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
400013b7:	8b 45 08             	mov    0x8(%ebp),%eax
400013ba:	25 ff 0f 00 00       	and    $0xfff,%eax
400013bf:	85 c0                	test   %eax,%eax
400013c1:	74 04                	je     400013c7 <malloc+0x5b>
            pgs++;
400013c3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
400013c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
400013ca:	89 04 24             	mov    %eax,(%esp)
400013cd:	e8 1f 02 00 00       	call   400015f1 <vmm_alloc_cont>
400013d2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
400013d5:	e8 89 fe ff ff       	call   40001263 <pop_unused_node>
400013da:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
400013dd:	8b 55 e8             	mov    -0x18(%ebp),%edx
400013e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400013e3:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
400013e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400013e9:	8b 55 08             	mov    0x8(%ebp),%edx
400013ec:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
400013ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
400013f1:	c1 e0 0c             	shl    $0xc,%eax
400013f4:	3b 45 08             	cmp    0x8(%ebp),%eax
400013f7:	76 3e                	jbe    40001437 <malloc+0xcb>
            struct memory_node* free = pop_unused_node();
400013f9:	e8 65 fe ff ff       	call   40001263 <pop_unused_node>
400013fe:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
40001401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001404:	8b 50 04             	mov    0x4(%eax),%edx
40001407:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000140a:	8b 00                	mov    (%eax),%eax
4000140c:	01 c2                	add    %eax,%edx
4000140e:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001411:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
40001414:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001417:	c1 e0 0c             	shl    $0xc,%eax
4000141a:	2b 45 08             	sub    0x8(%ebp),%eax
4000141d:	89 c2                	mov    %eax,%edx
4000141f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001422:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
40001424:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001427:	89 44 24 04          	mov    %eax,0x4(%esp)
4000142b:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001432:	e8 74 fd ff ff       	call   400011ab <append_to_list>
        }

        append_to_list(&first_used, fill);
40001437:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000143a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000143e:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001445:	e8 61 fd ff ff       	call   400011ab <append_to_list>

        return (void*) fill->address;
4000144a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000144d:	8b 40 04             	mov    0x4(%eax),%eax
40001450:	eb 7b                	jmp    400014cd <malloc+0x161>
    } else {
        uint32_t freesize = cur->size - size;
40001452:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001455:	8b 00                	mov    (%eax),%eax
40001457:	2b 45 08             	sub    0x8(%ebp),%eax
4000145a:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
4000145d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001460:	8b 55 08             	mov    0x8(%ebp),%edx
40001463:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
40001465:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001468:	89 44 24 04          	mov    %eax,0x4(%esp)
4000146c:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001473:	e8 dc fc ff ff       	call   40001154 <remove_from_list>
        append_to_list(&first_used, cur);
40001478:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000147b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000147f:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001486:	e8 20 fd ff ff       	call   400011ab <append_to_list>

        if (freesize > 0) {
4000148b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
4000148f:	74 36                	je     400014c7 <malloc+0x15b>
            struct memory_node* free = pop_unused_node();
40001491:	e8 cd fd ff ff       	call   40001263 <pop_unused_node>
40001496:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
40001499:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000149c:	8b 50 04             	mov    0x4(%eax),%edx
4000149f:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014a2:	8b 00                	mov    (%eax),%eax
400014a4:	01 c2                	add    %eax,%edx
400014a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
400014a9:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
400014ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
400014af:	8b 55 dc             	mov    -0x24(%ebp),%edx
400014b2:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
400014b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
400014b7:	89 44 24 04          	mov    %eax,0x4(%esp)
400014bb:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400014c2:	e8 e4 fc ff ff       	call   400011ab <append_to_list>
        }

        return (void*) cur->address;
400014c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014ca:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
400014cd:	c9                   	leave  
400014ce:	c3                   	ret    

400014cf <calloc>:

void* calloc(size_t num, size_t size) {
400014cf:	55                   	push   %ebp
400014d0:	89 e5                	mov    %esp,%ebp
400014d2:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
400014d5:	8b 45 08             	mov    0x8(%ebp),%eax
400014d8:	0f af 45 0c          	imul   0xc(%ebp),%eax
400014dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
400014df:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014e2:	89 04 24             	mov    %eax,(%esp)
400014e5:	e8 82 fe ff ff       	call   4000136c <malloc>
400014ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
400014ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400014f1:	74 1a                	je     4000150d <calloc+0x3e>
        memset(p, 0, gsize);
400014f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014f6:	89 44 24 08          	mov    %eax,0x8(%esp)
400014fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40001501:	00 
40001502:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001505:	89 04 24             	mov    %eax,(%esp)
40001508:	e8 df f8 ff ff       	call   40000dec <memset>
    }

    return p;
4000150d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40001510:	c9                   	leave  
40001511:	c3                   	ret    

40001512 <realloc>:

void* realloc(void* ptr, size_t size) {
40001512:	55                   	push   %ebp
40001513:	89 e5                	mov    %esp,%ebp
40001515:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* last = 0;
40001518:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
4000151f:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001524:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001527:	eb 73                	jmp    4000159c <realloc+0x8a>
        if (cur->address == (uint32_t) ptr) {
40001529:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000152c:	8b 50 04             	mov    0x4(%eax),%edx
4000152f:	8b 45 08             	mov    0x8(%ebp),%eax
40001532:	39 c2                	cmp    %eax,%edx
40001534:	75 57                	jne    4000158d <realloc+0x7b>
            if (size == 0) {
40001536:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
4000153a:	75 12                	jne    4000154e <realloc+0x3c>
                free(ptr);
4000153c:	8b 45 08             	mov    0x8(%ebp),%eax
4000153f:	89 04 24             	mov    %eax,(%esp)
40001542:	e8 62 00 00 00       	call   400015a9 <free>
                return 0;
40001547:	b8 00 00 00 00       	mov    $0x0,%eax
4000154c:	eb 59                	jmp    400015a7 <realloc+0x95>
            } else {
                void* new = malloc(size);
4000154e:	8b 45 0c             	mov    0xc(%ebp),%eax
40001551:	89 04 24             	mov    %eax,(%esp)
40001554:	e8 13 fe ff ff       	call   4000136c <malloc>
40001559:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
4000155c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000155f:	8b 10                	mov    (%eax),%edx
40001561:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001564:	8b 40 04             	mov    0x4(%eax),%eax
40001567:	89 54 24 08          	mov    %edx,0x8(%esp)
4000156b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000156f:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001572:	89 04 24             	mov    %eax,(%esp)
40001575:	e8 a0 f8 ff ff       	call   40000e1a <memcpy>
                free((void*) cur->address);
4000157a:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000157d:	8b 40 04             	mov    0x4(%eax),%eax
40001580:	89 04 24             	mov    %eax,(%esp)
40001583:	e8 21 00 00 00       	call   400015a9 <free>

                return new;
40001588:	8b 45 ec             	mov    -0x14(%ebp),%eax
4000158b:	eb 1a                	jmp    400015a7 <realloc+0x95>
            }
        }
        last = cur;
4000158d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001590:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
40001593:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001596:	8b 40 08             	mov    0x8(%eax),%eax
40001599:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000159c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400015a0:	75 87                	jne    40001529 <realloc+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
400015a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
400015a7:	c9                   	leave  
400015a8:	c3                   	ret    

400015a9 <free>:

void free(void* ptr) {
400015a9:	55                   	push   %ebp
400015aa:	89 e5                	mov    %esp,%ebp
400015ac:	83 ec 14             	sub    $0x14,%esp
    struct memory_node* last = 0;
400015af:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
400015b6:	a1 0c 32 00 40       	mov    0x4000320c,%eax
400015bb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
400015be:	eb 29                	jmp    400015e9 <free+0x40>
        if (cur->address == (uint32_t) ptr) {
400015c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015c3:	8b 50 04             	mov    0x4(%eax),%edx
400015c6:	8b 45 08             	mov    0x8(%ebp),%eax
400015c9:	39 c2                	cmp    %eax,%edx
400015cb:	75 0d                	jne    400015da <free+0x31>
            merge_into_frees(cur);
400015cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015d0:	89 04 24             	mov    %eax,(%esp)
400015d3:	e8 c1 fc ff ff       	call   40001299 <merge_into_frees>
            break;
400015d8:	eb 15                	jmp    400015ef <free+0x46>
        }
        last = cur;
400015da:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
400015e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015e3:	8b 40 08             	mov    0x8(%eax),%eax
400015e6:	89 45 fc             	mov    %eax,-0x4(%ebp)

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
400015e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400015ed:	75 d1                	jne    400015c0 <free+0x17>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
400015ef:	c9                   	leave  
400015f0:	c3                   	ret    

400015f1 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
400015f1:	55                   	push   %ebp
400015f2:	89 e5                	mov    %esp,%ebp
400015f4:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400015f7:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400015fe:	8b 45 08             	mov    0x8(%ebp),%eax
40001601:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001604:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000160b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001612:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001619:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001620:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001623:	89 04 24             	mov    %eax,(%esp)
40001626:	e8 7e 00 00 00       	call   400016a9 <syscall>
  
  return (void*)state.eax;
4000162b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000162e:	c9                   	leave  
4000162f:	c3                   	ret    

40001630 <vmm_free>:

void vmm_free (void* vaddr) {
40001630:	55                   	push   %ebp
40001631:	89 e5                	mov    %esp,%ebp
40001633:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001636:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
    .eax = 204,
    .ebx = (uint32_t)vaddr,
4000163d:	8b 45 08             	mov    0x8(%ebp),%eax
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
  struct regstate state = {
40001640:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001643:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000164a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001651:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001658:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
4000165f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001662:	89 04 24             	mov    %eax,(%esp)
40001665:	e8 3f 00 00 00       	call   400016a9 <syscall>
}
4000166a:	c9                   	leave  
4000166b:	c3                   	ret    

4000166c <print_memstat>:

void print_memstat() {
4000166c:	55                   	push   %ebp
4000166d:	89 e5                	mov    %esp,%ebp
4000166f:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001672:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
40001679:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001680:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001687:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000168e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001695:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
4000169c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000169f:	89 04 24             	mov    %eax,(%esp)
400016a2:	e8 02 00 00 00       	call   400016a9 <syscall>
}
400016a7:	c9                   	leave  
400016a8:	c3                   	ret    

400016a9 <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
400016a9:	55                   	push   %ebp
400016aa:	89 e5                	mov    %esp,%ebp
400016ac:	57                   	push   %edi
400016ad:	56                   	push   %esi
400016ae:	53                   	push   %ebx
400016af:	83 ec 08             	sub    $0x8,%esp
			"=c" (state->ecx),
			"=d" (state->edx),
			"=S" (state->esi),
			"=D" (state->edi)

			: "a" (state->eax),
400016b2:	8b 45 08             	mov    0x8(%ebp),%eax
400016b5:	8b 00                	mov    (%eax),%eax
			"b" (state->ebx),
400016b7:	8b 55 08             	mov    0x8(%ebp),%edx
400016ba:	8b 5a 04             	mov    0x4(%edx),%ebx
			"c" (state->ecx),
400016bd:	8b 55 08             	mov    0x8(%ebp),%edx
400016c0:	8b 4a 08             	mov    0x8(%edx),%ecx
			"d" (state->edx),
400016c3:	8b 55 08             	mov    0x8(%ebp),%edx
400016c6:	8b 52 0c             	mov    0xc(%edx),%edx
			"S" (state->esi),
400016c9:	8b 75 08             	mov    0x8(%ebp),%esi
400016cc:	8b 76 10             	mov    0x10(%esi),%esi
			"D" (state->edi));
400016cf:	8b 7d 08             	mov    0x8(%ebp),%edi
400016d2:	8b 7f 14             	mov    0x14(%edi),%edi
#include "syscall.h"

void syscall(struct regstate* state) {
	asm("int $0x30"
400016d5:	cd 30                	int    $0x30
400016d7:	89 55 ec             	mov    %edx,-0x14(%ebp)
400016da:	89 45 f0             	mov    %eax,-0x10(%ebp)
400016dd:	8b 45 08             	mov    0x8(%ebp),%eax
400016e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
400016e3:	89 10                	mov    %edx,(%eax)
400016e5:	8b 45 08             	mov    0x8(%ebp),%eax
400016e8:	89 58 04             	mov    %ebx,0x4(%eax)
400016eb:	8b 45 08             	mov    0x8(%ebp),%eax
400016ee:	89 48 08             	mov    %ecx,0x8(%eax)
400016f1:	8b 45 08             	mov    0x8(%ebp),%eax
400016f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
400016f7:	89 50 0c             	mov    %edx,0xc(%eax)
400016fa:	8b 45 08             	mov    0x8(%ebp),%eax
400016fd:	89 70 10             	mov    %esi,0x10(%eax)
40001700:	8b 45 08             	mov    0x8(%ebp),%eax
40001703:	89 78 14             	mov    %edi,0x14(%eax)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
40001706:	83 c4 08             	add    $0x8,%esp
40001709:	5b                   	pop    %ebx
4000170a:	5e                   	pop    %esi
4000170b:	5f                   	pop    %edi
4000170c:	5d                   	pop    %ebp
4000170d:	c3                   	ret    
