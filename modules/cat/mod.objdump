
../../initrfs/ibin/cat:     file format elf32-i386
../../initrfs/ibin/cat
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000059e

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x0000220e memsz 0x0000220e flags r-x
    LOAD off    0x00004000 vaddr 0x40003000 paddr 0x40003000 align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001374  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000084  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.1 0000018a  40002084  40002084  00003084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000214  40003000  40003000  00004000  2**2
                  ALLOC
  4 .stab         00004ab8  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00007cc8  2**0
                  CONTENTS, READONLY
  6 .stabstr      00001868  00000000  00000000  00007d46  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .rodata	00000000 .rodata
40002084 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40003000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 cat.c
00000000 l    df *ABS*	00000000 process.c
40003000 l     O .bss	00000200 irq_handlers
4000206c l     O .rodata	00000018 C.7.1019
40000610 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
400006d0 l     F .text	00000047 resolveHandle
40000b80 l     F .text	0000004a printrwerror
400009cd l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40001074 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
40000394 g     F .text	0000003d getExecPath
40000a84 g     F .text	00000014 putchar
40000e31 g     F .text	00000033 strcpy
40000417 g     F .text	0000003e yield
40000a98 g     F .text	000000e8 printf
40001324 g     F .text	00000050 syscall
40000c95 g     F .text	00000042 fgets
40000c89 g     F .text	0000000c getc
40000d60 g     F .text	00000026 memcpy
400009bb g     F .text	00000012 puts
40000455 g     F .text	0000003d pexists
400010dd g     F .text	000000f8 malloc
400004ea g     F .text	0000003d fetch_rpc_data
40000e64 g     F .text	000000a5 strtoknc
4000032a g     F .text	0000003d changeExecPath
40003210 g     O .bss	00000004 first_free
400002b7 g     F .text	00000037 dexec
4000086a g     F .text	00000012 setstdout
40001235 g     F .text	00000034 calloc
400002ee g     F .text	0000003c getExecPathChild
400012e7 g     F .text	0000003d vmm_alloc_cont
40000245 g     F .text	0000003b exec
4000059e g     F .text	00000072 _start
400011d5 g     F .text	00000060 realloc
40000561 g     F .text	0000003d set_rpc_handler
40000f42 g     F .text	00000052 strtok
40000d86 g     F .text	00000047 memcmp
40000280 g     F .text	00000037 sexec
40000bca g     F .text	00000085 fread
40003208 g     O .bss	00000004 first_unused
400007ce g     F .text	0000003c fopen
40000d44 g     F .text	0000001c memset
40000000 g     F .text	000001d4 main
40000791 g     F .text	0000003d fclose
40000c7a g     F .text	0000000f getchar
40000cd7 g     F .text	0000006c getln
40003204 g     O .bss	00000004 fr
40000754 g     F .text	0000003d favailable
40000a71 g     F .text	00000013 putc
40000dcd g     F .text	00000049 strcmp
40000c4f g     F .text	0000002b fgetc
40003200 g     O .bss	00000004 sp
40000367 g     F .text	0000002d cd
4000320c g     O .bss	00000004 first_used
40000a0c g     F .text	00000065 fputc
400008ba g     F .text	00000093 fwrite
40000858 g     F .text	00000012 setstdin
40000f09 g     F .text	00000039 strclone
400003d1 g     F .text	00000046 exit
40000492 g     F .text	00000058 register_irq_handler
4000080a g     F .text	0000003c fopenpmhandle
400012aa g     F .text	0000003d vmm_free
400001d4 g     F .text	00000071 printFilesystemError
40000e16 g     F .text	0000001b strlen
4000087c g     F .text	0000003e getLastVFSErr
4000094d g     F .text	0000006e fputs
40000717 g     F .text	0000003d fmkfifo
40000527 g     F .text	0000003a call_rpc
40000846 g     F .text	00000012 setstderr
4000126c g     F .text	0000003e print_memstat
40000f94 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <main>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
{
40000000:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000004:	83 e4 f0             	and    $0xfffffff0,%esp
40000007:	ff 71 fc             	pushl  -0x4(%ecx)
4000000a:	55                   	push   %ebp
4000000b:	89 e5                	mov    %esp,%ebp
4000000d:	53                   	push   %ebx
4000000e:	51                   	push   %ecx
4000000f:	81 ec 30 04 00 00    	sub    $0x430,%esp
40000015:	89 cb                	mov    %ecx,%ebx
    if(argc < 2) {
40000017:	83 3b 01             	cmpl   $0x1,(%ebx)
4000001a:	7f 29                	jg     40000045 <main+0x45>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
4000001c:	8b 43 04             	mov    0x4(%ebx),%eax
4000001f:	8b 10                	mov    (%eax),%edx
40000021:	8b 43 04             	mov    0x4(%ebx),%eax
40000024:	8b 00                	mov    (%eax),%eax
40000026:	83 ec 04             	sub    $0x4,%esp
40000029:	52                   	push   %edx
4000002a:	50                   	push   %eax
4000002b:	68 00 20 00 40       	push   $0x40002000
40000030:	e8 63 0a 00 00       	call   40000a98 <printf>
40000035:	83 c4 10             	add    $0x10,%esp
        exit(1);
40000038:	83 ec 0c             	sub    $0xc,%esp
4000003b:	6a 01                	push   $0x1
4000003d:	e8 8f 03 00 00       	call   400003d1 <exit>
40000042:	83 c4 10             	add    $0x10,%esp
    }

    char* filePath = 0;
40000045:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

    //Following is general parser code.

    uint32_t* maxSize = 0;
4000004c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    uint32_t ms = 1024;
40000053:	c7 45 d4 00 04 00 00 	movl   $0x400,-0x2c(%ebp)

    for(int i = 1; i < argc; i++) {
4000005a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
40000061:	eb 49                	jmp    400000ac <main+0xac>
        if(args[i][0] == '-') {
40000063:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000066:	c1 e0 02             	shl    $0x2,%eax
40000069:	03 43 04             	add    0x4(%ebx),%eax
4000006c:	8b 00                	mov    (%eax),%eax
4000006e:	8a 00                	mov    (%eax),%al
40000070:	3c 2d                	cmp    $0x2d,%al
40000072:	75 1e                	jne    40000092 <main+0x92>
            switch(args[i][1]) {
40000074:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000077:	c1 e0 02             	shl    $0x2,%eax
4000007a:	03 43 04             	add    0x4(%ebx),%eax
4000007d:	8b 00                	mov    (%eax),%eax
4000007f:	40                   	inc    %eax
40000080:	8a 00                	mov    (%eax),%al
40000082:	0f be c0             	movsbl %al,%eax
40000085:	83 f8 6d             	cmp    $0x6d,%eax
40000088:	75 1e                	jne    400000a8 <main+0xa8>
            case 'm':
                maxSize = &ms;
4000008a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
4000008d:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000090:	eb 17                	jmp    400000a9 <main+0xa9>
                break;
            }
        }
        else
        {
            if(filePath == 0) {
40000092:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
40000096:	75 11                	jne    400000a9 <main+0xa9>
                filePath = args[i];
40000098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000009b:	c1 e0 02             	shl    $0x2,%eax
4000009e:	03 43 04             	add    0x4(%ebx),%eax
400000a1:	8b 00                	mov    (%eax),%eax
400000a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
400000a6:	eb 01                	jmp    400000a9 <main+0xa9>

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
400000a8:	90                   	nop    
    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
400000a9:	ff 45 e4             	incl   -0x1c(%ebp)
400000ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400000af:	3b 03                	cmp    (%ebx),%eax
400000b1:	7c b0                	jl     40000063 <main+0x63>
                filePath = args[i];
            }
        }
    }

    if(filePath == 0) {
400000b3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
400000b7:	75 3f                	jne    400000f8 <main+0xf8>
        printf("%s: No file specified\n", args[0]);
400000b9:	8b 43 04             	mov    0x4(%ebx),%eax
400000bc:	8b 00                	mov    (%eax),%eax
400000be:	83 ec 08             	sub    $0x8,%esp
400000c1:	50                   	push   %eax
400000c2:	68 37 20 00 40       	push   $0x40002037
400000c7:	e8 cc 09 00 00       	call   40000a98 <printf>
400000cc:	83 c4 10             	add    $0x10,%esp
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
400000cf:	8b 43 04             	mov    0x4(%ebx),%eax
400000d2:	8b 10                	mov    (%eax),%edx
400000d4:	8b 43 04             	mov    0x4(%ebx),%eax
400000d7:	8b 00                	mov    (%eax),%eax
400000d9:	83 ec 04             	sub    $0x4,%esp
400000dc:	52                   	push   %edx
400000dd:	50                   	push   %eax
400000de:	68 00 20 00 40       	push   $0x40002000
400000e3:	e8 b0 09 00 00       	call   40000a98 <printf>
400000e8:	83 c4 10             	add    $0x10,%esp
        exit(1);
400000eb:	83 ec 0c             	sub    $0xc,%esp
400000ee:	6a 01                	push   $0x1
400000f0:	e8 dc 02 00 00       	call   400003d1 <exit>
400000f5:	83 c4 10             	add    $0x10,%esp
    }

    HANDLE hdl = fopen(filePath, FM_READ);
400000f8:	83 ec 08             	sub    $0x8,%esp
400000fb:	6a 01                	push   $0x1
400000fd:	ff 75 d8             	pushl  -0x28(%ebp)
40000100:	e8 c9 06 00 00       	call   400007ce <fopen>
40000105:	83 c4 10             	add    $0x10,%esp
40000108:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if(!hdl) {
4000010b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000010f:	75 2a                	jne    4000013b <main+0x13b>
        printf("%s: ", args[0]);
40000111:	8b 43 04             	mov    0x4(%ebx),%eax
40000114:	8b 00                	mov    (%eax),%eax
40000116:	83 ec 08             	sub    $0x8,%esp
40000119:	50                   	push   %eax
4000011a:	68 4e 20 00 40       	push   $0x4000204e
4000011f:	e8 74 09 00 00       	call   40000a98 <printf>
40000124:	83 c4 10             	add    $0x10,%esp
        printFilesystemError(filePath, getLastVFSErr());
40000127:	e8 50 07 00 00       	call   4000087c <getLastVFSErr>
4000012c:	83 ec 08             	sub    $0x8,%esp
4000012f:	50                   	push   %eax
40000130:	ff 75 d8             	pushl  -0x28(%ebp)
40000133:	e8 9c 00 00 00       	call   400001d4 <printFilesystemError>
40000138:	83 c4 10             	add    $0x10,%esp
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
4000013b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000142:	eb 6e                	jmp    400001b2 <main+0x1b2>
        uint32_t length = 1024;
40000144:	c7 45 ec 00 04 00 00 	movl   $0x400,-0x14(%ebp)
        uint32_t avail = favailable(hdl);
4000014b:	83 ec 0c             	sub    $0xc,%esp
4000014e:	ff 75 e0             	pushl  -0x20(%ebp)
40000151:	e8 fe 05 00 00       	call   40000754 <favailable>
40000156:	83 c4 10             	add    $0x10,%esp
40000159:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(avail == 0) exit(0);
4000015c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40000160:	75 0d                	jne    4000016f <main+0x16f>
40000162:	83 ec 0c             	sub    $0xc,%esp
40000165:	6a 00                	push   $0x0
40000167:	e8 65 02 00 00       	call   400003d1 <exit>
4000016c:	83 c4 10             	add    $0x10,%esp

        if(avail < length) length = avail;
4000016f:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000172:	3b 45 ec             	cmp    -0x14(%ebp),%eax
40000175:	73 06                	jae    4000017d <main+0x17d>
40000177:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000017a:	89 45 ec             	mov    %eax,-0x14(%ebp)


        uint32_t res = fread(hdl, buffer, length);
4000017d:	83 ec 04             	sub    $0x4,%esp
40000180:	ff 75 ec             	pushl  -0x14(%ebp)
40000183:	8d 85 d4 fb ff ff    	lea    -0x42c(%ebp),%eax
40000189:	50                   	push   %eax
4000018a:	ff 75 e0             	pushl  -0x20(%ebp)
4000018d:	e8 38 0a 00 00       	call   40000bca <fread>
40000192:	83 c4 10             	add    $0x10,%esp
40000195:	89 45 f4             	mov    %eax,-0xc(%ebp)
                       fwrite(PMID_STDOUT, buffer, length);
40000198:	83 ec 04             	sub    $0x4,%esp
4000019b:	ff 75 ec             	pushl  -0x14(%ebp)
4000019e:	8d 85 d4 fb ff ff    	lea    -0x42c(%ebp),%eax
400001a4:	50                   	push   %eax
400001a5:	6a 01                	push   $0x1
400001a7:	e8 0e 07 00 00       	call   400008ba <fwrite>
400001ac:	83 c4 10             	add    $0x10,%esp
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
400001af:	ff 45 e8             	incl   -0x18(%ebp)
400001b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
400001b6:	74 8c                	je     40000144 <main+0x144>
400001b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
400001bb:	8b 00                	mov    (%eax),%eax
400001bd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
400001c0:	77 82                	ja     40000144 <main+0x144>

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
400001c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
400001c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
400001ca:	83 c4 00             	add    $0x0,%esp
400001cd:	59                   	pop    %ecx
400001ce:	5b                   	pop    %ebx
400001cf:	5d                   	pop    %ebp
400001d0:	8d 61 fc             	lea    -0x4(%ecx),%esp
400001d3:	c3                   	ret    

400001d4 <printFilesystemError>:
400001d4:	55                   	push   %ebp
400001d5:	89 e5                	mov    %esp,%ebp
400001d7:	83 ec 08             	sub    $0x8,%esp
400001da:	8b 55 0c             	mov    0xc(%ebp),%edx
400001dd:	8b 45 08             	mov    0x8(%ebp),%eax
400001e0:	83 fa 05             	cmp    $0x5,%edx
400001e3:	77 43                	ja     40000228 <printFilesystemError+0x54>
400001e5:	ff 24 95 54 20 00 40 	jmp    *0x40002054(,%edx,4)
400001ec:	52                   	push   %edx
400001ed:	52                   	push   %edx
400001ee:	50                   	push   %eax
400001ef:	68 84 20 00 40       	push   $0x40002084
400001f4:	eb 3a                	jmp    40000230 <printFilesystemError+0x5c>
400001f6:	51                   	push   %ecx
400001f7:	51                   	push   %ecx
400001f8:	50                   	push   %eax
400001f9:	68 96 20 00 40       	push   $0x40002096
400001fe:	eb 30                	jmp    40000230 <printFilesystemError+0x5c>
40000200:	52                   	push   %edx
40000201:	52                   	push   %edx
40000202:	50                   	push   %eax
40000203:	68 b5 20 00 40       	push   $0x400020b5
40000208:	eb 26                	jmp    40000230 <printFilesystemError+0x5c>
4000020a:	51                   	push   %ecx
4000020b:	51                   	push   %ecx
4000020c:	50                   	push   %eax
4000020d:	68 df 20 00 40       	push   $0x400020df
40000212:	eb 1c                	jmp    40000230 <printFilesystemError+0x5c>
40000214:	52                   	push   %edx
40000215:	52                   	push   %edx
40000216:	50                   	push   %eax
40000217:	68 f4 20 00 40       	push   $0x400020f4
4000021c:	eb 12                	jmp    40000230 <printFilesystemError+0x5c>
4000021e:	51                   	push   %ecx
4000021f:	51                   	push   %ecx
40000220:	50                   	push   %eax
40000221:	68 2f 21 00 40       	push   $0x4000212f
40000226:	eb 08                	jmp    40000230 <printFilesystemError+0x5c>
40000228:	52                   	push   %edx
40000229:	52                   	push   %edx
4000022a:	50                   	push   %eax
4000022b:	68 42 21 00 40       	push   $0x40002142
40000230:	e8 63 08 00 00       	call   40000a98 <printf>
40000235:	c7 45 08 5f 21 00 40 	movl   $0x4000215f,0x8(%ebp)
4000023c:	83 c4 10             	add    $0x10,%esp
4000023f:	c9                   	leave  
40000240:	e9 53 08 00 00       	jmp    40000a98 <printf>

40000245 <exec>:
40000245:	55                   	push   %ebp
40000246:	89 e5                	mov    %esp,%ebp
40000248:	83 ec 34             	sub    $0x34,%esp
4000024b:	8b 45 08             	mov    0x8(%ebp),%eax
4000024e:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40000255:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000258:	8b 45 0c             	mov    0xc(%ebp),%eax
4000025b:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000025e:	8b 45 10             	mov    0x10(%ebp),%eax
40000261:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000264:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000267:	50                   	push   %eax
40000268:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000026f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000276:	e8 a9 10 00 00       	call   40001324 <syscall>
4000027b:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000027e:	c9                   	leave  
4000027f:	c3                   	ret    

40000280 <sexec>:
40000280:	55                   	push   %ebp
40000281:	89 e5                	mov    %esp,%ebp
40000283:	56                   	push   %esi
40000284:	53                   	push   %ebx
40000285:	53                   	push   %ebx
40000286:	6a 01                	push   $0x1
40000288:	8b 75 08             	mov    0x8(%ebp),%esi
4000028b:	ff 75 0c             	pushl  0xc(%ebp)
4000028e:	56                   	push   %esi
4000028f:	e8 b1 ff ff ff       	call   40000245 <exec>
40000294:	83 c4 10             	add    $0x10,%esp
40000297:	89 c3                	mov    %eax,%ebx
40000299:	85 c0                	test   %eax,%eax
4000029b:	75 11                	jne    400002ae <sexec+0x2e>
4000029d:	e8 da 05 00 00       	call   4000087c <getLastVFSErr>
400002a2:	51                   	push   %ecx
400002a3:	51                   	push   %ecx
400002a4:	50                   	push   %eax
400002a5:	56                   	push   %esi
400002a6:	e8 29 ff ff ff       	call   400001d4 <printFilesystemError>
400002ab:	83 c4 10             	add    $0x10,%esp
400002ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
400002b1:	89 d8                	mov    %ebx,%eax
400002b3:	5b                   	pop    %ebx
400002b4:	5e                   	pop    %esi
400002b5:	5d                   	pop    %ebp
400002b6:	c3                   	ret    

400002b7 <dexec>:
400002b7:	55                   	push   %ebp
400002b8:	89 e5                	mov    %esp,%ebp
400002ba:	56                   	push   %esi
400002bb:	53                   	push   %ebx
400002bc:	51                   	push   %ecx
400002bd:	6a 00                	push   $0x0
400002bf:	8b 75 08             	mov    0x8(%ebp),%esi
400002c2:	ff 75 0c             	pushl  0xc(%ebp)
400002c5:	56                   	push   %esi
400002c6:	e8 7a ff ff ff       	call   40000245 <exec>
400002cb:	83 c4 10             	add    $0x10,%esp
400002ce:	89 c3                	mov    %eax,%ebx
400002d0:	85 c0                	test   %eax,%eax
400002d2:	75 11                	jne    400002e5 <dexec+0x2e>
400002d4:	e8 a3 05 00 00       	call   4000087c <getLastVFSErr>
400002d9:	52                   	push   %edx
400002da:	52                   	push   %edx
400002db:	50                   	push   %eax
400002dc:	56                   	push   %esi
400002dd:	e8 f2 fe ff ff       	call   400001d4 <printFilesystemError>
400002e2:	83 c4 10             	add    $0x10,%esp
400002e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
400002e8:	89 d8                	mov    %ebx,%eax
400002ea:	5b                   	pop    %ebx
400002eb:	5e                   	pop    %esi
400002ec:	5d                   	pop    %ebp
400002ed:	c3                   	ret    

400002ee <getExecPathChild>:
400002ee:	55                   	push   %ebp
400002ef:	89 e5                	mov    %esp,%ebp
400002f1:	83 ec 34             	sub    $0x34,%esp
400002f4:	8b 45 08             	mov    0x8(%ebp),%eax
400002f7:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
400002fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000301:	8b 45 0c             	mov    0xc(%ebp),%eax
40000304:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000307:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000030a:	50                   	push   %eax
4000030b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000312:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000319:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000320:	e8 ff 0f 00 00       	call   40001324 <syscall>
40000325:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000328:	c9                   	leave  
40000329:	c3                   	ret    

4000032a <changeExecPath>:
4000032a:	55                   	push   %ebp
4000032b:	89 e5                	mov    %esp,%ebp
4000032d:	83 ec 34             	sub    $0x34,%esp
40000330:	8b 45 08             	mov    0x8(%ebp),%eax
40000333:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
4000033a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000033d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000340:	50                   	push   %eax
40000341:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000348:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000034f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000035d:	e8 c2 0f 00 00       	call   40001324 <syscall>
40000362:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000365:	c9                   	leave  
40000366:	c3                   	ret    

40000367 <cd>:
40000367:	55                   	push   %ebp
40000368:	89 e5                	mov    %esp,%ebp
4000036a:	53                   	push   %ebx
4000036b:	83 ec 10             	sub    $0x10,%esp
4000036e:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000371:	53                   	push   %ebx
40000372:	e8 b3 ff ff ff       	call   4000032a <changeExecPath>
40000377:	83 c4 10             	add    $0x10,%esp
4000037a:	85 c0                	test   %eax,%eax
4000037c:	75 11                	jne    4000038f <cd+0x28>
4000037e:	e8 f9 04 00 00       	call   4000087c <getLastVFSErr>
40000383:	52                   	push   %edx
40000384:	52                   	push   %edx
40000385:	50                   	push   %eax
40000386:	53                   	push   %ebx
40000387:	e8 48 fe ff ff       	call   400001d4 <printFilesystemError>
4000038c:	83 c4 10             	add    $0x10,%esp
4000038f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000392:	c9                   	leave  
40000393:	c3                   	ret    

40000394 <getExecPath>:
40000394:	55                   	push   %ebp
40000395:	89 e5                	mov    %esp,%ebp
40000397:	83 ec 34             	sub    $0x34,%esp
4000039a:	8b 45 08             	mov    0x8(%ebp),%eax
4000039d:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400003a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003aa:	50                   	push   %eax
400003ab:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003b2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003c7:	e8 58 0f 00 00       	call   40001324 <syscall>
400003cc:	83 c4 10             	add    $0x10,%esp
400003cf:	c9                   	leave  
400003d0:	c3                   	ret    

400003d1 <exit>:
400003d1:	55                   	push   %ebp
400003d2:	89 e5                	mov    %esp,%ebp
400003d4:	83 ec 34             	sub    $0x34,%esp
400003d7:	8b 45 08             	mov    0x8(%ebp),%eax
400003da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400003e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000403:	50                   	push   %eax
40000404:	e8 1b 0f 00 00       	call   40001324 <syscall>
40000409:	c7 04 24 4a 21 00 40 	movl   $0x4000214a,(%esp)
40000410:	e8 83 06 00 00       	call   40000a98 <printf>
40000415:	eb f2                	jmp    40000409 <exit+0x38>

40000417 <yield>:
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000417:	55                   	push   %ebp
40000418:	89 e5                	mov    %esp,%ebp
4000041a:	83 ec 34             	sub    $0x34,%esp
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
4000041d:	8d 45 e0             	lea    -0x20(%ebp),%eax

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000420:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
}
40000427:	50                   	push   %eax

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000428:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000042f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000436:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000043d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}
4000044b:	e8 d4 0e 00 00       	call   40001324 <syscall>
40000450:	83 c4 10             	add    $0x10,%esp
40000453:	c9                   	leave  
40000454:	c3                   	ret    

40000455 <pexists>:
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
40000455:	55                   	push   %ebp
40000456:	89 e5                	mov    %esp,%ebp
40000458:	83 ec 34             	sub    $0x34,%esp
                break;
            }
        }
        else
        {
            if(filePath == 0) {
4000045b:	8b 45 08             	mov    0x8(%ebp),%eax
4000045e:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
40000465:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                filePath = args[i];
            }
40000468:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000046b:	50                   	push   %eax
                break;
            }
        }
        else
        {
            if(filePath == 0) {
4000046c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000473:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000047a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000481:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
                filePath = args[i];
            }
40000488:	e8 97 0e 00 00       	call   40001324 <syscall>
        }
    }

4000048d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000490:	c9                   	leave  
40000491:	c3                   	ret    

40000492 <register_irq_handler>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
40000492:	55                   	push   %ebp
40000493:	89 e5                	mov    %esp,%ebp
40000495:	53                   	push   %ebx
40000496:	83 ec 30             	sub    $0x30,%esp

        if(avail == 0) exit(0);

        if(avail < length) length = avail;


40000499:	8d 45 e0             	lea    -0x20(%ebp),%eax
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
4000049c:	8b 5d 08             	mov    0x8(%ebp),%ebx

        if(avail == 0) exit(0);

        if(avail < length) length = avail;


4000049f:	50                   	push   %eax
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

        if(avail < length) length = avail;
400004a0:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400004a7:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400004aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)


400004c6:	e8 59 0e 00 00       	call   40001324 <syscall>
        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
400004cb:	83 c4 10             	add    $0x10,%esp
400004ce:	31 c0                	xor    %eax,%eax
400004d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
400004d4:	74 0f                	je     400004e5 <register_irq_handler+0x53>

    return 0;
}
400004d6:	8b 45 0c             	mov    0xc(%ebp),%eax
400004d9:	89 04 9d 00 30 00 40 	mov    %eax,0x40003000(,%ebx,4)
400004e0:	b8 01 00 00 00       	mov    $0x1,%eax
400004e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400004e8:	c9                   	leave  
400004e9:	c3                   	ret    

400004ea <fetch_rpc_data>:
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }

400004ea:	55                   	push   %ebp
400004eb:	89 e5                	mov    %esp,%ebp
400004ed:	83 ec 34             	sub    $0x34,%esp
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

400004f0:	8b 45 08             	mov    0x8(%ebp),%eax
400004f3:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
400004fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(!hdl) {
        printf("%s: ", args[0]);
400004fd:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000500:	50                   	push   %eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

40000501:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000508:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000050f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000516:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if(!hdl) {
        printf("%s: ", args[0]);
4000051d:	e8 02 0e 00 00       	call   40001324 <syscall>
40000522:	83 c4 10             	add    $0x10,%esp
        printFilesystemError(filePath, getLastVFSErr());
40000525:	c9                   	leave  
40000526:	c3                   	ret    

40000527 <call_rpc>:

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
40000527:	55                   	push   %ebp
40000528:	89 e5                	mov    %esp,%ebp
4000052a:	83 ec 34             	sub    $0x34,%esp
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
4000052d:	8b 45 08             	mov    0x8(%ebp),%eax
40000530:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40000537:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000053a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000053d:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000540:	8b 45 10             	mov    0x10(%ebp),%eax
40000543:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000546:	8b 45 14             	mov    0x14(%ebp),%eax
40000549:	89 45 f0             	mov    %eax,-0x10(%ebp)
        {
            if(filePath == 0) {
4000054c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000054f:	50                   	push   %eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
40000550:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        {
            if(filePath == 0) {
40000557:	e8 c8 0d 00 00       	call   40001324 <syscall>
                filePath = args[i];
            }
        }
4000055c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000055f:	c9                   	leave  
40000560:	c3                   	ret    

40000561 <set_rpc_handler>:
40000561:	55                   	push   %ebp
40000562:	89 e5                	mov    %esp,%ebp
40000564:	57                   	push   %edi
40000565:	56                   	push   %esi
40000566:	be 6c 20 00 40       	mov    $0x4000206c,%esi
4000056b:	83 ec 24             	sub    $0x24,%esp
4000056e:	8d 7d e0             	lea    -0x20(%ebp),%edi
40000571:	68 00 02 00 00       	push   $0x200
40000576:	6a 00                	push   $0x0
40000578:	68 00 30 00 40       	push   $0x40003000
4000057d:	e8 c2 07 00 00       	call   40000d44 <memset>
40000582:	b9 06 00 00 00       	mov    $0x6,%ecx
40000587:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000058a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
4000058c:	89 04 24             	mov    %eax,(%esp)
4000058f:	e8 90 0d 00 00       	call   40001324 <syscall>
40000594:	83 c4 10             	add    $0x10,%esp
40000597:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000059a:	5e                   	pop    %esi
4000059b:	5f                   	pop    %edi
4000059c:	5d                   	pop    %ebp
4000059d:	c3                   	ret    

4000059e <_start>:
            }
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
4000059e:	55                   	push   %ebp
4000059f:	89 e5                	mov    %esp,%ebp
400005a1:	56                   	push   %esi
400005a2:	53                   	push   %ebx
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
400005a3:	31 db                	xor    %ebx,%ebx
            }
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
400005a5:	83 ec 2c             	sub    $0x2c,%esp
    char* filePath = 0;

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
400005a8:	8d 45 e0             	lea    -0x20(%ebp),%eax
    }

    char* filePath = 0;

    //Following is general parser code.

400005ab:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
400005b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
400005b9:	50                   	push   %eax
    }

    char* filePath = 0;

    //Following is general parser code.

400005ba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005c1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
400005d6:	e8 49 0d 00 00       	call   40001324 <syscall>

    for(int i = 1; i < argc; i++) {
400005db:	8b 75 e0             	mov    -0x20(%ebp),%esi
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
400005de:	83 c4 10             	add    $0x10,%esp
400005e1:	85 f6                	test   %esi,%esi
400005e3:	75 05                	jne    400005ea <_start+0x4c>
400005e5:	89 f3                	mov    %esi,%ebx
400005e7:	eb 07                	jmp    400005f0 <_start+0x52>

    if(!hdl) {
400005e9:	43                   	inc    %ebx
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

400005ea:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
400005ee:	75 f9                	jne    400005e9 <_start+0x4b>
    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

400005f0:	e8 6c ff ff ff       	call   40000561 <set_rpc_handler>
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
400005f5:	51                   	push   %ecx
400005f6:	51                   	push   %ecx
400005f7:	56                   	push   %esi
400005f8:	53                   	push   %ebx
400005f9:	e8 02 fa ff ff       	call   40000000 <main>
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);
400005fe:	89 04 24             	mov    %eax,(%esp)
40000601:	e8 cb fd ff ff       	call   400003d1 <exit>
40000606:	83 c4 10             	add    $0x10,%esp

40000609:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000060c:	5b                   	pop    %ebx
4000060d:	5e                   	pop    %esi
4000060e:	5d                   	pop    %ebp
4000060f:	c3                   	ret    

40000610 <_handle_rpc>:
40000610:	55                   	push   %ebp
40000611:	89 e5                	mov    %esp,%ebp
40000613:	56                   	push   %esi
40000614:	53                   	push   %ebx
40000615:	83 ec 2c             	sub    $0x2c,%esp
40000618:	ff 75 10             	pushl  0x10(%ebp)
4000061b:	8b 75 0c             	mov    0xc(%ebp),%esi
4000061e:	e8 ba 0a 00 00       	call   400010dd <malloc>
40000623:	89 04 24             	mov    %eax,(%esp)
40000626:	89 c3                	mov    %eax,%ebx
40000628:	e8 bd fe ff ff       	call   400004ea <fetch_rpc_data>
4000062d:	83 c4 10             	add    $0x10,%esp
40000630:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000634:	75 4b                	jne    40000681 <_handle_rpc+0x71>
40000636:	8b 04 b5 00 30 00 40 	mov    0x40003000(,%esi,4),%eax
4000063d:	85 c0                	test   %eax,%eax
4000063f:	74 40                	je     40000681 <_handle_rpc+0x71>
40000641:	83 ec 0c             	sub    $0xc,%esp
40000644:	56                   	push   %esi
40000645:	ff d0                	call   *%eax
    }

    char* filePath = 0;

    //Following is general parser code.

40000647:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

4000064a:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    //Following is general parser code.

40000651:	89 04 24             	mov    %eax,(%esp)
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000654:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000065b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000662:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000669:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000670:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

40000677:	e8 a8 0c 00 00       	call   40001324 <syscall>
4000067c:	83 c4 10             	add    $0x10,%esp
4000067f:	eb fe                	jmp    4000067f <_handle_rpc+0x6f>
40000681:	83 ec 0c             	sub    $0xc,%esp
40000684:	68 51 21 00 40       	push   $0x40002151
40000689:	e8 0a 04 00 00       	call   40000a98 <printf>
4000068e:	89 1c 24             	mov    %ebx,(%esp)
40000691:	e8 fe 08 00 00       	call   40000f94 <free>
    }

    char* filePath = 0;

    //Following is general parser code.

40000696:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000699:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    //Following is general parser code.

400006a0:	89 04 24             	mov    %eax,(%esp)
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

400006a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400006aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

400006c6:	e8 59 0c 00 00       	call   40001324 <syscall>
400006cb:	83 c4 10             	add    $0x10,%esp
400006ce:	eb fe                	jmp    400006ce <_handle_rpc+0xbe>

400006d0 <resolveHandle>:
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }

400006d0:	55                   	push   %ebp
400006d1:	89 e5                	mov    %esp,%ebp
400006d3:	83 ec 28             	sub    $0x28,%esp
    if(filePath == 0) {
400006d6:	3d fe 0f 00 00       	cmp    $0xffe,%eax
400006db:	77 38                	ja     40000715 <resolveHandle+0x45>
                break;
            }
        }
        else
        {
            if(filePath == 0) {
400006dd:	83 ec 0c             	sub    $0xc,%esp
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
400006e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        {
            if(filePath == 0) {
400006e3:	8d 45 e0             	lea    -0x20(%ebp),%eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
400006e6:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
        {
            if(filePath == 0) {
400006ed:	50                   	push   %eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
400006ee:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006f5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000703:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        {
            if(filePath == 0) {
4000070a:	e8 15 0c 00 00       	call   40001324 <syscall>
                filePath = args[i];
            }
4000070f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000712:	83 c4 10             	add    $0x10,%esp

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }
40000715:	c9                   	leave  
40000716:	c3                   	ret    

40000717 <fmkfifo>:
40000717:	55                   	push   %ebp
40000718:	89 e5                	mov    %esp,%ebp
4000071a:	83 ec 34             	sub    $0x34,%esp
4000071d:	8b 45 08             	mov    0x8(%ebp),%eax
40000720:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
40000727:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000072a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000072d:	50                   	push   %eax
4000072e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000735:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000073c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000743:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000074a:	e8 d5 0b 00 00       	call   40001324 <syscall>
4000074f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000752:	c9                   	leave  
40000753:	c3                   	ret    

40000754 <favailable>:
40000754:	55                   	push   %ebp
40000755:	89 e5                	mov    %esp,%ebp
40000757:	83 ec 34             	sub    $0x34,%esp
4000075a:	8b 45 08             	mov    0x8(%ebp),%eax
4000075d:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
40000764:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000767:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000076a:	50                   	push   %eax
4000076b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000772:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000779:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000780:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000787:	e8 98 0b 00 00       	call   40001324 <syscall>
4000078c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000078f:	c9                   	leave  
40000790:	c3                   	ret    

40000791 <fclose>:
40000791:	55                   	push   %ebp
40000792:	89 e5                	mov    %esp,%ebp
40000794:	83 ec 34             	sub    $0x34,%esp
40000797:	8b 45 08             	mov    0x8(%ebp),%eax
4000079a:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400007a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007a4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007a7:	50                   	push   %eax
400007a8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400007c4:	e8 5b 0b 00 00       	call   40001324 <syscall>
400007c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007cc:	c9                   	leave  
400007cd:	c3                   	ret    

400007ce <fopen>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
400007ce:	55                   	push   %ebp
400007cf:	89 e5                	mov    %esp,%ebp
400007d1:	83 ec 34             	sub    $0x34,%esp
400007d4:	8b 45 08             	mov    0x8(%ebp),%eax
400007d7:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
400007de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007e1:	8b 45 0c             	mov    0xc(%ebp),%eax
400007e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400007e7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007ea:	50                   	push   %eax
400007eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000800:	e8 1f 0b 00 00       	call   40001324 <syscall>
40000805:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000808:	c9                   	leave  
40000809:	c3                   	ret    

4000080a <fopenpmhandle>:

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
4000080a:	55                   	push   %ebp
4000080b:	89 e5                	mov    %esp,%ebp
4000080d:	83 ec 34             	sub    $0x34,%esp
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000810:	8b 45 08             	mov    0x8(%ebp),%eax
40000813:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
4000081a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000081d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000820:	89 45 e8             	mov    %eax,-0x18(%ebp)

        if(avail < length) length = avail;
40000823:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000826:	50                   	push   %eax
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000827:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000082e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000835:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        if(avail < length) length = avail;
4000083c:	e8 e3 0a 00 00       	call   40001324 <syscall>


        uint32_t res = fread(hdl, buffer, length);
40000841:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000844:	c9                   	leave  
40000845:	c3                   	ret    

40000846 <setstderr>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000846:	55                   	push   %ebp
40000847:	89 e5                	mov    %esp,%ebp
40000849:	83 ec 10             	sub    $0x10,%esp
4000084c:	ff 75 08             	pushl  0x8(%ebp)
4000084f:	6a 03                	push   $0x3
40000851:	e8 b4 ff ff ff       	call   4000080a <fopenpmhandle>
40000856:	c9                   	leave  
40000857:	c3                   	ret    

40000858 <setstdin>:


        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

40000858:	55                   	push   %ebp
40000859:	89 e5                	mov    %esp,%ebp
4000085b:	83 ec 10             	sub    $0x10,%esp
4000085e:	ff 75 08             	pushl  0x8(%ebp)
40000861:	6a 02                	push   $0x2
40000863:	e8 a2 ff ff ff       	call   4000080a <fopenpmhandle>
40000868:	c9                   	leave  
40000869:	c3                   	ret    

4000086a <setstdout>:
        if(avail < length) length = avail;


        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }
4000086a:	55                   	push   %ebp
4000086b:	89 e5                	mov    %esp,%ebp
4000086d:	83 ec 10             	sub    $0x10,%esp
40000870:	ff 75 08             	pushl  0x8(%ebp)
40000873:	6a 01                	push   $0x1
40000875:	e8 90 ff ff ff       	call   4000080a <fopenpmhandle>
4000087a:	c9                   	leave  
4000087b:	c3                   	ret    

4000087c <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
4000087c:	55                   	push   %ebp
4000087d:	89 e5                	mov    %esp,%ebp
4000087f:	83 ec 34             	sub    $0x34,%esp
    }

    char* filePath = 0;

    //Following is general parser code.

40000882:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000885:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    //Following is general parser code.

4000088c:	50                   	push   %eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

4000088d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000894:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000089b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

400008b0:	e8 6f 0a 00 00       	call   40001324 <syscall>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

400008b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008b8:	c9                   	leave  
400008b9:	c3                   	ret    

400008ba <fwrite>:
400008ba:	55                   	push   %ebp
400008bb:	89 e5                	mov    %esp,%ebp
400008bd:	57                   	push   %edi
400008be:	56                   	push   %esi
400008bf:	53                   	push   %ebx
400008c0:	83 ec 3c             	sub    $0x3c,%esp
400008c3:	8b 45 08             	mov    0x8(%ebp),%eax
400008c6:	8b 7d 10             	mov    0x10(%ebp),%edi
400008c9:	e8 02 fe ff ff       	call   400006d0 <resolveHandle>
400008ce:	83 ec 0c             	sub    $0xc,%esp
400008d1:	89 c6                	mov    %eax,%esi
400008d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
400008d6:	8b 45 0c             	mov    0xc(%ebp),%eax
400008d9:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400008e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
400008e3:	8d 45 d0             	lea    -0x30(%ebp),%eax
400008e6:	89 7d dc             	mov    %edi,-0x24(%ebp)
400008e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400008f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400008f7:	50                   	push   %eax
400008f8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
400008fb:	eb 2d                	jmp    4000092a <fwrite+0x70>
400008fd:	e8 15 fb ff ff       	call   40000417 <yield>
40000902:	8b 45 0c             	mov    0xc(%ebp),%eax
40000905:	83 ec 0c             	sub    $0xc,%esp
40000908:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000090b:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000090e:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000915:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000918:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000091b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000922:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000929:	50                   	push   %eax
4000092a:	e8 f5 09 00 00       	call   40001324 <syscall>
4000092f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000932:	83 c4 10             	add    $0x10,%esp
40000935:	83 fb 01             	cmp    $0x1,%ebx
40000938:	74 c3                	je     400008fd <fwrite+0x43>
4000093a:	89 f0                	mov    %esi,%eax
4000093c:	89 da                	mov    %ebx,%edx
4000093e:	e8 3d 02 00 00       	call   40000b80 <printrwerror>
40000943:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000946:	89 d8                	mov    %ebx,%eax
40000948:	5b                   	pop    %ebx
40000949:	5e                   	pop    %esi
4000094a:	5f                   	pop    %edi
4000094b:	5d                   	pop    %ebp
4000094c:	c3                   	ret    

4000094d <fputs>:
4000094d:	55                   	push   %ebp
4000094e:	89 e5                	mov    %esp,%ebp
40000950:	56                   	push   %esi
40000951:	53                   	push   %ebx
40000952:	83 ec 20             	sub    $0x20,%esp
40000955:	8b 45 0c             	mov    0xc(%ebp),%eax
40000958:	8b 5d 08             	mov    0x8(%ebp),%ebx
4000095b:	e8 70 fd ff ff       	call   400006d0 <resolveHandle>
40000960:	89 c6                	mov    %eax,%esi
40000962:	85 c0                	test   %eax,%eax
40000964:	74 16                	je     4000097c <fputs+0x2f>
40000966:	83 ec 0c             	sub    $0xc,%esp
40000969:	53                   	push   %ebx
4000096a:	e8 a7 04 00 00       	call   40000e16 <strlen>
4000096f:	83 c4 0c             	add    $0xc,%esp
40000972:	50                   	push   %eax
40000973:	53                   	push   %ebx
40000974:	56                   	push   %esi
40000975:	e8 40 ff ff ff       	call   400008ba <fwrite>
4000097a:	eb 35                	jmp    400009b1 <fputs+0x64>
4000097c:	83 ec 0c             	sub    $0xc,%esp
4000097f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000982:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000989:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000098c:	50                   	push   %eax
4000098d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000994:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000099b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400009a9:	e8 76 09 00 00       	call   40001324 <syscall>
400009ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
400009b1:	83 c4 10             	add    $0x10,%esp
400009b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
400009b7:	5b                   	pop    %ebx
400009b8:	5e                   	pop    %esi
400009b9:	5d                   	pop    %ebp
400009ba:	c3                   	ret    

400009bb <puts>:
400009bb:	55                   	push   %ebp
400009bc:	89 e5                	mov    %esp,%ebp
400009be:	83 ec 10             	sub    $0x10,%esp
400009c1:	6a 01                	push   $0x1
400009c3:	ff 75 08             	pushl  0x8(%ebp)
400009c6:	e8 82 ff ff ff       	call   4000094d <fputs>
400009cb:	c9                   	leave  
400009cc:	c3                   	ret    

400009cd <putn>:
400009cd:	55                   	push   %ebp
400009ce:	89 e5                	mov    %esp,%ebp
400009d0:	56                   	push   %esi
400009d1:	53                   	push   %ebx
400009d2:	31 f6                	xor    %esi,%esi
400009d4:	83 ec 50             	sub    $0x50,%esp
400009d7:	89 d3                	mov    %edx,%ebx
400009d9:	83 fa 24             	cmp    $0x24,%edx
400009dc:	7f 25                	jg     40000a03 <putn+0x36>
400009de:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
400009e2:	8d 4d f7             	lea    -0x9(%ebp),%ecx
400009e5:	31 d2                	xor    %edx,%edx
400009e7:	49                   	dec    %ecx
400009e8:	f7 f3                	div    %ebx
400009ea:	46                   	inc    %esi
400009eb:	85 c0                	test   %eax,%eax
400009ed:	8a 92 61 21 00 40    	mov    0x40002161(%edx),%dl
400009f3:	88 11                	mov    %dl,(%ecx)
400009f5:	75 ee                	jne    400009e5 <putn+0x18>
400009f7:	83 ec 0c             	sub    $0xc,%esp
400009fa:	51                   	push   %ecx
400009fb:	e8 bb ff ff ff       	call   400009bb <puts>
40000a00:	83 c4 10             	add    $0x10,%esp
40000a03:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a06:	89 f0                	mov    %esi,%eax
40000a08:	5b                   	pop    %ebx
40000a09:	5e                   	pop    %esi
40000a0a:	5d                   	pop    %ebp
40000a0b:	c3                   	ret    

40000a0c <fputc>:
40000a0c:	55                   	push   %ebp
40000a0d:	89 e5                	mov    %esp,%ebp
40000a0f:	83 ec 38             	sub    $0x38,%esp
40000a12:	8b 45 08             	mov    0x8(%ebp),%eax
40000a15:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000a18:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a1b:	e8 b0 fc ff ff       	call   400006d0 <resolveHandle>
40000a20:	85 c0                	test   %eax,%eax
40000a22:	74 0f                	je     40000a33 <fputc+0x27>
40000a24:	52                   	push   %edx
40000a25:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000a28:	6a 01                	push   $0x1
40000a2a:	52                   	push   %edx
40000a2b:	50                   	push   %eax
40000a2c:	e8 89 fe ff ff       	call   400008ba <fwrite>
40000a31:	eb 39                	jmp    40000a6c <fputc+0x60>
40000a33:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000a37:	83 ec 0c             	sub    $0xc,%esp
40000a3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a3d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a40:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000a47:	50                   	push   %eax
40000a48:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000a4f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000a56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000a5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a64:	e8 bb 08 00 00       	call   40001324 <syscall>
40000a69:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000a6c:	83 c4 10             	add    $0x10,%esp
40000a6f:	c9                   	leave  
40000a70:	c3                   	ret    

40000a71 <putc>:
40000a71:	55                   	push   %ebp
40000a72:	89 e5                	mov    %esp,%ebp
40000a74:	83 ec 08             	sub    $0x8,%esp
40000a77:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000a7b:	89 45 08             	mov    %eax,0x8(%ebp)
40000a7e:	c9                   	leave  
40000a7f:	e9 88 ff ff ff       	jmp    40000a0c <fputc>

40000a84 <putchar>:
40000a84:	55                   	push   %ebp
40000a85:	89 e5                	mov    %esp,%ebp
40000a87:	83 ec 10             	sub    $0x10,%esp
40000a8a:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000a8e:	6a 01                	push   $0x1
40000a90:	50                   	push   %eax
40000a91:	e8 76 ff ff ff       	call   40000a0c <fputc>
40000a96:	c9                   	leave  
40000a97:	c3                   	ret    

40000a98 <printf>:
40000a98:	55                   	push   %ebp
40000a99:	89 e5                	mov    %esp,%ebp
40000a9b:	57                   	push   %edi
40000a9c:	56                   	push   %esi
40000a9d:	53                   	push   %ebx
40000a9e:	83 ec 1c             	sub    $0x1c,%esp
40000aa1:	8d 75 0c             	lea    0xc(%ebp),%esi
40000aa4:	8b 7d 08             	mov    0x8(%ebp),%edi
40000aa7:	31 db                	xor    %ebx,%ebx
40000aa9:	e9 be 00 00 00       	jmp    40000b6c <printf+0xd4>
40000aae:	3c 25                	cmp    $0x25,%al
40000ab0:	0f 85 a4 00 00 00    	jne    40000b5a <printf+0xc2>
40000ab6:	47                   	inc    %edi
40000ab7:	8a 07                	mov    (%edi),%al
40000ab9:	3c 70                	cmp    $0x70,%al
40000abb:	74 47                	je     40000b04 <printf+0x6c>
40000abd:	7f 1a                	jg     40000ad9 <printf+0x41>
40000abf:	3c 63                	cmp    $0x63,%al
40000ac1:	74 5a                	je     40000b1d <printf+0x85>
40000ac3:	7f 0e                	jg     40000ad3 <printf+0x3b>
40000ac5:	84 c0                	test   %al,%al
40000ac7:	0f 84 a9 00 00 00    	je     40000b76 <printf+0xde>
40000acd:	3c 25                	cmp    $0x25,%al
40000acf:	75 6c                	jne    40000b3d <printf+0xa5>
40000ad1:	eb 63                	jmp    40000b36 <printf+0x9e>
40000ad3:	3c 64                	cmp    $0x64,%al
40000ad5:	75 66                	jne    40000b3d <printf+0xa5>
40000ad7:	eb 1e                	jmp    40000af7 <printf+0x5f>
40000ad9:	3c 75                	cmp    $0x75,%al
40000adb:	74 1a                	je     40000af7 <printf+0x5f>
40000add:	3c 78                	cmp    $0x78,%al
40000adf:	74 23                	je     40000b04 <printf+0x6c>
40000ae1:	3c 73                	cmp    $0x73,%al
40000ae3:	75 58                	jne    40000b3d <printf+0xa5>
40000ae5:	83 ec 0c             	sub    $0xc,%esp
40000ae8:	8d 46 04             	lea    0x4(%esi),%eax
40000aeb:	ff 36                	pushl  (%esi)
40000aed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000af0:	e8 c6 fe ff ff       	call   400009bb <puts>
40000af5:	eb 38                	jmp    40000b2f <printf+0x97>
40000af7:	8d 46 04             	lea    0x4(%esi),%eax
40000afa:	ba 0a 00 00 00       	mov    $0xa,%edx
40000aff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b02:	eb 0b                	jmp    40000b0f <printf+0x77>
40000b04:	8d 46 04             	lea    0x4(%esi),%eax
40000b07:	ba 10 00 00 00       	mov    $0x10,%edx
40000b0c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b0f:	8b 06                	mov    (%esi),%eax
40000b11:	e8 b7 fe ff ff       	call   400009cd <putn>
40000b16:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000b19:	01 c3                	add    %eax,%ebx
40000b1b:	eb 4e                	jmp    40000b6b <printf+0xd3>
40000b1d:	8d 46 04             	lea    0x4(%esi),%eax
40000b20:	83 ec 0c             	sub    $0xc,%esp
40000b23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b26:	0f be 06             	movsbl (%esi),%eax
40000b29:	50                   	push   %eax
40000b2a:	e8 55 ff ff ff       	call   40000a84 <putchar>
40000b2f:	01 c3                	add    %eax,%ebx
40000b31:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000b34:	eb 32                	jmp    40000b68 <printf+0xd0>
40000b36:	83 ec 0c             	sub    $0xc,%esp
40000b39:	6a 25                	push   $0x25
40000b3b:	eb 24                	jmp    40000b61 <printf+0xc9>
40000b3d:	83 ec 0c             	sub    $0xc,%esp
40000b40:	6a 25                	push   $0x25
40000b42:	e8 3d ff ff ff       	call   40000a84 <putchar>
40000b47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b4a:	0f be 07             	movsbl (%edi),%eax
40000b4d:	89 04 24             	mov    %eax,(%esp)
40000b50:	e8 2f ff ff ff       	call   40000a84 <putchar>
40000b55:	03 45 e4             	add    -0x1c(%ebp),%eax
40000b58:	eb 0c                	jmp    40000b66 <printf+0xce>
40000b5a:	83 ec 0c             	sub    $0xc,%esp
40000b5d:	0f be c0             	movsbl %al,%eax
40000b60:	50                   	push   %eax
40000b61:	e8 1e ff ff ff       	call   40000a84 <putchar>
40000b66:	01 c3                	add    %eax,%ebx
40000b68:	83 c4 10             	add    $0x10,%esp
40000b6b:	47                   	inc    %edi
40000b6c:	8a 07                	mov    (%edi),%al
40000b6e:	84 c0                	test   %al,%al
40000b70:	0f 85 38 ff ff ff    	jne    40000aae <printf+0x16>
40000b76:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b79:	89 d8                	mov    %ebx,%eax
40000b7b:	5b                   	pop    %ebx
40000b7c:	5e                   	pop    %esi
40000b7d:	5f                   	pop    %edi
40000b7e:	5d                   	pop    %ebp
40000b7f:	c3                   	ret    

40000b80 <printrwerror>:
40000b80:	55                   	push   %ebp
40000b81:	89 e5                	mov    %esp,%ebp
40000b83:	83 ec 08             	sub    $0x8,%esp
40000b86:	83 fa 02             	cmp    $0x2,%edx
40000b89:	75 0a                	jne    40000b95 <printrwerror+0x15>
40000b8b:	52                   	push   %edx
40000b8c:	52                   	push   %edx
40000b8d:	50                   	push   %eax
40000b8e:	68 86 21 00 40       	push   $0x40002186
40000b93:	eb 2b                	jmp    40000bc0 <printrwerror+0x40>
40000b95:	83 fa 03             	cmp    $0x3,%edx
40000b98:	75 0a                	jne    40000ba4 <printrwerror+0x24>
40000b9a:	51                   	push   %ecx
40000b9b:	51                   	push   %ecx
40000b9c:	50                   	push   %eax
40000b9d:	68 9e 21 00 40       	push   $0x4000219e
40000ba2:	eb 1c                	jmp    40000bc0 <printrwerror+0x40>
40000ba4:	83 fa 04             	cmp    $0x4,%edx
40000ba7:	75 0a                	jne    40000bb3 <printrwerror+0x33>
40000ba9:	52                   	push   %edx
40000baa:	52                   	push   %edx
40000bab:	50                   	push   %eax
40000bac:	68 b9 21 00 40       	push   $0x400021b9
40000bb1:	eb 0d                	jmp    40000bc0 <printrwerror+0x40>
40000bb3:	83 fa 05             	cmp    $0x5,%edx
40000bb6:	75 10                	jne    40000bc8 <printrwerror+0x48>
40000bb8:	51                   	push   %ecx
40000bb9:	51                   	push   %ecx
40000bba:	50                   	push   %eax
40000bbb:	68 e3 21 00 40       	push   $0x400021e3
40000bc0:	e8 d3 fe ff ff       	call   40000a98 <printf>
40000bc5:	83 c4 10             	add    $0x10,%esp
40000bc8:	c9                   	leave  
40000bc9:	c3                   	ret    

40000bca <fread>:
40000bca:	55                   	push   %ebp
40000bcb:	89 e5                	mov    %esp,%ebp
40000bcd:	57                   	push   %edi
40000bce:	56                   	push   %esi
40000bcf:	53                   	push   %ebx
40000bd0:	83 ec 38             	sub    $0x38,%esp
40000bd3:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000bd6:	8b 45 0c             	mov    0xc(%ebp),%eax
40000bd9:	8b 75 08             	mov    0x8(%ebp),%esi
40000bdc:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000bdf:	8b 45 10             	mov    0x10(%ebp),%eax
40000be2:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000be9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000bec:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000bef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000bf6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000bfd:	eb 2c                	jmp    40000c2b <fread+0x61>
40000bff:	e8 13 f8 ff ff       	call   40000417 <yield>
40000c04:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c07:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c0a:	8b 45 10             	mov    0x10(%ebp),%eax
40000c0d:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000c14:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000c17:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000c1a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000c21:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000c28:	83 ec 0c             	sub    $0xc,%esp
40000c2b:	57                   	push   %edi
40000c2c:	e8 f3 06 00 00       	call   40001324 <syscall>
40000c31:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000c34:	83 c4 10             	add    $0x10,%esp
40000c37:	83 fb 01             	cmp    $0x1,%ebx
40000c3a:	74 c3                	je     40000bff <fread+0x35>
40000c3c:	89 f0                	mov    %esi,%eax
40000c3e:	89 da                	mov    %ebx,%edx
40000c40:	e8 3b ff ff ff       	call   40000b80 <printrwerror>
40000c45:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000c48:	89 d8                	mov    %ebx,%eax
40000c4a:	5b                   	pop    %ebx
40000c4b:	5e                   	pop    %esi
40000c4c:	5f                   	pop    %edi
40000c4d:	5d                   	pop    %ebp
40000c4e:	c3                   	ret    

40000c4f <fgetc>:
40000c4f:	55                   	push   %ebp
40000c50:	89 e5                	mov    %esp,%ebp
40000c52:	83 ec 18             	sub    $0x18,%esp
40000c55:	8b 45 08             	mov    0x8(%ebp),%eax
40000c58:	e8 73 fa ff ff       	call   400006d0 <resolveHandle>
40000c5d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000c61:	85 c0                	test   %eax,%eax
40000c63:	74 10                	je     40000c75 <fgetc+0x26>
40000c65:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000c68:	51                   	push   %ecx
40000c69:	6a 01                	push   $0x1
40000c6b:	52                   	push   %edx
40000c6c:	50                   	push   %eax
40000c6d:	e8 58 ff ff ff       	call   40000bca <fread>
40000c72:	83 c4 10             	add    $0x10,%esp
40000c75:	8a 45 f7             	mov    -0x9(%ebp),%al
40000c78:	c9                   	leave  
40000c79:	c3                   	ret    

40000c7a <getchar>:
40000c7a:	55                   	push   %ebp
40000c7b:	89 e5                	mov    %esp,%ebp
40000c7d:	83 ec 14             	sub    $0x14,%esp
40000c80:	6a 02                	push   $0x2
40000c82:	e8 c8 ff ff ff       	call   40000c4f <fgetc>
40000c87:	c9                   	leave  
40000c88:	c3                   	ret    

40000c89 <getc>:
40000c89:	55                   	push   %ebp
40000c8a:	89 e5                	mov    %esp,%ebp
40000c8c:	83 ec 08             	sub    $0x8,%esp
40000c8f:	c9                   	leave  
40000c90:	e9 ba ff ff ff       	jmp    40000c4f <fgetc>

40000c95 <fgets>:
40000c95:	55                   	push   %ebp
40000c96:	89 e5                	mov    %esp,%ebp
40000c98:	57                   	push   %edi
40000c99:	56                   	push   %esi
40000c9a:	53                   	push   %ebx
40000c9b:	83 ec 1c             	sub    $0x1c,%esp
40000c9e:	31 db                	xor    %ebx,%ebx
40000ca0:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000ca3:	8b 75 08             	mov    0x8(%ebp),%esi
40000ca6:	8d 47 ff             	lea    -0x1(%edi),%eax
40000ca9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000cac:	eb 16                	jmp    40000cc4 <fgets+0x2f>
40000cae:	83 ec 0c             	sub    $0xc,%esp
40000cb1:	ff 75 10             	pushl  0x10(%ebp)
40000cb4:	e8 96 ff ff ff       	call   40000c4f <fgetc>
40000cb9:	83 c4 10             	add    $0x10,%esp
40000cbc:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000cbf:	84 c0                	test   %al,%al
40000cc1:	74 0a                	je     40000ccd <fgets+0x38>
40000cc3:	43                   	inc    %ebx
40000cc4:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000cc7:	7c e5                	jl     40000cae <fgets+0x19>
40000cc9:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000ccd:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000cd0:	89 f0                	mov    %esi,%eax
40000cd2:	5b                   	pop    %ebx
40000cd3:	5e                   	pop    %esi
40000cd4:	5f                   	pop    %edi
40000cd5:	5d                   	pop    %ebp
40000cd6:	c3                   	ret    

40000cd7 <getln>:
40000cd7:	55                   	push   %ebp
40000cd8:	89 e5                	mov    %esp,%ebp
40000cda:	56                   	push   %esi
40000cdb:	53                   	push   %ebx
40000cdc:	31 db                	xor    %ebx,%ebx
40000cde:	8b 75 08             	mov    0x8(%ebp),%esi
40000ce1:	eb 42                	jmp    40000d25 <getln+0x4e>
40000ce3:	3c 0a                	cmp    $0xa,%al
40000ce5:	75 0f                	jne    40000cf6 <getln+0x1f>
40000ce7:	83 ec 0c             	sub    $0xc,%esp
40000cea:	6a 0a                	push   $0xa
40000cec:	e8 93 fd ff ff       	call   40000a84 <putchar>
40000cf1:	83 c4 10             	add    $0x10,%esp
40000cf4:	eb 40                	jmp    40000d36 <getln+0x5f>
40000cf6:	3c 08                	cmp    $0x8,%al
40000cf8:	75 18                	jne    40000d12 <getln+0x3b>
40000cfa:	85 db                	test   %ebx,%ebx
40000cfc:	74 0e                	je     40000d0c <getln+0x35>
40000cfe:	83 ec 0c             	sub    $0xc,%esp
40000d01:	4b                   	dec    %ebx
40000d02:	6a 08                	push   $0x8
40000d04:	e8 7b fd ff ff       	call   40000a84 <putchar>
40000d09:	83 c4 10             	add    $0x10,%esp
40000d0c:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000d10:	eb 13                	jmp    40000d25 <getln+0x4e>
40000d12:	83 ec 0c             	sub    $0xc,%esp
40000d15:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d18:	0f be c0             	movsbl %al,%eax
40000d1b:	50                   	push   %eax
40000d1c:	43                   	inc    %ebx
40000d1d:	e8 62 fd ff ff       	call   40000a84 <putchar>
40000d22:	83 c4 10             	add    $0x10,%esp
40000d25:	83 ec 0c             	sub    $0xc,%esp
40000d28:	6a 02                	push   $0x2
40000d2a:	e8 20 ff ff ff       	call   40000c4f <fgetc>
40000d2f:	83 c4 10             	add    $0x10,%esp
40000d32:	84 c0                	test   %al,%al
40000d34:	75 ad                	jne    40000ce3 <getln+0xc>
40000d36:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000d3a:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000d3d:	89 f0                	mov    %esi,%eax
40000d3f:	5b                   	pop    %ebx
40000d40:	5e                   	pop    %esi
40000d41:	5d                   	pop    %ebp
40000d42:	c3                   	ret    
	...

40000d44 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
40000d44:	55                   	push   %ebp
40000d45:	89 e5                	mov    %esp,%ebp
40000d47:	53                   	push   %ebx
40000d48:	8b 45 08             	mov    0x8(%ebp),%eax
40000d4b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d4e:	8b 4d 10             	mov    0x10(%ebp),%ecx
int main(int argc, char* args[])
40000d51:	89 c2                	mov    %eax,%edx
{
    if(argc < 2) {
40000d53:	eb 04                	jmp    40000d59 <memset+0x15>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
40000d55:	88 1a                	mov    %bl,(%edx)
40000d57:	49                   	dec    %ecx
40000d58:	42                   	inc    %edx
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
{
    if(argc < 2) {
40000d59:	85 c9                	test   %ecx,%ecx
40000d5b:	75 f8                	jne    40000d55 <memset+0x11>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000d5d:	5b                   	pop    %ebx
40000d5e:	5d                   	pop    %ebp
40000d5f:	c3                   	ret    

40000d60 <memcpy>:

    //Following is general parser code.
40000d60:	55                   	push   %ebp

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000d61:	31 c9                	xor    %ecx,%ecx
        exit(1);
    }

    char* filePath = 0;

    //Following is general parser code.
40000d63:	89 e5                	mov    %esp,%ebp
40000d65:	56                   	push   %esi
40000d66:	53                   	push   %ebx
40000d67:	8b 75 10             	mov    0x10(%ebp),%esi
40000d6a:	8b 45 08             	mov    0x8(%ebp),%eax
40000d6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000d70:	85 f6                	test   %esi,%esi
40000d72:	75 04                	jne    40000d78 <memcpy+0x18>
40000d74:	31 c0                	xor    %eax,%eax
40000d76:	eb 0a                	jmp    40000d82 <memcpy+0x22>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
40000d78:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000d7b:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000d7e:	41                   	inc    %ecx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
40000d7f:	4e                   	dec    %esi
40000d80:	75 f6                	jne    40000d78 <memcpy+0x18>
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
40000d82:	5b                   	pop    %ebx
40000d83:	5e                   	pop    %esi
40000d84:	5d                   	pop    %ebp
40000d85:	c3                   	ret    

40000d86 <memcmp>:
            }
        }
40000d86:	55                   	push   %ebp
        else
40000d87:	83 c8 ff             	or     $0xffffffff,%eax
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
40000d8a:	89 e5                	mov    %esp,%ebp
40000d8c:	57                   	push   %edi
40000d8d:	56                   	push   %esi
40000d8e:	53                   	push   %ebx
40000d8f:	8b 75 08             	mov    0x8(%ebp),%esi
40000d92:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000d95:	8b 5d 10             	mov    0x10(%ebp),%ebx
        else
40000d98:	85 f6                	test   %esi,%esi
40000d9a:	74 2c                	je     40000dc8 <memcmp+0x42>
        {
            if(filePath == 0) {
40000d9c:	b8 01 00 00 00       	mov    $0x1,%eax
40000da1:	85 ff                	test   %edi,%edi
40000da3:	74 23                	je     40000dc8 <memcmp+0x42>
                filePath = args[i];
            }
40000da5:	31 d2                	xor    %edx,%edx
40000da7:	85 db                	test   %ebx,%ebx
40000da9:	75 17                	jne    40000dc2 <memcmp+0x3c>
40000dab:	eb 19                	jmp    40000dc6 <memcmp+0x40>
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
40000dad:	8a 04 16             	mov    (%esi,%edx,1),%al
40000db0:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000db3:	38 c8                	cmp    %cl,%al
40000db5:	74 0a                	je     40000dc1 <memcmp+0x3b>
    }
40000db7:	0f b6 c0             	movzbl %al,%eax
40000dba:	0f b6 c9             	movzbl %cl,%ecx
40000dbd:	29 c8                	sub    %ecx,%eax
40000dbf:	eb 07                	jmp    40000dc8 <memcmp+0x42>
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
40000dc1:	42                   	inc    %edx
40000dc2:	39 da                	cmp    %ebx,%edx
40000dc4:	72 e7                	jb     40000dad <memcmp+0x27>
40000dc6:	31 c0                	xor    %eax,%eax
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
40000dc8:	5b                   	pop    %ebx
40000dc9:	5e                   	pop    %esi
40000dca:	5f                   	pop    %edi
40000dcb:	5d                   	pop    %ebp
40000dcc:	c3                   	ret    

40000dcd <strcmp>:
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000dcd:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000dce:	31 c0                	xor    %eax,%eax

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000dd0:	89 e5                	mov    %esp,%ebp
40000dd2:	56                   	push   %esi
40000dd3:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000dd4:	31 db                	xor    %ebx,%ebx

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000dd6:	8b 55 08             	mov    0x8(%ebp),%edx
40000dd9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000ddc:	85 d2                	test   %edx,%edx
40000dde:	75 03                	jne    40000de3 <strcmp+0x16>
40000de0:	eb 09                	jmp    40000deb <strcmp+0x1e>
        if(avail < length) length = avail;


40000de2:	40                   	inc    %eax
40000de3:	89 c3                	mov    %eax,%ebx
40000de5:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000de9:	75 f7                	jne    40000de2 <strcmp+0x15>
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000deb:	31 c0                	xor    %eax,%eax
40000ded:	31 f6                	xor    %esi,%esi
40000def:	85 c9                	test   %ecx,%ecx
40000df1:	75 03                	jne    40000df6 <strcmp+0x29>
40000df3:	eb 09                	jmp    40000dfe <strcmp+0x31>
        if(avail < length) length = avail;


40000df5:	40                   	inc    %eax
40000df6:	89 c6                	mov    %eax,%esi
40000df8:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000dfc:	75 f7                	jne    40000df5 <strcmp+0x28>
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
40000dfe:	89 f0                	mov    %esi,%eax
40000e00:	39 de                	cmp    %ebx,%esi
40000e02:	7e 02                	jle    40000e06 <strcmp+0x39>
40000e04:	89 d8                	mov    %ebx,%eax
40000e06:	40                   	inc    %eax
40000e07:	50                   	push   %eax
40000e08:	51                   	push   %ecx
40000e09:	52                   	push   %edx
40000e0a:	e8 77 ff ff ff       	call   40000d86 <memcmp>
        uint32_t avail = favailable(hdl);
40000e0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e12:	5b                   	pop    %ebx
40000e13:	5e                   	pop    %esi
40000e14:	5d                   	pop    %ebp
40000e15:	c3                   	ret    

40000e16 <strlen>:

        if(avail == 0) exit(0);
40000e16:	55                   	push   %ebp

40000e17:	31 d2                	xor    %edx,%edx
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000e19:	89 e5                	mov    %esp,%ebp

40000e1b:	31 c0                	xor    %eax,%eax
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000e1d:	8b 4d 08             	mov    0x8(%ebp),%ecx

40000e20:	85 c9                	test   %ecx,%ecx
40000e22:	75 03                	jne    40000e27 <strlen+0x11>
40000e24:	eb 09                	jmp    40000e2f <strlen+0x19>
        if(avail < length) length = avail;


40000e26:	42                   	inc    %edx
40000e27:	89 d0                	mov    %edx,%eax
40000e29:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000e2d:	75 f7                	jne    40000e26 <strlen+0x10>
        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }
40000e2f:	5d                   	pop    %ebp
40000e30:	c3                   	ret    

40000e31 <strcpy>:

    return 0;
40000e31:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e32:	31 d2                	xor    %edx,%edx

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000e34:	89 e5                	mov    %esp,%ebp
40000e36:	56                   	push   %esi
40000e37:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e38:	31 c9                	xor    %ecx,%ecx

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000e3a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e3d:	8b 45 08             	mov    0x8(%ebp),%eax
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e40:	85 db                	test   %ebx,%ebx
40000e42:	75 03                	jne    40000e47 <strcpy+0x16>
40000e44:	eb 09                	jmp    40000e4f <strcpy+0x1e>
        if(avail < length) length = avail;


40000e46:	42                   	inc    %edx
40000e47:	89 d1                	mov    %edx,%ecx
40000e49:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000e4d:	75 f7                	jne    40000e46 <strcpy+0x15>

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000e4f:	89 ce                	mov    %ecx,%esi
40000e51:	46                   	inc    %esi
40000e52:	74 0c                	je     40000e60 <strcpy+0x2f>
40000e54:	31 d2                	xor    %edx,%edx
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
40000e56:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000e59:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000e5c:	42                   	inc    %edx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
40000e5d:	4e                   	dec    %esi
40000e5e:	75 f6                	jne    40000e56 <strcpy+0x25>
    }

    return 0;
}
40000e60:	5b                   	pop    %ebx
40000e61:	5e                   	pop    %esi
40000e62:	5d                   	pop    %ebp
40000e63:	c3                   	ret    

40000e64 <strtoknc>:
40000e64:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e65:	31 c0                	xor    %eax,%eax
40000e67:	89 e5                	mov    %esp,%ebp
40000e69:	57                   	push   %edi
40000e6a:	56                   	push   %esi
40000e6b:	53                   	push   %ebx
40000e6c:	83 ec 04             	sub    $0x4,%esp
40000e6f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e72:	8b 4d 08             	mov    0x8(%ebp),%ecx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e75:	85 db                	test   %ebx,%ebx
40000e77:	75 06                	jne    40000e7f <strtoknc+0x1b>
40000e79:	e9 83 00 00 00       	jmp    40000f01 <strtoknc+0x9d>
        if(avail < length) length = avail;


40000e7e:	40                   	inc    %eax
40000e7f:	89 c7                	mov    %eax,%edi
40000e81:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e85:	75 f7                	jne    40000e7e <strtoknc+0x1a>
40000e87:	85 c0                	test   %eax,%eax
40000e89:	74 76                	je     40000f01 <strtoknc+0x9d>
40000e8b:	85 c9                	test   %ecx,%ecx
40000e8d:	75 0b                	jne    40000e9a <strtoknc+0x36>
40000e8f:	83 3d 00 32 00 40 00 	cmpl   $0x0,0x40003200
40000e96:	75 08                	jne    40000ea0 <strtoknc+0x3c>
40000e98:	eb 67                	jmp    40000f01 <strtoknc+0x9d>
40000e9a:	89 0d 00 32 00 40    	mov    %ecx,0x40003200
40000ea0:	a1 00 32 00 40       	mov    0x40003200,%eax
40000ea5:	31 c9                	xor    %ecx,%ecx
40000ea7:	eb 0b                	jmp    40000eb4 <strtoknc+0x50>
40000ea9:	8a 10                	mov    (%eax),%dl
40000eab:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000eae:	75 03                	jne    40000eb3 <strtoknc+0x4f>
40000eb0:	40                   	inc    %eax
40000eb1:	eb 05                	jmp    40000eb8 <strtoknc+0x54>
40000eb3:	41                   	inc    %ecx
40000eb4:	39 f9                	cmp    %edi,%ecx
40000eb6:	7c f1                	jl     40000ea9 <strtoknc+0x45>
40000eb8:	39 f9                	cmp    %edi,%ecx
40000eba:	75 e9                	jne    40000ea5 <strtoknc+0x41>
40000ebc:	a3 00 32 00 40       	mov    %eax,0x40003200
40000ec1:	80 38 00             	cmpb   $0x0,(%eax)
40000ec4:	75 28                	jne    40000eee <strtoknc+0x8a>
40000ec6:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
40000ecd:	00 00 00 
40000ed0:	eb 2f                	jmp    40000f01 <strtoknc+0x9d>
40000ed2:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000ed5:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000ed8:	75 05                	jne    40000edf <strtoknc+0x7b>
40000eda:	c6 06 00             	movb   $0x0,(%esi)
40000edd:	eb 05                	jmp    40000ee4 <strtoknc+0x80>
40000edf:	41                   	inc    %ecx
40000ee0:	39 f9                	cmp    %edi,%ecx
40000ee2:	7c ee                	jl     40000ed2 <strtoknc+0x6e>
40000ee4:	ff 05 00 32 00 40    	incl   0x40003200
40000eea:	39 f9                	cmp    %edi,%ecx
40000eec:	7c 15                	jl     40000f03 <strtoknc+0x9f>
40000eee:	8b 35 00 32 00 40    	mov    0x40003200,%esi
40000ef4:	8a 16                	mov    (%esi),%dl
40000ef6:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000ef9:	84 d2                	test   %dl,%dl
40000efb:	74 06                	je     40000f03 <strtoknc+0x9f>
40000efd:	31 c9                	xor    %ecx,%ecx
40000eff:	eb df                	jmp    40000ee0 <strtoknc+0x7c>
40000f01:	31 c0                	xor    %eax,%eax
40000f03:	5a                   	pop    %edx
40000f04:	5b                   	pop    %ebx
40000f05:	5e                   	pop    %esi
40000f06:	5f                   	pop    %edi
40000f07:	5d                   	pop    %ebp
40000f08:	c3                   	ret    

40000f09 <strclone>:
    return 0;
}
40000f09:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000f0a:	31 c0                	xor    %eax,%eax
    return 0;
}
40000f0c:	89 e5                	mov    %esp,%ebp
40000f0e:	56                   	push   %esi
40000f0f:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000f10:	31 d2                	xor    %edx,%edx
    return 0;
}
40000f12:	8b 5d 08             	mov    0x8(%ebp),%ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000f15:	85 db                	test   %ebx,%ebx
40000f17:	75 03                	jne    40000f1c <strclone+0x13>
40000f19:	eb 09                	jmp    40000f24 <strclone+0x1b>
        if(avail < length) length = avail;


40000f1b:	40                   	inc    %eax
40000f1c:	89 c2                	mov    %eax,%edx
40000f1e:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000f22:	75 f7                	jne    40000f1b <strclone+0x12>
}
40000f24:	83 ec 0c             	sub    $0xc,%esp
40000f27:	42                   	inc    %edx
40000f28:	52                   	push   %edx
40000f29:	e8 af 01 00 00       	call   400010dd <malloc>
40000f2e:	59                   	pop    %ecx
}
40000f2f:	89 c6                	mov    %eax,%esi
40000f31:	58                   	pop    %eax
40000f32:	53                   	push   %ebx
40000f33:	56                   	push   %esi
40000f34:	e8 f8 fe ff ff       	call   40000e31 <strcpy>
40000f39:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000f3c:	89 f0                	mov    %esi,%eax
40000f3e:	5b                   	pop    %ebx
40000f3f:	5e                   	pop    %esi
40000f40:	5d                   	pop    %ebp
40000f41:	c3                   	ret    

40000f42 <strtok>:
40000f42:	55                   	push   %ebp
40000f43:	89 e5                	mov    %esp,%ebp
40000f45:	56                   	push   %esi
40000f46:	53                   	push   %ebx
40000f47:	8b 75 08             	mov    0x8(%ebp),%esi
40000f4a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000f4d:	85 f6                	test   %esi,%esi
40000f4f:	74 2e                	je     40000f7f <strtok+0x3d>
40000f51:	a1 04 32 00 40       	mov    0x40003204,%eax
40000f56:	85 c0                	test   %eax,%eax
40000f58:	74 0c                	je     40000f66 <strtok+0x24>
40000f5a:	83 ec 0c             	sub    $0xc,%esp
40000f5d:	50                   	push   %eax
40000f5e:	e8 31 00 00 00       	call   40000f94 <free>
40000f63:	83 c4 10             	add    $0x10,%esp
40000f66:	83 ec 0c             	sub    $0xc,%esp
40000f69:	56                   	push   %esi
40000f6a:	e8 9a ff ff ff       	call   40000f09 <strclone>
40000f6f:	83 c4 10             	add    $0x10,%esp
40000f72:	a3 04 32 00 40       	mov    %eax,0x40003204
40000f77:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f7a:	89 45 08             	mov    %eax,0x8(%ebp)
40000f7d:	eb 0a                	jmp    40000f89 <strtok+0x47>
40000f7f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f82:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000f89:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000f8c:	5b                   	pop    %ebx
40000f8d:	5e                   	pop    %esi
40000f8e:	5d                   	pop    %ebp
40000f8f:	e9 d0 fe ff ff       	jmp    40000e64 <strtoknc>

40000f94 <free>:
40000f94:	55                   	push   %ebp
40000f95:	89 e5                	mov    %esp,%ebp
40000f97:	57                   	push   %edi
40000f98:	56                   	push   %esi
40000f99:	53                   	push   %ebx
40000f9a:	83 ec 08             	sub    $0x8,%esp
40000f9d:	8b 15 0c 32 00 40    	mov    0x4000320c,%edx
40000fa3:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000fa6:	89 d0                	mov    %edx,%eax
40000fa8:	e9 b8 00 00 00       	jmp    40001065 <free+0xd1>
40000fad:	3b 48 04             	cmp    0x4(%eax),%ecx
40000fb0:	0f 85 ac 00 00 00    	jne    40001062 <free+0xce>
40000fb6:	31 c9                	xor    %ecx,%ecx
40000fb8:	eb 23                	jmp    40000fdd <free+0x49>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000fba:	39 c2                	cmp    %eax,%edx
40000fbc:	75 1a                	jne    40000fd8 <free+0x44>
    //Following is general parser code.
40000fbe:	85 c9                	test   %ecx,%ecx
40000fc0:	8b 50 08             	mov    0x8(%eax),%edx
40000fc3:	75 0e                	jne    40000fd3 <free+0x3f>

40000fc5:	89 15 0c 32 00 40    	mov    %edx,0x4000320c
40000fcb:	8b 0d 10 32 00 40    	mov    0x40003210,%ecx
40000fd1:	eb 10                	jmp    40000fe3 <free+0x4f>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000fd3:	89 51 08             	mov    %edx,0x8(%ecx)
40000fd6:	eb f3                	jmp    40000fcb <free+0x37>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40000fd8:	89 d1                	mov    %edx,%ecx
40000fda:	8b 52 08             	mov    0x8(%edx),%edx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000fdd:	85 d2                	test   %edx,%edx
40000fdf:	75 d9                	jne    40000fba <free+0x26>
40000fe1:	eb e8                	jmp    40000fcb <free+0x37>
40000fe3:	89 ca                	mov    %ecx,%edx
40000fe5:	eb 6d                	jmp    40001054 <free+0xc0>
40000fe7:	8b 5a 04             	mov    0x4(%edx),%ebx
40000fea:	8b 32                	mov    (%edx),%esi
40000fec:	8b 78 04             	mov    0x4(%eax),%edi
40000fef:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000ff2:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000ff5:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000ff8:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000ffb:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000ffe:	75 18                	jne    40001018 <free+0x84>
40001000:	89 58 04             	mov    %ebx,0x4(%eax)
40001003:	31 f6                	xor    %esi,%esi
40001005:	89 cb                	mov    %ecx,%ebx
40001007:	eb 09                	jmp    40001012 <free+0x7e>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40001009:	39 d3                	cmp    %edx,%ebx
4000100b:	74 29                	je     40001036 <free+0xa2>

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
4000100d:	89 de                	mov    %ebx,%esi
4000100f:	8b 5b 08             	mov    0x8(%ebx),%ebx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40001012:	85 db                	test   %ebx,%ebx
40001014:	75 f3                	jne    40001009 <free+0x75>
40001016:	eb cb                	jmp    40000fe3 <free+0x4f>
40001018:	8b 38                	mov    (%eax),%edi
4000101a:	89 7d f0             	mov    %edi,-0x10(%ebp)
4000101d:	8b 7d ec             	mov    -0x14(%ebp),%edi
40001020:	03 7d f0             	add    -0x10(%ebp),%edi
40001023:	39 fb                	cmp    %edi,%ebx
40001025:	75 2a                	jne    40001051 <free+0xbd>
40001027:	03 75 f0             	add    -0x10(%ebp),%esi
4000102a:	89 cb                	mov    %ecx,%ebx
4000102c:	89 30                	mov    %esi,(%eax)
4000102e:	31 f6                	xor    %esi,%esi
40001030:	eb 19                	jmp    4000104b <free+0xb7>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40001032:	39 d3                	cmp    %edx,%ebx
40001034:	75 10                	jne    40001046 <free+0xb2>
    //Following is general parser code.
40001036:	85 f6                	test   %esi,%esi
40001038:	8b 53 08             	mov    0x8(%ebx),%edx
4000103b:	75 04                	jne    40001041 <free+0xad>

4000103d:	89 d1                	mov    %edx,%ecx
4000103f:	eb a2                	jmp    40000fe3 <free+0x4f>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40001041:	89 56 08             	mov    %edx,0x8(%esi)
40001044:	eb 9d                	jmp    40000fe3 <free+0x4f>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40001046:	89 de                	mov    %ebx,%esi
40001048:	8b 5b 08             	mov    0x8(%ebx),%ebx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
4000104b:	85 db                	test   %ebx,%ebx
4000104d:	75 e3                	jne    40001032 <free+0x9e>
4000104f:	eb 92                	jmp    40000fe3 <free+0x4f>
40001051:	8b 52 08             	mov    0x8(%edx),%edx
40001054:	85 d2                	test   %edx,%edx
40001056:	75 8f                	jne    40000fe7 <free+0x53>
                //TODO implement int parse
                break;
            }
        }
        else
        {
40001058:	89 48 08             	mov    %ecx,0x8(%eax)
            if(filePath == 0) {
4000105b:	a3 10 32 00 40       	mov    %eax,0x40003210
40001060:	eb 0b                	jmp    4000106d <free+0xd9>
40001062:	8b 40 08             	mov    0x8(%eax),%eax
40001065:	85 c0                	test   %eax,%eax
40001067:	0f 85 40 ff ff ff    	jne    40000fad <free+0x19>
4000106d:	58                   	pop    %eax
4000106e:	5a                   	pop    %edx
4000106f:	5b                   	pop    %ebx
40001070:	5e                   	pop    %esi
40001071:	5f                   	pop    %edi
40001072:	5d                   	pop    %ebp
40001073:	c3                   	ret    

40001074 <pop_unused_node>:
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
40001074:	55                   	push   %ebp
40001075:	89 e5                	mov    %esp,%ebp
40001077:	53                   	push   %ebx
40001078:	83 ec 04             	sub    $0x4,%esp
        {
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }
4000107b:	a1 08 32 00 40       	mov    0x40003208,%eax
40001080:	eb 45                	jmp    400010c7 <pop_unused_node+0x53>
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
40001082:	83 ec 0c             	sub    $0xc,%esp
40001085:	6a 01                	push   $0x1
40001087:	e8 5b 02 00 00       	call   400012e7 <vmm_alloc_cont>

4000108c:	83 c4 0c             	add    $0xc,%esp
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
4000108f:	89 c3                	mov    %eax,%ebx

40001091:	68 00 10 00 00       	push   $0x1000
40001096:	6a 00                	push   $0x0
40001098:	50                   	push   %eax
40001099:	e8 a6 fc ff ff       	call   40000d44 <memset>
4000109e:	8b 15 08 32 00 40    	mov    0x40003208,%edx
400010a4:	8d 43 0c             	lea    0xc(%ebx),%eax
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
400010a7:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
400010ad:	83 c4 10             	add    $0x10,%esp
                //TODO implement int parse
                break;
            }
        }
        else
        {
400010b0:	89 50 08             	mov    %edx,0x8(%eax)
400010b3:	89 c2                	mov    %eax,%edx
400010b5:	83 c0 0c             	add    $0xc,%eax
    }

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
400010b8:	39 c8                	cmp    %ecx,%eax
400010ba:	75 f4                	jne    400010b0 <pop_unused_node+0x3c>
400010bc:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
400010c2:	a3 08 32 00 40       	mov    %eax,0x40003208
        {
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }
400010c7:	85 c0                	test   %eax,%eax
400010c9:	74 b7                	je     40001082 <pop_unused_node+0xe>
    }

    char* filePath = 0;

    //Following is general parser code.

400010cb:	8b 50 08             	mov    0x8(%eax),%edx

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

400010ce:	85 c0                	test   %eax,%eax
    }

    char* filePath = 0;

    //Following is general parser code.

400010d0:	89 15 08 32 00 40    	mov    %edx,0x40003208

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

400010d6:	74 aa                	je     40001082 <pop_unused_node+0xe>
        if(avail == 0) exit(0);

        if(avail < length) length = avail;


        uint32_t res = fread(hdl, buffer, length);
400010d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400010db:	c9                   	leave  
400010dc:	c3                   	ret    

400010dd <malloc>:
400010dd:	55                   	push   %ebp
400010de:	89 e5                	mov    %esp,%ebp
400010e0:	57                   	push   %edi
400010e1:	56                   	push   %esi
400010e2:	53                   	push   %ebx
400010e3:	83 ec 1c             	sub    $0x1c,%esp
400010e6:	a1 10 32 00 40       	mov    0x40003210,%eax
400010eb:	8b 75 08             	mov    0x8(%ebp),%esi
400010ee:	89 c3                	mov    %eax,%ebx
400010f0:	eb 07                	jmp    400010f9 <malloc+0x1c>
400010f2:	39 33                	cmp    %esi,(%ebx)
400010f4:	73 0c                	jae    40001102 <malloc+0x25>
400010f6:	8b 5b 08             	mov    0x8(%ebx),%ebx
400010f9:	85 db                	test   %ebx,%ebx
400010fb:	75 f5                	jne    400010f2 <malloc+0x15>
400010fd:	e9 93 00 00 00       	jmp    40001195 <malloc+0xb8>
40001102:	8b 3b                	mov    (%ebx),%edi
40001104:	31 d2                	xor    %edx,%edx
40001106:	29 f7                	sub    %esi,%edi
40001108:	89 33                	mov    %esi,(%ebx)
4000110a:	eb 4b                	jmp    40001157 <malloc+0x7a>
4000110c:	e8 63 ff ff ff       	call   40001074 <pop_unused_node>
40001111:	8b 13                	mov    (%ebx),%edx
40001113:	03 53 04             	add    0x4(%ebx),%edx
40001116:	29 f7                	sub    %esi,%edi
40001118:	89 50 04             	mov    %edx,0x4(%eax)
                //TODO implement int parse
                break;
            }
        }
        else
        {
4000111b:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001121:	89 50 08             	mov    %edx,0x8(%eax)
40001124:	89 38                	mov    %edi,(%eax)
                break;
            }
        }
        else
        {
            if(filePath == 0) {
40001126:	a3 10 32 00 40       	mov    %eax,0x40003210
                //TODO implement int parse
                break;
            }
        }
        else
        {
4000112b:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001130:	89 43 08             	mov    %eax,0x8(%ebx)
            if(filePath == 0) {
40001133:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
40001139:	eb 4f                	jmp    4000118a <malloc+0xad>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

4000113b:	39 d8                	cmp    %ebx,%eax
4000113d:	75 13                	jne    40001152 <malloc+0x75>
    //Following is general parser code.
4000113f:	85 d2                	test   %edx,%edx
40001141:	8b 43 08             	mov    0x8(%ebx),%eax
40001144:	75 07                	jne    4000114d <malloc+0x70>

40001146:	a3 10 32 00 40       	mov    %eax,0x40003210
4000114b:	eb 0e                	jmp    4000115b <malloc+0x7e>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

4000114d:	89 42 08             	mov    %eax,0x8(%edx)
40001150:	eb 09                	jmp    4000115b <malloc+0x7e>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40001152:	89 c2                	mov    %eax,%edx
40001154:	8b 40 08             	mov    0x8(%eax),%eax
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40001157:	85 c0                	test   %eax,%eax
40001159:	75 e0                	jne    4000113b <malloc+0x5e>
                //TODO implement int parse
                break;
            }
        }
        else
        {
4000115b:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001160:	85 ff                	test   %edi,%edi
                //TODO implement int parse
                break;
            }
        }
        else
        {
40001162:	89 43 08             	mov    %eax,0x8(%ebx)
            if(filePath == 0) {
40001165:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
4000116b:	74 1d                	je     4000118a <malloc+0xad>
4000116d:	e8 02 ff ff ff       	call   40001074 <pop_unused_node>
40001172:	8b 13                	mov    (%ebx),%edx
40001174:	03 53 04             	add    0x4(%ebx),%edx
40001177:	89 50 04             	mov    %edx,0x4(%eax)
                //TODO implement int parse
                break;
            }
        }
        else
        {
4000117a:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001180:	89 50 08             	mov    %edx,0x8(%eax)
40001183:	89 38                	mov    %edi,(%eax)
                break;
            }
        }
        else
        {
            if(filePath == 0) {
40001185:	a3 10 32 00 40       	mov    %eax,0x40003210
4000118a:	8b 43 04             	mov    0x4(%ebx),%eax
4000118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001190:	5b                   	pop    %ebx
40001191:	5e                   	pop    %esi
40001192:	5f                   	pop    %edi
40001193:	5d                   	pop    %ebp
40001194:	c3                   	ret    
40001195:	89 f0                	mov    %esi,%eax
40001197:	89 f7                	mov    %esi,%edi
40001199:	c1 ef 0c             	shr    $0xc,%edi
4000119c:	25 ff 0f 00 00       	and    $0xfff,%eax
400011a1:	83 f8 01             	cmp    $0x1,%eax
400011a4:	83 df ff             	sbb    $0xffffffff,%edi
400011a7:	83 ec 0c             	sub    $0xc,%esp
400011aa:	57                   	push   %edi
400011ab:	e8 37 01 00 00       	call   400012e7 <vmm_alloc_cont>
400011b0:	c1 e7 0c             	shl    $0xc,%edi
400011b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400011b6:	e8 b9 fe ff ff       	call   40001074 <pop_unused_node>
400011bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400011be:	83 c4 10             	add    $0x10,%esp
400011c1:	89 c3                	mov    %eax,%ebx
400011c3:	89 50 04             	mov    %edx,0x4(%eax)
400011c6:	89 30                	mov    %esi,(%eax)
400011c8:	39 f7                	cmp    %esi,%edi
400011ca:	0f 86 5b ff ff ff    	jbe    4000112b <malloc+0x4e>
400011d0:	e9 37 ff ff ff       	jmp    4000110c <malloc+0x2f>

400011d5 <realloc>:
400011d5:	55                   	push   %ebp
400011d6:	89 e5                	mov    %esp,%ebp
400011d8:	56                   	push   %esi
400011d9:	53                   	push   %ebx
400011da:	8b 1d 0c 32 00 40    	mov    0x4000320c,%ebx
400011e0:	8b 55 08             	mov    0x8(%ebp),%edx
400011e3:	8b 45 0c             	mov    0xc(%ebp),%eax
400011e6:	eb 3e                	jmp    40001226 <realloc+0x51>
400011e8:	3b 53 04             	cmp    0x4(%ebx),%edx
400011eb:	75 36                	jne    40001223 <realloc+0x4e>
400011ed:	85 c0                	test   %eax,%eax
400011ef:	75 0b                	jne    400011fc <realloc+0x27>
400011f1:	52                   	push   %edx
400011f2:	31 f6                	xor    %esi,%esi
400011f4:	e8 9b fd ff ff       	call   40000f94 <free>
400011f9:	5b                   	pop    %ebx
400011fa:	eb 30                	jmp    4000122c <realloc+0x57>
400011fc:	83 ec 0c             	sub    $0xc,%esp
400011ff:	50                   	push   %eax
40001200:	e8 d8 fe ff ff       	call   400010dd <malloc>
40001205:	83 c4 0c             	add    $0xc,%esp
40001208:	89 c6                	mov    %eax,%esi
4000120a:	ff 33                	pushl  (%ebx)
4000120c:	ff 73 04             	pushl  0x4(%ebx)
4000120f:	50                   	push   %eax
40001210:	e8 4b fb ff ff       	call   40000d60 <memcpy>
40001215:	59                   	pop    %ecx
40001216:	ff 73 04             	pushl  0x4(%ebx)
40001219:	e8 76 fd ff ff       	call   40000f94 <free>
4000121e:	83 c4 10             	add    $0x10,%esp
40001221:	eb 09                	jmp    4000122c <realloc+0x57>
40001223:	8b 5b 08             	mov    0x8(%ebx),%ebx
40001226:	85 db                	test   %ebx,%ebx
40001228:	75 be                	jne    400011e8 <realloc+0x13>
4000122a:	31 f6                	xor    %esi,%esi
4000122c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000122f:	89 f0                	mov    %esi,%eax
40001231:	5b                   	pop    %ebx
40001232:	5e                   	pop    %esi
40001233:	5d                   	pop    %ebp
40001234:	c3                   	ret    

40001235 <calloc>:
40001235:	55                   	push   %ebp
40001236:	89 e5                	mov    %esp,%ebp
40001238:	56                   	push   %esi
40001239:	53                   	push   %ebx
4000123a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
4000123d:	83 ec 0c             	sub    $0xc,%esp
40001240:	0f af 5d 08          	imul   0x8(%ebp),%ebx
40001244:	53                   	push   %ebx
40001245:	e8 93 fe ff ff       	call   400010dd <malloc>
4000124a:	83 c4 10             	add    $0x10,%esp
4000124d:	89 c6                	mov    %eax,%esi
4000124f:	85 c0                	test   %eax,%eax
40001251:	74 0d                	je     40001260 <calloc+0x2b>
40001253:	50                   	push   %eax
40001254:	53                   	push   %ebx
40001255:	6a 00                	push   $0x0
40001257:	56                   	push   %esi
40001258:	e8 e7 fa ff ff       	call   40000d44 <memset>
4000125d:	83 c4 10             	add    $0x10,%esp
40001260:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001263:	89 f0                	mov    %esi,%eax
40001265:	5b                   	pop    %ebx
40001266:	5e                   	pop    %esi
40001267:	5d                   	pop    %ebp
40001268:	c3                   	ret    
40001269:	00 00                	add    %al,(%eax)
	...

4000126c <print_memstat>:
            }
        }
        else
        {
            if(filePath == 0) {
                filePath = args[i];
4000126c:	55                   	push   %ebp
4000126d:	89 e5                	mov    %esp,%ebp
4000126f:	83 ec 34             	sub    $0x34,%esp
    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

40001272:	8d 45 e0             	lea    -0x20(%ebp),%eax
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
40001275:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
    }

4000127c:	50                   	push   %eax
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
4000127d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001284:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000128b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001292:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001299:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    }

400012a0:	e8 7f 00 00 00       	call   40001324 <syscall>
400012a5:	83 c4 10             	add    $0x10,%esp
    HANDLE hdl = fopen(filePath, FM_READ);
400012a8:	c9                   	leave  
400012a9:	c3                   	ret    

400012aa <vmm_free>:

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

400012aa:	55                   	push   %ebp
400012ab:	89 e5                	mov    %esp,%ebp
400012ad:	83 ec 34             	sub    $0x34,%esp
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
400012b0:	8b 45 08             	mov    0x8(%ebp),%eax
400012b3:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
400012ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        else
400012bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
400012c0:	50                   	push   %eax
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
400012c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400012c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400012cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400012d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        }
        else
400012dd:	e8 42 00 00 00       	call   40001324 <syscall>
400012e2:	83 c4 10             	add    $0x10,%esp
        {
400012e5:	c9                   	leave  
400012e6:	c3                   	ret    

400012e7 <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
400012e7:	55                   	push   %ebp
400012e8:	89 e5                	mov    %esp,%ebp
400012ea:	83 ec 34             	sub    $0x34,%esp
{
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

400012ed:	8b 45 08             	mov    0x8(%ebp),%eax
400012f0:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400012f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    char* filePath = 0;

400012fa:	8d 45 e0             	lea    -0x20(%ebp),%eax
400012fd:	50                   	push   %eax
{
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

400012fe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001305:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000130c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001313:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char* filePath = 0;

4000131a:	e8 05 00 00 00       	call   40001324 <syscall>
    //Following is general parser code.

    uint32_t* maxSize = 0;
4000131f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001322:	c9                   	leave  
40001323:	c3                   	ret    

40001324 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
40001324:	55                   	push   %ebp
40001325:	89 e5                	mov    %esp,%ebp
40001327:	57                   	push   %edi
40001328:	56                   	push   %esi
40001329:	53                   	push   %ebx
4000132a:	83 ec 10             	sub    $0x10,%esp
 
4000132d:	8b 55 08             	mov    0x8(%ebp),%edx
40001330:	8b 45 08             	mov    0x8(%ebp),%eax
40001333:	8b 72 0c             	mov    0xc(%edx),%esi
40001336:	8b 00                	mov    (%eax),%eax
40001338:	89 75 e4             	mov    %esi,-0x1c(%ebp)
4000133b:	8b 5a 04             	mov    0x4(%edx),%ebx
4000133e:	8b 4a 08             	mov    0x8(%edx),%ecx
40001341:	8b 72 10             	mov    0x10(%edx),%esi
40001344:	8b 7a 14             	mov    0x14(%edx),%edi
40001347:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000134a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000134d:	cd 30                	int    $0x30
4000134f:	89 55 e8             	mov    %edx,-0x18(%ebp)
40001352:	8b 55 08             	mov    0x8(%ebp),%edx
40001355:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001358:	89 02                	mov    %eax,(%edx)
4000135a:	8b 45 e8             	mov    -0x18(%ebp),%eax
4000135d:	89 5a 04             	mov    %ebx,0x4(%edx)
40001360:	89 4a 08             	mov    %ecx,0x8(%edx)
40001363:	89 42 0c             	mov    %eax,0xc(%edx)
40001366:	89 72 10             	mov    %esi,0x10(%edx)
40001369:	89 7a 14             	mov    %edi,0x14(%edx)
    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
4000136c:	83 c4 10             	add    $0x10,%esp
4000136f:	5b                   	pop    %ebx
40001370:	5e                   	pop    %esi
40001371:	5f                   	pop    %edi
40001372:	5d                   	pop    %ebp
40001373:	c3                   	ret    
