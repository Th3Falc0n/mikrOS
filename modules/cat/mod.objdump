
../../initrfs/ibin/cat:     file format elf32-i386
../../initrfs/ibin/cat
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000052b

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x0000220e memsz 0x0000220e flags r-x
    LOAD off    0x00004000 vaddr 0x40003000 paddr 0x40003000 align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001304  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000084  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.1 0000018a  40002084  40002084  00003084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000214  40003000  40003000  00004000  2**2
                  ALLOC
  4 .stab         00004914  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00007b24  2**0
                  CONTENTS, READONLY
  6 .stabstr      000017f5  00000000  00000000  00007ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .rodata	00000000 .rodata
40002084 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40003000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 cat.c
00000000 l    df *ABS*	00000000 process.c
40003000 l     O .bss	00000200 irq_handlers
4000206c l     O .rodata	00000018 C.7.1012
4000059d l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000660 l     F .text	00000047 resolveHandle
40000b10 l     F .text	0000004a printrwerror
4000095d l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40001004 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
40000321 g     F .text	0000003d getExecPath
40000a14 g     F .text	00000014 putchar
40000dc1 g     F .text	00000033 strcpy
400003a4 g     F .text	0000003e yield
40000a28 g     F .text	000000e8 printf
400012b4 g     F .text	00000050 syscall
40000c25 g     F .text	00000042 fgets
40000c19 g     F .text	0000000c getc
40000cf0 g     F .text	00000026 memcpy
4000094b g     F .text	00000012 puts
400003e2 g     F .text	0000003d pexists
4000106d g     F .text	000000f8 malloc
40000477 g     F .text	0000003d fetch_rpc_data
40000df4 g     F .text	000000a5 strtoknc
400002b7 g     F .text	0000003d changeExecPath
40003210 g     O .bss	00000004 first_free
400007fa g     F .text	00000012 setstdout
400011c5 g     F .text	00000034 calloc
40001277 g     F .text	0000003d vmm_alloc_cont
40000245 g     F .text	0000003c exec
4000052b g     F .text	00000072 _start
40001165 g     F .text	00000060 realloc
400004ee g     F .text	0000003d set_rpc_handler
40000ed2 g     F .text	00000052 strtok
40000d16 g     F .text	00000047 memcmp
40000b5a g     F .text	00000085 fread
40003208 g     O .bss	00000004 first_unused
4000075e g     F .text	0000003c fopen
40000cd4 g     F .text	0000001c memset
40000000 g     F .text	000001d4 main
40000721 g     F .text	0000003d fclose
40000c0a g     F .text	0000000f getchar
40000c67 g     F .text	0000006c getln
40003204 g     O .bss	00000004 fr
400006e4 g     F .text	0000003d favailable
40000a01 g     F .text	00000013 putc
40000d5d g     F .text	00000049 strcmp
40000bdf g     F .text	0000002b fgetc
40003200 g     O .bss	00000004 sp
400002f4 g     F .text	0000002d cd
4000320c g     O .bss	00000004 first_used
4000099c g     F .text	00000065 fputc
4000084a g     F .text	00000093 fwrite
400007e8 g     F .text	00000012 setstdin
40000281 g     F .text	00000036 texec
40000e99 g     F .text	00000039 strclone
4000035e g     F .text	00000046 exit
4000041f g     F .text	00000058 register_irq_handler
4000079a g     F .text	0000003c fopenpmhandle
4000123a g     F .text	0000003d vmm_free
400001d4 g     F .text	00000071 printFilesystemError
40000da6 g     F .text	0000001b strlen
4000080c g     F .text	0000003e getLastVFSErr
400008dd g     F .text	0000006e fputs
400006a7 g     F .text	0000003d fmkfifo
400004b4 g     F .text	0000003a call_rpc
400007d6 g     F .text	00000012 setstderr
400011fc g     F .text	0000003e print_memstat
40000f24 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <main>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
{
40000000:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000004:	83 e4 f0             	and    $0xfffffff0,%esp
40000007:	ff 71 fc             	pushl  -0x4(%ecx)
4000000a:	55                   	push   %ebp
4000000b:	89 e5                	mov    %esp,%ebp
4000000d:	53                   	push   %ebx
4000000e:	51                   	push   %ecx
4000000f:	81 ec 30 04 00 00    	sub    $0x430,%esp
40000015:	89 cb                	mov    %ecx,%ebx
    if(argc < 2) {
40000017:	83 3b 01             	cmpl   $0x1,(%ebx)
4000001a:	7f 29                	jg     40000045 <main+0x45>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
4000001c:	8b 43 04             	mov    0x4(%ebx),%eax
4000001f:	8b 10                	mov    (%eax),%edx
40000021:	8b 43 04             	mov    0x4(%ebx),%eax
40000024:	8b 00                	mov    (%eax),%eax
40000026:	83 ec 04             	sub    $0x4,%esp
40000029:	52                   	push   %edx
4000002a:	50                   	push   %eax
4000002b:	68 00 20 00 40       	push   $0x40002000
40000030:	e8 f3 09 00 00       	call   40000a28 <printf>
40000035:	83 c4 10             	add    $0x10,%esp
        exit(1);
40000038:	83 ec 0c             	sub    $0xc,%esp
4000003b:	6a 01                	push   $0x1
4000003d:	e8 1c 03 00 00       	call   4000035e <exit>
40000042:	83 c4 10             	add    $0x10,%esp
    }

    char* filePath = 0;
40000045:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

    //Following is general parser code.

    uint32_t* maxSize = 0;
4000004c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    uint32_t ms = 1024;
40000053:	c7 45 d4 00 04 00 00 	movl   $0x400,-0x2c(%ebp)

    for(int i = 1; i < argc; i++) {
4000005a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
40000061:	eb 49                	jmp    400000ac <main+0xac>
        if(args[i][0] == '-') {
40000063:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000066:	c1 e0 02             	shl    $0x2,%eax
40000069:	03 43 04             	add    0x4(%ebx),%eax
4000006c:	8b 00                	mov    (%eax),%eax
4000006e:	8a 00                	mov    (%eax),%al
40000070:	3c 2d                	cmp    $0x2d,%al
40000072:	75 1e                	jne    40000092 <main+0x92>
            switch(args[i][1]) {
40000074:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000077:	c1 e0 02             	shl    $0x2,%eax
4000007a:	03 43 04             	add    0x4(%ebx),%eax
4000007d:	8b 00                	mov    (%eax),%eax
4000007f:	40                   	inc    %eax
40000080:	8a 00                	mov    (%eax),%al
40000082:	0f be c0             	movsbl %al,%eax
40000085:	83 f8 6d             	cmp    $0x6d,%eax
40000088:	75 1e                	jne    400000a8 <main+0xa8>
            case 'm':
                maxSize = &ms;
4000008a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
4000008d:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000090:	eb 17                	jmp    400000a9 <main+0xa9>
                break;
            }
        }
        else
        {
            if(filePath == 0) {
40000092:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
40000096:	75 11                	jne    400000a9 <main+0xa9>
                filePath = args[i];
40000098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000009b:	c1 e0 02             	shl    $0x2,%eax
4000009e:	03 43 04             	add    0x4(%ebx),%eax
400000a1:	8b 00                	mov    (%eax),%eax
400000a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
400000a6:	eb 01                	jmp    400000a9 <main+0xa9>

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
400000a8:	90                   	nop    
    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
400000a9:	ff 45 e4             	incl   -0x1c(%ebp)
400000ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400000af:	3b 03                	cmp    (%ebx),%eax
400000b1:	7c b0                	jl     40000063 <main+0x63>
                filePath = args[i];
            }
        }
    }

    if(filePath == 0) {
400000b3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
400000b7:	75 3f                	jne    400000f8 <main+0xf8>
        printf("%s: No file specified\n", args[0]);
400000b9:	8b 43 04             	mov    0x4(%ebx),%eax
400000bc:	8b 00                	mov    (%eax),%eax
400000be:	83 ec 08             	sub    $0x8,%esp
400000c1:	50                   	push   %eax
400000c2:	68 37 20 00 40       	push   $0x40002037
400000c7:	e8 5c 09 00 00       	call   40000a28 <printf>
400000cc:	83 c4 10             	add    $0x10,%esp
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
400000cf:	8b 43 04             	mov    0x4(%ebx),%eax
400000d2:	8b 10                	mov    (%eax),%edx
400000d4:	8b 43 04             	mov    0x4(%ebx),%eax
400000d7:	8b 00                	mov    (%eax),%eax
400000d9:	83 ec 04             	sub    $0x4,%esp
400000dc:	52                   	push   %edx
400000dd:	50                   	push   %eax
400000de:	68 00 20 00 40       	push   $0x40002000
400000e3:	e8 40 09 00 00       	call   40000a28 <printf>
400000e8:	83 c4 10             	add    $0x10,%esp
        exit(1);
400000eb:	83 ec 0c             	sub    $0xc,%esp
400000ee:	6a 01                	push   $0x1
400000f0:	e8 69 02 00 00       	call   4000035e <exit>
400000f5:	83 c4 10             	add    $0x10,%esp
    }

    HANDLE hdl = fopen(filePath, FM_READ);
400000f8:	83 ec 08             	sub    $0x8,%esp
400000fb:	6a 01                	push   $0x1
400000fd:	ff 75 d8             	pushl  -0x28(%ebp)
40000100:	e8 59 06 00 00       	call   4000075e <fopen>
40000105:	83 c4 10             	add    $0x10,%esp
40000108:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if(!hdl) {
4000010b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000010f:	75 2a                	jne    4000013b <main+0x13b>
        printf("%s: ", args[0]);
40000111:	8b 43 04             	mov    0x4(%ebx),%eax
40000114:	8b 00                	mov    (%eax),%eax
40000116:	83 ec 08             	sub    $0x8,%esp
40000119:	50                   	push   %eax
4000011a:	68 4e 20 00 40       	push   $0x4000204e
4000011f:	e8 04 09 00 00       	call   40000a28 <printf>
40000124:	83 c4 10             	add    $0x10,%esp
        printFilesystemError(filePath, getLastVFSErr());
40000127:	e8 e0 06 00 00       	call   4000080c <getLastVFSErr>
4000012c:	83 ec 08             	sub    $0x8,%esp
4000012f:	50                   	push   %eax
40000130:	ff 75 d8             	pushl  -0x28(%ebp)
40000133:	e8 9c 00 00 00       	call   400001d4 <printFilesystemError>
40000138:	83 c4 10             	add    $0x10,%esp
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
4000013b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000142:	eb 6e                	jmp    400001b2 <main+0x1b2>
        uint32_t length = 1024;
40000144:	c7 45 ec 00 04 00 00 	movl   $0x400,-0x14(%ebp)
        uint32_t avail = favailable(hdl);
4000014b:	83 ec 0c             	sub    $0xc,%esp
4000014e:	ff 75 e0             	pushl  -0x20(%ebp)
40000151:	e8 8e 05 00 00       	call   400006e4 <favailable>
40000156:	83 c4 10             	add    $0x10,%esp
40000159:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(avail == 0) exit(0);
4000015c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40000160:	75 0d                	jne    4000016f <main+0x16f>
40000162:	83 ec 0c             	sub    $0xc,%esp
40000165:	6a 00                	push   $0x0
40000167:	e8 f2 01 00 00       	call   4000035e <exit>
4000016c:	83 c4 10             	add    $0x10,%esp

        if(avail < length) length = avail;
4000016f:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000172:	3b 45 ec             	cmp    -0x14(%ebp),%eax
40000175:	73 06                	jae    4000017d <main+0x17d>
40000177:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000017a:	89 45 ec             	mov    %eax,-0x14(%ebp)


        uint32_t res = fread(hdl, buffer, length);
4000017d:	83 ec 04             	sub    $0x4,%esp
40000180:	ff 75 ec             	pushl  -0x14(%ebp)
40000183:	8d 85 d4 fb ff ff    	lea    -0x42c(%ebp),%eax
40000189:	50                   	push   %eax
4000018a:	ff 75 e0             	pushl  -0x20(%ebp)
4000018d:	e8 c8 09 00 00       	call   40000b5a <fread>
40000192:	83 c4 10             	add    $0x10,%esp
40000195:	89 45 f4             	mov    %eax,-0xc(%ebp)
                       fwrite(PMID_STDOUT, buffer, length);
40000198:	83 ec 04             	sub    $0x4,%esp
4000019b:	ff 75 ec             	pushl  -0x14(%ebp)
4000019e:	8d 85 d4 fb ff ff    	lea    -0x42c(%ebp),%eax
400001a4:	50                   	push   %eax
400001a5:	6a 01                	push   $0x1
400001a7:	e8 9e 06 00 00       	call   4000084a <fwrite>
400001ac:	83 c4 10             	add    $0x10,%esp
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
400001af:	ff 45 e8             	incl   -0x18(%ebp)
400001b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
400001b6:	74 8c                	je     40000144 <main+0x144>
400001b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
400001bb:	8b 00                	mov    (%eax),%eax
400001bd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
400001c0:	77 82                	ja     40000144 <main+0x144>

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
400001c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
400001c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
400001ca:	83 c4 00             	add    $0x0,%esp
400001cd:	59                   	pop    %ecx
400001ce:	5b                   	pop    %ebx
400001cf:	5d                   	pop    %ebp
400001d0:	8d 61 fc             	lea    -0x4(%ecx),%esp
400001d3:	c3                   	ret    

400001d4 <printFilesystemError>:
400001d4:	55                   	push   %ebp
400001d5:	89 e5                	mov    %esp,%ebp
400001d7:	83 ec 08             	sub    $0x8,%esp
400001da:	8b 55 0c             	mov    0xc(%ebp),%edx
400001dd:	8b 45 08             	mov    0x8(%ebp),%eax
400001e0:	83 fa 05             	cmp    $0x5,%edx
400001e3:	77 43                	ja     40000228 <printFilesystemError+0x54>
400001e5:	ff 24 95 54 20 00 40 	jmp    *0x40002054(,%edx,4)
400001ec:	52                   	push   %edx
400001ed:	52                   	push   %edx
400001ee:	50                   	push   %eax
400001ef:	68 84 20 00 40       	push   $0x40002084
400001f4:	eb 3a                	jmp    40000230 <printFilesystemError+0x5c>
400001f6:	51                   	push   %ecx
400001f7:	51                   	push   %ecx
400001f8:	50                   	push   %eax
400001f9:	68 96 20 00 40       	push   $0x40002096
400001fe:	eb 30                	jmp    40000230 <printFilesystemError+0x5c>
40000200:	52                   	push   %edx
40000201:	52                   	push   %edx
40000202:	50                   	push   %eax
40000203:	68 b5 20 00 40       	push   $0x400020b5
40000208:	eb 26                	jmp    40000230 <printFilesystemError+0x5c>
4000020a:	51                   	push   %ecx
4000020b:	51                   	push   %ecx
4000020c:	50                   	push   %eax
4000020d:	68 df 20 00 40       	push   $0x400020df
40000212:	eb 1c                	jmp    40000230 <printFilesystemError+0x5c>
40000214:	52                   	push   %edx
40000215:	52                   	push   %edx
40000216:	50                   	push   %eax
40000217:	68 f4 20 00 40       	push   $0x400020f4
4000021c:	eb 12                	jmp    40000230 <printFilesystemError+0x5c>
4000021e:	51                   	push   %ecx
4000021f:	51                   	push   %ecx
40000220:	50                   	push   %eax
40000221:	68 2f 21 00 40       	push   $0x4000212f
40000226:	eb 08                	jmp    40000230 <printFilesystemError+0x5c>
40000228:	52                   	push   %edx
40000229:	52                   	push   %edx
4000022a:	50                   	push   %eax
4000022b:	68 42 21 00 40       	push   $0x40002142
40000230:	e8 f3 07 00 00       	call   40000a28 <printf>
40000235:	c7 45 08 5f 21 00 40 	movl   $0x4000215f,0x8(%ebp)
4000023c:	83 c4 10             	add    $0x10,%esp
4000023f:	c9                   	leave  
40000240:	e9 e3 07 00 00       	jmp    40000a28 <printf>

40000245 <exec>:
40000245:	55                   	push   %ebp
40000246:	89 e5                	mov    %esp,%ebp
40000248:	83 ec 34             	sub    $0x34,%esp
4000024b:	8b 45 08             	mov    0x8(%ebp),%eax
4000024e:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40000255:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000258:	8b 45 0c             	mov    0xc(%ebp),%eax
4000025b:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000025e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000261:	50                   	push   %eax
40000262:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000269:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000270:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000277:	e8 38 10 00 00       	call   400012b4 <syscall>
4000027c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000027f:	c9                   	leave  
40000280:	c3                   	ret    

40000281 <texec>:
40000281:	55                   	push   %ebp
40000282:	89 e5                	mov    %esp,%ebp
40000284:	56                   	push   %esi
40000285:	53                   	push   %ebx
40000286:	53                   	push   %ebx
40000287:	53                   	push   %ebx
40000288:	8b 75 08             	mov    0x8(%ebp),%esi
4000028b:	ff 75 0c             	pushl  0xc(%ebp)
4000028e:	56                   	push   %esi
4000028f:	e8 b1 ff ff ff       	call   40000245 <exec>
40000294:	83 c4 10             	add    $0x10,%esp
40000297:	89 c3                	mov    %eax,%ebx
40000299:	85 c0                	test   %eax,%eax
4000029b:	75 11                	jne    400002ae <texec+0x2d>
4000029d:	e8 6a 05 00 00       	call   4000080c <getLastVFSErr>
400002a2:	51                   	push   %ecx
400002a3:	51                   	push   %ecx
400002a4:	50                   	push   %eax
400002a5:	56                   	push   %esi
400002a6:	e8 29 ff ff ff       	call   400001d4 <printFilesystemError>
400002ab:	83 c4 10             	add    $0x10,%esp
400002ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
400002b1:	89 d8                	mov    %ebx,%eax
400002b3:	5b                   	pop    %ebx
400002b4:	5e                   	pop    %esi
400002b5:	5d                   	pop    %ebp
400002b6:	c3                   	ret    

400002b7 <changeExecPath>:
400002b7:	55                   	push   %ebp
400002b8:	89 e5                	mov    %esp,%ebp
400002ba:	83 ec 34             	sub    $0x34,%esp
400002bd:	8b 45 08             	mov    0x8(%ebp),%eax
400002c0:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
400002c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002ca:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002cd:	50                   	push   %eax
400002ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002ea:	e8 c5 0f 00 00       	call   400012b4 <syscall>
400002ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002f2:	c9                   	leave  
400002f3:	c3                   	ret    

400002f4 <cd>:
400002f4:	55                   	push   %ebp
400002f5:	89 e5                	mov    %esp,%ebp
400002f7:	53                   	push   %ebx
400002f8:	83 ec 10             	sub    $0x10,%esp
400002fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
400002fe:	53                   	push   %ebx
400002ff:	e8 b3 ff ff ff       	call   400002b7 <changeExecPath>
40000304:	83 c4 10             	add    $0x10,%esp
40000307:	85 c0                	test   %eax,%eax
40000309:	75 11                	jne    4000031c <cd+0x28>
4000030b:	e8 fc 04 00 00       	call   4000080c <getLastVFSErr>
40000310:	52                   	push   %edx
40000311:	52                   	push   %edx
40000312:	50                   	push   %eax
40000313:	53                   	push   %ebx
40000314:	e8 bb fe ff ff       	call   400001d4 <printFilesystemError>
40000319:	83 c4 10             	add    $0x10,%esp
4000031c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000031f:	c9                   	leave  
40000320:	c3                   	ret    

40000321 <getExecPath>:
40000321:	55                   	push   %ebp
40000322:	89 e5                	mov    %esp,%ebp
40000324:	83 ec 34             	sub    $0x34,%esp
40000327:	8b 45 08             	mov    0x8(%ebp),%eax
4000032a:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
40000331:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000334:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000337:	50                   	push   %eax
40000338:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000033f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000346:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000034d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000354:	e8 5b 0f 00 00       	call   400012b4 <syscall>
40000359:	83 c4 10             	add    $0x10,%esp
4000035c:	c9                   	leave  
4000035d:	c3                   	ret    

4000035e <exit>:
4000035e:	55                   	push   %ebp
4000035f:	89 e5                	mov    %esp,%ebp
40000361:	83 ec 34             	sub    $0x34,%esp
40000364:	8b 45 08             	mov    0x8(%ebp),%eax
40000367:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
4000036e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000371:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000374:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000037b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000382:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000389:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000390:	50                   	push   %eax
40000391:	e8 1e 0f 00 00       	call   400012b4 <syscall>
40000396:	c7 04 24 4a 21 00 40 	movl   $0x4000214a,(%esp)
4000039d:	e8 86 06 00 00       	call   40000a28 <printf>
400003a2:	eb f2                	jmp    40000396 <exit+0x38>

400003a4 <yield>:
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

400003a4:	55                   	push   %ebp
400003a5:	89 e5                	mov    %esp,%ebp
400003a7:	83 ec 34             	sub    $0x34,%esp
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
400003aa:	8d 45 e0             	lea    -0x20(%ebp),%eax

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
400003ad:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
}
400003b4:	50                   	push   %eax

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
400003b5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400003bc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}
400003d8:	e8 d7 0e 00 00       	call   400012b4 <syscall>
400003dd:	83 c4 10             	add    $0x10,%esp
400003e0:	c9                   	leave  
400003e1:	c3                   	ret    

400003e2 <pexists>:
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
400003e2:	55                   	push   %ebp
400003e3:	89 e5                	mov    %esp,%ebp
400003e5:	83 ec 34             	sub    $0x34,%esp
                break;
            }
        }
        else
        {
            if(filePath == 0) {
400003e8:	8b 45 08             	mov    0x8(%ebp),%eax
400003eb:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400003f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                filePath = args[i];
            }
400003f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003f8:	50                   	push   %eax
                break;
            }
        }
        else
        {
            if(filePath == 0) {
400003f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000400:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000407:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000040e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
                filePath = args[i];
            }
40000415:	e8 9a 0e 00 00       	call   400012b4 <syscall>
        }
    }

4000041a:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000041d:	c9                   	leave  
4000041e:	c3                   	ret    

4000041f <register_irq_handler>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
4000041f:	55                   	push   %ebp
40000420:	89 e5                	mov    %esp,%ebp
40000422:	53                   	push   %ebx
40000423:	83 ec 30             	sub    $0x30,%esp

        if(avail == 0) exit(0);

        if(avail < length) length = avail;


40000426:	8d 45 e0             	lea    -0x20(%ebp),%eax
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
40000429:	8b 5d 08             	mov    0x8(%ebp),%ebx

        if(avail == 0) exit(0);

        if(avail < length) length = avail;


4000042c:	50                   	push   %eax
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

        if(avail < length) length = avail;
4000042d:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40000434:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000437:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000043e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000445:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000044c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)


40000453:	e8 5c 0e 00 00       	call   400012b4 <syscall>
        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
40000458:	83 c4 10             	add    $0x10,%esp
4000045b:	31 c0                	xor    %eax,%eax
4000045d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
40000461:	74 0f                	je     40000472 <register_irq_handler+0x53>

    return 0;
}
40000463:	8b 45 0c             	mov    0xc(%ebp),%eax
40000466:	89 04 9d 00 30 00 40 	mov    %eax,0x40003000(,%ebx,4)
4000046d:	b8 01 00 00 00       	mov    $0x1,%eax
40000472:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000475:	c9                   	leave  
40000476:	c3                   	ret    

40000477 <fetch_rpc_data>:
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }

40000477:	55                   	push   %ebp
40000478:	89 e5                	mov    %esp,%ebp
4000047a:	83 ec 34             	sub    $0x34,%esp
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

4000047d:	8b 45 08             	mov    0x8(%ebp),%eax
40000480:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40000487:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(!hdl) {
        printf("%s: ", args[0]);
4000048a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000048d:	50                   	push   %eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

4000048e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000495:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000049c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if(!hdl) {
        printf("%s: ", args[0]);
400004aa:	e8 05 0e 00 00       	call   400012b4 <syscall>
400004af:	83 c4 10             	add    $0x10,%esp
        printFilesystemError(filePath, getLastVFSErr());
400004b2:	c9                   	leave  
400004b3:	c3                   	ret    

400004b4 <call_rpc>:

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
400004b4:	55                   	push   %ebp
400004b5:	89 e5                	mov    %esp,%ebp
400004b7:	83 ec 34             	sub    $0x34,%esp
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
400004ba:	8b 45 08             	mov    0x8(%ebp),%eax
400004bd:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
400004c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400004c7:	8b 45 0c             	mov    0xc(%ebp),%eax
400004ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
400004cd:	8b 45 10             	mov    0x10(%ebp),%eax
400004d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
400004d3:	8b 45 14             	mov    0x14(%ebp),%eax
400004d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        {
            if(filePath == 0) {
400004d9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004dc:	50                   	push   %eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
400004dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        {
            if(filePath == 0) {
400004e4:	e8 cb 0d 00 00       	call   400012b4 <syscall>
                filePath = args[i];
            }
        }
400004e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400004ec:	c9                   	leave  
400004ed:	c3                   	ret    

400004ee <set_rpc_handler>:
400004ee:	55                   	push   %ebp
400004ef:	89 e5                	mov    %esp,%ebp
400004f1:	57                   	push   %edi
400004f2:	56                   	push   %esi
400004f3:	be 6c 20 00 40       	mov    $0x4000206c,%esi
400004f8:	83 ec 24             	sub    $0x24,%esp
400004fb:	8d 7d e0             	lea    -0x20(%ebp),%edi
400004fe:	68 00 02 00 00       	push   $0x200
40000503:	6a 00                	push   $0x0
40000505:	68 00 30 00 40       	push   $0x40003000
4000050a:	e8 c5 07 00 00       	call   40000cd4 <memset>
4000050f:	b9 06 00 00 00       	mov    $0x6,%ecx
40000514:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000517:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
40000519:	89 04 24             	mov    %eax,(%esp)
4000051c:	e8 93 0d 00 00       	call   400012b4 <syscall>
40000521:	83 c4 10             	add    $0x10,%esp
40000524:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000527:	5e                   	pop    %esi
40000528:	5f                   	pop    %edi
40000529:	5d                   	pop    %ebp
4000052a:	c3                   	ret    

4000052b <_start>:
            }
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
4000052b:	55                   	push   %ebp
4000052c:	89 e5                	mov    %esp,%ebp
4000052e:	56                   	push   %esi
4000052f:	53                   	push   %ebx
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
40000530:	31 db                	xor    %ebx,%ebx
            }
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
40000532:	83 ec 2c             	sub    $0x2c,%esp
    char* filePath = 0;

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
40000535:	8d 45 e0             	lea    -0x20(%ebp),%eax
    }

    char* filePath = 0;

    //Following is general parser code.

40000538:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000053f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
40000546:	50                   	push   %eax
    }

    char* filePath = 0;

    //Following is general parser code.

40000547:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000054e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000555:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000055c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;
40000563:	e8 4c 0d 00 00       	call   400012b4 <syscall>

    for(int i = 1; i < argc; i++) {
40000568:	8b 75 e0             	mov    -0x20(%ebp),%esi
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
4000056b:	83 c4 10             	add    $0x10,%esp
4000056e:	85 f6                	test   %esi,%esi
40000570:	75 05                	jne    40000577 <_start+0x4c>
40000572:	89 f3                	mov    %esi,%ebx
40000574:	eb 07                	jmp    4000057d <_start+0x52>

    if(!hdl) {
40000576:	43                   	inc    %ebx
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

40000577:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
4000057b:	75 f9                	jne    40000576 <_start+0x4b>
    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

4000057d:	e8 6c ff ff ff       	call   400004ee <set_rpc_handler>
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
40000582:	51                   	push   %ecx
40000583:	51                   	push   %ecx
40000584:	56                   	push   %esi
40000585:	53                   	push   %ebx
40000586:	e8 75 fa ff ff       	call   40000000 <main>
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);
4000058b:	89 04 24             	mov    %eax,(%esp)
4000058e:	e8 cb fd ff ff       	call   4000035e <exit>
40000593:	83 c4 10             	add    $0x10,%esp

40000596:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000599:	5b                   	pop    %ebx
4000059a:	5e                   	pop    %esi
4000059b:	5d                   	pop    %ebp
4000059c:	c3                   	ret    

4000059d <_handle_rpc>:
4000059d:	55                   	push   %ebp
4000059e:	89 e5                	mov    %esp,%ebp
400005a0:	56                   	push   %esi
400005a1:	53                   	push   %ebx
400005a2:	83 ec 2c             	sub    $0x2c,%esp
400005a5:	ff 75 10             	pushl  0x10(%ebp)
400005a8:	8b 75 0c             	mov    0xc(%ebp),%esi
400005ab:	e8 bd 0a 00 00       	call   4000106d <malloc>
400005b0:	89 04 24             	mov    %eax,(%esp)
400005b3:	89 c3                	mov    %eax,%ebx
400005b5:	e8 bd fe ff ff       	call   40000477 <fetch_rpc_data>
400005ba:	83 c4 10             	add    $0x10,%esp
400005bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400005c1:	75 4b                	jne    4000060e <_handle_rpc+0x71>
400005c3:	8b 04 b5 00 30 00 40 	mov    0x40003000(,%esi,4),%eax
400005ca:	85 c0                	test   %eax,%eax
400005cc:	74 40                	je     4000060e <_handle_rpc+0x71>
400005ce:	83 ec 0c             	sub    $0xc,%esp
400005d1:	56                   	push   %esi
400005d2:	ff d0                	call   *%eax
    }

    char* filePath = 0;

    //Following is general parser code.

400005d4:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

400005d7:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    //Following is general parser code.

400005de:	89 04 24             	mov    %eax,(%esp)
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

400005e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400005e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

40000604:	e8 ab 0c 00 00       	call   400012b4 <syscall>
40000609:	83 c4 10             	add    $0x10,%esp
4000060c:	eb fe                	jmp    4000060c <_handle_rpc+0x6f>
4000060e:	83 ec 0c             	sub    $0xc,%esp
40000611:	68 51 21 00 40       	push   $0x40002151
40000616:	e8 0d 04 00 00       	call   40000a28 <printf>
4000061b:	89 1c 24             	mov    %ebx,(%esp)
4000061e:	e8 01 09 00 00       	call   40000f24 <free>
    }

    char* filePath = 0;

    //Following is general parser code.

40000623:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000626:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    //Following is general parser code.

4000062d:	89 04 24             	mov    %eax,(%esp)
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000630:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000637:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000063e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000645:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000064c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

40000653:	e8 5c 0c 00 00       	call   400012b4 <syscall>
40000658:	83 c4 10             	add    $0x10,%esp
4000065b:	eb fe                	jmp    4000065b <_handle_rpc+0xbe>
4000065d:	00 00                	add    %al,(%eax)
	...

40000660 <resolveHandle>:
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }

40000660:	55                   	push   %ebp
40000661:	89 e5                	mov    %esp,%ebp
40000663:	83 ec 28             	sub    $0x28,%esp
    if(filePath == 0) {
40000666:	3d fe 0f 00 00       	cmp    $0xffe,%eax
4000066b:	77 38                	ja     400006a5 <resolveHandle+0x45>
                break;
            }
        }
        else
        {
            if(filePath == 0) {
4000066d:	83 ec 0c             	sub    $0xc,%esp
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
40000670:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        {
            if(filePath == 0) {
40000673:	8d 45 e0             	lea    -0x20(%ebp),%eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
40000676:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
        {
            if(filePath == 0) {
4000067d:	50                   	push   %eax
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
        else
4000067e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000685:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000068c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000693:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        {
            if(filePath == 0) {
4000069a:	e8 15 0c 00 00       	call   400012b4 <syscall>
                filePath = args[i];
            }
4000069f:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006a2:	83 c4 10             	add    $0x10,%esp

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }
400006a5:	c9                   	leave  
400006a6:	c3                   	ret    

400006a7 <fmkfifo>:
400006a7:	55                   	push   %ebp
400006a8:	89 e5                	mov    %esp,%ebp
400006aa:	83 ec 34             	sub    $0x34,%esp
400006ad:	8b 45 08             	mov    0x8(%ebp),%eax
400006b0:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
400006b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006ba:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006bd:	50                   	push   %eax
400006be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006da:	e8 d5 0b 00 00       	call   400012b4 <syscall>
400006df:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006e2:	c9                   	leave  
400006e3:	c3                   	ret    

400006e4 <favailable>:
400006e4:	55                   	push   %ebp
400006e5:	89 e5                	mov    %esp,%ebp
400006e7:	83 ec 34             	sub    $0x34,%esp
400006ea:	8b 45 08             	mov    0x8(%ebp),%eax
400006ed:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400006f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006f7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006fa:	50                   	push   %eax
400006fb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000702:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000709:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000710:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000717:	e8 98 0b 00 00       	call   400012b4 <syscall>
4000071c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000071f:	c9                   	leave  
40000720:	c3                   	ret    

40000721 <fclose>:
40000721:	55                   	push   %ebp
40000722:	89 e5                	mov    %esp,%ebp
40000724:	83 ec 34             	sub    $0x34,%esp
40000727:	8b 45 08             	mov    0x8(%ebp),%eax
4000072a:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000731:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000734:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000737:	50                   	push   %eax
40000738:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000073f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000746:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000074d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000754:	e8 5b 0b 00 00       	call   400012b4 <syscall>
40000759:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000075c:	c9                   	leave  
4000075d:	c3                   	ret    

4000075e <fopen>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
}
4000075e:	55                   	push   %ebp
4000075f:	89 e5                	mov    %esp,%ebp
40000761:	83 ec 34             	sub    $0x34,%esp
40000764:	8b 45 08             	mov    0x8(%ebp),%eax
40000767:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
4000076e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000771:	8b 45 0c             	mov    0xc(%ebp),%eax
40000774:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000777:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000077a:	50                   	push   %eax
4000077b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000782:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000789:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000790:	e8 1f 0b 00 00       	call   400012b4 <syscall>
40000795:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000798:	c9                   	leave  
40000799:	c3                   	ret    

4000079a <fopenpmhandle>:

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
4000079a:	55                   	push   %ebp
4000079b:	89 e5                	mov    %esp,%ebp
4000079d:	83 ec 34             	sub    $0x34,%esp
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
400007a0:	8b 45 08             	mov    0x8(%ebp),%eax
400007a3:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400007aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007ad:	8b 45 0c             	mov    0xc(%ebp),%eax
400007b0:	89 45 e8             	mov    %eax,-0x18(%ebp)

        if(avail < length) length = avail;
400007b3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007b6:	50                   	push   %eax
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
400007b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        if(avail < length) length = avail;
400007cc:	e8 e3 0a 00 00       	call   400012b4 <syscall>


        uint32_t res = fread(hdl, buffer, length);
400007d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007d4:	c9                   	leave  
400007d5:	c3                   	ret    

400007d6 <setstderr>:
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
400007d6:	55                   	push   %ebp
400007d7:	89 e5                	mov    %esp,%ebp
400007d9:	83 ec 10             	sub    $0x10,%esp
400007dc:	ff 75 08             	pushl  0x8(%ebp)
400007df:	6a 03                	push   $0x3
400007e1:	e8 b4 ff ff ff       	call   4000079a <fopenpmhandle>
400007e6:	c9                   	leave  
400007e7:	c3                   	ret    

400007e8 <setstdin>:


        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

400007e8:	55                   	push   %ebp
400007e9:	89 e5                	mov    %esp,%ebp
400007eb:	83 ec 10             	sub    $0x10,%esp
400007ee:	ff 75 08             	pushl  0x8(%ebp)
400007f1:	6a 02                	push   $0x2
400007f3:	e8 a2 ff ff ff       	call   4000079a <fopenpmhandle>
400007f8:	c9                   	leave  
400007f9:	c3                   	ret    

400007fa <setstdout>:
        if(avail < length) length = avail;


        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }
400007fa:	55                   	push   %ebp
400007fb:	89 e5                	mov    %esp,%ebp
400007fd:	83 ec 10             	sub    $0x10,%esp
40000800:	ff 75 08             	pushl  0x8(%ebp)
40000803:	6a 01                	push   $0x1
40000805:	e8 90 ff ff ff       	call   4000079a <fopenpmhandle>
4000080a:	c9                   	leave  
4000080b:	c3                   	ret    

4000080c <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
4000080c:	55                   	push   %ebp
4000080d:	89 e5                	mov    %esp,%ebp
4000080f:	83 ec 34             	sub    $0x34,%esp
    }

    char* filePath = 0;

    //Following is general parser code.

40000812:	8d 45 e0             	lea    -0x20(%ebp),%eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000815:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    //Following is general parser code.

4000081c:	50                   	push   %eax
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

4000081d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000824:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000082b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000832:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000839:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    //Following is general parser code.

40000840:	e8 6f 0a 00 00       	call   400012b4 <syscall>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000845:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000848:	c9                   	leave  
40000849:	c3                   	ret    

4000084a <fwrite>:
4000084a:	55                   	push   %ebp
4000084b:	89 e5                	mov    %esp,%ebp
4000084d:	57                   	push   %edi
4000084e:	56                   	push   %esi
4000084f:	53                   	push   %ebx
40000850:	83 ec 3c             	sub    $0x3c,%esp
40000853:	8b 45 08             	mov    0x8(%ebp),%eax
40000856:	8b 7d 10             	mov    0x10(%ebp),%edi
40000859:	e8 02 fe ff ff       	call   40000660 <resolveHandle>
4000085e:	83 ec 0c             	sub    $0xc,%esp
40000861:	89 c6                	mov    %eax,%esi
40000863:	89 45 d4             	mov    %eax,-0x2c(%ebp)
40000866:	8b 45 0c             	mov    0xc(%ebp),%eax
40000869:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000870:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000873:	8d 45 d0             	lea    -0x30(%ebp),%eax
40000876:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000879:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000880:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000887:	50                   	push   %eax
40000888:	89 45 c4             	mov    %eax,-0x3c(%ebp)
4000088b:	eb 2d                	jmp    400008ba <fwrite+0x70>
4000088d:	e8 12 fb ff ff       	call   400003a4 <yield>
40000892:	8b 45 0c             	mov    0xc(%ebp),%eax
40000895:	83 ec 0c             	sub    $0xc,%esp
40000898:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000089b:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000089e:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400008a5:	89 75 d4             	mov    %esi,-0x2c(%ebp)
400008a8:	89 7d dc             	mov    %edi,-0x24(%ebp)
400008ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400008b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400008b9:	50                   	push   %eax
400008ba:	e8 f5 09 00 00       	call   400012b4 <syscall>
400008bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
400008c2:	83 c4 10             	add    $0x10,%esp
400008c5:	83 fb 01             	cmp    $0x1,%ebx
400008c8:	74 c3                	je     4000088d <fwrite+0x43>
400008ca:	89 f0                	mov    %esi,%eax
400008cc:	89 da                	mov    %ebx,%edx
400008ce:	e8 3d 02 00 00       	call   40000b10 <printrwerror>
400008d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
400008d6:	89 d8                	mov    %ebx,%eax
400008d8:	5b                   	pop    %ebx
400008d9:	5e                   	pop    %esi
400008da:	5f                   	pop    %edi
400008db:	5d                   	pop    %ebp
400008dc:	c3                   	ret    

400008dd <fputs>:
400008dd:	55                   	push   %ebp
400008de:	89 e5                	mov    %esp,%ebp
400008e0:	56                   	push   %esi
400008e1:	53                   	push   %ebx
400008e2:	83 ec 20             	sub    $0x20,%esp
400008e5:	8b 45 0c             	mov    0xc(%ebp),%eax
400008e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
400008eb:	e8 70 fd ff ff       	call   40000660 <resolveHandle>
400008f0:	89 c6                	mov    %eax,%esi
400008f2:	85 c0                	test   %eax,%eax
400008f4:	74 16                	je     4000090c <fputs+0x2f>
400008f6:	83 ec 0c             	sub    $0xc,%esp
400008f9:	53                   	push   %ebx
400008fa:	e8 a7 04 00 00       	call   40000da6 <strlen>
400008ff:	83 c4 0c             	add    $0xc,%esp
40000902:	50                   	push   %eax
40000903:	53                   	push   %ebx
40000904:	56                   	push   %esi
40000905:	e8 40 ff ff ff       	call   4000084a <fwrite>
4000090a:	eb 35                	jmp    40000941 <fputs+0x64>
4000090c:	83 ec 0c             	sub    $0xc,%esp
4000090f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000912:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000919:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000091c:	50                   	push   %eax
4000091d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000924:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000092b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000932:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000939:	e8 76 09 00 00       	call   400012b4 <syscall>
4000093e:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000941:	83 c4 10             	add    $0x10,%esp
40000944:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000947:	5b                   	pop    %ebx
40000948:	5e                   	pop    %esi
40000949:	5d                   	pop    %ebp
4000094a:	c3                   	ret    

4000094b <puts>:
4000094b:	55                   	push   %ebp
4000094c:	89 e5                	mov    %esp,%ebp
4000094e:	83 ec 10             	sub    $0x10,%esp
40000951:	6a 01                	push   $0x1
40000953:	ff 75 08             	pushl  0x8(%ebp)
40000956:	e8 82 ff ff ff       	call   400008dd <fputs>
4000095b:	c9                   	leave  
4000095c:	c3                   	ret    

4000095d <putn>:
4000095d:	55                   	push   %ebp
4000095e:	89 e5                	mov    %esp,%ebp
40000960:	56                   	push   %esi
40000961:	53                   	push   %ebx
40000962:	31 f6                	xor    %esi,%esi
40000964:	83 ec 50             	sub    $0x50,%esp
40000967:	89 d3                	mov    %edx,%ebx
40000969:	83 fa 24             	cmp    $0x24,%edx
4000096c:	7f 25                	jg     40000993 <putn+0x36>
4000096e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000972:	8d 4d f7             	lea    -0x9(%ebp),%ecx
40000975:	31 d2                	xor    %edx,%edx
40000977:	49                   	dec    %ecx
40000978:	f7 f3                	div    %ebx
4000097a:	46                   	inc    %esi
4000097b:	85 c0                	test   %eax,%eax
4000097d:	8a 92 61 21 00 40    	mov    0x40002161(%edx),%dl
40000983:	88 11                	mov    %dl,(%ecx)
40000985:	75 ee                	jne    40000975 <putn+0x18>
40000987:	83 ec 0c             	sub    $0xc,%esp
4000098a:	51                   	push   %ecx
4000098b:	e8 bb ff ff ff       	call   4000094b <puts>
40000990:	83 c4 10             	add    $0x10,%esp
40000993:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000996:	89 f0                	mov    %esi,%eax
40000998:	5b                   	pop    %ebx
40000999:	5e                   	pop    %esi
4000099a:	5d                   	pop    %ebp
4000099b:	c3                   	ret    

4000099c <fputc>:
4000099c:	55                   	push   %ebp
4000099d:	89 e5                	mov    %esp,%ebp
4000099f:	83 ec 38             	sub    $0x38,%esp
400009a2:	8b 45 08             	mov    0x8(%ebp),%eax
400009a5:	88 45 d4             	mov    %al,-0x2c(%ebp)
400009a8:	8b 45 0c             	mov    0xc(%ebp),%eax
400009ab:	e8 b0 fc ff ff       	call   40000660 <resolveHandle>
400009b0:	85 c0                	test   %eax,%eax
400009b2:	74 0f                	je     400009c3 <fputc+0x27>
400009b4:	52                   	push   %edx
400009b5:	8d 55 d4             	lea    -0x2c(%ebp),%edx
400009b8:	6a 01                	push   $0x1
400009ba:	52                   	push   %edx
400009bb:	50                   	push   %eax
400009bc:	e8 89 fe ff ff       	call   4000084a <fwrite>
400009c1:	eb 39                	jmp    400009fc <fputc+0x60>
400009c3:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
400009c7:	83 ec 0c             	sub    $0xc,%esp
400009ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009cd:	8d 45 e0             	lea    -0x20(%ebp),%eax
400009d0:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
400009d7:	50                   	push   %eax
400009d8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400009df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400009e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400009f4:	e8 bb 08 00 00       	call   400012b4 <syscall>
400009f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400009fc:	83 c4 10             	add    $0x10,%esp
400009ff:	c9                   	leave  
40000a00:	c3                   	ret    

40000a01 <putc>:
40000a01:	55                   	push   %ebp
40000a02:	89 e5                	mov    %esp,%ebp
40000a04:	83 ec 08             	sub    $0x8,%esp
40000a07:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000a0b:	89 45 08             	mov    %eax,0x8(%ebp)
40000a0e:	c9                   	leave  
40000a0f:	e9 88 ff ff ff       	jmp    4000099c <fputc>

40000a14 <putchar>:
40000a14:	55                   	push   %ebp
40000a15:	89 e5                	mov    %esp,%ebp
40000a17:	83 ec 10             	sub    $0x10,%esp
40000a1a:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000a1e:	6a 01                	push   $0x1
40000a20:	50                   	push   %eax
40000a21:	e8 76 ff ff ff       	call   4000099c <fputc>
40000a26:	c9                   	leave  
40000a27:	c3                   	ret    

40000a28 <printf>:
40000a28:	55                   	push   %ebp
40000a29:	89 e5                	mov    %esp,%ebp
40000a2b:	57                   	push   %edi
40000a2c:	56                   	push   %esi
40000a2d:	53                   	push   %ebx
40000a2e:	83 ec 1c             	sub    $0x1c,%esp
40000a31:	8d 75 0c             	lea    0xc(%ebp),%esi
40000a34:	8b 7d 08             	mov    0x8(%ebp),%edi
40000a37:	31 db                	xor    %ebx,%ebx
40000a39:	e9 be 00 00 00       	jmp    40000afc <printf+0xd4>
40000a3e:	3c 25                	cmp    $0x25,%al
40000a40:	0f 85 a4 00 00 00    	jne    40000aea <printf+0xc2>
40000a46:	47                   	inc    %edi
40000a47:	8a 07                	mov    (%edi),%al
40000a49:	3c 70                	cmp    $0x70,%al
40000a4b:	74 47                	je     40000a94 <printf+0x6c>
40000a4d:	7f 1a                	jg     40000a69 <printf+0x41>
40000a4f:	3c 63                	cmp    $0x63,%al
40000a51:	74 5a                	je     40000aad <printf+0x85>
40000a53:	7f 0e                	jg     40000a63 <printf+0x3b>
40000a55:	84 c0                	test   %al,%al
40000a57:	0f 84 a9 00 00 00    	je     40000b06 <printf+0xde>
40000a5d:	3c 25                	cmp    $0x25,%al
40000a5f:	75 6c                	jne    40000acd <printf+0xa5>
40000a61:	eb 63                	jmp    40000ac6 <printf+0x9e>
40000a63:	3c 64                	cmp    $0x64,%al
40000a65:	75 66                	jne    40000acd <printf+0xa5>
40000a67:	eb 1e                	jmp    40000a87 <printf+0x5f>
40000a69:	3c 75                	cmp    $0x75,%al
40000a6b:	74 1a                	je     40000a87 <printf+0x5f>
40000a6d:	3c 78                	cmp    $0x78,%al
40000a6f:	74 23                	je     40000a94 <printf+0x6c>
40000a71:	3c 73                	cmp    $0x73,%al
40000a73:	75 58                	jne    40000acd <printf+0xa5>
40000a75:	83 ec 0c             	sub    $0xc,%esp
40000a78:	8d 46 04             	lea    0x4(%esi),%eax
40000a7b:	ff 36                	pushl  (%esi)
40000a7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a80:	e8 c6 fe ff ff       	call   4000094b <puts>
40000a85:	eb 38                	jmp    40000abf <printf+0x97>
40000a87:	8d 46 04             	lea    0x4(%esi),%eax
40000a8a:	ba 0a 00 00 00       	mov    $0xa,%edx
40000a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a92:	eb 0b                	jmp    40000a9f <printf+0x77>
40000a94:	8d 46 04             	lea    0x4(%esi),%eax
40000a97:	ba 10 00 00 00       	mov    $0x10,%edx
40000a9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a9f:	8b 06                	mov    (%esi),%eax
40000aa1:	e8 b7 fe ff ff       	call   4000095d <putn>
40000aa6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000aa9:	01 c3                	add    %eax,%ebx
40000aab:	eb 4e                	jmp    40000afb <printf+0xd3>
40000aad:	8d 46 04             	lea    0x4(%esi),%eax
40000ab0:	83 ec 0c             	sub    $0xc,%esp
40000ab3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000ab6:	0f be 06             	movsbl (%esi),%eax
40000ab9:	50                   	push   %eax
40000aba:	e8 55 ff ff ff       	call   40000a14 <putchar>
40000abf:	01 c3                	add    %eax,%ebx
40000ac1:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000ac4:	eb 32                	jmp    40000af8 <printf+0xd0>
40000ac6:	83 ec 0c             	sub    $0xc,%esp
40000ac9:	6a 25                	push   $0x25
40000acb:	eb 24                	jmp    40000af1 <printf+0xc9>
40000acd:	83 ec 0c             	sub    $0xc,%esp
40000ad0:	6a 25                	push   $0x25
40000ad2:	e8 3d ff ff ff       	call   40000a14 <putchar>
40000ad7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000ada:	0f be 07             	movsbl (%edi),%eax
40000add:	89 04 24             	mov    %eax,(%esp)
40000ae0:	e8 2f ff ff ff       	call   40000a14 <putchar>
40000ae5:	03 45 e4             	add    -0x1c(%ebp),%eax
40000ae8:	eb 0c                	jmp    40000af6 <printf+0xce>
40000aea:	83 ec 0c             	sub    $0xc,%esp
40000aed:	0f be c0             	movsbl %al,%eax
40000af0:	50                   	push   %eax
40000af1:	e8 1e ff ff ff       	call   40000a14 <putchar>
40000af6:	01 c3                	add    %eax,%ebx
40000af8:	83 c4 10             	add    $0x10,%esp
40000afb:	47                   	inc    %edi
40000afc:	8a 07                	mov    (%edi),%al
40000afe:	84 c0                	test   %al,%al
40000b00:	0f 85 38 ff ff ff    	jne    40000a3e <printf+0x16>
40000b06:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b09:	89 d8                	mov    %ebx,%eax
40000b0b:	5b                   	pop    %ebx
40000b0c:	5e                   	pop    %esi
40000b0d:	5f                   	pop    %edi
40000b0e:	5d                   	pop    %ebp
40000b0f:	c3                   	ret    

40000b10 <printrwerror>:
40000b10:	55                   	push   %ebp
40000b11:	89 e5                	mov    %esp,%ebp
40000b13:	83 ec 08             	sub    $0x8,%esp
40000b16:	83 fa 02             	cmp    $0x2,%edx
40000b19:	75 0a                	jne    40000b25 <printrwerror+0x15>
40000b1b:	52                   	push   %edx
40000b1c:	52                   	push   %edx
40000b1d:	50                   	push   %eax
40000b1e:	68 86 21 00 40       	push   $0x40002186
40000b23:	eb 2b                	jmp    40000b50 <printrwerror+0x40>
40000b25:	83 fa 03             	cmp    $0x3,%edx
40000b28:	75 0a                	jne    40000b34 <printrwerror+0x24>
40000b2a:	51                   	push   %ecx
40000b2b:	51                   	push   %ecx
40000b2c:	50                   	push   %eax
40000b2d:	68 9e 21 00 40       	push   $0x4000219e
40000b32:	eb 1c                	jmp    40000b50 <printrwerror+0x40>
40000b34:	83 fa 04             	cmp    $0x4,%edx
40000b37:	75 0a                	jne    40000b43 <printrwerror+0x33>
40000b39:	52                   	push   %edx
40000b3a:	52                   	push   %edx
40000b3b:	50                   	push   %eax
40000b3c:	68 b9 21 00 40       	push   $0x400021b9
40000b41:	eb 0d                	jmp    40000b50 <printrwerror+0x40>
40000b43:	83 fa 05             	cmp    $0x5,%edx
40000b46:	75 10                	jne    40000b58 <printrwerror+0x48>
40000b48:	51                   	push   %ecx
40000b49:	51                   	push   %ecx
40000b4a:	50                   	push   %eax
40000b4b:	68 e3 21 00 40       	push   $0x400021e3
40000b50:	e8 d3 fe ff ff       	call   40000a28 <printf>
40000b55:	83 c4 10             	add    $0x10,%esp
40000b58:	c9                   	leave  
40000b59:	c3                   	ret    

40000b5a <fread>:
40000b5a:	55                   	push   %ebp
40000b5b:	89 e5                	mov    %esp,%ebp
40000b5d:	57                   	push   %edi
40000b5e:	56                   	push   %esi
40000b5f:	53                   	push   %ebx
40000b60:	83 ec 38             	sub    $0x38,%esp
40000b63:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000b66:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b69:	8b 75 08             	mov    0x8(%ebp),%esi
40000b6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b6f:	8b 45 10             	mov    0x10(%ebp),%eax
40000b72:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b79:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b7f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b86:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b8d:	eb 2c                	jmp    40000bbb <fread+0x61>
40000b8f:	e8 10 f8 ff ff       	call   400003a4 <yield>
40000b94:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b97:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b9a:	8b 45 10             	mov    0x10(%ebp),%eax
40000b9d:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000ba4:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000ba7:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000baa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000bb8:	83 ec 0c             	sub    $0xc,%esp
40000bbb:	57                   	push   %edi
40000bbc:	e8 f3 06 00 00       	call   400012b4 <syscall>
40000bc1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000bc4:	83 c4 10             	add    $0x10,%esp
40000bc7:	83 fb 01             	cmp    $0x1,%ebx
40000bca:	74 c3                	je     40000b8f <fread+0x35>
40000bcc:	89 f0                	mov    %esi,%eax
40000bce:	89 da                	mov    %ebx,%edx
40000bd0:	e8 3b ff ff ff       	call   40000b10 <printrwerror>
40000bd5:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bd8:	89 d8                	mov    %ebx,%eax
40000bda:	5b                   	pop    %ebx
40000bdb:	5e                   	pop    %esi
40000bdc:	5f                   	pop    %edi
40000bdd:	5d                   	pop    %ebp
40000bde:	c3                   	ret    

40000bdf <fgetc>:
40000bdf:	55                   	push   %ebp
40000be0:	89 e5                	mov    %esp,%ebp
40000be2:	83 ec 18             	sub    $0x18,%esp
40000be5:	8b 45 08             	mov    0x8(%ebp),%eax
40000be8:	e8 73 fa ff ff       	call   40000660 <resolveHandle>
40000bed:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000bf1:	85 c0                	test   %eax,%eax
40000bf3:	74 10                	je     40000c05 <fgetc+0x26>
40000bf5:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000bf8:	51                   	push   %ecx
40000bf9:	6a 01                	push   $0x1
40000bfb:	52                   	push   %edx
40000bfc:	50                   	push   %eax
40000bfd:	e8 58 ff ff ff       	call   40000b5a <fread>
40000c02:	83 c4 10             	add    $0x10,%esp
40000c05:	8a 45 f7             	mov    -0x9(%ebp),%al
40000c08:	c9                   	leave  
40000c09:	c3                   	ret    

40000c0a <getchar>:
40000c0a:	55                   	push   %ebp
40000c0b:	89 e5                	mov    %esp,%ebp
40000c0d:	83 ec 14             	sub    $0x14,%esp
40000c10:	6a 02                	push   $0x2
40000c12:	e8 c8 ff ff ff       	call   40000bdf <fgetc>
40000c17:	c9                   	leave  
40000c18:	c3                   	ret    

40000c19 <getc>:
40000c19:	55                   	push   %ebp
40000c1a:	89 e5                	mov    %esp,%ebp
40000c1c:	83 ec 08             	sub    $0x8,%esp
40000c1f:	c9                   	leave  
40000c20:	e9 ba ff ff ff       	jmp    40000bdf <fgetc>

40000c25 <fgets>:
40000c25:	55                   	push   %ebp
40000c26:	89 e5                	mov    %esp,%ebp
40000c28:	57                   	push   %edi
40000c29:	56                   	push   %esi
40000c2a:	53                   	push   %ebx
40000c2b:	83 ec 1c             	sub    $0x1c,%esp
40000c2e:	31 db                	xor    %ebx,%ebx
40000c30:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000c33:	8b 75 08             	mov    0x8(%ebp),%esi
40000c36:	8d 47 ff             	lea    -0x1(%edi),%eax
40000c39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c3c:	eb 16                	jmp    40000c54 <fgets+0x2f>
40000c3e:	83 ec 0c             	sub    $0xc,%esp
40000c41:	ff 75 10             	pushl  0x10(%ebp)
40000c44:	e8 96 ff ff ff       	call   40000bdf <fgetc>
40000c49:	83 c4 10             	add    $0x10,%esp
40000c4c:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000c4f:	84 c0                	test   %al,%al
40000c51:	74 0a                	je     40000c5d <fgets+0x38>
40000c53:	43                   	inc    %ebx
40000c54:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000c57:	7c e5                	jl     40000c3e <fgets+0x19>
40000c59:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000c5d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000c60:	89 f0                	mov    %esi,%eax
40000c62:	5b                   	pop    %ebx
40000c63:	5e                   	pop    %esi
40000c64:	5f                   	pop    %edi
40000c65:	5d                   	pop    %ebp
40000c66:	c3                   	ret    

40000c67 <getln>:
40000c67:	55                   	push   %ebp
40000c68:	89 e5                	mov    %esp,%ebp
40000c6a:	56                   	push   %esi
40000c6b:	53                   	push   %ebx
40000c6c:	31 db                	xor    %ebx,%ebx
40000c6e:	8b 75 08             	mov    0x8(%ebp),%esi
40000c71:	eb 42                	jmp    40000cb5 <getln+0x4e>
40000c73:	3c 0a                	cmp    $0xa,%al
40000c75:	75 0f                	jne    40000c86 <getln+0x1f>
40000c77:	83 ec 0c             	sub    $0xc,%esp
40000c7a:	6a 0a                	push   $0xa
40000c7c:	e8 93 fd ff ff       	call   40000a14 <putchar>
40000c81:	83 c4 10             	add    $0x10,%esp
40000c84:	eb 40                	jmp    40000cc6 <getln+0x5f>
40000c86:	3c 08                	cmp    $0x8,%al
40000c88:	75 18                	jne    40000ca2 <getln+0x3b>
40000c8a:	85 db                	test   %ebx,%ebx
40000c8c:	74 0e                	je     40000c9c <getln+0x35>
40000c8e:	83 ec 0c             	sub    $0xc,%esp
40000c91:	4b                   	dec    %ebx
40000c92:	6a 08                	push   $0x8
40000c94:	e8 7b fd ff ff       	call   40000a14 <putchar>
40000c99:	83 c4 10             	add    $0x10,%esp
40000c9c:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000ca0:	eb 13                	jmp    40000cb5 <getln+0x4e>
40000ca2:	83 ec 0c             	sub    $0xc,%esp
40000ca5:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000ca8:	0f be c0             	movsbl %al,%eax
40000cab:	50                   	push   %eax
40000cac:	43                   	inc    %ebx
40000cad:	e8 62 fd ff ff       	call   40000a14 <putchar>
40000cb2:	83 c4 10             	add    $0x10,%esp
40000cb5:	83 ec 0c             	sub    $0xc,%esp
40000cb8:	6a 02                	push   $0x2
40000cba:	e8 20 ff ff ff       	call   40000bdf <fgetc>
40000cbf:	83 c4 10             	add    $0x10,%esp
40000cc2:	84 c0                	test   %al,%al
40000cc4:	75 ad                	jne    40000c73 <getln+0xc>
40000cc6:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000cca:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ccd:	89 f0                	mov    %esi,%eax
40000ccf:	5b                   	pop    %ebx
40000cd0:	5e                   	pop    %esi
40000cd1:	5d                   	pop    %ebp
40000cd2:	c3                   	ret    
	...

40000cd4 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
 
40000cd4:	55                   	push   %ebp
40000cd5:	89 e5                	mov    %esp,%ebp
40000cd7:	53                   	push   %ebx
40000cd8:	8b 45 08             	mov    0x8(%ebp),%eax
40000cdb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000cde:	8b 4d 10             	mov    0x10(%ebp),%ecx
int main(int argc, char* args[])
40000ce1:	89 c2                	mov    %eax,%edx
{
    if(argc < 2) {
40000ce3:	eb 04                	jmp    40000ce9 <memset+0x15>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
40000ce5:	88 1a                	mov    %bl,(%edx)
40000ce7:	49                   	dec    %ecx
40000ce8:	42                   	inc    %edx
#include "stdio.h"
#include "process.h"
 
int main(int argc, char* args[])
{
    if(argc < 2) {
40000ce9:	85 c9                	test   %ecx,%ecx
40000ceb:	75 f8                	jne    40000ce5 <memset+0x11>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000ced:	5b                   	pop    %ebx
40000cee:	5d                   	pop    %ebp
40000cef:	c3                   	ret    

40000cf0 <memcpy>:

    //Following is general parser code.
40000cf0:	55                   	push   %ebp

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000cf1:	31 c9                	xor    %ecx,%ecx
        exit(1);
    }

    char* filePath = 0;

    //Following is general parser code.
40000cf3:	89 e5                	mov    %esp,%ebp
40000cf5:	56                   	push   %esi
40000cf6:	53                   	push   %ebx
40000cf7:	8b 75 10             	mov    0x10(%ebp),%esi
40000cfa:	8b 45 08             	mov    0x8(%ebp),%eax
40000cfd:	8b 5d 0c             	mov    0xc(%ebp),%ebx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000d00:	85 f6                	test   %esi,%esi
40000d02:	75 04                	jne    40000d08 <memcpy+0x18>
40000d04:	31 c0                	xor    %eax,%eax
40000d06:	eb 0a                	jmp    40000d12 <memcpy+0x22>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
40000d08:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000d0b:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000d0e:	41                   	inc    %ecx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
40000d0f:	4e                   	dec    %esi
40000d10:	75 f6                	jne    40000d08 <memcpy+0x18>
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
40000d12:	5b                   	pop    %ebx
40000d13:	5e                   	pop    %esi
40000d14:	5d                   	pop    %ebp
40000d15:	c3                   	ret    

40000d16 <memcmp>:
            }
        }
40000d16:	55                   	push   %ebp
        else
40000d17:	83 c8 ff             	or     $0xffffffff,%eax
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
        }
40000d1a:	89 e5                	mov    %esp,%ebp
40000d1c:	57                   	push   %edi
40000d1d:	56                   	push   %esi
40000d1e:	53                   	push   %ebx
40000d1f:	8b 75 08             	mov    0x8(%ebp),%esi
40000d22:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000d25:	8b 5d 10             	mov    0x10(%ebp),%ebx
        else
40000d28:	85 f6                	test   %esi,%esi
40000d2a:	74 2c                	je     40000d58 <memcmp+0x42>
        {
            if(filePath == 0) {
40000d2c:	b8 01 00 00 00       	mov    $0x1,%eax
40000d31:	85 ff                	test   %edi,%edi
40000d33:	74 23                	je     40000d58 <memcmp+0x42>
                filePath = args[i];
            }
40000d35:	31 d2                	xor    %edx,%edx
40000d37:	85 db                	test   %ebx,%ebx
40000d39:	75 17                	jne    40000d52 <memcmp+0x3c>
40000d3b:	eb 19                	jmp    40000d56 <memcmp+0x40>
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
40000d3d:	8a 04 16             	mov    (%esi,%edx,1),%al
40000d40:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000d43:	38 c8                	cmp    %cl,%al
40000d45:	74 0a                	je     40000d51 <memcmp+0x3b>
    }
40000d47:	0f b6 c0             	movzbl %al,%eax
40000d4a:	0f b6 c9             	movzbl %cl,%ecx
40000d4d:	29 c8                	sub    %ecx,%eax
40000d4f:	eb 07                	jmp    40000d58 <memcmp+0x42>
        }
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
40000d51:	42                   	inc    %edx
40000d52:	39 da                	cmp    %ebx,%edx
40000d54:	72 e7                	jb     40000d3d <memcmp+0x27>
40000d56:	31 c0                	xor    %eax,%eax
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
40000d58:	5b                   	pop    %ebx
40000d59:	5e                   	pop    %esi
40000d5a:	5f                   	pop    %edi
40000d5b:	5d                   	pop    %ebp
40000d5c:	c3                   	ret    

40000d5d <strcmp>:
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000d5d:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000d5e:	31 c0                	xor    %eax,%eax

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000d60:	89 e5                	mov    %esp,%ebp
40000d62:	56                   	push   %esi
40000d63:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000d64:	31 db                	xor    %ebx,%ebx

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
40000d66:	8b 55 08             	mov    0x8(%ebp),%edx
40000d69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000d6c:	85 d2                	test   %edx,%edx
40000d6e:	75 03                	jne    40000d73 <strcmp+0x16>
40000d70:	eb 09                	jmp    40000d7b <strcmp+0x1e>
        if(avail < length) length = avail;


40000d72:	40                   	inc    %eax
40000d73:	89 c3                	mov    %eax,%ebx
40000d75:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000d79:	75 f7                	jne    40000d72 <strcmp+0x15>
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000d7b:	31 c0                	xor    %eax,%eax
40000d7d:	31 f6                	xor    %esi,%esi
40000d7f:	85 c9                	test   %ecx,%ecx
40000d81:	75 03                	jne    40000d86 <strcmp+0x29>
40000d83:	eb 09                	jmp    40000d8e <strcmp+0x31>
        if(avail < length) length = avail;


40000d85:	40                   	inc    %eax
40000d86:	89 c6                	mov    %eax,%esi
40000d88:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000d8c:	75 f7                	jne    40000d85 <strcmp+0x28>
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
40000d8e:	89 f0                	mov    %esi,%eax
40000d90:	39 de                	cmp    %ebx,%esi
40000d92:	7e 02                	jle    40000d96 <strcmp+0x39>
40000d94:	89 d8                	mov    %ebx,%eax
40000d96:	40                   	inc    %eax
40000d97:	50                   	push   %eax
40000d98:	51                   	push   %ecx
40000d99:	52                   	push   %edx
40000d9a:	e8 77 ff ff ff       	call   40000d16 <memcmp>
        uint32_t avail = favailable(hdl);
40000d9f:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000da2:	5b                   	pop    %ebx
40000da3:	5e                   	pop    %esi
40000da4:	5d                   	pop    %ebp
40000da5:	c3                   	ret    

40000da6 <strlen>:

        if(avail == 0) exit(0);
40000da6:	55                   	push   %ebp

40000da7:	31 d2                	xor    %edx,%edx
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000da9:	89 e5                	mov    %esp,%ebp

40000dab:	31 c0                	xor    %eax,%eax
    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);
40000dad:	8b 4d 08             	mov    0x8(%ebp),%ecx

40000db0:	85 c9                	test   %ecx,%ecx
40000db2:	75 03                	jne    40000db7 <strlen+0x11>
40000db4:	eb 09                	jmp    40000dbf <strlen+0x19>
        if(avail < length) length = avail;


40000db6:	42                   	inc    %edx
40000db7:	89 d0                	mov    %edx,%eax
40000db9:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000dbd:	75 f7                	jne    40000db6 <strlen+0x10>
        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }
40000dbf:	5d                   	pop    %ebp
40000dc0:	c3                   	ret    

40000dc1 <strcpy>:

    return 0;
40000dc1:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000dc2:	31 d2                	xor    %edx,%edx

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000dc4:	89 e5                	mov    %esp,%ebp
40000dc6:	56                   	push   %esi
40000dc7:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000dc8:	31 c9                	xor    %ecx,%ecx

        uint32_t res = fread(hdl, buffer, length);
                       fwrite(PMID_STDOUT, buffer, length);
    }

    return 0;
40000dca:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000dcd:	8b 45 08             	mov    0x8(%ebp),%eax
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000dd0:	85 db                	test   %ebx,%ebx
40000dd2:	75 03                	jne    40000dd7 <strcpy+0x16>
40000dd4:	eb 09                	jmp    40000ddf <strcpy+0x1e>
        if(avail < length) length = avail;


40000dd6:	42                   	inc    %edx
40000dd7:	89 d1                	mov    %edx,%ecx
40000dd9:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000ddd:	75 f7                	jne    40000dd6 <strcpy+0x15>

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000ddf:	89 ce                	mov    %ecx,%esi
40000de1:	46                   	inc    %esi
40000de2:	74 0c                	je     40000df0 <strcpy+0x2f>
40000de4:	31 d2                	xor    %edx,%edx
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
40000de6:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000de9:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000dec:	42                   	inc    %edx

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
40000ded:	4e                   	dec    %esi
40000dee:	75 f6                	jne    40000de6 <strcpy+0x25>
    }

    return 0;
}
40000df0:	5b                   	pop    %ebx
40000df1:	5e                   	pop    %esi
40000df2:	5d                   	pop    %ebp
40000df3:	c3                   	ret    

40000df4 <strtoknc>:
40000df4:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000df5:	31 c0                	xor    %eax,%eax
40000df7:	89 e5                	mov    %esp,%ebp
40000df9:	57                   	push   %edi
40000dfa:	56                   	push   %esi
40000dfb:	53                   	push   %ebx
40000dfc:	83 ec 04             	sub    $0x4,%esp
40000dff:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e02:	8b 4d 08             	mov    0x8(%ebp),%ecx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e05:	85 db                	test   %ebx,%ebx
40000e07:	75 06                	jne    40000e0f <strtoknc+0x1b>
40000e09:	e9 83 00 00 00       	jmp    40000e91 <strtoknc+0x9d>
        if(avail < length) length = avail;


40000e0e:	40                   	inc    %eax
40000e0f:	89 c7                	mov    %eax,%edi
40000e11:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e15:	75 f7                	jne    40000e0e <strtoknc+0x1a>
40000e17:	85 c0                	test   %eax,%eax
40000e19:	74 76                	je     40000e91 <strtoknc+0x9d>
40000e1b:	85 c9                	test   %ecx,%ecx
40000e1d:	75 0b                	jne    40000e2a <strtoknc+0x36>
40000e1f:	83 3d 00 32 00 40 00 	cmpl   $0x0,0x40003200
40000e26:	75 08                	jne    40000e30 <strtoknc+0x3c>
40000e28:	eb 67                	jmp    40000e91 <strtoknc+0x9d>
40000e2a:	89 0d 00 32 00 40    	mov    %ecx,0x40003200
40000e30:	a1 00 32 00 40       	mov    0x40003200,%eax
40000e35:	31 c9                	xor    %ecx,%ecx
40000e37:	eb 0b                	jmp    40000e44 <strtoknc+0x50>
40000e39:	8a 10                	mov    (%eax),%dl
40000e3b:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e3e:	75 03                	jne    40000e43 <strtoknc+0x4f>
40000e40:	40                   	inc    %eax
40000e41:	eb 05                	jmp    40000e48 <strtoknc+0x54>
40000e43:	41                   	inc    %ecx
40000e44:	39 f9                	cmp    %edi,%ecx
40000e46:	7c f1                	jl     40000e39 <strtoknc+0x45>
40000e48:	39 f9                	cmp    %edi,%ecx
40000e4a:	75 e9                	jne    40000e35 <strtoknc+0x41>
40000e4c:	a3 00 32 00 40       	mov    %eax,0x40003200
40000e51:	80 38 00             	cmpb   $0x0,(%eax)
40000e54:	75 28                	jne    40000e7e <strtoknc+0x8a>
40000e56:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
40000e5d:	00 00 00 
40000e60:	eb 2f                	jmp    40000e91 <strtoknc+0x9d>
40000e62:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000e65:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e68:	75 05                	jne    40000e6f <strtoknc+0x7b>
40000e6a:	c6 06 00             	movb   $0x0,(%esi)
40000e6d:	eb 05                	jmp    40000e74 <strtoknc+0x80>
40000e6f:	41                   	inc    %ecx
40000e70:	39 f9                	cmp    %edi,%ecx
40000e72:	7c ee                	jl     40000e62 <strtoknc+0x6e>
40000e74:	ff 05 00 32 00 40    	incl   0x40003200
40000e7a:	39 f9                	cmp    %edi,%ecx
40000e7c:	7c 15                	jl     40000e93 <strtoknc+0x9f>
40000e7e:	8b 35 00 32 00 40    	mov    0x40003200,%esi
40000e84:	8a 16                	mov    (%esi),%dl
40000e86:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000e89:	84 d2                	test   %dl,%dl
40000e8b:	74 06                	je     40000e93 <strtoknc+0x9f>
40000e8d:	31 c9                	xor    %ecx,%ecx
40000e8f:	eb df                	jmp    40000e70 <strtoknc+0x7c>
40000e91:	31 c0                	xor    %eax,%eax
40000e93:	5a                   	pop    %edx
40000e94:	5b                   	pop    %ebx
40000e95:	5e                   	pop    %esi
40000e96:	5f                   	pop    %edi
40000e97:	5d                   	pop    %ebp
40000e98:	c3                   	ret    

40000e99 <strclone>:
    return 0;
}
40000e99:	55                   	push   %ebp
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000e9a:	31 c0                	xor    %eax,%eax
    return 0;
}
40000e9c:	89 e5                	mov    %esp,%ebp
40000e9e:	56                   	push   %esi
40000e9f:	53                   	push   %ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000ea0:	31 d2                	xor    %edx,%edx
    return 0;
}
40000ea2:	8b 5d 08             	mov    0x8(%ebp),%ebx
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

        if(avail == 0) exit(0);

40000ea5:	85 db                	test   %ebx,%ebx
40000ea7:	75 03                	jne    40000eac <strclone+0x13>
40000ea9:	eb 09                	jmp    40000eb4 <strclone+0x1b>
        if(avail < length) length = avail;


40000eab:	40                   	inc    %eax
40000eac:	89 c2                	mov    %eax,%edx
40000eae:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000eb2:	75 f7                	jne    40000eab <strclone+0x12>
}
40000eb4:	83 ec 0c             	sub    $0xc,%esp
40000eb7:	42                   	inc    %edx
40000eb8:	52                   	push   %edx
40000eb9:	e8 af 01 00 00       	call   4000106d <malloc>
40000ebe:	59                   	pop    %ecx
}
40000ebf:	89 c6                	mov    %eax,%esi
40000ec1:	58                   	pop    %eax
40000ec2:	53                   	push   %ebx
40000ec3:	56                   	push   %esi
40000ec4:	e8 f8 fe ff ff       	call   40000dc1 <strcpy>
40000ec9:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ecc:	89 f0                	mov    %esi,%eax
40000ece:	5b                   	pop    %ebx
40000ecf:	5e                   	pop    %esi
40000ed0:	5d                   	pop    %ebp
40000ed1:	c3                   	ret    

40000ed2 <strtok>:
40000ed2:	55                   	push   %ebp
40000ed3:	89 e5                	mov    %esp,%ebp
40000ed5:	56                   	push   %esi
40000ed6:	53                   	push   %ebx
40000ed7:	8b 75 08             	mov    0x8(%ebp),%esi
40000eda:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000edd:	85 f6                	test   %esi,%esi
40000edf:	74 2e                	je     40000f0f <strtok+0x3d>
40000ee1:	a1 04 32 00 40       	mov    0x40003204,%eax
40000ee6:	85 c0                	test   %eax,%eax
40000ee8:	74 0c                	je     40000ef6 <strtok+0x24>
40000eea:	83 ec 0c             	sub    $0xc,%esp
40000eed:	50                   	push   %eax
40000eee:	e8 31 00 00 00       	call   40000f24 <free>
40000ef3:	83 c4 10             	add    $0x10,%esp
40000ef6:	83 ec 0c             	sub    $0xc,%esp
40000ef9:	56                   	push   %esi
40000efa:	e8 9a ff ff ff       	call   40000e99 <strclone>
40000eff:	83 c4 10             	add    $0x10,%esp
40000f02:	a3 04 32 00 40       	mov    %eax,0x40003204
40000f07:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f0a:	89 45 08             	mov    %eax,0x8(%ebp)
40000f0d:	eb 0a                	jmp    40000f19 <strtok+0x47>
40000f0f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f12:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000f19:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000f1c:	5b                   	pop    %ebx
40000f1d:	5e                   	pop    %esi
40000f1e:	5d                   	pop    %ebp
40000f1f:	e9 d0 fe ff ff       	jmp    40000df4 <strtoknc>

40000f24 <free>:
40000f24:	55                   	push   %ebp
40000f25:	89 e5                	mov    %esp,%ebp
40000f27:	57                   	push   %edi
40000f28:	56                   	push   %esi
40000f29:	53                   	push   %ebx
40000f2a:	83 ec 08             	sub    $0x8,%esp
40000f2d:	8b 15 0c 32 00 40    	mov    0x4000320c,%edx
40000f33:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000f36:	89 d0                	mov    %edx,%eax
40000f38:	e9 b8 00 00 00       	jmp    40000ff5 <free+0xd1>
40000f3d:	3b 48 04             	cmp    0x4(%eax),%ecx
40000f40:	0f 85 ac 00 00 00    	jne    40000ff2 <free+0xce>
40000f46:	31 c9                	xor    %ecx,%ecx
40000f48:	eb 23                	jmp    40000f6d <free+0x49>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000f4a:	39 c2                	cmp    %eax,%edx
40000f4c:	75 1a                	jne    40000f68 <free+0x44>
    //Following is general parser code.
40000f4e:	85 c9                	test   %ecx,%ecx
40000f50:	8b 50 08             	mov    0x8(%eax),%edx
40000f53:	75 0e                	jne    40000f63 <free+0x3f>

40000f55:	89 15 0c 32 00 40    	mov    %edx,0x4000320c
40000f5b:	8b 0d 10 32 00 40    	mov    0x40003210,%ecx
40000f61:	eb 10                	jmp    40000f73 <free+0x4f>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000f63:	89 51 08             	mov    %edx,0x8(%ecx)
40000f66:	eb f3                	jmp    40000f5b <free+0x37>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40000f68:	89 d1                	mov    %edx,%ecx
40000f6a:	8b 52 08             	mov    0x8(%edx),%edx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000f6d:	85 d2                	test   %edx,%edx
40000f6f:	75 d9                	jne    40000f4a <free+0x26>
40000f71:	eb e8                	jmp    40000f5b <free+0x37>
40000f73:	89 ca                	mov    %ecx,%edx
40000f75:	eb 6d                	jmp    40000fe4 <free+0xc0>
40000f77:	8b 5a 04             	mov    0x4(%edx),%ebx
40000f7a:	8b 32                	mov    (%edx),%esi
40000f7c:	8b 78 04             	mov    0x4(%eax),%edi
40000f7f:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000f82:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000f85:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f88:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f8b:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000f8e:	75 18                	jne    40000fa8 <free+0x84>
40000f90:	89 58 04             	mov    %ebx,0x4(%eax)
40000f93:	31 f6                	xor    %esi,%esi
40000f95:	89 cb                	mov    %ecx,%ebx
40000f97:	eb 09                	jmp    40000fa2 <free+0x7e>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000f99:	39 d3                	cmp    %edx,%ebx
40000f9b:	74 29                	je     40000fc6 <free+0xa2>

    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40000f9d:	89 de                	mov    %ebx,%esi
40000f9f:	8b 5b 08             	mov    0x8(%ebx),%ebx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000fa2:	85 db                	test   %ebx,%ebx
40000fa4:	75 f3                	jne    40000f99 <free+0x75>
40000fa6:	eb cb                	jmp    40000f73 <free+0x4f>
40000fa8:	8b 38                	mov    (%eax),%edi
40000faa:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000fad:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000fb0:	03 7d f0             	add    -0x10(%ebp),%edi
40000fb3:	39 fb                	cmp    %edi,%ebx
40000fb5:	75 2a                	jne    40000fe1 <free+0xbd>
40000fb7:	03 75 f0             	add    -0x10(%ebp),%esi
40000fba:	89 cb                	mov    %ecx,%ebx
40000fbc:	89 30                	mov    %esi,(%eax)
40000fbe:	31 f6                	xor    %esi,%esi
40000fc0:	eb 19                	jmp    40000fdb <free+0xb7>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

40000fc2:	39 d3                	cmp    %edx,%ebx
40000fc4:	75 10                	jne    40000fd6 <free+0xb2>
    //Following is general parser code.
40000fc6:	85 f6                	test   %esi,%esi
40000fc8:	8b 53 08             	mov    0x8(%ebx),%edx
40000fcb:	75 04                	jne    40000fd1 <free+0xad>

40000fcd:	89 d1                	mov    %edx,%ecx
40000fcf:	eb a2                	jmp    40000f73 <free+0x4f>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

40000fd1:	89 56 08             	mov    %edx,0x8(%esi)
40000fd4:	eb 9d                	jmp    40000f73 <free+0x4f>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
40000fd6:	89 de                	mov    %ebx,%esi
40000fd8:	8b 5b 08             	mov    0x8(%ebx),%ebx
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
40000fdb:	85 db                	test   %ebx,%ebx
40000fdd:	75 e3                	jne    40000fc2 <free+0x9e>
40000fdf:	eb 92                	jmp    40000f73 <free+0x4f>
40000fe1:	8b 52 08             	mov    0x8(%edx),%edx
40000fe4:	85 d2                	test   %edx,%edx
40000fe6:	75 8f                	jne    40000f77 <free+0x53>
                //TODO implement int parse
                break;
            }
        }
        else
        {
40000fe8:	89 48 08             	mov    %ecx,0x8(%eax)
            if(filePath == 0) {
40000feb:	a3 10 32 00 40       	mov    %eax,0x40003210
40000ff0:	eb 0b                	jmp    40000ffd <free+0xd9>
40000ff2:	8b 40 08             	mov    0x8(%eax),%eax
40000ff5:	85 c0                	test   %eax,%eax
40000ff7:	0f 85 40 ff ff ff    	jne    40000f3d <free+0x19>
40000ffd:	58                   	pop    %eax
40000ffe:	5a                   	pop    %edx
40000fff:	5b                   	pop    %ebx
40001000:	5e                   	pop    %esi
40001001:	5f                   	pop    %edi
40001002:	5d                   	pop    %ebp
40001003:	c3                   	ret    

40001004 <pop_unused_node>:
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
40001004:	55                   	push   %ebp
40001005:	89 e5                	mov    %esp,%ebp
40001007:	53                   	push   %ebx
40001008:	83 ec 04             	sub    $0x4,%esp
        {
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }
4000100b:	a1 08 32 00 40       	mov    0x40003208,%eax
40001010:	eb 45                	jmp    40001057 <pop_unused_node+0x53>
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
40001012:	83 ec 0c             	sub    $0xc,%esp
40001015:	6a 01                	push   $0x1
40001017:	e8 5b 02 00 00       	call   40001277 <vmm_alloc_cont>

4000101c:	83 c4 0c             	add    $0xc,%esp
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    HANDLE hdl = fopen(filePath, FM_READ);
4000101f:	89 c3                	mov    %eax,%ebx

40001021:	68 00 10 00 00       	push   $0x1000
40001026:	6a 00                	push   $0x0
40001028:	50                   	push   %eax
40001029:	e8 a6 fc ff ff       	call   40000cd4 <memset>
4000102e:	8b 15 08 32 00 40    	mov    0x40003208,%edx
40001034:	8d 43 0c             	lea    0xc(%ebx),%eax
        printf("%s: ", args[0]);
        printFilesystemError(filePath, getLastVFSErr());
    }

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
40001037:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
4000103d:	83 c4 10             	add    $0x10,%esp
                //TODO implement int parse
                break;
            }
        }
        else
        {
40001040:	89 50 08             	mov    %edx,0x8(%eax)
40001043:	89 c2                	mov    %eax,%edx
40001045:	83 c0 0c             	add    $0xc,%eax
    }

    HANDLE hdl = fopen(filePath, FM_READ);

    if(!hdl) {
        printf("%s: ", args[0]);
40001048:	39 c8                	cmp    %ecx,%eax
4000104a:	75 f4                	jne    40001040 <pop_unused_node+0x3c>
4000104c:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40001052:	a3 08 32 00 40       	mov    %eax,0x40003208
        {
            if(filePath == 0) {
                filePath = args[i];
            }
        }
    }
40001057:	85 c0                	test   %eax,%eax
40001059:	74 b7                	je     40001012 <pop_unused_node+0xe>
    }

    char* filePath = 0;

    //Following is general parser code.

4000105b:	8b 50 08             	mov    0x8(%eax),%edx

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

4000105e:	85 c0                	test   %eax,%eax
    }

    char* filePath = 0;

    //Following is general parser code.

40001060:	89 15 08 32 00 40    	mov    %edx,0x40003208

    char buffer[1024];
    for(uint32_t n = 0; maxSize == 0 || n < *maxSize; n++) {
        uint32_t length = 1024;
        uint32_t avail = favailable(hdl);

40001066:	74 aa                	je     40001012 <pop_unused_node+0xe>
        if(avail == 0) exit(0);

        if(avail < length) length = avail;


        uint32_t res = fread(hdl, buffer, length);
40001068:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000106b:	c9                   	leave  
4000106c:	c3                   	ret    

4000106d <malloc>:
4000106d:	55                   	push   %ebp
4000106e:	89 e5                	mov    %esp,%ebp
40001070:	57                   	push   %edi
40001071:	56                   	push   %esi
40001072:	53                   	push   %ebx
40001073:	83 ec 1c             	sub    $0x1c,%esp
40001076:	a1 10 32 00 40       	mov    0x40003210,%eax
4000107b:	8b 75 08             	mov    0x8(%ebp),%esi
4000107e:	89 c3                	mov    %eax,%ebx
40001080:	eb 07                	jmp    40001089 <malloc+0x1c>
40001082:	39 33                	cmp    %esi,(%ebx)
40001084:	73 0c                	jae    40001092 <malloc+0x25>
40001086:	8b 5b 08             	mov    0x8(%ebx),%ebx
40001089:	85 db                	test   %ebx,%ebx
4000108b:	75 f5                	jne    40001082 <malloc+0x15>
4000108d:	e9 93 00 00 00       	jmp    40001125 <malloc+0xb8>
40001092:	8b 3b                	mov    (%ebx),%edi
40001094:	31 d2                	xor    %edx,%edx
40001096:	29 f7                	sub    %esi,%edi
40001098:	89 33                	mov    %esi,(%ebx)
4000109a:	eb 4b                	jmp    400010e7 <malloc+0x7a>
4000109c:	e8 63 ff ff ff       	call   40001004 <pop_unused_node>
400010a1:	8b 13                	mov    (%ebx),%edx
400010a3:	03 53 04             	add    0x4(%ebx),%edx
400010a6:	29 f7                	sub    %esi,%edi
400010a8:	89 50 04             	mov    %edx,0x4(%eax)
                //TODO implement int parse
                break;
            }
        }
        else
        {
400010ab:	8b 15 10 32 00 40    	mov    0x40003210,%edx
400010b1:	89 50 08             	mov    %edx,0x8(%eax)
400010b4:	89 38                	mov    %edi,(%eax)
                break;
            }
        }
        else
        {
            if(filePath == 0) {
400010b6:	a3 10 32 00 40       	mov    %eax,0x40003210
                //TODO implement int parse
                break;
            }
        }
        else
        {
400010bb:	a1 0c 32 00 40       	mov    0x4000320c,%eax
400010c0:	89 43 08             	mov    %eax,0x8(%ebx)
            if(filePath == 0) {
400010c3:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
400010c9:	eb 4f                	jmp    4000111a <malloc+0xad>
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;

400010cb:	39 d8                	cmp    %ebx,%eax
400010cd:	75 13                	jne    400010e2 <malloc+0x75>
    //Following is general parser code.
400010cf:	85 d2                	test   %edx,%edx
400010d1:	8b 43 08             	mov    0x8(%ebx),%eax
400010d4:	75 07                	jne    400010dd <malloc+0x70>

400010d6:	a3 10 32 00 40       	mov    %eax,0x40003210
400010db:	eb 0e                	jmp    400010eb <malloc+0x7e>
    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

400010dd:	89 42 08             	mov    %eax,0x8(%edx)
400010e0:	eb 09                	jmp    400010eb <malloc+0x7e>
    for(int i = 1; i < argc; i++) {
        if(args[i][0] == '-') {
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
400010e2:	89 c2                	mov    %eax,%edx
400010e4:	8b 40 08             	mov    0x8(%eax),%eax
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

    char* filePath = 0;
400010e7:	85 c0                	test   %eax,%eax
400010e9:	75 e0                	jne    400010cb <malloc+0x5e>
                //TODO implement int parse
                break;
            }
        }
        else
        {
400010eb:	a1 0c 32 00 40       	mov    0x4000320c,%eax
400010f0:	85 ff                	test   %edi,%edi
                //TODO implement int parse
                break;
            }
        }
        else
        {
400010f2:	89 43 08             	mov    %eax,0x8(%ebx)
            if(filePath == 0) {
400010f5:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
400010fb:	74 1d                	je     4000111a <malloc+0xad>
400010fd:	e8 02 ff ff ff       	call   40001004 <pop_unused_node>
40001102:	8b 13                	mov    (%ebx),%edx
40001104:	03 53 04             	add    0x4(%ebx),%edx
40001107:	89 50 04             	mov    %edx,0x4(%eax)
                //TODO implement int parse
                break;
            }
        }
        else
        {
4000110a:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001110:	89 50 08             	mov    %edx,0x8(%eax)
40001113:	89 38                	mov    %edi,(%eax)
                break;
            }
        }
        else
        {
            if(filePath == 0) {
40001115:	a3 10 32 00 40       	mov    %eax,0x40003210
4000111a:	8b 43 04             	mov    0x4(%ebx),%eax
4000111d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001120:	5b                   	pop    %ebx
40001121:	5e                   	pop    %esi
40001122:	5f                   	pop    %edi
40001123:	5d                   	pop    %ebp
40001124:	c3                   	ret    
40001125:	89 f0                	mov    %esi,%eax
40001127:	89 f7                	mov    %esi,%edi
40001129:	c1 ef 0c             	shr    $0xc,%edi
4000112c:	25 ff 0f 00 00       	and    $0xfff,%eax
40001131:	83 f8 01             	cmp    $0x1,%eax
40001134:	83 df ff             	sbb    $0xffffffff,%edi
40001137:	83 ec 0c             	sub    $0xc,%esp
4000113a:	57                   	push   %edi
4000113b:	e8 37 01 00 00       	call   40001277 <vmm_alloc_cont>
40001140:	c1 e7 0c             	shl    $0xc,%edi
40001143:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001146:	e8 b9 fe ff ff       	call   40001004 <pop_unused_node>
4000114b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000114e:	83 c4 10             	add    $0x10,%esp
40001151:	89 c3                	mov    %eax,%ebx
40001153:	89 50 04             	mov    %edx,0x4(%eax)
40001156:	89 30                	mov    %esi,(%eax)
40001158:	39 f7                	cmp    %esi,%edi
4000115a:	0f 86 5b ff ff ff    	jbe    400010bb <malloc+0x4e>
40001160:	e9 37 ff ff ff       	jmp    4000109c <malloc+0x2f>

40001165 <realloc>:
40001165:	55                   	push   %ebp
40001166:	89 e5                	mov    %esp,%ebp
40001168:	56                   	push   %esi
40001169:	53                   	push   %ebx
4000116a:	8b 1d 0c 32 00 40    	mov    0x4000320c,%ebx
40001170:	8b 55 08             	mov    0x8(%ebp),%edx
40001173:	8b 45 0c             	mov    0xc(%ebp),%eax
40001176:	eb 3e                	jmp    400011b6 <realloc+0x51>
40001178:	3b 53 04             	cmp    0x4(%ebx),%edx
4000117b:	75 36                	jne    400011b3 <realloc+0x4e>
4000117d:	85 c0                	test   %eax,%eax
4000117f:	75 0b                	jne    4000118c <realloc+0x27>
40001181:	52                   	push   %edx
40001182:	31 f6                	xor    %esi,%esi
40001184:	e8 9b fd ff ff       	call   40000f24 <free>
40001189:	5b                   	pop    %ebx
4000118a:	eb 30                	jmp    400011bc <realloc+0x57>
4000118c:	83 ec 0c             	sub    $0xc,%esp
4000118f:	50                   	push   %eax
40001190:	e8 d8 fe ff ff       	call   4000106d <malloc>
40001195:	83 c4 0c             	add    $0xc,%esp
40001198:	89 c6                	mov    %eax,%esi
4000119a:	ff 33                	pushl  (%ebx)
4000119c:	ff 73 04             	pushl  0x4(%ebx)
4000119f:	50                   	push   %eax
400011a0:	e8 4b fb ff ff       	call   40000cf0 <memcpy>
400011a5:	59                   	pop    %ecx
400011a6:	ff 73 04             	pushl  0x4(%ebx)
400011a9:	e8 76 fd ff ff       	call   40000f24 <free>
400011ae:	83 c4 10             	add    $0x10,%esp
400011b1:	eb 09                	jmp    400011bc <realloc+0x57>
400011b3:	8b 5b 08             	mov    0x8(%ebx),%ebx
400011b6:	85 db                	test   %ebx,%ebx
400011b8:	75 be                	jne    40001178 <realloc+0x13>
400011ba:	31 f6                	xor    %esi,%esi
400011bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
400011bf:	89 f0                	mov    %esi,%eax
400011c1:	5b                   	pop    %ebx
400011c2:	5e                   	pop    %esi
400011c3:	5d                   	pop    %ebp
400011c4:	c3                   	ret    

400011c5 <calloc>:
400011c5:	55                   	push   %ebp
400011c6:	89 e5                	mov    %esp,%ebp
400011c8:	56                   	push   %esi
400011c9:	53                   	push   %ebx
400011ca:	8b 5d 0c             	mov    0xc(%ebp),%ebx
400011cd:	83 ec 0c             	sub    $0xc,%esp
400011d0:	0f af 5d 08          	imul   0x8(%ebp),%ebx
400011d4:	53                   	push   %ebx
400011d5:	e8 93 fe ff ff       	call   4000106d <malloc>
400011da:	83 c4 10             	add    $0x10,%esp
400011dd:	89 c6                	mov    %eax,%esi
400011df:	85 c0                	test   %eax,%eax
400011e1:	74 0d                	je     400011f0 <calloc+0x2b>
400011e3:	50                   	push   %eax
400011e4:	53                   	push   %ebx
400011e5:	6a 00                	push   $0x0
400011e7:	56                   	push   %esi
400011e8:	e8 e7 fa ff ff       	call   40000cd4 <memset>
400011ed:	83 c4 10             	add    $0x10,%esp
400011f0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400011f3:	89 f0                	mov    %esi,%eax
400011f5:	5b                   	pop    %ebx
400011f6:	5e                   	pop    %esi
400011f7:	5d                   	pop    %ebp
400011f8:	c3                   	ret    
400011f9:	00 00                	add    %al,(%eax)
	...

400011fc <print_memstat>:
            }
        }
        else
        {
            if(filePath == 0) {
                filePath = args[i];
400011fc:	55                   	push   %ebp
400011fd:	89 e5                	mov    %esp,%ebp
400011ff:	83 ec 34             	sub    $0x34,%esp
    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

40001202:	8d 45 e0             	lea    -0x20(%ebp),%eax
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
40001205:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
    }

4000120c:	50                   	push   %eax
    }

    if(filePath == 0) {
        printf("%s: No file specified\n", args[0]);
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
4000120d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001214:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000121b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001222:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001229:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    }

40001230:	e8 7f 00 00 00       	call   400012b4 <syscall>
40001235:	83 c4 10             	add    $0x10,%esp
    HANDLE hdl = fopen(filePath, FM_READ);
40001238:	c9                   	leave  
40001239:	c3                   	ret    

4000123a <vmm_free>:

    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

4000123a:	55                   	push   %ebp
4000123b:	89 e5                	mov    %esp,%ebp
4000123d:	83 ec 34             	sub    $0x34,%esp
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
40001240:	8b 45 08             	mov    0x8(%ebp),%eax
40001243:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000124a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        else
4000124d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001250:	50                   	push   %eax
            switch(args[i][1]) {
            case 'm':
                maxSize = &ms;
                //TODO implement int parse
                break;
            }
40001251:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001258:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000125f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001266:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        }
        else
4000126d:	e8 42 00 00 00       	call   400012b4 <syscall>
40001272:	83 c4 10             	add    $0x10,%esp
        {
40001275:	c9                   	leave  
40001276:	c3                   	ret    

40001277 <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
40001277:	55                   	push   %ebp
40001278:	89 e5                	mov    %esp,%ebp
4000127a:	83 ec 34             	sub    $0x34,%esp
{
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

4000127d:	8b 45 08             	mov    0x8(%ebp),%eax
40001280:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
40001287:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    char* filePath = 0;

4000128a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000128d:	50                   	push   %eax
{
    if(argc < 2) {
        printf("%s: usage: %s [-m] FILENAME\n\n-m: Limit output to 1KB\n\n", args[0], args[0]);
        exit(1);
    }

4000128e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001295:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000129c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400012a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char* filePath = 0;

400012aa:	e8 05 00 00 00       	call   400012b4 <syscall>
    //Following is general parser code.

    uint32_t* maxSize = 0;
400012af:	8b 45 e0             	mov    -0x20(%ebp),%eax
400012b2:	c9                   	leave  
400012b3:	c3                   	ret    

400012b4 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
400012b4:	55                   	push   %ebp
400012b5:	89 e5                	mov    %esp,%ebp
400012b7:	57                   	push   %edi
400012b8:	56                   	push   %esi
400012b9:	53                   	push   %ebx
400012ba:	83 ec 10             	sub    $0x10,%esp
 
400012bd:	8b 55 08             	mov    0x8(%ebp),%edx
400012c0:	8b 45 08             	mov    0x8(%ebp),%eax
400012c3:	8b 72 0c             	mov    0xc(%edx),%esi
400012c6:	8b 00                	mov    (%eax),%eax
400012c8:	89 75 e4             	mov    %esi,-0x1c(%ebp)
400012cb:	8b 5a 04             	mov    0x4(%edx),%ebx
400012ce:	8b 4a 08             	mov    0x8(%edx),%ecx
400012d1:	8b 72 10             	mov    0x10(%edx),%esi
400012d4:	8b 7a 14             	mov    0x14(%edx),%edi
400012d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
400012da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400012dd:	cd 30                	int    $0x30
400012df:	89 55 e8             	mov    %edx,-0x18(%ebp)
400012e2:	8b 55 08             	mov    0x8(%ebp),%edx
400012e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
400012e8:	89 02                	mov    %eax,(%edx)
400012ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
400012ed:	89 5a 04             	mov    %ebx,0x4(%edx)
400012f0:	89 4a 08             	mov    %ecx,0x8(%edx)
400012f3:	89 42 0c             	mov    %eax,0xc(%edx)
400012f6:	89 72 10             	mov    %esi,0x10(%edx)
400012f9:	89 7a 14             	mov    %edi,0x14(%edx)
    //Following is general parser code.

    uint32_t* maxSize = 0;
    uint32_t ms = 1024;

    for(int i = 1; i < argc; i++) {
400012fc:	83 c4 10             	add    $0x10,%esp
400012ff:	5b                   	pop    %ebx
40001300:	5e                   	pop    %esi
40001301:	5f                   	pop    %edi
40001302:	5d                   	pop    %ebp
40001303:	c3                   	ret    
