
../../initrfs/ibin/init:     file format elf32-i386
../../initrfs/ibin/init
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40000535

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x00002322 memsz 0x00002322 flags r-x
    LOAD off    0x00004000 vaddr 0x40003000 paddr 0x40003000 align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000130c  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000198  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.1 0000018a  40002198  40002198  00003198  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000214  40003000  40003000  00004000  2**2
                  ALLOC
  4 .stab         00004af4  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY
  6 .stabstr      00001908  00000000  00000000  00007e96  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .rodata	00000000 .rodata
40002198 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40003000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 init.c
40000000 l     F .text	00000029 waitResp
40000029 l     F .text	00000018 hdlrx21
00000000 l    df *ABS*	00000000 process.c
40003000 l     O .bss	00000200 irq_handlers
40002180 l     O .rodata	00000018 C.7.1020
400005a7 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000668 l     F .text	00000047 resolveHandle
40000b18 l     F .text	0000004a printrwerror
40000965 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
4000100c l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
4000032b g     F .text	0000003d getExecPath
40000a1c g     F .text	00000014 putchar
40000dc9 g     F .text	00000033 strcpy
400003ae g     F .text	0000003e yield
40000a30 g     F .text	000000e8 printf
400012bc g     F .text	00000050 syscall
40000c2d g     F .text	00000042 fgets
40000c21 g     F .text	0000000c getc
40000cf8 g     F .text	00000026 memcpy
40000953 g     F .text	00000012 puts
400003ec g     F .text	0000003d pexists
40001075 g     F .text	000000f8 malloc
40000481 g     F .text	0000003d fetch_rpc_data
40000dfc g     F .text	000000a5 strtoknc
400002c1 g     F .text	0000003d changeExecPath
40003210 g     O .bss	00000004 first_free
4000024f g     F .text	00000037 dexec
40000802 g     F .text	00000012 setstdout
400011cd g     F .text	00000034 calloc
4000127f g     F .text	0000003d vmm_alloc_cont
400001dd g     F .text	0000003b exec
40000535 g     F .text	00000072 _start
4000116d g     F .text	00000060 realloc
400004f8 g     F .text	0000003d set_rpc_handler
40000eda g     F .text	00000052 strtok
40000d1e g     F .text	00000047 memcmp
40000218 g     F .text	00000037 sexec
40000b62 g     F .text	00000085 fread
40003208 g     O .bss	00000004 first_unused
40000766 g     F .text	0000003c fopen
40000cdc g     F .text	0000001c memset
40000041 g     F .text	00000128 main
40000729 g     F .text	0000003d fclose
40000c12 g     F .text	0000000f getchar
40000c6f g     F .text	0000006c getln
40003204 g     O .bss	00000004 fr
400006ec g     F .text	0000003d favailable
40000a09 g     F .text	00000013 putc
40000d65 g     F .text	00000049 strcmp
40000be7 g     F .text	0000002b fgetc
40000286 g     F .text	0000003b getPathChild
40003200 g     O .bss	00000004 sp
400002fe g     F .text	0000002d cd
4000320c g     O .bss	00000004 first_used
400009a4 g     F .text	00000065 fputc
40000852 g     F .text	00000093 fwrite
400007f0 g     F .text	00000012 setstdin
40000ea1 g     F .text	00000039 strclone
40000368 g     F .text	00000046 exit
40000429 g     F .text	00000058 register_irq_handler
400007a2 g     F .text	0000003c fopenpmhandle
40001242 g     F .text	0000003d vmm_free
4000016c g     F .text	00000071 printFilesystemError
40000dae g     F .text	0000001b strlen
40000814 g     F .text	0000003e getLastVFSErr
400008e5 g     F .text	0000006e fputs
400006af g     F .text	0000003d fmkfifo
400004be g     F .text	0000003a call_rpc
400007de g     F .text	00000012 setstderr
40001204 g     F .text	0000003e print_memstat
40000f2c g     F .text	000000e0 free



Disassembly of section .text:

40000000 <waitResp>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
#include "stdlib.h"

static void waitResp(HANDLE cntrl) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 18             	sub    $0x18,%esp
    char resp = 0;
40000006:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

    while(resp != 'K') {
4000000a:	eb 14                	jmp    40000020 <waitResp+0x20>
        fread(cntrl, &resp, sizeof(char));
4000000c:	83 ec 04             	sub    $0x4,%esp
4000000f:	6a 01                	push   $0x1
40000011:	8d 45 f7             	lea    -0x9(%ebp),%eax
40000014:	50                   	push   %eax
40000015:	ff 75 08             	pushl  0x8(%ebp)
40000018:	e8 45 0b 00 00       	call   40000b62 <fread>
4000001d:	83 c4 10             	add    $0x10,%esp
#include "stdlib.h"

static void waitResp(HANDLE cntrl) {
    char resp = 0;

    while(resp != 'K') {
40000020:	8a 45 f7             	mov    -0x9(%ebp),%al
40000023:	3c 4b                	cmp    $0x4b,%al
40000025:	75 e5                	jne    4000000c <waitResp+0xc>
        fread(cntrl, &resp, sizeof(char));
    }
}
40000027:	c9                   	leave  
40000028:	c3                   	ret    

40000029 <hdlrx21>:

static void hdlrx21(uint32_t irq) {
40000029:	55                   	push   %ebp
4000002a:	89 e5                	mov    %esp,%ebp
4000002c:	83 ec 08             	sub    $0x8,%esp
    printf("IRQ 0x21!\n");
4000002f:	83 ec 0c             	sub    $0xc,%esp
40000032:	68 00 20 00 40       	push   $0x40002000
40000037:	e8 f4 09 00 00       	call   40000a30 <printf>
4000003c:	83 c4 10             	add    $0x10,%esp
}
4000003f:	c9                   	leave  
40000040:	c3                   	ret    

40000041 <main>:

int main(int argc, char* args[])
{
40000041:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000045:	83 e4 f0             	and    $0xfffffff0,%esp
40000048:	ff 71 fc             	pushl  -0x4(%ecx)
4000004b:	55                   	push   %ebp
4000004c:	89 e5                	mov    %esp,%ebp
4000004e:	51                   	push   %ecx
4000004f:	83 ec 14             	sub    $0x14,%esp
    printf("[ibin/init] initalizing...\n");
40000052:	83 ec 0c             	sub    $0xc,%esp
40000055:	68 0b 20 00 40       	push   $0x4000200b
4000005a:	e8 d1 09 00 00       	call   40000a30 <printf>
4000005f:	83 c4 10             	add    $0x10,%esp

    HANDLE cntrl = fmkfifo("/var/cntrl/init");
40000062:	83 ec 0c             	sub    $0xc,%esp
40000065:	68 27 20 00 40       	push   $0x40002027
4000006a:	e8 40 06 00 00       	call   400006af <fmkfifo>
4000006f:	83 c4 10             	add    $0x10,%esp
40000072:	89 45 f4             	mov    %eax,-0xc(%ebp)

    printf("[init] starting kbc driver\n");
40000075:	83 ec 0c             	sub    $0xc,%esp
40000078:	68 37 20 00 40       	push   $0x40002037
4000007d:	e8 ae 09 00 00       	call   40000a30 <printf>
40000082:	83 c4 10             	add    $0x10,%esp
    dexec("/ibin/drivers/kbc", 0);
40000085:	83 ec 08             	sub    $0x8,%esp
40000088:	6a 00                	push   $0x0
4000008a:	68 53 20 00 40       	push   $0x40002053
4000008f:	e8 bb 01 00 00       	call   4000024f <dexec>
40000094:	83 c4 10             	add    $0x10,%esp
    waitResp(cntrl);
40000097:	83 ec 0c             	sub    $0xc,%esp
4000009a:	ff 75 f4             	pushl  -0xc(%ebp)
4000009d:	e8 5e ff ff ff       	call   40000000 <waitResp>
400000a2:	83 c4 10             	add    $0x10,%esp

    printf("[ibin/init] Switching into TTY to VGA mode.\nIf you see this something probably went wrong.\n");
400000a5:	83 ec 0c             	sub    $0xc,%esp
400000a8:	68 68 20 00 40       	push   $0x40002068
400000ad:	e8 7e 09 00 00       	call   40000a30 <printf>
400000b2:	83 c4 10             	add    $0x10,%esp

    dexec("/ibin/ttytovga", 0);
400000b5:	83 ec 08             	sub    $0x8,%esp
400000b8:	6a 00                	push   $0x0
400000ba:	68 c4 20 00 40       	push   $0x400020c4
400000bf:	e8 8b 01 00 00       	call   4000024f <dexec>
400000c4:	83 c4 10             	add    $0x10,%esp
    waitResp(cntrl);
400000c7:	83 ec 0c             	sub    $0xc,%esp
400000ca:	ff 75 f4             	pushl  -0xc(%ebp)
400000cd:	e8 2e ff ff ff       	call   40000000 <waitResp>
400000d2:	83 c4 10             	add    $0x10,%esp

    setstdout("/dev/tty0");
400000d5:	83 ec 0c             	sub    $0xc,%esp
400000d8:	68 d3 20 00 40       	push   $0x400020d3
400000dd:	e8 20 07 00 00       	call   40000802 <setstdout>
400000e2:	83 c4 10             	add    $0x10,%esp
    setstdin ("/dev/keyboard");
400000e5:	83 ec 0c             	sub    $0xc,%esp
400000e8:	68 dd 20 00 40       	push   $0x400020dd
400000ed:	e8 fe 06 00 00       	call   400007f0 <setstdin>
400000f2:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
400000f5:	83 ec 0c             	sub    $0xc,%esp
400000f8:	68 d3 20 00 40       	push   $0x400020d3
400000fd:	e8 dc 06 00 00       	call   400007de <setstderr>
40000102:	83 c4 10             	add    $0x10,%esp

    printf("[init] now working on tty0\n");
40000105:	83 ec 0c             	sub    $0xc,%esp
40000108:	68 eb 20 00 40       	push   $0x400020eb
4000010d:	e8 1e 09 00 00       	call   40000a30 <printf>
40000112:	83 c4 10             	add    $0x10,%esp

    printf("[init] executing virtual file drivers\n");
40000115:	83 ec 0c             	sub    $0xc,%esp
40000118:	68 08 21 00 40       	push   $0x40002108
4000011d:	e8 0e 09 00 00       	call   40000a30 <printf>
40000122:	83 c4 10             	add    $0x10,%esp
    dexec("/ibin/urnd_prov", 0);
40000125:	83 ec 08             	sub    $0x8,%esp
40000128:	6a 00                	push   $0x0
4000012a:	68 2f 21 00 40       	push   $0x4000212f
4000012f:	e8 1b 01 00 00       	call   4000024f <dexec>
40000134:	83 c4 10             	add    $0x10,%esp
    waitResp(cntrl);
40000137:	83 ec 0c             	sub    $0xc,%esp
4000013a:	ff 75 f4             	pushl  -0xc(%ebp)
4000013d:	e8 be fe ff ff       	call   40000000 <waitResp>
40000142:	83 c4 10             	add    $0x10,%esp

    printf("[init] switching to shell\n");
40000145:	83 ec 0c             	sub    $0xc,%esp
40000148:	68 3f 21 00 40       	push   $0x4000213f
4000014d:	e8 de 08 00 00       	call   40000a30 <printf>
40000152:	83 c4 10             	add    $0x10,%esp

    dexec("/ibin/stsh", 0);
40000155:	83 ec 08             	sub    $0x8,%esp
40000158:	6a 00                	push   $0x0
4000015a:	68 5a 21 00 40       	push   $0x4000215a
4000015f:	e8 eb 00 00 00       	call   4000024f <dexec>
40000164:	83 c4 10             	add    $0x10,%esp

    //register_irq_handler(0x21, hdlrx21);

    while(1);
40000167:	eb fe                	jmp    40000167 <main+0x126>
40000169:	00 00                	add    %al,(%eax)
	...

4000016c <printFilesystemError>:
    }

    return res;
}

void printFilesystemError(char* path, uint32_t code) {
4000016c:	55                   	push   %ebp
4000016d:	89 e5                	mov    %esp,%ebp
4000016f:	83 ec 08             	sub    $0x8,%esp
40000172:	8b 55 0c             	mov    0xc(%ebp),%edx
40000175:	8b 45 08             	mov    0x8(%ebp),%eax
    switch(code) {
40000178:	83 fa 05             	cmp    $0x5,%edx
4000017b:	77 43                	ja     400001c0 <printFilesystemError+0x54>
4000017d:	ff 24 95 68 21 00 40 	jmp    *0x40002168(,%edx,4)
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
40000184:	52                   	push   %edx
40000185:	52                   	push   %edx
40000186:	50                   	push   %eax
40000187:	68 98 21 00 40       	push   $0x40002198
4000018c:	eb 3a                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
4000018e:	51                   	push   %ecx
4000018f:	51                   	push   %ecx
40000190:	50                   	push   %eax
40000191:	68 aa 21 00 40       	push   $0x400021aa
40000196:	eb 30                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
40000198:	52                   	push   %edx
40000199:	52                   	push   %edx
4000019a:	50                   	push   %eax
4000019b:	68 c9 21 00 40       	push   $0x400021c9
400001a0:	eb 26                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
400001a2:	51                   	push   %ecx
400001a3:	51                   	push   %ecx
400001a4:	50                   	push   %eax
400001a5:	68 f3 21 00 40       	push   $0x400021f3
400001aa:	eb 1c                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
400001ac:	52                   	push   %edx
400001ad:	52                   	push   %edx
400001ae:	50                   	push   %eax
400001af:	68 08 22 00 40       	push   $0x40002208
400001b4:	eb 12                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
400001b6:	51                   	push   %ecx
400001b7:	51                   	push   %ecx
400001b8:	50                   	push   %eax
400001b9:	68 43 22 00 40       	push   $0x40002243
400001be:	eb 08                	jmp    400001c8 <printFilesystemError+0x5c>
        break;
    default:
        printf("%s: WTF", path);
400001c0:	52                   	push   %edx
400001c1:	52                   	push   %edx
400001c2:	50                   	push   %eax
400001c3:	68 56 22 00 40       	push   $0x40002256
400001c8:	e8 63 08 00 00       	call   40000a30 <printf>
        break;

    }
    printf("\n");
400001cd:	c7 45 08 73 22 00 40 	movl   $0x40002273,0x8(%ebp)
        break;
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
        break;
    default:
        printf("%s: WTF", path);
400001d4:	83 c4 10             	add    $0x10,%esp
        break;

    }
    printf("\n");
}
400001d7:	c9                   	leave  
    default:
        printf("%s: WTF", path);
        break;

    }
    printf("\n");
400001d8:	e9 53 08 00 00       	jmp    40000a30 <printf>

400001dd <exec>:

void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
400001dd:	55                   	push   %ebp
400001de:	89 e5                	mov    %esp,%ebp
400001e0:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };
400001e3:	8b 45 08             	mov    0x8(%ebp),%eax
400001e6:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
400001ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001f0:	8b 45 0c             	mov    0xc(%ebp),%eax
400001f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
400001f6:	8b 45 10             	mov    0x10(%ebp),%eax
400001f9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    syscall(&state);
400001fc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001ff:	50                   	push   %eax
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };
40000200:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000207:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000020e:	e8 a9 10 00 00       	call   400012bc <syscall>

    return state.eax;
}
40000213:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000216:	c9                   	leave  
40000217:	c3                   	ret    

40000218 <sexec>:
    }

    return res;
}

int sexec(char* path, char** args) {
40000218:	55                   	push   %ebp
40000219:	89 e5                	mov    %esp,%ebp
4000021b:	56                   	push   %esi
4000021c:	53                   	push   %ebx
    uint32_t res = exec(path, args, 1);
4000021d:	53                   	push   %ebx
4000021e:	6a 01                	push   $0x1
    }

    return res;
}

int sexec(char* path, char** args) {
40000220:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t res = exec(path, args, 1);
40000223:	ff 75 0c             	pushl  0xc(%ebp)
40000226:	56                   	push   %esi
40000227:	e8 b1 ff ff ff       	call   400001dd <exec>

    if(!res) {
4000022c:	83 c4 10             	add    $0x10,%esp

    return res;
}

int sexec(char* path, char** args) {
    uint32_t res = exec(path, args, 1);
4000022f:	89 c3                	mov    %eax,%ebx

    if(!res) {
40000231:	85 c0                	test   %eax,%eax
40000233:	75 11                	jne    40000246 <sexec+0x2e>
        printFilesystemError(path, getLastVFSErr());
40000235:	e8 da 05 00 00       	call   40000814 <getLastVFSErr>
4000023a:	51                   	push   %ecx
4000023b:	51                   	push   %ecx
4000023c:	50                   	push   %eax
4000023d:	56                   	push   %esi
4000023e:	e8 29 ff ff ff       	call   4000016c <printFilesystemError>
40000243:	83 c4 10             	add    $0x10,%esp
    }

    return res;
}
40000246:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000249:	89 d8                	mov    %ebx,%eax
4000024b:	5b                   	pop    %ebx
4000024c:	5e                   	pop    %esi
4000024d:	5d                   	pop    %ebp
4000024e:	c3                   	ret    

4000024f <dexec>:
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
4000024f:	55                   	push   %ebp
40000250:	89 e5                	mov    %esp,%ebp
40000252:	56                   	push   %esi
40000253:	53                   	push   %ebx
    uint32_t res = exec(path, args, 0);
40000254:	51                   	push   %ecx
40000255:	6a 00                	push   $0x0
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
40000257:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t res = exec(path, args, 0);
4000025a:	ff 75 0c             	pushl  0xc(%ebp)
4000025d:	56                   	push   %esi
4000025e:	e8 7a ff ff ff       	call   400001dd <exec>

    if(!res) {
40000263:	83 c4 10             	add    $0x10,%esp

    return state.eax;
}

int dexec(char* path, char** args) {
    uint32_t res = exec(path, args, 0);
40000266:	89 c3                	mov    %eax,%ebx

    if(!res) {
40000268:	85 c0                	test   %eax,%eax
4000026a:	75 11                	jne    4000027d <dexec+0x2e>
        printFilesystemError(path, getLastVFSErr());
4000026c:	e8 a3 05 00 00       	call   40000814 <getLastVFSErr>
40000271:	52                   	push   %edx
40000272:	52                   	push   %edx
40000273:	50                   	push   %eax
40000274:	56                   	push   %esi
40000275:	e8 f2 fe ff ff       	call   4000016c <printFilesystemError>
4000027a:	83 c4 10             	add    $0x10,%esp
    }

    return res;
}
4000027d:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000280:	89 d8                	mov    %ebx,%eax
40000282:	5b                   	pop    %ebx
40000283:	5e                   	pop    %esi
40000284:	5d                   	pop    %ebp
40000285:	c3                   	ret    

40000286 <getPathChild>:
    syscall(&state);

    return state.eax;
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
40000286:	55                   	push   %ebp
40000287:	89 e5                	mov    %esp,%ebp
40000289:	83 ec 34             	sub    $0x34,%esp
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
        .edi = 0
    };
4000028c:	8b 45 08             	mov    0x8(%ebp),%eax
4000028f:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
40000296:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000299:	8b 45 0c             	mov    0xc(%ebp),%eax
4000029c:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000029f:	8b 45 10             	mov    0x10(%ebp),%eax
400002a2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    syscall(&state);
400002a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002a8:	50                   	push   %eax
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
        .edi = 0
    };
400002a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400002b7:	e8 00 10 00 00       	call   400012bc <syscall>

    return (char*)state.eax;
}
400002bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002bf:	c9                   	leave  
400002c0:	c3                   	ret    

400002c1 <changeExecPath>:
    };

    syscall(&state);
}

int changeExecPath(char* path) {
400002c1:	55                   	push   %ebp
400002c2:	89 e5                	mov    %esp,%ebp
400002c4:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t)path,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400002c7:	8b 45 08             	mov    0x8(%ebp),%eax
400002ca:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
400002d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400002d4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002d7:	50                   	push   %eax
        .ebx = (uint32_t)path,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400002d8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400002f4:	e8 c3 0f 00 00       	call   400012bc <syscall>

    return state.eax;
}
400002f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002fc:	c9                   	leave  
400002fd:	c3                   	ret    

400002fe <cd>:
    syscall(&state);

    return (char*)state.eax;
}

void cd(char* path) {
400002fe:	55                   	push   %ebp
400002ff:	89 e5                	mov    %esp,%ebp
40000301:	53                   	push   %ebx
40000302:	83 ec 10             	sub    $0x10,%esp
40000305:	8b 5d 08             	mov    0x8(%ebp),%ebx
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
40000308:	53                   	push   %ebx
40000309:	e8 b3 ff ff ff       	call   400002c1 <changeExecPath>
4000030e:	83 c4 10             	add    $0x10,%esp
40000311:	85 c0                	test   %eax,%eax
40000313:	75 11                	jne    40000326 <cd+0x28>
40000315:	e8 fa 04 00 00       	call   40000814 <getLastVFSErr>
4000031a:	52                   	push   %edx
4000031b:	52                   	push   %edx
4000031c:	50                   	push   %eax
4000031d:	53                   	push   %ebx
4000031e:	e8 49 fe ff ff       	call   4000016c <printFilesystemError>
40000323:	83 c4 10             	add    $0x10,%esp
}
40000326:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000329:	c9                   	leave  
4000032a:	c3                   	ret    

4000032b <getExecPath>:
    while(1) {
      printf("error\n");
    }
}

void getExecPath(char* dest) {
4000032b:	55                   	push   %ebp
4000032c:	89 e5                	mov    %esp,%ebp
4000032e:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000331:	8b 45 08             	mov    0x8(%ebp),%eax
40000334:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
4000033b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000033e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000341:	50                   	push   %eax
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000342:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000349:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000350:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000357:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000035e:	e8 59 0f 00 00       	call   400012bc <syscall>
40000363:	83 c4 10             	add    $0x10,%esp
}
40000366:	c9                   	leave  
40000367:	c3                   	ret    

40000368 <exit>:
    syscall(&state);

    return;
}

void exit(int returncode) {
40000368:	55                   	push   %ebp
40000369:	89 e5                	mov    %esp,%ebp
4000036b:	83 ec 34             	sub    $0x34,%esp
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
4000036e:	8b 45 08             	mov    0x8(%ebp),%eax
40000371:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000378:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000037b:	8d 45 e0             	lea    -0x20(%ebp),%eax
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
4000037e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000385:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000038c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000039a:	50                   	push   %eax
4000039b:	e8 1c 0f 00 00       	call   400012bc <syscall>

    while(1) {
      printf("error\n");
400003a0:	c7 04 24 5e 22 00 40 	movl   $0x4000225e,(%esp)
400003a7:	e8 84 06 00 00       	call   40000a30 <printf>
400003ac:	eb f2                	jmp    400003a0 <exit+0x38>

400003ae <yield>:
  int result = main(argc, args);

  exit(result);
}

void yield() {
400003ae:	55                   	push   %ebp
400003af:	89 e5                	mov    %esp,%ebp
400003b1:	83 ec 34             	sub    $0x34,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400003b4:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003b7:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)

    syscall(&state);
400003be:	50                   	push   %eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400003c6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400003e2:	e8 d5 0e 00 00       	call   400012bc <syscall>
400003e7:	83 c4 10             	add    $0x10,%esp

    return;
}
400003ea:	c9                   	leave  
400003eb:	c3                   	ret    

400003ec <pexists>:
    syscall(&state);

    return state.eax;
}

uint32_t pexists(int pid) {
400003ec:	55                   	push   %ebp
400003ed:	89 e5                	mov    %esp,%ebp
400003ef:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003f2:	8b 45 08             	mov    0x8(%ebp),%eax
400003f5:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400003fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400003ff:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000402:	50                   	push   %eax
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000403:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000040a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000041f:	e8 98 0e 00 00       	call   400012bc <syscall>

    return state.eax;
}
40000424:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000427:	c9                   	leave  
40000428:	c3                   	ret    

40000429 <register_irq_handler>:
    return state.eax;
}

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
40000429:	55                   	push   %ebp
4000042a:	89 e5                	mov    %esp,%ebp
4000042c:	53                   	push   %ebx
4000042d:	83 ec 30             	sub    $0x30,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000430:	8d 45 e0             	lea    -0x20(%ebp),%eax
    return state.eax;
}

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
40000433:	8b 5d 08             	mov    0x8(%ebp),%ebx
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000436:	50                   	push   %eax
      .ebx = irq,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000437:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
4000043e:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000441:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000448:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000044f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000045d:	e8 5a 0e 00 00       	call   400012bc <syscall>

    return state.eax;
40000462:	83 c4 10             	add    $0x10,%esp
40000465:	31 c0                	xor    %eax,%eax
40000467:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000046b:	74 0f                	je     4000047c <register_irq_handler+0x53>

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
    if(register_irq_rpc_syscall(irq)) {
        irq_handlers[irq] = handler;
4000046d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000470:	89 04 9d 00 30 00 40 	mov    %eax,0x40003000(,%ebx,4)
40000477:	b8 01 00 00 00       	mov    $0x1,%eax
        return 1;
    }
    return 0;
}
4000047c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000047f:	c9                   	leave  
40000480:	c3                   	ret    

40000481 <fetch_rpc_data>:
    syscall(&state);

    return state.eax;
}

void fetch_rpc_data(void* dest) {
40000481:	55                   	push   %ebp
40000482:	89 e5                	mov    %esp,%ebp
40000484:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)dest,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000487:	8b 45 08             	mov    0x8(%ebp),%eax
4000048a:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40000491:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
40000494:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000497:	50                   	push   %eax
      .ebx = (uint32_t)dest,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000498:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000049f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400004b4:	e8 03 0e 00 00       	call   400012bc <syscall>
400004b9:	83 c4 10             	add    $0x10,%esp
}
400004bc:	c9                   	leave  
400004bd:	c3                   	ret    

400004be <call_rpc>:
    syscall(&state);

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
400004be:	55                   	push   %ebp
400004bf:	89 e5                	mov    %esp,%ebp
400004c1:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };
400004c4:	8b 45 08             	mov    0x8(%ebp),%eax
400004c7:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
400004ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
400004d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400004d7:	8b 45 10             	mov    0x10(%ebp),%eax
400004da:	89 45 ec             	mov    %eax,-0x14(%ebp)
400004dd:	8b 45 14             	mov    0x14(%ebp),%eax
400004e0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&state);
400004e3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004e6:	50                   	push   %eax
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };
400004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400004ee:	e8 c9 0d 00 00       	call   400012bc <syscall>

    return state.eax;
}
400004f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400004f6:	c9                   	leave  
400004f7:	c3                   	ret    

400004f8 <set_rpc_handler>:

    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
400004f8:	55                   	push   %ebp
400004f9:	89 e5                	mov    %esp,%ebp
400004fb:	57                   	push   %edi
400004fc:	56                   	push   %esi
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400004fd:	be 80 21 00 40       	mov    $0x40002180,%esi

    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
40000502:	83 ec 24             	sub    $0x24,%esp
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000505:	8d 7d e0             	lea    -0x20(%ebp),%edi
    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));
40000508:	68 00 02 00 00       	push   $0x200
4000050d:	6a 00                	push   $0x0
4000050f:	68 00 30 00 40       	push   $0x40003000
40000514:	e8 c3 07 00 00       	call   40000cdc <memset>
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000519:	b9 06 00 00 00       	mov    $0x6,%ecx

    syscall(&state);
4000051e:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000521:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

    syscall(&state);
40000523:	89 04 24             	mov    %eax,(%esp)
40000526:	e8 91 0d 00 00       	call   400012bc <syscall>
4000052b:	83 c4 10             	add    $0x10,%esp
}
4000052e:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000531:	5e                   	pop    %esi
40000532:	5f                   	pop    %edi
40000533:	5d                   	pop    %ebp
40000534:	c3                   	ret    

40000535 <_start>:

void _start() {
40000535:	55                   	push   %ebp
40000536:	89 e5                	mov    %esp,%ebp
40000538:	56                   	push   %esi
40000539:	53                   	push   %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
4000053a:	31 db                	xor    %ebx,%ebx
    syscall(&state);

    return state.eax;
}

void _start() {
4000053c:	83 ec 2c             	sub    $0x2c,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000053f:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000542:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000549:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000550:	50                   	push   %eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000551:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000558:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000055f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000566:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000056d:	e8 4a 0d 00 00       	call   400012bc <syscall>

    return state.eax;
40000572:	8b 75 e0             	mov    -0x20(%ebp),%esi
void _start() {
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
40000575:	83 c4 10             	add    $0x10,%esp
40000578:	85 f6                	test   %esi,%esi
4000057a:	75 05                	jne    40000581 <_start+0x4c>
4000057c:	89 f3                	mov    %esi,%ebx
4000057e:	eb 07                	jmp    40000587 <_start+0x52>
      while(args[argc] != 0) {
          argc++;
40000580:	43                   	inc    %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000581:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
40000585:	75 f9                	jne    40000580 <_start+0x4b>
          argc++;
      }
  }

  set_rpc_handler();
40000587:	e8 6c ff ff ff       	call   400004f8 <set_rpc_handler>

  int result = main(argc, args);
4000058c:	51                   	push   %ecx
4000058d:	51                   	push   %ecx
4000058e:	56                   	push   %esi
4000058f:	53                   	push   %ebx
40000590:	e8 ac fa ff ff       	call   40000041 <main>

  exit(result);
40000595:	89 04 24             	mov    %eax,(%esp)
40000598:	e8 cb fd ff ff       	call   40000368 <exit>
4000059d:	83 c4 10             	add    $0x10,%esp
}
400005a0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400005a3:	5b                   	pop    %ebx
400005a4:	5e                   	pop    %esi
400005a5:	5d                   	pop    %ebp
400005a6:	c3                   	ret    

400005a7 <_handle_rpc>:
        return 1;
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
400005a7:	55                   	push   %ebp
400005a8:	89 e5                	mov    %esp,%ebp
400005aa:	56                   	push   %esi
400005ab:	53                   	push   %ebx
400005ac:	83 ec 2c             	sub    $0x2c,%esp
    void* localData = malloc(datasize);
400005af:	ff 75 10             	pushl  0x10(%ebp)
        return 1;
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
400005b2:	8b 75 0c             	mov    0xc(%ebp),%esi
    void* localData = malloc(datasize);
400005b5:	e8 bb 0a 00 00       	call   40001075 <malloc>
    fetch_rpc_data(localData);
400005ba:	89 04 24             	mov    %eax,(%esp)
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
    void* localData = malloc(datasize);
400005bd:	89 c3                	mov    %eax,%ebx
    fetch_rpc_data(localData);
400005bf:	e8 bd fe ff ff       	call   40000481 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
400005c4:	83 c4 10             	add    $0x10,%esp
400005c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400005cb:	75 4b                	jne    40000618 <_handle_rpc+0x71>
        if(irq_handlers[funcID]) {
400005cd:	8b 04 b5 00 30 00 40 	mov    0x40003000(,%esi,4),%eax
400005d4:	85 c0                	test   %eax,%eax
400005d6:	74 40                	je     40000618 <_handle_rpc+0x71>
            irq_handlers[funcID](funcID);
400005d8:	83 ec 0c             	sub    $0xc,%esp
400005db:	56                   	push   %esi
400005dc:	ff d0                	call   *%eax
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400005de:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005e1:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)

    syscall(&state);
400005e8:	89 04 24             	mov    %eax,(%esp)
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400005f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000600:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000607:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000060e:	e8 a9 0c 00 00       	call   400012bc <syscall>
40000613:	83 c4 10             	add    $0x10,%esp
40000616:	eb fe                	jmp    40000616 <_handle_rpc+0x6f>
            irq_handlers[funcID](funcID);
            return_rpc(0);
        }
    }

    printf("Unhandled RPC!\n");
40000618:	83 ec 0c             	sub    $0xc,%esp
4000061b:	68 65 22 00 40       	push   $0x40002265
40000620:	e8 0b 04 00 00       	call   40000a30 <printf>

    free(localData);
40000625:	89 1c 24             	mov    %ebx,(%esp)
40000628:	e8 ff 08 00 00       	call   40000f2c <free>
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000062d:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000630:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)

    syscall(&state);
40000637:	89 04 24             	mov    %eax,(%esp)
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000063a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000641:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000648:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000064f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000656:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000065d:	e8 5a 0c 00 00       	call   400012bc <syscall>
40000662:	83 c4 10             	add    $0x10,%esp
40000665:	eb fe                	jmp    40000665 <_handle_rpc+0xbe>
	...

40000668 <resolveHandle>:
    syscall(&state);

    return (HANDLE)state.eax;
}

static HANDLE resolveHandle(HANDLE hdl) {
40000668:	55                   	push   %ebp
40000669:	89 e5                	mov    %esp,%ebp
4000066b:	83 ec 28             	sub    $0x28,%esp
    if(hdl < 0xFFF) {
4000066e:	3d fe 0f 00 00       	cmp    $0xffe,%eax
40000673:	77 38                	ja     400006ad <resolveHandle+0x45>
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000675:	83 ec 0c             	sub    $0xc,%esp
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000678:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000067b:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000067e:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)

    syscall(&state);
40000685:	50                   	push   %eax
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000686:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000068d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000694:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000069b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400006a2:	e8 15 0c 00 00       	call   400012bc <syscall>

    return (HANDLE)state.eax;
400006a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006aa:	83 c4 10             	add    $0x10,%esp
static HANDLE resolveHandle(HANDLE hdl) {
    if(hdl < 0xFFF) {
        hdl = getpmhandle(hdl);
    }
    return hdl;
}
400006ad:	c9                   	leave  
400006ae:	c3                   	ret    

400006af <fmkfifo>:
    printrwerror(handle, res);

    return res;
}

HANDLE fmkfifo(char* path) {
400006af:	55                   	push   %ebp
400006b0:	89 e5                	mov    %esp,%ebp
400006b2:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)path,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400006b5:	8b 45 08             	mov    0x8(%ebp),%eax
400006b8:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
400006bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400006c2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006c5:	50                   	push   %eax
      .ebx = (uint32_t)path,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400006c6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400006e2:	e8 d5 0b 00 00       	call   400012bc <syscall>

    return (HANDLE)state.eax;
}
400006e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006ea:	c9                   	leave  
400006eb:	c3                   	ret    

400006ec <favailable>:
    if(res == RW_NOFM_WRITE) {
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

uint32_t favailable(uint32_t handle) {
400006ec:	55                   	push   %ebp
400006ed:	89 e5                	mov    %esp,%ebp
400006ef:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400006f2:	8b 45 08             	mov    0x8(%ebp),%eax
400006f5:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400006fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400006ff:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000702:	50                   	push   %eax
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000703:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000070a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000711:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000718:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000071f:	e8 98 0b 00 00       	call   400012bc <syscall>

    return state.eax;
}
40000724:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000727:	c9                   	leave  
40000728:	c3                   	ret    

40000729 <fclose>:
    syscall(&state);

    return (HANDLE)state.eax;
}

int fclose(uint32_t handle) {
40000729:	55                   	push   %ebp
4000072a:	89 e5                	mov    %esp,%ebp
4000072c:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000072f:	8b 45 08             	mov    0x8(%ebp),%eax
40000732:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000739:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000073c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000073f:	50                   	push   %eax
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000740:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000747:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000074e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000755:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000075c:	e8 5b 0b 00 00       	call   400012bc <syscall>

    return (int)state.eax;
}
40000761:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000764:	c9                   	leave  
40000765:	c3                   	ret    

40000766 <fopen>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
40000766:	55                   	push   %ebp
40000767:	89 e5                	mov    %esp,%ebp
40000769:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)path,
      .ecx = mode,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000076c:	8b 45 08             	mov    0x8(%ebp),%eax
4000076f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000776:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000779:	8b 45 0c             	mov    0xc(%ebp),%eax
4000077c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    syscall(&state);
4000077f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000782:	50                   	push   %eax
      .ebx = (uint32_t)path,
      .ecx = mode,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000783:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000078a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000791:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000798:	e8 1f 0b 00 00       	call   400012bc <syscall>

    return (HANDLE)state.eax;
}
4000079d:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007a0:	c9                   	leave  
400007a1:	c3                   	ret    

400007a2 <fopenpmhandle>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
400007a2:	55                   	push   %ebp
400007a3:	89 e5                	mov    %esp,%ebp
400007a5:	83 ec 34             	sub    $0x34,%esp
      .ebx = pmid,
      .ecx = (uint32_t)path,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400007a8:	8b 45 08             	mov    0x8(%ebp),%eax
400007ab:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400007b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007b5:	8b 45 0c             	mov    0xc(%ebp),%eax
400007b8:	89 45 e8             	mov    %eax,-0x18(%ebp)

    syscall(&state);
400007bb:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007be:	50                   	push   %eax
      .ebx = pmid,
      .ecx = (uint32_t)path,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400007bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400007d4:	e8 e3 0a 00 00       	call   400012bc <syscall>

    return (HANDLE)state.eax;
}
400007d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007dc:	c9                   	leave  
400007dd:	c3                   	ret    

400007de <setstderr>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
400007de:	55                   	push   %ebp
400007df:	89 e5                	mov    %esp,%ebp
400007e1:	83 ec 10             	sub    $0x10,%esp
400007e4:	ff 75 08             	pushl  0x8(%ebp)
400007e7:	6a 03                	push   $0x3
400007e9:	e8 b4 ff ff ff       	call   400007a2 <fopenpmhandle>
400007ee:	c9                   	leave  
400007ef:	c3                   	ret    

400007f0 <setstdin>:

    return (HANDLE)state.eax;
}

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
400007f0:	55                   	push   %ebp
400007f1:	89 e5                	mov    %esp,%ebp
400007f3:	83 ec 10             	sub    $0x10,%esp
400007f6:	ff 75 08             	pushl  0x8(%ebp)
400007f9:	6a 02                	push   $0x2
400007fb:	e8 a2 ff ff ff       	call   400007a2 <fopenpmhandle>
40000800:	c9                   	leave  
40000801:	c3                   	ret    

40000802 <setstdout>:
    syscall(&state);

    return (HANDLE)state.eax;
}

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
40000802:	55                   	push   %ebp
40000803:	89 e5                	mov    %esp,%ebp
40000805:	83 ec 10             	sub    $0x10,%esp
40000808:	ff 75 08             	pushl  0x8(%ebp)
4000080b:	6a 01                	push   $0x1
4000080d:	e8 90 ff ff ff       	call   400007a2 <fopenpmhandle>
40000812:	c9                   	leave  
40000813:	c3                   	ret    

40000814 <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
40000814:	55                   	push   %ebp
40000815:	89 e5                	mov    %esp,%ebp
40000817:	83 ec 34             	sub    $0x34,%esp
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000081a:	8d 45 e0             	lea    -0x20(%ebp),%eax
        .ebx = 0,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
4000081d:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)

    syscall(&state);
40000824:	50                   	push   %eax
        .ebx = 0,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000825:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000082c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000833:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000083a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000848:	e8 6f 0a 00 00       	call   400012bc <syscall>

    return state.eax;
}
4000084d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000850:	c9                   	leave  
40000851:	c3                   	ret    

40000852 <fwrite>:
    syscall(&state);

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
40000852:	55                   	push   %ebp
40000853:	89 e5                	mov    %esp,%ebp
40000855:	57                   	push   %edi
40000856:	56                   	push   %esi
40000857:	53                   	push   %ebx
40000858:	83 ec 3c             	sub    $0x3c,%esp
    handle = resolveHandle(handle);
4000085b:	8b 45 08             	mov    0x8(%ebp),%eax
    syscall(&state);

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
4000085e:	8b 7d 10             	mov    0x10(%ebp),%edi
    handle = resolveHandle(handle);
40000861:	e8 02 fe ff ff       	call   40000668 <resolveHandle>
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000866:	83 ec 0c             	sub    $0xc,%esp

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    handle = resolveHandle(handle);
40000869:	89 c6                	mov    %eax,%esi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
4000086b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
4000086e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000871:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000878:	89 45 d8             	mov    %eax,-0x28(%ebp)

    syscall(&state);
4000087b:	8d 45 d0             	lea    -0x30(%ebp),%eax
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
4000087e:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000881:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000888:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
4000088f:	50                   	push   %eax
40000890:	89 45 c4             	mov    %eax,-0x3c(%ebp)
40000893:	eb 2d                	jmp    400008c2 <fwrite+0x70>
    handle = resolveHandle(handle);

    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
        yield();
40000895:	e8 14 fb ff ff       	call   400003ae <yield>
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
4000089a:	8b 45 0c             	mov    0xc(%ebp),%eax

    syscall(&state);
4000089d:	83 ec 0c             	sub    $0xc,%esp
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
400008a0:	89 45 d8             	mov    %eax,-0x28(%ebp)

    syscall(&state);
400008a3:	8d 45 d0             	lea    -0x30(%ebp),%eax
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
400008a6:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400008ad:	89 75 d4             	mov    %esi,-0x2c(%ebp)
400008b0:	89 7d dc             	mov    %edi,-0x24(%ebp)
400008b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400008ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
400008c1:	50                   	push   %eax
400008c2:	e8 f5 09 00 00       	call   400012bc <syscall>

    return (int)state.eax;
400008c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
400008ca:	83 c4 10             	add    $0x10,%esp
uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    handle = resolveHandle(handle);

    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
400008cd:	83 fb 01             	cmp    $0x1,%ebx
400008d0:	74 c3                	je     40000895 <fwrite+0x43>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
400008d2:	89 f0                	mov    %esi,%eax
400008d4:	89 da                	mov    %ebx,%edx
400008d6:	e8 3d 02 00 00       	call   40000b18 <printrwerror>

    return res;
}
400008db:	8d 65 f4             	lea    -0xc(%ebp),%esp
400008de:	89 d8                	mov    %ebx,%eax
400008e0:	5b                   	pop    %ebx
400008e1:	5e                   	pop    %esi
400008e2:	5f                   	pop    %edi
400008e3:	5d                   	pop    %ebp
400008e4:	c3                   	ret    

400008e5 <fputs>:

int puts(const char* c) {
    return fputs(c, PMID_STDOUT);
}

int fputs(const char* c, HANDLE hdl) {
400008e5:	55                   	push   %ebp
400008e6:	89 e5                	mov    %esp,%ebp
400008e8:	56                   	push   %esi
400008e9:	53                   	push   %ebx
400008ea:	83 ec 20             	sub    $0x20,%esp
    hdl = resolveHandle(hdl);
400008ed:	8b 45 0c             	mov    0xc(%ebp),%eax

int puts(const char* c) {
    return fputs(c, PMID_STDOUT);
}

int fputs(const char* c, HANDLE hdl) {
400008f0:	8b 5d 08             	mov    0x8(%ebp),%ebx
    hdl = resolveHandle(hdl);
400008f3:	e8 70 fd ff ff       	call   40000668 <resolveHandle>
400008f8:	89 c6                	mov    %eax,%esi
    if(hdl != 0) {
400008fa:	85 c0                	test   %eax,%eax
400008fc:	74 16                	je     40000914 <fputs+0x2f>
        return fwrite(hdl, c, strlen(c));
400008fe:	83 ec 0c             	sub    $0xc,%esp
40000901:	53                   	push   %ebx
40000902:	e8 a7 04 00 00       	call   40000dae <strlen>
40000907:	83 c4 0c             	add    $0xc,%esp
4000090a:	50                   	push   %eax
4000090b:	53                   	push   %ebx
4000090c:	56                   	push   %esi
4000090d:	e8 40 ff ff ff       	call   40000852 <fwrite>
40000912:	eb 35                	jmp    40000949 <fputs+0x64>
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000914:	83 ec 0c             	sub    $0xc,%esp
40000917:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = (uint32_t)cp,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
4000091a:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000921:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  
  syscall(&state);
40000924:	50                   	push   %eax
    .ebx = (uint32_t)cp,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40000925:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000092c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000933:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000093a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);
40000941:	e8 76 09 00 00       	call   400012bc <syscall>
  
  return state.eax;
40000946:	8b 45 e0             	mov    -0x20(%ebp),%eax
int fputs(const char* c, HANDLE hdl) {
    hdl = resolveHandle(hdl);
    if(hdl != 0) {
        return fwrite(hdl, c, strlen(c));
    }
    return kputs(c);
40000949:	83 c4 10             	add    $0x10,%esp
}
4000094c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000094f:	5b                   	pop    %ebx
40000950:	5e                   	pop    %esi
40000951:	5d                   	pop    %ebp
40000952:	c3                   	ret    

40000953 <puts>:
  syscall(&state);
  
  return state.eax;
}

int puts(const char* c) {
40000953:	55                   	push   %ebp
40000954:	89 e5                	mov    %esp,%ebp
40000956:	83 ec 10             	sub    $0x10,%esp
    return fputs(c, PMID_STDOUT);
40000959:	6a 01                	push   $0x1
4000095b:	ff 75 08             	pushl  0x8(%ebp)
4000095e:	e8 82 ff ff ff       	call   400008e5 <fputs>
}
40000963:	c9                   	leave  
40000964:	c3                   	ret    

40000965 <putn>:
    }
    return kputs(c);
}

static int putn(unsigned long x, int base)
{
40000965:	55                   	push   %ebp
40000966:	89 e5                	mov    %esp,%ebp
40000968:	56                   	push   %esi
40000969:	53                   	push   %ebx
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  char* p;
  int wrt = 0;

  if (base > 36) {
4000096a:	31 f6                	xor    %esi,%esi
    }
    return kputs(c);
}

static int putn(unsigned long x, int base)
{
4000096c:	83 ec 50             	sub    $0x50,%esp
4000096f:	89 d3                	mov    %edx,%ebx
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  char* p;
  int wrt = 0;

  if (base > 36) {
40000971:	83 fa 24             	cmp    $0x24,%edx
40000974:	7f 25                	jg     4000099b <putn+0x36>
    return 0;
  }

  p = buf + 64;
  *p = '\0';
40000976:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
4000097a:	8d 4d f7             	lea    -0x9(%ebp),%ecx
  do {
    wrt++;
    *--p = digits[x % base];
4000097d:	31 d2                	xor    %edx,%edx
4000097f:	49                   	dec    %ecx
40000980:	f7 f3                	div    %ebx
  }

  p = buf + 64;
  *p = '\0';
  do {
    wrt++;
40000982:	46                   	inc    %esi
    *--p = digits[x % base];
    x /= base;
  } while (x);
40000983:	85 c0                	test   %eax,%eax

  p = buf + 64;
  *p = '\0';
  do {
    wrt++;
    *--p = digits[x % base];
40000985:	8a 92 75 22 00 40    	mov    0x40002275(%edx),%dl
4000098b:	88 11                	mov    %dl,(%ecx)
    x /= base;
  } while (x);
4000098d:	75 ee                	jne    4000097d <putn+0x18>
  puts(p);
4000098f:	83 ec 0c             	sub    $0xc,%esp
40000992:	51                   	push   %ecx
40000993:	e8 bb ff ff ff       	call   40000953 <puts>
  
  return wrt;
40000998:	83 c4 10             	add    $0x10,%esp
}
4000099b:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000099e:	89 f0                	mov    %esi,%eax
400009a0:	5b                   	pop    %ebx
400009a1:	5e                   	pop    %esi
400009a2:	5d                   	pop    %ebp
400009a3:	c3                   	ret    

400009a4 <fputc>:

int putc(char c, HANDLE hdl) {
    return fputc(c, hdl);
}

int fputc(char c, HANDLE hdl) {
400009a4:	55                   	push   %ebp
400009a5:	89 e5                	mov    %esp,%ebp
400009a7:	83 ec 38             	sub    $0x38,%esp
400009aa:	8b 45 08             	mov    0x8(%ebp),%eax
400009ad:	88 45 d4             	mov    %al,-0x2c(%ebp)
    hdl = resolveHandle(hdl);
400009b0:	8b 45 0c             	mov    0xc(%ebp),%eax
400009b3:	e8 b0 fc ff ff       	call   40000668 <resolveHandle>
    if(hdl != 0) {
400009b8:	85 c0                	test   %eax,%eax
400009ba:	74 0f                	je     400009cb <fputc+0x27>
        return fwrite(hdl, &c, sizeof(char));
400009bc:	52                   	push   %edx
400009bd:	8d 55 d4             	lea    -0x2c(%ebp),%edx
400009c0:	6a 01                	push   $0x1
400009c2:	52                   	push   %edx
400009c3:	50                   	push   %eax
400009c4:	e8 89 fe ff ff       	call   40000852 <fwrite>
400009c9:	eb 39                	jmp    40000a04 <fputc+0x60>
}

static int kputc(char c) {
  struct regstate state = {
    .eax = 201,
    .ebx = (uint32_t)c,
400009cb:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
400009cf:	83 ec 0c             	sub    $0xc,%esp
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400009d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);
400009d5:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400009d8:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
  
  syscall(&state);
400009df:	50                   	push   %eax
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400009e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400009e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400009ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);
400009fc:	e8 bb 08 00 00       	call   400012bc <syscall>
  
  return state.eax;
40000a01:	8b 45 e0             	mov    -0x20(%ebp),%eax
int fputc(char c, HANDLE hdl) {
    hdl = resolveHandle(hdl);
    if(hdl != 0) {
        return fwrite(hdl, &c, sizeof(char));
    }
    return kputc(c);
40000a04:	83 c4 10             	add    $0x10,%esp
}
40000a07:	c9                   	leave  
40000a08:	c3                   	ret    

40000a09 <putc>:

int putchar(char c) {
    return fputc(c, PMID_STDOUT);
}

int putc(char c, HANDLE hdl) {
40000a09:	55                   	push   %ebp
40000a0a:	89 e5                	mov    %esp,%ebp
40000a0c:	83 ec 08             	sub    $0x8,%esp
40000a0f:	0f be 45 08          	movsbl 0x8(%ebp),%eax
    return fputc(c, hdl);
40000a13:	89 45 08             	mov    %eax,0x8(%ebp)
}
40000a16:	c9                   	leave  
int putchar(char c) {
    return fputc(c, PMID_STDOUT);
}

int putc(char c, HANDLE hdl) {
    return fputc(c, hdl);
40000a17:	e9 88 ff ff ff       	jmp    400009a4 <fputc>

40000a1c <putchar>:
  syscall(&state);
  
  return state.eax;
}

int putchar(char c) {
40000a1c:	55                   	push   %ebp
40000a1d:	89 e5                	mov    %esp,%ebp
40000a1f:	83 ec 10             	sub    $0x10,%esp
    return fputc(c, PMID_STDOUT);
40000a22:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000a26:	6a 01                	push   $0x1
40000a28:	50                   	push   %eax
40000a29:	e8 76 ff ff ff       	call   400009a4 <fputc>
}
40000a2e:	c9                   	leave  
40000a2f:	c3                   	ret    

40000a30 <printf>:
  
  return wrt;
}

int printf(const char* fmt, ...)
{
40000a30:	55                   	push   %ebp
40000a31:	89 e5                	mov    %esp,%ebp
40000a33:	57                   	push   %edi
40000a34:	56                   	push   %esi
40000a35:	53                   	push   %ebx
40000a36:	83 ec 1c             	sub    $0x1c,%esp
  puts(p);
  
  return wrt;
}

int printf(const char* fmt, ...)
40000a39:	8d 75 0c             	lea    0xc(%ebp),%esi
{
40000a3c:	8b 7d 08             	mov    0x8(%ebp),%edi
  puts(p);
  
  return wrt;
}

int printf(const char* fmt, ...)
40000a3f:	31 db                	xor    %ebx,%ebx
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000a41:	e9 be 00 00 00       	jmp    40000b04 <printf+0xd4>
    if (*fmt == '%') {
40000a46:	3c 25                	cmp    $0x25,%al
40000a48:	0f 85 a4 00 00 00    	jne    40000af2 <printf+0xc2>
      fmt++;
40000a4e:	47                   	inc    %edi
      switch (*fmt) {
40000a4f:	8a 07                	mov    (%edi),%al
40000a51:	3c 70                	cmp    $0x70,%al
40000a53:	74 47                	je     40000a9c <printf+0x6c>
40000a55:	7f 1a                	jg     40000a71 <printf+0x41>
40000a57:	3c 63                	cmp    $0x63,%al
40000a59:	74 5a                	je     40000ab5 <printf+0x85>
40000a5b:	7f 0e                	jg     40000a6b <printf+0x3b>
40000a5d:	84 c0                	test   %al,%al
40000a5f:	0f 84 a9 00 00 00    	je     40000b0e <printf+0xde>
40000a65:	3c 25                	cmp    $0x25,%al
40000a67:	75 6c                	jne    40000ad5 <printf+0xa5>
40000a69:	eb 63                	jmp    40000ace <printf+0x9e>
40000a6b:	3c 64                	cmp    $0x64,%al
40000a6d:	75 66                	jne    40000ad5 <printf+0xa5>
40000a6f:	eb 1e                	jmp    40000a8f <printf+0x5f>
40000a71:	3c 75                	cmp    $0x75,%al
40000a73:	74 1a                	je     40000a8f <printf+0x5f>
40000a75:	3c 78                	cmp    $0x78,%al
40000a77:	74 23                	je     40000a9c <printf+0x6c>
40000a79:	3c 73                	cmp    $0x73,%al
40000a7b:	75 58                	jne    40000ad5 <printf+0xa5>
        case 's':
          s = va_arg(ap, char*);
          wrt += puts(s);
40000a7d:	83 ec 0c             	sub    $0xc,%esp
  while (*fmt) {
    if (*fmt == '%') {
      fmt++;
      switch (*fmt) {
        case 's':
          s = va_arg(ap, char*);
40000a80:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += puts(s);
40000a83:	ff 36                	pushl  (%esi)
  while (*fmt) {
    if (*fmt == '%') {
      fmt++;
      switch (*fmt) {
        case 's':
          s = va_arg(ap, char*);
40000a85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += puts(s);
40000a88:	e8 c6 fe ff ff       	call   40000953 <puts>
40000a8d:	eb 38                	jmp    40000ac7 <printf+0x97>
          break;
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000a8f:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putn(n, 10);
40000a92:	ba 0a 00 00 00       	mov    $0xa,%edx
          s = va_arg(ap, char*);
          wrt += puts(s);
          break;
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a9a:	eb 0b                	jmp    40000aa7 <printf+0x77>
          wrt += putn(n, 10);
          break;
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000a9c:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putn(n, 16);
40000a9f:	ba 10 00 00 00       	mov    $0x10,%edx
          n = va_arg(ap, unsigned long int);
          wrt += putn(n, 10);
          break;
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000aa4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putn(n, 16);
40000aa7:	8b 06                	mov    (%esi),%eax
40000aa9:	e8 b7 fe ff ff       	call   40000965 <putn>
40000aae:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000ab1:	01 c3                	add    %eax,%ebx
          break;
40000ab3:	eb 4e                	jmp    40000b03 <printf+0xd3>
        case 'c':
          c = va_arg(ap, int);
40000ab5:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putchar(c);
40000ab8:	83 ec 0c             	sub    $0xc,%esp
        case 'p':
          n = va_arg(ap, unsigned long int);
          wrt += putn(n, 16);
          break;
        case 'c':
          c = va_arg(ap, int);
40000abb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putchar(c);
40000abe:	0f be 06             	movsbl (%esi),%eax
40000ac1:	50                   	push   %eax
40000ac2:	e8 55 ff ff ff       	call   40000a1c <putchar>
40000ac7:	01 c3                	add    %eax,%ebx
40000ac9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000acc:	eb 32                	jmp    40000b00 <printf+0xd0>
          break;
        case '%':
          wrt += putchar('%');
40000ace:	83 ec 0c             	sub    $0xc,%esp
40000ad1:	6a 25                	push   $0x25
40000ad3:	eb 24                	jmp    40000af9 <printf+0xc9>
          break;
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000ad5:	83 ec 0c             	sub    $0xc,%esp
40000ad8:	6a 25                	push   $0x25
40000ada:	e8 3d ff ff ff       	call   40000a1c <putchar>
40000adf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putchar(*fmt);
40000ae2:	0f be 07             	movsbl (%edi),%eax
40000ae5:	89 04 24             	mov    %eax,(%esp)
40000ae8:	e8 2f ff ff ff       	call   40000a1c <putchar>
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000aed:	03 45 e4             	add    -0x1c(%ebp),%eax
40000af0:	eb 0c                	jmp    40000afe <printf+0xce>
          wrt += putchar(*fmt);
          break;
      }
    } else {
      wrt += putchar(*fmt);
40000af2:	83 ec 0c             	sub    $0xc,%esp
40000af5:	0f be c0             	movsbl %al,%eax
40000af8:	50                   	push   %eax
40000af9:	e8 1e ff ff ff       	call   40000a1c <putchar>
40000afe:	01 c3                	add    %eax,%ebx
40000b00:	83 c4 10             	add    $0x10,%esp
    }

    fmt++;
40000b03:	47                   	inc    %edi
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000b04:	8a 07                	mov    (%edi),%al
40000b06:	84 c0                	test   %al,%al
40000b08:	0f 85 38 ff ff ff    	jne    40000a46 <printf+0x16>

out:
  va_end(ap);

  return wrt;
}
40000b0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b11:	89 d8                	mov    %ebx,%eax
40000b13:	5b                   	pop    %ebx
40000b14:	5e                   	pop    %esi
40000b15:	5f                   	pop    %edi
40000b16:	5d                   	pop    %ebp
40000b17:	c3                   	ret    

40000b18 <printrwerror>:
    syscall(&state);

    return (int)state.eax;
}

static void printrwerror(HANDLE handle, uint32_t res) {
40000b18:	55                   	push   %ebp
40000b19:	89 e5                	mov    %esp,%ebp
40000b1b:	83 ec 08             	sub    $0x8,%esp
    if(res == RW_ERR_VFS) {
40000b1e:	83 fa 02             	cmp    $0x2,%edx
40000b21:	75 0a                	jne    40000b2d <printrwerror+0x15>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
40000b23:	52                   	push   %edx
40000b24:	52                   	push   %edx
40000b25:	50                   	push   %eax
40000b26:	68 9a 22 00 40       	push   $0x4000229a
40000b2b:	eb 2b                	jmp    40000b58 <printrwerror+0x40>
    }

    if(res == RW_ERR_DRIVER) {
40000b2d:	83 fa 03             	cmp    $0x3,%edx
40000b30:	75 0a                	jne    40000b3c <printrwerror+0x24>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
40000b32:	51                   	push   %ecx
40000b33:	51                   	push   %ecx
40000b34:	50                   	push   %eax
40000b35:	68 b2 22 00 40       	push   $0x400022b2
40000b3a:	eb 1c                	jmp    40000b58 <printrwerror+0x40>
    }

    if(res == RW_NOFM_READ) {
40000b3c:	83 fa 04             	cmp    $0x4,%edx
40000b3f:	75 0a                	jne    40000b4b <printrwerror+0x33>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
40000b41:	52                   	push   %edx
40000b42:	52                   	push   %edx
40000b43:	50                   	push   %eax
40000b44:	68 cd 22 00 40       	push   $0x400022cd
40000b49:	eb 0d                	jmp    40000b58 <printrwerror+0x40>
    }

    if(res == RW_NOFM_WRITE) {
40000b4b:	83 fa 05             	cmp    $0x5,%edx
40000b4e:	75 10                	jne    40000b60 <printrwerror+0x48>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
40000b50:	51                   	push   %ecx
40000b51:	51                   	push   %ecx
40000b52:	50                   	push   %eax
40000b53:	68 f7 22 00 40       	push   $0x400022f7
40000b58:	e8 d3 fe ff ff       	call   40000a30 <printf>
40000b5d:	83 c4 10             	add    $0x10,%esp
    }
}
40000b60:	c9                   	leave  
40000b61:	c3                   	ret    

40000b62 <fread>:
    syscall(&state);

    return (int)state.eax;
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000b62:	55                   	push   %ebp
40000b63:	89 e5                	mov    %esp,%ebp
40000b65:	57                   	push   %edi
40000b66:	56                   	push   %esi
40000b67:	53                   	push   %ebx
40000b68:	83 ec 38             	sub    $0x38,%esp
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000b6b:	8d 7d d0             	lea    -0x30(%ebp),%edi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000b6e:	8b 45 0c             	mov    0xc(%ebp),%eax
    syscall(&state);

    return (int)state.eax;
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000b71:	8b 75 08             	mov    0x8(%ebp),%esi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000b74:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b77:	8b 45 10             	mov    0x10(%ebp),%eax
40000b7a:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b81:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b84:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b87:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b8e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b95:	eb 2c                	jmp    40000bc3 <fread+0x61>

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
        yield();
40000b97:	e8 12 f8 ff ff       	call   400003ae <yield>
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000ba2:	8b 45 10             	mov    0x10(%ebp),%eax
40000ba5:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000bac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000baf:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000bb2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000bb9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000bc0:	83 ec 0c             	sub    $0xc,%esp
40000bc3:	57                   	push   %edi
40000bc4:	e8 f3 06 00 00       	call   400012bc <syscall>

    return (int)state.eax;
40000bc9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000bcc:	83 c4 10             	add    $0x10,%esp
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000bcf:	83 fb 01             	cmp    $0x1,%ebx
40000bd2:	74 c3                	je     40000b97 <fread+0x35>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
40000bd4:	89 f0                	mov    %esi,%eax
40000bd6:	89 da                	mov    %ebx,%edx
40000bd8:	e8 3b ff ff ff       	call   40000b18 <printrwerror>

    return res;
}
40000bdd:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000be0:	89 d8                	mov    %ebx,%eax
40000be2:	5b                   	pop    %ebx
40000be3:	5e                   	pop    %esi
40000be4:	5f                   	pop    %edi
40000be5:	5d                   	pop    %ebp
40000be6:	c3                   	ret    

40000be7 <fgetc>:
    syscall(&state);

    return (HANDLE)state.eax;
}

char fgetc(HANDLE hdl) {
40000be7:	55                   	push   %ebp
40000be8:	89 e5                	mov    %esp,%ebp
40000bea:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000bed:	8b 45 08             	mov    0x8(%ebp),%eax
40000bf0:	e8 73 fa ff ff       	call   40000668 <resolveHandle>
    char in = 0;
40000bf5:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
40000bf9:	85 c0                	test   %eax,%eax
40000bfb:	74 10                	je     40000c0d <fgetc+0x26>
        fread(hdl, &in, sizeof(char));
40000bfd:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000c00:	51                   	push   %ecx
40000c01:	6a 01                	push   $0x1
40000c03:	52                   	push   %edx
40000c04:	50                   	push   %eax
40000c05:	e8 58 ff ff ff       	call   40000b62 <fread>
40000c0a:	83 c4 10             	add    $0x10,%esp
    }
    return in;
}
40000c0d:	8a 45 f7             	mov    -0x9(%ebp),%al
40000c10:	c9                   	leave  
40000c11:	c3                   	ret    

40000c12 <getchar>:

char getc(HANDLE hdl) {
    return fgetc(hdl);
}

char getchar() {
40000c12:	55                   	push   %ebp
40000c13:	89 e5                	mov    %esp,%ebp
40000c15:	83 ec 14             	sub    $0x14,%esp
    return fgetc(PMID_STDIN);
40000c18:	6a 02                	push   $0x2
40000c1a:	e8 c8 ff ff ff       	call   40000be7 <fgetc>
}
40000c1f:	c9                   	leave  
40000c20:	c3                   	ret    

40000c21 <getc>:

    str[num] = '\0';
    return str;
}

char getc(HANDLE hdl) {
40000c21:	55                   	push   %ebp
40000c22:	89 e5                	mov    %esp,%ebp
40000c24:	83 ec 08             	sub    $0x8,%esp
    return fgetc(hdl);
}
40000c27:	c9                   	leave  
    str[num] = '\0';
    return str;
}

char getc(HANDLE hdl) {
    return fgetc(hdl);
40000c28:	e9 ba ff ff ff       	jmp    40000be7 <fgetc>

40000c2d <fgets>:
        fread(hdl, &in, sizeof(char));
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
40000c2d:	55                   	push   %ebp
40000c2e:	89 e5                	mov    %esp,%ebp
40000c30:	57                   	push   %edi
40000c31:	56                   	push   %esi
40000c32:	53                   	push   %ebx
40000c33:	83 ec 1c             	sub    $0x1c,%esp
40000c36:	31 db                	xor    %ebx,%ebx
40000c38:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000c3b:	8b 75 08             	mov    0x8(%ebp),%esi
    for(int n = 0; n < (num - 1); n++) {
40000c3e:	8d 47 ff             	lea    -0x1(%edi),%eax
40000c41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c44:	eb 16                	jmp    40000c5c <fgets+0x2f>
        str[n] = fgetc(hdl);
40000c46:	83 ec 0c             	sub    $0xc,%esp
40000c49:	ff 75 10             	pushl  0x10(%ebp)
40000c4c:	e8 96 ff ff ff       	call   40000be7 <fgetc>
        if(str[n] == 0 || str[n] == '\0') {
40000c51:	83 c4 10             	add    $0x10,%esp
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
        str[n] = fgetc(hdl);
40000c54:	88 04 1e             	mov    %al,(%esi,%ebx,1)
        if(str[n] == 0 || str[n] == '\0') {
40000c57:	84 c0                	test   %al,%al
40000c59:	74 0a                	je     40000c65 <fgets+0x38>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
40000c5b:	43                   	inc    %ebx
40000c5c:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000c5f:	7c e5                	jl     40000c46 <fgets+0x19>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
40000c61:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
    return str;
}
40000c65:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000c68:	89 f0                	mov    %esi,%eax
40000c6a:	5b                   	pop    %ebx
40000c6b:	5e                   	pop    %esi
40000c6c:	5f                   	pop    %edi
40000c6d:	5d                   	pop    %ebp
40000c6e:	c3                   	ret    

40000c6f <getln>:

char getchar() {
    return fgetc(PMID_STDIN);
}

char* getln(char* str) {
40000c6f:	55                   	push   %ebp
40000c70:	89 e5                	mov    %esp,%ebp
40000c72:	56                   	push   %esi
40000c73:	53                   	push   %ebx
40000c74:	31 db                	xor    %ebx,%ebx
40000c76:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000c79:	eb 42                	jmp    40000cbd <getln+0x4e>
        if(lastChar == '\n') {
40000c7b:	3c 0a                	cmp    $0xa,%al
40000c7d:	75 0f                	jne    40000c8e <getln+0x1f>
            putchar('\n');
40000c7f:	83 ec 0c             	sub    $0xc,%esp
40000c82:	6a 0a                	push   $0xa
40000c84:	e8 93 fd ff ff       	call   40000a1c <putchar>
            break;
40000c89:	83 c4 10             	add    $0x10,%esp
40000c8c:	eb 40                	jmp    40000cce <getln+0x5f>
        }

        if(lastChar == 8) {
40000c8e:	3c 08                	cmp    $0x8,%al
40000c90:	75 18                	jne    40000caa <getln+0x3b>
            if(index != 0) {
40000c92:	85 db                	test   %ebx,%ebx
40000c94:	74 0e                	je     40000ca4 <getln+0x35>
                index--;
                putchar(8);
40000c96:	83 ec 0c             	sub    $0xc,%esp
            break;
        }

        if(lastChar == 8) {
            if(index != 0) {
                index--;
40000c99:	4b                   	dec    %ebx
                putchar(8);
40000c9a:	6a 08                	push   $0x8
40000c9c:	e8 7b fd ff ff       	call   40000a1c <putchar>
40000ca1:	83 c4 10             	add    $0x10,%esp
            }
            str[index] = 0;
40000ca4:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
            continue;
40000ca8:	eb 13                	jmp    40000cbd <getln+0x4e>
        }

        str[index] = lastChar;
        putchar(lastChar);
40000caa:	83 ec 0c             	sub    $0xc,%esp
            }
            str[index] = 0;
            continue;
        }

        str[index] = lastChar;
40000cad:	88 04 1e             	mov    %al,(%esi,%ebx,1)
        putchar(lastChar);
40000cb0:	0f be c0             	movsbl %al,%eax
40000cb3:	50                   	push   %eax

        index++;
40000cb4:	43                   	inc    %ebx
            str[index] = 0;
            continue;
        }

        str[index] = lastChar;
        putchar(lastChar);
40000cb5:	e8 62 fd ff ff       	call   40000a1c <putchar>

        index++;
40000cba:	83 c4 10             	add    $0x10,%esp

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000cbd:	83 ec 0c             	sub    $0xc,%esp
40000cc0:	6a 02                	push   $0x2
40000cc2:	e8 20 ff ff ff       	call   40000be7 <fgetc>
40000cc7:	83 c4 10             	add    $0x10,%esp
40000cca:	84 c0                	test   %al,%al
40000ccc:	75 ad                	jne    40000c7b <getln+0xc>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000cce:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)

    return str;
}
40000cd2:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000cd5:	89 f0                	mov    %esi,%eax
40000cd7:	5b                   	pop    %ebx
40000cd8:	5e                   	pop    %esi
40000cd9:	5d                   	pop    %ebp
40000cda:	c3                   	ret    
	...

40000cdc <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000cdc:	55                   	push   %ebp
40000cdd:	89 e5                	mov    %esp,%ebp
40000cdf:	53                   	push   %ebx
40000ce0:	8b 45 08             	mov    0x8(%ebp),%eax
40000ce3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ce6:	8b 4d 10             	mov    0x10(%ebp),%ecx
    unsigned char* p = buf;
40000ce9:	89 c2                	mov    %eax,%edx

    while (n--) {
40000ceb:	eb 04                	jmp    40000cf1 <memset+0x15>
        *p++ = c;
40000ced:	88 1a                	mov    %bl,(%edx)
40000cef:	49                   	dec    %ecx
40000cf0:	42                   	inc    %edx
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000cf1:	85 c9                	test   %ecx,%ecx
40000cf3:	75 f8                	jne    40000ced <memset+0x11>
        *p++ = c;
    }

    return buf;
}
40000cf5:	5b                   	pop    %ebx
40000cf6:	5d                   	pop    %ebp
40000cf7:	c3                   	ret    

40000cf8 <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000cf8:	55                   	push   %ebp
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000cf9:	31 c9                	xor    %ecx,%ecx
    }

    return buf;
}

void* memcpy(void* dest, const void* src, size_t n) {
40000cfb:	89 e5                	mov    %esp,%ebp
40000cfd:	56                   	push   %esi
40000cfe:	53                   	push   %ebx
40000cff:	8b 75 10             	mov    0x10(%ebp),%esi
40000d02:	8b 45 08             	mov    0x8(%ebp),%eax
40000d05:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000d08:	85 f6                	test   %esi,%esi
40000d0a:	75 04                	jne    40000d10 <memcpy+0x18>
40000d0c:	31 c0                	xor    %eax,%eax
40000d0e:	eb 0a                	jmp    40000d1a <memcpy+0x22>

    while (n--) {
        *(d++) = *(s++);
40000d10:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000d13:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000d16:	41                   	inc    %ecx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000d17:	4e                   	dec    %esi
40000d18:	75 f6                	jne    40000d10 <memcpy+0x18>
        *(d++) = *(s++);
    }

    return dest;
}
40000d1a:	5b                   	pop    %ebx
40000d1b:	5e                   	pop    %esi
40000d1c:	5d                   	pop    %ebp
40000d1d:	c3                   	ret    

40000d1e <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000d1e:	55                   	push   %ebp
    if (ptr1 == 0)
40000d1f:	83 c8 ff             	or     $0xffffffff,%eax
    }

    return dest;
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000d22:	89 e5                	mov    %esp,%ebp
40000d24:	57                   	push   %edi
40000d25:	56                   	push   %esi
40000d26:	53                   	push   %ebx
40000d27:	8b 75 08             	mov    0x8(%ebp),%esi
40000d2a:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000d2d:	8b 5d 10             	mov    0x10(%ebp),%ebx
    if (ptr1 == 0)
40000d30:	85 f6                	test   %esi,%esi
40000d32:	74 2c                	je     40000d60 <memcmp+0x42>
        return -1;
    if (ptr2 == 0)
40000d34:	b8 01 00 00 00       	mov    $0x1,%eax
40000d39:	85 ff                	test   %edi,%edi
40000d3b:	74 23                	je     40000d60 <memcmp+0x42>
        return 1;
    if (num == 0)
40000d3d:	31 d2                	xor    %edx,%edx
40000d3f:	85 db                	test   %ebx,%ebx
40000d41:	75 17                	jne    40000d5a <memcmp+0x3c>
40000d43:	eb 19                	jmp    40000d5e <memcmp+0x40>

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
        if (pa[i] != pb[i]) {
40000d45:	8a 04 16             	mov    (%esi,%edx,1),%al
40000d48:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000d4b:	38 c8                	cmp    %cl,%al
40000d4d:	74 0a                	je     40000d59 <memcmp+0x3b>
            return pa[i] - pb[i];
40000d4f:	0f b6 c0             	movzbl %al,%eax
40000d52:	0f b6 c9             	movzbl %cl,%ecx
40000d55:	29 c8                	sub    %ecx,%eax
40000d57:	eb 07                	jmp    40000d60 <memcmp+0x42>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000d59:	42                   	inc    %edx
40000d5a:	39 da                	cmp    %ebx,%edx
40000d5c:	72 e7                	jb     40000d45 <memcmp+0x27>
40000d5e:	31 c0                	xor    %eax,%eax
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
}
40000d60:	5b                   	pop    %ebx
40000d61:	5e                   	pop    %esi
40000d62:	5f                   	pop    %edi
40000d63:	5d                   	pop    %ebp
40000d64:	c3                   	ret    

40000d65 <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000d65:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d66:	31 c0                	xor    %eax,%eax
        }
    }
    return 0;
}

int strcmp(const char* str1, const char* str2) {
40000d68:	89 e5                	mov    %esp,%ebp
40000d6a:	56                   	push   %esi
40000d6b:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d6c:	31 db                	xor    %ebx,%ebx
        }
    }
    return 0;
}

int strcmp(const char* str1, const char* str2) {
40000d6e:	8b 55 08             	mov    0x8(%ebp),%edx
40000d71:	8b 4d 0c             	mov    0xc(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d74:	85 d2                	test   %edx,%edx
40000d76:	75 03                	jne    40000d7b <strcmp+0x16>
40000d78:	eb 09                	jmp    40000d83 <strcmp+0x1e>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000d7a:	40                   	inc    %eax
40000d7b:	89 c3                	mov    %eax,%ebx
40000d7d:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000d81:	75 f7                	jne    40000d7a <strcmp+0x15>

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d83:	31 c0                	xor    %eax,%eax
40000d85:	31 f6                	xor    %esi,%esi
40000d87:	85 c9                	test   %ecx,%ecx
40000d89:	75 03                	jne    40000d8e <strcmp+0x29>
40000d8b:	eb 09                	jmp    40000d96 <strcmp+0x31>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000d8d:	40                   	inc    %eax
40000d8e:	89 c6                	mov    %eax,%esi
40000d90:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000d94:	75 f7                	jne    40000d8d <strcmp+0x28>
int strcmp(const char* str1, const char* str2) {
    int l1 = strlen(str1);
    int l2 = strlen(str2);
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40000d96:	89 f0                	mov    %esi,%eax
40000d98:	39 de                	cmp    %ebx,%esi
40000d9a:	7e 02                	jle    40000d9e <strcmp+0x39>
40000d9c:	89 d8                	mov    %ebx,%eax
40000d9e:	40                   	inc    %eax
40000d9f:	50                   	push   %eax
40000da0:	51                   	push   %ecx
40000da1:	52                   	push   %edx
40000da2:	e8 77 ff ff ff       	call   40000d1e <memcmp>
}
40000da7:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000daa:	5b                   	pop    %ebx
40000dab:	5e                   	pop    %esi
40000dac:	5d                   	pop    %ebp
40000dad:	c3                   	ret    

40000dae <strlen>:

unsigned int strlen(const char* str) {
40000dae:	55                   	push   %ebp
    if (str == 0)
40000daf:	31 d2                	xor    %edx,%edx
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
40000db1:	89 e5                	mov    %esp,%ebp
    if (str == 0)
40000db3:	31 c0                	xor    %eax,%eax
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
40000db5:	8b 4d 08             	mov    0x8(%ebp),%ecx
    if (str == 0)
40000db8:	85 c9                	test   %ecx,%ecx
40000dba:	75 03                	jne    40000dbf <strlen+0x11>
40000dbc:	eb 09                	jmp    40000dc7 <strlen+0x19>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000dbe:	42                   	inc    %edx
40000dbf:	89 d0                	mov    %edx,%eax
40000dc1:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000dc5:	75 f7                	jne    40000dbe <strlen+0x10>
        ;
    return i;
}
40000dc7:	5d                   	pop    %ebp
40000dc8:	c3                   	ret    

40000dc9 <strcpy>:

char* strcpy(char* dest, const char* src) {
40000dc9:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000dca:	31 d2                	xor    %edx,%edx
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
40000dcc:	89 e5                	mov    %esp,%ebp
40000dce:	56                   	push   %esi
40000dcf:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000dd0:	31 c9                	xor    %ecx,%ecx
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
40000dd2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000dd5:	8b 45 08             	mov    0x8(%ebp),%eax

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000dd8:	85 db                	test   %ebx,%ebx
40000dda:	75 03                	jne    40000ddf <strcpy+0x16>
40000ddc:	eb 09                	jmp    40000de7 <strcpy+0x1e>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000dde:	42                   	inc    %edx
40000ddf:	89 d1                	mov    %edx,%ecx
40000de1:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000de5:	75 f7                	jne    40000dde <strcpy+0x15>

void* memcpy(void* dest, const void* src, size_t n) {
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000de7:	89 ce                	mov    %ecx,%esi
40000de9:	46                   	inc    %esi
40000dea:	74 0c                	je     40000df8 <strcpy+0x2f>
40000dec:	31 d2                	xor    %edx,%edx

    while (n--) {
        *(d++) = *(s++);
40000dee:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000df1:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000df4:	42                   	inc    %edx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000df5:	4e                   	dec    %esi
40000df6:	75 f6                	jne    40000dee <strcpy+0x25>
}

char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}
40000df8:	5b                   	pop    %ebx
40000df9:	5e                   	pop    %esi
40000dfa:	5d                   	pop    %ebp
40000dfb:	c3                   	ret    

40000dfc <strtoknc>:
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
40000dfc:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000dfd:	31 c0                	xor    %eax,%eax
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
40000dff:	89 e5                	mov    %esp,%ebp
40000e01:	57                   	push   %edi
40000e02:	56                   	push   %esi
40000e03:	53                   	push   %ebx
40000e04:	83 ec 04             	sub    $0x4,%esp
40000e07:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e0a:	8b 4d 08             	mov    0x8(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000e0d:	85 db                	test   %ebx,%ebx
40000e0f:	75 06                	jne    40000e17 <strtoknc+0x1b>
40000e11:	e9 83 00 00 00       	jmp    40000e99 <strtoknc+0x9d>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000e16:	40                   	inc    %eax
40000e17:	89 c7                	mov    %eax,%edi
40000e19:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e1d:	75 f7                	jne    40000e16 <strtoknc+0x1a>
char* strtoknc(char* str, const char* delimiters) {
    int i = 0;
    int len = strlen(delimiters);

    /* check in the delimiters */
    if (len == 0)
40000e1f:	85 c0                	test   %eax,%eax
40000e21:	74 76                	je     40000e99 <strtoknc+0x9d>
        return 0;

    /* if the original string has nothing left */
    if (!str && !sp)
40000e23:	85 c9                	test   %ecx,%ecx
40000e25:	75 0b                	jne    40000e32 <strtoknc+0x36>
40000e27:	83 3d 00 32 00 40 00 	cmpl   $0x0,0x40003200
40000e2e:	75 08                	jne    40000e38 <strtoknc+0x3c>
40000e30:	eb 67                	jmp    40000e99 <strtoknc+0x9d>
        return 0;

    /* initialize the sp during the first call */
    if (str) {
        sp = str;
40000e32:	89 0d 00 32 00 40    	mov    %ecx,0x40003200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
40000e38:	a1 00 32 00 40       	mov    0x40003200,%eax
40000e3d:	31 c9                	xor    %ecx,%ecx
    while (1) {
        for (i = 0; i < len; i++) {
40000e3f:	eb 0b                	jmp    40000e4c <strtoknc+0x50>
            if (*p_start == delimiters[i]) {
40000e41:	8a 10                	mov    (%eax),%dl
40000e43:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e46:	75 03                	jne    40000e4b <strtoknc+0x4f>
                p_start++;
40000e48:	40                   	inc    %eax
                break;
40000e49:	eb 05                	jmp    40000e50 <strtoknc+0x54>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
40000e4b:	41                   	inc    %ecx
40000e4c:	39 f9                	cmp    %edi,%ecx
40000e4e:	7c f1                	jl     40000e41 <strtoknc+0x45>
                p_start++;
                break;
            }
        }

        if (i == len) {
40000e50:	39 f9                	cmp    %edi,%ecx
40000e52:	75 e9                	jne    40000e3d <strtoknc+0x41>
            sp = p_start;
40000e54:	a3 00 32 00 40       	mov    %eax,0x40003200
            break;
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
40000e59:	80 38 00             	cmpb   $0x0,(%eax)
40000e5c:	75 28                	jne    40000e86 <strtoknc+0x8a>
        sp = NULL;
40000e5e:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
40000e65:	00 00 00 
40000e68:	eb 2f                	jmp    40000e99 <strtoknc+0x9d>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
            if (*sp == delimiters[i]) {
40000e6a:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000e6d:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e70:	75 05                	jne    40000e77 <strtoknc+0x7b>
                *sp = '\0';
40000e72:	c6 06 00             	movb   $0x0,(%esi)
                break;
40000e75:	eb 05                	jmp    40000e7c <strtoknc+0x80>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
40000e77:	41                   	inc    %ecx
40000e78:	39 f9                	cmp    %edi,%ecx
40000e7a:	7c ee                	jl     40000e6a <strtoknc+0x6e>
                *sp = '\0';
                break;
            }
        }

        sp++;
40000e7c:	ff 05 00 32 00 40    	incl   0x40003200
        if (i < len)
40000e82:	39 f9                	cmp    %edi,%ecx
40000e84:	7c 15                	jl     40000e9b <strtoknc+0x9f>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
40000e86:	8b 35 00 32 00 40    	mov    0x40003200,%esi
40000e8c:	8a 16                	mov    (%esi),%dl
40000e8e:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000e91:	84 d2                	test   %dl,%dl
40000e93:	74 06                	je     40000e9b <strtoknc+0x9f>
40000e95:	31 c9                	xor    %ecx,%ecx
40000e97:	eb df                	jmp    40000e78 <strtoknc+0x7c>
40000e99:	31 c0                	xor    %eax,%eax
        if (i < len)
            break;
    }

    return p_start;
}
40000e9b:	5a                   	pop    %edx
40000e9c:	5b                   	pop    %ebx
40000e9d:	5e                   	pop    %esi
40000e9e:	5f                   	pop    %edi
40000e9f:	5d                   	pop    %ebp
40000ea0:	c3                   	ret    

40000ea1 <strclone>:
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000ea1:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000ea2:	31 c0                	xor    %eax,%eax
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000ea4:	89 e5                	mov    %esp,%ebp
40000ea6:	56                   	push   %esi
40000ea7:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000ea8:	31 d2                	xor    %edx,%edx
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000eaa:	8b 5d 08             	mov    0x8(%ebp),%ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000ead:	85 db                	test   %ebx,%ebx
40000eaf:	75 03                	jne    40000eb4 <strclone+0x13>
40000eb1:	eb 09                	jmp    40000ebc <strclone+0x1b>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000eb3:	40                   	inc    %eax
40000eb4:	89 c2                	mov    %eax,%edx
40000eb6:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000eba:	75 f7                	jne    40000eb3 <strclone+0x12>
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000ebc:	83 ec 0c             	sub    $0xc,%esp
40000ebf:	42                   	inc    %edx
40000ec0:	52                   	push   %edx
40000ec1:	e8 af 01 00 00       	call   40001075 <malloc>
    strcpy(ret, str);
40000ec6:	59                   	pop    %ecx
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000ec7:	89 c6                	mov    %eax,%esi
    strcpy(ret, str);
40000ec9:	58                   	pop    %eax
40000eca:	53                   	push   %ebx
40000ecb:	56                   	push   %esi
40000ecc:	e8 f8 fe ff ff       	call   40000dc9 <strcpy>

    return ret;
}
40000ed1:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ed4:	89 f0                	mov    %esi,%eax
40000ed6:	5b                   	pop    %ebx
40000ed7:	5e                   	pop    %esi
40000ed8:	5d                   	pop    %ebp
40000ed9:	c3                   	ret    

40000eda <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
40000eda:	55                   	push   %ebp
40000edb:	89 e5                	mov    %esp,%ebp
40000edd:	56                   	push   %esi
40000ede:	53                   	push   %ebx
40000edf:	8b 75 08             	mov    0x8(%ebp),%esi
40000ee2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40000ee5:	85 f6                	test   %esi,%esi
40000ee7:	74 2e                	je     40000f17 <strtok+0x3d>
        if(fr != 0) {
40000ee9:	a1 04 32 00 40       	mov    0x40003204,%eax
40000eee:	85 c0                	test   %eax,%eax
40000ef0:	74 0c                	je     40000efe <strtok+0x24>
            free(fr);
40000ef2:	83 ec 0c             	sub    $0xc,%esp
40000ef5:	50                   	push   %eax
40000ef6:	e8 31 00 00 00       	call   40000f2c <free>
40000efb:	83 c4 10             	add    $0x10,%esp
        }
        fr = strclone(str);
40000efe:	83 ec 0c             	sub    $0xc,%esp
40000f01:	56                   	push   %esi
40000f02:	e8 9a ff ff ff       	call   40000ea1 <strclone>
        return strtoknc(fr, delimiters);
40000f07:	83 c4 10             	add    $0x10,%esp
char* strtok(char* str, const char* delimiters) {
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
        if(fr != 0) {
            free(fr);
        }
        fr = strclone(str);
40000f0a:	a3 04 32 00 40       	mov    %eax,0x40003204
        return strtoknc(fr, delimiters);
40000f0f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f12:	89 45 08             	mov    %eax,0x8(%ebp)
40000f15:	eb 0a                	jmp    40000f21 <strtok+0x47>
    }
    return strtoknc(0, delimiters);
40000f17:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000f1a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
40000f21:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000f24:	5b                   	pop    %ebx
40000f25:	5e                   	pop    %esi
40000f26:	5d                   	pop    %ebp
            free(fr);
        }
        fr = strclone(str);
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
40000f27:	e9 d0 fe ff ff       	jmp    40000dfc <strtoknc>

40000f2c <free>:
        cur = cur->next;
    }
    return 0;
}

void free(void* ptr) {
40000f2c:	55                   	push   %ebp
40000f2d:	89 e5                	mov    %esp,%ebp
40000f2f:	57                   	push   %edi
40000f30:	56                   	push   %esi
40000f31:	53                   	push   %ebx
40000f32:	83 ec 08             	sub    $0x8,%esp
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
40000f35:	8b 15 0c 32 00 40    	mov    0x4000320c,%edx
        cur = cur->next;
    }
    return 0;
}

void free(void* ptr) {
40000f3b:	8b 4d 08             	mov    0x8(%ebp),%ecx
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
40000f3e:	89 d0                	mov    %edx,%eax

    while (cur != 0) {
40000f40:	e9 b8 00 00 00       	jmp    40000ffd <free+0xd1>
        if (cur->address == (uint32_t) ptr) {
40000f45:	3b 48 04             	cmp    0x4(%eax),%ecx
40000f48:	0f 85 ac 00 00 00    	jne    40000ffa <free+0xce>
40000f4e:	31 c9                	xor    %ecx,%ecx
40000f50:	eb 23                	jmp    40000f75 <free+0x49>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000f52:	39 c2                	cmp    %eax,%edx
40000f54:	75 1a                	jne    40000f70 <free+0x44>
            if (last == 0) {
40000f56:	85 c9                	test   %ecx,%ecx
40000f58:	8b 50 08             	mov    0x8(%eax),%edx
40000f5b:	75 0e                	jne    40000f6b <free+0x3f>
                *root = cur->next;
40000f5d:	89 15 0c 32 00 40    	mov    %edx,0x4000320c
40000f63:	8b 0d 10 32 00 40    	mov    0x40003210,%ecx
40000f69:	eb 10                	jmp    40000f7b <free+0x4f>
                return;
            } else {
                last->next = cur->next;
40000f6b:	89 51 08             	mov    %edx,0x8(%ecx)
40000f6e:	eb f3                	jmp    40000f63 <free+0x37>
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000f70:	89 d1                	mov    %edx,%ecx
40000f72:	8b 52 08             	mov    0x8(%edx),%edx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000f75:	85 d2                	test   %edx,%edx
40000f77:	75 d9                	jne    40000f52 <free+0x26>
40000f79:	eb e8                	jmp    40000f63 <free+0x37>
40000f7b:	89 ca                	mov    %ecx,%edx
40000f7d:	eb 6d                	jmp    40000fec <free+0xc0>

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
        if (cur->address + cur->size == tf->address) {
40000f7f:	8b 5a 04             	mov    0x4(%edx),%ebx
40000f82:	8b 32                	mov    (%edx),%esi
40000f84:	8b 78 04             	mov    0x4(%eax),%edi
40000f87:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000f8a:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000f8d:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f90:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f93:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000f96:	75 18                	jne    40000fb0 <free+0x84>
            tf->address = cur->address;
40000f98:	89 58 04             	mov    %ebx,0x4(%eax)
40000f9b:	31 f6                	xor    %esi,%esi
40000f9d:	89 cb                	mov    %ecx,%ebx
40000f9f:	eb 09                	jmp    40000faa <free+0x7e>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000fa1:	39 d3                	cmp    %edx,%ebx
40000fa3:	74 29                	je     40000fce <free+0xa2>
                last->next = cur->next;
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000fa5:	89 de                	mov    %ebx,%esi
40000fa7:	8b 5b 08             	mov    0x8(%ebx),%ebx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000faa:	85 db                	test   %ebx,%ebx
40000fac:	75 f3                	jne    40000fa1 <free+0x75>
40000fae:	eb cb                	jmp    40000f7b <free+0x4f>
            tf->address = cur->address;
            remove_from_list(&first_free, cur);
            goto editedList;
        }

        if (cur->address == tf->address + tf->size) {
40000fb0:	8b 38                	mov    (%eax),%edi
40000fb2:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000fb5:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000fb8:	03 7d f0             	add    -0x10(%ebp),%edi
40000fbb:	39 fb                	cmp    %edi,%ebx
40000fbd:	75 2a                	jne    40000fe9 <free+0xbd>
            tf->size += cur->size;
40000fbf:	03 75 f0             	add    -0x10(%ebp),%esi
40000fc2:	89 cb                	mov    %ecx,%ebx
40000fc4:	89 30                	mov    %esi,(%eax)
40000fc6:	31 f6                	xor    %esi,%esi
40000fc8:	eb 19                	jmp    40000fe3 <free+0xb7>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000fca:	39 d3                	cmp    %edx,%ebx
40000fcc:	75 10                	jne    40000fde <free+0xb2>
            if (last == 0) {
40000fce:	85 f6                	test   %esi,%esi
40000fd0:	8b 53 08             	mov    0x8(%ebx),%edx
40000fd3:	75 04                	jne    40000fd9 <free+0xad>
                *root = cur->next;
40000fd5:	89 d1                	mov    %edx,%ecx
40000fd7:	eb a2                	jmp    40000f7b <free+0x4f>
                return;
            } else {
                last->next = cur->next;
40000fd9:	89 56 08             	mov    %edx,0x8(%esi)
40000fdc:	eb 9d                	jmp    40000f7b <free+0x4f>
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000fde:	89 de                	mov    %ebx,%esi
40000fe0:	8b 5b 08             	mov    0x8(%ebx),%ebx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000fe3:	85 db                	test   %ebx,%ebx
40000fe5:	75 e3                	jne    40000fca <free+0x9e>
40000fe7:	eb 92                	jmp    40000f7b <free+0x4f>
            remove_from_list(&first_free, cur);
            goto editedList;
        }

        last = cur;
        cur = cur->next;
40000fe9:	8b 52 08             	mov    0x8(%edx),%edx
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
40000fec:	85 d2                	test   %edx,%edx
40000fee:	75 8f                	jne    40000f7f <free+0x53>
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000ff0:	89 48 08             	mov    %ecx,0x8(%eax)
    *root = element;
40000ff3:	a3 10 32 00 40       	mov    %eax,0x40003210
    struct memory_node* cur = first_used;

    while (cur != 0) {
        if (cur->address == (uint32_t) ptr) {
            merge_into_frees(cur);
            break;
40000ff8:	eb 0b                	jmp    40001005 <free+0xd9>
        }
        last = cur;
        cur = cur->next;
40000ffa:	8b 40 08             	mov    0x8(%eax),%eax

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40000ffd:	85 c0                	test   %eax,%eax
40000fff:	0f 85 40 ff ff ff    	jne    40000f45 <free+0x19>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
40001005:	58                   	pop    %eax
40001006:	5a                   	pop    %edx
40001007:	5b                   	pop    %ebx
40001008:	5e                   	pop    %esi
40001009:	5f                   	pop    %edi
4000100a:	5d                   	pop    %ebp
4000100b:	c3                   	ret    

4000100c <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
4000100c:	55                   	push   %ebp
4000100d:	89 e5                	mov    %esp,%ebp
4000100f:	53                   	push   %ebx
40001010:	83 ec 04             	sub    $0x4,%esp
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
    if (*root == 0)
40001013:	a1 08 32 00 40       	mov    0x40003208,%eax
40001018:	eb 45                	jmp    4000105f <pop_unused_node+0x53>
    remove_from_list(root, pop);
    return pop;
}

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
4000101a:	83 ec 0c             	sub    $0xc,%esp
4000101d:	6a 01                	push   $0x1
4000101f:	e8 5b 02 00 00       	call   4000127f <vmm_alloc_cont>
    memset(new_nodes, 0, PAGESIZE);
40001024:	83 c4 0c             	add    $0xc,%esp
    remove_from_list(root, pop);
    return pop;
}

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
40001027:	89 c3                	mov    %eax,%ebx
    memset(new_nodes, 0, PAGESIZE);
40001029:	68 00 10 00 00       	push   $0x1000
4000102e:	6a 00                	push   $0x0
40001030:	50                   	push   %eax
40001031:	e8 a6 fc ff ff       	call   40000cdc <memset>
40001036:	8b 15 08 32 00 40    	mov    0x40003208,%edx
4000103c:	8d 43 0c             	lea    0xc(%ebx),%eax
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
4000103f:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40001045:	83 c4 10             	add    $0x10,%esp
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40001048:	89 50 08             	mov    %edx,0x8(%eax)
4000104b:	89 c2                	mov    %eax,%edx
4000104d:	83 c0 0c             	add    $0xc,%eax

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40001050:	39 c8                	cmp    %ecx,%eax
40001052:	75 f4                	jne    40001048 <pop_unused_node+0x3c>
40001054:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
4000105a:	a3 08 32 00 40       	mov    %eax,0x40003208
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
    if (*root == 0)
4000105f:	85 c0                	test   %eax,%eax
40001061:	74 b7                	je     4000101a <pop_unused_node+0xe>
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
            if (last == 0) {
                *root = cur->next;
40001063:	8b 50 08             	mov    0x8(%eax),%edx
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40001066:	85 c0                	test   %eax,%eax
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
            if (last == 0) {
                *root = cur->next;
40001068:	89 15 08 32 00 40    	mov    %edx,0x40003208
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
4000106e:	74 aa                	je     4000101a <pop_unused_node+0xe>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
}
40001070:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40001073:	c9                   	leave  
40001074:	c3                   	ret    

40001075 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
40001075:	55                   	push   %ebp
40001076:	89 e5                	mov    %esp,%ebp
40001078:	57                   	push   %edi
40001079:	56                   	push   %esi
4000107a:	53                   	push   %ebx
4000107b:	83 ec 1c             	sub    $0x1c,%esp
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;
4000107e:	a1 10 32 00 40       	mov    0x40003210,%eax
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
40001083:	8b 75 08             	mov    0x8(%ebp),%esi
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;
40001086:	89 c3                	mov    %eax,%ebx

    while (cur != 0) {
40001088:	eb 07                	jmp    40001091 <malloc+0x1c>
        if (cur->size >= size) {
4000108a:	39 33                	cmp    %esi,(%ebx)
4000108c:	73 0c                	jae    4000109a <malloc+0x25>
            break;
        }
        last = cur;
        cur = cur->next;
4000108e:	8b 5b 08             	mov    0x8(%ebx),%ebx

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40001091:	85 db                	test   %ebx,%ebx
40001093:	75 f5                	jne    4000108a <malloc+0x15>
40001095:	e9 93 00 00 00       	jmp    4000112d <malloc+0xb8>

        append_to_list(&first_used, fill);

        return (void*) fill->address;
    } else {
        uint32_t freesize = cur->size - size;
4000109a:	8b 3b                	mov    (%ebx),%edi

        cur->size = size;
4000109c:	31 d2                	xor    %edx,%edx

        append_to_list(&first_used, fill);

        return (void*) fill->address;
    } else {
        uint32_t freesize = cur->size - size;
4000109e:	29 f7                	sub    %esi,%edi

        cur->size = size;
400010a0:	89 33                	mov    %esi,(%ebx)
400010a2:	eb 4b                	jmp    400010ef <malloc+0x7a>

        fill->address = (uint32_t) addr;
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();
400010a4:	e8 63 ff ff ff       	call   4000100c <pop_unused_node>

            free->address = fill->address + fill->size;
400010a9:	8b 13                	mov    (%ebx),%edx
400010ab:	03 53 04             	add    0x4(%ebx),%edx
            free->size = pgs * PAGESIZE - size;
400010ae:	29 f7                	sub    %esi,%edi
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();

            free->address = fill->address + fill->size;
400010b0:	89 50 04             	mov    %edx,0x4(%eax)
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
400010b3:	8b 15 10 32 00 40    	mov    0x40003210,%edx
400010b9:	89 50 08             	mov    %edx,0x8(%eax)

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();

            free->address = fill->address + fill->size;
            free->size = pgs * PAGESIZE - size;
400010bc:	89 38                	mov    %edi,(%eax)
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
    *root = element;
400010be:	a3 10 32 00 40       	mov    %eax,0x40003210
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
400010c3:	a1 0c 32 00 40       	mov    0x4000320c,%eax
400010c8:	89 43 08             	mov    %eax,0x8(%ebx)
    *root = element;
400010cb:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
400010d1:	eb 4f                	jmp    40001122 <malloc+0xad>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
400010d3:	39 d8                	cmp    %ebx,%eax
400010d5:	75 13                	jne    400010ea <malloc+0x75>
            if (last == 0) {
400010d7:	85 d2                	test   %edx,%edx
400010d9:	8b 43 08             	mov    0x8(%ebx),%eax
400010dc:	75 07                	jne    400010e5 <malloc+0x70>
                *root = cur->next;
400010de:	a3 10 32 00 40       	mov    %eax,0x40003210
400010e3:	eb 0e                	jmp    400010f3 <malloc+0x7e>
                return;
            } else {
                last->next = cur->next;
400010e5:	89 42 08             	mov    %eax,0x8(%edx)
400010e8:	eb 09                	jmp    400010f3 <malloc+0x7e>
                return;
            }
        }
        last = cur;
        cur = cur->next;
400010ea:	89 c2                	mov    %eax,%edx
400010ec:	8b 40 08             	mov    0x8(%eax),%eax
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
400010ef:	85 c0                	test   %eax,%eax
400010f1:	75 e0                	jne    400010d3 <malloc+0x5e>
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
400010f3:	a1 0c 32 00 40       	mov    0x4000320c,%eax
        cur->size = size;

        remove_from_list(&first_free, cur);
        append_to_list(&first_used, cur);

        if (freesize > 0) {
400010f8:	85 ff                	test   %edi,%edi
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
400010fa:	89 43 08             	mov    %eax,0x8(%ebx)
    *root = element;
400010fd:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
        cur->size = size;

        remove_from_list(&first_free, cur);
        append_to_list(&first_used, cur);

        if (freesize > 0) {
40001103:	74 1d                	je     40001122 <malloc+0xad>
            struct memory_node* free = pop_unused_node();
40001105:	e8 02 ff ff ff       	call   4000100c <pop_unused_node>

            free->address = cur->address + cur->size;
4000110a:	8b 13                	mov    (%ebx),%edx
4000110c:	03 53 04             	add    0x4(%ebx),%edx
4000110f:	89 50 04             	mov    %edx,0x4(%eax)
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40001112:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001118:	89 50 08             	mov    %edx,0x8(%eax)

        if (freesize > 0) {
            struct memory_node* free = pop_unused_node();

            free->address = cur->address + cur->size;
            free->size = freesize;
4000111b:	89 38                	mov    %edi,(%eax)
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
    *root = element;
4000111d:	a3 10 32 00 40       	mov    %eax,0x40003210
            free->size = freesize;

            append_to_list(&first_free, free);
        }

        return (void*) cur->address;
40001122:	8b 43 04             	mov    0x4(%ebx),%eax
    }
}
40001125:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001128:	5b                   	pop    %ebx
40001129:	5e                   	pop    %esi
4000112a:	5f                   	pop    %edi
4000112b:	5d                   	pop    %ebp
4000112c:	c3                   	ret    
    }

    if (cur == 0) {
        uint32_t pgs = size / PAGESIZE;

        if ((size % PAGESIZE) != 0)
4000112d:	89 f0                	mov    %esi,%eax
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
        uint32_t pgs = size / PAGESIZE;
4000112f:	89 f7                	mov    %esi,%edi
40001131:	c1 ef 0c             	shr    $0xc,%edi

        if ((size % PAGESIZE) != 0)
40001134:	25 ff 0f 00 00       	and    $0xfff,%eax
            pgs++;
40001139:	83 f8 01             	cmp    $0x1,%eax
4000113c:	83 df ff             	sbb    $0xffffffff,%edi

        void* addr = vmm_alloc_cont(pgs);
4000113f:	83 ec 0c             	sub    $0xc,%esp
40001142:	57                   	push   %edi
40001143:	e8 37 01 00 00       	call   4000127f <vmm_alloc_cont>
        struct memory_node* fill = pop_unused_node();

        fill->address = (uint32_t) addr;
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
40001148:	c1 e7 0c             	shl    $0xc,%edi
        if ((size % PAGESIZE) != 0)
            pgs++;

        void* addr = vmm_alloc_cont(pgs);

        struct memory_node* fill = pop_unused_node();
4000114b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000114e:	e8 b9 fe ff ff       	call   4000100c <pop_unused_node>

        fill->address = (uint32_t) addr;
40001153:	8b 55 e4             	mov    -0x1c(%ebp),%edx
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
40001156:	83 c4 10             	add    $0x10,%esp
        if ((size % PAGESIZE) != 0)
            pgs++;

        void* addr = vmm_alloc_cont(pgs);

        struct memory_node* fill = pop_unused_node();
40001159:	89 c3                	mov    %eax,%ebx

        fill->address = (uint32_t) addr;
4000115b:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
4000115e:	89 30                	mov    %esi,(%eax)

        if (pgs * PAGESIZE > size) {
40001160:	39 f7                	cmp    %esi,%edi
40001162:	0f 86 5b ff ff ff    	jbe    400010c3 <malloc+0x4e>
40001168:	e9 37 ff ff ff       	jmp    400010a4 <malloc+0x2f>

4000116d <realloc>:
    }

    return p;
}

void* realloc(void* ptr, size_t size) {
4000116d:	55                   	push   %ebp
4000116e:	89 e5                	mov    %esp,%ebp
40001170:	56                   	push   %esi
40001171:	53                   	push   %ebx
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
40001172:	8b 1d 0c 32 00 40    	mov    0x4000320c,%ebx
    }

    return p;
}

void* realloc(void* ptr, size_t size) {
40001178:	8b 55 08             	mov    0x8(%ebp),%edx
4000117b:	8b 45 0c             	mov    0xc(%ebp),%eax
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000117e:	eb 3e                	jmp    400011be <realloc+0x51>
        if (cur->address == (uint32_t) ptr) {
40001180:	3b 53 04             	cmp    0x4(%ebx),%edx
40001183:	75 36                	jne    400011bb <realloc+0x4e>
            if (size == 0) {
40001185:	85 c0                	test   %eax,%eax
40001187:	75 0b                	jne    40001194 <realloc+0x27>
                free(ptr);
40001189:	52                   	push   %edx
4000118a:	31 f6                	xor    %esi,%esi
4000118c:	e8 9b fd ff ff       	call   40000f2c <free>
                return 0;
40001191:	5b                   	pop    %ebx
40001192:	eb 30                	jmp    400011c4 <realloc+0x57>
            } else {
                void* new = malloc(size);
40001194:	83 ec 0c             	sub    $0xc,%esp
40001197:	50                   	push   %eax
40001198:	e8 d8 fe ff ff       	call   40001075 <malloc>
                memcpy(new, (void*) cur->address, cur->size);
4000119d:	83 c4 0c             	add    $0xc,%esp
        if (cur->address == (uint32_t) ptr) {
            if (size == 0) {
                free(ptr);
                return 0;
            } else {
                void* new = malloc(size);
400011a0:	89 c6                	mov    %eax,%esi
                memcpy(new, (void*) cur->address, cur->size);
400011a2:	ff 33                	pushl  (%ebx)
400011a4:	ff 73 04             	pushl  0x4(%ebx)
400011a7:	50                   	push   %eax
400011a8:	e8 4b fb ff ff       	call   40000cf8 <memcpy>
                free((void*) cur->address);
400011ad:	59                   	pop    %ecx
400011ae:	ff 73 04             	pushl  0x4(%ebx)
400011b1:	e8 76 fd ff ff       	call   40000f2c <free>

                return new;
400011b6:	83 c4 10             	add    $0x10,%esp
400011b9:	eb 09                	jmp    400011c4 <realloc+0x57>
            }
        }
        last = cur;
        cur = cur->next;
400011bb:	8b 5b 08             	mov    0x8(%ebx),%ebx

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
400011be:	85 db                	test   %ebx,%ebx
400011c0:	75 be                	jne    40001180 <realloc+0x13>
400011c2:	31 f6                	xor    %esi,%esi
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
}
400011c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
400011c7:	89 f0                	mov    %esi,%eax
400011c9:	5b                   	pop    %ebx
400011ca:	5e                   	pop    %esi
400011cb:	5d                   	pop    %ebp
400011cc:	c3                   	ret    

400011cd <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
400011cd:	55                   	push   %ebp
400011ce:	89 e5                	mov    %esp,%ebp
400011d0:	56                   	push   %esi
400011d1:	53                   	push   %ebx
400011d2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    size_t gsize = num * size;
    void* p = malloc(gsize);
400011d5:	83 ec 0c             	sub    $0xc,%esp
        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
    size_t gsize = num * size;
400011d8:	0f af 5d 08          	imul   0x8(%ebp),%ebx
    void* p = malloc(gsize);
400011dc:	53                   	push   %ebx
400011dd:	e8 93 fe ff ff       	call   40001075 <malloc>

    if (p != 0) {
400011e2:	83 c4 10             	add    $0x10,%esp
    }
}

void* calloc(size_t num, size_t size) {
    size_t gsize = num * size;
    void* p = malloc(gsize);
400011e5:	89 c6                	mov    %eax,%esi

    if (p != 0) {
400011e7:	85 c0                	test   %eax,%eax
400011e9:	74 0d                	je     400011f8 <calloc+0x2b>
        memset(p, 0, gsize);
400011eb:	50                   	push   %eax
400011ec:	53                   	push   %ebx
400011ed:	6a 00                	push   $0x0
400011ef:	56                   	push   %esi
400011f0:	e8 e7 fa ff ff       	call   40000cdc <memset>
400011f5:	83 c4 10             	add    $0x10,%esp
    }

    return p;
}
400011f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
400011fb:	89 f0                	mov    %esi,%eax
400011fd:	5b                   	pop    %ebx
400011fe:	5e                   	pop    %esi
400011ff:	5d                   	pop    %ebp
40001200:	c3                   	ret    
40001201:	00 00                	add    %al,(%eax)
	...

40001204 <print_memstat>:
  };
  
  syscall(&state);  
}

void print_memstat() {
40001204:	55                   	push   %ebp
40001205:	89 e5                	mov    %esp,%ebp
40001207:	83 ec 34             	sub    $0x34,%esp
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
4000120a:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = 0,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
4000120d:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
  
  syscall(&state);  
40001214:	50                   	push   %eax
    .ebx = 0,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001215:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000121c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001223:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000122a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001231:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
40001238:	e8 7f 00 00 00       	call   400012bc <syscall>
4000123d:	83 c4 10             	add    $0x10,%esp
}
40001240:	c9                   	leave  
40001241:	c3                   	ret    

40001242 <vmm_free>:
  syscall(&state);  
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
40001242:	55                   	push   %ebp
40001243:	89 e5                	mov    %esp,%ebp
40001245:	83 ec 34             	sub    $0x34,%esp
    .ebx = (uint32_t)vaddr,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001248:	8b 45 08             	mov    0x8(%ebp),%eax
4000124b:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
40001252:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);  
40001255:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001258:	50                   	push   %eax
    .ebx = (uint32_t)vaddr,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001259:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001260:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001267:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000126e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
40001275:	e8 42 00 00 00       	call   400012bc <syscall>
4000127a:	83 c4 10             	add    $0x10,%esp
}
4000127d:	c9                   	leave  
4000127e:	c3                   	ret    

4000127f <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
4000127f:	55                   	push   %ebp
40001280:	89 e5                	mov    %esp,%ebp
40001282:	83 ec 34             	sub    $0x34,%esp
    .ebx = cont,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001285:	8b 45 08             	mov    0x8(%ebp),%eax
40001288:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
4000128f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);  
40001292:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001295:	50                   	push   %eax
    .ebx = cont,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001296:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000129d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400012a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400012ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
400012b2:	e8 05 00 00 00       	call   400012bc <syscall>
  
  return (void*)state.eax;
}
400012b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400012ba:	c9                   	leave  
400012bb:	c3                   	ret    

400012bc <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
400012bc:	55                   	push   %ebp
400012bd:	89 e5                	mov    %esp,%ebp
400012bf:	57                   	push   %edi
400012c0:	56                   	push   %esi
400012c1:	53                   	push   %ebx
400012c2:	83 ec 10             	sub    $0x10,%esp
	asm("int $0x30"
400012c5:	8b 55 08             	mov    0x8(%ebp),%edx
400012c8:	8b 45 08             	mov    0x8(%ebp),%eax
400012cb:	8b 72 0c             	mov    0xc(%edx),%esi
400012ce:	8b 00                	mov    (%eax),%eax
400012d0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
400012d3:	8b 5a 04             	mov    0x4(%edx),%ebx
400012d6:	8b 4a 08             	mov    0x8(%edx),%ecx
400012d9:	8b 72 10             	mov    0x10(%edx),%esi
400012dc:	8b 7a 14             	mov    0x14(%edx),%edi
400012df:	89 45 ec             	mov    %eax,-0x14(%ebp)
400012e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400012e5:	cd 30                	int    $0x30
400012e7:	89 55 e8             	mov    %edx,-0x18(%ebp)
400012ea:	8b 55 08             	mov    0x8(%ebp),%edx
400012ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
400012f0:	89 02                	mov    %eax,(%edx)
400012f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
400012f5:	89 5a 04             	mov    %ebx,0x4(%edx)
400012f8:	89 4a 08             	mov    %ecx,0x8(%edx)
400012fb:	89 42 0c             	mov    %eax,0xc(%edx)
400012fe:	89 72 10             	mov    %esi,0x10(%edx)
40001301:	89 7a 14             	mov    %edi,0x14(%edx)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
40001304:	83 c4 10             	add    $0x10,%esp
40001307:	5b                   	pop    %ebx
40001308:	5e                   	pop    %esi
40001309:	5f                   	pop    %edi
4000130a:	5d                   	pop    %ebp
4000130b:	c3                   	ret    
