
../../initrfs/ibin/init:     file format elf32-i386


Disassembly of section .text:

40000000 <waitResp>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
#include "stdlib.h"

static void waitResp(HANDLE cntrl) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 28             	sub    $0x28,%esp
    char resp = 0;
40000006:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

    while(resp != 'K') {
4000000a:	eb 1a                	jmp    40000026 <waitResp+0x26>
        fread(cntrl, &resp, sizeof(char));
4000000c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000013:	00 
40000014:	8d 45 f7             	lea    -0x9(%ebp),%eax
40000017:	89 44 24 04          	mov    %eax,0x4(%esp)
4000001b:	8b 45 08             	mov    0x8(%ebp),%eax
4000001e:	89 04 24             	mov    %eax,(%esp)
40000021:	e8 1b 09 00 00       	call   40000941 <fread>
#include "stdlib.h"

static void waitResp(HANDLE cntrl) {
    char resp = 0;

    while(resp != 'K') {
40000026:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
4000002a:	3c 4b                	cmp    $0x4b,%al
4000002c:	75 de                	jne    4000000c <waitResp+0xc>
        fread(cntrl, &resp, sizeof(char));
    }
}
4000002e:	c9                   	leave  
4000002f:	c3                   	ret    

40000030 <hdlrx21>:

static void hdlrx21(uint32_t irq) {
40000030:	55                   	push   %ebp
40000031:	89 e5                	mov    %esp,%ebp
40000033:	83 ec 18             	sub    $0x18,%esp
    printf("IRQ 0x21!\n");
40000036:	c7 04 24 00 20 00 40 	movl   $0x40002000,(%esp)
4000003d:	e8 1d 0d 00 00       	call   40000d5f <printf>
}
40000042:	c9                   	leave  
40000043:	c3                   	ret    

40000044 <main>:

int main(int argc, char* args[])
{
40000044:	55                   	push   %ebp
40000045:	89 e5                	mov    %esp,%ebp
40000047:	83 e4 f0             	and    $0xfffffff0,%esp
4000004a:	83 ec 20             	sub    $0x20,%esp
    printf("[ibin/init] Init process started... :) Thats so good!\n");
4000004d:	c7 04 24 0c 20 00 40 	movl   $0x4000200c,(%esp)
40000054:	e8 06 0d 00 00       	call   40000d5f <printf>
    printf("[ibin/init] Switching into TTY to VGA mode.\nIf you see this something probably went wrong.\n");
40000059:	c7 04 24 44 20 00 40 	movl   $0x40002044,(%esp)
40000060:	e8 fa 0c 00 00       	call   40000d5f <printf>

    HANDLE cntrl = fmkfifo("/var/cntrl/init");
40000065:	c7 04 24 a0 20 00 40 	movl   $0x400020a0,(%esp)
4000006c:	e8 32 09 00 00       	call   400009a3 <fmkfifo>
40000071:	89 44 24 1c          	mov    %eax,0x1c(%esp)

    texec("/ibin/ttytovga", 0);
40000075:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
4000007c:	00 
4000007d:	c7 04 24 b0 20 00 40 	movl   $0x400020b0,(%esp)
40000084:	e8 b0 04 00 00       	call   40000539 <texec>
    waitResp(cntrl);
40000089:	8b 44 24 1c          	mov    0x1c(%esp),%eax
4000008d:	89 04 24             	mov    %eax,(%esp)
40000090:	e8 6b ff ff ff       	call   40000000 <waitResp>

    setstdout("/dev/tty0");
40000095:	c7 04 24 bf 20 00 40 	movl   $0x400020bf,(%esp)
4000009c:	e8 8a 06 00 00       	call   4000072b <setstdout>
    setstdin ("/dev/keyboard");
400000a1:	c7 04 24 c9 20 00 40 	movl   $0x400020c9,(%esp)
400000a8:	e8 99 06 00 00       	call   40000746 <setstdin>
    setstderr("/dev/tty0");
400000ad:	c7 04 24 bf 20 00 40 	movl   $0x400020bf,(%esp)
400000b4:	e8 a8 06 00 00       	call   40000761 <setstderr>

    printf("[init] now working on tty0\n");
400000b9:	c7 04 24 d7 20 00 40 	movl   $0x400020d7,(%esp)
400000c0:	e8 9a 0c 00 00       	call   40000d5f <printf>

    printf("[init] executing virtual file drivers\n");
400000c5:	c7 04 24 f4 20 00 40 	movl   $0x400020f4,(%esp)
400000cc:	e8 8e 0c 00 00       	call   40000d5f <printf>
    texec("/ibin/urnd_prov", 0);
400000d1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400000d8:	00 
400000d9:	c7 04 24 1b 21 00 40 	movl   $0x4000211b,(%esp)
400000e0:	e8 54 04 00 00       	call   40000539 <texec>
    waitResp(cntrl);
400000e5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
400000e9:	89 04 24             	mov    %eax,(%esp)
400000ec:	e8 0f ff ff ff       	call   40000000 <waitResp>

    printf("[init] switching to shell\n");
400000f1:	c7 04 24 2b 21 00 40 	movl   $0x4000212b,(%esp)
400000f8:	e8 62 0c 00 00       	call   40000d5f <printf>

    char* testparams[] = {
400000fd:	c7 44 24 10 46 21 00 	movl   $0x40002146,0x10(%esp)
40000104:	40 
40000105:	c7 44 24 14 4c 21 00 	movl   $0x4000214c,0x14(%esp)
4000010c:	40 
4000010d:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
40000114:	00 
        "test1",
        "test2",
        0
    };

    texec("/ibin/csh", 0);
40000115:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
4000011c:	00 
4000011d:	c7 04 24 52 21 00 40 	movl   $0x40002152,(%esp)
40000124:	e8 10 04 00 00       	call   40000539 <texec>

    register_irq_handler(0x21, hdlrx21);
40000129:	c7 44 24 04 30 00 00 	movl   $0x40000030,0x4(%esp)
40000130:	40 
40000131:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
40000138:	e8 f5 00 00 00       	call   40000232 <register_irq_handler>

    while(1);
4000013d:	eb fe                	jmp    4000013d <main+0xf9>

4000013f <return_rpc>:
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
4000013f:	55                   	push   %ebp
40000140:	89 e5                	mov    %esp,%ebp
40000142:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000145:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .eax = 30,
      .ebx = (uint32_t)code,
4000014c:	8b 45 08             	mov    0x8(%ebp),%eax
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
    struct regstate state = {
4000014f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000152:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000159:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000160:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000167:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000016e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000171:	89 04 24             	mov    %eax,(%esp)
40000174:	e8 13 16 00 00       	call   4000178c <syscall>

    while(1);
40000179:	eb fe                	jmp    40000179 <return_rpc+0x3a>

4000017b <call_rpc>:
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
4000017b:	55                   	push   %ebp
4000017c:	89 e5                	mov    %esp,%ebp
4000017e:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000181:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
40000188:	8b 45 08             	mov    0x8(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000018b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000018e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000191:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000194:	8b 45 10             	mov    0x10(%ebp),%eax
40000197:	89 45 ec             	mov    %eax,-0x14(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
4000019a:	8b 45 14             	mov    0x14(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000019d:	89 45 f0             	mov    %eax,-0x10(%ebp)
400001a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };

    syscall(&state);
400001a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001aa:	89 04 24             	mov    %eax,(%esp)
400001ad:	e8 da 15 00 00       	call   4000178c <syscall>

    return state.eax;
400001b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400001b5:	c9                   	leave  
400001b6:	c3                   	ret    

400001b7 <fetch_rpc_data>:

void fetch_rpc_data(void* dest) {
400001b7:	55                   	push   %ebp
400001b8:	89 e5                	mov    %esp,%ebp
400001ba:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400001bd:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
      .eax = 33,
      .ebx = (uint32_t)dest,
400001c4:	8b 45 08             	mov    0x8(%ebp),%eax

    return state.eax;
}

void fetch_rpc_data(void* dest) {
    struct regstate state = {
400001c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001ca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400001d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400001e6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001e9:	89 04 24             	mov    %eax,(%esp)
400001ec:	e8 9b 15 00 00       	call   4000178c <syscall>
}
400001f1:	c9                   	leave  
400001f2:	c3                   	ret    

400001f3 <register_irq_rpc_syscall>:

static uint32_t register_irq_rpc_syscall(uint32_t irq) {
400001f3:	55                   	push   %ebp
400001f4:	89 e5                	mov    %esp,%ebp
400001f6:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400001f9:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40000200:	8b 45 08             	mov    0x8(%ebp),%eax
40000203:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000206:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000020d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000214:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000021b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000222:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000225:	89 04 24             	mov    %eax,(%esp)
40000228:	e8 5f 15 00 00       	call   4000178c <syscall>

    return state.eax;
4000022d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000230:	c9                   	leave  
40000231:	c3                   	ret    

40000232 <register_irq_handler>:

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
40000232:	55                   	push   %ebp
40000233:	89 e5                	mov    %esp,%ebp
40000235:	83 ec 18             	sub    $0x18,%esp
    if(register_irq_rpc_syscall(irq)) {
40000238:	8b 45 08             	mov    0x8(%ebp),%eax
4000023b:	89 04 24             	mov    %eax,(%esp)
4000023e:	e8 b0 ff ff ff       	call   400001f3 <register_irq_rpc_syscall>
40000243:	85 c0                	test   %eax,%eax
40000245:	74 14                	je     4000025b <register_irq_handler+0x29>
        irq_handlers[irq] = handler;
40000247:	8b 45 08             	mov    0x8(%ebp),%eax
4000024a:	8b 55 0c             	mov    0xc(%ebp),%edx
4000024d:	89 14 85 00 30 00 40 	mov    %edx,0x40003000(,%eax,4)
        return 1;
40000254:	b8 01 00 00 00       	mov    $0x1,%eax
40000259:	eb 05                	jmp    40000260 <register_irq_handler+0x2e>
    }
    return 0;
4000025b:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000260:	c9                   	leave  
40000261:	c3                   	ret    

40000262 <_handle_rpc>:

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
40000262:	55                   	push   %ebp
40000263:	89 e5                	mov    %esp,%ebp
40000265:	83 ec 28             	sub    $0x28,%esp
    void* localData = malloc(datasize);
40000268:	8b 45 10             	mov    0x10(%ebp),%eax
4000026b:	89 04 24             	mov    %eax,(%esp)
4000026e:	e8 dc 11 00 00       	call   4000144f <malloc>
40000273:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fetch_rpc_data(localData);
40000276:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000279:	89 04 24             	mov    %eax,(%esp)
4000027c:	e8 36 ff ff ff       	call   400001b7 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
40000281:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000285:	75 2c                	jne    400002b3 <_handle_rpc+0x51>
        if(irq_handlers[funcID]) {
40000287:	8b 45 0c             	mov    0xc(%ebp),%eax
4000028a:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
40000291:	85 c0                	test   %eax,%eax
40000293:	74 1e                	je     400002b3 <_handle_rpc+0x51>
            irq_handlers[funcID](funcID);
40000295:	8b 45 0c             	mov    0xc(%ebp),%eax
40000298:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
4000029f:	8b 55 0c             	mov    0xc(%ebp),%edx
400002a2:	89 14 24             	mov    %edx,(%esp)
400002a5:	ff d0                	call   *%eax
            return_rpc(0);
400002a7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400002ae:	e8 8c fe ff ff       	call   4000013f <return_rpc>
        }
    }

    printf("Unhandled RPC!\n");
400002b3:	c7 04 24 5c 21 00 40 	movl   $0x4000215c,(%esp)
400002ba:	e8 a0 0a 00 00       	call   40000d5f <printf>

    free(localData);
400002bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
400002c2:	89 04 24             	mov    %eax,(%esp)
400002c5:	e8 c2 13 00 00       	call   4000168c <free>
    return_rpc(0);
400002ca:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400002d1:	e8 69 fe ff ff       	call   4000013f <return_rpc>
}
400002d6:	c9                   	leave  
400002d7:	c3                   	ret    

400002d8 <set_rpc_handler>:

void set_rpc_handler() {
400002d8:	55                   	push   %ebp
400002d9:	89 e5                	mov    %esp,%ebp
400002db:	83 ec 38             	sub    $0x38,%esp
    memset(irq_handlers, 0, sizeof(irq_handlers));
400002de:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
400002e5:	00 
400002e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400002ed:	00 
400002ee:	c7 04 24 00 30 00 40 	movl   $0x40003000,(%esp)
400002f5:	e8 d5 0b 00 00       	call   40000ecf <memset>

    struct regstate state = {
400002fa:	c7 45 e0 20 00 00 00 	movl   $0x20,-0x20(%ebp)
      .eax = 32,
      .ebx = (uint32_t)_handle_rpc,
40000301:	b8 62 02 00 40       	mov    $0x40000262,%eax
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));

    struct regstate state = {
40000306:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000309:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000310:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000317:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000031e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000325:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000328:	89 04 24             	mov    %eax,(%esp)
4000032b:	e8 5c 14 00 00       	call   4000178c <syscall>
}
40000330:	c9                   	leave  
40000331:	c3                   	ret    

40000332 <getargs>:
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
40000332:	55                   	push   %ebp
40000333:	89 e5                	mov    %esp,%ebp
40000335:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000338:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000033f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000346:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000034d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000354:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000035b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000362:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000365:	89 04 24             	mov    %eax,(%esp)
40000368:	e8 1f 14 00 00       	call   4000178c <syscall>

    return state.eax;
4000036d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000370:	c9                   	leave  
40000371:	c3                   	ret    

40000372 <_start>:

void _start() {
40000372:	55                   	push   %ebp
40000373:	89 e5                	mov    %esp,%ebp
40000375:	83 ec 28             	sub    $0x28,%esp
  char** args = (char**) getargs();
40000378:	e8 b5 ff ff ff       	call   40000332 <getargs>
4000037d:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int argc = 0;
40000380:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if(args != 0) {
40000387:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
4000038b:	74 1b                	je     400003a8 <_start+0x36>
      while(args[argc] != 0) {
4000038d:	eb 04                	jmp    40000393 <_start+0x21>
          argc++;
4000038f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000393:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000396:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
4000039d:	8b 45 f0             	mov    -0x10(%ebp),%eax
400003a0:	01 d0                	add    %edx,%eax
400003a2:	8b 00                	mov    (%eax),%eax
400003a4:	85 c0                	test   %eax,%eax
400003a6:	75 e7                	jne    4000038f <_start+0x1d>
          argc++;
      }
  }

  set_rpc_handler();
400003a8:	e8 2b ff ff ff       	call   400002d8 <set_rpc_handler>

  int result = main(argc, args);
400003ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
400003b0:	89 44 24 04          	mov    %eax,0x4(%esp)
400003b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
400003b7:	89 04 24             	mov    %eax,(%esp)
400003ba:	e8 85 fc ff ff       	call   40000044 <main>
400003bf:	89 45 ec             	mov    %eax,-0x14(%ebp)

  exit(result);
400003c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
400003c5:	89 04 24             	mov    %eax,(%esp)
400003c8:	e8 40 00 00 00       	call   4000040d <exit>
}
400003cd:	c9                   	leave  
400003ce:	c3                   	ret    

400003cf <yield>:

void yield() {
400003cf:	55                   	push   %ebp
400003d0:	89 e5                	mov    %esp,%ebp
400003d2:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003d5:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
400003dc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400003e3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400003ff:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000402:	89 04 24             	mov    %eax,(%esp)
40000405:	e8 82 13 00 00       	call   4000178c <syscall>

    return;
4000040a:	90                   	nop
}
4000040b:	c9                   	leave  
4000040c:	c3                   	ret    

4000040d <exit>:

void exit(int returncode) {
4000040d:	55                   	push   %ebp
4000040e:	89 e5                	mov    %esp,%ebp
40000410:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000413:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
4000041a:	8b 45 08             	mov    0x8(%ebp),%eax
4000041d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000420:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000427:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000042e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000435:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000043c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000043f:	89 04 24             	mov    %eax,(%esp)
40000442:	e8 45 13 00 00       	call   4000178c <syscall>

    while(1) {
      printf("error\n");
40000447:	c7 04 24 6c 21 00 40 	movl   $0x4000216c,(%esp)
4000044e:	e8 0c 09 00 00       	call   40000d5f <printf>
    }
40000453:	eb f2                	jmp    40000447 <exit+0x3a>

40000455 <getExecPath>:
}

void getExecPath(char* dest) {
40000455:	55                   	push   %ebp
40000456:	89 e5                	mov    %esp,%ebp
40000458:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000045b:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
40000462:	8b 45 08             	mov    0x8(%ebp),%eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000465:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000468:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000046f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000476:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000047d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000484:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000487:	89 04 24             	mov    %eax,(%esp)
4000048a:	e8 fd 12 00 00       	call   4000178c <syscall>
}
4000048f:	c9                   	leave  
40000490:	c3                   	ret    

40000491 <changeExecPath>:

int changeExecPath(char* path) {
40000491:	55                   	push   %ebp
40000492:	89 e5                	mov    %esp,%ebp
40000494:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000497:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
        .eax = 7,
        .ebx = (uint32_t)path,
4000049e:	8b 45 08             	mov    0x8(%ebp),%eax

    syscall(&state);
}

int changeExecPath(char* path) {
    struct regstate state = {
400004a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400004a4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400004c0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004c3:	89 04 24             	mov    %eax,(%esp)
400004c6:	e8 c1 12 00 00       	call   4000178c <syscall>

    return state.eax;
400004cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400004ce:	c9                   	leave  
400004cf:	c3                   	ret    

400004d0 <cd>:

void cd(char* path) {
400004d0:	55                   	push   %ebp
400004d1:	89 e5                	mov    %esp,%ebp
400004d3:	83 ec 18             	sub    $0x18,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
400004d6:	8b 45 08             	mov    0x8(%ebp),%eax
400004d9:	89 04 24             	mov    %eax,(%esp)
400004dc:	e8 b0 ff ff ff       	call   40000491 <changeExecPath>
400004e1:	85 c0                	test   %eax,%eax
400004e3:	75 14                	jne    400004f9 <cd+0x29>
400004e5:	e8 48 01 00 00       	call   40000632 <getLastVFSErr>
400004ea:	89 44 24 04          	mov    %eax,0x4(%esp)
400004ee:	8b 45 08             	mov    0x8(%ebp),%eax
400004f1:	89 04 24             	mov    %eax,(%esp)
400004f4:	e8 7a 00 00 00       	call   40000573 <printFilesystemError>
}
400004f9:	c9                   	leave  
400004fa:	c3                   	ret    

400004fb <exec>:

int exec(char* path, char** args) {
400004fb:	55                   	push   %ebp
400004fc:	89 e5                	mov    %esp,%ebp
400004fe:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000501:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
40000508:	8b 45 08             	mov    0x8(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
4000050b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
4000050e:	8b 45 0c             	mov    0xc(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
40000511:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000514:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000051b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000522:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000529:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000052c:	89 04 24             	mov    %eax,(%esp)
4000052f:	e8 58 12 00 00       	call   4000178c <syscall>

    return state.eax;
40000534:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000537:	c9                   	leave  
40000538:	c3                   	ret    

40000539 <texec>:

int texec(char* path, char** args) {
40000539:	55                   	push   %ebp
4000053a:	89 e5                	mov    %esp,%ebp
4000053c:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = exec(path, args);
4000053f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000542:	89 44 24 04          	mov    %eax,0x4(%esp)
40000546:	8b 45 08             	mov    0x8(%ebp),%eax
40000549:	89 04 24             	mov    %eax,(%esp)
4000054c:	e8 aa ff ff ff       	call   400004fb <exec>
40000551:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!res) {
40000554:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000558:	75 14                	jne    4000056e <texec+0x35>
        printFilesystemError(path, getLastVFSErr());
4000055a:	e8 d3 00 00 00       	call   40000632 <getLastVFSErr>
4000055f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000563:	8b 45 08             	mov    0x8(%ebp),%eax
40000566:	89 04 24             	mov    %eax,(%esp)
40000569:	e8 05 00 00 00       	call   40000573 <printFilesystemError>
    }

    return res;
4000056e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000571:	c9                   	leave  
40000572:	c3                   	ret    

40000573 <printFilesystemError>:

void printFilesystemError(char* path, uint32_t code) {
40000573:	55                   	push   %ebp
40000574:	89 e5                	mov    %esp,%ebp
40000576:	83 ec 18             	sub    $0x18,%esp
    switch(code) {
40000579:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000057d:	0f 87 8d 00 00 00    	ja     40000610 <printFilesystemError+0x9d>
40000583:	8b 45 0c             	mov    0xc(%ebp),%eax
40000586:	c1 e0 02             	shl    $0x2,%eax
40000589:	05 40 22 00 40       	add    $0x40002240,%eax
4000058e:	8b 00                	mov    (%eax),%eax
40000590:	ff e0                	jmp    *%eax
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
40000592:	8b 45 08             	mov    0x8(%ebp),%eax
40000595:	89 44 24 04          	mov    %eax,0x4(%esp)
40000599:	c7 04 24 73 21 00 40 	movl   $0x40002173,(%esp)
400005a0:	e8 ba 07 00 00       	call   40000d5f <printf>
        break;
400005a5:	eb 7d                	jmp    40000624 <printFilesystemError+0xb1>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
400005a7:	8b 45 08             	mov    0x8(%ebp),%eax
400005aa:	89 44 24 04          	mov    %eax,0x4(%esp)
400005ae:	c7 04 24 88 21 00 40 	movl   $0x40002188,(%esp)
400005b5:	e8 a5 07 00 00       	call   40000d5f <printf>
        break;
400005ba:	eb 68                	jmp    40000624 <printFilesystemError+0xb1>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
400005bc:	8b 45 08             	mov    0x8(%ebp),%eax
400005bf:	89 44 24 04          	mov    %eax,0x4(%esp)
400005c3:	c7 04 24 a8 21 00 40 	movl   $0x400021a8,(%esp)
400005ca:	e8 90 07 00 00       	call   40000d5f <printf>
        break;
400005cf:	eb 53                	jmp    40000624 <printFilesystemError+0xb1>
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
400005d1:	8b 45 08             	mov    0x8(%ebp),%eax
400005d4:	89 44 24 04          	mov    %eax,0x4(%esp)
400005d8:	c7 04 24 d2 21 00 40 	movl   $0x400021d2,(%esp)
400005df:	e8 7b 07 00 00       	call   40000d5f <printf>
        break;
400005e4:	eb 3e                	jmp    40000624 <printFilesystemError+0xb1>
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
400005e6:	8b 45 08             	mov    0x8(%ebp),%eax
400005e9:	89 44 24 04          	mov    %eax,0x4(%esp)
400005ed:	c7 04 24 e8 21 00 40 	movl   $0x400021e8,(%esp)
400005f4:	e8 66 07 00 00       	call   40000d5f <printf>
        break;
400005f9:	eb 29                	jmp    40000624 <printFilesystemError+0xb1>
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
400005fb:	8b 45 08             	mov    0x8(%ebp),%eax
400005fe:	89 44 24 04          	mov    %eax,0x4(%esp)
40000602:	c7 04 24 23 22 00 40 	movl   $0x40002223,(%esp)
40000609:	e8 51 07 00 00       	call   40000d5f <printf>
        break;
4000060e:	eb 14                	jmp    40000624 <printFilesystemError+0xb1>
    default:
        printf("%s: WTF", path);
40000610:	8b 45 08             	mov    0x8(%ebp),%eax
40000613:	89 44 24 04          	mov    %eax,0x4(%esp)
40000617:	c7 04 24 36 22 00 40 	movl   $0x40002236,(%esp)
4000061e:	e8 3c 07 00 00       	call   40000d5f <printf>
        break;
40000623:	90                   	nop

    }
    printf("\n");
40000624:	c7 04 24 3e 22 00 40 	movl   $0x4000223e,(%esp)
4000062b:	e8 2f 07 00 00       	call   40000d5f <printf>
}
40000630:	c9                   	leave  
40000631:	c3                   	ret    

40000632 <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
40000632:	55                   	push   %ebp
40000633:	89 e5                	mov    %esp,%ebp
40000635:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000638:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
4000063f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000646:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000064d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000654:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000065b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000662:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000665:	89 04 24             	mov    %eax,(%esp)
40000668:	e8 1f 11 00 00       	call   4000178c <syscall>

    return state.eax;
4000066d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000670:	c9                   	leave  
40000671:	c3                   	ret    

40000672 <getpmhandle>:

static HANDLE getpmhandle   (uint32_t pmid) {
40000672:	55                   	push   %ebp
40000673:	89 e5                	mov    %esp,%ebp
40000675:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000678:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
4000067f:	8b 45 08             	mov    0x8(%ebp),%eax
40000682:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000685:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000068c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000693:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000069a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400006a1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006a4:	89 04 24             	mov    %eax,(%esp)
400006a7:	e8 e0 10 00 00       	call   4000178c <syscall>

    return (HANDLE)state.eax;
400006ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400006af:	c9                   	leave  
400006b0:	c3                   	ret    

400006b1 <getstdout>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
400006b1:	55                   	push   %ebp
400006b2:	89 e5                	mov    %esp,%ebp
400006b4:	83 ec 18             	sub    $0x18,%esp
400006b7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400006be:	e8 af ff ff ff       	call   40000672 <getpmhandle>
400006c3:	c9                   	leave  
400006c4:	c3                   	ret    

400006c5 <getstdin>:
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
400006c5:	55                   	push   %ebp
400006c6:	89 e5                	mov    %esp,%ebp
400006c8:	83 ec 18             	sub    $0x18,%esp
400006cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400006d2:	e8 9b ff ff ff       	call   40000672 <getpmhandle>
400006d7:	c9                   	leave  
400006d8:	c3                   	ret    

400006d9 <getstderr>:
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };
400006d9:	55                   	push   %ebp
400006da:	89 e5                	mov    %esp,%ebp
400006dc:	83 ec 18             	sub    $0x18,%esp
400006df:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
400006e6:	e8 87 ff ff ff       	call   40000672 <getpmhandle>
400006eb:	c9                   	leave  
400006ec:	c3                   	ret    

400006ed <fopenpmhandle>:

int fopenpmhandle (uint32_t pmid, char* path) {
400006ed:	55                   	push   %ebp
400006ee:	89 e5                	mov    %esp,%ebp
400006f0:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400006f3:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400006fa:	8b 45 08             	mov    0x8(%ebp),%eax
400006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 21,
      .ebx = pmid,
      .ecx = (uint32_t)path,
40000700:	8b 45 0c             	mov    0xc(%ebp),%eax
static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
    struct regstate state = {
40000703:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000706:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000070d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000071b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000071e:	89 04 24             	mov    %eax,(%esp)
40000721:	e8 66 10 00 00       	call   4000178c <syscall>

    return (HANDLE)state.eax;
40000726:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000729:	c9                   	leave  
4000072a:	c3                   	ret    

4000072b <setstdout>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
4000072b:	55                   	push   %ebp
4000072c:	89 e5                	mov    %esp,%ebp
4000072e:	83 ec 18             	sub    $0x18,%esp
40000731:	8b 45 08             	mov    0x8(%ebp),%eax
40000734:	89 44 24 04          	mov    %eax,0x4(%esp)
40000738:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000073f:	e8 a9 ff ff ff       	call   400006ed <fopenpmhandle>
40000744:	c9                   	leave  
40000745:	c3                   	ret    

40000746 <setstdin>:
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
40000746:	55                   	push   %ebp
40000747:	89 e5                	mov    %esp,%ebp
40000749:	83 ec 18             	sub    $0x18,%esp
4000074c:	8b 45 08             	mov    0x8(%ebp),%eax
4000074f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000753:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
4000075a:	e8 8e ff ff ff       	call   400006ed <fopenpmhandle>
4000075f:	c9                   	leave  
40000760:	c3                   	ret    

40000761 <setstderr>:
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
40000761:	55                   	push   %ebp
40000762:	89 e5                	mov    %esp,%ebp
40000764:	83 ec 18             	sub    $0x18,%esp
40000767:	8b 45 08             	mov    0x8(%ebp),%eax
4000076a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000076e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000775:	e8 73 ff ff ff       	call   400006ed <fopenpmhandle>
4000077a:	c9                   	leave  
4000077b:	c3                   	ret    

4000077c <fopen>:

HANDLE fopen(char* path, uint32_t mode) {
4000077c:	55                   	push   %ebp
4000077d:	89 e5                	mov    %esp,%ebp
4000077f:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000782:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
      .eax = 10,
      .ebx = (uint32_t)path,
40000789:	8b 45 08             	mov    0x8(%ebp),%eax
int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
    struct regstate state = {
4000078c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000078f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000792:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000795:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000079c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400007aa:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007ad:	89 04 24             	mov    %eax,(%esp)
400007b0:	e8 d7 0f 00 00       	call   4000178c <syscall>

    return (HANDLE)state.eax;
400007b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400007b8:	c9                   	leave  
400007b9:	c3                   	ret    

400007ba <fclose>:

int fclose(uint32_t handle) {
400007ba:	55                   	push   %ebp
400007bb:	89 e5                	mov    %esp,%ebp
400007bd:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400007c0:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400007c7:	8b 45 08             	mov    0x8(%ebp),%eax
400007ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007cd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400007e9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007ec:	89 04 24             	mov    %eax,(%esp)
400007ef:	e8 98 0f 00 00       	call   4000178c <syscall>

    return (int)state.eax;
400007f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400007f7:	c9                   	leave  
400007f8:	c3                   	ret    

400007f9 <printrwerror>:

static void printrwerror(HANDLE handle, uint32_t res) {
400007f9:	55                   	push   %ebp
400007fa:	89 e5                	mov    %esp,%ebp
400007fc:	83 ec 18             	sub    $0x18,%esp
    if(res == RW_ERR_VFS) {
400007ff:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
40000803:	75 13                	jne    40000818 <printrwerror+0x1f>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
40000805:	8b 45 08             	mov    0x8(%ebp),%eax
40000808:	89 44 24 04          	mov    %eax,0x4(%esp)
4000080c:	c7 04 24 58 22 00 40 	movl   $0x40002258,(%esp)
40000813:	e8 47 05 00 00       	call   40000d5f <printf>
    }

    if(res == RW_ERR_DRIVER) {
40000818:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
4000081c:	75 13                	jne    40000831 <printrwerror+0x38>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
4000081e:	8b 45 08             	mov    0x8(%ebp),%eax
40000821:	89 44 24 04          	mov    %eax,0x4(%esp)
40000825:	c7 04 24 70 22 00 40 	movl   $0x40002270,(%esp)
4000082c:	e8 2e 05 00 00       	call   40000d5f <printf>
    }

    if(res == RW_NOFM_READ) {
40000831:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
40000835:	75 13                	jne    4000084a <printrwerror+0x51>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
40000837:	8b 45 08             	mov    0x8(%ebp),%eax
4000083a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000083e:	c7 04 24 8c 22 00 40 	movl   $0x4000228c,(%esp)
40000845:	e8 15 05 00 00       	call   40000d5f <printf>
    }

    if(res == RW_NOFM_WRITE) {
4000084a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000084e:	75 13                	jne    40000863 <printrwerror+0x6a>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
40000850:	8b 45 08             	mov    0x8(%ebp),%eax
40000853:	89 44 24 04          	mov    %eax,0x4(%esp)
40000857:	c7 04 24 b8 22 00 40 	movl   $0x400022b8,(%esp)
4000085e:	e8 fc 04 00 00       	call   40000d5f <printf>
    }
}
40000863:	c9                   	leave  
40000864:	c3                   	ret    

40000865 <frwrite>:

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
40000865:	55                   	push   %ebp
40000866:	89 e5                	mov    %esp,%ebp
40000868:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000086b:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
40000872:	8b 45 08             	mov    0x8(%ebp),%eax
40000875:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 12,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
40000878:	8b 45 0c             	mov    0xc(%ebp),%eax
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
    struct regstate state = {
4000087b:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000087e:	8b 45 10             	mov    0x10(%ebp),%eax
40000881:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000884:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000088b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000892:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000895:	89 04 24             	mov    %eax,(%esp)
40000898:	e8 ef 0e 00 00       	call   4000178c <syscall>

    return (int)state.eax;
4000089d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400008a0:	c9                   	leave  
400008a1:	c3                   	ret    

400008a2 <fwrite>:

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
400008a2:	55                   	push   %ebp
400008a3:	89 e5                	mov    %esp,%ebp
400008a5:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frwrite(handle, src, length);
400008a8:	8b 45 10             	mov    0x10(%ebp),%eax
400008ab:	89 44 24 08          	mov    %eax,0x8(%esp)
400008af:	8b 45 0c             	mov    0xc(%ebp),%eax
400008b2:	89 44 24 04          	mov    %eax,0x4(%esp)
400008b6:	8b 45 08             	mov    0x8(%ebp),%eax
400008b9:	89 04 24             	mov    %eax,(%esp)
400008bc:	e8 a4 ff ff ff       	call   40000865 <frwrite>
400008c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
400008c4:	eb 21                	jmp    400008e7 <fwrite+0x45>
        yield();
400008c6:	e8 04 fb ff ff       	call   400003cf <yield>
        res = frwrite(handle, src, length);
400008cb:	8b 45 10             	mov    0x10(%ebp),%eax
400008ce:	89 44 24 08          	mov    %eax,0x8(%esp)
400008d2:	8b 45 0c             	mov    0xc(%ebp),%eax
400008d5:	89 44 24 04          	mov    %eax,0x4(%esp)
400008d9:	8b 45 08             	mov    0x8(%ebp),%eax
400008dc:	89 04 24             	mov    %eax,(%esp)
400008df:	e8 81 ff ff ff       	call   40000865 <frwrite>
400008e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
400008e7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
400008eb:	74 d9                	je     400008c6 <fwrite+0x24>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
400008ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
400008f0:	89 44 24 04          	mov    %eax,0x4(%esp)
400008f4:	8b 45 08             	mov    0x8(%ebp),%eax
400008f7:	89 04 24             	mov    %eax,(%esp)
400008fa:	e8 fa fe ff ff       	call   400007f9 <printrwerror>

    return res;
400008ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000902:	c9                   	leave  
40000903:	c3                   	ret    

40000904 <frread>:

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
40000904:	55                   	push   %ebp
40000905:	89 e5                	mov    %esp,%ebp
40000907:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000090a:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
40000911:	8b 45 08             	mov    0x8(%ebp),%eax
40000914:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 13,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
40000917:	8b 45 0c             	mov    0xc(%ebp),%eax

    return res;
}

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
    struct regstate state = {
4000091a:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000091d:	8b 45 10             	mov    0x10(%ebp),%eax
40000920:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000923:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000092a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000931:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000934:	89 04 24             	mov    %eax,(%esp)
40000937:	e8 50 0e 00 00       	call   4000178c <syscall>

    return (int)state.eax;
4000093c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000093f:	c9                   	leave  
40000940:	c3                   	ret    

40000941 <fread>:

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000941:	55                   	push   %ebp
40000942:	89 e5                	mov    %esp,%ebp
40000944:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frread(handle, dest, length);
40000947:	8b 45 10             	mov    0x10(%ebp),%eax
4000094a:	89 44 24 08          	mov    %eax,0x8(%esp)
4000094e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000951:	89 44 24 04          	mov    %eax,0x4(%esp)
40000955:	8b 45 08             	mov    0x8(%ebp),%eax
40000958:	89 04 24             	mov    %eax,(%esp)
4000095b:	e8 a4 ff ff ff       	call   40000904 <frread>
40000960:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000963:	eb 21                	jmp    40000986 <fread+0x45>
        yield();
40000965:	e8 65 fa ff ff       	call   400003cf <yield>
        res = frread(handle, dest, length);
4000096a:	8b 45 10             	mov    0x10(%ebp),%eax
4000096d:	89 44 24 08          	mov    %eax,0x8(%esp)
40000971:	8b 45 0c             	mov    0xc(%ebp),%eax
40000974:	89 44 24 04          	mov    %eax,0x4(%esp)
40000978:	8b 45 08             	mov    0x8(%ebp),%eax
4000097b:	89 04 24             	mov    %eax,(%esp)
4000097e:	e8 81 ff ff ff       	call   40000904 <frread>
40000983:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000986:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
4000098a:	74 d9                	je     40000965 <fread+0x24>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
4000098c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000098f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000993:	8b 45 08             	mov    0x8(%ebp),%eax
40000996:	89 04 24             	mov    %eax,(%esp)
40000999:	e8 5b fe ff ff       	call   400007f9 <printrwerror>

    return res;
4000099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
400009a1:	c9                   	leave  
400009a2:	c3                   	ret    

400009a3 <fmkfifo>:

HANDLE fmkfifo(char* path) {
400009a3:	55                   	push   %ebp
400009a4:	89 e5                	mov    %esp,%ebp
400009a6:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400009a9:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
      .eax = 14,
      .ebx = (uint32_t)path,
400009b0:	8b 45 08             	mov    0x8(%ebp),%eax

    return res;
}

HANDLE fmkfifo(char* path) {
    struct regstate state = {
400009b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400009bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400009c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400009d2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400009d5:	89 04 24             	mov    %eax,(%esp)
400009d8:	e8 af 0d 00 00       	call   4000178c <syscall>

    return (HANDLE)state.eax;
400009dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400009e0:	c9                   	leave  
400009e1:	c3                   	ret    

400009e2 <resolveHandle>:

static HANDLE resolveHandle(HANDLE hdl) {
400009e2:	55                   	push   %ebp
400009e3:	89 e5                	mov    %esp,%ebp
400009e5:	83 ec 18             	sub    $0x18,%esp
    if(hdl < 0xFFF) {
400009e8:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
400009ef:	77 0e                	ja     400009ff <resolveHandle+0x1d>
        hdl = getpmhandle(hdl);
400009f1:	8b 45 08             	mov    0x8(%ebp),%eax
400009f4:	89 04 24             	mov    %eax,(%esp)
400009f7:	e8 76 fc ff ff       	call   40000672 <getpmhandle>
400009fc:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    return hdl;
400009ff:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000a02:	c9                   	leave  
40000a03:	c3                   	ret    

40000a04 <fgetc>:

char fgetc(HANDLE hdl) {
40000a04:	55                   	push   %ebp
40000a05:	89 e5                	mov    %esp,%ebp
40000a07:	83 ec 28             	sub    $0x28,%esp
    hdl = resolveHandle(hdl);
40000a0a:	8b 45 08             	mov    0x8(%ebp),%eax
40000a0d:	89 04 24             	mov    %eax,(%esp)
40000a10:	e8 cd ff ff ff       	call   400009e2 <resolveHandle>
40000a15:	89 45 08             	mov    %eax,0x8(%ebp)
    char in = 0;
40000a18:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
40000a1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000a20:	74 1a                	je     40000a3c <fgetc+0x38>
        fread(hdl, &in, sizeof(char));
40000a22:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000a29:	00 
40000a2a:	8d 45 f7             	lea    -0x9(%ebp),%eax
40000a2d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000a31:	8b 45 08             	mov    0x8(%ebp),%eax
40000a34:	89 04 24             	mov    %eax,(%esp)
40000a37:	e8 05 ff ff ff       	call   40000941 <fread>
    }
    return in;
40000a3c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
40000a40:	c9                   	leave  
40000a41:	c3                   	ret    

40000a42 <fgets>:

char* fgets(char* str, int num, HANDLE hdl) {
40000a42:	55                   	push   %ebp
40000a43:	89 e5                	mov    %esp,%ebp
40000a45:	53                   	push   %ebx
40000a46:	83 ec 24             	sub    $0x24,%esp
    for(int n = 0; n < (num - 1); n++) {
40000a49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a50:	eb 3d                	jmp    40000a8f <fgets+0x4d>
        str[n] = fgetc(hdl);
40000a52:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a55:	8b 45 08             	mov    0x8(%ebp),%eax
40000a58:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
40000a5b:	8b 45 10             	mov    0x10(%ebp),%eax
40000a5e:	89 04 24             	mov    %eax,(%esp)
40000a61:	e8 9e ff ff ff       	call   40000a04 <fgetc>
40000a66:	88 03                	mov    %al,(%ebx)
        if(str[n] == 0 || str[n] == '\0') {
40000a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a6b:	8b 45 08             	mov    0x8(%ebp),%eax
40000a6e:	01 d0                	add    %edx,%eax
40000a70:	0f b6 00             	movzbl (%eax),%eax
40000a73:	84 c0                	test   %al,%al
40000a75:	74 0f                	je     40000a86 <fgets+0x44>
40000a77:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a7a:	8b 45 08             	mov    0x8(%ebp),%eax
40000a7d:	01 d0                	add    %edx,%eax
40000a7f:	0f b6 00             	movzbl (%eax),%eax
40000a82:	84 c0                	test   %al,%al
40000a84:	75 05                	jne    40000a8b <fgets+0x49>
            return str;
40000a86:	8b 45 08             	mov    0x8(%ebp),%eax
40000a89:	eb 1d                	jmp    40000aa8 <fgets+0x66>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
40000a8b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
40000a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a92:	83 e8 01             	sub    $0x1,%eax
40000a95:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40000a98:	7f b8                	jg     40000a52 <fgets+0x10>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
40000a9a:	8b 55 0c             	mov    0xc(%ebp),%edx
40000a9d:	8b 45 08             	mov    0x8(%ebp),%eax
40000aa0:	01 d0                	add    %edx,%eax
40000aa2:	c6 00 00             	movb   $0x0,(%eax)
    return str;
40000aa5:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000aa8:	83 c4 24             	add    $0x24,%esp
40000aab:	5b                   	pop    %ebx
40000aac:	5d                   	pop    %ebp
40000aad:	c3                   	ret    

40000aae <getc>:

char getc(HANDLE hdl) {
40000aae:	55                   	push   %ebp
40000aaf:	89 e5                	mov    %esp,%ebp
40000ab1:	83 ec 18             	sub    $0x18,%esp
    return fgetc(hdl);
40000ab4:	8b 45 08             	mov    0x8(%ebp),%eax
40000ab7:	89 04 24             	mov    %eax,(%esp)
40000aba:	e8 45 ff ff ff       	call   40000a04 <fgetc>
}
40000abf:	c9                   	leave  
40000ac0:	c3                   	ret    

40000ac1 <getchar>:

char getchar() {
40000ac1:	55                   	push   %ebp
40000ac2:	89 e5                	mov    %esp,%ebp
40000ac4:	83 ec 18             	sub    $0x18,%esp
    return fgetc(PMID_STDIN);
40000ac7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000ace:	e8 31 ff ff ff       	call   40000a04 <fgetc>
}
40000ad3:	c9                   	leave  
40000ad4:	c3                   	ret    

40000ad5 <getln>:

char* getln(char* str) {
40000ad5:	55                   	push   %ebp
40000ad6:	89 e5                	mov    %esp,%ebp
40000ad8:	83 ec 28             	sub    $0x28,%esp
    uint32_t index = 0;
40000adb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char lastChar = 0;
40000ae2:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)

    while((lastChar = fgetc(PMID_STDIN))) {
40000ae6:	eb 5b                	jmp    40000b43 <getln+0x6e>
        if(lastChar == '\n') {
40000ae8:	80 7d f3 0a          	cmpb   $0xa,-0xd(%ebp)
40000aec:	75 0e                	jne    40000afc <getln+0x27>
            putchar('\n');
40000aee:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
40000af5:	e8 b4 00 00 00       	call   40000bae <putchar>
            break;
40000afa:	eb 5c                	jmp    40000b58 <getln+0x83>
        }

        if(lastChar == 8) {
40000afc:	80 7d f3 08          	cmpb   $0x8,-0xd(%ebp)
40000b00:	75 23                	jne    40000b25 <getln+0x50>
            if(index != 0) {
40000b02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000b06:	74 10                	je     40000b18 <getln+0x43>
                index--;
40000b08:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
                putchar(8);
40000b0c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
40000b13:	e8 96 00 00 00       	call   40000bae <putchar>
            }
            str[index] = 0;
40000b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b1b:	8b 55 08             	mov    0x8(%ebp),%edx
40000b1e:	01 d0                	add    %edx,%eax
40000b20:	c6 00 00             	movb   $0x0,(%eax)
            continue;
40000b23:	eb 1e                	jmp    40000b43 <getln+0x6e>
        }

        str[index] = lastChar;
40000b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b28:	8b 55 08             	mov    0x8(%ebp),%edx
40000b2b:	01 c2                	add    %eax,%edx
40000b2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
40000b31:	88 02                	mov    %al,(%edx)
        putchar(lastChar);
40000b33:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000b37:	89 04 24             	mov    %eax,(%esp)
40000b3a:	e8 6f 00 00 00       	call   40000bae <putchar>

        index++;
40000b3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000b43:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000b4a:	e8 b5 fe ff ff       	call   40000a04 <fgetc>
40000b4f:	88 45 f3             	mov    %al,-0xd(%ebp)
40000b52:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
40000b56:	75 90                	jne    40000ae8 <getln+0x13>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b5b:	8b 55 08             	mov    0x8(%ebp),%edx
40000b5e:	01 d0                	add    %edx,%eax
40000b60:	c6 00 00             	movb   $0x0,(%eax)

    return str;
40000b63:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000b66:	c9                   	leave  
40000b67:	c3                   	ret    

40000b68 <kputc>:

static int kputc(char c) {
40000b68:	55                   	push   %ebp
40000b69:	89 e5                	mov    %esp,%ebp
40000b6b:	83 ec 38             	sub    $0x38,%esp
40000b6e:	8b 45 08             	mov    0x8(%ebp),%eax
40000b71:	88 45 d4             	mov    %al,-0x2c(%ebp)
  struct regstate state = {
40000b74:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
    .eax = 201,
    .ebx = (uint32_t)c,
40000b7b:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax

    return str;
}

static int kputc(char c) {
  struct regstate state = {
40000b7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b82:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b90:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000b9e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000ba1:	89 04 24             	mov    %eax,(%esp)
40000ba4:	e8 e3 0b 00 00       	call   4000178c <syscall>
  
  return state.eax;
40000ba9:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000bac:	c9                   	leave  
40000bad:	c3                   	ret    

40000bae <putchar>:

int putchar(char c) {
40000bae:	55                   	push   %ebp
40000baf:	89 e5                	mov    %esp,%ebp
40000bb1:	83 ec 18             	sub    $0x18,%esp
40000bb4:	8b 45 08             	mov    0x8(%ebp),%eax
40000bb7:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, PMID_STDOUT);
40000bba:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000bbe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000bc5:	00 
40000bc6:	89 04 24             	mov    %eax,(%esp)
40000bc9:	e8 23 00 00 00       	call   40000bf1 <fputc>
}
40000bce:	c9                   	leave  
40000bcf:	c3                   	ret    

40000bd0 <putc>:

int putc(char c, HANDLE hdl) {
40000bd0:	55                   	push   %ebp
40000bd1:	89 e5                	mov    %esp,%ebp
40000bd3:	83 ec 18             	sub    $0x18,%esp
40000bd6:	8b 45 08             	mov    0x8(%ebp),%eax
40000bd9:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, hdl);
40000bdc:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000be0:	8b 55 0c             	mov    0xc(%ebp),%edx
40000be3:	89 54 24 04          	mov    %edx,0x4(%esp)
40000be7:	89 04 24             	mov    %eax,(%esp)
40000bea:	e8 02 00 00 00       	call   40000bf1 <fputc>
}
40000bef:	c9                   	leave  
40000bf0:	c3                   	ret    

40000bf1 <fputc>:

int fputc(char c, HANDLE hdl) {
40000bf1:	55                   	push   %ebp
40000bf2:	89 e5                	mov    %esp,%ebp
40000bf4:	83 ec 18             	sub    $0x18,%esp
40000bf7:	8b 45 08             	mov    0x8(%ebp),%eax
40000bfa:	88 45 f4             	mov    %al,-0xc(%ebp)
    hdl = resolveHandle(hdl);
40000bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c00:	89 04 24             	mov    %eax,(%esp)
40000c03:	e8 da fd ff ff       	call   400009e2 <resolveHandle>
40000c08:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000c0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000c0f:	74 1c                	je     40000c2d <fputc+0x3c>
        return fwrite(hdl, &c, sizeof(char));
40000c11:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000c18:	00 
40000c19:	8d 45 f4             	lea    -0xc(%ebp),%eax
40000c1c:	89 44 24 04          	mov    %eax,0x4(%esp)
40000c20:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c23:	89 04 24             	mov    %eax,(%esp)
40000c26:	e8 77 fc ff ff       	call   400008a2 <fwrite>
40000c2b:	eb 0f                	jmp    40000c3c <fputc+0x4b>
    }
    return kputc(c);
40000c2d:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
40000c31:	0f be c0             	movsbl %al,%eax
40000c34:	89 04 24             	mov    %eax,(%esp)
40000c37:	e8 2c ff ff ff       	call   40000b68 <kputc>
}
40000c3c:	c9                   	leave  
40000c3d:	c3                   	ret    

40000c3e <kputs>:

static int kputs(const char* cp) {
40000c3e:	55                   	push   %ebp
40000c3f:	89 e5                	mov    %esp,%ebp
40000c41:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40000c44:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
    .eax = 202,
    .ebx = (uint32_t)cp,
40000c4b:	8b 45 08             	mov    0x8(%ebp),%eax
    }
    return kputc(c);
}

static int kputs(const char* cp) {
  struct regstate state = {
40000c4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c51:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000c58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000c5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000c66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000c6d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000c70:	89 04 24             	mov    %eax,(%esp)
40000c73:	e8 14 0b 00 00       	call   4000178c <syscall>
  
  return state.eax;
40000c78:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000c7b:	c9                   	leave  
40000c7c:	c3                   	ret    

40000c7d <puts>:

int puts(const char* c) {
40000c7d:	55                   	push   %ebp
40000c7e:	89 e5                	mov    %esp,%ebp
40000c80:	83 ec 18             	sub    $0x18,%esp
    return fputs(c, PMID_STDOUT);
40000c83:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000c8a:	00 
40000c8b:	8b 45 08             	mov    0x8(%ebp),%eax
40000c8e:	89 04 24             	mov    %eax,(%esp)
40000c91:	e8 02 00 00 00       	call   40000c98 <fputs>
}
40000c96:	c9                   	leave  
40000c97:	c3                   	ret    

40000c98 <fputs>:

int fputs(const char* c, HANDLE hdl) {
40000c98:	55                   	push   %ebp
40000c99:	89 e5                	mov    %esp,%ebp
40000c9b:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ca1:	89 04 24             	mov    %eax,(%esp)
40000ca4:	e8 39 fd ff ff       	call   400009e2 <resolveHandle>
40000ca9:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000cac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000cb0:	74 23                	je     40000cd5 <fputs+0x3d>
        return fwrite(hdl, c, strlen(c));
40000cb2:	8b 45 08             	mov    0x8(%ebp),%eax
40000cb5:	89 04 24             	mov    %eax,(%esp)
40000cb8:	e8 68 03 00 00       	call   40001025 <strlen>
40000cbd:	89 44 24 08          	mov    %eax,0x8(%esp)
40000cc1:	8b 45 08             	mov    0x8(%ebp),%eax
40000cc4:	89 44 24 04          	mov    %eax,0x4(%esp)
40000cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ccb:	89 04 24             	mov    %eax,(%esp)
40000cce:	e8 cf fb ff ff       	call   400008a2 <fwrite>
40000cd3:	eb 0b                	jmp    40000ce0 <fputs+0x48>
    }
    return kputs(c);
40000cd5:	8b 45 08             	mov    0x8(%ebp),%eax
40000cd8:	89 04 24             	mov    %eax,(%esp)
40000cdb:	e8 5e ff ff ff       	call   40000c3e <kputs>
}
40000ce0:	c9                   	leave  
40000ce1:	c3                   	ret    

40000ce2 <putn>:

static int putn(unsigned long x, int base)
{
40000ce2:	55                   	push   %ebp
40000ce3:	89 e5                	mov    %esp,%ebp
40000ce5:	53                   	push   %ebx
40000ce6:	83 ec 64             	sub    $0x64,%esp
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
40000ce9:	c7 45 ec e4 22 00 40 	movl   $0x400022e4,-0x14(%ebp)
  char* p;
  int wrt = 0;
40000cf0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  if (base > 36) {
40000cf7:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000cfb:	7e 07                	jle    40000d04 <putn+0x22>
    return 0;
40000cfd:	b8 00 00 00 00       	mov    $0x0,%eax
40000d02:	eb 55                	jmp    40000d59 <putn+0x77>
  }

  p = buf + 64;
40000d04:	8d 45 ab             	lea    -0x55(%ebp),%eax
40000d07:	83 c0 40             	add    $0x40,%eax
40000d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  *p = '\0';
40000d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d10:	c6 00 00             	movb   $0x0,(%eax)
  do {
    wrt++;
40000d13:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    *--p = digits[x % base];
40000d17:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
40000d1b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000d1e:	8b 45 08             	mov    0x8(%ebp),%eax
40000d21:	ba 00 00 00 00       	mov    $0x0,%edx
40000d26:	f7 f1                	div    %ecx
40000d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000d2b:	01 d0                	add    %edx,%eax
40000d2d:	0f b6 10             	movzbl (%eax),%edx
40000d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d33:	88 10                	mov    %dl,(%eax)
    x /= base;
40000d35:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d38:	8b 45 08             	mov    0x8(%ebp),%eax
40000d3b:	ba 00 00 00 00       	mov    $0x0,%edx
40000d40:	f7 f3                	div    %ebx
40000d42:	89 45 08             	mov    %eax,0x8(%ebp)
  } while (x);
40000d45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000d49:	75 c8                	jne    40000d13 <putn+0x31>
  puts(p);
40000d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d4e:	89 04 24             	mov    %eax,(%esp)
40000d51:	e8 27 ff ff ff       	call   40000c7d <puts>
  
  return wrt;
40000d56:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40000d59:	83 c4 64             	add    $0x64,%esp
40000d5c:	5b                   	pop    %ebx
40000d5d:	5d                   	pop    %ebp
40000d5e:	c3                   	ret    

40000d5f <printf>:

int printf(const char* fmt, ...)
{
40000d5f:	55                   	push   %ebp
40000d60:	89 e5                	mov    %esp,%ebp
40000d62:	83 ec 38             	sub    $0x38,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;
	int wrt = 0;
40000d65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  va_start(ap, fmt);
40000d6c:	8d 45 0c             	lea    0xc(%ebp),%eax
40000d6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while (*fmt) {
40000d72:	e9 42 01 00 00       	jmp    40000eb9 <printf+0x15a>
    if (*fmt == '%') {
40000d77:	8b 45 08             	mov    0x8(%ebp),%eax
40000d7a:	0f b6 00             	movzbl (%eax),%eax
40000d7d:	3c 25                	cmp    $0x25,%al
40000d7f:	0f 85 1c 01 00 00    	jne    40000ea1 <printf+0x142>
      fmt++;
40000d85:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
40000d89:	8b 45 08             	mov    0x8(%ebp),%eax
40000d8c:	0f b6 00             	movzbl (%eax),%eax
40000d8f:	0f be c0             	movsbl %al,%eax
40000d92:	83 f8 64             	cmp    $0x64,%eax
40000d95:	74 68                	je     40000dff <printf+0xa0>
40000d97:	83 f8 64             	cmp    $0x64,%eax
40000d9a:	7f 1f                	jg     40000dbb <printf+0x5c>
40000d9c:	83 f8 25             	cmp    $0x25,%eax
40000d9f:	0f 84 c5 00 00 00    	je     40000e6a <printf+0x10b>
40000da5:	83 f8 63             	cmp    $0x63,%eax
40000da8:	0f 84 9d 00 00 00    	je     40000e4b <printf+0xec>
40000dae:	85 c0                	test   %eax,%eax
40000db0:	0f 84 13 01 00 00    	je     40000ec9 <printf+0x16a>
40000db6:	e9 c0 00 00 00       	jmp    40000e7b <printf+0x11c>
40000dbb:	83 f8 73             	cmp    $0x73,%eax
40000dbe:	74 1e                	je     40000dde <printf+0x7f>
40000dc0:	83 f8 73             	cmp    $0x73,%eax
40000dc3:	7f 0a                	jg     40000dcf <printf+0x70>
40000dc5:	83 f8 70             	cmp    $0x70,%eax
40000dc8:	74 5b                	je     40000e25 <printf+0xc6>
40000dca:	e9 ac 00 00 00       	jmp    40000e7b <printf+0x11c>
40000dcf:	83 f8 75             	cmp    $0x75,%eax
40000dd2:	74 2b                	je     40000dff <printf+0xa0>
40000dd4:	83 f8 78             	cmp    $0x78,%eax
40000dd7:	74 4c                	je     40000e25 <printf+0xc6>
40000dd9:	e9 9d 00 00 00       	jmp    40000e7b <printf+0x11c>
        case 's':
          s = va_arg(ap, char*);
40000dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000de1:	8d 50 04             	lea    0x4(%eax),%edx
40000de4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000de7:	8b 00                	mov    (%eax),%eax
40000de9:	89 45 f0             	mov    %eax,-0x10(%ebp)
          wrt += puts(s);
40000dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000def:	89 04 24             	mov    %eax,(%esp)
40000df2:	e8 86 fe ff ff       	call   40000c7d <puts>
40000df7:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000dfa:	e9 a0 00 00 00       	jmp    40000e9f <printf+0x140>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000dff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000e02:	8d 50 04             	lea    0x4(%eax),%edx
40000e05:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000e08:	8b 00                	mov    (%eax),%eax
40000e0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 10);
40000e0d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
40000e14:	00 
40000e15:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000e18:	89 04 24             	mov    %eax,(%esp)
40000e1b:	e8 c2 fe ff ff       	call   40000ce2 <putn>
40000e20:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e23:	eb 7a                	jmp    40000e9f <printf+0x140>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000e25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000e28:	8d 50 04             	lea    0x4(%eax),%edx
40000e2b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000e2e:	8b 00                	mov    (%eax),%eax
40000e30:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 16);
40000e33:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
40000e3a:	00 
40000e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000e3e:	89 04 24             	mov    %eax,(%esp)
40000e41:	e8 9c fe ff ff       	call   40000ce2 <putn>
40000e46:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e49:	eb 54                	jmp    40000e9f <printf+0x140>
        case 'c':
          c = va_arg(ap, int);
40000e4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000e4e:	8d 50 04             	lea    0x4(%eax),%edx
40000e51:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000e54:	8b 00                	mov    (%eax),%eax
40000e56:	88 45 eb             	mov    %al,-0x15(%ebp)
          wrt += putchar(c);
40000e59:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
40000e5d:	89 04 24             	mov    %eax,(%esp)
40000e60:	e8 49 fd ff ff       	call   40000bae <putchar>
40000e65:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e68:	eb 35                	jmp    40000e9f <printf+0x140>
        case '%':
          wrt += putchar('%');
40000e6a:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000e71:	e8 38 fd ff ff       	call   40000bae <putchar>
40000e76:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e79:	eb 24                	jmp    40000e9f <printf+0x140>
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000e7b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000e82:	e8 27 fd ff ff       	call   40000bae <putchar>
40000e87:	01 45 f4             	add    %eax,-0xc(%ebp)
          wrt += putchar(*fmt);
40000e8a:	8b 45 08             	mov    0x8(%ebp),%eax
40000e8d:	0f b6 00             	movzbl (%eax),%eax
40000e90:	0f be c0             	movsbl %al,%eax
40000e93:	89 04 24             	mov    %eax,(%esp)
40000e96:	e8 13 fd ff ff       	call   40000bae <putchar>
40000e9b:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e9e:	90                   	nop
40000e9f:	eb 14                	jmp    40000eb5 <printf+0x156>
      }
    } else {
      wrt += putchar(*fmt);
40000ea1:	8b 45 08             	mov    0x8(%ebp),%eax
40000ea4:	0f b6 00             	movzbl (%eax),%eax
40000ea7:	0f be c0             	movsbl %al,%eax
40000eaa:	89 04 24             	mov    %eax,(%esp)
40000ead:	e8 fc fc ff ff       	call   40000bae <putchar>
40000eb2:	01 45 f4             	add    %eax,-0xc(%ebp)
    }

    fmt++;
40000eb5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000eb9:	8b 45 08             	mov    0x8(%ebp),%eax
40000ebc:	0f b6 00             	movzbl (%eax),%eax
40000ebf:	84 c0                	test   %al,%al
40000ec1:	0f 85 b0 fe ff ff    	jne    40000d77 <printf+0x18>
40000ec7:	eb 01                	jmp    40000eca <printf+0x16b>
          break;
        case '%':
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
40000ec9:	90                   	nop
  }

out:
  va_end(ap);

  return wrt;
40000eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000ecd:	c9                   	leave  
40000ece:	c3                   	ret    

40000ecf <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000ecf:	55                   	push   %ebp
40000ed0:	89 e5                	mov    %esp,%ebp
40000ed2:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
40000ed5:	8b 45 08             	mov    0x8(%ebp),%eax
40000ed8:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
40000edb:	eb 0e                	jmp    40000eeb <memset+0x1c>
        *p++ = c;
40000edd:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ee0:	8d 50 01             	lea    0x1(%eax),%edx
40000ee3:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000ee6:	8b 55 0c             	mov    0xc(%ebp),%edx
40000ee9:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000eeb:	8b 45 10             	mov    0x10(%ebp),%eax
40000eee:	8d 50 ff             	lea    -0x1(%eax),%edx
40000ef1:	89 55 10             	mov    %edx,0x10(%ebp)
40000ef4:	85 c0                	test   %eax,%eax
40000ef6:	75 e5                	jne    40000edd <memset+0xe>
        *p++ = c;
    }

    return buf;
40000ef8:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000efb:	c9                   	leave  
40000efc:	c3                   	ret    

40000efd <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000efd:	55                   	push   %ebp
40000efe:	89 e5                	mov    %esp,%ebp
40000f00:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
40000f03:	8b 45 08             	mov    0x8(%ebp),%eax
40000f06:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
40000f09:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f0c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
40000f0f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000f13:	75 07                	jne    40000f1c <memcpy+0x1f>
40000f15:	b8 00 00 00 00       	mov    $0x0,%eax
40000f1a:	eb 29                	jmp    40000f45 <memcpy+0x48>

    while (n--) {
40000f1c:	eb 17                	jmp    40000f35 <memcpy+0x38>
        *(d++) = *(s++);
40000f1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f21:	8d 50 01             	lea    0x1(%eax),%edx
40000f24:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000f27:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000f2a:	8d 4a 01             	lea    0x1(%edx),%ecx
40000f2d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
40000f30:	0f b6 12             	movzbl (%edx),%edx
40000f33:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000f35:	8b 45 10             	mov    0x10(%ebp),%eax
40000f38:	8d 50 ff             	lea    -0x1(%eax),%edx
40000f3b:	89 55 10             	mov    %edx,0x10(%ebp)
40000f3e:	85 c0                	test   %eax,%eax
40000f40:	75 dc                	jne    40000f1e <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
40000f42:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000f45:	c9                   	leave  
40000f46:	c3                   	ret    

40000f47 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000f47:	55                   	push   %ebp
40000f48:	89 e5                	mov    %esp,%ebp
40000f4a:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
40000f4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000f51:	75 07                	jne    40000f5a <memcmp+0x13>
        return -1;
40000f53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000f58:	eb 7c                	jmp    40000fd6 <memcmp+0x8f>
    if (ptr2 == 0)
40000f5a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000f5e:	75 07                	jne    40000f67 <memcmp+0x20>
        return 1;
40000f60:	b8 01 00 00 00       	mov    $0x1,%eax
40000f65:	eb 6f                	jmp    40000fd6 <memcmp+0x8f>
    if (num == 0)
40000f67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000f6b:	75 07                	jne    40000f74 <memcmp+0x2d>
        return 0;
40000f6d:	b8 00 00 00 00       	mov    $0x0,%eax
40000f72:	eb 62                	jmp    40000fd6 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
40000f74:	8b 45 08             	mov    0x8(%ebp),%eax
40000f77:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
40000f7a:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f7d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
40000f80:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000f87:	eb 40                	jmp    40000fc9 <memcmp+0x82>
        if (pa[i] != pb[i]) {
40000f89:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f8c:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000f8f:	01 d0                	add    %edx,%eax
40000f91:	0f b6 10             	movzbl (%eax),%edx
40000f94:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f97:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000f9a:	01 c8                	add    %ecx,%eax
40000f9c:	0f b6 00             	movzbl (%eax),%eax
40000f9f:	38 c2                	cmp    %al,%dl
40000fa1:	74 22                	je     40000fc5 <memcmp+0x7e>
            return pa[i] - pb[i];
40000fa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000fa6:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000fa9:	01 d0                	add    %edx,%eax
40000fab:	0f b6 00             	movzbl (%eax),%eax
40000fae:	0f b6 d0             	movzbl %al,%edx
40000fb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000fb4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000fb7:	01 c8                	add    %ecx,%eax
40000fb9:	0f b6 00             	movzbl (%eax),%eax
40000fbc:	0f b6 c0             	movzbl %al,%eax
40000fbf:	29 c2                	sub    %eax,%edx
40000fc1:	89 d0                	mov    %edx,%eax
40000fc3:	eb 11                	jmp    40000fd6 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000fc5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000fc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000fcc:	3b 45 10             	cmp    0x10(%ebp),%eax
40000fcf:	72 b8                	jb     40000f89 <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
40000fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000fd6:	c9                   	leave  
40000fd7:	c3                   	ret    

40000fd8 <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000fd8:	55                   	push   %ebp
40000fd9:	89 e5                	mov    %esp,%ebp
40000fdb:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
40000fde:	8b 45 08             	mov    0x8(%ebp),%eax
40000fe1:	89 04 24             	mov    %eax,(%esp)
40000fe4:	e8 3c 00 00 00       	call   40001025 <strlen>
40000fe9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
40000fec:	8b 45 0c             	mov    0xc(%ebp),%eax
40000fef:	89 04 24             	mov    %eax,(%esp)
40000ff2:	e8 2e 00 00 00       	call   40001025 <strlen>
40000ff7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
40000ffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ffd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
40001000:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
40001004:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40001007:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000100a:	83 c0 01             	add    $0x1,%eax
4000100d:	89 44 24 08          	mov    %eax,0x8(%esp)
40001011:	8b 45 0c             	mov    0xc(%ebp),%eax
40001014:	89 44 24 04          	mov    %eax,0x4(%esp)
40001018:	8b 45 08             	mov    0x8(%ebp),%eax
4000101b:	89 04 24             	mov    %eax,(%esp)
4000101e:	e8 24 ff ff ff       	call   40000f47 <memcmp>
}
40001023:	c9                   	leave  
40001024:	c3                   	ret    

40001025 <strlen>:

unsigned int strlen(const char* str) {
40001025:	55                   	push   %ebp
40001026:	89 e5                	mov    %esp,%ebp
40001028:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
4000102b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000102f:	75 07                	jne    40001038 <strlen+0x13>
        return 0;
40001031:	b8 00 00 00 00       	mov    $0x0,%eax
40001036:	eb 1f                	jmp    40001057 <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
40001038:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000103f:	eb 04                	jmp    40001045 <strlen+0x20>
40001041:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40001045:	8b 55 fc             	mov    -0x4(%ebp),%edx
40001048:	8b 45 08             	mov    0x8(%ebp),%eax
4000104b:	01 d0                	add    %edx,%eax
4000104d:	0f b6 00             	movzbl (%eax),%eax
40001050:	84 c0                	test   %al,%al
40001052:	75 ed                	jne    40001041 <strlen+0x1c>
        ;
    return i;
40001054:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
40001057:	c9                   	leave  
40001058:	c3                   	ret    

40001059 <strcpy>:

char* strcpy(char* dest, const char* src) {
40001059:	55                   	push   %ebp
4000105a:	89 e5                	mov    %esp,%ebp
4000105c:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
4000105f:	8b 45 0c             	mov    0xc(%ebp),%eax
40001062:	89 04 24             	mov    %eax,(%esp)
40001065:	e8 bb ff ff ff       	call   40001025 <strlen>
4000106a:	83 c0 01             	add    $0x1,%eax
4000106d:	89 44 24 08          	mov    %eax,0x8(%esp)
40001071:	8b 45 0c             	mov    0xc(%ebp),%eax
40001074:	89 44 24 04          	mov    %eax,0x4(%esp)
40001078:	8b 45 08             	mov    0x8(%ebp),%eax
4000107b:	89 04 24             	mov    %eax,(%esp)
4000107e:	e8 7a fe ff ff       	call   40000efd <memcpy>
    return dest;
40001083:	8b 45 08             	mov    0x8(%ebp),%eax
}
40001086:	c9                   	leave  
40001087:	c3                   	ret    

40001088 <strclone>:

char* strclone(char* str) {
40001088:	55                   	push   %ebp
40001089:	89 e5                	mov    %esp,%ebp
4000108b:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
4000108e:	8b 45 08             	mov    0x8(%ebp),%eax
40001091:	89 04 24             	mov    %eax,(%esp)
40001094:	e8 8c ff ff ff       	call   40001025 <strlen>
40001099:	83 c0 01             	add    $0x1,%eax
4000109c:	89 04 24             	mov    %eax,(%esp)
4000109f:	e8 ab 03 00 00       	call   4000144f <malloc>
400010a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
400010a7:	8b 45 08             	mov    0x8(%ebp),%eax
400010aa:	89 44 24 04          	mov    %eax,0x4(%esp)
400010ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
400010b1:	89 04 24             	mov    %eax,(%esp)
400010b4:	e8 a0 ff ff ff       	call   40001059 <strcpy>

    return ret;
400010b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
400010bc:	c9                   	leave  
400010bd:	c3                   	ret    

400010be <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
400010be:	55                   	push   %ebp
400010bf:	89 e5                	mov    %esp,%ebp
400010c1:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
400010c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400010c8:	74 3c                	je     40001106 <strtok+0x48>
        if(fr != 0) {
400010ca:	a1 04 32 00 40       	mov    0x40003204,%eax
400010cf:	85 c0                	test   %eax,%eax
400010d1:	74 0d                	je     400010e0 <strtok+0x22>
            free(fr);
400010d3:	a1 04 32 00 40       	mov    0x40003204,%eax
400010d8:	89 04 24             	mov    %eax,(%esp)
400010db:	e8 ac 05 00 00       	call   4000168c <free>
        }
        fr = strclone(str);
400010e0:	8b 45 08             	mov    0x8(%ebp),%eax
400010e3:	89 04 24             	mov    %eax,(%esp)
400010e6:	e8 9d ff ff ff       	call   40001088 <strclone>
400010eb:	a3 04 32 00 40       	mov    %eax,0x40003204
        return strtoknc(fr, delimiters);
400010f0:	a1 04 32 00 40       	mov    0x40003204,%eax
400010f5:	8b 55 0c             	mov    0xc(%ebp),%edx
400010f8:	89 54 24 04          	mov    %edx,0x4(%esp)
400010fc:	89 04 24             	mov    %eax,(%esp)
400010ff:	e8 17 00 00 00       	call   4000111b <strtoknc>
40001104:	eb 13                	jmp    40001119 <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
40001106:	8b 45 0c             	mov    0xc(%ebp),%eax
40001109:	89 44 24 04          	mov    %eax,0x4(%esp)
4000110d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40001114:	e8 02 00 00 00       	call   4000111b <strtoknc>
}
40001119:	c9                   	leave  
4000111a:	c3                   	ret    

4000111b <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
4000111b:	55                   	push   %ebp
4000111c:	89 e5                	mov    %esp,%ebp
4000111e:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
40001121:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
40001128:	8b 45 0c             	mov    0xc(%ebp),%eax
4000112b:	89 04 24             	mov    %eax,(%esp)
4000112e:	e8 f2 fe ff ff       	call   40001025 <strlen>
40001133:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
40001136:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000113a:	75 0a                	jne    40001146 <strtoknc+0x2b>
        return 0;
4000113c:	b8 00 00 00 00       	mov    $0x0,%eax
40001141:	e9 ef 00 00 00       	jmp    40001235 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
40001146:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000114a:	75 13                	jne    4000115f <strtoknc+0x44>
4000114c:	a1 00 32 00 40       	mov    0x40003200,%eax
40001151:	85 c0                	test   %eax,%eax
40001153:	75 0a                	jne    4000115f <strtoknc+0x44>
        return 0;
40001155:	b8 00 00 00 00       	mov    $0x0,%eax
4000115a:	e9 d6 00 00 00       	jmp    40001235 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
4000115f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001163:	74 08                	je     4000116d <strtoknc+0x52>
        sp = str;
40001165:	8b 45 08             	mov    0x8(%ebp),%eax
40001168:	a3 00 32 00 40       	mov    %eax,0x40003200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
4000116d:	a1 00 32 00 40       	mov    0x40003200,%eax
40001172:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
40001175:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000117c:	eb 1f                	jmp    4000119d <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
4000117e:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001181:	0f b6 10             	movzbl (%eax),%edx
40001184:	8b 4d fc             	mov    -0x4(%ebp),%ecx
40001187:	8b 45 0c             	mov    0xc(%ebp),%eax
4000118a:	01 c8                	add    %ecx,%eax
4000118c:	0f b6 00             	movzbl (%eax),%eax
4000118f:	38 c2                	cmp    %al,%dl
40001191:	75 06                	jne    40001199 <strtoknc+0x7e>
                p_start++;
40001193:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
40001197:	eb 0c                	jmp    400011a5 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
40001199:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
4000119d:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400011a3:	7c d9                	jl     4000117e <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
400011a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400011ab:	75 17                	jne    400011c4 <strtoknc+0xa9>
            sp = p_start;
400011ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
400011b0:	a3 00 32 00 40       	mov    %eax,0x40003200
            break;
400011b5:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
400011b6:	a1 00 32 00 40       	mov    0x40003200,%eax
400011bb:	0f b6 00             	movzbl (%eax),%eax
400011be:	84 c0                	test   %al,%al
400011c0:	75 15                	jne    400011d7 <strtoknc+0xbc>
400011c2:	eb 02                	jmp    400011c6 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
400011c4:	eb af                	jmp    40001175 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
400011c6:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
400011cd:	00 00 00 
        return sp;
400011d0:	a1 00 32 00 40       	mov    0x40003200,%eax
400011d5:	eb 5e                	jmp    40001235 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400011d7:	eb 4d                	jmp    40001226 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
400011d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
400011e0:	eb 25                	jmp    40001207 <strtoknc+0xec>
            if (*sp == delimiters[i]) {
400011e2:	a1 00 32 00 40       	mov    0x40003200,%eax
400011e7:	0f b6 10             	movzbl (%eax),%edx
400011ea:	8b 4d fc             	mov    -0x4(%ebp),%ecx
400011ed:	8b 45 0c             	mov    0xc(%ebp),%eax
400011f0:	01 c8                	add    %ecx,%eax
400011f2:	0f b6 00             	movzbl (%eax),%eax
400011f5:	38 c2                	cmp    %al,%dl
400011f7:	75 0a                	jne    40001203 <strtoknc+0xe8>
                *sp = '\0';
400011f9:	a1 00 32 00 40       	mov    0x40003200,%eax
400011fe:	c6 00 00             	movb   $0x0,(%eax)
                break;
40001201:	eb 0c                	jmp    4000120f <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
40001203:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40001207:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000120a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000120d:	7c d3                	jl     400011e2 <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
4000120f:	a1 00 32 00 40       	mov    0x40003200,%eax
40001214:	83 c0 01             	add    $0x1,%eax
40001217:	a3 00 32 00 40       	mov    %eax,0x40003200
        if (i < len)
4000121c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000121f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40001222:	7d 02                	jge    40001226 <strtoknc+0x10b>
            break;
40001224:	eb 0c                	jmp    40001232 <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
40001226:	a1 00 32 00 40       	mov    0x40003200,%eax
4000122b:	0f b6 00             	movzbl (%eax),%eax
4000122e:	84 c0                	test   %al,%al
40001230:	75 a7                	jne    400011d9 <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
40001232:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
40001235:	c9                   	leave  
40001236:	c3                   	ret    

40001237 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
40001237:	55                   	push   %ebp
40001238:	89 e5                	mov    %esp,%ebp
4000123a:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
4000123d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
40001244:	8b 45 08             	mov    0x8(%ebp),%eax
40001247:	8b 00                	mov    (%eax),%eax
40001249:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
4000124c:	eb 38                	jmp    40001286 <remove_from_list+0x4f>
        if (cur == element) {
4000124e:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001251:	3b 45 0c             	cmp    0xc(%ebp),%eax
40001254:	75 21                	jne    40001277 <remove_from_list+0x40>
            if (last == 0) {
40001256:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
4000125a:	75 0d                	jne    40001269 <remove_from_list+0x32>
                *root = cur->next;
4000125c:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000125f:	8b 50 08             	mov    0x8(%eax),%edx
40001262:	8b 45 08             	mov    0x8(%ebp),%eax
40001265:	89 10                	mov    %edx,(%eax)
                return;
40001267:	eb 23                	jmp    4000128c <remove_from_list+0x55>
            } else {
                last->next = cur->next;
40001269:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000126c:	8b 50 08             	mov    0x8(%eax),%edx
4000126f:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001272:	89 50 08             	mov    %edx,0x8(%eax)
                return;
40001275:	eb 15                	jmp    4000128c <remove_from_list+0x55>
            }
        }
        last = cur;
40001277:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000127a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
4000127d:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001280:	8b 40 08             	mov    0x8(%eax),%eax
40001283:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40001286:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
4000128a:	75 c2                	jne    4000124e <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
4000128c:	c9                   	leave  
4000128d:	c3                   	ret    

4000128e <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
4000128e:	55                   	push   %ebp
4000128f:	89 e5                	mov    %esp,%ebp
    element->next = *root;
40001291:	8b 45 08             	mov    0x8(%ebp),%eax
40001294:	8b 10                	mov    (%eax),%edx
40001296:	8b 45 0c             	mov    0xc(%ebp),%eax
40001299:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
4000129c:	8b 45 08             	mov    0x8(%ebp),%eax
4000129f:	8b 55 0c             	mov    0xc(%ebp),%edx
400012a2:	89 10                	mov    %edx,(%eax)
}
400012a4:	5d                   	pop    %ebp
400012a5:	c3                   	ret    

400012a6 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
400012a6:	55                   	push   %ebp
400012a7:	89 e5                	mov    %esp,%ebp
400012a9:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
400012ac:	8b 45 08             	mov    0x8(%ebp),%eax
400012af:	8b 00                	mov    (%eax),%eax
400012b1:	85 c0                	test   %eax,%eax
400012b3:	75 07                	jne    400012bc <pop_from_list+0x16>
        return 0;
400012b5:	b8 00 00 00 00       	mov    $0x0,%eax
400012ba:	eb 1d                	jmp    400012d9 <pop_from_list+0x33>
    struct memory_node* pop = *root;
400012bc:	8b 45 08             	mov    0x8(%ebp),%eax
400012bf:	8b 00                	mov    (%eax),%eax
400012c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
400012c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012c7:	89 44 24 04          	mov    %eax,0x4(%esp)
400012cb:	8b 45 08             	mov    0x8(%ebp),%eax
400012ce:	89 04 24             	mov    %eax,(%esp)
400012d1:	e8 61 ff ff ff       	call   40001237 <remove_from_list>
    return pop;
400012d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
400012d9:	c9                   	leave  
400012da:	c3                   	ret    

400012db <allocate_unused_nodes>:

static void allocate_unused_nodes() {
400012db:	55                   	push   %ebp
400012dc:	89 e5                	mov    %esp,%ebp
400012de:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
400012e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400012e8:	e8 e7 03 00 00       	call   400016d4 <vmm_alloc_cont>
400012ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
400012f0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
400012f7:	00 
400012f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400012ff:	00 
40001300:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001303:	89 04 24             	mov    %eax,(%esp)
40001306:	e8 c4 fb ff ff       	call   40000ecf <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
4000130b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
40001312:	eb 27                	jmp    4000133b <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
40001314:	8b 55 f4             	mov    -0xc(%ebp),%edx
40001317:	89 d0                	mov    %edx,%eax
40001319:	01 c0                	add    %eax,%eax
4000131b:	01 d0                	add    %edx,%eax
4000131d:	c1 e0 02             	shl    $0x2,%eax
40001320:	89 c2                	mov    %eax,%edx
40001322:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001325:	01 d0                	add    %edx,%eax
40001327:	89 44 24 04          	mov    %eax,0x4(%esp)
4000132b:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001332:	e8 57 ff ff ff       	call   4000128e <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40001337:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
4000133b:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
40001342:	76 d0                	jbe    40001314 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
40001344:	c9                   	leave  
40001345:	c3                   	ret    

40001346 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
40001346:	55                   	push   %ebp
40001347:	89 e5                	mov    %esp,%ebp
40001349:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
4000134c:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001353:	e8 4e ff ff ff       	call   400012a6 <pop_from_list>
40001358:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
4000135b:	eb 14                	jmp    40001371 <pop_unused_node+0x2b>
        allocate_unused_nodes();
4000135d:	e8 79 ff ff ff       	call   400012db <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
40001362:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001369:	e8 38 ff ff ff       	call   400012a6 <pop_from_list>
4000136e:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40001371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001375:	74 e6                	je     4000135d <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
40001377:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000137a:	c9                   	leave  
4000137b:	c3                   	ret    

4000137c <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
4000137c:	55                   	push   %ebp
4000137d:	89 e5                	mov    %esp,%ebp
4000137f:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
40001382:	8b 45 08             	mov    0x8(%ebp),%eax
40001385:	89 44 24 04          	mov    %eax,0x4(%esp)
40001389:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001390:	e8 a2 fe ff ff       	call   40001237 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
40001395:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    cur = first_free;
4000139c:	a1 10 32 00 40       	mov    0x40003210,%eax
400013a1:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
400013a4:	e9 87 00 00 00       	jmp    40001430 <merge_into_frees+0xb4>
        if (cur->address + cur->size == tf->address) {
400013a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013ac:	8b 50 04             	mov    0x4(%eax),%edx
400013af:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013b2:	8b 00                	mov    (%eax),%eax
400013b4:	01 c2                	add    %eax,%edx
400013b6:	8b 45 08             	mov    0x8(%ebp),%eax
400013b9:	8b 40 04             	mov    0x4(%eax),%eax
400013bc:	39 c2                	cmp    %eax,%edx
400013be:	75 21                	jne    400013e1 <merge_into_frees+0x65>
            tf->address = cur->address;
400013c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013c3:	8b 50 04             	mov    0x4(%eax),%edx
400013c6:	8b 45 08             	mov    0x8(%ebp),%eax
400013c9:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
400013cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013cf:	89 44 24 04          	mov    %eax,0x4(%esp)
400013d3:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400013da:	e8 58 fe ff ff       	call   40001237 <remove_from_list>
            goto editedList;
400013df:	eb b4                	jmp    40001395 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
400013e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013e4:	8b 50 04             	mov    0x4(%eax),%edx
400013e7:	8b 45 08             	mov    0x8(%ebp),%eax
400013ea:	8b 48 04             	mov    0x4(%eax),%ecx
400013ed:	8b 45 08             	mov    0x8(%ebp),%eax
400013f0:	8b 00                	mov    (%eax),%eax
400013f2:	01 c8                	add    %ecx,%eax
400013f4:	39 c2                	cmp    %eax,%edx
400013f6:	75 29                	jne    40001421 <merge_into_frees+0xa5>
            tf->size += cur->size;
400013f8:	8b 45 08             	mov    0x8(%ebp),%eax
400013fb:	8b 10                	mov    (%eax),%edx
400013fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001400:	8b 00                	mov    (%eax),%eax
40001402:	01 c2                	add    %eax,%edx
40001404:	8b 45 08             	mov    0x8(%ebp),%eax
40001407:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
40001409:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000140c:	89 44 24 04          	mov    %eax,0x4(%esp)
40001410:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001417:	e8 1b fe ff ff       	call   40001237 <remove_from_list>
            goto editedList;
4000141c:	e9 74 ff ff ff       	jmp    40001395 <merge_into_frees+0x19>
        }

        last = cur;
40001421:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001424:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
40001427:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000142a:	8b 40 08             	mov    0x8(%eax),%eax
4000142d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
40001430:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001434:	0f 85 6f ff ff ff    	jne    400013a9 <merge_into_frees+0x2d>

        last = cur;
        cur = cur->next;
    }

    append_to_list(&first_free, tf);
4000143a:	8b 45 08             	mov    0x8(%ebp),%eax
4000143d:	89 44 24 04          	mov    %eax,0x4(%esp)
40001441:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001448:	e8 41 fe ff ff       	call   4000128e <append_to_list>
}
4000144d:	c9                   	leave  
4000144e:	c3                   	ret    

4000144f <malloc>:

void* malloc(size_t size) {
4000144f:	55                   	push   %ebp
40001450:	89 e5                	mov    %esp,%ebp
40001452:	83 ec 38             	sub    $0x38,%esp
    struct memory_node* last = 0;
40001455:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    struct memory_node* cur = first_free;
4000145c:	a1 10 32 00 40       	mov    0x40003210,%eax
40001461:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001464:	eb 1b                	jmp    40001481 <malloc+0x32>
        if (cur->size >= size) {
40001466:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001469:	8b 00                	mov    (%eax),%eax
4000146b:	3b 45 08             	cmp    0x8(%ebp),%eax
4000146e:	72 02                	jb     40001472 <malloc+0x23>
            break;
40001470:	eb 15                	jmp    40001487 <malloc+0x38>
        }
        last = cur;
40001472:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001475:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cur = cur->next;
40001478:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000147b:	8b 40 08             	mov    0x8(%eax),%eax
4000147e:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40001481:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001485:	75 df                	jne    40001466 <malloc+0x17>
        }
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
40001487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000148b:	0f 85 a4 00 00 00    	jne    40001535 <malloc+0xe6>
        uint32_t pgs = size / PAGESIZE;
40001491:	8b 45 08             	mov    0x8(%ebp),%eax
40001494:	c1 e8 0c             	shr    $0xc,%eax
40001497:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
4000149a:	8b 45 08             	mov    0x8(%ebp),%eax
4000149d:	25 ff 0f 00 00       	and    $0xfff,%eax
400014a2:	85 c0                	test   %eax,%eax
400014a4:	74 04                	je     400014aa <malloc+0x5b>
            pgs++;
400014a6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
400014aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014ad:	89 04 24             	mov    %eax,(%esp)
400014b0:	e8 1f 02 00 00       	call   400016d4 <vmm_alloc_cont>
400014b5:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
400014b8:	e8 89 fe ff ff       	call   40001346 <pop_unused_node>
400014bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
400014c0:	8b 55 e8             	mov    -0x18(%ebp),%edx
400014c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014c6:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
400014c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014cc:	8b 55 08             	mov    0x8(%ebp),%edx
400014cf:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
400014d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014d4:	c1 e0 0c             	shl    $0xc,%eax
400014d7:	3b 45 08             	cmp    0x8(%ebp),%eax
400014da:	76 3e                	jbe    4000151a <malloc+0xcb>
            struct memory_node* free = pop_unused_node();
400014dc:	e8 65 fe ff ff       	call   40001346 <pop_unused_node>
400014e1:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
400014e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014e7:	8b 50 04             	mov    0x4(%eax),%edx
400014ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014ed:	8b 00                	mov    (%eax),%eax
400014ef:	01 c2                	add    %eax,%edx
400014f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400014f4:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
400014f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014fa:	c1 e0 0c             	shl    $0xc,%eax
400014fd:	2b 45 08             	sub    0x8(%ebp),%eax
40001500:	89 c2                	mov    %eax,%edx
40001502:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001505:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
40001507:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000150a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000150e:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001515:	e8 74 fd ff ff       	call   4000128e <append_to_list>
        }

        append_to_list(&first_used, fill);
4000151a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000151d:	89 44 24 04          	mov    %eax,0x4(%esp)
40001521:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001528:	e8 61 fd ff ff       	call   4000128e <append_to_list>

        return (void*) fill->address;
4000152d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001530:	8b 40 04             	mov    0x4(%eax),%eax
40001533:	eb 7b                	jmp    400015b0 <malloc+0x161>
    } else {
        uint32_t freesize = cur->size - size;
40001535:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001538:	8b 00                	mov    (%eax),%eax
4000153a:	2b 45 08             	sub    0x8(%ebp),%eax
4000153d:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
40001540:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001543:	8b 55 08             	mov    0x8(%ebp),%edx
40001546:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
40001548:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000154b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000154f:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001556:	e8 dc fc ff ff       	call   40001237 <remove_from_list>
        append_to_list(&first_used, cur);
4000155b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000155e:	89 44 24 04          	mov    %eax,0x4(%esp)
40001562:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001569:	e8 20 fd ff ff       	call   4000128e <append_to_list>

        if (freesize > 0) {
4000156e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40001572:	74 36                	je     400015aa <malloc+0x15b>
            struct memory_node* free = pop_unused_node();
40001574:	e8 cd fd ff ff       	call   40001346 <pop_unused_node>
40001579:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
4000157c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000157f:	8b 50 04             	mov    0x4(%eax),%edx
40001582:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001585:	8b 00                	mov    (%eax),%eax
40001587:	01 c2                	add    %eax,%edx
40001589:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000158c:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
4000158f:	8b 45 d8             	mov    -0x28(%ebp),%eax
40001592:	8b 55 dc             	mov    -0x24(%ebp),%edx
40001595:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
40001597:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000159a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000159e:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400015a5:	e8 e4 fc ff ff       	call   4000128e <append_to_list>
        }

        return (void*) cur->address;
400015aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
400015ad:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
400015b0:	c9                   	leave  
400015b1:	c3                   	ret    

400015b2 <calloc>:

void* calloc(size_t num, size_t size) {
400015b2:	55                   	push   %ebp
400015b3:	89 e5                	mov    %esp,%ebp
400015b5:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
400015b8:	8b 45 08             	mov    0x8(%ebp),%eax
400015bb:	0f af 45 0c          	imul   0xc(%ebp),%eax
400015bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
400015c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
400015c5:	89 04 24             	mov    %eax,(%esp)
400015c8:	e8 82 fe ff ff       	call   4000144f <malloc>
400015cd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
400015d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400015d4:	74 1a                	je     400015f0 <calloc+0x3e>
        memset(p, 0, gsize);
400015d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400015d9:	89 44 24 08          	mov    %eax,0x8(%esp)
400015dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400015e4:	00 
400015e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
400015e8:	89 04 24             	mov    %eax,(%esp)
400015eb:	e8 df f8 ff ff       	call   40000ecf <memset>
    }

    return p;
400015f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
400015f3:	c9                   	leave  
400015f4:	c3                   	ret    

400015f5 <realloc>:

void* realloc(void* ptr, size_t size) {
400015f5:	55                   	push   %ebp
400015f6:	89 e5                	mov    %esp,%ebp
400015f8:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* last = 0;
400015fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
40001602:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001607:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
4000160a:	eb 73                	jmp    4000167f <realloc+0x8a>
        if (cur->address == (uint32_t) ptr) {
4000160c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000160f:	8b 50 04             	mov    0x4(%eax),%edx
40001612:	8b 45 08             	mov    0x8(%ebp),%eax
40001615:	39 c2                	cmp    %eax,%edx
40001617:	75 57                	jne    40001670 <realloc+0x7b>
            if (size == 0) {
40001619:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
4000161d:	75 12                	jne    40001631 <realloc+0x3c>
                free(ptr);
4000161f:	8b 45 08             	mov    0x8(%ebp),%eax
40001622:	89 04 24             	mov    %eax,(%esp)
40001625:	e8 62 00 00 00       	call   4000168c <free>
                return 0;
4000162a:	b8 00 00 00 00       	mov    $0x0,%eax
4000162f:	eb 59                	jmp    4000168a <realloc+0x95>
            } else {
                void* new = malloc(size);
40001631:	8b 45 0c             	mov    0xc(%ebp),%eax
40001634:	89 04 24             	mov    %eax,(%esp)
40001637:	e8 13 fe ff ff       	call   4000144f <malloc>
4000163c:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
4000163f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001642:	8b 10                	mov    (%eax),%edx
40001644:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001647:	8b 40 04             	mov    0x4(%eax),%eax
4000164a:	89 54 24 08          	mov    %edx,0x8(%esp)
4000164e:	89 44 24 04          	mov    %eax,0x4(%esp)
40001652:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001655:	89 04 24             	mov    %eax,(%esp)
40001658:	e8 a0 f8 ff ff       	call   40000efd <memcpy>
                free((void*) cur->address);
4000165d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001660:	8b 40 04             	mov    0x4(%eax),%eax
40001663:	89 04 24             	mov    %eax,(%esp)
40001666:	e8 21 00 00 00       	call   4000168c <free>

                return new;
4000166b:	8b 45 ec             	mov    -0x14(%ebp),%eax
4000166e:	eb 1a                	jmp    4000168a <realloc+0x95>
            }
        }
        last = cur;
40001670:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001673:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
40001676:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001679:	8b 40 08             	mov    0x8(%eax),%eax
4000167c:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000167f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001683:	75 87                	jne    4000160c <realloc+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
40001685:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000168a:	c9                   	leave  
4000168b:	c3                   	ret    

4000168c <free>:

void free(void* ptr) {
4000168c:	55                   	push   %ebp
4000168d:	89 e5                	mov    %esp,%ebp
4000168f:	83 ec 14             	sub    $0x14,%esp
    struct memory_node* last = 0;
40001692:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
40001699:	a1 0c 32 00 40       	mov    0x4000320c,%eax
4000169e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
400016a1:	eb 29                	jmp    400016cc <free+0x40>
        if (cur->address == (uint32_t) ptr) {
400016a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
400016a6:	8b 50 04             	mov    0x4(%eax),%edx
400016a9:	8b 45 08             	mov    0x8(%ebp),%eax
400016ac:	39 c2                	cmp    %eax,%edx
400016ae:	75 0d                	jne    400016bd <free+0x31>
            merge_into_frees(cur);
400016b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400016b3:	89 04 24             	mov    %eax,(%esp)
400016b6:	e8 c1 fc ff ff       	call   4000137c <merge_into_frees>
            break;
400016bb:	eb 15                	jmp    400016d2 <free+0x46>
        }
        last = cur;
400016bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
400016c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
400016c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
400016c6:	8b 40 08             	mov    0x8(%eax),%eax
400016c9:	89 45 fc             	mov    %eax,-0x4(%ebp)

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
400016cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400016d0:	75 d1                	jne    400016a3 <free+0x17>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
400016d2:	c9                   	leave  
400016d3:	c3                   	ret    

400016d4 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
400016d4:	55                   	push   %ebp
400016d5:	89 e5                	mov    %esp,%ebp
400016d7:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400016da:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400016e1:	8b 45 08             	mov    0x8(%ebp),%eax
400016e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400016e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400016ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400016f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400016fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001703:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001706:	89 04 24             	mov    %eax,(%esp)
40001709:	e8 7e 00 00 00       	call   4000178c <syscall>
  
  return (void*)state.eax;
4000170e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40001711:	c9                   	leave  
40001712:	c3                   	ret    

40001713 <vmm_free>:

void vmm_free (void* vaddr) {
40001713:	55                   	push   %ebp
40001714:	89 e5                	mov    %esp,%ebp
40001716:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001719:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
    .eax = 204,
    .ebx = (uint32_t)vaddr,
40001720:	8b 45 08             	mov    0x8(%ebp),%eax
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
  struct regstate state = {
40001723:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001726:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000172d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001734:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000173b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001742:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001745:	89 04 24             	mov    %eax,(%esp)
40001748:	e8 3f 00 00 00       	call   4000178c <syscall>
}
4000174d:	c9                   	leave  
4000174e:	c3                   	ret    

4000174f <print_memstat>:

void print_memstat() {
4000174f:	55                   	push   %ebp
40001750:	89 e5                	mov    %esp,%ebp
40001752:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001755:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
4000175c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001763:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000176a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001771:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001778:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
4000177f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001782:	89 04 24             	mov    %eax,(%esp)
40001785:	e8 02 00 00 00       	call   4000178c <syscall>
}
4000178a:	c9                   	leave  
4000178b:	c3                   	ret    

4000178c <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
4000178c:	55                   	push   %ebp
4000178d:	89 e5                	mov    %esp,%ebp
4000178f:	57                   	push   %edi
40001790:	56                   	push   %esi
40001791:	53                   	push   %ebx
40001792:	83 ec 08             	sub    $0x8,%esp
			"=c" (state->ecx),
			"=d" (state->edx),
			"=S" (state->esi),
			"=D" (state->edi)

			: "a" (state->eax),
40001795:	8b 45 08             	mov    0x8(%ebp),%eax
40001798:	8b 00                	mov    (%eax),%eax
			"b" (state->ebx),
4000179a:	8b 55 08             	mov    0x8(%ebp),%edx
4000179d:	8b 5a 04             	mov    0x4(%edx),%ebx
			"c" (state->ecx),
400017a0:	8b 55 08             	mov    0x8(%ebp),%edx
400017a3:	8b 4a 08             	mov    0x8(%edx),%ecx
			"d" (state->edx),
400017a6:	8b 55 08             	mov    0x8(%ebp),%edx
400017a9:	8b 52 0c             	mov    0xc(%edx),%edx
			"S" (state->esi),
400017ac:	8b 75 08             	mov    0x8(%ebp),%esi
400017af:	8b 76 10             	mov    0x10(%esi),%esi
			"D" (state->edi));
400017b2:	8b 7d 08             	mov    0x8(%ebp),%edi
400017b5:	8b 7f 14             	mov    0x14(%edi),%edi
#include "syscall.h"

void syscall(struct regstate* state) {
	asm("int $0x30"
400017b8:	cd 30                	int    $0x30
400017ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
400017bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
400017c0:	8b 45 08             	mov    0x8(%ebp),%eax
400017c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
400017c6:	89 10                	mov    %edx,(%eax)
400017c8:	8b 45 08             	mov    0x8(%ebp),%eax
400017cb:	89 58 04             	mov    %ebx,0x4(%eax)
400017ce:	8b 45 08             	mov    0x8(%ebp),%eax
400017d1:	89 48 08             	mov    %ecx,0x8(%eax)
400017d4:	8b 45 08             	mov    0x8(%ebp),%eax
400017d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
400017da:	89 50 0c             	mov    %edx,0xc(%eax)
400017dd:	8b 45 08             	mov    0x8(%ebp),%eax
400017e0:	89 70 10             	mov    %esi,0x10(%eax)
400017e3:	8b 45 08             	mov    0x8(%ebp),%eax
400017e6:	89 78 14             	mov    %edi,0x14(%eax)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
400017e9:	83 c4 08             	add    $0x8,%esp
400017ec:	5b                   	pop    %ebx
400017ed:	5e                   	pop    %esi
400017ee:	5f                   	pop    %edi
400017ef:	5d                   	pop    %ebp
400017f0:	c3                   	ret    
