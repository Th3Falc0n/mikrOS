
../../initrfs/ibin/memstat:     file format elf32-i386


Disassembly of section .text:

40000000 <main>:
#include "vmmcall.h"
 
int main(int argc, char* args[])
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 e4 f0             	and    $0xfffffff0,%esp
    print_memstat();
40000006:	e8 17 16 00 00       	call   40001622 <print_memstat>
    return 0;
4000000b:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000010:	c9                   	leave  
40000011:	c3                   	ret    

40000012 <return_rpc>:
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
40000012:	55                   	push   %ebp
40000013:	89 e5                	mov    %esp,%ebp
40000015:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000018:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .eax = 30,
      .ebx = (uint32_t)code,
4000001f:	8b 45 08             	mov    0x8(%ebp),%eax
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
    struct regstate state = {
40000022:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000025:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000002c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000033:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000003a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000041:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000044:	89 04 24             	mov    %eax,(%esp)
40000047:	e8 13 16 00 00       	call   4000165f <syscall>

    while(1);
4000004c:	eb fe                	jmp    4000004c <return_rpc+0x3a>

4000004e <call_rpc>:
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
4000004e:	55                   	push   %ebp
4000004f:	89 e5                	mov    %esp,%ebp
40000051:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000054:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
4000005b:	8b 45 08             	mov    0x8(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000005e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000061:	8b 45 0c             	mov    0xc(%ebp),%eax
40000064:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000067:	8b 45 10             	mov    0x10(%ebp),%eax
4000006a:	89 45 ec             	mov    %eax,-0x14(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
4000006d:	8b 45 14             	mov    0x14(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
40000070:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000073:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };

    syscall(&state);
4000007a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000007d:	89 04 24             	mov    %eax,(%esp)
40000080:	e8 da 15 00 00       	call   4000165f <syscall>

    return state.eax;
40000085:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000088:	c9                   	leave  
40000089:	c3                   	ret    

4000008a <fetch_rpc_data>:

void fetch_rpc_data(void* dest) {
4000008a:	55                   	push   %ebp
4000008b:	89 e5                	mov    %esp,%ebp
4000008d:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000090:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
      .eax = 33,
      .ebx = (uint32_t)dest,
40000097:	8b 45 08             	mov    0x8(%ebp),%eax

    return state.eax;
}

void fetch_rpc_data(void* dest) {
    struct regstate state = {
4000009a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000009d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400000a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400000ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400000b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400000b9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400000bc:	89 04 24             	mov    %eax,(%esp)
400000bf:	e8 9b 15 00 00       	call   4000165f <syscall>
}
400000c4:	c9                   	leave  
400000c5:	c3                   	ret    

400000c6 <register_irq_rpc_syscall>:

static uint32_t register_irq_rpc_syscall(uint32_t irq) {
400000c6:	55                   	push   %ebp
400000c7:	89 e5                	mov    %esp,%ebp
400000c9:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400000cc:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400000d3:	8b 45 08             	mov    0x8(%ebp),%eax
400000d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400000d9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400000e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400000e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400000ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400000f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400000f8:	89 04 24             	mov    %eax,(%esp)
400000fb:	e8 5f 15 00 00       	call   4000165f <syscall>

    return state.eax;
40000100:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000103:	c9                   	leave  
40000104:	c3                   	ret    

40000105 <register_irq_handler>:

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
40000105:	55                   	push   %ebp
40000106:	89 e5                	mov    %esp,%ebp
40000108:	83 ec 18             	sub    $0x18,%esp
    if(register_irq_rpc_syscall(irq)) {
4000010b:	8b 45 08             	mov    0x8(%ebp),%eax
4000010e:	89 04 24             	mov    %eax,(%esp)
40000111:	e8 b0 ff ff ff       	call   400000c6 <register_irq_rpc_syscall>
40000116:	85 c0                	test   %eax,%eax
40000118:	74 14                	je     4000012e <register_irq_handler+0x29>
        irq_handlers[irq] = handler;
4000011a:	8b 45 08             	mov    0x8(%ebp),%eax
4000011d:	8b 55 0c             	mov    0xc(%ebp),%edx
40000120:	89 14 85 00 30 00 40 	mov    %edx,0x40003000(,%eax,4)
        return 1;
40000127:	b8 01 00 00 00       	mov    $0x1,%eax
4000012c:	eb 05                	jmp    40000133 <register_irq_handler+0x2e>
    }
    return 0;
4000012e:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000133:	c9                   	leave  
40000134:	c3                   	ret    

40000135 <_handle_rpc>:

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
40000135:	55                   	push   %ebp
40000136:	89 e5                	mov    %esp,%ebp
40000138:	83 ec 28             	sub    $0x28,%esp
    void* localData = malloc(datasize);
4000013b:	8b 45 10             	mov    0x10(%ebp),%eax
4000013e:	89 04 24             	mov    %eax,(%esp)
40000141:	e8 dc 11 00 00       	call   40001322 <malloc>
40000146:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fetch_rpc_data(localData);
40000149:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000014c:	89 04 24             	mov    %eax,(%esp)
4000014f:	e8 36 ff ff ff       	call   4000008a <fetch_rpc_data>

    if(type == RPCT_IRQ) {
40000154:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000158:	75 2c                	jne    40000186 <_handle_rpc+0x51>
        if(irq_handlers[funcID]) {
4000015a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000015d:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
40000164:	85 c0                	test   %eax,%eax
40000166:	74 1e                	je     40000186 <_handle_rpc+0x51>
            irq_handlers[funcID](funcID);
40000168:	8b 45 0c             	mov    0xc(%ebp),%eax
4000016b:	8b 04 85 00 30 00 40 	mov    0x40003000(,%eax,4),%eax
40000172:	8b 55 0c             	mov    0xc(%ebp),%edx
40000175:	89 14 24             	mov    %edx,(%esp)
40000178:	ff d0                	call   *%eax
            return_rpc(0);
4000017a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40000181:	e8 8c fe ff ff       	call   40000012 <return_rpc>
        }
    }

    printf("Unhandled RPC!\n");
40000186:	c7 04 24 00 20 00 40 	movl   $0x40002000,(%esp)
4000018d:	e8 a0 0a 00 00       	call   40000c32 <printf>

    free(localData);
40000192:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000195:	89 04 24             	mov    %eax,(%esp)
40000198:	e8 c2 13 00 00       	call   4000155f <free>
    return_rpc(0);
4000019d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400001a4:	e8 69 fe ff ff       	call   40000012 <return_rpc>
}
400001a9:	c9                   	leave  
400001aa:	c3                   	ret    

400001ab <set_rpc_handler>:

void set_rpc_handler() {
400001ab:	55                   	push   %ebp
400001ac:	89 e5                	mov    %esp,%ebp
400001ae:	83 ec 38             	sub    $0x38,%esp
    memset(irq_handlers, 0, sizeof(irq_handlers));
400001b1:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
400001b8:	00 
400001b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400001c0:	00 
400001c1:	c7 04 24 00 30 00 40 	movl   $0x40003000,(%esp)
400001c8:	e8 d5 0b 00 00       	call   40000da2 <memset>

    struct regstate state = {
400001cd:	c7 45 e0 20 00 00 00 	movl   $0x20,-0x20(%ebp)
      .eax = 32,
      .ebx = (uint32_t)_handle_rpc,
400001d4:	b8 35 01 00 40       	mov    $0x40000135,%eax
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));

    struct regstate state = {
400001d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001dc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400001e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400001f8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001fb:	89 04 24             	mov    %eax,(%esp)
400001fe:	e8 5c 14 00 00       	call   4000165f <syscall>
}
40000203:	c9                   	leave  
40000204:	c3                   	ret    

40000205 <getargs>:
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
40000205:	55                   	push   %ebp
40000206:	89 e5                	mov    %esp,%ebp
40000208:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000020b:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000212:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000219:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000220:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000227:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000022e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000235:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000238:	89 04 24             	mov    %eax,(%esp)
4000023b:	e8 1f 14 00 00       	call   4000165f <syscall>

    return state.eax;
40000240:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000243:	c9                   	leave  
40000244:	c3                   	ret    

40000245 <_start>:

void _start() {
40000245:	55                   	push   %ebp
40000246:	89 e5                	mov    %esp,%ebp
40000248:	83 ec 28             	sub    $0x28,%esp
  char** args = (char**) getargs();
4000024b:	e8 b5 ff ff ff       	call   40000205 <getargs>
40000250:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int argc = 0;
40000253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if(args != 0) {
4000025a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
4000025e:	74 1b                	je     4000027b <_start+0x36>
      while(args[argc] != 0) {
40000260:	eb 04                	jmp    40000266 <_start+0x21>
          argc++;
40000262:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000266:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000269:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
40000270:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000273:	01 d0                	add    %edx,%eax
40000275:	8b 00                	mov    (%eax),%eax
40000277:	85 c0                	test   %eax,%eax
40000279:	75 e7                	jne    40000262 <_start+0x1d>
          argc++;
      }
  }

  set_rpc_handler();
4000027b:	e8 2b ff ff ff       	call   400001ab <set_rpc_handler>

  int result = main(argc, args);
40000280:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000283:	89 44 24 04          	mov    %eax,0x4(%esp)
40000287:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000028a:	89 04 24             	mov    %eax,(%esp)
4000028d:	e8 6e fd ff ff       	call   40000000 <main>
40000292:	89 45 ec             	mov    %eax,-0x14(%ebp)

  exit(result);
40000295:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000298:	89 04 24             	mov    %eax,(%esp)
4000029b:	e8 40 00 00 00       	call   400002e0 <exit>
}
400002a0:	c9                   	leave  
400002a1:	c3                   	ret    

400002a2 <yield>:

void yield() {
400002a2:	55                   	push   %ebp
400002a3:	89 e5                	mov    %esp,%ebp
400002a5:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400002a8:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
400002af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400002b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400002d2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002d5:	89 04 24             	mov    %eax,(%esp)
400002d8:	e8 82 13 00 00       	call   4000165f <syscall>

    return;
400002dd:	90                   	nop
}
400002de:	c9                   	leave  
400002df:	c3                   	ret    

400002e0 <exit>:

void exit(int returncode) {
400002e0:	55                   	push   %ebp
400002e1:	89 e5                	mov    %esp,%ebp
400002e3:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400002e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400002ed:	8b 45 08             	mov    0x8(%ebp),%eax
400002f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002f3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002fa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000301:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000308:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000030f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000312:	89 04 24             	mov    %eax,(%esp)
40000315:	e8 45 13 00 00       	call   4000165f <syscall>

    while(1) {
      printf("error\n");
4000031a:	c7 04 24 10 20 00 40 	movl   $0x40002010,(%esp)
40000321:	e8 0c 09 00 00       	call   40000c32 <printf>
    }
40000326:	eb f2                	jmp    4000031a <exit+0x3a>

40000328 <getExecPath>:
}

void getExecPath(char* dest) {
40000328:	55                   	push   %ebp
40000329:	89 e5                	mov    %esp,%ebp
4000032b:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000032e:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
40000335:	8b 45 08             	mov    0x8(%ebp),%eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000338:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000033b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000342:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000349:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000350:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000357:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000035a:	89 04 24             	mov    %eax,(%esp)
4000035d:	e8 fd 12 00 00       	call   4000165f <syscall>
}
40000362:	c9                   	leave  
40000363:	c3                   	ret    

40000364 <changeExecPath>:

int changeExecPath(char* path) {
40000364:	55                   	push   %ebp
40000365:	89 e5                	mov    %esp,%ebp
40000367:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000036a:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
        .eax = 7,
        .ebx = (uint32_t)path,
40000371:	8b 45 08             	mov    0x8(%ebp),%eax

    syscall(&state);
}

int changeExecPath(char* path) {
    struct regstate state = {
40000374:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000377:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000037e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000385:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000038c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000393:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000396:	89 04 24             	mov    %eax,(%esp)
40000399:	e8 c1 12 00 00       	call   4000165f <syscall>

    return state.eax;
4000039e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400003a1:	c9                   	leave  
400003a2:	c3                   	ret    

400003a3 <cd>:

void cd(char* path) {
400003a3:	55                   	push   %ebp
400003a4:	89 e5                	mov    %esp,%ebp
400003a6:	83 ec 18             	sub    $0x18,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
400003a9:	8b 45 08             	mov    0x8(%ebp),%eax
400003ac:	89 04 24             	mov    %eax,(%esp)
400003af:	e8 b0 ff ff ff       	call   40000364 <changeExecPath>
400003b4:	85 c0                	test   %eax,%eax
400003b6:	75 14                	jne    400003cc <cd+0x29>
400003b8:	e8 48 01 00 00       	call   40000505 <getLastVFSErr>
400003bd:	89 44 24 04          	mov    %eax,0x4(%esp)
400003c1:	8b 45 08             	mov    0x8(%ebp),%eax
400003c4:	89 04 24             	mov    %eax,(%esp)
400003c7:	e8 7a 00 00 00       	call   40000446 <printFilesystemError>
}
400003cc:	c9                   	leave  
400003cd:	c3                   	ret    

400003ce <exec>:

int exec(char* path, char** args) {
400003ce:	55                   	push   %ebp
400003cf:	89 e5                	mov    %esp,%ebp
400003d1:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003d4:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
400003db:	8b 45 08             	mov    0x8(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400003de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400003e1:	8b 45 0c             	mov    0xc(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400003e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400003e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400003fc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003ff:	89 04 24             	mov    %eax,(%esp)
40000402:	e8 58 12 00 00       	call   4000165f <syscall>

    return state.eax;
40000407:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000040a:	c9                   	leave  
4000040b:	c3                   	ret    

4000040c <texec>:

int texec(char* path, char** args) {
4000040c:	55                   	push   %ebp
4000040d:	89 e5                	mov    %esp,%ebp
4000040f:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = exec(path, args);
40000412:	8b 45 0c             	mov    0xc(%ebp),%eax
40000415:	89 44 24 04          	mov    %eax,0x4(%esp)
40000419:	8b 45 08             	mov    0x8(%ebp),%eax
4000041c:	89 04 24             	mov    %eax,(%esp)
4000041f:	e8 aa ff ff ff       	call   400003ce <exec>
40000424:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!res) {
40000427:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000042b:	75 14                	jne    40000441 <texec+0x35>
        printFilesystemError(path, getLastVFSErr());
4000042d:	e8 d3 00 00 00       	call   40000505 <getLastVFSErr>
40000432:	89 44 24 04          	mov    %eax,0x4(%esp)
40000436:	8b 45 08             	mov    0x8(%ebp),%eax
40000439:	89 04 24             	mov    %eax,(%esp)
4000043c:	e8 05 00 00 00       	call   40000446 <printFilesystemError>
    }

    return res;
40000441:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000444:	c9                   	leave  
40000445:	c3                   	ret    

40000446 <printFilesystemError>:

void printFilesystemError(char* path, uint32_t code) {
40000446:	55                   	push   %ebp
40000447:	89 e5                	mov    %esp,%ebp
40000449:	83 ec 18             	sub    $0x18,%esp
    switch(code) {
4000044c:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
40000450:	0f 87 8d 00 00 00    	ja     400004e3 <printFilesystemError+0x9d>
40000456:	8b 45 0c             	mov    0xc(%ebp),%eax
40000459:	c1 e0 02             	shl    $0x2,%eax
4000045c:	05 e4 20 00 40       	add    $0x400020e4,%eax
40000461:	8b 00                	mov    (%eax),%eax
40000463:	ff e0                	jmp    *%eax
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
40000465:	8b 45 08             	mov    0x8(%ebp),%eax
40000468:	89 44 24 04          	mov    %eax,0x4(%esp)
4000046c:	c7 04 24 17 20 00 40 	movl   $0x40002017,(%esp)
40000473:	e8 ba 07 00 00       	call   40000c32 <printf>
        break;
40000478:	eb 7d                	jmp    400004f7 <printFilesystemError+0xb1>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
4000047a:	8b 45 08             	mov    0x8(%ebp),%eax
4000047d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000481:	c7 04 24 2c 20 00 40 	movl   $0x4000202c,(%esp)
40000488:	e8 a5 07 00 00       	call   40000c32 <printf>
        break;
4000048d:	eb 68                	jmp    400004f7 <printFilesystemError+0xb1>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
4000048f:	8b 45 08             	mov    0x8(%ebp),%eax
40000492:	89 44 24 04          	mov    %eax,0x4(%esp)
40000496:	c7 04 24 4c 20 00 40 	movl   $0x4000204c,(%esp)
4000049d:	e8 90 07 00 00       	call   40000c32 <printf>
        break;
400004a2:	eb 53                	jmp    400004f7 <printFilesystemError+0xb1>
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
400004a4:	8b 45 08             	mov    0x8(%ebp),%eax
400004a7:	89 44 24 04          	mov    %eax,0x4(%esp)
400004ab:	c7 04 24 76 20 00 40 	movl   $0x40002076,(%esp)
400004b2:	e8 7b 07 00 00       	call   40000c32 <printf>
        break;
400004b7:	eb 3e                	jmp    400004f7 <printFilesystemError+0xb1>
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
400004b9:	8b 45 08             	mov    0x8(%ebp),%eax
400004bc:	89 44 24 04          	mov    %eax,0x4(%esp)
400004c0:	c7 04 24 8c 20 00 40 	movl   $0x4000208c,(%esp)
400004c7:	e8 66 07 00 00       	call   40000c32 <printf>
        break;
400004cc:	eb 29                	jmp    400004f7 <printFilesystemError+0xb1>
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
400004ce:	8b 45 08             	mov    0x8(%ebp),%eax
400004d1:	89 44 24 04          	mov    %eax,0x4(%esp)
400004d5:	c7 04 24 c7 20 00 40 	movl   $0x400020c7,(%esp)
400004dc:	e8 51 07 00 00       	call   40000c32 <printf>
        break;
400004e1:	eb 14                	jmp    400004f7 <printFilesystemError+0xb1>
    default:
        printf("%s: WTF", path);
400004e3:	8b 45 08             	mov    0x8(%ebp),%eax
400004e6:	89 44 24 04          	mov    %eax,0x4(%esp)
400004ea:	c7 04 24 da 20 00 40 	movl   $0x400020da,(%esp)
400004f1:	e8 3c 07 00 00       	call   40000c32 <printf>
        break;
400004f6:	90                   	nop

    }
    printf("\n");
400004f7:	c7 04 24 e2 20 00 40 	movl   $0x400020e2,(%esp)
400004fe:	e8 2f 07 00 00       	call   40000c32 <printf>
}
40000503:	c9                   	leave  
40000504:	c3                   	ret    

40000505 <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
40000505:	55                   	push   %ebp
40000506:	89 e5                	mov    %esp,%ebp
40000508:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000050b:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
40000512:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000519:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000520:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000527:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000052e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000535:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000538:	89 04 24             	mov    %eax,(%esp)
4000053b:	e8 1f 11 00 00       	call   4000165f <syscall>

    return state.eax;
40000540:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000543:	c9                   	leave  
40000544:	c3                   	ret    

40000545 <getpmhandle>:

static HANDLE getpmhandle   (uint32_t pmid) {
40000545:	55                   	push   %ebp
40000546:	89 e5                	mov    %esp,%ebp
40000548:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000054b:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
40000552:	8b 45 08             	mov    0x8(%ebp),%eax
40000555:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000558:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000055f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000566:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000056d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000574:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000577:	89 04 24             	mov    %eax,(%esp)
4000057a:	e8 e0 10 00 00       	call   4000165f <syscall>

    return (HANDLE)state.eax;
4000057f:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000582:	c9                   	leave  
40000583:	c3                   	ret    

40000584 <getstdout>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
40000584:	55                   	push   %ebp
40000585:	89 e5                	mov    %esp,%ebp
40000587:	83 ec 18             	sub    $0x18,%esp
4000058a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40000591:	e8 af ff ff ff       	call   40000545 <getpmhandle>
40000596:	c9                   	leave  
40000597:	c3                   	ret    

40000598 <getstdin>:
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
40000598:	55                   	push   %ebp
40000599:	89 e5                	mov    %esp,%ebp
4000059b:	83 ec 18             	sub    $0x18,%esp
4000059e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400005a5:	e8 9b ff ff ff       	call   40000545 <getpmhandle>
400005aa:	c9                   	leave  
400005ab:	c3                   	ret    

400005ac <getstderr>:
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };
400005ac:	55                   	push   %ebp
400005ad:	89 e5                	mov    %esp,%ebp
400005af:	83 ec 18             	sub    $0x18,%esp
400005b2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
400005b9:	e8 87 ff ff ff       	call   40000545 <getpmhandle>
400005be:	c9                   	leave  
400005bf:	c3                   	ret    

400005c0 <fopenpmhandle>:

int fopenpmhandle (uint32_t pmid, char* path) {
400005c0:	55                   	push   %ebp
400005c1:	89 e5                	mov    %esp,%ebp
400005c3:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400005c6:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400005cd:	8b 45 08             	mov    0x8(%ebp),%eax
400005d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 21,
      .ebx = pmid,
      .ecx = (uint32_t)path,
400005d3:	8b 45 0c             	mov    0xc(%ebp),%eax
static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
    struct regstate state = {
400005d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
400005d9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400005ee:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005f1:	89 04 24             	mov    %eax,(%esp)
400005f4:	e8 66 10 00 00       	call   4000165f <syscall>

    return (HANDLE)state.eax;
400005f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400005fc:	c9                   	leave  
400005fd:	c3                   	ret    

400005fe <setstdout>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
400005fe:	55                   	push   %ebp
400005ff:	89 e5                	mov    %esp,%ebp
40000601:	83 ec 18             	sub    $0x18,%esp
40000604:	8b 45 08             	mov    0x8(%ebp),%eax
40000607:	89 44 24 04          	mov    %eax,0x4(%esp)
4000060b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40000612:	e8 a9 ff ff ff       	call   400005c0 <fopenpmhandle>
40000617:	c9                   	leave  
40000618:	c3                   	ret    

40000619 <setstdin>:
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
40000619:	55                   	push   %ebp
4000061a:	89 e5                	mov    %esp,%ebp
4000061c:	83 ec 18             	sub    $0x18,%esp
4000061f:	8b 45 08             	mov    0x8(%ebp),%eax
40000622:	89 44 24 04          	mov    %eax,0x4(%esp)
40000626:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
4000062d:	e8 8e ff ff ff       	call   400005c0 <fopenpmhandle>
40000632:	c9                   	leave  
40000633:	c3                   	ret    

40000634 <setstderr>:
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
40000634:	55                   	push   %ebp
40000635:	89 e5                	mov    %esp,%ebp
40000637:	83 ec 18             	sub    $0x18,%esp
4000063a:	8b 45 08             	mov    0x8(%ebp),%eax
4000063d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000641:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000648:	e8 73 ff ff ff       	call   400005c0 <fopenpmhandle>
4000064d:	c9                   	leave  
4000064e:	c3                   	ret    

4000064f <fopen>:

HANDLE fopen(char* path, uint32_t mode) {
4000064f:	55                   	push   %ebp
40000650:	89 e5                	mov    %esp,%ebp
40000652:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000655:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
      .eax = 10,
      .ebx = (uint32_t)path,
4000065c:	8b 45 08             	mov    0x8(%ebp),%eax
int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
    struct regstate state = {
4000065f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000662:	8b 45 0c             	mov    0xc(%ebp),%eax
40000665:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000668:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000066f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000676:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000067d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000680:	89 04 24             	mov    %eax,(%esp)
40000683:	e8 d7 0f 00 00       	call   4000165f <syscall>

    return (HANDLE)state.eax;
40000688:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000068b:	c9                   	leave  
4000068c:	c3                   	ret    

4000068d <fclose>:

int fclose(uint32_t handle) {
4000068d:	55                   	push   %ebp
4000068e:	89 e5                	mov    %esp,%ebp
40000690:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000693:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
4000069a:	8b 45 08             	mov    0x8(%ebp),%eax
4000069d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006a0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400006bc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006bf:	89 04 24             	mov    %eax,(%esp)
400006c2:	e8 98 0f 00 00       	call   4000165f <syscall>

    return (int)state.eax;
400006c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400006ca:	c9                   	leave  
400006cb:	c3                   	ret    

400006cc <printrwerror>:

static void printrwerror(HANDLE handle, uint32_t res) {
400006cc:	55                   	push   %ebp
400006cd:	89 e5                	mov    %esp,%ebp
400006cf:	83 ec 18             	sub    $0x18,%esp
    if(res == RW_ERR_VFS) {
400006d2:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
400006d6:	75 13                	jne    400006eb <printrwerror+0x1f>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
400006d8:	8b 45 08             	mov    0x8(%ebp),%eax
400006db:	89 44 24 04          	mov    %eax,0x4(%esp)
400006df:	c7 04 24 fc 20 00 40 	movl   $0x400020fc,(%esp)
400006e6:	e8 47 05 00 00       	call   40000c32 <printf>
    }

    if(res == RW_ERR_DRIVER) {
400006eb:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
400006ef:	75 13                	jne    40000704 <printrwerror+0x38>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
400006f1:	8b 45 08             	mov    0x8(%ebp),%eax
400006f4:	89 44 24 04          	mov    %eax,0x4(%esp)
400006f8:	c7 04 24 14 21 00 40 	movl   $0x40002114,(%esp)
400006ff:	e8 2e 05 00 00       	call   40000c32 <printf>
    }

    if(res == RW_NOFM_READ) {
40000704:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
40000708:	75 13                	jne    4000071d <printrwerror+0x51>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
4000070a:	8b 45 08             	mov    0x8(%ebp),%eax
4000070d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000711:	c7 04 24 30 21 00 40 	movl   $0x40002130,(%esp)
40000718:	e8 15 05 00 00       	call   40000c32 <printf>
    }

    if(res == RW_NOFM_WRITE) {
4000071d:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
40000721:	75 13                	jne    40000736 <printrwerror+0x6a>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
40000723:	8b 45 08             	mov    0x8(%ebp),%eax
40000726:	89 44 24 04          	mov    %eax,0x4(%esp)
4000072a:	c7 04 24 5c 21 00 40 	movl   $0x4000215c,(%esp)
40000731:	e8 fc 04 00 00       	call   40000c32 <printf>
    }
}
40000736:	c9                   	leave  
40000737:	c3                   	ret    

40000738 <frwrite>:

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
40000738:	55                   	push   %ebp
40000739:	89 e5                	mov    %esp,%ebp
4000073b:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000073e:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
40000745:	8b 45 08             	mov    0x8(%ebp),%eax
40000748:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 12,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
4000074b:	8b 45 0c             	mov    0xc(%ebp),%eax
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
    struct regstate state = {
4000074e:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000751:	8b 45 10             	mov    0x10(%ebp),%eax
40000754:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000757:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000075e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000765:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000768:	89 04 24             	mov    %eax,(%esp)
4000076b:	e8 ef 0e 00 00       	call   4000165f <syscall>

    return (int)state.eax;
40000770:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000773:	c9                   	leave  
40000774:	c3                   	ret    

40000775 <fwrite>:

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
40000775:	55                   	push   %ebp
40000776:	89 e5                	mov    %esp,%ebp
40000778:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frwrite(handle, src, length);
4000077b:	8b 45 10             	mov    0x10(%ebp),%eax
4000077e:	89 44 24 08          	mov    %eax,0x8(%esp)
40000782:	8b 45 0c             	mov    0xc(%ebp),%eax
40000785:	89 44 24 04          	mov    %eax,0x4(%esp)
40000789:	8b 45 08             	mov    0x8(%ebp),%eax
4000078c:	89 04 24             	mov    %eax,(%esp)
4000078f:	e8 a4 ff ff ff       	call   40000738 <frwrite>
40000794:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000797:	eb 21                	jmp    400007ba <fwrite+0x45>
        yield();
40000799:	e8 04 fb ff ff       	call   400002a2 <yield>
        res = frwrite(handle, src, length);
4000079e:	8b 45 10             	mov    0x10(%ebp),%eax
400007a1:	89 44 24 08          	mov    %eax,0x8(%esp)
400007a5:	8b 45 0c             	mov    0xc(%ebp),%eax
400007a8:	89 44 24 04          	mov    %eax,0x4(%esp)
400007ac:	8b 45 08             	mov    0x8(%ebp),%eax
400007af:	89 04 24             	mov    %eax,(%esp)
400007b2:	e8 81 ff ff ff       	call   40000738 <frwrite>
400007b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
400007ba:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
400007be:	74 d9                	je     40000799 <fwrite+0x24>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
400007c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
400007c3:	89 44 24 04          	mov    %eax,0x4(%esp)
400007c7:	8b 45 08             	mov    0x8(%ebp),%eax
400007ca:	89 04 24             	mov    %eax,(%esp)
400007cd:	e8 fa fe ff ff       	call   400006cc <printrwerror>

    return res;
400007d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
400007d5:	c9                   	leave  
400007d6:	c3                   	ret    

400007d7 <frread>:

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
400007d7:	55                   	push   %ebp
400007d8:	89 e5                	mov    %esp,%ebp
400007da:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400007dd:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
400007e4:	8b 45 08             	mov    0x8(%ebp),%eax
400007e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 13,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
400007ea:	8b 45 0c             	mov    0xc(%ebp),%eax

    return res;
}

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
    struct regstate state = {
400007ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
400007f0:	8b 45 10             	mov    0x10(%ebp),%eax
400007f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
400007f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000804:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000807:	89 04 24             	mov    %eax,(%esp)
4000080a:	e8 50 0e 00 00       	call   4000165f <syscall>

    return (int)state.eax;
4000080f:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000812:	c9                   	leave  
40000813:	c3                   	ret    

40000814 <fread>:

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000814:	55                   	push   %ebp
40000815:	89 e5                	mov    %esp,%ebp
40000817:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frread(handle, dest, length);
4000081a:	8b 45 10             	mov    0x10(%ebp),%eax
4000081d:	89 44 24 08          	mov    %eax,0x8(%esp)
40000821:	8b 45 0c             	mov    0xc(%ebp),%eax
40000824:	89 44 24 04          	mov    %eax,0x4(%esp)
40000828:	8b 45 08             	mov    0x8(%ebp),%eax
4000082b:	89 04 24             	mov    %eax,(%esp)
4000082e:	e8 a4 ff ff ff       	call   400007d7 <frread>
40000833:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000836:	eb 21                	jmp    40000859 <fread+0x45>
        yield();
40000838:	e8 65 fa ff ff       	call   400002a2 <yield>
        res = frread(handle, dest, length);
4000083d:	8b 45 10             	mov    0x10(%ebp),%eax
40000840:	89 44 24 08          	mov    %eax,0x8(%esp)
40000844:	8b 45 0c             	mov    0xc(%ebp),%eax
40000847:	89 44 24 04          	mov    %eax,0x4(%esp)
4000084b:	8b 45 08             	mov    0x8(%ebp),%eax
4000084e:	89 04 24             	mov    %eax,(%esp)
40000851:	e8 81 ff ff ff       	call   400007d7 <frread>
40000856:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000859:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
4000085d:	74 d9                	je     40000838 <fread+0x24>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
4000085f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000862:	89 44 24 04          	mov    %eax,0x4(%esp)
40000866:	8b 45 08             	mov    0x8(%ebp),%eax
40000869:	89 04 24             	mov    %eax,(%esp)
4000086c:	e8 5b fe ff ff       	call   400006cc <printrwerror>

    return res;
40000871:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000874:	c9                   	leave  
40000875:	c3                   	ret    

40000876 <fmkfifo>:

HANDLE fmkfifo(char* path) {
40000876:	55                   	push   %ebp
40000877:	89 e5                	mov    %esp,%ebp
40000879:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000087c:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
      .eax = 14,
      .ebx = (uint32_t)path,
40000883:	8b 45 08             	mov    0x8(%ebp),%eax

    return res;
}

HANDLE fmkfifo(char* path) {
    struct regstate state = {
40000886:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000889:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000890:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000897:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000089e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400008a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008a8:	89 04 24             	mov    %eax,(%esp)
400008ab:	e8 af 0d 00 00       	call   4000165f <syscall>

    return (HANDLE)state.eax;
400008b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400008b3:	c9                   	leave  
400008b4:	c3                   	ret    

400008b5 <resolveHandle>:

static HANDLE resolveHandle(HANDLE hdl) {
400008b5:	55                   	push   %ebp
400008b6:	89 e5                	mov    %esp,%ebp
400008b8:	83 ec 18             	sub    $0x18,%esp
    if(hdl < 0xFFF) {
400008bb:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
400008c2:	77 0e                	ja     400008d2 <resolveHandle+0x1d>
        hdl = getpmhandle(hdl);
400008c4:	8b 45 08             	mov    0x8(%ebp),%eax
400008c7:	89 04 24             	mov    %eax,(%esp)
400008ca:	e8 76 fc ff ff       	call   40000545 <getpmhandle>
400008cf:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    return hdl;
400008d2:	8b 45 08             	mov    0x8(%ebp),%eax
}
400008d5:	c9                   	leave  
400008d6:	c3                   	ret    

400008d7 <fgetc>:

char fgetc(HANDLE hdl) {
400008d7:	55                   	push   %ebp
400008d8:	89 e5                	mov    %esp,%ebp
400008da:	83 ec 28             	sub    $0x28,%esp
    hdl = resolveHandle(hdl);
400008dd:	8b 45 08             	mov    0x8(%ebp),%eax
400008e0:	89 04 24             	mov    %eax,(%esp)
400008e3:	e8 cd ff ff ff       	call   400008b5 <resolveHandle>
400008e8:	89 45 08             	mov    %eax,0x8(%ebp)
    char in = 0;
400008eb:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
400008ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400008f3:	74 1a                	je     4000090f <fgetc+0x38>
        fread(hdl, &in, sizeof(char));
400008f5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
400008fc:	00 
400008fd:	8d 45 f7             	lea    -0x9(%ebp),%eax
40000900:	89 44 24 04          	mov    %eax,0x4(%esp)
40000904:	8b 45 08             	mov    0x8(%ebp),%eax
40000907:	89 04 24             	mov    %eax,(%esp)
4000090a:	e8 05 ff ff ff       	call   40000814 <fread>
    }
    return in;
4000090f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
40000913:	c9                   	leave  
40000914:	c3                   	ret    

40000915 <fgets>:

char* fgets(char* str, int num, HANDLE hdl) {
40000915:	55                   	push   %ebp
40000916:	89 e5                	mov    %esp,%ebp
40000918:	53                   	push   %ebx
40000919:	83 ec 24             	sub    $0x24,%esp
    for(int n = 0; n < (num - 1); n++) {
4000091c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000923:	eb 3d                	jmp    40000962 <fgets+0x4d>
        str[n] = fgetc(hdl);
40000925:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000928:	8b 45 08             	mov    0x8(%ebp),%eax
4000092b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
4000092e:	8b 45 10             	mov    0x10(%ebp),%eax
40000931:	89 04 24             	mov    %eax,(%esp)
40000934:	e8 9e ff ff ff       	call   400008d7 <fgetc>
40000939:	88 03                	mov    %al,(%ebx)
        if(str[n] == 0 || str[n] == '\0') {
4000093b:	8b 55 f4             	mov    -0xc(%ebp),%edx
4000093e:	8b 45 08             	mov    0x8(%ebp),%eax
40000941:	01 d0                	add    %edx,%eax
40000943:	0f b6 00             	movzbl (%eax),%eax
40000946:	84 c0                	test   %al,%al
40000948:	74 0f                	je     40000959 <fgets+0x44>
4000094a:	8b 55 f4             	mov    -0xc(%ebp),%edx
4000094d:	8b 45 08             	mov    0x8(%ebp),%eax
40000950:	01 d0                	add    %edx,%eax
40000952:	0f b6 00             	movzbl (%eax),%eax
40000955:	84 c0                	test   %al,%al
40000957:	75 05                	jne    4000095e <fgets+0x49>
            return str;
40000959:	8b 45 08             	mov    0x8(%ebp),%eax
4000095c:	eb 1d                	jmp    4000097b <fgets+0x66>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
4000095e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
40000962:	8b 45 0c             	mov    0xc(%ebp),%eax
40000965:	83 e8 01             	sub    $0x1,%eax
40000968:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000096b:	7f b8                	jg     40000925 <fgets+0x10>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
4000096d:	8b 55 0c             	mov    0xc(%ebp),%edx
40000970:	8b 45 08             	mov    0x8(%ebp),%eax
40000973:	01 d0                	add    %edx,%eax
40000975:	c6 00 00             	movb   $0x0,(%eax)
    return str;
40000978:	8b 45 08             	mov    0x8(%ebp),%eax
}
4000097b:	83 c4 24             	add    $0x24,%esp
4000097e:	5b                   	pop    %ebx
4000097f:	5d                   	pop    %ebp
40000980:	c3                   	ret    

40000981 <getc>:

char getc(HANDLE hdl) {
40000981:	55                   	push   %ebp
40000982:	89 e5                	mov    %esp,%ebp
40000984:	83 ec 18             	sub    $0x18,%esp
    return fgetc(hdl);
40000987:	8b 45 08             	mov    0x8(%ebp),%eax
4000098a:	89 04 24             	mov    %eax,(%esp)
4000098d:	e8 45 ff ff ff       	call   400008d7 <fgetc>
}
40000992:	c9                   	leave  
40000993:	c3                   	ret    

40000994 <getchar>:

char getchar() {
40000994:	55                   	push   %ebp
40000995:	89 e5                	mov    %esp,%ebp
40000997:	83 ec 18             	sub    $0x18,%esp
    return fgetc(PMID_STDIN);
4000099a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400009a1:	e8 31 ff ff ff       	call   400008d7 <fgetc>
}
400009a6:	c9                   	leave  
400009a7:	c3                   	ret    

400009a8 <getln>:

char* getln(char* str) {
400009a8:	55                   	push   %ebp
400009a9:	89 e5                	mov    %esp,%ebp
400009ab:	83 ec 28             	sub    $0x28,%esp
    uint32_t index = 0;
400009ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char lastChar = 0;
400009b5:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)

    while((lastChar = fgetc(PMID_STDIN))) {
400009b9:	eb 5b                	jmp    40000a16 <getln+0x6e>
        if(lastChar == '\n') {
400009bb:	80 7d f3 0a          	cmpb   $0xa,-0xd(%ebp)
400009bf:	75 0e                	jne    400009cf <getln+0x27>
            putchar('\n');
400009c1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
400009c8:	e8 b4 00 00 00       	call   40000a81 <putchar>
            break;
400009cd:	eb 5c                	jmp    40000a2b <getln+0x83>
        }

        if(lastChar == 8) {
400009cf:	80 7d f3 08          	cmpb   $0x8,-0xd(%ebp)
400009d3:	75 23                	jne    400009f8 <getln+0x50>
            if(index != 0) {
400009d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400009d9:	74 10                	je     400009eb <getln+0x43>
                index--;
400009db:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
                putchar(8);
400009df:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
400009e6:	e8 96 00 00 00       	call   40000a81 <putchar>
            }
            str[index] = 0;
400009eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
400009ee:	8b 55 08             	mov    0x8(%ebp),%edx
400009f1:	01 d0                	add    %edx,%eax
400009f3:	c6 00 00             	movb   $0x0,(%eax)
            continue;
400009f6:	eb 1e                	jmp    40000a16 <getln+0x6e>
        }

        str[index] = lastChar;
400009f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
400009fb:	8b 55 08             	mov    0x8(%ebp),%edx
400009fe:	01 c2                	add    %eax,%edx
40000a00:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
40000a04:	88 02                	mov    %al,(%edx)
        putchar(lastChar);
40000a06:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000a0a:	89 04 24             	mov    %eax,(%esp)
40000a0d:	e8 6f 00 00 00       	call   40000a81 <putchar>

        index++;
40000a12:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000a16:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000a1d:	e8 b5 fe ff ff       	call   400008d7 <fgetc>
40000a22:	88 45 f3             	mov    %al,-0xd(%ebp)
40000a25:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
40000a29:	75 90                	jne    400009bb <getln+0x13>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000a2e:	8b 55 08             	mov    0x8(%ebp),%edx
40000a31:	01 d0                	add    %edx,%eax
40000a33:	c6 00 00             	movb   $0x0,(%eax)

    return str;
40000a36:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000a39:	c9                   	leave  
40000a3a:	c3                   	ret    

40000a3b <kputc>:

static int kputc(char c) {
40000a3b:	55                   	push   %ebp
40000a3c:	89 e5                	mov    %esp,%ebp
40000a3e:	83 ec 38             	sub    $0x38,%esp
40000a41:	8b 45 08             	mov    0x8(%ebp),%eax
40000a44:	88 45 d4             	mov    %al,-0x2c(%ebp)
  struct regstate state = {
40000a47:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
    .eax = 201,
    .ebx = (uint32_t)c,
40000a4e:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax

    return str;
}

static int kputc(char c) {
  struct regstate state = {
40000a52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a55:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000a5c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000a63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000a6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000a71:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a74:	89 04 24             	mov    %eax,(%esp)
40000a77:	e8 e3 0b 00 00       	call   4000165f <syscall>
  
  return state.eax;
40000a7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000a7f:	c9                   	leave  
40000a80:	c3                   	ret    

40000a81 <putchar>:

int putchar(char c) {
40000a81:	55                   	push   %ebp
40000a82:	89 e5                	mov    %esp,%ebp
40000a84:	83 ec 18             	sub    $0x18,%esp
40000a87:	8b 45 08             	mov    0x8(%ebp),%eax
40000a8a:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, PMID_STDOUT);
40000a8d:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000a91:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000a98:	00 
40000a99:	89 04 24             	mov    %eax,(%esp)
40000a9c:	e8 23 00 00 00       	call   40000ac4 <fputc>
}
40000aa1:	c9                   	leave  
40000aa2:	c3                   	ret    

40000aa3 <putc>:

int putc(char c, HANDLE hdl) {
40000aa3:	55                   	push   %ebp
40000aa4:	89 e5                	mov    %esp,%ebp
40000aa6:	83 ec 18             	sub    $0x18,%esp
40000aa9:	8b 45 08             	mov    0x8(%ebp),%eax
40000aac:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, hdl);
40000aaf:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000ab3:	8b 55 0c             	mov    0xc(%ebp),%edx
40000ab6:	89 54 24 04          	mov    %edx,0x4(%esp)
40000aba:	89 04 24             	mov    %eax,(%esp)
40000abd:	e8 02 00 00 00       	call   40000ac4 <fputc>
}
40000ac2:	c9                   	leave  
40000ac3:	c3                   	ret    

40000ac4 <fputc>:

int fputc(char c, HANDLE hdl) {
40000ac4:	55                   	push   %ebp
40000ac5:	89 e5                	mov    %esp,%ebp
40000ac7:	83 ec 18             	sub    $0x18,%esp
40000aca:	8b 45 08             	mov    0x8(%ebp),%eax
40000acd:	88 45 f4             	mov    %al,-0xc(%ebp)
    hdl = resolveHandle(hdl);
40000ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ad3:	89 04 24             	mov    %eax,(%esp)
40000ad6:	e8 da fd ff ff       	call   400008b5 <resolveHandle>
40000adb:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000ade:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000ae2:	74 1c                	je     40000b00 <fputc+0x3c>
        return fwrite(hdl, &c, sizeof(char));
40000ae4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000aeb:	00 
40000aec:	8d 45 f4             	lea    -0xc(%ebp),%eax
40000aef:	89 44 24 04          	mov    %eax,0x4(%esp)
40000af3:	8b 45 0c             	mov    0xc(%ebp),%eax
40000af6:	89 04 24             	mov    %eax,(%esp)
40000af9:	e8 77 fc ff ff       	call   40000775 <fwrite>
40000afe:	eb 0f                	jmp    40000b0f <fputc+0x4b>
    }
    return kputc(c);
40000b00:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
40000b04:	0f be c0             	movsbl %al,%eax
40000b07:	89 04 24             	mov    %eax,(%esp)
40000b0a:	e8 2c ff ff ff       	call   40000a3b <kputc>
}
40000b0f:	c9                   	leave  
40000b10:	c3                   	ret    

40000b11 <kputs>:

static int kputs(const char* cp) {
40000b11:	55                   	push   %ebp
40000b12:	89 e5                	mov    %esp,%ebp
40000b14:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40000b17:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
    .eax = 202,
    .ebx = (uint32_t)cp,
40000b1e:	8b 45 08             	mov    0x8(%ebp),%eax
    }
    return kputc(c);
}

static int kputs(const char* cp) {
  struct regstate state = {
40000b21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b24:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b2b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000b40:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000b43:	89 04 24             	mov    %eax,(%esp)
40000b46:	e8 14 0b 00 00       	call   4000165f <syscall>
  
  return state.eax;
40000b4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000b4e:	c9                   	leave  
40000b4f:	c3                   	ret    

40000b50 <puts>:

int puts(const char* c) {
40000b50:	55                   	push   %ebp
40000b51:	89 e5                	mov    %esp,%ebp
40000b53:	83 ec 18             	sub    $0x18,%esp
    return fputs(c, PMID_STDOUT);
40000b56:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000b5d:	00 
40000b5e:	8b 45 08             	mov    0x8(%ebp),%eax
40000b61:	89 04 24             	mov    %eax,(%esp)
40000b64:	e8 02 00 00 00       	call   40000b6b <fputs>
}
40000b69:	c9                   	leave  
40000b6a:	c3                   	ret    

40000b6b <fputs>:

int fputs(const char* c, HANDLE hdl) {
40000b6b:	55                   	push   %ebp
40000b6c:	89 e5                	mov    %esp,%ebp
40000b6e:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000b71:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b74:	89 04 24             	mov    %eax,(%esp)
40000b77:	e8 39 fd ff ff       	call   400008b5 <resolveHandle>
40000b7c:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000b7f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000b83:	74 23                	je     40000ba8 <fputs+0x3d>
        return fwrite(hdl, c, strlen(c));
40000b85:	8b 45 08             	mov    0x8(%ebp),%eax
40000b88:	89 04 24             	mov    %eax,(%esp)
40000b8b:	e8 68 03 00 00       	call   40000ef8 <strlen>
40000b90:	89 44 24 08          	mov    %eax,0x8(%esp)
40000b94:	8b 45 08             	mov    0x8(%ebp),%eax
40000b97:	89 44 24 04          	mov    %eax,0x4(%esp)
40000b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b9e:	89 04 24             	mov    %eax,(%esp)
40000ba1:	e8 cf fb ff ff       	call   40000775 <fwrite>
40000ba6:	eb 0b                	jmp    40000bb3 <fputs+0x48>
    }
    return kputs(c);
40000ba8:	8b 45 08             	mov    0x8(%ebp),%eax
40000bab:	89 04 24             	mov    %eax,(%esp)
40000bae:	e8 5e ff ff ff       	call   40000b11 <kputs>
}
40000bb3:	c9                   	leave  
40000bb4:	c3                   	ret    

40000bb5 <putn>:

static int putn(unsigned long x, int base)
{
40000bb5:	55                   	push   %ebp
40000bb6:	89 e5                	mov    %esp,%ebp
40000bb8:	53                   	push   %ebx
40000bb9:	83 ec 64             	sub    $0x64,%esp
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
40000bbc:	c7 45 ec 88 21 00 40 	movl   $0x40002188,-0x14(%ebp)
  char* p;
  int wrt = 0;
40000bc3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  if (base > 36) {
40000bca:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000bce:	7e 07                	jle    40000bd7 <putn+0x22>
    return 0;
40000bd0:	b8 00 00 00 00       	mov    $0x0,%eax
40000bd5:	eb 55                	jmp    40000c2c <putn+0x77>
  }

  p = buf + 64;
40000bd7:	8d 45 ab             	lea    -0x55(%ebp),%eax
40000bda:	83 c0 40             	add    $0x40,%eax
40000bdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  *p = '\0';
40000be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000be3:	c6 00 00             	movb   $0x0,(%eax)
  do {
    wrt++;
40000be6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    *--p = digits[x % base];
40000bea:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
40000bee:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000bf1:	8b 45 08             	mov    0x8(%ebp),%eax
40000bf4:	ba 00 00 00 00       	mov    $0x0,%edx
40000bf9:	f7 f1                	div    %ecx
40000bfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000bfe:	01 d0                	add    %edx,%eax
40000c00:	0f b6 10             	movzbl (%eax),%edx
40000c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c06:	88 10                	mov    %dl,(%eax)
    x /= base;
40000c08:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c0b:	8b 45 08             	mov    0x8(%ebp),%eax
40000c0e:	ba 00 00 00 00       	mov    $0x0,%edx
40000c13:	f7 f3                	div    %ebx
40000c15:	89 45 08             	mov    %eax,0x8(%ebp)
  } while (x);
40000c18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000c1c:	75 c8                	jne    40000be6 <putn+0x31>
  puts(p);
40000c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c21:	89 04 24             	mov    %eax,(%esp)
40000c24:	e8 27 ff ff ff       	call   40000b50 <puts>
  
  return wrt;
40000c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40000c2c:	83 c4 64             	add    $0x64,%esp
40000c2f:	5b                   	pop    %ebx
40000c30:	5d                   	pop    %ebp
40000c31:	c3                   	ret    

40000c32 <printf>:

int printf(const char* fmt, ...)
{
40000c32:	55                   	push   %ebp
40000c33:	89 e5                	mov    %esp,%ebp
40000c35:	83 ec 38             	sub    $0x38,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;
	int wrt = 0;
40000c38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  va_start(ap, fmt);
40000c3f:	8d 45 0c             	lea    0xc(%ebp),%eax
40000c42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while (*fmt) {
40000c45:	e9 42 01 00 00       	jmp    40000d8c <printf+0x15a>
    if (*fmt == '%') {
40000c4a:	8b 45 08             	mov    0x8(%ebp),%eax
40000c4d:	0f b6 00             	movzbl (%eax),%eax
40000c50:	3c 25                	cmp    $0x25,%al
40000c52:	0f 85 1c 01 00 00    	jne    40000d74 <printf+0x142>
      fmt++;
40000c58:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
40000c5c:	8b 45 08             	mov    0x8(%ebp),%eax
40000c5f:	0f b6 00             	movzbl (%eax),%eax
40000c62:	0f be c0             	movsbl %al,%eax
40000c65:	83 f8 64             	cmp    $0x64,%eax
40000c68:	74 68                	je     40000cd2 <printf+0xa0>
40000c6a:	83 f8 64             	cmp    $0x64,%eax
40000c6d:	7f 1f                	jg     40000c8e <printf+0x5c>
40000c6f:	83 f8 25             	cmp    $0x25,%eax
40000c72:	0f 84 c5 00 00 00    	je     40000d3d <printf+0x10b>
40000c78:	83 f8 63             	cmp    $0x63,%eax
40000c7b:	0f 84 9d 00 00 00    	je     40000d1e <printf+0xec>
40000c81:	85 c0                	test   %eax,%eax
40000c83:	0f 84 13 01 00 00    	je     40000d9c <printf+0x16a>
40000c89:	e9 c0 00 00 00       	jmp    40000d4e <printf+0x11c>
40000c8e:	83 f8 73             	cmp    $0x73,%eax
40000c91:	74 1e                	je     40000cb1 <printf+0x7f>
40000c93:	83 f8 73             	cmp    $0x73,%eax
40000c96:	7f 0a                	jg     40000ca2 <printf+0x70>
40000c98:	83 f8 70             	cmp    $0x70,%eax
40000c9b:	74 5b                	je     40000cf8 <printf+0xc6>
40000c9d:	e9 ac 00 00 00       	jmp    40000d4e <printf+0x11c>
40000ca2:	83 f8 75             	cmp    $0x75,%eax
40000ca5:	74 2b                	je     40000cd2 <printf+0xa0>
40000ca7:	83 f8 78             	cmp    $0x78,%eax
40000caa:	74 4c                	je     40000cf8 <printf+0xc6>
40000cac:	e9 9d 00 00 00       	jmp    40000d4e <printf+0x11c>
        case 's':
          s = va_arg(ap, char*);
40000cb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000cb4:	8d 50 04             	lea    0x4(%eax),%edx
40000cb7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000cba:	8b 00                	mov    (%eax),%eax
40000cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
          wrt += puts(s);
40000cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000cc2:	89 04 24             	mov    %eax,(%esp)
40000cc5:	e8 86 fe ff ff       	call   40000b50 <puts>
40000cca:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000ccd:	e9 a0 00 00 00       	jmp    40000d72 <printf+0x140>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000cd5:	8d 50 04             	lea    0x4(%eax),%edx
40000cd8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000cdb:	8b 00                	mov    (%eax),%eax
40000cdd:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 10);
40000ce0:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
40000ce7:	00 
40000ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000ceb:	89 04 24             	mov    %eax,(%esp)
40000cee:	e8 c2 fe ff ff       	call   40000bb5 <putn>
40000cf3:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000cf6:	eb 7a                	jmp    40000d72 <printf+0x140>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000cf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000cfb:	8d 50 04             	lea    0x4(%eax),%edx
40000cfe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d01:	8b 00                	mov    (%eax),%eax
40000d03:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 16);
40000d06:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
40000d0d:	00 
40000d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000d11:	89 04 24             	mov    %eax,(%esp)
40000d14:	e8 9c fe ff ff       	call   40000bb5 <putn>
40000d19:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d1c:	eb 54                	jmp    40000d72 <printf+0x140>
        case 'c':
          c = va_arg(ap, int);
40000d1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000d21:	8d 50 04             	lea    0x4(%eax),%edx
40000d24:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000d27:	8b 00                	mov    (%eax),%eax
40000d29:	88 45 eb             	mov    %al,-0x15(%ebp)
          wrt += putchar(c);
40000d2c:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
40000d30:	89 04 24             	mov    %eax,(%esp)
40000d33:	e8 49 fd ff ff       	call   40000a81 <putchar>
40000d38:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d3b:	eb 35                	jmp    40000d72 <printf+0x140>
        case '%':
          wrt += putchar('%');
40000d3d:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000d44:	e8 38 fd ff ff       	call   40000a81 <putchar>
40000d49:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d4c:	eb 24                	jmp    40000d72 <printf+0x140>
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000d4e:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000d55:	e8 27 fd ff ff       	call   40000a81 <putchar>
40000d5a:	01 45 f4             	add    %eax,-0xc(%ebp)
          wrt += putchar(*fmt);
40000d5d:	8b 45 08             	mov    0x8(%ebp),%eax
40000d60:	0f b6 00             	movzbl (%eax),%eax
40000d63:	0f be c0             	movsbl %al,%eax
40000d66:	89 04 24             	mov    %eax,(%esp)
40000d69:	e8 13 fd ff ff       	call   40000a81 <putchar>
40000d6e:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000d71:	90                   	nop
40000d72:	eb 14                	jmp    40000d88 <printf+0x156>
      }
    } else {
      wrt += putchar(*fmt);
40000d74:	8b 45 08             	mov    0x8(%ebp),%eax
40000d77:	0f b6 00             	movzbl (%eax),%eax
40000d7a:	0f be c0             	movsbl %al,%eax
40000d7d:	89 04 24             	mov    %eax,(%esp)
40000d80:	e8 fc fc ff ff       	call   40000a81 <putchar>
40000d85:	01 45 f4             	add    %eax,-0xc(%ebp)
    }

    fmt++;
40000d88:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000d8c:	8b 45 08             	mov    0x8(%ebp),%eax
40000d8f:	0f b6 00             	movzbl (%eax),%eax
40000d92:	84 c0                	test   %al,%al
40000d94:	0f 85 b0 fe ff ff    	jne    40000c4a <printf+0x18>
40000d9a:	eb 01                	jmp    40000d9d <printf+0x16b>
          break;
        case '%':
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
40000d9c:	90                   	nop
  }

out:
  va_end(ap);

  return wrt;
40000d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000da0:	c9                   	leave  
40000da1:	c3                   	ret    

40000da2 <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000da2:	55                   	push   %ebp
40000da3:	89 e5                	mov    %esp,%ebp
40000da5:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
40000da8:	8b 45 08             	mov    0x8(%ebp),%eax
40000dab:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
40000dae:	eb 0e                	jmp    40000dbe <memset+0x1c>
        *p++ = c;
40000db0:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000db3:	8d 50 01             	lea    0x1(%eax),%edx
40000db6:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000db9:	8b 55 0c             	mov    0xc(%ebp),%edx
40000dbc:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000dbe:	8b 45 10             	mov    0x10(%ebp),%eax
40000dc1:	8d 50 ff             	lea    -0x1(%eax),%edx
40000dc4:	89 55 10             	mov    %edx,0x10(%ebp)
40000dc7:	85 c0                	test   %eax,%eax
40000dc9:	75 e5                	jne    40000db0 <memset+0xe>
        *p++ = c;
    }

    return buf;
40000dcb:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000dce:	c9                   	leave  
40000dcf:	c3                   	ret    

40000dd0 <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000dd0:	55                   	push   %ebp
40000dd1:	89 e5                	mov    %esp,%ebp
40000dd3:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
40000dd6:	8b 45 08             	mov    0x8(%ebp),%eax
40000dd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
40000ddc:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ddf:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
40000de2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000de6:	75 07                	jne    40000def <memcpy+0x1f>
40000de8:	b8 00 00 00 00       	mov    $0x0,%eax
40000ded:	eb 29                	jmp    40000e18 <memcpy+0x48>

    while (n--) {
40000def:	eb 17                	jmp    40000e08 <memcpy+0x38>
        *(d++) = *(s++);
40000df1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000df4:	8d 50 01             	lea    0x1(%eax),%edx
40000df7:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000dfa:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000dfd:	8d 4a 01             	lea    0x1(%edx),%ecx
40000e00:	89 4d f8             	mov    %ecx,-0x8(%ebp)
40000e03:	0f b6 12             	movzbl (%edx),%edx
40000e06:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000e08:	8b 45 10             	mov    0x10(%ebp),%eax
40000e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
40000e0e:	89 55 10             	mov    %edx,0x10(%ebp)
40000e11:	85 c0                	test   %eax,%eax
40000e13:	75 dc                	jne    40000df1 <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
40000e15:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000e18:	c9                   	leave  
40000e19:	c3                   	ret    

40000e1a <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000e1a:	55                   	push   %ebp
40000e1b:	89 e5                	mov    %esp,%ebp
40000e1d:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
40000e20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000e24:	75 07                	jne    40000e2d <memcmp+0x13>
        return -1;
40000e26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000e2b:	eb 7c                	jmp    40000ea9 <memcmp+0x8f>
    if (ptr2 == 0)
40000e2d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000e31:	75 07                	jne    40000e3a <memcmp+0x20>
        return 1;
40000e33:	b8 01 00 00 00       	mov    $0x1,%eax
40000e38:	eb 6f                	jmp    40000ea9 <memcmp+0x8f>
    if (num == 0)
40000e3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000e3e:	75 07                	jne    40000e47 <memcmp+0x2d>
        return 0;
40000e40:	b8 00 00 00 00       	mov    $0x0,%eax
40000e45:	eb 62                	jmp    40000ea9 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
40000e47:	8b 45 08             	mov    0x8(%ebp),%eax
40000e4a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
40000e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000e50:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
40000e53:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000e5a:	eb 40                	jmp    40000e9c <memcmp+0x82>
        if (pa[i] != pb[i]) {
40000e5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e5f:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000e62:	01 d0                	add    %edx,%eax
40000e64:	0f b6 10             	movzbl (%eax),%edx
40000e67:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e6a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000e6d:	01 c8                	add    %ecx,%eax
40000e6f:	0f b6 00             	movzbl (%eax),%eax
40000e72:	38 c2                	cmp    %al,%dl
40000e74:	74 22                	je     40000e98 <memcmp+0x7e>
            return pa[i] - pb[i];
40000e76:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e79:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000e7c:	01 d0                	add    %edx,%eax
40000e7e:	0f b6 00             	movzbl (%eax),%eax
40000e81:	0f b6 d0             	movzbl %al,%edx
40000e84:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e87:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000e8a:	01 c8                	add    %ecx,%eax
40000e8c:	0f b6 00             	movzbl (%eax),%eax
40000e8f:	0f b6 c0             	movzbl %al,%eax
40000e92:	29 c2                	sub    %eax,%edx
40000e94:	89 d0                	mov    %edx,%eax
40000e96:	eb 11                	jmp    40000ea9 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000e98:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e9f:	3b 45 10             	cmp    0x10(%ebp),%eax
40000ea2:	72 b8                	jb     40000e5c <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
40000ea4:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000ea9:	c9                   	leave  
40000eaa:	c3                   	ret    

40000eab <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000eab:	55                   	push   %ebp
40000eac:	89 e5                	mov    %esp,%ebp
40000eae:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
40000eb1:	8b 45 08             	mov    0x8(%ebp),%eax
40000eb4:	89 04 24             	mov    %eax,(%esp)
40000eb7:	e8 3c 00 00 00       	call   40000ef8 <strlen>
40000ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
40000ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ec2:	89 04 24             	mov    %eax,(%esp)
40000ec5:	e8 2e 00 00 00       	call   40000ef8 <strlen>
40000eca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
40000ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ed0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
40000ed3:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
40000ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40000eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000edd:	83 c0 01             	add    $0x1,%eax
40000ee0:	89 44 24 08          	mov    %eax,0x8(%esp)
40000ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ee7:	89 44 24 04          	mov    %eax,0x4(%esp)
40000eeb:	8b 45 08             	mov    0x8(%ebp),%eax
40000eee:	89 04 24             	mov    %eax,(%esp)
40000ef1:	e8 24 ff ff ff       	call   40000e1a <memcmp>
}
40000ef6:	c9                   	leave  
40000ef7:	c3                   	ret    

40000ef8 <strlen>:

unsigned int strlen(const char* str) {
40000ef8:	55                   	push   %ebp
40000ef9:	89 e5                	mov    %esp,%ebp
40000efb:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
40000efe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000f02:	75 07                	jne    40000f0b <strlen+0x13>
        return 0;
40000f04:	b8 00 00 00 00       	mov    $0x0,%eax
40000f09:	eb 1f                	jmp    40000f2a <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000f0b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000f12:	eb 04                	jmp    40000f18 <strlen+0x20>
40000f14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000f18:	8b 55 fc             	mov    -0x4(%ebp),%edx
40000f1b:	8b 45 08             	mov    0x8(%ebp),%eax
40000f1e:	01 d0                	add    %edx,%eax
40000f20:	0f b6 00             	movzbl (%eax),%eax
40000f23:	84 c0                	test   %al,%al
40000f25:	75 ed                	jne    40000f14 <strlen+0x1c>
        ;
    return i;
40000f27:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
40000f2a:	c9                   	leave  
40000f2b:	c3                   	ret    

40000f2c <strcpy>:

char* strcpy(char* dest, const char* src) {
40000f2c:	55                   	push   %ebp
40000f2d:	89 e5                	mov    %esp,%ebp
40000f2f:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
40000f32:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f35:	89 04 24             	mov    %eax,(%esp)
40000f38:	e8 bb ff ff ff       	call   40000ef8 <strlen>
40000f3d:	83 c0 01             	add    $0x1,%eax
40000f40:	89 44 24 08          	mov    %eax,0x8(%esp)
40000f44:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f47:	89 44 24 04          	mov    %eax,0x4(%esp)
40000f4b:	8b 45 08             	mov    0x8(%ebp),%eax
40000f4e:	89 04 24             	mov    %eax,(%esp)
40000f51:	e8 7a fe ff ff       	call   40000dd0 <memcpy>
    return dest;
40000f56:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000f59:	c9                   	leave  
40000f5a:	c3                   	ret    

40000f5b <strclone>:

char* strclone(char* str) {
40000f5b:	55                   	push   %ebp
40000f5c:	89 e5                	mov    %esp,%ebp
40000f5e:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000f61:	8b 45 08             	mov    0x8(%ebp),%eax
40000f64:	89 04 24             	mov    %eax,(%esp)
40000f67:	e8 8c ff ff ff       	call   40000ef8 <strlen>
40000f6c:	83 c0 01             	add    $0x1,%eax
40000f6f:	89 04 24             	mov    %eax,(%esp)
40000f72:	e8 ab 03 00 00       	call   40001322 <malloc>
40000f77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
40000f7a:	8b 45 08             	mov    0x8(%ebp),%eax
40000f7d:	89 44 24 04          	mov    %eax,0x4(%esp)
40000f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000f84:	89 04 24             	mov    %eax,(%esp)
40000f87:	e8 a0 ff ff ff       	call   40000f2c <strcpy>

    return ret;
40000f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000f8f:	c9                   	leave  
40000f90:	c3                   	ret    

40000f91 <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
40000f91:	55                   	push   %ebp
40000f92:	89 e5                	mov    %esp,%ebp
40000f94:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40000f97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000f9b:	74 3c                	je     40000fd9 <strtok+0x48>
        if(fr != 0) {
40000f9d:	a1 04 32 00 40       	mov    0x40003204,%eax
40000fa2:	85 c0                	test   %eax,%eax
40000fa4:	74 0d                	je     40000fb3 <strtok+0x22>
            free(fr);
40000fa6:	a1 04 32 00 40       	mov    0x40003204,%eax
40000fab:	89 04 24             	mov    %eax,(%esp)
40000fae:	e8 ac 05 00 00       	call   4000155f <free>
        }
        fr = strclone(str);
40000fb3:	8b 45 08             	mov    0x8(%ebp),%eax
40000fb6:	89 04 24             	mov    %eax,(%esp)
40000fb9:	e8 9d ff ff ff       	call   40000f5b <strclone>
40000fbe:	a3 04 32 00 40       	mov    %eax,0x40003204
        return strtoknc(fr, delimiters);
40000fc3:	a1 04 32 00 40       	mov    0x40003204,%eax
40000fc8:	8b 55 0c             	mov    0xc(%ebp),%edx
40000fcb:	89 54 24 04          	mov    %edx,0x4(%esp)
40000fcf:	89 04 24             	mov    %eax,(%esp)
40000fd2:	e8 17 00 00 00       	call   40000fee <strtoknc>
40000fd7:	eb 13                	jmp    40000fec <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
40000fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
40000fdc:	89 44 24 04          	mov    %eax,0x4(%esp)
40000fe0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40000fe7:	e8 02 00 00 00       	call   40000fee <strtoknc>
}
40000fec:	c9                   	leave  
40000fed:	c3                   	ret    

40000fee <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
40000fee:	55                   	push   %ebp
40000fef:	89 e5                	mov    %esp,%ebp
40000ff1:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
40000ff4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
40000ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ffe:	89 04 24             	mov    %eax,(%esp)
40001001:	e8 f2 fe ff ff       	call   40000ef8 <strlen>
40001006:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
40001009:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000100d:	75 0a                	jne    40001019 <strtoknc+0x2b>
        return 0;
4000100f:	b8 00 00 00 00       	mov    $0x0,%eax
40001014:	e9 ef 00 00 00       	jmp    40001108 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
40001019:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000101d:	75 13                	jne    40001032 <strtoknc+0x44>
4000101f:	a1 00 32 00 40       	mov    0x40003200,%eax
40001024:	85 c0                	test   %eax,%eax
40001026:	75 0a                	jne    40001032 <strtoknc+0x44>
        return 0;
40001028:	b8 00 00 00 00       	mov    $0x0,%eax
4000102d:	e9 d6 00 00 00       	jmp    40001108 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
40001032:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001036:	74 08                	je     40001040 <strtoknc+0x52>
        sp = str;
40001038:	8b 45 08             	mov    0x8(%ebp),%eax
4000103b:	a3 00 32 00 40       	mov    %eax,0x40003200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
40001040:	a1 00 32 00 40       	mov    0x40003200,%eax
40001045:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
40001048:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000104f:	eb 1f                	jmp    40001070 <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
40001051:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001054:	0f b6 10             	movzbl (%eax),%edx
40001057:	8b 4d fc             	mov    -0x4(%ebp),%ecx
4000105a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000105d:	01 c8                	add    %ecx,%eax
4000105f:	0f b6 00             	movzbl (%eax),%eax
40001062:	38 c2                	cmp    %al,%dl
40001064:	75 06                	jne    4000106c <strtoknc+0x7e>
                p_start++;
40001066:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
4000106a:	eb 0c                	jmp    40001078 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
4000106c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40001070:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001073:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40001076:	7c d9                	jl     40001051 <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
40001078:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000107b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000107e:	75 17                	jne    40001097 <strtoknc+0xa9>
            sp = p_start;
40001080:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001083:	a3 00 32 00 40       	mov    %eax,0x40003200
            break;
40001088:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
40001089:	a1 00 32 00 40       	mov    0x40003200,%eax
4000108e:	0f b6 00             	movzbl (%eax),%eax
40001091:	84 c0                	test   %al,%al
40001093:	75 15                	jne    400010aa <strtoknc+0xbc>
40001095:	eb 02                	jmp    40001099 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
40001097:	eb af                	jmp    40001048 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
40001099:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
400010a0:	00 00 00 
        return sp;
400010a3:	a1 00 32 00 40       	mov    0x40003200,%eax
400010a8:	eb 5e                	jmp    40001108 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400010aa:	eb 4d                	jmp    400010f9 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
400010ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
400010b3:	eb 25                	jmp    400010da <strtoknc+0xec>
            if (*sp == delimiters[i]) {
400010b5:	a1 00 32 00 40       	mov    0x40003200,%eax
400010ba:	0f b6 10             	movzbl (%eax),%edx
400010bd:	8b 4d fc             	mov    -0x4(%ebp),%ecx
400010c0:	8b 45 0c             	mov    0xc(%ebp),%eax
400010c3:	01 c8                	add    %ecx,%eax
400010c5:	0f b6 00             	movzbl (%eax),%eax
400010c8:	38 c2                	cmp    %al,%dl
400010ca:	75 0a                	jne    400010d6 <strtoknc+0xe8>
                *sp = '\0';
400010cc:	a1 00 32 00 40       	mov    0x40003200,%eax
400010d1:	c6 00 00             	movb   $0x0,(%eax)
                break;
400010d4:	eb 0c                	jmp    400010e2 <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
400010d6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
400010da:	8b 45 fc             	mov    -0x4(%ebp),%eax
400010dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400010e0:	7c d3                	jl     400010b5 <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
400010e2:	a1 00 32 00 40       	mov    0x40003200,%eax
400010e7:	83 c0 01             	add    $0x1,%eax
400010ea:	a3 00 32 00 40       	mov    %eax,0x40003200
        if (i < len)
400010ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
400010f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400010f5:	7d 02                	jge    400010f9 <strtoknc+0x10b>
            break;
400010f7:	eb 0c                	jmp    40001105 <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400010f9:	a1 00 32 00 40       	mov    0x40003200,%eax
400010fe:	0f b6 00             	movzbl (%eax),%eax
40001101:	84 c0                	test   %al,%al
40001103:	75 a7                	jne    400010ac <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
40001105:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
40001108:	c9                   	leave  
40001109:	c3                   	ret    

4000110a <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
4000110a:	55                   	push   %ebp
4000110b:	89 e5                	mov    %esp,%ebp
4000110d:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
40001110:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
40001117:	8b 45 08             	mov    0x8(%ebp),%eax
4000111a:	8b 00                	mov    (%eax),%eax
4000111c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
4000111f:	eb 38                	jmp    40001159 <remove_from_list+0x4f>
        if (cur == element) {
40001121:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001124:	3b 45 0c             	cmp    0xc(%ebp),%eax
40001127:	75 21                	jne    4000114a <remove_from_list+0x40>
            if (last == 0) {
40001129:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
4000112d:	75 0d                	jne    4000113c <remove_from_list+0x32>
                *root = cur->next;
4000112f:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001132:	8b 50 08             	mov    0x8(%eax),%edx
40001135:	8b 45 08             	mov    0x8(%ebp),%eax
40001138:	89 10                	mov    %edx,(%eax)
                return;
4000113a:	eb 23                	jmp    4000115f <remove_from_list+0x55>
            } else {
                last->next = cur->next;
4000113c:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000113f:	8b 50 08             	mov    0x8(%eax),%edx
40001142:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001145:	89 50 08             	mov    %edx,0x8(%eax)
                return;
40001148:	eb 15                	jmp    4000115f <remove_from_list+0x55>
            }
        }
        last = cur;
4000114a:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000114d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
40001150:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001153:	8b 40 08             	mov    0x8(%eax),%eax
40001156:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40001159:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
4000115d:	75 c2                	jne    40001121 <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
4000115f:	c9                   	leave  
40001160:	c3                   	ret    

40001161 <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
40001161:	55                   	push   %ebp
40001162:	89 e5                	mov    %esp,%ebp
    element->next = *root;
40001164:	8b 45 08             	mov    0x8(%ebp),%eax
40001167:	8b 10                	mov    (%eax),%edx
40001169:	8b 45 0c             	mov    0xc(%ebp),%eax
4000116c:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
4000116f:	8b 45 08             	mov    0x8(%ebp),%eax
40001172:	8b 55 0c             	mov    0xc(%ebp),%edx
40001175:	89 10                	mov    %edx,(%eax)
}
40001177:	5d                   	pop    %ebp
40001178:	c3                   	ret    

40001179 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
40001179:	55                   	push   %ebp
4000117a:	89 e5                	mov    %esp,%ebp
4000117c:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
4000117f:	8b 45 08             	mov    0x8(%ebp),%eax
40001182:	8b 00                	mov    (%eax),%eax
40001184:	85 c0                	test   %eax,%eax
40001186:	75 07                	jne    4000118f <pop_from_list+0x16>
        return 0;
40001188:	b8 00 00 00 00       	mov    $0x0,%eax
4000118d:	eb 1d                	jmp    400011ac <pop_from_list+0x33>
    struct memory_node* pop = *root;
4000118f:	8b 45 08             	mov    0x8(%ebp),%eax
40001192:	8b 00                	mov    (%eax),%eax
40001194:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
40001197:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000119a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000119e:	8b 45 08             	mov    0x8(%ebp),%eax
400011a1:	89 04 24             	mov    %eax,(%esp)
400011a4:	e8 61 ff ff ff       	call   4000110a <remove_from_list>
    return pop;
400011a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
400011ac:	c9                   	leave  
400011ad:	c3                   	ret    

400011ae <allocate_unused_nodes>:

static void allocate_unused_nodes() {
400011ae:	55                   	push   %ebp
400011af:	89 e5                	mov    %esp,%ebp
400011b1:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
400011b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400011bb:	e8 e7 03 00 00       	call   400015a7 <vmm_alloc_cont>
400011c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
400011c3:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
400011ca:	00 
400011cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400011d2:	00 
400011d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
400011d6:	89 04 24             	mov    %eax,(%esp)
400011d9:	e8 c4 fb ff ff       	call   40000da2 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
400011de:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
400011e5:	eb 27                	jmp    4000120e <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
400011e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
400011ea:	89 d0                	mov    %edx,%eax
400011ec:	01 c0                	add    %eax,%eax
400011ee:	01 d0                	add    %edx,%eax
400011f0:	c1 e0 02             	shl    $0x2,%eax
400011f3:	89 c2                	mov    %eax,%edx
400011f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
400011f8:	01 d0                	add    %edx,%eax
400011fa:	89 44 24 04          	mov    %eax,0x4(%esp)
400011fe:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001205:	e8 57 ff ff ff       	call   40001161 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
4000120a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
4000120e:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
40001215:	76 d0                	jbe    400011e7 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
40001217:	c9                   	leave  
40001218:	c3                   	ret    

40001219 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
40001219:	55                   	push   %ebp
4000121a:	89 e5                	mov    %esp,%ebp
4000121c:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
4000121f:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
40001226:	e8 4e ff ff ff       	call   40001179 <pop_from_list>
4000122b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
4000122e:	eb 14                	jmp    40001244 <pop_unused_node+0x2b>
        allocate_unused_nodes();
40001230:	e8 79 ff ff ff       	call   400011ae <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
40001235:	c7 04 24 08 32 00 40 	movl   $0x40003208,(%esp)
4000123c:	e8 38 ff ff ff       	call   40001179 <pop_from_list>
40001241:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40001244:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001248:	74 e6                	je     40001230 <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
4000124a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000124d:	c9                   	leave  
4000124e:	c3                   	ret    

4000124f <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
4000124f:	55                   	push   %ebp
40001250:	89 e5                	mov    %esp,%ebp
40001252:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
40001255:	8b 45 08             	mov    0x8(%ebp),%eax
40001258:	89 44 24 04          	mov    %eax,0x4(%esp)
4000125c:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
40001263:	e8 a2 fe ff ff       	call   4000110a <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
40001268:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    cur = first_free;
4000126f:	a1 10 32 00 40       	mov    0x40003210,%eax
40001274:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001277:	e9 87 00 00 00       	jmp    40001303 <merge_into_frees+0xb4>
        if (cur->address + cur->size == tf->address) {
4000127c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000127f:	8b 50 04             	mov    0x4(%eax),%edx
40001282:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001285:	8b 00                	mov    (%eax),%eax
40001287:	01 c2                	add    %eax,%edx
40001289:	8b 45 08             	mov    0x8(%ebp),%eax
4000128c:	8b 40 04             	mov    0x4(%eax),%eax
4000128f:	39 c2                	cmp    %eax,%edx
40001291:	75 21                	jne    400012b4 <merge_into_frees+0x65>
            tf->address = cur->address;
40001293:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001296:	8b 50 04             	mov    0x4(%eax),%edx
40001299:	8b 45 08             	mov    0x8(%ebp),%eax
4000129c:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
4000129f:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012a2:	89 44 24 04          	mov    %eax,0x4(%esp)
400012a6:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400012ad:	e8 58 fe ff ff       	call   4000110a <remove_from_list>
            goto editedList;
400012b2:	eb b4                	jmp    40001268 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
400012b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012b7:	8b 50 04             	mov    0x4(%eax),%edx
400012ba:	8b 45 08             	mov    0x8(%ebp),%eax
400012bd:	8b 48 04             	mov    0x4(%eax),%ecx
400012c0:	8b 45 08             	mov    0x8(%ebp),%eax
400012c3:	8b 00                	mov    (%eax),%eax
400012c5:	01 c8                	add    %ecx,%eax
400012c7:	39 c2                	cmp    %eax,%edx
400012c9:	75 29                	jne    400012f4 <merge_into_frees+0xa5>
            tf->size += cur->size;
400012cb:	8b 45 08             	mov    0x8(%ebp),%eax
400012ce:	8b 10                	mov    (%eax),%edx
400012d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012d3:	8b 00                	mov    (%eax),%eax
400012d5:	01 c2                	add    %eax,%edx
400012d7:	8b 45 08             	mov    0x8(%ebp),%eax
400012da:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
400012dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012df:	89 44 24 04          	mov    %eax,0x4(%esp)
400012e3:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400012ea:	e8 1b fe ff ff       	call   4000110a <remove_from_list>
            goto editedList;
400012ef:	e9 74 ff ff ff       	jmp    40001268 <merge_into_frees+0x19>
        }

        last = cur;
400012f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012f7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
400012fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
400012fd:	8b 40 08             	mov    0x8(%eax),%eax
40001300:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
40001303:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001307:	0f 85 6f ff ff ff    	jne    4000127c <merge_into_frees+0x2d>

        last = cur;
        cur = cur->next;
    }

    append_to_list(&first_free, tf);
4000130d:	8b 45 08             	mov    0x8(%ebp),%eax
40001310:	89 44 24 04          	mov    %eax,0x4(%esp)
40001314:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
4000131b:	e8 41 fe ff ff       	call   40001161 <append_to_list>
}
40001320:	c9                   	leave  
40001321:	c3                   	ret    

40001322 <malloc>:

void* malloc(size_t size) {
40001322:	55                   	push   %ebp
40001323:	89 e5                	mov    %esp,%ebp
40001325:	83 ec 38             	sub    $0x38,%esp
    struct memory_node* last = 0;
40001328:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    struct memory_node* cur = first_free;
4000132f:	a1 10 32 00 40       	mov    0x40003210,%eax
40001334:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001337:	eb 1b                	jmp    40001354 <malloc+0x32>
        if (cur->size >= size) {
40001339:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000133c:	8b 00                	mov    (%eax),%eax
4000133e:	3b 45 08             	cmp    0x8(%ebp),%eax
40001341:	72 02                	jb     40001345 <malloc+0x23>
            break;
40001343:	eb 15                	jmp    4000135a <malloc+0x38>
        }
        last = cur;
40001345:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001348:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cur = cur->next;
4000134b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000134e:	8b 40 08             	mov    0x8(%eax),%eax
40001351:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40001354:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001358:	75 df                	jne    40001339 <malloc+0x17>
        }
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
4000135a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000135e:	0f 85 a4 00 00 00    	jne    40001408 <malloc+0xe6>
        uint32_t pgs = size / PAGESIZE;
40001364:	8b 45 08             	mov    0x8(%ebp),%eax
40001367:	c1 e8 0c             	shr    $0xc,%eax
4000136a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
4000136d:	8b 45 08             	mov    0x8(%ebp),%eax
40001370:	25 ff 0f 00 00       	and    $0xfff,%eax
40001375:	85 c0                	test   %eax,%eax
40001377:	74 04                	je     4000137d <malloc+0x5b>
            pgs++;
40001379:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
4000137d:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001380:	89 04 24             	mov    %eax,(%esp)
40001383:	e8 1f 02 00 00       	call   400015a7 <vmm_alloc_cont>
40001388:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
4000138b:	e8 89 fe ff ff       	call   40001219 <pop_unused_node>
40001390:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
40001393:	8b 55 e8             	mov    -0x18(%ebp),%edx
40001396:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001399:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
4000139c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000139f:	8b 55 08             	mov    0x8(%ebp),%edx
400013a2:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
400013a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
400013a7:	c1 e0 0c             	shl    $0xc,%eax
400013aa:	3b 45 08             	cmp    0x8(%ebp),%eax
400013ad:	76 3e                	jbe    400013ed <malloc+0xcb>
            struct memory_node* free = pop_unused_node();
400013af:	e8 65 fe ff ff       	call   40001219 <pop_unused_node>
400013b4:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
400013b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400013ba:	8b 50 04             	mov    0x4(%eax),%edx
400013bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400013c0:	8b 00                	mov    (%eax),%eax
400013c2:	01 c2                	add    %eax,%edx
400013c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
400013c7:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
400013ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
400013cd:	c1 e0 0c             	shl    $0xc,%eax
400013d0:	2b 45 08             	sub    0x8(%ebp),%eax
400013d3:	89 c2                	mov    %eax,%edx
400013d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400013d8:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
400013da:	8b 45 e0             	mov    -0x20(%ebp),%eax
400013dd:	89 44 24 04          	mov    %eax,0x4(%esp)
400013e1:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
400013e8:	e8 74 fd ff ff       	call   40001161 <append_to_list>
        }

        append_to_list(&first_used, fill);
400013ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400013f0:	89 44 24 04          	mov    %eax,0x4(%esp)
400013f4:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
400013fb:	e8 61 fd ff ff       	call   40001161 <append_to_list>

        return (void*) fill->address;
40001400:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001403:	8b 40 04             	mov    0x4(%eax),%eax
40001406:	eb 7b                	jmp    40001483 <malloc+0x161>
    } else {
        uint32_t freesize = cur->size - size;
40001408:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000140b:	8b 00                	mov    (%eax),%eax
4000140d:	2b 45 08             	sub    0x8(%ebp),%eax
40001410:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
40001413:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001416:	8b 55 08             	mov    0x8(%ebp),%edx
40001419:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
4000141b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000141e:	89 44 24 04          	mov    %eax,0x4(%esp)
40001422:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001429:	e8 dc fc ff ff       	call   4000110a <remove_from_list>
        append_to_list(&first_used, cur);
4000142e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001431:	89 44 24 04          	mov    %eax,0x4(%esp)
40001435:	c7 04 24 0c 32 00 40 	movl   $0x4000320c,(%esp)
4000143c:	e8 20 fd ff ff       	call   40001161 <append_to_list>

        if (freesize > 0) {
40001441:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40001445:	74 36                	je     4000147d <malloc+0x15b>
            struct memory_node* free = pop_unused_node();
40001447:	e8 cd fd ff ff       	call   40001219 <pop_unused_node>
4000144c:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
4000144f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001452:	8b 50 04             	mov    0x4(%eax),%edx
40001455:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001458:	8b 00                	mov    (%eax),%eax
4000145a:	01 c2                	add    %eax,%edx
4000145c:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000145f:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
40001462:	8b 45 d8             	mov    -0x28(%ebp),%eax
40001465:	8b 55 dc             	mov    -0x24(%ebp),%edx
40001468:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
4000146a:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000146d:	89 44 24 04          	mov    %eax,0x4(%esp)
40001471:	c7 04 24 10 32 00 40 	movl   $0x40003210,(%esp)
40001478:	e8 e4 fc ff ff       	call   40001161 <append_to_list>
        }

        return (void*) cur->address;
4000147d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001480:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
40001483:	c9                   	leave  
40001484:	c3                   	ret    

40001485 <calloc>:

void* calloc(size_t num, size_t size) {
40001485:	55                   	push   %ebp
40001486:	89 e5                	mov    %esp,%ebp
40001488:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
4000148b:	8b 45 08             	mov    0x8(%ebp),%eax
4000148e:	0f af 45 0c          	imul   0xc(%ebp),%eax
40001492:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
40001495:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001498:	89 04 24             	mov    %eax,(%esp)
4000149b:	e8 82 fe ff ff       	call   40001322 <malloc>
400014a0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
400014a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400014a7:	74 1a                	je     400014c3 <calloc+0x3e>
        memset(p, 0, gsize);
400014a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014ac:	89 44 24 08          	mov    %eax,0x8(%esp)
400014b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400014b7:	00 
400014b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014bb:	89 04 24             	mov    %eax,(%esp)
400014be:	e8 df f8 ff ff       	call   40000da2 <memset>
    }

    return p;
400014c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
400014c6:	c9                   	leave  
400014c7:	c3                   	ret    

400014c8 <realloc>:

void* realloc(void* ptr, size_t size) {
400014c8:	55                   	push   %ebp
400014c9:	89 e5                	mov    %esp,%ebp
400014cb:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* last = 0;
400014ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
400014d5:	a1 0c 32 00 40       	mov    0x4000320c,%eax
400014da:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
400014dd:	eb 73                	jmp    40001552 <realloc+0x8a>
        if (cur->address == (uint32_t) ptr) {
400014df:	8b 45 f4             	mov    -0xc(%ebp),%eax
400014e2:	8b 50 04             	mov    0x4(%eax),%edx
400014e5:	8b 45 08             	mov    0x8(%ebp),%eax
400014e8:	39 c2                	cmp    %eax,%edx
400014ea:	75 57                	jne    40001543 <realloc+0x7b>
            if (size == 0) {
400014ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
400014f0:	75 12                	jne    40001504 <realloc+0x3c>
                free(ptr);
400014f2:	8b 45 08             	mov    0x8(%ebp),%eax
400014f5:	89 04 24             	mov    %eax,(%esp)
400014f8:	e8 62 00 00 00       	call   4000155f <free>
                return 0;
400014fd:	b8 00 00 00 00       	mov    $0x0,%eax
40001502:	eb 59                	jmp    4000155d <realloc+0x95>
            } else {
                void* new = malloc(size);
40001504:	8b 45 0c             	mov    0xc(%ebp),%eax
40001507:	89 04 24             	mov    %eax,(%esp)
4000150a:	e8 13 fe ff ff       	call   40001322 <malloc>
4000150f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
40001512:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001515:	8b 10                	mov    (%eax),%edx
40001517:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000151a:	8b 40 04             	mov    0x4(%eax),%eax
4000151d:	89 54 24 08          	mov    %edx,0x8(%esp)
40001521:	89 44 24 04          	mov    %eax,0x4(%esp)
40001525:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001528:	89 04 24             	mov    %eax,(%esp)
4000152b:	e8 a0 f8 ff ff       	call   40000dd0 <memcpy>
                free((void*) cur->address);
40001530:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001533:	8b 40 04             	mov    0x4(%eax),%eax
40001536:	89 04 24             	mov    %eax,(%esp)
40001539:	e8 21 00 00 00       	call   4000155f <free>

                return new;
4000153e:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001541:	eb 1a                	jmp    4000155d <realloc+0x95>
            }
        }
        last = cur;
40001543:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001546:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
40001549:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000154c:	8b 40 08             	mov    0x8(%eax),%eax
4000154f:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40001552:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001556:	75 87                	jne    400014df <realloc+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
40001558:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000155d:	c9                   	leave  
4000155e:	c3                   	ret    

4000155f <free>:

void free(void* ptr) {
4000155f:	55                   	push   %ebp
40001560:	89 e5                	mov    %esp,%ebp
40001562:	83 ec 14             	sub    $0x14,%esp
    struct memory_node* last = 0;
40001565:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
4000156c:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001571:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001574:	eb 29                	jmp    4000159f <free+0x40>
        if (cur->address == (uint32_t) ptr) {
40001576:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001579:	8b 50 04             	mov    0x4(%eax),%edx
4000157c:	8b 45 08             	mov    0x8(%ebp),%eax
4000157f:	39 c2                	cmp    %eax,%edx
40001581:	75 0d                	jne    40001590 <free+0x31>
            merge_into_frees(cur);
40001583:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001586:	89 04 24             	mov    %eax,(%esp)
40001589:	e8 c1 fc ff ff       	call   4000124f <merge_into_frees>
            break;
4000158e:	eb 15                	jmp    400015a5 <free+0x46>
        }
        last = cur;
40001590:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001593:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
40001596:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001599:	8b 40 08             	mov    0x8(%eax),%eax
4000159c:	89 45 fc             	mov    %eax,-0x4(%ebp)

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000159f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400015a3:	75 d1                	jne    40001576 <free+0x17>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
400015a5:	c9                   	leave  
400015a6:	c3                   	ret    

400015a7 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
400015a7:	55                   	push   %ebp
400015a8:	89 e5                	mov    %esp,%ebp
400015aa:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400015ad:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400015b4:	8b 45 08             	mov    0x8(%ebp),%eax
400015b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400015ba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400015c1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400015c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400015cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
400015d6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400015d9:	89 04 24             	mov    %eax,(%esp)
400015dc:	e8 7e 00 00 00       	call   4000165f <syscall>
  
  return (void*)state.eax;
400015e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400015e4:	c9                   	leave  
400015e5:	c3                   	ret    

400015e6 <vmm_free>:

void vmm_free (void* vaddr) {
400015e6:	55                   	push   %ebp
400015e7:	89 e5                	mov    %esp,%ebp
400015e9:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400015ec:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
    .eax = 204,
    .ebx = (uint32_t)vaddr,
400015f3:	8b 45 08             	mov    0x8(%ebp),%eax
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
  struct regstate state = {
400015f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400015f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001600:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001607:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000160e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001615:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001618:	89 04 24             	mov    %eax,(%esp)
4000161b:	e8 3f 00 00 00       	call   4000165f <syscall>
}
40001620:	c9                   	leave  
40001621:	c3                   	ret    

40001622 <print_memstat>:

void print_memstat() {
40001622:	55                   	push   %ebp
40001623:	89 e5                	mov    %esp,%ebp
40001625:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001628:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
4000162f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001636:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000163d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001644:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000164b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001652:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001655:	89 04 24             	mov    %eax,(%esp)
40001658:	e8 02 00 00 00       	call   4000165f <syscall>
}
4000165d:	c9                   	leave  
4000165e:	c3                   	ret    

4000165f <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
4000165f:	55                   	push   %ebp
40001660:	89 e5                	mov    %esp,%ebp
40001662:	57                   	push   %edi
40001663:	56                   	push   %esi
40001664:	53                   	push   %ebx
40001665:	83 ec 08             	sub    $0x8,%esp
			"=c" (state->ecx),
			"=d" (state->edx),
			"=S" (state->esi),
			"=D" (state->edi)

			: "a" (state->eax),
40001668:	8b 45 08             	mov    0x8(%ebp),%eax
4000166b:	8b 00                	mov    (%eax),%eax
			"b" (state->ebx),
4000166d:	8b 55 08             	mov    0x8(%ebp),%edx
40001670:	8b 5a 04             	mov    0x4(%edx),%ebx
			"c" (state->ecx),
40001673:	8b 55 08             	mov    0x8(%ebp),%edx
40001676:	8b 4a 08             	mov    0x8(%edx),%ecx
			"d" (state->edx),
40001679:	8b 55 08             	mov    0x8(%ebp),%edx
4000167c:	8b 52 0c             	mov    0xc(%edx),%edx
			"S" (state->esi),
4000167f:	8b 75 08             	mov    0x8(%ebp),%esi
40001682:	8b 76 10             	mov    0x10(%esi),%esi
			"D" (state->edi));
40001685:	8b 7d 08             	mov    0x8(%ebp),%edi
40001688:	8b 7f 14             	mov    0x14(%edi),%edi
#include "syscall.h"

void syscall(struct regstate* state) {
	asm("int $0x30"
4000168b:	cd 30                	int    $0x30
4000168d:	89 55 ec             	mov    %edx,-0x14(%ebp)
40001690:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001693:	8b 45 08             	mov    0x8(%ebp),%eax
40001696:	8b 55 f0             	mov    -0x10(%ebp),%edx
40001699:	89 10                	mov    %edx,(%eax)
4000169b:	8b 45 08             	mov    0x8(%ebp),%eax
4000169e:	89 58 04             	mov    %ebx,0x4(%eax)
400016a1:	8b 45 08             	mov    0x8(%ebp),%eax
400016a4:	89 48 08             	mov    %ecx,0x8(%eax)
400016a7:	8b 45 08             	mov    0x8(%ebp),%eax
400016aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
400016ad:	89 50 0c             	mov    %edx,0xc(%eax)
400016b0:	8b 45 08             	mov    0x8(%ebp),%eax
400016b3:	89 70 10             	mov    %esi,0x10(%eax)
400016b6:	8b 45 08             	mov    0x8(%ebp),%eax
400016b9:	89 78 14             	mov    %edi,0x14(%eax)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
400016bc:	83 c4 08             	add    $0x8,%esp
400016bf:	5b                   	pop    %ebx
400016c0:	5e                   	pop    %esi
400016c1:	5f                   	pop    %edi
400016c2:	5d                   	pop    %ebp
400016c3:	c3                   	ret    
