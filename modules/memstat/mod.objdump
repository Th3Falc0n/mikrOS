
../../initrfs/ibin/memstat:     file format elf32-i386
../../initrfs/ibin/memstat
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400003ed

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000021ba memsz 0x000021ba flags r-x
    LOAD off    0x00004000 vaddr 0x40003000 paddr 0x40003000 align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011c4  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000030  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.1 0000018a  40002030  40002030  00003030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000214  40003000  40003000  00004000  2**2
                  ALLOC
  4 .stab         00004914  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY
  6 .stabstr      000018be  00000000  00000000  00007b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .rodata	00000000 .rodata
40002030 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40003000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 memstat.c
00000000 l    df *ABS*	00000000 process.c
40003000 l     O .bss	00000200 irq_handlers
40002018 l     O .rodata	00000018 C.7.1020
4000045f l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000520 l     F .text	00000047 resolveHandle
400009d0 l     F .text	0000004a printrwerror
4000081d l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000ec4 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
400001e3 g     F .text	0000003d getExecPath
400008d4 g     F .text	00000014 putchar
40000c81 g     F .text	00000033 strcpy
40000266 g     F .text	0000003e yield
400008e8 g     F .text	000000e8 printf
40001174 g     F .text	00000050 syscall
40000ae5 g     F .text	00000042 fgets
40000ad9 g     F .text	0000000c getc
40000bb0 g     F .text	00000026 memcpy
4000080b g     F .text	00000012 puts
400002a4 g     F .text	0000003d pexists
40000f2d g     F .text	000000f8 malloc
40000339 g     F .text	0000003d fetch_rpc_data
40000cb4 g     F .text	000000a5 strtoknc
40000179 g     F .text	0000003d changeExecPath
40003210 g     O .bss	00000004 first_free
40000107 g     F .text	00000037 dexec
400006ba g     F .text	00000012 setstdout
40001085 g     F .text	00000034 calloc
40001137 g     F .text	0000003d vmm_alloc_cont
40000095 g     F .text	0000003b exec
400003ed g     F .text	00000072 _start
40001025 g     F .text	00000060 realloc
400003b0 g     F .text	0000003d set_rpc_handler
40000d92 g     F .text	00000052 strtok
40000bd6 g     F .text	00000047 memcmp
400000d0 g     F .text	00000037 sexec
40000a1a g     F .text	00000085 fread
40003208 g     O .bss	00000004 first_unused
4000061e g     F .text	0000003c fopen
40000b94 g     F .text	0000001c memset
40000000 g     F .text	00000024 main
400005e1 g     F .text	0000003d fclose
40000aca g     F .text	0000000f getchar
40000b27 g     F .text	0000006c getln
40003204 g     O .bss	00000004 fr
400005a4 g     F .text	0000003d favailable
400008c1 g     F .text	00000013 putc
40000c1d g     F .text	00000049 strcmp
40000a9f g     F .text	0000002b fgetc
4000013e g     F .text	0000003b getPathChild
40003200 g     O .bss	00000004 sp
400001b6 g     F .text	0000002d cd
4000320c g     O .bss	00000004 first_used
4000085c g     F .text	00000065 fputc
4000070a g     F .text	00000093 fwrite
400006a8 g     F .text	00000012 setstdin
40000d59 g     F .text	00000039 strclone
40000220 g     F .text	00000046 exit
400002e1 g     F .text	00000058 register_irq_handler
4000065a g     F .text	0000003c fopenpmhandle
400010fa g     F .text	0000003d vmm_free
40000024 g     F .text	00000071 printFilesystemError
40000c66 g     F .text	0000001b strlen
400006cc g     F .text	0000003e getLastVFSErr
4000079d g     F .text	0000006e fputs
40000567 g     F .text	0000003d fmkfifo
40000376 g     F .text	0000003a call_rpc
40000696 g     F .text	00000012 setstderr
400010bc g     F .text	0000003e print_memstat
40000de4 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <main>:
#include "process.h"
#include "stdlib.h"
#include "vmmcall.h"
 
int main(int argc, char* args[])
{
40000000:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000004:	83 e4 f0             	and    $0xfffffff0,%esp
40000007:	ff 71 fc             	pushl  -0x4(%ecx)
4000000a:	55                   	push   %ebp
4000000b:	89 e5                	mov    %esp,%ebp
4000000d:	51                   	push   %ecx
4000000e:	83 ec 04             	sub    $0x4,%esp
    print_memstat();
40000011:	e8 a6 10 00 00       	call   400010bc <print_memstat>
    return 0;
40000016:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000001b:	83 c4 04             	add    $0x4,%esp
4000001e:	59                   	pop    %ecx
4000001f:	5d                   	pop    %ebp
40000020:	8d 61 fc             	lea    -0x4(%ecx),%esp
40000023:	c3                   	ret    

40000024 <printFilesystemError>:
    }

    return res;
}

void printFilesystemError(char* path, uint32_t code) {
40000024:	55                   	push   %ebp
40000025:	89 e5                	mov    %esp,%ebp
40000027:	83 ec 08             	sub    $0x8,%esp
4000002a:	8b 55 0c             	mov    0xc(%ebp),%edx
4000002d:	8b 45 08             	mov    0x8(%ebp),%eax
    switch(code) {
40000030:	83 fa 05             	cmp    $0x5,%edx
40000033:	77 43                	ja     40000078 <printFilesystemError+0x54>
40000035:	ff 24 95 00 20 00 40 	jmp    *0x40002000(,%edx,4)
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
4000003c:	52                   	push   %edx
4000003d:	52                   	push   %edx
4000003e:	50                   	push   %eax
4000003f:	68 30 20 00 40       	push   $0x40002030
40000044:	eb 3a                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
40000046:	51                   	push   %ecx
40000047:	51                   	push   %ecx
40000048:	50                   	push   %eax
40000049:	68 42 20 00 40       	push   $0x40002042
4000004e:	eb 30                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
40000050:	52                   	push   %edx
40000051:	52                   	push   %edx
40000052:	50                   	push   %eax
40000053:	68 61 20 00 40       	push   $0x40002061
40000058:	eb 26                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
4000005a:	51                   	push   %ecx
4000005b:	51                   	push   %ecx
4000005c:	50                   	push   %eax
4000005d:	68 8b 20 00 40       	push   $0x4000208b
40000062:	eb 1c                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
40000064:	52                   	push   %edx
40000065:	52                   	push   %edx
40000066:	50                   	push   %eax
40000067:	68 a0 20 00 40       	push   $0x400020a0
4000006c:	eb 12                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
4000006e:	51                   	push   %ecx
4000006f:	51                   	push   %ecx
40000070:	50                   	push   %eax
40000071:	68 db 20 00 40       	push   $0x400020db
40000076:	eb 08                	jmp    40000080 <printFilesystemError+0x5c>
        break;
    default:
        printf("%s: WTF", path);
40000078:	52                   	push   %edx
40000079:	52                   	push   %edx
4000007a:	50                   	push   %eax
4000007b:	68 ee 20 00 40       	push   $0x400020ee
40000080:	e8 63 08 00 00       	call   400008e8 <printf>
        break;

    }
    printf("\n");
40000085:	c7 45 08 0b 21 00 40 	movl   $0x4000210b,0x8(%ebp)
        break;
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
        break;
    default:
        printf("%s: WTF", path);
4000008c:	83 c4 10             	add    $0x10,%esp
        break;

    }
    printf("\n");
}
4000008f:	c9                   	leave  
    default:
        printf("%s: WTF", path);
        break;

    }
    printf("\n");
40000090:	e9 53 08 00 00       	jmp    400008e8 <printf>

40000095 <exec>:

void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
40000095:	55                   	push   %ebp
40000096:	89 e5                	mov    %esp,%ebp
40000098:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };
4000009b:	8b 45 08             	mov    0x8(%ebp),%eax
4000009e:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
400000a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400000a8:	8b 45 0c             	mov    0xc(%ebp),%eax
400000ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
400000ae:	8b 45 10             	mov    0x10(%ebp),%eax
400000b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    syscall(&state);
400000b4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400000b7:	50                   	push   %eax
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };
400000b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400000bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400000c6:	e8 a9 10 00 00       	call   40001174 <syscall>

    return state.eax;
}
400000cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
400000ce:	c9                   	leave  
400000cf:	c3                   	ret    

400000d0 <sexec>:
    }

    return res;
}

int sexec(char* path, char** args) {
400000d0:	55                   	push   %ebp
400000d1:	89 e5                	mov    %esp,%ebp
400000d3:	56                   	push   %esi
400000d4:	53                   	push   %ebx
    uint32_t res = exec(path, args, 1);
400000d5:	53                   	push   %ebx
400000d6:	6a 01                	push   $0x1
    }

    return res;
}

int sexec(char* path, char** args) {
400000d8:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t res = exec(path, args, 1);
400000db:	ff 75 0c             	pushl  0xc(%ebp)
400000de:	56                   	push   %esi
400000df:	e8 b1 ff ff ff       	call   40000095 <exec>

    if(!res) {
400000e4:	83 c4 10             	add    $0x10,%esp

    return res;
}

int sexec(char* path, char** args) {
    uint32_t res = exec(path, args, 1);
400000e7:	89 c3                	mov    %eax,%ebx

    if(!res) {
400000e9:	85 c0                	test   %eax,%eax
400000eb:	75 11                	jne    400000fe <sexec+0x2e>
        printFilesystemError(path, getLastVFSErr());
400000ed:	e8 da 05 00 00       	call   400006cc <getLastVFSErr>
400000f2:	51                   	push   %ecx
400000f3:	51                   	push   %ecx
400000f4:	50                   	push   %eax
400000f5:	56                   	push   %esi
400000f6:	e8 29 ff ff ff       	call   40000024 <printFilesystemError>
400000fb:	83 c4 10             	add    $0x10,%esp
    }

    return res;
}
400000fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000101:	89 d8                	mov    %ebx,%eax
40000103:	5b                   	pop    %ebx
40000104:	5e                   	pop    %esi
40000105:	5d                   	pop    %ebp
40000106:	c3                   	ret    

40000107 <dexec>:
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
40000107:	55                   	push   %ebp
40000108:	89 e5                	mov    %esp,%ebp
4000010a:	56                   	push   %esi
4000010b:	53                   	push   %ebx
    uint32_t res = exec(path, args, 0);
4000010c:	51                   	push   %ecx
4000010d:	6a 00                	push   $0x0
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
4000010f:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t res = exec(path, args, 0);
40000112:	ff 75 0c             	pushl  0xc(%ebp)
40000115:	56                   	push   %esi
40000116:	e8 7a ff ff ff       	call   40000095 <exec>

    if(!res) {
4000011b:	83 c4 10             	add    $0x10,%esp

    return state.eax;
}

int dexec(char* path, char** args) {
    uint32_t res = exec(path, args, 0);
4000011e:	89 c3                	mov    %eax,%ebx

    if(!res) {
40000120:	85 c0                	test   %eax,%eax
40000122:	75 11                	jne    40000135 <dexec+0x2e>
        printFilesystemError(path, getLastVFSErr());
40000124:	e8 a3 05 00 00       	call   400006cc <getLastVFSErr>
40000129:	52                   	push   %edx
4000012a:	52                   	push   %edx
4000012b:	50                   	push   %eax
4000012c:	56                   	push   %esi
4000012d:	e8 f2 fe ff ff       	call   40000024 <printFilesystemError>
40000132:	83 c4 10             	add    $0x10,%esp
    }

    return res;
}
40000135:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000138:	89 d8                	mov    %ebx,%eax
4000013a:	5b                   	pop    %ebx
4000013b:	5e                   	pop    %esi
4000013c:	5d                   	pop    %ebp
4000013d:	c3                   	ret    

4000013e <getPathChild>:
    syscall(&state);

    return state.eax;
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
4000013e:	55                   	push   %ebp
4000013f:	89 e5                	mov    %esp,%ebp
40000141:	83 ec 34             	sub    $0x34,%esp
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
        .edi = 0
    };
40000144:	8b 45 08             	mov    0x8(%ebp),%eax
40000147:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
4000014e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000151:	8b 45 0c             	mov    0xc(%ebp),%eax
40000154:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000157:	8b 45 10             	mov    0x10(%ebp),%eax
4000015a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    syscall(&state);
4000015d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000160:	50                   	push   %eax
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
        .edi = 0
    };
40000161:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000168:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000016f:	e8 00 10 00 00       	call   40001174 <syscall>

    return (char*)state.eax;
}
40000174:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000177:	c9                   	leave  
40000178:	c3                   	ret    

40000179 <changeExecPath>:
    };

    syscall(&state);
}

int changeExecPath(char* path) {
40000179:	55                   	push   %ebp
4000017a:	89 e5                	mov    %esp,%ebp
4000017c:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t)path,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
4000017f:	8b 45 08             	mov    0x8(%ebp),%eax
40000182:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
40000189:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000018c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000018f:	50                   	push   %eax
        .ebx = (uint32_t)path,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000190:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000197:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000019e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400001ac:	e8 c3 0f 00 00       	call   40001174 <syscall>

    return state.eax;
}
400001b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400001b4:	c9                   	leave  
400001b5:	c3                   	ret    

400001b6 <cd>:
    syscall(&state);

    return (char*)state.eax;
}

void cd(char* path) {
400001b6:	55                   	push   %ebp
400001b7:	89 e5                	mov    %esp,%ebp
400001b9:	53                   	push   %ebx
400001ba:	83 ec 10             	sub    $0x10,%esp
400001bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
400001c0:	53                   	push   %ebx
400001c1:	e8 b3 ff ff ff       	call   40000179 <changeExecPath>
400001c6:	83 c4 10             	add    $0x10,%esp
400001c9:	85 c0                	test   %eax,%eax
400001cb:	75 11                	jne    400001de <cd+0x28>
400001cd:	e8 fa 04 00 00       	call   400006cc <getLastVFSErr>
400001d2:	52                   	push   %edx
400001d3:	52                   	push   %edx
400001d4:	50                   	push   %eax
400001d5:	53                   	push   %ebx
400001d6:	e8 49 fe ff ff       	call   40000024 <printFilesystemError>
400001db:	83 c4 10             	add    $0x10,%esp
}
400001de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400001e1:	c9                   	leave  
400001e2:	c3                   	ret    

400001e3 <getExecPath>:
    while(1) {
      printf("error\n");
    }
}

void getExecPath(char* dest) {
400001e3:	55                   	push   %ebp
400001e4:	89 e5                	mov    %esp,%ebp
400001e6:	83 ec 34             	sub    $0x34,%esp
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400001e9:	8b 45 08             	mov    0x8(%ebp),%eax
400001ec:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400001f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400001f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001f9:	50                   	push   %eax
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400001fa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000201:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000208:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000020f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000216:	e8 59 0f 00 00       	call   40001174 <syscall>
4000021b:	83 c4 10             	add    $0x10,%esp
}
4000021e:	c9                   	leave  
4000021f:	c3                   	ret    

40000220 <exit>:
    syscall(&state);

    return;
}

void exit(int returncode) {
40000220:	55                   	push   %ebp
40000221:	89 e5                	mov    %esp,%ebp
40000223:	83 ec 34             	sub    $0x34,%esp
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000226:	8b 45 08             	mov    0x8(%ebp),%eax
40000229:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000230:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
40000233:	8d 45 e0             	lea    -0x20(%ebp),%eax
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000236:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000023d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000244:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000024b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000252:	50                   	push   %eax
40000253:	e8 1c 0f 00 00       	call   40001174 <syscall>

    while(1) {
      printf("error\n");
40000258:	c7 04 24 f6 20 00 40 	movl   $0x400020f6,(%esp)
4000025f:	e8 84 06 00 00       	call   400008e8 <printf>
40000264:	eb f2                	jmp    40000258 <exit+0x38>

40000266 <yield>:
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000266:	55                   	push   %ebp
40000267:	89 e5                	mov    %esp,%ebp
40000269:	83 ec 34             	sub    $0x34,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000026c:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000026f:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)

    syscall(&state);
40000276:	50                   	push   %eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000277:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000027e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000285:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000028c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000293:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000029a:	e8 d5 0e 00 00       	call   40001174 <syscall>
4000029f:	83 c4 10             	add    $0x10,%esp

    return;
}
400002a2:	c9                   	leave  
400002a3:	c3                   	ret    

400002a4 <pexists>:
    syscall(&state);

    return state.eax;
}

uint32_t pexists(int pid) {
400002a4:	55                   	push   %ebp
400002a5:	89 e5                	mov    %esp,%ebp
400002a7:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400002aa:	8b 45 08             	mov    0x8(%ebp),%eax
400002ad:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400002b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400002b7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002ba:	50                   	push   %eax
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400002bb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400002d7:	e8 98 0e 00 00       	call   40001174 <syscall>

    return state.eax;
}
400002dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002df:	c9                   	leave  
400002e0:	c3                   	ret    

400002e1 <register_irq_handler>:
    return state.eax;
}

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
400002e1:	55                   	push   %ebp
400002e2:	89 e5                	mov    %esp,%ebp
400002e4:	53                   	push   %ebx
400002e5:	83 ec 30             	sub    $0x30,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400002e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
    return state.eax;
}

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
400002eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400002ee:	50                   	push   %eax
      .ebx = irq,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400002ef:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400002f6:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400002f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000300:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000307:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000030e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000315:	e8 5a 0e 00 00       	call   40001174 <syscall>

    return state.eax;
4000031a:	83 c4 10             	add    $0x10,%esp
4000031d:	31 c0                	xor    %eax,%eax
4000031f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
40000323:	74 0f                	je     40000334 <register_irq_handler+0x53>

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
    if(register_irq_rpc_syscall(irq)) {
        irq_handlers[irq] = handler;
40000325:	8b 45 0c             	mov    0xc(%ebp),%eax
40000328:	89 04 9d 00 30 00 40 	mov    %eax,0x40003000(,%ebx,4)
4000032f:	b8 01 00 00 00       	mov    $0x1,%eax
        return 1;
    }
    return 0;
}
40000334:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000337:	c9                   	leave  
40000338:	c3                   	ret    

40000339 <fetch_rpc_data>:
    syscall(&state);

    return state.eax;
}

void fetch_rpc_data(void* dest) {
40000339:	55                   	push   %ebp
4000033a:	89 e5                	mov    %esp,%ebp
4000033c:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)dest,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000033f:	8b 45 08             	mov    0x8(%ebp),%eax
40000342:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40000349:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000034c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000034f:	50                   	push   %eax
      .ebx = (uint32_t)dest,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000350:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000357:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000035e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000036c:	e8 03 0e 00 00       	call   40001174 <syscall>
40000371:	83 c4 10             	add    $0x10,%esp
}
40000374:	c9                   	leave  
40000375:	c3                   	ret    

40000376 <call_rpc>:
    syscall(&state);

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
40000376:	55                   	push   %ebp
40000377:	89 e5                	mov    %esp,%ebp
40000379:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };
4000037c:	8b 45 08             	mov    0x8(%ebp),%eax
4000037f:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40000386:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000389:	8b 45 0c             	mov    0xc(%ebp),%eax
4000038c:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000038f:	8b 45 10             	mov    0x10(%ebp),%eax
40000392:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000395:	8b 45 14             	mov    0x14(%ebp),%eax
40000398:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&state);
4000039b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000039e:	50                   	push   %eax
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };
4000039f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400003a6:	e8 c9 0d 00 00       	call   40001174 <syscall>

    return state.eax;
}
400003ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003ae:	c9                   	leave  
400003af:	c3                   	ret    

400003b0 <set_rpc_handler>:

    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
400003b0:	55                   	push   %ebp
400003b1:	89 e5                	mov    %esp,%ebp
400003b3:	57                   	push   %edi
400003b4:	56                   	push   %esi
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003b5:	be 18 20 00 40       	mov    $0x40002018,%esi

    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
400003ba:	83 ec 24             	sub    $0x24,%esp
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003bd:	8d 7d e0             	lea    -0x20(%ebp),%edi
    free(localData);
    return_rpc(0);
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));
400003c0:	68 00 02 00 00       	push   $0x200
400003c5:	6a 00                	push   $0x0
400003c7:	68 00 30 00 40       	push   $0x40003000
400003cc:	e8 c3 07 00 00       	call   40000b94 <memset>
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003d1:	b9 06 00 00 00       	mov    $0x6,%ecx

    syscall(&state);
400003d6:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)_handle_rpc,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003d9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

    syscall(&state);
400003db:	89 04 24             	mov    %eax,(%esp)
400003de:	e8 91 0d 00 00       	call   40001174 <syscall>
400003e3:	83 c4 10             	add    $0x10,%esp
}
400003e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
400003e9:	5e                   	pop    %esi
400003ea:	5f                   	pop    %edi
400003eb:	5d                   	pop    %ebp
400003ec:	c3                   	ret    

400003ed <_start>:

void _start() {
400003ed:	55                   	push   %ebp
400003ee:	89 e5                	mov    %esp,%ebp
400003f0:	56                   	push   %esi
400003f1:	53                   	push   %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
400003f2:	31 db                	xor    %ebx,%ebx
    syscall(&state);

    return state.eax;
}

void _start() {
400003f4:	83 ec 2c             	sub    $0x2c,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400003f7:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400003fa:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000401:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000408:	50                   	push   %eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000409:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000410:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000417:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000041e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000425:	e8 4a 0d 00 00       	call   40001174 <syscall>

    return state.eax;
4000042a:	8b 75 e0             	mov    -0x20(%ebp),%esi
void _start() {
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
4000042d:	83 c4 10             	add    $0x10,%esp
40000430:	85 f6                	test   %esi,%esi
40000432:	75 05                	jne    40000439 <_start+0x4c>
40000434:	89 f3                	mov    %esi,%ebx
40000436:	eb 07                	jmp    4000043f <_start+0x52>
      while(args[argc] != 0) {
          argc++;
40000438:	43                   	inc    %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000439:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
4000043d:	75 f9                	jne    40000438 <_start+0x4b>
          argc++;
      }
  }

  set_rpc_handler();
4000043f:	e8 6c ff ff ff       	call   400003b0 <set_rpc_handler>

  int result = main(argc, args);
40000444:	51                   	push   %ecx
40000445:	51                   	push   %ecx
40000446:	56                   	push   %esi
40000447:	53                   	push   %ebx
40000448:	e8 b3 fb ff ff       	call   40000000 <main>

  exit(result);
4000044d:	89 04 24             	mov    %eax,(%esp)
40000450:	e8 cb fd ff ff       	call   40000220 <exit>
40000455:	83 c4 10             	add    $0x10,%esp
}
40000458:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000045b:	5b                   	pop    %ebx
4000045c:	5e                   	pop    %esi
4000045d:	5d                   	pop    %ebp
4000045e:	c3                   	ret    

4000045f <_handle_rpc>:
        return 1;
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
4000045f:	55                   	push   %ebp
40000460:	89 e5                	mov    %esp,%ebp
40000462:	56                   	push   %esi
40000463:	53                   	push   %ebx
40000464:	83 ec 2c             	sub    $0x2c,%esp
    void* localData = malloc(datasize);
40000467:	ff 75 10             	pushl  0x10(%ebp)
        return 1;
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
4000046a:	8b 75 0c             	mov    0xc(%ebp),%esi
    void* localData = malloc(datasize);
4000046d:	e8 bb 0a 00 00       	call   40000f2d <malloc>
    fetch_rpc_data(localData);
40000472:	89 04 24             	mov    %eax,(%esp)
    }
    return 0;
}

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
    void* localData = malloc(datasize);
40000475:	89 c3                	mov    %eax,%ebx
    fetch_rpc_data(localData);
40000477:	e8 bd fe ff ff       	call   40000339 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
4000047c:	83 c4 10             	add    $0x10,%esp
4000047f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000483:	75 4b                	jne    400004d0 <_handle_rpc+0x71>
        if(irq_handlers[funcID]) {
40000485:	8b 04 b5 00 30 00 40 	mov    0x40003000(,%esi,4),%eax
4000048c:	85 c0                	test   %eax,%eax
4000048e:	74 40                	je     400004d0 <_handle_rpc+0x71>
            irq_handlers[funcID](funcID);
40000490:	83 ec 0c             	sub    $0xc,%esp
40000493:	56                   	push   %esi
40000494:	ff d0                	call   *%eax
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000496:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000499:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)

    syscall(&state);
400004a0:	89 04 24             	mov    %eax,(%esp)
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400004a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400004aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400004c6:	e8 a9 0c 00 00       	call   40001174 <syscall>
400004cb:	83 c4 10             	add    $0x10,%esp
400004ce:	eb fe                	jmp    400004ce <_handle_rpc+0x6f>
            irq_handlers[funcID](funcID);
            return_rpc(0);
        }
    }

    printf("Unhandled RPC!\n");
400004d0:	83 ec 0c             	sub    $0xc,%esp
400004d3:	68 fd 20 00 40       	push   $0x400020fd
400004d8:	e8 0b 04 00 00       	call   400008e8 <printf>

    free(localData);
400004dd:	89 1c 24             	mov    %ebx,(%esp)
400004e0:	e8 ff 08 00 00       	call   40000de4 <free>
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400004e5:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400004e8:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)

    syscall(&state);
400004ef:	89 04 24             	mov    %eax,(%esp)
      .ebx = (uint32_t)code,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400004f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400004f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000500:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000507:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000050e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000515:	e8 5a 0c 00 00       	call   40001174 <syscall>
4000051a:	83 c4 10             	add    $0x10,%esp
4000051d:	eb fe                	jmp    4000051d <_handle_rpc+0xbe>
	...

40000520 <resolveHandle>:
    syscall(&state);

    return (HANDLE)state.eax;
}

static HANDLE resolveHandle(HANDLE hdl) {
40000520:	55                   	push   %ebp
40000521:	89 e5                	mov    %esp,%ebp
40000523:	83 ec 28             	sub    $0x28,%esp
    if(hdl < 0xFFF) {
40000526:	3d fe 0f 00 00       	cmp    $0xffe,%eax
4000052b:	77 38                	ja     40000565 <resolveHandle+0x45>
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000052d:	83 ec 0c             	sub    $0xc,%esp
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000530:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
40000533:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000536:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)

    syscall(&state);
4000053d:	50                   	push   %eax
      .ebx = pmid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000053e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000545:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000054c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000055a:	e8 15 0c 00 00       	call   40001174 <syscall>

    return (HANDLE)state.eax;
4000055f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000562:	83 c4 10             	add    $0x10,%esp
static HANDLE resolveHandle(HANDLE hdl) {
    if(hdl < 0xFFF) {
        hdl = getpmhandle(hdl);
    }
    return hdl;
}
40000565:	c9                   	leave  
40000566:	c3                   	ret    

40000567 <fmkfifo>:
    printrwerror(handle, res);

    return res;
}

HANDLE fmkfifo(char* path) {
40000567:	55                   	push   %ebp
40000568:	89 e5                	mov    %esp,%ebp
4000056a:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)path,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000056d:	8b 45 08             	mov    0x8(%ebp),%eax
40000570:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
40000577:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
4000057a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000057d:	50                   	push   %eax
      .ebx = (uint32_t)path,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000057e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000585:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000058c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000593:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000059a:	e8 d5 0b 00 00       	call   40001174 <syscall>

    return (HANDLE)state.eax;
}
4000059f:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005a2:	c9                   	leave  
400005a3:	c3                   	ret    

400005a4 <favailable>:
    if(res == RW_NOFM_WRITE) {
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

uint32_t favailable(uint32_t handle) {
400005a4:	55                   	push   %ebp
400005a5:	89 e5                	mov    %esp,%ebp
400005a7:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005aa:	8b 45 08             	mov    0x8(%ebp),%eax
400005ad:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400005b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400005b7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005ba:	50                   	push   %eax
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005bb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
400005d7:	e8 98 0b 00 00       	call   40001174 <syscall>

    return state.eax;
}
400005dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005df:	c9                   	leave  
400005e0:	c3                   	ret    

400005e1 <fclose>:
    syscall(&state);

    return (HANDLE)state.eax;
}

int fclose(uint32_t handle) {
400005e1:	55                   	push   %ebp
400005e2:	89 e5                	mov    %esp,%ebp
400005e4:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005e7:	8b 45 08             	mov    0x8(%ebp),%eax
400005ea:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400005f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    syscall(&state);
400005f4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005f7:	50                   	push   %eax
      .ebx = (uint32_t)handle,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400005f8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000606:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000060d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000614:	e8 5b 0b 00 00       	call   40001174 <syscall>

    return (int)state.eax;
}
40000619:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000061c:	c9                   	leave  
4000061d:	c3                   	ret    

4000061e <fopen>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
4000061e:	55                   	push   %ebp
4000061f:	89 e5                	mov    %esp,%ebp
40000621:	83 ec 34             	sub    $0x34,%esp
      .ebx = (uint32_t)path,
      .ecx = mode,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000624:	8b 45 08             	mov    0x8(%ebp),%eax
40000627:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
4000062e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000631:	8b 45 0c             	mov    0xc(%ebp),%eax
40000634:	89 45 e8             	mov    %eax,-0x18(%ebp)

    syscall(&state);
40000637:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000063a:	50                   	push   %eax
      .ebx = (uint32_t)path,
      .ecx = mode,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000063b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000642:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000650:	e8 1f 0b 00 00       	call   40001174 <syscall>

    return (HANDLE)state.eax;
}
40000655:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000658:	c9                   	leave  
40000659:	c3                   	ret    

4000065a <fopenpmhandle>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
4000065a:	55                   	push   %ebp
4000065b:	89 e5                	mov    %esp,%ebp
4000065d:	83 ec 34             	sub    $0x34,%esp
      .ebx = pmid,
      .ecx = (uint32_t)path,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000660:	8b 45 08             	mov    0x8(%ebp),%eax
40000663:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
4000066a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000066d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000670:	89 45 e8             	mov    %eax,-0x18(%ebp)

    syscall(&state);
40000673:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000676:	50                   	push   %eax
      .ebx = pmid,
      .ecx = (uint32_t)path,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000677:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000067e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000685:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000068c:	e8 e3 0a 00 00       	call   40001174 <syscall>

    return (HANDLE)state.eax;
}
40000691:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000694:	c9                   	leave  
40000695:	c3                   	ret    

40000696 <setstderr>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
40000696:	55                   	push   %ebp
40000697:	89 e5                	mov    %esp,%ebp
40000699:	83 ec 10             	sub    $0x10,%esp
4000069c:	ff 75 08             	pushl  0x8(%ebp)
4000069f:	6a 03                	push   $0x3
400006a1:	e8 b4 ff ff ff       	call   4000065a <fopenpmhandle>
400006a6:	c9                   	leave  
400006a7:	c3                   	ret    

400006a8 <setstdin>:

    return (HANDLE)state.eax;
}

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
400006a8:	55                   	push   %ebp
400006a9:	89 e5                	mov    %esp,%ebp
400006ab:	83 ec 10             	sub    $0x10,%esp
400006ae:	ff 75 08             	pushl  0x8(%ebp)
400006b1:	6a 02                	push   $0x2
400006b3:	e8 a2 ff ff ff       	call   4000065a <fopenpmhandle>
400006b8:	c9                   	leave  
400006b9:	c3                   	ret    

400006ba <setstdout>:
    syscall(&state);

    return (HANDLE)state.eax;
}

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
400006ba:	55                   	push   %ebp
400006bb:	89 e5                	mov    %esp,%ebp
400006bd:	83 ec 10             	sub    $0x10,%esp
400006c0:	ff 75 08             	pushl  0x8(%ebp)
400006c3:	6a 01                	push   $0x1
400006c5:	e8 90 ff ff ff       	call   4000065a <fopenpmhandle>
400006ca:	c9                   	leave  
400006cb:	c3                   	ret    

400006cc <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
400006cc:	55                   	push   %ebp
400006cd:	89 e5                	mov    %esp,%ebp
400006cf:	83 ec 34             	sub    $0x34,%esp
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400006d2:	8d 45 e0             	lea    -0x20(%ebp),%eax
        .ebx = 0,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400006d5:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)

    syscall(&state);
400006dc:	50                   	push   %eax
        .ebx = 0,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
400006dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400006e4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
40000700:	e8 6f 0a 00 00       	call   40001174 <syscall>

    return state.eax;
}
40000705:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000708:	c9                   	leave  
40000709:	c3                   	ret    

4000070a <fwrite>:
    syscall(&state);

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
4000070a:	55                   	push   %ebp
4000070b:	89 e5                	mov    %esp,%ebp
4000070d:	57                   	push   %edi
4000070e:	56                   	push   %esi
4000070f:	53                   	push   %ebx
40000710:	83 ec 3c             	sub    $0x3c,%esp
    handle = resolveHandle(handle);
40000713:	8b 45 08             	mov    0x8(%ebp),%eax
    syscall(&state);

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
40000716:	8b 7d 10             	mov    0x10(%ebp),%edi
    handle = resolveHandle(handle);
40000719:	e8 02 fe ff ff       	call   40000520 <resolveHandle>
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000071e:	83 ec 0c             	sub    $0xc,%esp

    return (int)state.eax;
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    handle = resolveHandle(handle);
40000721:	89 c6                	mov    %eax,%esi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000723:	89 45 d4             	mov    %eax,-0x2c(%ebp)
40000726:	8b 45 0c             	mov    0xc(%ebp),%eax
40000729:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000730:	89 45 d8             	mov    %eax,-0x28(%ebp)

    syscall(&state);
40000733:	8d 45 d0             	lea    -0x30(%ebp),%eax
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000736:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000739:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000740:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000747:	50                   	push   %eax
40000748:	89 45 c4             	mov    %eax,-0x3c(%ebp)
4000074b:	eb 2d                	jmp    4000077a <fwrite+0x70>
    handle = resolveHandle(handle);

    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
        yield();
4000074d:	e8 14 fb ff ff       	call   40000266 <yield>
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000752:	8b 45 0c             	mov    0xc(%ebp),%eax

    syscall(&state);
40000755:	83 ec 0c             	sub    $0xc,%esp
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000758:	89 45 d8             	mov    %eax,-0x28(%ebp)

    syscall(&state);
4000075b:	8d 45 d0             	lea    -0x30(%ebp),%eax
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
4000075e:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000765:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000768:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000076b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000772:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000779:	50                   	push   %eax
4000077a:	e8 f5 09 00 00       	call   40001174 <syscall>

    return (int)state.eax;
4000077f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000782:	83 c4 10             	add    $0x10,%esp
uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    handle = resolveHandle(handle);

    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
40000785:	83 fb 01             	cmp    $0x1,%ebx
40000788:	74 c3                	je     4000074d <fwrite+0x43>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
4000078a:	89 f0                	mov    %esi,%eax
4000078c:	89 da                	mov    %ebx,%edx
4000078e:	e8 3d 02 00 00       	call   400009d0 <printrwerror>

    return res;
}
40000793:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000796:	89 d8                	mov    %ebx,%eax
40000798:	5b                   	pop    %ebx
40000799:	5e                   	pop    %esi
4000079a:	5f                   	pop    %edi
4000079b:	5d                   	pop    %ebp
4000079c:	c3                   	ret    

4000079d <fputs>:

int puts(const char* c) {
    return fputs(c, PMID_STDOUT);
}

int fputs(const char* c, HANDLE hdl) {
4000079d:	55                   	push   %ebp
4000079e:	89 e5                	mov    %esp,%ebp
400007a0:	56                   	push   %esi
400007a1:	53                   	push   %ebx
400007a2:	83 ec 20             	sub    $0x20,%esp
    hdl = resolveHandle(hdl);
400007a5:	8b 45 0c             	mov    0xc(%ebp),%eax

int puts(const char* c) {
    return fputs(c, PMID_STDOUT);
}

int fputs(const char* c, HANDLE hdl) {
400007a8:	8b 5d 08             	mov    0x8(%ebp),%ebx
    hdl = resolveHandle(hdl);
400007ab:	e8 70 fd ff ff       	call   40000520 <resolveHandle>
400007b0:	89 c6                	mov    %eax,%esi
    if(hdl != 0) {
400007b2:	85 c0                	test   %eax,%eax
400007b4:	74 16                	je     400007cc <fputs+0x2f>
        return fwrite(hdl, c, strlen(c));
400007b6:	83 ec 0c             	sub    $0xc,%esp
400007b9:	53                   	push   %ebx
400007ba:	e8 a7 04 00 00       	call   40000c66 <strlen>
400007bf:	83 c4 0c             	add    $0xc,%esp
400007c2:	50                   	push   %eax
400007c3:	53                   	push   %ebx
400007c4:	56                   	push   %esi
400007c5:	e8 40 ff ff ff       	call   4000070a <fwrite>
400007ca:	eb 35                	jmp    40000801 <fputs+0x64>
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
400007cc:	83 ec 0c             	sub    $0xc,%esp
400007cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = (uint32_t)cp,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400007d2:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
400007d9:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  
  syscall(&state);
400007dc:	50                   	push   %eax
    .ebx = (uint32_t)cp,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400007dd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007e4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);
400007f9:	e8 76 09 00 00       	call   40001174 <syscall>
  
  return state.eax;
400007fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
int fputs(const char* c, HANDLE hdl) {
    hdl = resolveHandle(hdl);
    if(hdl != 0) {
        return fwrite(hdl, c, strlen(c));
    }
    return kputs(c);
40000801:	83 c4 10             	add    $0x10,%esp
}
40000804:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000807:	5b                   	pop    %ebx
40000808:	5e                   	pop    %esi
40000809:	5d                   	pop    %ebp
4000080a:	c3                   	ret    

4000080b <puts>:
  syscall(&state);
  
  return state.eax;
}

int puts(const char* c) {
4000080b:	55                   	push   %ebp
4000080c:	89 e5                	mov    %esp,%ebp
4000080e:	83 ec 10             	sub    $0x10,%esp
    return fputs(c, PMID_STDOUT);
40000811:	6a 01                	push   $0x1
40000813:	ff 75 08             	pushl  0x8(%ebp)
40000816:	e8 82 ff ff ff       	call   4000079d <fputs>
}
4000081b:	c9                   	leave  
4000081c:	c3                   	ret    

4000081d <putn>:
    }
    return kputs(c);
}

static int putn(unsigned long x, int base)
{
4000081d:	55                   	push   %ebp
4000081e:	89 e5                	mov    %esp,%ebp
40000820:	56                   	push   %esi
40000821:	53                   	push   %ebx
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  char* p;
  int wrt = 0;

  if (base > 36) {
40000822:	31 f6                	xor    %esi,%esi
    }
    return kputs(c);
}

static int putn(unsigned long x, int base)
{
40000824:	83 ec 50             	sub    $0x50,%esp
40000827:	89 d3                	mov    %edx,%ebx
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  char* p;
  int wrt = 0;

  if (base > 36) {
40000829:	83 fa 24             	cmp    $0x24,%edx
4000082c:	7f 25                	jg     40000853 <putn+0x36>
    return 0;
  }

  p = buf + 64;
  *p = '\0';
4000082e:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000832:	8d 4d f7             	lea    -0x9(%ebp),%ecx
  do {
    wrt++;
    *--p = digits[x % base];
40000835:	31 d2                	xor    %edx,%edx
40000837:	49                   	dec    %ecx
40000838:	f7 f3                	div    %ebx
  }

  p = buf + 64;
  *p = '\0';
  do {
    wrt++;
4000083a:	46                   	inc    %esi
    *--p = digits[x % base];
    x /= base;
  } while (x);
4000083b:	85 c0                	test   %eax,%eax

  p = buf + 64;
  *p = '\0';
  do {
    wrt++;
    *--p = digits[x % base];
4000083d:	8a 92 0d 21 00 40    	mov    0x4000210d(%edx),%dl
40000843:	88 11                	mov    %dl,(%ecx)
    x /= base;
  } while (x);
40000845:	75 ee                	jne    40000835 <putn+0x18>
  puts(p);
40000847:	83 ec 0c             	sub    $0xc,%esp
4000084a:	51                   	push   %ecx
4000084b:	e8 bb ff ff ff       	call   4000080b <puts>
  
  return wrt;
40000850:	83 c4 10             	add    $0x10,%esp
}
40000853:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000856:	89 f0                	mov    %esi,%eax
40000858:	5b                   	pop    %ebx
40000859:	5e                   	pop    %esi
4000085a:	5d                   	pop    %ebp
4000085b:	c3                   	ret    

4000085c <fputc>:

int putc(char c, HANDLE hdl) {
    return fputc(c, hdl);
}

int fputc(char c, HANDLE hdl) {
4000085c:	55                   	push   %ebp
4000085d:	89 e5                	mov    %esp,%ebp
4000085f:	83 ec 38             	sub    $0x38,%esp
40000862:	8b 45 08             	mov    0x8(%ebp),%eax
40000865:	88 45 d4             	mov    %al,-0x2c(%ebp)
    hdl = resolveHandle(hdl);
40000868:	8b 45 0c             	mov    0xc(%ebp),%eax
4000086b:	e8 b0 fc ff ff       	call   40000520 <resolveHandle>
    if(hdl != 0) {
40000870:	85 c0                	test   %eax,%eax
40000872:	74 0f                	je     40000883 <fputc+0x27>
        return fwrite(hdl, &c, sizeof(char));
40000874:	52                   	push   %edx
40000875:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000878:	6a 01                	push   $0x1
4000087a:	52                   	push   %edx
4000087b:	50                   	push   %eax
4000087c:	e8 89 fe ff ff       	call   4000070a <fwrite>
40000881:	eb 39                	jmp    400008bc <fputc+0x60>
}

static int kputc(char c) {
  struct regstate state = {
    .eax = 201,
    .ebx = (uint32_t)c,
40000883:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000887:	83 ec 0c             	sub    $0xc,%esp
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
4000088a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);
4000088d:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40000890:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
  
  syscall(&state);
40000897:	50                   	push   %eax
    .ebx = (uint32_t)c,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40000898:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000089f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);
400008b4:	e8 bb 08 00 00       	call   40001174 <syscall>
  
  return state.eax;
400008b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
int fputc(char c, HANDLE hdl) {
    hdl = resolveHandle(hdl);
    if(hdl != 0) {
        return fwrite(hdl, &c, sizeof(char));
    }
    return kputc(c);
400008bc:	83 c4 10             	add    $0x10,%esp
}
400008bf:	c9                   	leave  
400008c0:	c3                   	ret    

400008c1 <putc>:

int putchar(char c) {
    return fputc(c, PMID_STDOUT);
}

int putc(char c, HANDLE hdl) {
400008c1:	55                   	push   %ebp
400008c2:	89 e5                	mov    %esp,%ebp
400008c4:	83 ec 08             	sub    $0x8,%esp
400008c7:	0f be 45 08          	movsbl 0x8(%ebp),%eax
    return fputc(c, hdl);
400008cb:	89 45 08             	mov    %eax,0x8(%ebp)
}
400008ce:	c9                   	leave  
int putchar(char c) {
    return fputc(c, PMID_STDOUT);
}

int putc(char c, HANDLE hdl) {
    return fputc(c, hdl);
400008cf:	e9 88 ff ff ff       	jmp    4000085c <fputc>

400008d4 <putchar>:
  syscall(&state);
  
  return state.eax;
}

int putchar(char c) {
400008d4:	55                   	push   %ebp
400008d5:	89 e5                	mov    %esp,%ebp
400008d7:	83 ec 10             	sub    $0x10,%esp
    return fputc(c, PMID_STDOUT);
400008da:	0f be 45 08          	movsbl 0x8(%ebp),%eax
400008de:	6a 01                	push   $0x1
400008e0:	50                   	push   %eax
400008e1:	e8 76 ff ff ff       	call   4000085c <fputc>
}
400008e6:	c9                   	leave  
400008e7:	c3                   	ret    

400008e8 <printf>:
  
  return wrt;
}

int printf(const char* fmt, ...)
{
400008e8:	55                   	push   %ebp
400008e9:	89 e5                	mov    %esp,%ebp
400008eb:	57                   	push   %edi
400008ec:	56                   	push   %esi
400008ed:	53                   	push   %ebx
400008ee:	83 ec 1c             	sub    $0x1c,%esp
  puts(p);
  
  return wrt;
}

int printf(const char* fmt, ...)
400008f1:	8d 75 0c             	lea    0xc(%ebp),%esi
{
400008f4:	8b 7d 08             	mov    0x8(%ebp),%edi
  puts(p);
  
  return wrt;
}

int printf(const char* fmt, ...)
400008f7:	31 db                	xor    %ebx,%ebx
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
400008f9:	e9 be 00 00 00       	jmp    400009bc <printf+0xd4>
    if (*fmt == '%') {
400008fe:	3c 25                	cmp    $0x25,%al
40000900:	0f 85 a4 00 00 00    	jne    400009aa <printf+0xc2>
      fmt++;
40000906:	47                   	inc    %edi
      switch (*fmt) {
40000907:	8a 07                	mov    (%edi),%al
40000909:	3c 70                	cmp    $0x70,%al
4000090b:	74 47                	je     40000954 <printf+0x6c>
4000090d:	7f 1a                	jg     40000929 <printf+0x41>
4000090f:	3c 63                	cmp    $0x63,%al
40000911:	74 5a                	je     4000096d <printf+0x85>
40000913:	7f 0e                	jg     40000923 <printf+0x3b>
40000915:	84 c0                	test   %al,%al
40000917:	0f 84 a9 00 00 00    	je     400009c6 <printf+0xde>
4000091d:	3c 25                	cmp    $0x25,%al
4000091f:	75 6c                	jne    4000098d <printf+0xa5>
40000921:	eb 63                	jmp    40000986 <printf+0x9e>
40000923:	3c 64                	cmp    $0x64,%al
40000925:	75 66                	jne    4000098d <printf+0xa5>
40000927:	eb 1e                	jmp    40000947 <printf+0x5f>
40000929:	3c 75                	cmp    $0x75,%al
4000092b:	74 1a                	je     40000947 <printf+0x5f>
4000092d:	3c 78                	cmp    $0x78,%al
4000092f:	74 23                	je     40000954 <printf+0x6c>
40000931:	3c 73                	cmp    $0x73,%al
40000933:	75 58                	jne    4000098d <printf+0xa5>
        case 's':
          s = va_arg(ap, char*);
          wrt += puts(s);
40000935:	83 ec 0c             	sub    $0xc,%esp
  while (*fmt) {
    if (*fmt == '%') {
      fmt++;
      switch (*fmt) {
        case 's':
          s = va_arg(ap, char*);
40000938:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += puts(s);
4000093b:	ff 36                	pushl  (%esi)
  while (*fmt) {
    if (*fmt == '%') {
      fmt++;
      switch (*fmt) {
        case 's':
          s = va_arg(ap, char*);
4000093d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += puts(s);
40000940:	e8 c6 fe ff ff       	call   4000080b <puts>
40000945:	eb 38                	jmp    4000097f <printf+0x97>
          break;
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000947:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putn(n, 10);
4000094a:	ba 0a 00 00 00       	mov    $0xa,%edx
          s = va_arg(ap, char*);
          wrt += puts(s);
          break;
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
4000094f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000952:	eb 0b                	jmp    4000095f <printf+0x77>
          wrt += putn(n, 10);
          break;
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000954:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putn(n, 16);
40000957:	ba 10 00 00 00       	mov    $0x10,%edx
          n = va_arg(ap, unsigned long int);
          wrt += putn(n, 10);
          break;
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
4000095c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putn(n, 16);
4000095f:	8b 06                	mov    (%esi),%eax
40000961:	e8 b7 fe ff ff       	call   4000081d <putn>
40000966:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000969:	01 c3                	add    %eax,%ebx
          break;
4000096b:	eb 4e                	jmp    400009bb <printf+0xd3>
        case 'c':
          c = va_arg(ap, int);
4000096d:	8d 46 04             	lea    0x4(%esi),%eax
          wrt += putchar(c);
40000970:	83 ec 0c             	sub    $0xc,%esp
        case 'p':
          n = va_arg(ap, unsigned long int);
          wrt += putn(n, 16);
          break;
        case 'c':
          c = va_arg(ap, int);
40000973:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putchar(c);
40000976:	0f be 06             	movsbl (%esi),%eax
40000979:	50                   	push   %eax
4000097a:	e8 55 ff ff ff       	call   400008d4 <putchar>
4000097f:	01 c3                	add    %eax,%ebx
40000981:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000984:	eb 32                	jmp    400009b8 <printf+0xd0>
          break;
        case '%':
          wrt += putchar('%');
40000986:	83 ec 0c             	sub    $0xc,%esp
40000989:	6a 25                	push   $0x25
4000098b:	eb 24                	jmp    400009b1 <printf+0xc9>
          break;
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
4000098d:	83 ec 0c             	sub    $0xc,%esp
40000990:	6a 25                	push   $0x25
40000992:	e8 3d ff ff ff       	call   400008d4 <putchar>
40000997:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          wrt += putchar(*fmt);
4000099a:	0f be 07             	movsbl (%edi),%eax
4000099d:	89 04 24             	mov    %eax,(%esp)
400009a0:	e8 2f ff ff ff       	call   400008d4 <putchar>
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
400009a5:	03 45 e4             	add    -0x1c(%ebp),%eax
400009a8:	eb 0c                	jmp    400009b6 <printf+0xce>
          wrt += putchar(*fmt);
          break;
      }
    } else {
      wrt += putchar(*fmt);
400009aa:	83 ec 0c             	sub    $0xc,%esp
400009ad:	0f be c0             	movsbl %al,%eax
400009b0:	50                   	push   %eax
400009b1:	e8 1e ff ff ff       	call   400008d4 <putchar>
400009b6:	01 c3                	add    %eax,%ebx
400009b8:	83 c4 10             	add    $0x10,%esp
    }

    fmt++;
400009bb:	47                   	inc    %edi
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
400009bc:	8a 07                	mov    (%edi),%al
400009be:	84 c0                	test   %al,%al
400009c0:	0f 85 38 ff ff ff    	jne    400008fe <printf+0x16>

out:
  va_end(ap);

  return wrt;
}
400009c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
400009c9:	89 d8                	mov    %ebx,%eax
400009cb:	5b                   	pop    %ebx
400009cc:	5e                   	pop    %esi
400009cd:	5f                   	pop    %edi
400009ce:	5d                   	pop    %ebp
400009cf:	c3                   	ret    

400009d0 <printrwerror>:
    syscall(&state);

    return (int)state.eax;
}

static void printrwerror(HANDLE handle, uint32_t res) {
400009d0:	55                   	push   %ebp
400009d1:	89 e5                	mov    %esp,%ebp
400009d3:	83 ec 08             	sub    $0x8,%esp
    if(res == RW_ERR_VFS) {
400009d6:	83 fa 02             	cmp    $0x2,%edx
400009d9:	75 0a                	jne    400009e5 <printrwerror+0x15>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
400009db:	52                   	push   %edx
400009dc:	52                   	push   %edx
400009dd:	50                   	push   %eax
400009de:	68 32 21 00 40       	push   $0x40002132
400009e3:	eb 2b                	jmp    40000a10 <printrwerror+0x40>
    }

    if(res == RW_ERR_DRIVER) {
400009e5:	83 fa 03             	cmp    $0x3,%edx
400009e8:	75 0a                	jne    400009f4 <printrwerror+0x24>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
400009ea:	51                   	push   %ecx
400009eb:	51                   	push   %ecx
400009ec:	50                   	push   %eax
400009ed:	68 4a 21 00 40       	push   $0x4000214a
400009f2:	eb 1c                	jmp    40000a10 <printrwerror+0x40>
    }

    if(res == RW_NOFM_READ) {
400009f4:	83 fa 04             	cmp    $0x4,%edx
400009f7:	75 0a                	jne    40000a03 <printrwerror+0x33>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
400009f9:	52                   	push   %edx
400009fa:	52                   	push   %edx
400009fb:	50                   	push   %eax
400009fc:	68 65 21 00 40       	push   $0x40002165
40000a01:	eb 0d                	jmp    40000a10 <printrwerror+0x40>
    }

    if(res == RW_NOFM_WRITE) {
40000a03:	83 fa 05             	cmp    $0x5,%edx
40000a06:	75 10                	jne    40000a18 <printrwerror+0x48>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
40000a08:	51                   	push   %ecx
40000a09:	51                   	push   %ecx
40000a0a:	50                   	push   %eax
40000a0b:	68 8f 21 00 40       	push   $0x4000218f
40000a10:	e8 d3 fe ff ff       	call   400008e8 <printf>
40000a15:	83 c4 10             	add    $0x10,%esp
    }
}
40000a18:	c9                   	leave  
40000a19:	c3                   	ret    

40000a1a <fread>:
    syscall(&state);

    return (int)state.eax;
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000a1a:	55                   	push   %ebp
40000a1b:	89 e5                	mov    %esp,%ebp
40000a1d:	57                   	push   %edi
40000a1e:	56                   	push   %esi
40000a1f:	53                   	push   %ebx
40000a20:	83 ec 38             	sub    $0x38,%esp
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000a23:	8d 7d d0             	lea    -0x30(%ebp),%edi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000a26:	8b 45 0c             	mov    0xc(%ebp),%eax
    syscall(&state);

    return (int)state.eax;
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000a29:	8b 75 08             	mov    0x8(%ebp),%esi
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000a2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000a2f:	8b 45 10             	mov    0x10(%ebp),%eax
40000a32:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000a39:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000a3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000a3f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000a46:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000a4d:	eb 2c                	jmp    40000a7b <fread+0x61>

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
        yield();
40000a4f:	e8 12 f8 ff ff       	call   40000266 <yield>
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
      .edx = length,
      .esi = 0,
      .edi = 0
    };
40000a54:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a57:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000a5a:	8b 45 10             	mov    0x10(%ebp),%eax
40000a5d:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000a64:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000a67:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000a6a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000a71:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000a78:	83 ec 0c             	sub    $0xc,%esp
40000a7b:	57                   	push   %edi
40000a7c:	e8 f3 06 00 00       	call   40001174 <syscall>

    return (int)state.eax;
40000a81:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000a84:	83 c4 10             	add    $0x10,%esp
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000a87:	83 fb 01             	cmp    $0x1,%ebx
40000a8a:	74 c3                	je     40000a4f <fread+0x35>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
40000a8c:	89 f0                	mov    %esi,%eax
40000a8e:	89 da                	mov    %ebx,%edx
40000a90:	e8 3b ff ff ff       	call   400009d0 <printrwerror>

    return res;
}
40000a95:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000a98:	89 d8                	mov    %ebx,%eax
40000a9a:	5b                   	pop    %ebx
40000a9b:	5e                   	pop    %esi
40000a9c:	5f                   	pop    %edi
40000a9d:	5d                   	pop    %ebp
40000a9e:	c3                   	ret    

40000a9f <fgetc>:
    syscall(&state);

    return (HANDLE)state.eax;
}

char fgetc(HANDLE hdl) {
40000a9f:	55                   	push   %ebp
40000aa0:	89 e5                	mov    %esp,%ebp
40000aa2:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000aa5:	8b 45 08             	mov    0x8(%ebp),%eax
40000aa8:	e8 73 fa ff ff       	call   40000520 <resolveHandle>
    char in = 0;
40000aad:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
40000ab1:	85 c0                	test   %eax,%eax
40000ab3:	74 10                	je     40000ac5 <fgetc+0x26>
        fread(hdl, &in, sizeof(char));
40000ab5:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000ab8:	51                   	push   %ecx
40000ab9:	6a 01                	push   $0x1
40000abb:	52                   	push   %edx
40000abc:	50                   	push   %eax
40000abd:	e8 58 ff ff ff       	call   40000a1a <fread>
40000ac2:	83 c4 10             	add    $0x10,%esp
    }
    return in;
}
40000ac5:	8a 45 f7             	mov    -0x9(%ebp),%al
40000ac8:	c9                   	leave  
40000ac9:	c3                   	ret    

40000aca <getchar>:

char getc(HANDLE hdl) {
    return fgetc(hdl);
}

char getchar() {
40000aca:	55                   	push   %ebp
40000acb:	89 e5                	mov    %esp,%ebp
40000acd:	83 ec 14             	sub    $0x14,%esp
    return fgetc(PMID_STDIN);
40000ad0:	6a 02                	push   $0x2
40000ad2:	e8 c8 ff ff ff       	call   40000a9f <fgetc>
}
40000ad7:	c9                   	leave  
40000ad8:	c3                   	ret    

40000ad9 <getc>:

    str[num] = '\0';
    return str;
}

char getc(HANDLE hdl) {
40000ad9:	55                   	push   %ebp
40000ada:	89 e5                	mov    %esp,%ebp
40000adc:	83 ec 08             	sub    $0x8,%esp
    return fgetc(hdl);
}
40000adf:	c9                   	leave  
    str[num] = '\0';
    return str;
}

char getc(HANDLE hdl) {
    return fgetc(hdl);
40000ae0:	e9 ba ff ff ff       	jmp    40000a9f <fgetc>

40000ae5 <fgets>:
        fread(hdl, &in, sizeof(char));
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
40000ae5:	55                   	push   %ebp
40000ae6:	89 e5                	mov    %esp,%ebp
40000ae8:	57                   	push   %edi
40000ae9:	56                   	push   %esi
40000aea:	53                   	push   %ebx
40000aeb:	83 ec 1c             	sub    $0x1c,%esp
40000aee:	31 db                	xor    %ebx,%ebx
40000af0:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000af3:	8b 75 08             	mov    0x8(%ebp),%esi
    for(int n = 0; n < (num - 1); n++) {
40000af6:	8d 47 ff             	lea    -0x1(%edi),%eax
40000af9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000afc:	eb 16                	jmp    40000b14 <fgets+0x2f>
        str[n] = fgetc(hdl);
40000afe:	83 ec 0c             	sub    $0xc,%esp
40000b01:	ff 75 10             	pushl  0x10(%ebp)
40000b04:	e8 96 ff ff ff       	call   40000a9f <fgetc>
        if(str[n] == 0 || str[n] == '\0') {
40000b09:	83 c4 10             	add    $0x10,%esp
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
        str[n] = fgetc(hdl);
40000b0c:	88 04 1e             	mov    %al,(%esi,%ebx,1)
        if(str[n] == 0 || str[n] == '\0') {
40000b0f:	84 c0                	test   %al,%al
40000b11:	74 0a                	je     40000b1d <fgets+0x38>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
40000b13:	43                   	inc    %ebx
40000b14:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000b17:	7c e5                	jl     40000afe <fgets+0x19>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
40000b19:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
    return str;
}
40000b1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b20:	89 f0                	mov    %esi,%eax
40000b22:	5b                   	pop    %ebx
40000b23:	5e                   	pop    %esi
40000b24:	5f                   	pop    %edi
40000b25:	5d                   	pop    %ebp
40000b26:	c3                   	ret    

40000b27 <getln>:

char getchar() {
    return fgetc(PMID_STDIN);
}

char* getln(char* str) {
40000b27:	55                   	push   %ebp
40000b28:	89 e5                	mov    %esp,%ebp
40000b2a:	56                   	push   %esi
40000b2b:	53                   	push   %ebx
40000b2c:	31 db                	xor    %ebx,%ebx
40000b2e:	8b 75 08             	mov    0x8(%ebp),%esi
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000b31:	eb 42                	jmp    40000b75 <getln+0x4e>
        if(lastChar == '\n') {
40000b33:	3c 0a                	cmp    $0xa,%al
40000b35:	75 0f                	jne    40000b46 <getln+0x1f>
            putchar('\n');
40000b37:	83 ec 0c             	sub    $0xc,%esp
40000b3a:	6a 0a                	push   $0xa
40000b3c:	e8 93 fd ff ff       	call   400008d4 <putchar>
            break;
40000b41:	83 c4 10             	add    $0x10,%esp
40000b44:	eb 40                	jmp    40000b86 <getln+0x5f>
        }

        if(lastChar == 8) {
40000b46:	3c 08                	cmp    $0x8,%al
40000b48:	75 18                	jne    40000b62 <getln+0x3b>
            if(index != 0) {
40000b4a:	85 db                	test   %ebx,%ebx
40000b4c:	74 0e                	je     40000b5c <getln+0x35>
                index--;
                putchar(8);
40000b4e:	83 ec 0c             	sub    $0xc,%esp
            break;
        }

        if(lastChar == 8) {
            if(index != 0) {
                index--;
40000b51:	4b                   	dec    %ebx
                putchar(8);
40000b52:	6a 08                	push   $0x8
40000b54:	e8 7b fd ff ff       	call   400008d4 <putchar>
40000b59:	83 c4 10             	add    $0x10,%esp
            }
            str[index] = 0;
40000b5c:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
            continue;
40000b60:	eb 13                	jmp    40000b75 <getln+0x4e>
        }

        str[index] = lastChar;
        putchar(lastChar);
40000b62:	83 ec 0c             	sub    $0xc,%esp
            }
            str[index] = 0;
            continue;
        }

        str[index] = lastChar;
40000b65:	88 04 1e             	mov    %al,(%esi,%ebx,1)
        putchar(lastChar);
40000b68:	0f be c0             	movsbl %al,%eax
40000b6b:	50                   	push   %eax

        index++;
40000b6c:	43                   	inc    %ebx
            str[index] = 0;
            continue;
        }

        str[index] = lastChar;
        putchar(lastChar);
40000b6d:	e8 62 fd ff ff       	call   400008d4 <putchar>

        index++;
40000b72:	83 c4 10             	add    $0x10,%esp

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000b75:	83 ec 0c             	sub    $0xc,%esp
40000b78:	6a 02                	push   $0x2
40000b7a:	e8 20 ff ff ff       	call   40000a9f <fgetc>
40000b7f:	83 c4 10             	add    $0x10,%esp
40000b82:	84 c0                	test   %al,%al
40000b84:	75 ad                	jne    40000b33 <getln+0xc>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000b86:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)

    return str;
}
40000b8a:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000b8d:	89 f0                	mov    %esi,%eax
40000b8f:	5b                   	pop    %ebx
40000b90:	5e                   	pop    %esi
40000b91:	5d                   	pop    %ebp
40000b92:	c3                   	ret    
	...

40000b94 <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000b94:	55                   	push   %ebp
40000b95:	89 e5                	mov    %esp,%ebp
40000b97:	53                   	push   %ebx
40000b98:	8b 45 08             	mov    0x8(%ebp),%eax
40000b9b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000b9e:	8b 4d 10             	mov    0x10(%ebp),%ecx
    unsigned char* p = buf;
40000ba1:	89 c2                	mov    %eax,%edx

    while (n--) {
40000ba3:	eb 04                	jmp    40000ba9 <memset+0x15>
        *p++ = c;
40000ba5:	88 1a                	mov    %bl,(%edx)
40000ba7:	49                   	dec    %ecx
40000ba8:	42                   	inc    %edx
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000ba9:	85 c9                	test   %ecx,%ecx
40000bab:	75 f8                	jne    40000ba5 <memset+0x11>
        *p++ = c;
    }

    return buf;
}
40000bad:	5b                   	pop    %ebx
40000bae:	5d                   	pop    %ebp
40000baf:	c3                   	ret    

40000bb0 <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000bb0:	55                   	push   %ebp
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000bb1:	31 c9                	xor    %ecx,%ecx
    }

    return buf;
}

void* memcpy(void* dest, const void* src, size_t n) {
40000bb3:	89 e5                	mov    %esp,%ebp
40000bb5:	56                   	push   %esi
40000bb6:	53                   	push   %ebx
40000bb7:	8b 75 10             	mov    0x10(%ebp),%esi
40000bba:	8b 45 08             	mov    0x8(%ebp),%eax
40000bbd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000bc0:	85 f6                	test   %esi,%esi
40000bc2:	75 04                	jne    40000bc8 <memcpy+0x18>
40000bc4:	31 c0                	xor    %eax,%eax
40000bc6:	eb 0a                	jmp    40000bd2 <memcpy+0x22>

    while (n--) {
        *(d++) = *(s++);
40000bc8:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000bcb:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000bce:	41                   	inc    %ecx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000bcf:	4e                   	dec    %esi
40000bd0:	75 f6                	jne    40000bc8 <memcpy+0x18>
        *(d++) = *(s++);
    }

    return dest;
}
40000bd2:	5b                   	pop    %ebx
40000bd3:	5e                   	pop    %esi
40000bd4:	5d                   	pop    %ebp
40000bd5:	c3                   	ret    

40000bd6 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000bd6:	55                   	push   %ebp
    if (ptr1 == 0)
40000bd7:	83 c8 ff             	or     $0xffffffff,%eax
    }

    return dest;
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000bda:	89 e5                	mov    %esp,%ebp
40000bdc:	57                   	push   %edi
40000bdd:	56                   	push   %esi
40000bde:	53                   	push   %ebx
40000bdf:	8b 75 08             	mov    0x8(%ebp),%esi
40000be2:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000be5:	8b 5d 10             	mov    0x10(%ebp),%ebx
    if (ptr1 == 0)
40000be8:	85 f6                	test   %esi,%esi
40000bea:	74 2c                	je     40000c18 <memcmp+0x42>
        return -1;
    if (ptr2 == 0)
40000bec:	b8 01 00 00 00       	mov    $0x1,%eax
40000bf1:	85 ff                	test   %edi,%edi
40000bf3:	74 23                	je     40000c18 <memcmp+0x42>
        return 1;
    if (num == 0)
40000bf5:	31 d2                	xor    %edx,%edx
40000bf7:	85 db                	test   %ebx,%ebx
40000bf9:	75 17                	jne    40000c12 <memcmp+0x3c>
40000bfb:	eb 19                	jmp    40000c16 <memcmp+0x40>

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
        if (pa[i] != pb[i]) {
40000bfd:	8a 04 16             	mov    (%esi,%edx,1),%al
40000c00:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000c03:	38 c8                	cmp    %cl,%al
40000c05:	74 0a                	je     40000c11 <memcmp+0x3b>
            return pa[i] - pb[i];
40000c07:	0f b6 c0             	movzbl %al,%eax
40000c0a:	0f b6 c9             	movzbl %cl,%ecx
40000c0d:	29 c8                	sub    %ecx,%eax
40000c0f:	eb 07                	jmp    40000c18 <memcmp+0x42>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000c11:	42                   	inc    %edx
40000c12:	39 da                	cmp    %ebx,%edx
40000c14:	72 e7                	jb     40000bfd <memcmp+0x27>
40000c16:	31 c0                	xor    %eax,%eax
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
}
40000c18:	5b                   	pop    %ebx
40000c19:	5e                   	pop    %esi
40000c1a:	5f                   	pop    %edi
40000c1b:	5d                   	pop    %ebp
40000c1c:	c3                   	ret    

40000c1d <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000c1d:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c1e:	31 c0                	xor    %eax,%eax
        }
    }
    return 0;
}

int strcmp(const char* str1, const char* str2) {
40000c20:	89 e5                	mov    %esp,%ebp
40000c22:	56                   	push   %esi
40000c23:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c24:	31 db                	xor    %ebx,%ebx
        }
    }
    return 0;
}

int strcmp(const char* str1, const char* str2) {
40000c26:	8b 55 08             	mov    0x8(%ebp),%edx
40000c29:	8b 4d 0c             	mov    0xc(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c2c:	85 d2                	test   %edx,%edx
40000c2e:	75 03                	jne    40000c33 <strcmp+0x16>
40000c30:	eb 09                	jmp    40000c3b <strcmp+0x1e>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000c32:	40                   	inc    %eax
40000c33:	89 c3                	mov    %eax,%ebx
40000c35:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000c39:	75 f7                	jne    40000c32 <strcmp+0x15>

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c3b:	31 c0                	xor    %eax,%eax
40000c3d:	31 f6                	xor    %esi,%esi
40000c3f:	85 c9                	test   %ecx,%ecx
40000c41:	75 03                	jne    40000c46 <strcmp+0x29>
40000c43:	eb 09                	jmp    40000c4e <strcmp+0x31>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000c45:	40                   	inc    %eax
40000c46:	89 c6                	mov    %eax,%esi
40000c48:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000c4c:	75 f7                	jne    40000c45 <strcmp+0x28>
int strcmp(const char* str1, const char* str2) {
    int l1 = strlen(str1);
    int l2 = strlen(str2);
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40000c4e:	89 f0                	mov    %esi,%eax
40000c50:	39 de                	cmp    %ebx,%esi
40000c52:	7e 02                	jle    40000c56 <strcmp+0x39>
40000c54:	89 d8                	mov    %ebx,%eax
40000c56:	40                   	inc    %eax
40000c57:	50                   	push   %eax
40000c58:	51                   	push   %ecx
40000c59:	52                   	push   %edx
40000c5a:	e8 77 ff ff ff       	call   40000bd6 <memcmp>
}
40000c5f:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000c62:	5b                   	pop    %ebx
40000c63:	5e                   	pop    %esi
40000c64:	5d                   	pop    %ebp
40000c65:	c3                   	ret    

40000c66 <strlen>:

unsigned int strlen(const char* str) {
40000c66:	55                   	push   %ebp
    if (str == 0)
40000c67:	31 d2                	xor    %edx,%edx
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
40000c69:	89 e5                	mov    %esp,%ebp
    if (str == 0)
40000c6b:	31 c0                	xor    %eax,%eax
    l1 = l1 < l2 ? l1 : l2;

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
40000c6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
    if (str == 0)
40000c70:	85 c9                	test   %ecx,%ecx
40000c72:	75 03                	jne    40000c77 <strlen+0x11>
40000c74:	eb 09                	jmp    40000c7f <strlen+0x19>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000c76:	42                   	inc    %edx
40000c77:	89 d0                	mov    %edx,%eax
40000c79:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000c7d:	75 f7                	jne    40000c76 <strlen+0x10>
        ;
    return i;
}
40000c7f:	5d                   	pop    %ebp
40000c80:	c3                   	ret    

40000c81 <strcpy>:

char* strcpy(char* dest, const char* src) {
40000c81:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c82:	31 d2                	xor    %edx,%edx
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
40000c84:	89 e5                	mov    %esp,%ebp
40000c86:	56                   	push   %esi
40000c87:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c88:	31 c9                	xor    %ecx,%ecx
    for (i = 0; str[i] != '\0'; i++)
        ;
    return i;
}

char* strcpy(char* dest, const char* src) {
40000c8a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c8d:	8b 45 08             	mov    0x8(%ebp),%eax

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000c90:	85 db                	test   %ebx,%ebx
40000c92:	75 03                	jne    40000c97 <strcpy+0x16>
40000c94:	eb 09                	jmp    40000c9f <strcpy+0x1e>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000c96:	42                   	inc    %edx
40000c97:	89 d1                	mov    %edx,%ecx
40000c99:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000c9d:	75 f7                	jne    40000c96 <strcpy+0x15>

void* memcpy(void* dest, const void* src, size_t n) {
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;
40000c9f:	89 ce                	mov    %ecx,%esi
40000ca1:	46                   	inc    %esi
40000ca2:	74 0c                	je     40000cb0 <strcpy+0x2f>
40000ca4:	31 d2                	xor    %edx,%edx

    while (n--) {
        *(d++) = *(s++);
40000ca6:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000ca9:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000cac:	42                   	inc    %edx
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000cad:	4e                   	dec    %esi
40000cae:	75 f6                	jne    40000ca6 <strcpy+0x25>
}

char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}
40000cb0:	5b                   	pop    %ebx
40000cb1:	5e                   	pop    %esi
40000cb2:	5d                   	pop    %ebp
40000cb3:	c3                   	ret    

40000cb4 <strtoknc>:
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
40000cb4:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000cb5:	31 c0                	xor    %eax,%eax
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
}

char* strtoknc(char* str, const char* delimiters) {
40000cb7:	89 e5                	mov    %esp,%ebp
40000cb9:	57                   	push   %edi
40000cba:	56                   	push   %esi
40000cbb:	53                   	push   %ebx
40000cbc:	83 ec 04             	sub    $0x4,%esp
40000cbf:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000cc2:	8b 4d 08             	mov    0x8(%ebp),%ecx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000cc5:	85 db                	test   %ebx,%ebx
40000cc7:	75 06                	jne    40000ccf <strtoknc+0x1b>
40000cc9:	e9 83 00 00 00       	jmp    40000d51 <strtoknc+0x9d>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000cce:	40                   	inc    %eax
40000ccf:	89 c7                	mov    %eax,%edi
40000cd1:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000cd5:	75 f7                	jne    40000cce <strtoknc+0x1a>
char* strtoknc(char* str, const char* delimiters) {
    int i = 0;
    int len = strlen(delimiters);

    /* check in the delimiters */
    if (len == 0)
40000cd7:	85 c0                	test   %eax,%eax
40000cd9:	74 76                	je     40000d51 <strtoknc+0x9d>
        return 0;

    /* if the original string has nothing left */
    if (!str && !sp)
40000cdb:	85 c9                	test   %ecx,%ecx
40000cdd:	75 0b                	jne    40000cea <strtoknc+0x36>
40000cdf:	83 3d 00 32 00 40 00 	cmpl   $0x0,0x40003200
40000ce6:	75 08                	jne    40000cf0 <strtoknc+0x3c>
40000ce8:	eb 67                	jmp    40000d51 <strtoknc+0x9d>
        return 0;

    /* initialize the sp during the first call */
    if (str) {
        sp = str;
40000cea:	89 0d 00 32 00 40    	mov    %ecx,0x40003200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
40000cf0:	a1 00 32 00 40       	mov    0x40003200,%eax
40000cf5:	31 c9                	xor    %ecx,%ecx
    while (1) {
        for (i = 0; i < len; i++) {
40000cf7:	eb 0b                	jmp    40000d04 <strtoknc+0x50>
            if (*p_start == delimiters[i]) {
40000cf9:	8a 10                	mov    (%eax),%dl
40000cfb:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000cfe:	75 03                	jne    40000d03 <strtoknc+0x4f>
                p_start++;
40000d00:	40                   	inc    %eax
                break;
40000d01:	eb 05                	jmp    40000d08 <strtoknc+0x54>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
40000d03:	41                   	inc    %ecx
40000d04:	39 f9                	cmp    %edi,%ecx
40000d06:	7c f1                	jl     40000cf9 <strtoknc+0x45>
                p_start++;
                break;
            }
        }

        if (i == len) {
40000d08:	39 f9                	cmp    %edi,%ecx
40000d0a:	75 e9                	jne    40000cf5 <strtoknc+0x41>
            sp = p_start;
40000d0c:	a3 00 32 00 40       	mov    %eax,0x40003200
            break;
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
40000d11:	80 38 00             	cmpb   $0x0,(%eax)
40000d14:	75 28                	jne    40000d3e <strtoknc+0x8a>
        sp = NULL;
40000d16:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
40000d1d:	00 00 00 
40000d20:	eb 2f                	jmp    40000d51 <strtoknc+0x9d>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
            if (*sp == delimiters[i]) {
40000d22:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000d25:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000d28:	75 05                	jne    40000d2f <strtoknc+0x7b>
                *sp = '\0';
40000d2a:	c6 06 00             	movb   $0x0,(%esi)
                break;
40000d2d:	eb 05                	jmp    40000d34 <strtoknc+0x80>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
40000d2f:	41                   	inc    %ecx
40000d30:	39 f9                	cmp    %edi,%ecx
40000d32:	7c ee                	jl     40000d22 <strtoknc+0x6e>
                *sp = '\0';
                break;
            }
        }

        sp++;
40000d34:	ff 05 00 32 00 40    	incl   0x40003200
        if (i < len)
40000d3a:	39 f9                	cmp    %edi,%ecx
40000d3c:	7c 15                	jl     40000d53 <strtoknc+0x9f>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
40000d3e:	8b 35 00 32 00 40    	mov    0x40003200,%esi
40000d44:	8a 16                	mov    (%esi),%dl
40000d46:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000d49:	84 d2                	test   %dl,%dl
40000d4b:	74 06                	je     40000d53 <strtoknc+0x9f>
40000d4d:	31 c9                	xor    %ecx,%ecx
40000d4f:	eb df                	jmp    40000d30 <strtoknc+0x7c>
40000d51:	31 c0                	xor    %eax,%eax
        if (i < len)
            break;
    }

    return p_start;
}
40000d53:	5a                   	pop    %edx
40000d54:	5b                   	pop    %ebx
40000d55:	5e                   	pop    %esi
40000d56:	5f                   	pop    %edi
40000d57:	5d                   	pop    %ebp
40000d58:	c3                   	ret    

40000d59 <strclone>:
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000d59:	55                   	push   %ebp

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d5a:	31 c0                	xor    %eax,%eax
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000d5c:	89 e5                	mov    %esp,%ebp
40000d5e:	56                   	push   %esi
40000d5f:	53                   	push   %ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d60:	31 d2                	xor    %edx,%edx
char* strcpy(char* dest, const char* src) {
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
40000d62:	8b 5d 08             	mov    0x8(%ebp),%ebx

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
}

unsigned int strlen(const char* str) {
    if (str == 0)
40000d65:	85 db                	test   %ebx,%ebx
40000d67:	75 03                	jne    40000d6c <strclone+0x13>
40000d69:	eb 09                	jmp    40000d74 <strclone+0x1b>
        return 0;
    int i;
    for (i = 0; str[i] != '\0'; i++)
40000d6b:	40                   	inc    %eax
40000d6c:	89 c2                	mov    %eax,%edx
40000d6e:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000d72:	75 f7                	jne    40000d6b <strclone+0x12>
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000d74:	83 ec 0c             	sub    $0xc,%esp
40000d77:	42                   	inc    %edx
40000d78:	52                   	push   %edx
40000d79:	e8 af 01 00 00       	call   40000f2d <malloc>
    strcpy(ret, str);
40000d7e:	59                   	pop    %ecx
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
    return dest;
}

char* strclone(char* str) {
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
40000d7f:	89 c6                	mov    %eax,%esi
    strcpy(ret, str);
40000d81:	58                   	pop    %eax
40000d82:	53                   	push   %ebx
40000d83:	56                   	push   %esi
40000d84:	e8 f8 fe ff ff       	call   40000c81 <strcpy>

    return ret;
}
40000d89:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000d8c:	89 f0                	mov    %esi,%eax
40000d8e:	5b                   	pop    %ebx
40000d8f:	5e                   	pop    %esi
40000d90:	5d                   	pop    %ebp
40000d91:	c3                   	ret    

40000d92 <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
40000d92:	55                   	push   %ebp
40000d93:	89 e5                	mov    %esp,%ebp
40000d95:	56                   	push   %esi
40000d96:	53                   	push   %ebx
40000d97:	8b 75 08             	mov    0x8(%ebp),%esi
40000d9a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40000d9d:	85 f6                	test   %esi,%esi
40000d9f:	74 2e                	je     40000dcf <strtok+0x3d>
        if(fr != 0) {
40000da1:	a1 04 32 00 40       	mov    0x40003204,%eax
40000da6:	85 c0                	test   %eax,%eax
40000da8:	74 0c                	je     40000db6 <strtok+0x24>
            free(fr);
40000daa:	83 ec 0c             	sub    $0xc,%esp
40000dad:	50                   	push   %eax
40000dae:	e8 31 00 00 00       	call   40000de4 <free>
40000db3:	83 c4 10             	add    $0x10,%esp
        }
        fr = strclone(str);
40000db6:	83 ec 0c             	sub    $0xc,%esp
40000db9:	56                   	push   %esi
40000dba:	e8 9a ff ff ff       	call   40000d59 <strclone>
        return strtoknc(fr, delimiters);
40000dbf:	83 c4 10             	add    $0x10,%esp
char* strtok(char* str, const char* delimiters) {
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
        if(fr != 0) {
            free(fr);
        }
        fr = strclone(str);
40000dc2:	a3 04 32 00 40       	mov    %eax,0x40003204
        return strtoknc(fr, delimiters);
40000dc7:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000dca:	89 45 08             	mov    %eax,0x8(%ebp)
40000dcd:	eb 0a                	jmp    40000dd9 <strtok+0x47>
    }
    return strtoknc(0, delimiters);
40000dcf:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000dd2:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
40000dd9:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ddc:	5b                   	pop    %ebx
40000ddd:	5e                   	pop    %esi
40000dde:	5d                   	pop    %ebp
            free(fr);
        }
        fr = strclone(str);
        return strtoknc(fr, delimiters);
    }
    return strtoknc(0, delimiters);
40000ddf:	e9 d0 fe ff ff       	jmp    40000cb4 <strtoknc>

40000de4 <free>:
        cur = cur->next;
    }
    return 0;
}

void free(void* ptr) {
40000de4:	55                   	push   %ebp
40000de5:	89 e5                	mov    %esp,%ebp
40000de7:	57                   	push   %edi
40000de8:	56                   	push   %esi
40000de9:	53                   	push   %ebx
40000dea:	83 ec 08             	sub    $0x8,%esp
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
40000ded:	8b 15 0c 32 00 40    	mov    0x4000320c,%edx
        cur = cur->next;
    }
    return 0;
}

void free(void* ptr) {
40000df3:	8b 4d 08             	mov    0x8(%ebp),%ecx
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
40000df6:	89 d0                	mov    %edx,%eax

    while (cur != 0) {
40000df8:	e9 b8 00 00 00       	jmp    40000eb5 <free+0xd1>
        if (cur->address == (uint32_t) ptr) {
40000dfd:	3b 48 04             	cmp    0x4(%eax),%ecx
40000e00:	0f 85 ac 00 00 00    	jne    40000eb2 <free+0xce>
40000e06:	31 c9                	xor    %ecx,%ecx
40000e08:	eb 23                	jmp    40000e2d <free+0x49>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000e0a:	39 c2                	cmp    %eax,%edx
40000e0c:	75 1a                	jne    40000e28 <free+0x44>
            if (last == 0) {
40000e0e:	85 c9                	test   %ecx,%ecx
40000e10:	8b 50 08             	mov    0x8(%eax),%edx
40000e13:	75 0e                	jne    40000e23 <free+0x3f>
                *root = cur->next;
40000e15:	89 15 0c 32 00 40    	mov    %edx,0x4000320c
40000e1b:	8b 0d 10 32 00 40    	mov    0x40003210,%ecx
40000e21:	eb 10                	jmp    40000e33 <free+0x4f>
                return;
            } else {
                last->next = cur->next;
40000e23:	89 51 08             	mov    %edx,0x8(%ecx)
40000e26:	eb f3                	jmp    40000e1b <free+0x37>
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000e28:	89 d1                	mov    %edx,%ecx
40000e2a:	8b 52 08             	mov    0x8(%edx),%edx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000e2d:	85 d2                	test   %edx,%edx
40000e2f:	75 d9                	jne    40000e0a <free+0x26>
40000e31:	eb e8                	jmp    40000e1b <free+0x37>
40000e33:	89 ca                	mov    %ecx,%edx
40000e35:	eb 6d                	jmp    40000ea4 <free+0xc0>

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
        if (cur->address + cur->size == tf->address) {
40000e37:	8b 5a 04             	mov    0x4(%edx),%ebx
40000e3a:	8b 32                	mov    (%edx),%esi
40000e3c:	8b 78 04             	mov    0x4(%eax),%edi
40000e3f:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000e42:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000e45:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000e48:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000e4b:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000e4e:	75 18                	jne    40000e68 <free+0x84>
            tf->address = cur->address;
40000e50:	89 58 04             	mov    %ebx,0x4(%eax)
40000e53:	31 f6                	xor    %esi,%esi
40000e55:	89 cb                	mov    %ecx,%ebx
40000e57:	eb 09                	jmp    40000e62 <free+0x7e>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000e59:	39 d3                	cmp    %edx,%ebx
40000e5b:	74 29                	je     40000e86 <free+0xa2>
                last->next = cur->next;
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000e5d:	89 de                	mov    %ebx,%esi
40000e5f:	8b 5b 08             	mov    0x8(%ebx),%ebx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000e62:	85 db                	test   %ebx,%ebx
40000e64:	75 f3                	jne    40000e59 <free+0x75>
40000e66:	eb cb                	jmp    40000e33 <free+0x4f>
            tf->address = cur->address;
            remove_from_list(&first_free, cur);
            goto editedList;
        }

        if (cur->address == tf->address + tf->size) {
40000e68:	8b 38                	mov    (%eax),%edi
40000e6a:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000e6d:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000e70:	03 7d f0             	add    -0x10(%ebp),%edi
40000e73:	39 fb                	cmp    %edi,%ebx
40000e75:	75 2a                	jne    40000ea1 <free+0xbd>
            tf->size += cur->size;
40000e77:	03 75 f0             	add    -0x10(%ebp),%esi
40000e7a:	89 cb                	mov    %ecx,%ebx
40000e7c:	89 30                	mov    %esi,(%eax)
40000e7e:	31 f6                	xor    %esi,%esi
40000e80:	eb 19                	jmp    40000e9b <free+0xb7>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000e82:	39 d3                	cmp    %edx,%ebx
40000e84:	75 10                	jne    40000e96 <free+0xb2>
            if (last == 0) {
40000e86:	85 f6                	test   %esi,%esi
40000e88:	8b 53 08             	mov    0x8(%ebx),%edx
40000e8b:	75 04                	jne    40000e91 <free+0xad>
                *root = cur->next;
40000e8d:	89 d1                	mov    %edx,%ecx
40000e8f:	eb a2                	jmp    40000e33 <free+0x4f>
                return;
            } else {
                last->next = cur->next;
40000e91:	89 56 08             	mov    %edx,0x8(%esi)
40000e94:	eb 9d                	jmp    40000e33 <free+0x4f>
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000e96:	89 de                	mov    %ebx,%esi
40000e98:	8b 5b 08             	mov    0x8(%ebx),%ebx
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000e9b:	85 db                	test   %ebx,%ebx
40000e9d:	75 e3                	jne    40000e82 <free+0x9e>
40000e9f:	eb 92                	jmp    40000e33 <free+0x4f>
            remove_from_list(&first_free, cur);
            goto editedList;
        }

        last = cur;
        cur = cur->next;
40000ea1:	8b 52 08             	mov    0x8(%edx),%edx
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
40000ea4:	85 d2                	test   %edx,%edx
40000ea6:	75 8f                	jne    40000e37 <free+0x53>
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000ea8:	89 48 08             	mov    %ecx,0x8(%eax)
    *root = element;
40000eab:	a3 10 32 00 40       	mov    %eax,0x40003210
    struct memory_node* cur = first_used;

    while (cur != 0) {
        if (cur->address == (uint32_t) ptr) {
            merge_into_frees(cur);
            break;
40000eb0:	eb 0b                	jmp    40000ebd <free+0xd9>
        }
        last = cur;
        cur = cur->next;
40000eb2:	8b 40 08             	mov    0x8(%eax),%eax

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40000eb5:	85 c0                	test   %eax,%eax
40000eb7:	0f 85 40 ff ff ff    	jne    40000dfd <free+0x19>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
40000ebd:	58                   	pop    %eax
40000ebe:	5a                   	pop    %edx
40000ebf:	5b                   	pop    %ebx
40000ec0:	5e                   	pop    %esi
40000ec1:	5f                   	pop    %edi
40000ec2:	5d                   	pop    %ebp
40000ec3:	c3                   	ret    

40000ec4 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
40000ec4:	55                   	push   %ebp
40000ec5:	89 e5                	mov    %esp,%ebp
40000ec7:	53                   	push   %ebx
40000ec8:	83 ec 04             	sub    $0x4,%esp
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
    if (*root == 0)
40000ecb:	a1 08 32 00 40       	mov    0x40003208,%eax
40000ed0:	eb 45                	jmp    40000f17 <pop_unused_node+0x53>
    remove_from_list(root, pop);
    return pop;
}

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
40000ed2:	83 ec 0c             	sub    $0xc,%esp
40000ed5:	6a 01                	push   $0x1
40000ed7:	e8 5b 02 00 00       	call   40001137 <vmm_alloc_cont>
    memset(new_nodes, 0, PAGESIZE);
40000edc:	83 c4 0c             	add    $0xc,%esp
    remove_from_list(root, pop);
    return pop;
}

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
40000edf:	89 c3                	mov    %eax,%ebx
    memset(new_nodes, 0, PAGESIZE);
40000ee1:	68 00 10 00 00       	push   $0x1000
40000ee6:	6a 00                	push   $0x0
40000ee8:	50                   	push   %eax
40000ee9:	e8 a6 fc ff ff       	call   40000b94 <memset>
40000eee:	8b 15 08 32 00 40    	mov    0x40003208,%edx
40000ef4:	8d 43 0c             	lea    0xc(%ebx),%eax
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
40000ef7:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40000efd:	83 c4 10             	add    $0x10,%esp
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000f00:	89 50 08             	mov    %edx,0x8(%eax)
40000f03:	89 c2                	mov    %eax,%edx
40000f05:	83 c0 0c             	add    $0xc,%eax

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40000f08:	39 c8                	cmp    %ecx,%eax
40000f0a:	75 f4                	jne    40000f00 <pop_unused_node+0x3c>
40000f0c:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40000f12:	a3 08 32 00 40       	mov    %eax,0x40003208
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
    if (*root == 0)
40000f17:	85 c0                	test   %eax,%eax
40000f19:	74 b7                	je     40000ed2 <pop_unused_node+0xe>
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
            if (last == 0) {
                *root = cur->next;
40000f1b:	8b 50 08             	mov    0x8(%eax),%edx
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40000f1e:	85 c0                	test   %eax,%eax
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
            if (last == 0) {
                *root = cur->next;
40000f20:	89 15 08 32 00 40    	mov    %edx,0x40003208
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40000f26:	74 aa                	je     40000ed2 <pop_unused_node+0xe>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
}
40000f28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000f2b:	c9                   	leave  
40000f2c:	c3                   	ret    

40000f2d <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
40000f2d:	55                   	push   %ebp
40000f2e:	89 e5                	mov    %esp,%ebp
40000f30:	57                   	push   %edi
40000f31:	56                   	push   %esi
40000f32:	53                   	push   %ebx
40000f33:	83 ec 1c             	sub    $0x1c,%esp
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;
40000f36:	a1 10 32 00 40       	mov    0x40003210,%eax
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
40000f3b:	8b 75 08             	mov    0x8(%ebp),%esi
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;
40000f3e:	89 c3                	mov    %eax,%ebx

    while (cur != 0) {
40000f40:	eb 07                	jmp    40000f49 <malloc+0x1c>
        if (cur->size >= size) {
40000f42:	39 33                	cmp    %esi,(%ebx)
40000f44:	73 0c                	jae    40000f52 <malloc+0x25>
            break;
        }
        last = cur;
        cur = cur->next;
40000f46:	8b 5b 08             	mov    0x8(%ebx),%ebx

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40000f49:	85 db                	test   %ebx,%ebx
40000f4b:	75 f5                	jne    40000f42 <malloc+0x15>
40000f4d:	e9 93 00 00 00       	jmp    40000fe5 <malloc+0xb8>

        append_to_list(&first_used, fill);

        return (void*) fill->address;
    } else {
        uint32_t freesize = cur->size - size;
40000f52:	8b 3b                	mov    (%ebx),%edi

        cur->size = size;
40000f54:	31 d2                	xor    %edx,%edx

        append_to_list(&first_used, fill);

        return (void*) fill->address;
    } else {
        uint32_t freesize = cur->size - size;
40000f56:	29 f7                	sub    %esi,%edi

        cur->size = size;
40000f58:	89 33                	mov    %esi,(%ebx)
40000f5a:	eb 4b                	jmp    40000fa7 <malloc+0x7a>

        fill->address = (uint32_t) addr;
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();
40000f5c:	e8 63 ff ff ff       	call   40000ec4 <pop_unused_node>

            free->address = fill->address + fill->size;
40000f61:	8b 13                	mov    (%ebx),%edx
40000f63:	03 53 04             	add    0x4(%ebx),%edx
            free->size = pgs * PAGESIZE - size;
40000f66:	29 f7                	sub    %esi,%edi
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();

            free->address = fill->address + fill->size;
40000f68:	89 50 04             	mov    %edx,0x4(%eax)
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000f6b:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40000f71:	89 50 08             	mov    %edx,0x8(%eax)

        if (pgs * PAGESIZE > size) {
            struct memory_node* free = pop_unused_node();

            free->address = fill->address + fill->size;
            free->size = pgs * PAGESIZE - size;
40000f74:	89 38                	mov    %edi,(%eax)
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
    *root = element;
40000f76:	a3 10 32 00 40       	mov    %eax,0x40003210
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000f7b:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40000f80:	89 43 08             	mov    %eax,0x8(%ebx)
    *root = element;
40000f83:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
40000f89:	eb 4f                	jmp    40000fda <malloc+0xad>
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
        if (cur == element) {
40000f8b:	39 d8                	cmp    %ebx,%eax
40000f8d:	75 13                	jne    40000fa2 <malloc+0x75>
            if (last == 0) {
40000f8f:	85 d2                	test   %edx,%edx
40000f91:	8b 43 08             	mov    0x8(%ebx),%eax
40000f94:	75 07                	jne    40000f9d <malloc+0x70>
                *root = cur->next;
40000f96:	a3 10 32 00 40       	mov    %eax,0x40003210
40000f9b:	eb 0e                	jmp    40000fab <malloc+0x7e>
                return;
            } else {
                last->next = cur->next;
40000f9d:	89 42 08             	mov    %eax,0x8(%edx)
40000fa0:	eb 09                	jmp    40000fab <malloc+0x7e>
                return;
            }
        }
        last = cur;
        cur = cur->next;
40000fa2:	89 c2                	mov    %eax,%edx
40000fa4:	8b 40 08             	mov    0x8(%eax),%eax
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40000fa7:	85 c0                	test   %eax,%eax
40000fa9:	75 e0                	jne    40000f8b <malloc+0x5e>
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000fab:	a1 0c 32 00 40       	mov    0x4000320c,%eax
        cur->size = size;

        remove_from_list(&first_free, cur);
        append_to_list(&first_used, cur);

        if (freesize > 0) {
40000fb0:	85 ff                	test   %edi,%edi
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000fb2:	89 43 08             	mov    %eax,0x8(%ebx)
    *root = element;
40000fb5:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
        cur->size = size;

        remove_from_list(&first_free, cur);
        append_to_list(&first_used, cur);

        if (freesize > 0) {
40000fbb:	74 1d                	je     40000fda <malloc+0xad>
            struct memory_node* free = pop_unused_node();
40000fbd:	e8 02 ff ff ff       	call   40000ec4 <pop_unused_node>

            free->address = cur->address + cur->size;
40000fc2:	8b 13                	mov    (%ebx),%edx
40000fc4:	03 53 04             	add    0x4(%ebx),%edx
40000fc7:	89 50 04             	mov    %edx,0x4(%eax)
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
40000fca:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40000fd0:	89 50 08             	mov    %edx,0x8(%eax)

        if (freesize > 0) {
            struct memory_node* free = pop_unused_node();

            free->address = cur->address + cur->size;
            free->size = freesize;
40000fd3:	89 38                	mov    %edi,(%eax)
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
    element->next = *root;
    *root = element;
40000fd5:	a3 10 32 00 40       	mov    %eax,0x40003210
            free->size = freesize;

            append_to_list(&first_free, free);
        }

        return (void*) cur->address;
40000fda:	8b 43 04             	mov    0x4(%ebx),%eax
    }
}
40000fdd:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000fe0:	5b                   	pop    %ebx
40000fe1:	5e                   	pop    %esi
40000fe2:	5f                   	pop    %edi
40000fe3:	5d                   	pop    %ebp
40000fe4:	c3                   	ret    
    }

    if (cur == 0) {
        uint32_t pgs = size / PAGESIZE;

        if ((size % PAGESIZE) != 0)
40000fe5:	89 f0                	mov    %esi,%eax
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
        uint32_t pgs = size / PAGESIZE;
40000fe7:	89 f7                	mov    %esi,%edi
40000fe9:	c1 ef 0c             	shr    $0xc,%edi

        if ((size % PAGESIZE) != 0)
40000fec:	25 ff 0f 00 00       	and    $0xfff,%eax
            pgs++;
40000ff1:	83 f8 01             	cmp    $0x1,%eax
40000ff4:	83 df ff             	sbb    $0xffffffff,%edi

        void* addr = vmm_alloc_cont(pgs);
40000ff7:	83 ec 0c             	sub    $0xc,%esp
40000ffa:	57                   	push   %edi
40000ffb:	e8 37 01 00 00       	call   40001137 <vmm_alloc_cont>
        struct memory_node* fill = pop_unused_node();

        fill->address = (uint32_t) addr;
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
40001000:	c1 e7 0c             	shl    $0xc,%edi
        if ((size % PAGESIZE) != 0)
            pgs++;

        void* addr = vmm_alloc_cont(pgs);

        struct memory_node* fill = pop_unused_node();
40001003:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001006:	e8 b9 fe ff ff       	call   40000ec4 <pop_unused_node>

        fill->address = (uint32_t) addr;
4000100b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
        fill->size = (uint32_t) size;

        if (pgs * PAGESIZE > size) {
4000100e:	83 c4 10             	add    $0x10,%esp
        if ((size % PAGESIZE) != 0)
            pgs++;

        void* addr = vmm_alloc_cont(pgs);

        struct memory_node* fill = pop_unused_node();
40001011:	89 c3                	mov    %eax,%ebx

        fill->address = (uint32_t) addr;
40001013:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
40001016:	89 30                	mov    %esi,(%eax)

        if (pgs * PAGESIZE > size) {
40001018:	39 f7                	cmp    %esi,%edi
4000101a:	0f 86 5b ff ff ff    	jbe    40000f7b <malloc+0x4e>
40001020:	e9 37 ff ff ff       	jmp    40000f5c <malloc+0x2f>

40001025 <realloc>:
    }

    return p;
}

void* realloc(void* ptr, size_t size) {
40001025:	55                   	push   %ebp
40001026:	89 e5                	mov    %esp,%ebp
40001028:	56                   	push   %esi
40001029:	53                   	push   %ebx
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;
4000102a:	8b 1d 0c 32 00 40    	mov    0x4000320c,%ebx
    }

    return p;
}

void* realloc(void* ptr, size_t size) {
40001030:	8b 55 08             	mov    0x8(%ebp),%edx
40001033:	8b 45 0c             	mov    0xc(%ebp),%eax
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40001036:	eb 3e                	jmp    40001076 <realloc+0x51>
        if (cur->address == (uint32_t) ptr) {
40001038:	3b 53 04             	cmp    0x4(%ebx),%edx
4000103b:	75 36                	jne    40001073 <realloc+0x4e>
            if (size == 0) {
4000103d:	85 c0                	test   %eax,%eax
4000103f:	75 0b                	jne    4000104c <realloc+0x27>
                free(ptr);
40001041:	52                   	push   %edx
40001042:	31 f6                	xor    %esi,%esi
40001044:	e8 9b fd ff ff       	call   40000de4 <free>
                return 0;
40001049:	5b                   	pop    %ebx
4000104a:	eb 30                	jmp    4000107c <realloc+0x57>
            } else {
                void* new = malloc(size);
4000104c:	83 ec 0c             	sub    $0xc,%esp
4000104f:	50                   	push   %eax
40001050:	e8 d8 fe ff ff       	call   40000f2d <malloc>
                memcpy(new, (void*) cur->address, cur->size);
40001055:	83 c4 0c             	add    $0xc,%esp
        if (cur->address == (uint32_t) ptr) {
            if (size == 0) {
                free(ptr);
                return 0;
            } else {
                void* new = malloc(size);
40001058:	89 c6                	mov    %eax,%esi
                memcpy(new, (void*) cur->address, cur->size);
4000105a:	ff 33                	pushl  (%ebx)
4000105c:	ff 73 04             	pushl  0x4(%ebx)
4000105f:	50                   	push   %eax
40001060:	e8 4b fb ff ff       	call   40000bb0 <memcpy>
                free((void*) cur->address);
40001065:	59                   	pop    %ecx
40001066:	ff 73 04             	pushl  0x4(%ebx)
40001069:	e8 76 fd ff ff       	call   40000de4 <free>

                return new;
4000106e:	83 c4 10             	add    $0x10,%esp
40001071:	eb 09                	jmp    4000107c <realloc+0x57>
            }
        }
        last = cur;
        cur = cur->next;
40001073:	8b 5b 08             	mov    0x8(%ebx),%ebx

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40001076:	85 db                	test   %ebx,%ebx
40001078:	75 be                	jne    40001038 <realloc+0x13>
4000107a:	31 f6                	xor    %esi,%esi
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
}
4000107c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000107f:	89 f0                	mov    %esi,%eax
40001081:	5b                   	pop    %ebx
40001082:	5e                   	pop    %esi
40001083:	5d                   	pop    %ebp
40001084:	c3                   	ret    

40001085 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
40001085:	55                   	push   %ebp
40001086:	89 e5                	mov    %esp,%ebp
40001088:	56                   	push   %esi
40001089:	53                   	push   %ebx
4000108a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    size_t gsize = num * size;
    void* p = malloc(gsize);
4000108d:	83 ec 0c             	sub    $0xc,%esp
        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
    size_t gsize = num * size;
40001090:	0f af 5d 08          	imul   0x8(%ebp),%ebx
    void* p = malloc(gsize);
40001094:	53                   	push   %ebx
40001095:	e8 93 fe ff ff       	call   40000f2d <malloc>

    if (p != 0) {
4000109a:	83 c4 10             	add    $0x10,%esp
    }
}

void* calloc(size_t num, size_t size) {
    size_t gsize = num * size;
    void* p = malloc(gsize);
4000109d:	89 c6                	mov    %eax,%esi

    if (p != 0) {
4000109f:	85 c0                	test   %eax,%eax
400010a1:	74 0d                	je     400010b0 <calloc+0x2b>
        memset(p, 0, gsize);
400010a3:	50                   	push   %eax
400010a4:	53                   	push   %ebx
400010a5:	6a 00                	push   $0x0
400010a7:	56                   	push   %esi
400010a8:	e8 e7 fa ff ff       	call   40000b94 <memset>
400010ad:	83 c4 10             	add    $0x10,%esp
    }

    return p;
}
400010b0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400010b3:	89 f0                	mov    %esi,%eax
400010b5:	5b                   	pop    %ebx
400010b6:	5e                   	pop    %esi
400010b7:	5d                   	pop    %ebp
400010b8:	c3                   	ret    
400010b9:	00 00                	add    %al,(%eax)
	...

400010bc <print_memstat>:
  };
  
  syscall(&state);  
}

void print_memstat() {
400010bc:	55                   	push   %ebp
400010bd:	89 e5                	mov    %esp,%ebp
400010bf:	83 ec 34             	sub    $0x34,%esp
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
400010c2:	8d 45 e0             	lea    -0x20(%ebp),%eax
    .ebx = 0,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400010c5:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
  
  syscall(&state);  
400010cc:	50                   	push   %eax
    .ebx = 0,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
400010cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400010d4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400010db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400010e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400010e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
400010f0:	e8 7f 00 00 00       	call   40001174 <syscall>
400010f5:	83 c4 10             	add    $0x10,%esp
}
400010f8:	c9                   	leave  
400010f9:	c3                   	ret    

400010fa <vmm_free>:
  syscall(&state);  
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
400010fa:	55                   	push   %ebp
400010fb:	89 e5                	mov    %esp,%ebp
400010fd:	83 ec 34             	sub    $0x34,%esp
    .ebx = (uint32_t)vaddr,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001100:	8b 45 08             	mov    0x8(%ebp),%eax
40001103:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000110a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);  
4000110d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001110:	50                   	push   %eax
    .ebx = (uint32_t)vaddr,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
40001111:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001118:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000111f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
4000112d:	e8 42 00 00 00       	call   40001174 <syscall>
40001132:	83 c4 10             	add    $0x10,%esp
}
40001135:	c9                   	leave  
40001136:	c3                   	ret    

40001137 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
40001137:	55                   	push   %ebp
40001138:	89 e5                	mov    %esp,%ebp
4000113a:	83 ec 34             	sub    $0x34,%esp
    .ebx = cont,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
4000113d:	8b 45 08             	mov    0x8(%ebp),%eax
40001140:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
40001147:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  syscall(&state);  
4000114a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000114d:	50                   	push   %eax
    .ebx = cont,
    .ecx = 0,
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
4000114e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001155:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000115c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001163:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  syscall(&state);  
4000116a:	e8 05 00 00 00       	call   40001174 <syscall>
  
  return (void*)state.eax;
}
4000116f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001172:	c9                   	leave  
40001173:	c3                   	ret    

40001174 <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
40001174:	55                   	push   %ebp
40001175:	89 e5                	mov    %esp,%ebp
40001177:	57                   	push   %edi
40001178:	56                   	push   %esi
40001179:	53                   	push   %ebx
4000117a:	83 ec 10             	sub    $0x10,%esp
	asm("int $0x30"
4000117d:	8b 55 08             	mov    0x8(%ebp),%edx
40001180:	8b 45 08             	mov    0x8(%ebp),%eax
40001183:	8b 72 0c             	mov    0xc(%edx),%esi
40001186:	8b 00                	mov    (%eax),%eax
40001188:	89 75 e4             	mov    %esi,-0x1c(%ebp)
4000118b:	8b 5a 04             	mov    0x4(%edx),%ebx
4000118e:	8b 4a 08             	mov    0x8(%edx),%ecx
40001191:	8b 72 10             	mov    0x10(%edx),%esi
40001194:	8b 7a 14             	mov    0x14(%edx),%edi
40001197:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000119a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000119d:	cd 30                	int    $0x30
4000119f:	89 55 e8             	mov    %edx,-0x18(%ebp)
400011a2:	8b 55 08             	mov    0x8(%ebp),%edx
400011a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
400011a8:	89 02                	mov    %eax,(%edx)
400011aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
400011ad:	89 5a 04             	mov    %ebx,0x4(%edx)
400011b0:	89 4a 08             	mov    %ecx,0x8(%edx)
400011b3:	89 42 0c             	mov    %eax,0xc(%edx)
400011b6:	89 72 10             	mov    %esi,0x10(%edx)
400011b9:	89 7a 14             	mov    %edi,0x14(%edx)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
400011bc:	83 c4 10             	add    $0x10,%esp
400011bf:	5b                   	pop    %ebx
400011c0:	5e                   	pop    %esi
400011c1:	5f                   	pop    %edi
400011c2:	5d                   	pop    %ebp
400011c3:	c3                   	ret    
