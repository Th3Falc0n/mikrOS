
../../initrfs/ibin/ttytovga:     file format elf32-i386
../../initrfs/ibin/ttytovga
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400016d9

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000019af memsz 0x000019af flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x00001244 memsz 0x00002244 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019af  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       00000244  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000244  40004000  40004000  00004244  2**5
                  ALLOC
  4 .stab         0000477c  00000000  00000000  00004244  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  000089c0  2**0
                  CONTENTS, READONLY
  6 .stabstr      0000198a  00000000  00000000  00008a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ttytovga.c
40004008 l     O .bss	00000004 x
4000400c l     O .bss	00000004 y
40002000 l     O .data	00000001 color
00000000 l    df *ABS*	00000000 stdio.c
400002f4 l     F .text	00000043 getpmhandle
40000337 l     F .text	00000015 getstdout
4000034c l     F .text	00000015 getstdin
40000361 l     F .text	00000015 getstderr
40000485 l     F .text	0000006c printrwerror
400004f1 l     F .text	00000041 frwrite
40000589 l     F .text	00000041 frread
40000664 l     F .text	00000025 resolveHandle
400007e9 l     F .text	0000004a kputc
400008c1 l     F .text	00000043 kputs
4000096b l     F .text	0000007c putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000ebc l     F .text	00000057 remove_from_list
40000f13 l     F .text	00000018 append_to_list
40000f2b l     F .text	00000031 pop_from_list
40000f5c l     F .text	00000062 allocate_unused_nodes
40000fbe l     F .text	0000003b pop_unused_node
40000ff9 l     F .text	000000c8 merge_into_frees
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
00000000 l    df *ABS*	00000000 process.c
40001488 l     F .text	00000040 return_rpc
40001548 l     F .text	00000043 register_irq_rpc_syscall
40004040 l     O .bss	00000200 irq_handlers
400015be l     F .text	00000088 _handle_rpc
4000322c l     O .rodata	00000018 C.8.1010
40001695 l     F .text	00000044 getargs
400017c2 g     F .text	00000040 getExecPath
40000833 g     F .text	00000020 putchar
40000cf1 g     F .text	00000023 strcpy
40001731 g     F .text	00000041 yield
400009e7 g     F .text	0000017a printf
40001410 g     F .text	00000077 syscall
400006c3 g     F .text	00000062 fgets
40000725 g     F .text	00000016 getc
40000b92 g     F .text	00000045 memcpy
40000904 g     F .text	00000018 puts
400010c1 g     F .text	00000166 malloc
40001508 g     F .text	00000040 fetch_rpc_data
40000dac g     F .text	0000010d strtoknc
40001802 g     F .text	00000043 changeExecPath
40004020 g     O .bss	00000004 first_free
40000000 g     F .text	00000050 sendCommand
400003b8 g     F .text	00000018 setstdout
40001227 g     F .text	0000003f calloc
40004000 g     O .bss	00000006 vgac
4000134c g     F .text	00000043 vmm_alloc_cont
40001873 g     F .text	00000042 exec
400016d9 g     F .text	00000058 _start
40001266 g     F .text	0000009e realloc
40001646 g     F .text	0000004f set_rpc_handler
40000d4b g     F .text	00000061 strtok
40000bd7 g     F .text	0000009b memcmp
400005ca g     F .text	00000057 fread
40004018 g     O .bss	00000004 first_unused
40000400 g     F .text	00000042 fopen
40000b64 g     F .text	0000002e memset
40000050 g     F .text	0000025f main
40000442 g     F .text	00000043 fclose
4000073b g     F .text	00000015 getchar
40000750 g     F .text	00000099 getln
40004014 g     O .bss	00000004 fr
40000853 g     F .text	00000021 putc
40000c72 g     F .text	0000004f strcmp
40004240 g     O .bss	00000004 vgaController
40000689 g     F .text	0000003a fgetc
40001845 g     F .text	0000002e cd
40004010 g     O .bss	00000004 sp
4000401c g     O .bss	00000004 first_used
40000874 g     F .text	0000004d fputc
40000532 g     F .text	00000057 fwrite
400003d0 g     F .text	00000018 setstdin
400018b5 g     F .text	00000039 texec
40000d14 g     F .text	00000037 strclone
40001772 g     F .text	00000050 exit
4000158b g     F .text	00000033 register_irq_handler
40000376 g     F .text	00000042 fopenpmhandle
4000138f g     F .text	00000040 vmm_free
400018ee g     F .text	000000c1 printFilesystemError
40000cc1 g     F .text	00000030 strlen
400002b0 g     F .text	00000044 getLastVFSErr
4000091c g     F .text	0000004f fputs
40000621 g     F .text	00000043 fmkfifo
400014c8 g     F .text	00000040 call_rpc
400003e8 g     F .text	00000018 setstderr
400013cf g     F .text	00000041 print_memstat
40001304 g     F .text	00000048 free



Disassembly of section .text:

40000000 <sendCommand>:

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 18             	sub    $0x18,%esp
40000006:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000009:	8b 55 0c             	mov    0xc(%ebp),%edx
4000000c:	8b 45 10             	mov    0x10(%ebp),%eax
4000000f:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
40000013:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
40000017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    vgac.command = c;
4000001b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000001e:	66 a3 00 40 00 40    	mov    %ax,0x40004000
    vgac.offset = o;
40000024:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000027:	66 a3 02 40 00 40    	mov    %ax,0x40004002
    vgac.value = v;
4000002d:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000030:	66 a3 04 40 00 40    	mov    %ax,0x40004004

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000036:	a1 40 42 00 40       	mov    0x40004240,%eax
4000003b:	83 ec 04             	sub    $0x4,%esp
4000003e:	6a 06                	push   $0x6
40000040:	68 00 40 00 40       	push   $0x40004000
40000045:	50                   	push   %eax
40000046:	e8 e7 04 00 00       	call   40000532 <fwrite>
4000004b:	83 c4 10             	add    $0x10,%esp
}
4000004e:	c9                   	leave  
4000004f:	c3                   	ret    

40000050 <main>:

int main(int argc, char* args[])
{
40000050:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000054:	83 e4 f0             	and    $0xfffffff0,%esp
40000057:	ff 71 fc             	pushl  -0x4(%ecx)
4000005a:	55                   	push   %ebp
4000005b:	89 e5                	mov    %esp,%ebp
4000005d:	51                   	push   %ecx
4000005e:	83 ec 24             	sub    $0x24,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000061:	83 ec 08             	sub    $0x8,%esp
40000064:	6a 02                	push   $0x2
40000066:	68 00 30 00 40       	push   $0x40003000
4000006b:	e8 90 03 00 00       	call   40000400 <fopen>
40000070:	83 c4 10             	add    $0x10,%esp
40000073:	a3 40 42 00 40       	mov    %eax,0x40004240
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000078:	83 ec 0c             	sub    $0xc,%esp
4000007b:	68 09 30 00 40       	push   $0x40003009
40000080:	e8 9c 05 00 00       	call   40000621 <fmkfifo>
40000085:	83 c4 10             	add    $0x10,%esp
40000088:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    printf("vgaController: %x\n", vgaController);
4000008b:	a1 40 42 00 40       	mov    0x40004240,%eax
40000090:	83 ec 08             	sub    $0x8,%esp
40000093:	50                   	push   %eax
40000094:	68 13 30 00 40       	push   $0x40003013
40000099:	e8 49 09 00 00       	call   400009e7 <printf>
4000009e:	83 c4 10             	add    $0x10,%esp
    printf("fifoInpt: %x\n", fifoInpt);
400000a1:	83 ec 08             	sub    $0x8,%esp
400000a4:	ff 75 e4             	pushl  -0x1c(%ebp)
400000a7:	68 26 30 00 40       	push   $0x40003026
400000ac:	e8 36 09 00 00       	call   400009e7 <printf>
400000b1:	83 c4 10             	add    $0x10,%esp

    struct vga_command* vgac = malloc(sizeof(struct vga_command));
400000b4:	83 ec 0c             	sub    $0xc,%esp
400000b7:	6a 06                	push   $0x6
400000b9:	e8 03 10 00 00       	call   400010c1 <malloc>
400000be:	83 c4 10             	add    $0x10,%esp
400000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)

    setstdout("/dev/tty0");
400000c4:	83 ec 0c             	sub    $0xc,%esp
400000c7:	68 09 30 00 40       	push   $0x40003009
400000cc:	e8 e7 02 00 00       	call   400003b8 <setstdout>
400000d1:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
400000d4:	83 ec 0c             	sub    $0xc,%esp
400000d7:	68 09 30 00 40       	push   $0x40003009
400000dc:	e8 07 03 00 00       	call   400003e8 <setstderr>
400000e1:	83 c4 10             	add    $0x10,%esp

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
400000e4:	83 ec 0c             	sub    $0xc,%esp
400000e7:	68 34 30 00 40       	push   $0x40003034
400000ec:	e8 f6 08 00 00       	call   400009e7 <printf>
400000f1:	83 c4 10             	add    $0x10,%esp

    sendCommand(CMD_CLEAR, 0, 0);
400000f4:	83 ec 04             	sub    $0x4,%esp
400000f7:	6a 00                	push   $0x0
400000f9:	6a 00                	push   $0x0
400000fb:	6a 01                	push   $0x1
400000fd:	e8 fe fe ff ff       	call   40000000 <sendCommand>
40000102:	83 c4 10             	add    $0x10,%esp

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000105:	83 ec 08             	sub    $0x8,%esp
40000108:	6a 02                	push   $0x2
4000010a:	68 6c 30 00 40       	push   $0x4000306c
4000010f:	e8 ec 02 00 00       	call   40000400 <fopen>
40000114:	83 c4 10             	add    $0x10,%esp
40000117:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000011a:	c6 45 e3 4b          	movb   $0x4b,-0x1d(%ebp)
4000011e:	83 ec 04             	sub    $0x4,%esp
40000121:	6a 01                	push   $0x1
40000123:	8d 45 e3             	lea    -0x1d(%ebp),%eax
40000126:	50                   	push   %eax
40000127:	ff 75 ec             	pushl  -0x14(%ebp)
4000012a:	e8 03 04 00 00       	call   40000532 <fwrite>
4000012f:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
40000132:	83 ec 0c             	sub    $0xc,%esp
40000135:	ff 75 ec             	pushl  -0x14(%ebp)
40000138:	e8 05 03 00 00       	call   40000442 <fclose>
4000013d:	83 c4 10             	add    $0x10,%esp

    char nchar = '\0';
40000140:	c6 45 e2 00          	movb   $0x0,-0x1e(%ebp)
    char ochar = '\0';
40000144:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
40000148:	eb 01                	jmp    4000014b <main+0xfb>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
4000014a:	90                   	nop    

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
4000014b:	83 ec 04             	sub    $0x4,%esp
4000014e:	6a 01                	push   $0x1
40000150:	8d 45 e2             	lea    -0x1e(%ebp),%eax
40000153:	50                   	push   %eax
40000154:	ff 75 e4             	pushl  -0x1c(%ebp)
40000157:	e8 6e 04 00 00       	call   400005ca <fread>
4000015c:	83 c4 10             	add    $0x10,%esp
        ochar = nchar;
4000015f:	8a 45 e2             	mov    -0x1e(%ebp),%al
40000162:	88 45 f3             	mov    %al,-0xd(%ebp)

        if ((nchar == '\n') || (x > 79)) {
40000165:	8a 45 e2             	mov    -0x1e(%ebp),%al
40000168:	3c 0a                	cmp    $0xa,%al
4000016a:	74 0a                	je     40000176 <main+0x126>
4000016c:	a1 08 40 00 40       	mov    0x40004008,%eax
40000171:	83 f8 4f             	cmp    $0x4f,%eax
40000174:	7e 15                	jle    4000018b <main+0x13b>
            x = 0;
40000176:	c7 05 08 40 00 40 00 	movl   $0x0,0x40004008
4000017d:	00 00 00 
            y++;
40000180:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000185:	40                   	inc    %eax
40000186:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (y > 24) {
4000018b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000190:	83 f8 18             	cmp    $0x18,%eax
40000193:	7e 1c                	jle    400001b1 <main+0x161>
            sendCommand(CMD_SCROLL, 0, 0);
40000195:	83 ec 04             	sub    $0x4,%esp
40000198:	6a 00                	push   $0x0
4000019a:	6a 00                	push   $0x0
4000019c:	6a 02                	push   $0x2
4000019e:	e8 5d fe ff ff       	call   40000000 <sendCommand>
400001a3:	83 c4 10             	add    $0x10,%esp
            y--;
400001a6:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001ab:	48                   	dec    %eax
400001ac:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (nchar == '\n') {
400001b1:	8a 45 e2             	mov    -0x1e(%ebp),%al
400001b4:	3c 0a                	cmp    $0xa,%al
400001b6:	75 0c                	jne    400001c4 <main+0x174>
            color = 0x09;
400001b8:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
            continue;
400001bf:	e9 e6 00 00 00       	jmp    400002aa <main+0x25a>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
400001c4:	8a 45 e2             	mov    -0x1e(%ebp),%al
400001c7:	3c 11                	cmp    $0x11,%al
400001c9:	75 21                	jne    400001ec <main+0x19c>
            fread(fifoInpt, &nchar, sizeof(char));
400001cb:	83 ec 04             	sub    $0x4,%esp
400001ce:	6a 01                	push   $0x1
400001d0:	8d 45 e2             	lea    -0x1e(%ebp),%eax
400001d3:	50                   	push   %eax
400001d4:	ff 75 e4             	pushl  -0x1c(%ebp)
400001d7:	e8 ee 03 00 00       	call   400005ca <fread>
400001dc:	83 c4 10             	add    $0x10,%esp
            color = nchar;
400001df:	8a 45 e2             	mov    -0x1e(%ebp),%al
400001e2:	a2 00 20 00 40       	mov    %al,0x40002000
            continue;
400001e7:	e9 be 00 00 00       	jmp    400002aa <main+0x25a>
        }

        if(nchar == 8) { //8 = BACKSPACE
400001ec:	8a 45 e2             	mov    -0x1e(%ebp),%al
400001ef:	3c 08                	cmp    $0x8,%al
400001f1:	75 3a                	jne    4000022d <main+0x1dd>
            if(x == 0) {
400001f3:	a1 08 40 00 40       	mov    0x40004008,%eax
400001f8:	85 c0                	test   %eax,%eax
400001fa:	75 17                	jne    40000213 <main+0x1c3>
                y--;
400001fc:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000201:	48                   	dec    %eax
40000202:	a3 0c 40 00 40       	mov    %eax,0x4000400c
                x = 79;
40000207:	c7 05 08 40 00 40 4f 	movl   $0x4f,0x40004008
4000020e:	00 00 00 
40000211:	eb 0b                	jmp    4000021e <main+0x1ce>
            }
            else
            {
                x--;
40000213:	a1 08 40 00 40       	mov    0x40004008,%eax
40000218:	48                   	dec    %eax
40000219:	a3 08 40 00 40       	mov    %eax,0x40004008
            }
            ochar = ' ';
4000021e:	c6 45 f3 20          	movb   $0x20,-0xd(%ebp)
            nchar = 0;
40000222:	c6 45 e2 00          	movb   $0x0,-0x1e(%ebp)
            color = 0x09;
40000226:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
        }

        uint16_t send = 0;
4000022d:	66 c7 45 e0 00 00    	movw   $0x0,-0x20(%ebp)
        char* sndChr = (char*) &send;
40000233:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000236:	89 45 f4             	mov    %eax,-0xc(%ebp)

        sndChr[0] = ochar;
40000239:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000023c:	8a 55 f3             	mov    -0xd(%ebp),%dl
4000023f:	88 10                	mov    %dl,(%eax)
        sndChr[1] = color;
40000241:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000244:	8d 50 01             	lea    0x1(%eax),%edx
40000247:	a0 00 20 00 40       	mov    0x40002000,%al
4000024c:	88 02                	mov    %al,(%edx)

        color = 0x09;
4000024e:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000

        sendCommand(CMD_SET, x + y * 80, send);
40000255:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000258:	89 c1                	mov    %eax,%ecx
4000025a:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
40000260:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000265:	89 c2                	mov    %eax,%edx
40000267:	89 d0                	mov    %edx,%eax
40000269:	c1 e0 02             	shl    $0x2,%eax
4000026c:	01 d0                	add    %edx,%eax
4000026e:	c1 e0 04             	shl    $0x4,%eax
40000271:	89 c2                	mov    %eax,%edx
40000273:	a1 08 40 00 40       	mov    0x40004008,%eax
40000278:	8d 04 02             	lea    (%edx,%eax,1),%eax
4000027b:	25 ff ff 00 00       	and    $0xffff,%eax
40000280:	83 ec 04             	sub    $0x4,%esp
40000283:	51                   	push   %ecx
40000284:	50                   	push   %eax
40000285:	6a 00                	push   $0x0
40000287:	e8 74 fd ff ff       	call   40000000 <sendCommand>
4000028c:	83 c4 10             	add    $0x10,%esp

        if(nchar != 0) {
4000028f:	8a 45 e2             	mov    -0x1e(%ebp),%al
40000292:	84 c0                	test   %al,%al
40000294:	0f 84 b0 fe ff ff    	je     4000014a <main+0xfa>
            x++;
4000029a:	a1 08 40 00 40       	mov    0x40004008,%eax
4000029f:	40                   	inc    %eax
400002a0:	a3 08 40 00 40       	mov    %eax,0x40004008
        }
    }
400002a5:	e9 a1 fe ff ff       	jmp    4000014b <main+0xfb>
400002aa:	e9 9c fe ff ff       	jmp    4000014b <main+0xfb>
	...

400002b0 <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"
400002b0:	55                   	push   %ebp
400002b1:	89 e5                	mov    %esp,%ebp
400002b3:	83 ec 28             	sub    $0x28,%esp
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400002b6:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
400002bd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400002c4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
400002e0:	83 ec 0c             	sub    $0xc,%esp
400002e3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002e6:	50                   	push   %eax
400002e7:	e8 24 11 00 00       	call   40001410 <syscall>
400002ec:	83 c4 10             	add    $0x10,%esp

static int  x     = 0;
400002ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
static int  y     = 0;
400002f2:	c9                   	leave  
400002f3:	c3                   	ret    

400002f4 <getpmhandle>:
static char color = 0x09;

400002f4:	55                   	push   %ebp
400002f5:	89 e5                	mov    %esp,%ebp
400002f7:	83 ec 28             	sub    $0x28,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400002fa:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
40000301:	8b 45 08             	mov    0x8(%ebp),%eax
40000304:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000307:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000030e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000315:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000031c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000323:	83 ec 0c             	sub    $0xc,%esp
40000326:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000329:	50                   	push   %eax
4000032a:	e8 e1 10 00 00       	call   40001410 <syscall>
4000032f:	83 c4 10             	add    $0x10,%esp
}

40000332:	8b 45 e0             	mov    -0x20(%ebp),%eax
int main(int argc, char* args[])
40000335:	c9                   	leave  
40000336:	c3                   	ret    

40000337 <getstdout>:
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000337:	55                   	push   %ebp
40000338:	89 e5                	mov    %esp,%ebp
4000033a:	83 ec 08             	sub    $0x8,%esp
4000033d:	83 ec 0c             	sub    $0xc,%esp
40000340:	6a 00                	push   $0x0
40000342:	e8 ad ff ff ff       	call   400002f4 <getpmhandle>
40000347:	83 c4 10             	add    $0x10,%esp
4000034a:	c9                   	leave  
4000034b:	c3                   	ret    

4000034c <getstdin>:
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
4000034c:	55                   	push   %ebp
4000034d:	89 e5                	mov    %esp,%ebp
4000034f:	83 ec 08             	sub    $0x8,%esp
40000352:	83 ec 0c             	sub    $0xc,%esp
40000355:	6a 01                	push   $0x1
40000357:	e8 98 ff ff ff       	call   400002f4 <getpmhandle>
4000035c:	83 c4 10             	add    $0x10,%esp
4000035f:	c9                   	leave  
40000360:	c3                   	ret    

40000361 <getstderr>:

40000361:	55                   	push   %ebp
40000362:	89 e5                	mov    %esp,%ebp
40000364:	83 ec 08             	sub    $0x8,%esp
40000367:	83 ec 0c             	sub    $0xc,%esp
4000036a:	6a 02                	push   $0x2
4000036c:	e8 83 ff ff ff       	call   400002f4 <getpmhandle>
40000371:	83 c4 10             	add    $0x10,%esp
40000374:	c9                   	leave  
40000375:	c3                   	ret    

40000376 <fopenpmhandle>:
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
40000376:	55                   	push   %ebp
40000377:	89 e5                	mov    %esp,%ebp
40000379:	83 ec 28             	sub    $0x28,%esp

    struct vga_command* vgac = malloc(sizeof(struct vga_command));

    setstdout("/dev/tty0");
4000037c:	8b 45 0c             	mov    0xc(%ebp),%eax
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

4000037f:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000386:	8b 55 08             	mov    0x8(%ebp),%edx
40000389:	89 55 e4             	mov    %edx,-0x1c(%ebp)
4000038c:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000038f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000396:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000039d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    sendCommand(CMD_CLEAR, 0, 0);

400003a4:	83 ec 0c             	sub    $0xc,%esp
400003a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003aa:	50                   	push   %eax
400003ab:	e8 60 10 00 00       	call   40001410 <syscall>
400003b0:	83 c4 10             	add    $0x10,%esp
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400003b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
    fclose(initCtrl);
400003b6:	c9                   	leave  
400003b7:	c3                   	ret    

400003b8 <setstdout>:

    char nchar = '\0';
400003b8:	55                   	push   %ebp
400003b9:	89 e5                	mov    %esp,%ebp
400003bb:	83 ec 08             	sub    $0x8,%esp
400003be:	83 ec 08             	sub    $0x8,%esp
400003c1:	ff 75 08             	pushl  0x8(%ebp)
400003c4:	6a 00                	push   $0x0
400003c6:	e8 ab ff ff ff       	call   40000376 <fopenpmhandle>
400003cb:	83 c4 10             	add    $0x10,%esp
400003ce:	c9                   	leave  
400003cf:	c3                   	ret    

400003d0 <setstdin>:
    char ochar = '\0';
400003d0:	55                   	push   %ebp
400003d1:	89 e5                	mov    %esp,%ebp
400003d3:	83 ec 08             	sub    $0x8,%esp
400003d6:	83 ec 08             	sub    $0x8,%esp
400003d9:	ff 75 08             	pushl  0x8(%ebp)
400003dc:	6a 01                	push   $0x1
400003de:	e8 93 ff ff ff       	call   40000376 <fopenpmhandle>
400003e3:	83 c4 10             	add    $0x10,%esp
400003e6:	c9                   	leave  
400003e7:	c3                   	ret    

400003e8 <setstderr>:

400003e8:	55                   	push   %ebp
400003e9:	89 e5                	mov    %esp,%ebp
400003eb:	83 ec 08             	sub    $0x8,%esp
400003ee:	83 ec 08             	sub    $0x8,%esp
400003f1:	ff 75 08             	pushl  0x8(%ebp)
400003f4:	6a 02                	push   $0x2
400003f6:	e8 7b ff ff ff       	call   40000376 <fopenpmhandle>
400003fb:	83 c4 10             	add    $0x10,%esp
400003fe:	c9                   	leave  
400003ff:	c3                   	ret    

40000400 <fopen>:
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000400:	55                   	push   %ebp
40000401:	89 e5                	mov    %esp,%ebp
40000403:	83 ec 28             	sub    $0x28,%esp
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
40000406:	8b 45 08             	mov    0x8(%ebp),%eax
            x = 0;
            y++;
        }

        if (y > 24) {
40000409:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000410:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000413:	8b 45 0c             	mov    0xc(%ebp),%eax
40000416:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000419:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000420:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
4000042e:	83 ec 0c             	sub    $0xc,%esp
40000431:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000434:	50                   	push   %eax
40000435:	e8 d6 0f 00 00       	call   40001410 <syscall>
4000043a:	83 c4 10             	add    $0x10,%esp
        }

4000043d:	8b 45 e0             	mov    -0x20(%ebp),%eax
        if (nchar == '\n') {
40000440:	c9                   	leave  
40000441:	c3                   	ret    

40000442 <fclose>:
            color = 0x09;
            continue;
40000442:	55                   	push   %ebp
40000443:	89 e5                	mov    %esp,%ebp
40000445:	83 ec 28             	sub    $0x28,%esp
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

40000448:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
4000044f:	8b 45 08             	mov    0x8(%ebp),%eax
40000452:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000455:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000045c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000463:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000046a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40000471:	83 ec 0c             	sub    $0xc,%esp
40000474:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000477:	50                   	push   %eax
40000478:	e8 93 0f 00 00       	call   40001410 <syscall>
4000047d:	83 c4 10             	add    $0x10,%esp
                y--;
                x = 79;
40000480:	8b 45 e0             	mov    -0x20(%ebp),%eax
            }
40000483:	c9                   	leave  
40000484:	c3                   	ret    

40000485 <printrwerror>:
            else
            {
40000485:	55                   	push   %ebp
40000486:	89 e5                	mov    %esp,%ebp
40000488:	83 ec 08             	sub    $0x8,%esp
                x--;
4000048b:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
4000048f:	75 13                	jne    400004a4 <printrwerror+0x1f>
            }
40000491:	83 ec 08             	sub    $0x8,%esp
40000494:	ff 75 08             	pushl  0x8(%ebp)
40000497:	68 7c 30 00 40       	push   $0x4000307c
4000049c:	e8 46 05 00 00       	call   400009e7 <printf>
400004a1:	83 c4 10             	add    $0x10,%esp
            ochar = ' ';
            nchar = 0;
            color = 0x09;
400004a4:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
400004a8:	75 13                	jne    400004bd <printrwerror+0x38>
        }
400004aa:	83 ec 08             	sub    $0x8,%esp
400004ad:	ff 75 08             	pushl  0x8(%ebp)
400004b0:	68 94 30 00 40       	push   $0x40003094
400004b5:	e8 2d 05 00 00       	call   400009e7 <printf>
400004ba:	83 c4 10             	add    $0x10,%esp

        uint16_t send = 0;
        char* sndChr = (char*) &send;
400004bd:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
400004c1:	75 13                	jne    400004d6 <printrwerror+0x51>

400004c3:	83 ec 08             	sub    $0x8,%esp
400004c6:	ff 75 08             	pushl  0x8(%ebp)
400004c9:	68 b0 30 00 40       	push   $0x400030b0
400004ce:	e8 14 05 00 00       	call   400009e7 <printf>
400004d3:	83 c4 10             	add    $0x10,%esp
        sndChr[0] = ochar;
        sndChr[1] = color;

400004d6:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
400004da:	75 13                	jne    400004ef <printrwerror+0x6a>
        color = 0x09;
400004dc:	83 ec 08             	sub    $0x8,%esp
400004df:	ff 75 08             	pushl  0x8(%ebp)
400004e2:	68 dc 30 00 40       	push   $0x400030dc
400004e7:	e8 fb 04 00 00       	call   400009e7 <printf>
400004ec:	83 c4 10             	add    $0x10,%esp

        sendCommand(CMD_SET, x + y * 80, send);
400004ef:	c9                   	leave  
400004f0:	c3                   	ret    

400004f1 <frwrite>:

        if(nchar != 0) {
400004f1:	55                   	push   %ebp
400004f2:	89 e5                	mov    %esp,%ebp
400004f4:	83 ec 28             	sub    $0x28,%esp
            x++;
        }
    }

400004f7:	8b 45 0c             	mov    0xc(%ebp),%eax
    return 0;
}
400004fa:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
40000501:	8b 55 08             	mov    0x8(%ebp),%edx
40000504:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000507:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000050a:	8b 45 10             	mov    0x10(%ebp),%eax
4000050d:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000510:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000517:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000051e:	83 ec 0c             	sub    $0xc,%esp
40000521:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000524:	50                   	push   %eax
40000525:	e8 e6 0e 00 00       	call   40001410 <syscall>
4000052a:	83 c4 10             	add    $0x10,%esp
4000052d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000530:	c9                   	leave  
40000531:	c3                   	ret    

40000532 <fwrite>:
40000532:	55                   	push   %ebp
40000533:	89 e5                	mov    %esp,%ebp
40000535:	83 ec 18             	sub    $0x18,%esp
40000538:	83 ec 04             	sub    $0x4,%esp
4000053b:	ff 75 10             	pushl  0x10(%ebp)
4000053e:	ff 75 0c             	pushl  0xc(%ebp)
40000541:	ff 75 08             	pushl  0x8(%ebp)
40000544:	e8 a8 ff ff ff       	call   400004f1 <frwrite>
40000549:	83 c4 10             	add    $0x10,%esp
4000054c:	89 45 f4             	mov    %eax,-0xc(%ebp)
4000054f:	eb 1c                	jmp    4000056d <fwrite+0x3b>
40000551:	e8 db 11 00 00       	call   40001731 <yield>
40000556:	83 ec 04             	sub    $0x4,%esp
40000559:	ff 75 10             	pushl  0x10(%ebp)
4000055c:	ff 75 0c             	pushl  0xc(%ebp)
4000055f:	ff 75 08             	pushl  0x8(%ebp)
40000562:	e8 8a ff ff ff       	call   400004f1 <frwrite>
40000567:	83 c4 10             	add    $0x10,%esp
4000056a:	89 45 f4             	mov    %eax,-0xc(%ebp)
4000056d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000571:	74 de                	je     40000551 <fwrite+0x1f>
40000573:	83 ec 08             	sub    $0x8,%esp
40000576:	ff 75 f4             	pushl  -0xc(%ebp)
40000579:	ff 75 08             	pushl  0x8(%ebp)
4000057c:	e8 04 ff ff ff       	call   40000485 <printrwerror>
40000581:	83 c4 10             	add    $0x10,%esp
40000584:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000587:	c9                   	leave  
40000588:	c3                   	ret    

40000589 <frread>:
40000589:	55                   	push   %ebp
4000058a:	89 e5                	mov    %esp,%ebp
4000058c:	83 ec 28             	sub    $0x28,%esp
4000058f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000592:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
40000599:	8b 55 08             	mov    0x8(%ebp),%edx
4000059c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
4000059f:	89 45 e8             	mov    %eax,-0x18(%ebp)
400005a2:	8b 45 10             	mov    0x10(%ebp),%eax
400005a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
400005a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400005b6:	83 ec 0c             	sub    $0xc,%esp
400005b9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005bc:	50                   	push   %eax
400005bd:	e8 4e 0e 00 00       	call   40001410 <syscall>
400005c2:	83 c4 10             	add    $0x10,%esp
400005c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005c8:	c9                   	leave  
400005c9:	c3                   	ret    

400005ca <fread>:
400005ca:	55                   	push   %ebp
400005cb:	89 e5                	mov    %esp,%ebp
400005cd:	83 ec 18             	sub    $0x18,%esp
400005d0:	83 ec 04             	sub    $0x4,%esp
400005d3:	ff 75 10             	pushl  0x10(%ebp)
400005d6:	ff 75 0c             	pushl  0xc(%ebp)
400005d9:	ff 75 08             	pushl  0x8(%ebp)
400005dc:	e8 a8 ff ff ff       	call   40000589 <frread>
400005e1:	83 c4 10             	add    $0x10,%esp
400005e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
400005e7:	eb 1c                	jmp    40000605 <fread+0x3b>
400005e9:	e8 43 11 00 00       	call   40001731 <yield>
400005ee:	83 ec 04             	sub    $0x4,%esp
400005f1:	ff 75 10             	pushl  0x10(%ebp)
400005f4:	ff 75 0c             	pushl  0xc(%ebp)
400005f7:	ff 75 08             	pushl  0x8(%ebp)
400005fa:	e8 8a ff ff ff       	call   40000589 <frread>
400005ff:	83 c4 10             	add    $0x10,%esp
40000602:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000605:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000609:	74 de                	je     400005e9 <fread+0x1f>
4000060b:	83 ec 08             	sub    $0x8,%esp
4000060e:	ff 75 f4             	pushl  -0xc(%ebp)
40000611:	ff 75 08             	pushl  0x8(%ebp)
40000614:	e8 6c fe ff ff       	call   40000485 <printrwerror>
40000619:	83 c4 10             	add    $0x10,%esp
4000061c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000061f:	c9                   	leave  
40000620:	c3                   	ret    

40000621 <fmkfifo>:
40000621:	55                   	push   %ebp
40000622:	89 e5                	mov    %esp,%ebp
40000624:	83 ec 28             	sub    $0x28,%esp
40000627:	8b 45 08             	mov    0x8(%ebp),%eax
4000062a:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
40000631:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000634:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000063b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000642:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000650:	83 ec 0c             	sub    $0xc,%esp
40000653:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000656:	50                   	push   %eax
40000657:	e8 b4 0d 00 00       	call   40001410 <syscall>
4000065c:	83 c4 10             	add    $0x10,%esp
4000065f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000662:	c9                   	leave  
40000663:	c3                   	ret    

40000664 <resolveHandle>:
40000664:	55                   	push   %ebp
40000665:	89 e5                	mov    %esp,%ebp
40000667:	83 ec 08             	sub    $0x8,%esp
4000066a:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
40000671:	77 11                	ja     40000684 <resolveHandle+0x20>
40000673:	83 ec 0c             	sub    $0xc,%esp
40000676:	ff 75 08             	pushl  0x8(%ebp)
40000679:	e8 76 fc ff ff       	call   400002f4 <getpmhandle>
4000067e:	83 c4 10             	add    $0x10,%esp
40000681:	89 45 08             	mov    %eax,0x8(%ebp)
40000684:	8b 45 08             	mov    0x8(%ebp),%eax
40000687:	c9                   	leave  
40000688:	c3                   	ret    

40000689 <fgetc>:
40000689:	55                   	push   %ebp
4000068a:	89 e5                	mov    %esp,%ebp
4000068c:	83 ec 18             	sub    $0x18,%esp
4000068f:	83 ec 0c             	sub    $0xc,%esp
40000692:	ff 75 08             	pushl  0x8(%ebp)
40000695:	e8 ca ff ff ff       	call   40000664 <resolveHandle>
4000069a:	83 c4 10             	add    $0x10,%esp
4000069d:	89 45 08             	mov    %eax,0x8(%ebp)
400006a0:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
400006a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400006a8:	74 14                	je     400006be <fgetc+0x35>
400006aa:	83 ec 04             	sub    $0x4,%esp
400006ad:	6a 01                	push   $0x1
400006af:	8d 45 f7             	lea    -0x9(%ebp),%eax
400006b2:	50                   	push   %eax
400006b3:	ff 75 08             	pushl  0x8(%ebp)
400006b6:	e8 0f ff ff ff       	call   400005ca <fread>
400006bb:	83 c4 10             	add    $0x10,%esp
400006be:	8a 45 f7             	mov    -0x9(%ebp),%al
400006c1:	c9                   	leave  
400006c2:	c3                   	ret    

400006c3 <fgets>:
400006c3:	55                   	push   %ebp
400006c4:	89 e5                	mov    %esp,%ebp
400006c6:	53                   	push   %ebx
400006c7:	83 ec 14             	sub    $0x14,%esp
400006ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006d1:	eb 38                	jmp    4000070b <fgets+0x48>
400006d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
400006d6:	89 c3                	mov    %eax,%ebx
400006d8:	03 5d 08             	add    0x8(%ebp),%ebx
400006db:	83 ec 0c             	sub    $0xc,%esp
400006de:	ff 75 10             	pushl  0x10(%ebp)
400006e1:	e8 a3 ff ff ff       	call   40000689 <fgetc>
400006e6:	83 c4 10             	add    $0x10,%esp
400006e9:	88 03                	mov    %al,(%ebx)
400006eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
400006ee:	03 45 08             	add    0x8(%ebp),%eax
400006f1:	8a 00                	mov    (%eax),%al
400006f3:	84 c0                	test   %al,%al
400006f5:	74 0c                	je     40000703 <fgets+0x40>
400006f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
400006fa:	03 45 08             	add    0x8(%ebp),%eax
400006fd:	8a 00                	mov    (%eax),%al
400006ff:	84 c0                	test   %al,%al
40000701:	75 05                	jne    40000708 <fgets+0x45>
40000703:	8b 45 08             	mov    0x8(%ebp),%eax
40000706:	eb 18                	jmp    40000720 <fgets+0x5d>
40000708:	ff 45 f4             	incl   -0xc(%ebp)
4000070b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000070e:	48                   	dec    %eax
4000070f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40000712:	7f bf                	jg     400006d3 <fgets+0x10>
40000714:	8b 45 0c             	mov    0xc(%ebp),%eax
40000717:	03 45 08             	add    0x8(%ebp),%eax
4000071a:	c6 00 00             	movb   $0x0,(%eax)
4000071d:	8b 45 08             	mov    0x8(%ebp),%eax
40000720:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000723:	c9                   	leave  
40000724:	c3                   	ret    

40000725 <getc>:
40000725:	55                   	push   %ebp
40000726:	89 e5                	mov    %esp,%ebp
40000728:	83 ec 08             	sub    $0x8,%esp
4000072b:	83 ec 0c             	sub    $0xc,%esp
4000072e:	ff 75 08             	pushl  0x8(%ebp)
40000731:	e8 53 ff ff ff       	call   40000689 <fgetc>
40000736:	83 c4 10             	add    $0x10,%esp
40000739:	c9                   	leave  
4000073a:	c3                   	ret    

4000073b <getchar>:
4000073b:	55                   	push   %ebp
4000073c:	89 e5                	mov    %esp,%ebp
4000073e:	83 ec 08             	sub    $0x8,%esp
40000741:	83 ec 0c             	sub    $0xc,%esp
40000744:	6a 01                	push   $0x1
40000746:	e8 3e ff ff ff       	call   40000689 <fgetc>
4000074b:	83 c4 10             	add    $0x10,%esp
4000074e:	c9                   	leave  
4000074f:	c3                   	ret    

40000750 <getln>:
40000750:	55                   	push   %ebp
40000751:	89 e5                	mov    %esp,%ebp
40000753:	83 ec 18             	sub    $0x18,%esp
40000756:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000075d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000761:	eb 5f                	jmp    400007c2 <getln+0x72>
40000763:	80 7d f7 0a          	cmpb   $0xa,-0x9(%ebp)
40000767:	75 0f                	jne    40000778 <getln+0x28>
40000769:	83 ec 0c             	sub    $0xc,%esp
4000076c:	6a 0a                	push   $0xa
4000076e:	e8 c0 00 00 00       	call   40000833 <putchar>
40000773:	83 c4 10             	add    $0x10,%esp
40000776:	eb 60                	jmp    400007d8 <getln+0x88>
40000778:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
4000077c:	75 24                	jne    400007a2 <getln+0x52>
4000077e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40000782:	74 10                	je     40000794 <getln+0x44>
40000784:	ff 4d f0             	decl   -0x10(%ebp)
40000787:	83 ec 0c             	sub    $0xc,%esp
4000078a:	6a 08                	push   $0x8
4000078c:	e8 a2 00 00 00       	call   40000833 <putchar>
40000791:	83 c4 10             	add    $0x10,%esp
40000794:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000797:	8b 55 08             	mov    0x8(%ebp),%edx
4000079a:	8d 04 02             	lea    (%edx,%eax,1),%eax
4000079d:	c6 00 00             	movb   $0x0,(%eax)
400007a0:	eb 20                	jmp    400007c2 <getln+0x72>
400007a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
400007a5:	8b 55 08             	mov    0x8(%ebp),%edx
400007a8:	01 c2                	add    %eax,%edx
400007aa:	8a 45 f7             	mov    -0x9(%ebp),%al
400007ad:	88 02                	mov    %al,(%edx)
400007af:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
400007b3:	83 ec 0c             	sub    $0xc,%esp
400007b6:	50                   	push   %eax
400007b7:	e8 77 00 00 00       	call   40000833 <putchar>
400007bc:	83 c4 10             	add    $0x10,%esp
400007bf:	ff 45 f0             	incl   -0x10(%ebp)
400007c2:	83 ec 0c             	sub    $0xc,%esp
400007c5:	6a 01                	push   $0x1
400007c7:	e8 bd fe ff ff       	call   40000689 <fgetc>
400007cc:	83 c4 10             	add    $0x10,%esp
400007cf:	88 45 f7             	mov    %al,-0x9(%ebp)
400007d2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
400007d6:	75 8b                	jne    40000763 <getln+0x13>
400007d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
400007db:	8b 55 08             	mov    0x8(%ebp),%edx
400007de:	8d 04 02             	lea    (%edx,%eax,1),%eax
400007e1:	c6 00 00             	movb   $0x0,(%eax)
400007e4:	8b 45 08             	mov    0x8(%ebp),%eax
400007e7:	c9                   	leave  
400007e8:	c3                   	ret    

400007e9 <kputc>:
400007e9:	55                   	push   %ebp
400007ea:	89 e5                	mov    %esp,%ebp
400007ec:	83 ec 38             	sub    $0x38,%esp
400007ef:	8b 45 08             	mov    0x8(%ebp),%eax
400007f2:	88 45 d4             	mov    %al,-0x2c(%ebp)
400007f5:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
400007f9:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000800:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000803:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000080a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000811:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000818:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000081f:	83 ec 0c             	sub    $0xc,%esp
40000822:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000825:	50                   	push   %eax
40000826:	e8 e5 0b 00 00       	call   40001410 <syscall>
4000082b:	83 c4 10             	add    $0x10,%esp
4000082e:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000831:	c9                   	leave  
40000832:	c3                   	ret    

40000833 <putchar>:
40000833:	55                   	push   %ebp
40000834:	89 e5                	mov    %esp,%ebp
40000836:	83 ec 18             	sub    $0x18,%esp
40000839:	8b 45 08             	mov    0x8(%ebp),%eax
4000083c:	88 45 f4             	mov    %al,-0xc(%ebp)
4000083f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000843:	83 ec 08             	sub    $0x8,%esp
40000846:	6a 00                	push   $0x0
40000848:	50                   	push   %eax
40000849:	e8 26 00 00 00       	call   40000874 <fputc>
4000084e:	83 c4 10             	add    $0x10,%esp
40000851:	c9                   	leave  
40000852:	c3                   	ret    

40000853 <putc>:
40000853:	55                   	push   %ebp
40000854:	89 e5                	mov    %esp,%ebp
40000856:	83 ec 18             	sub    $0x18,%esp
40000859:	8b 45 08             	mov    0x8(%ebp),%eax
4000085c:	88 45 f4             	mov    %al,-0xc(%ebp)
4000085f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000863:	83 ec 08             	sub    $0x8,%esp
40000866:	ff 75 0c             	pushl  0xc(%ebp)
40000869:	50                   	push   %eax
4000086a:	e8 05 00 00 00       	call   40000874 <fputc>
4000086f:	83 c4 10             	add    $0x10,%esp
40000872:	c9                   	leave  
40000873:	c3                   	ret    

40000874 <fputc>:
40000874:	55                   	push   %ebp
40000875:	89 e5                	mov    %esp,%ebp
40000877:	83 ec 18             	sub    $0x18,%esp
4000087a:	8b 45 08             	mov    0x8(%ebp),%eax
4000087d:	88 45 f4             	mov    %al,-0xc(%ebp)
40000880:	83 ec 0c             	sub    $0xc,%esp
40000883:	ff 75 0c             	pushl  0xc(%ebp)
40000886:	e8 d9 fd ff ff       	call   40000664 <resolveHandle>
4000088b:	83 c4 10             	add    $0x10,%esp
4000088e:	89 45 0c             	mov    %eax,0xc(%ebp)
40000891:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000895:	74 16                	je     400008ad <fputc+0x39>
40000897:	83 ec 04             	sub    $0x4,%esp
4000089a:	6a 01                	push   $0x1
4000089c:	8d 45 f4             	lea    -0xc(%ebp),%eax
4000089f:	50                   	push   %eax
400008a0:	ff 75 0c             	pushl  0xc(%ebp)
400008a3:	e8 8a fc ff ff       	call   40000532 <fwrite>
400008a8:	83 c4 10             	add    $0x10,%esp
400008ab:	eb 12                	jmp    400008bf <fputc+0x4b>
400008ad:	8a 45 f4             	mov    -0xc(%ebp),%al
400008b0:	0f be c0             	movsbl %al,%eax
400008b3:	83 ec 0c             	sub    $0xc,%esp
400008b6:	50                   	push   %eax
400008b7:	e8 2d ff ff ff       	call   400007e9 <kputc>
400008bc:	83 c4 10             	add    $0x10,%esp
400008bf:	c9                   	leave  
400008c0:	c3                   	ret    

400008c1 <kputs>:
400008c1:	55                   	push   %ebp
400008c2:	89 e5                	mov    %esp,%ebp
400008c4:	83 ec 28             	sub    $0x28,%esp
400008c7:	8b 45 08             	mov    0x8(%ebp),%eax
400008ca:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
400008d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400008d4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400008db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400008f0:	83 ec 0c             	sub    $0xc,%esp
400008f3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008f6:	50                   	push   %eax
400008f7:	e8 14 0b 00 00       	call   40001410 <syscall>
400008fc:	83 c4 10             	add    $0x10,%esp
400008ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000902:	c9                   	leave  
40000903:	c3                   	ret    

40000904 <puts>:
40000904:	55                   	push   %ebp
40000905:	89 e5                	mov    %esp,%ebp
40000907:	83 ec 08             	sub    $0x8,%esp
4000090a:	83 ec 08             	sub    $0x8,%esp
4000090d:	6a 00                	push   $0x0
4000090f:	ff 75 08             	pushl  0x8(%ebp)
40000912:	e8 05 00 00 00       	call   4000091c <fputs>
40000917:	83 c4 10             	add    $0x10,%esp
4000091a:	c9                   	leave  
4000091b:	c3                   	ret    

4000091c <fputs>:
4000091c:	55                   	push   %ebp
4000091d:	89 e5                	mov    %esp,%ebp
4000091f:	83 ec 08             	sub    $0x8,%esp
40000922:	83 ec 0c             	sub    $0xc,%esp
40000925:	ff 75 0c             	pushl  0xc(%ebp)
40000928:	e8 37 fd ff ff       	call   40000664 <resolveHandle>
4000092d:	83 c4 10             	add    $0x10,%esp
40000930:	89 45 0c             	mov    %eax,0xc(%ebp)
40000933:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000937:	74 22                	je     4000095b <fputs+0x3f>
40000939:	83 ec 0c             	sub    $0xc,%esp
4000093c:	ff 75 08             	pushl  0x8(%ebp)
4000093f:	e8 7d 03 00 00       	call   40000cc1 <strlen>
40000944:	83 c4 10             	add    $0x10,%esp
40000947:	83 ec 04             	sub    $0x4,%esp
4000094a:	50                   	push   %eax
4000094b:	ff 75 08             	pushl  0x8(%ebp)
4000094e:	ff 75 0c             	pushl  0xc(%ebp)
40000951:	e8 dc fb ff ff       	call   40000532 <fwrite>
40000956:	83 c4 10             	add    $0x10,%esp
40000959:	eb 0e                	jmp    40000969 <fputs+0x4d>
4000095b:	83 ec 0c             	sub    $0xc,%esp
4000095e:	ff 75 08             	pushl  0x8(%ebp)
40000961:	e8 5b ff ff ff       	call   400008c1 <kputs>
40000966:	83 c4 10             	add    $0x10,%esp
40000969:	c9                   	leave  
4000096a:	c3                   	ret    

4000096b <putn>:
4000096b:	55                   	push   %ebp
4000096c:	89 e5                	mov    %esp,%ebp
4000096e:	83 ec 58             	sub    $0x58,%esp
40000971:	c7 45 ec 08 31 00 40 	movl   $0x40003108,-0x14(%ebp)
40000978:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000097f:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000983:	7e 07                	jle    4000098c <putn+0x21>
40000985:	b8 00 00 00 00       	mov    $0x0,%eax
4000098a:	eb 59                	jmp    400009e5 <putn+0x7a>
4000098c:	8d 45 ab             	lea    -0x55(%ebp),%eax
4000098f:	83 c0 40             	add    $0x40,%eax
40000992:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000995:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000998:	c6 00 00             	movb   $0x0,(%eax)
4000099b:	ff 45 f4             	incl   -0xc(%ebp)
4000099e:	ff 4d f0             	decl   -0x10(%ebp)
400009a1:	8b 55 0c             	mov    0xc(%ebp),%edx
400009a4:	8b 45 08             	mov    0x8(%ebp),%eax
400009a7:	89 d1                	mov    %edx,%ecx
400009a9:	ba 00 00 00 00       	mov    $0x0,%edx
400009ae:	f7 f1                	div    %ecx
400009b0:	89 d0                	mov    %edx,%eax
400009b2:	03 45 ec             	add    -0x14(%ebp),%eax
400009b5:	8a 10                	mov    (%eax),%dl
400009b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
400009ba:	88 10                	mov    %dl,(%eax)
400009bc:	8b 55 0c             	mov    0xc(%ebp),%edx
400009bf:	8b 45 08             	mov    0x8(%ebp),%eax
400009c2:	89 d1                	mov    %edx,%ecx
400009c4:	ba 00 00 00 00       	mov    $0x0,%edx
400009c9:	f7 f1                	div    %ecx
400009cb:	89 45 08             	mov    %eax,0x8(%ebp)
400009ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400009d2:	75 c7                	jne    4000099b <putn+0x30>
400009d4:	83 ec 0c             	sub    $0xc,%esp
400009d7:	ff 75 f0             	pushl  -0x10(%ebp)
400009da:	e8 25 ff ff ff       	call   40000904 <puts>
400009df:	83 c4 10             	add    $0x10,%esp
400009e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
400009e5:	c9                   	leave  
400009e6:	c3                   	ret    

400009e7 <printf>:
400009e7:	55                   	push   %ebp
400009e8:	89 e5                	mov    %esp,%ebp
400009ea:	83 ec 28             	sub    $0x28,%esp
400009ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400009f4:	8d 45 0c             	lea    0xc(%ebp),%eax
400009f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009fa:	e9 4d 01 00 00       	jmp    40000b4c <printf+0x165>
400009ff:	8b 45 08             	mov    0x8(%ebp),%eax
40000a02:	8a 00                	mov    (%eax),%al
40000a04:	3c 25                	cmp    $0x25,%al
40000a06:	0f 85 26 01 00 00    	jne    40000b32 <printf+0x14b>
40000a0c:	ff 45 08             	incl   0x8(%ebp)
40000a0f:	8b 45 08             	mov    0x8(%ebp),%eax
40000a12:	8a 00                	mov    (%eax),%al
40000a14:	0f be c0             	movsbl %al,%eax
40000a17:	83 f8 70             	cmp    $0x70,%eax
40000a1a:	0f 84 90 00 00 00    	je     40000ab0 <printf+0xc9>
40000a20:	83 f8 70             	cmp    $0x70,%eax
40000a23:	7f 2e                	jg     40000a53 <printf+0x6c>
40000a25:	83 f8 63             	cmp    $0x63,%eax
40000a28:	0f 84 a5 00 00 00    	je     40000ad3 <printf+0xec>
40000a2e:	83 f8 63             	cmp    $0x63,%eax
40000a31:	7f 16                	jg     40000a49 <printf+0x62>
40000a33:	85 c0                	test   %eax,%eax
40000a35:	0f 84 20 01 00 00    	je     40000b5b <printf+0x174>
40000a3b:	83 f8 25             	cmp    $0x25,%eax
40000a3e:	0f 84 b2 00 00 00    	je     40000af6 <printf+0x10f>
40000a44:	e9 c0 00 00 00       	jmp    40000b09 <printf+0x122>
40000a49:	83 f8 64             	cmp    $0x64,%eax
40000a4c:	74 3c                	je     40000a8a <printf+0xa3>
40000a4e:	e9 b6 00 00 00       	jmp    40000b09 <printf+0x122>
40000a53:	83 f8 75             	cmp    $0x75,%eax
40000a56:	74 32                	je     40000a8a <printf+0xa3>
40000a58:	83 f8 78             	cmp    $0x78,%eax
40000a5b:	74 53                	je     40000ab0 <printf+0xc9>
40000a5d:	83 f8 73             	cmp    $0x73,%eax
40000a60:	0f 85 a3 00 00 00    	jne    40000b09 <printf+0x122>
40000a66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000a69:	8d 50 04             	lea    0x4(%eax),%edx
40000a6c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000a6f:	8b 00                	mov    (%eax),%eax
40000a71:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000a74:	83 ec 0c             	sub    $0xc,%esp
40000a77:	ff 75 e8             	pushl  -0x18(%ebp)
40000a7a:	e8 85 fe ff ff       	call   40000904 <puts>
40000a7f:	83 c4 10             	add    $0x10,%esp
40000a82:	01 45 f4             	add    %eax,-0xc(%ebp)
40000a85:	e9 bf 00 00 00       	jmp    40000b49 <printf+0x162>
40000a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000a8d:	8d 50 04             	lea    0x4(%eax),%edx
40000a90:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000a93:	8b 00                	mov    (%eax),%eax
40000a95:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000a98:	83 ec 08             	sub    $0x8,%esp
40000a9b:	6a 0a                	push   $0xa
40000a9d:	ff 75 ec             	pushl  -0x14(%ebp)
40000aa0:	e8 c6 fe ff ff       	call   4000096b <putn>
40000aa5:	83 c4 10             	add    $0x10,%esp
40000aa8:	01 45 f4             	add    %eax,-0xc(%ebp)
40000aab:	e9 99 00 00 00       	jmp    40000b49 <printf+0x162>
40000ab0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000ab3:	8d 50 04             	lea    0x4(%eax),%edx
40000ab6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000ab9:	8b 00                	mov    (%eax),%eax
40000abb:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000abe:	83 ec 08             	sub    $0x8,%esp
40000ac1:	6a 10                	push   $0x10
40000ac3:	ff 75 ec             	pushl  -0x14(%ebp)
40000ac6:	e8 a0 fe ff ff       	call   4000096b <putn>
40000acb:	83 c4 10             	add    $0x10,%esp
40000ace:	01 45 f4             	add    %eax,-0xc(%ebp)
40000ad1:	eb 76                	jmp    40000b49 <printf+0x162>
40000ad3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000ad6:	8d 50 04             	lea    0x4(%eax),%edx
40000ad9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000adc:	8b 00                	mov    (%eax),%eax
40000ade:	88 45 f3             	mov    %al,-0xd(%ebp)
40000ae1:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000ae5:	83 ec 0c             	sub    $0xc,%esp
40000ae8:	50                   	push   %eax
40000ae9:	e8 45 fd ff ff       	call   40000833 <putchar>
40000aee:	83 c4 10             	add    $0x10,%esp
40000af1:	01 45 f4             	add    %eax,-0xc(%ebp)
40000af4:	eb 53                	jmp    40000b49 <printf+0x162>
40000af6:	83 ec 0c             	sub    $0xc,%esp
40000af9:	6a 25                	push   $0x25
40000afb:	e8 33 fd ff ff       	call   40000833 <putchar>
40000b00:	83 c4 10             	add    $0x10,%esp
40000b03:	01 45 f4             	add    %eax,-0xc(%ebp)
40000b06:	90                   	nop    
40000b07:	eb 40                	jmp    40000b49 <printf+0x162>
40000b09:	83 ec 0c             	sub    $0xc,%esp
40000b0c:	6a 25                	push   $0x25
40000b0e:	e8 20 fd ff ff       	call   40000833 <putchar>
40000b13:	83 c4 10             	add    $0x10,%esp
40000b16:	01 45 f4             	add    %eax,-0xc(%ebp)
40000b19:	8b 45 08             	mov    0x8(%ebp),%eax
40000b1c:	8a 00                	mov    (%eax),%al
40000b1e:	0f be c0             	movsbl %al,%eax
40000b21:	83 ec 0c             	sub    $0xc,%esp
40000b24:	50                   	push   %eax
40000b25:	e8 09 fd ff ff       	call   40000833 <putchar>
40000b2a:	83 c4 10             	add    $0x10,%esp
40000b2d:	01 45 f4             	add    %eax,-0xc(%ebp)
40000b30:	eb 17                	jmp    40000b49 <printf+0x162>
40000b32:	8b 45 08             	mov    0x8(%ebp),%eax
40000b35:	8a 00                	mov    (%eax),%al
40000b37:	0f be c0             	movsbl %al,%eax
40000b3a:	83 ec 0c             	sub    $0xc,%esp
40000b3d:	50                   	push   %eax
40000b3e:	e8 f0 fc ff ff       	call   40000833 <putchar>
40000b43:	83 c4 10             	add    $0x10,%esp
40000b46:	01 45 f4             	add    %eax,-0xc(%ebp)
40000b49:	ff 45 08             	incl   0x8(%ebp)
40000b4c:	8b 45 08             	mov    0x8(%ebp),%eax
40000b4f:	8a 00                	mov    (%eax),%al
40000b51:	84 c0                	test   %al,%al
40000b53:	0f 85 a6 fe ff ff    	jne    400009ff <printf+0x18>
40000b59:	eb 01                	jmp    40000b5c <printf+0x175>
40000b5b:	90                   	nop    
40000b5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b5f:	c9                   	leave  
40000b60:	c3                   	ret    
40000b61:	00 00                	add    %al,(%eax)
	...

40000b64 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
40000b64:	55                   	push   %ebp
40000b65:	89 e5                	mov    %esp,%ebp
40000b67:	83 ec 10             	sub    $0x10,%esp
#include "process.h"
40000b6a:	8b 45 08             	mov    0x8(%ebp),%eax
40000b6d:	89 45 fc             	mov    %eax,-0x4(%ebp)

#define CMD_SET    0
40000b70:	eb 0d                	jmp    40000b7f <memset+0x1b>
#define CMD_CLEAR  1
40000b72:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b75:	88 c2                	mov    %al,%dl
40000b77:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000b7a:	88 10                	mov    %dl,(%eax)
40000b7c:	ff 45 fc             	incl   -0x4(%ebp)
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"

#define CMD_SET    0
40000b7f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000b83:	0f 95 c0             	setne  %al
40000b86:	ff 4d 10             	decl   0x10(%ebp)
40000b89:	84 c0                	test   %al,%al
40000b8b:	75 e5                	jne    40000b72 <memset+0xe>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
40000b8d:	8b 45 08             	mov    0x8(%ebp),%eax
    uint16_t command;
40000b90:	c9                   	leave  
40000b91:	c3                   	ret    

40000b92 <memcpy>:
    uint16_t offset;
    uint16_t value;
40000b92:	55                   	push   %ebp
40000b93:	89 e5                	mov    %esp,%ebp
40000b95:	83 ec 10             	sub    $0x10,%esp
};
40000b98:	8b 45 08             	mov    0x8(%ebp),%eax
40000b9b:	89 45 f8             	mov    %eax,-0x8(%ebp)

40000b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ba1:	89 45 fc             	mov    %eax,-0x4(%ebp)
static int  x     = 0;
static int  y     = 0;
40000ba4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000ba8:	75 19                	jne    40000bc3 <memcpy+0x31>
40000baa:	b8 00 00 00 00       	mov    $0x0,%eax
40000baf:	eb 24                	jmp    40000bd5 <memcpy+0x43>
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40000bb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000bb4:	8a 10                	mov    (%eax),%dl
40000bb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
40000bb9:	88 10                	mov    %dl,(%eax)
40000bbb:	ff 45 f8             	incl   -0x8(%ebp)
40000bbe:	ff 45 fc             	incl   -0x4(%ebp)
40000bc1:	eb 01                	jmp    40000bc4 <memcpy+0x32>
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;

40000bc3:	90                   	nop    
40000bc4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000bc8:	0f 95 c0             	setne  %al
40000bcb:	ff 4d 10             	decl   0x10(%ebp)
40000bce:	84 c0                	test   %al,%al
40000bd0:	75 df                	jne    40000bb1 <memcpy+0x1f>
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

40000bd2:	8b 45 08             	mov    0x8(%ebp),%eax
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000bd5:	c9                   	leave  
40000bd6:	c3                   	ret    

40000bd7 <memcmp>:
    vgac.command = c;
    vgac.offset = o;
40000bd7:	55                   	push   %ebp
40000bd8:	89 e5                	mov    %esp,%ebp
40000bda:	83 ec 10             	sub    $0x10,%esp
    vgac.value = v;
40000bdd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000be1:	75 0a                	jne    40000bed <memcmp+0x16>

40000be3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000be8:	e9 83 00 00 00       	jmp    40000c70 <memcmp+0x99>
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000bed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000bf1:	75 07                	jne    40000bfa <memcmp+0x23>
}
40000bf3:	b8 01 00 00 00       	mov    $0x1,%eax
40000bf8:	eb 76                	jmp    40000c70 <memcmp+0x99>

40000bfa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000bfe:	75 07                	jne    40000c07 <memcmp+0x30>
int main(int argc, char* args[])
40000c00:	b8 00 00 00 00       	mov    $0x0,%eax
40000c05:	eb 69                	jmp    40000c70 <memcmp+0x99>
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000c07:	8b 45 08             	mov    0x8(%ebp),%eax
40000c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000c0d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c10:	89 45 f8             	mov    %eax,-0x8(%ebp)

    printf("vgaController: %x\n", vgaController);
40000c13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000c1a:	eb 47                	jmp    40000c63 <memcmp+0x8c>
    printf("fifoInpt: %x\n", fifoInpt);
40000c1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000c22:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000c25:	8a 10                	mov    (%eax),%dl
40000c27:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c2a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
40000c2d:	8d 04 01             	lea    (%ecx,%eax,1),%eax
40000c30:	8a 00                	mov    (%eax),%al
40000c32:	38 c2                	cmp    %al,%dl
40000c34:	74 2a                	je     40000c60 <memcmp+0x89>

40000c36:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c39:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000c3c:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000c3f:	8a 00                	mov    (%eax),%al
40000c41:	ba 00 00 00 00       	mov    $0x0,%edx
40000c46:	88 c2                	mov    %al,%dl
40000c48:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c4b:	8b 4d f8             	mov    -0x8(%ebp),%ecx
40000c4e:	8d 04 01             	lea    (%ecx,%eax,1),%eax
40000c51:	8a 00                	mov    (%eax),%al
40000c53:	25 ff 00 00 00       	and    $0xff,%eax
40000c58:	89 d1                	mov    %edx,%ecx
40000c5a:	29 c1                	sub    %eax,%ecx
40000c5c:	89 c8                	mov    %ecx,%eax
40000c5e:	eb 10                	jmp    40000c70 <memcmp+0x99>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
40000c60:	ff 45 fc             	incl   -0x4(%ebp)
40000c63:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c66:	3b 45 10             	cmp    0x10(%ebp),%eax
40000c69:	72 b1                	jb     40000c1c <memcmp+0x45>
    printf("fifoInpt: %x\n", fifoInpt);

    struct vga_command* vgac = malloc(sizeof(struct vga_command));

    setstdout("/dev/tty0");
40000c6b:	b8 00 00 00 00       	mov    $0x0,%eax
    setstderr("/dev/tty0");
40000c70:	c9                   	leave  
40000c71:	c3                   	ret    

40000c72 <strcmp>:

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40000c72:	55                   	push   %ebp
40000c73:	89 e5                	mov    %esp,%ebp
40000c75:	83 ec 18             	sub    $0x18,%esp

40000c78:	83 ec 0c             	sub    $0xc,%esp
40000c7b:	ff 75 08             	pushl  0x8(%ebp)
40000c7e:	e8 3e 00 00 00       	call   40000cc1 <strlen>
40000c83:	83 c4 10             	add    $0x10,%esp
40000c86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sendCommand(CMD_CLEAR, 0, 0);
40000c89:	83 ec 0c             	sub    $0xc,%esp
40000c8c:	ff 75 0c             	pushl  0xc(%ebp)
40000c8f:	e8 2d 00 00 00       	call   40000cc1 <strlen>
40000c94:	83 c4 10             	add    $0x10,%esp
40000c97:	89 45 f4             	mov    %eax,-0xc(%ebp)

40000c9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
40000c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ca0:	39 d0                	cmp    %edx,%eax
40000ca2:	7e 02                	jle    40000ca6 <strcmp+0x34>
40000ca4:	89 d0                	mov    %edx,%eax
40000ca6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40000ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000cac:	40                   	inc    %eax
40000cad:	83 ec 04             	sub    $0x4,%esp
40000cb0:	50                   	push   %eax
40000cb1:	ff 75 0c             	pushl  0xc(%ebp)
40000cb4:	ff 75 08             	pushl  0x8(%ebp)
40000cb7:	e8 1b ff ff ff       	call   40000bd7 <memcmp>
40000cbc:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
40000cbf:	c9                   	leave  
40000cc0:	c3                   	ret    

40000cc1 <strlen>:

    char nchar = '\0';
40000cc1:	55                   	push   %ebp
40000cc2:	89 e5                	mov    %esp,%ebp
40000cc4:	83 ec 10             	sub    $0x10,%esp
    char ochar = '\0';
40000cc7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000ccb:	75 07                	jne    40000cd4 <strlen+0x13>

40000ccd:	b8 00 00 00 00       	mov    $0x0,%eax
40000cd2:	eb 1b                	jmp    40000cef <strlen+0x2e>
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000cd4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000cdb:	eb 03                	jmp    40000ce0 <strlen+0x1f>
40000cdd:	ff 45 fc             	incl   -0x4(%ebp)
40000ce0:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ce3:	03 45 08             	add    0x8(%ebp),%eax
40000ce6:	8a 00                	mov    (%eax),%al
40000ce8:	84 c0                	test   %al,%al
40000cea:	75 f1                	jne    40000cdd <strlen+0x1c>
        ochar = nchar;

40000cec:	8b 45 fc             	mov    -0x4(%ebp),%eax
        if ((nchar == '\n') || (x > 79)) {
40000cef:	c9                   	leave  
40000cf0:	c3                   	ret    

40000cf1 <strcpy>:
            x = 0;
            y++;
40000cf1:	55                   	push   %ebp
40000cf2:	89 e5                	mov    %esp,%ebp
        }
40000cf4:	ff 75 0c             	pushl  0xc(%ebp)
40000cf7:	e8 c5 ff ff ff       	call   40000cc1 <strlen>
40000cfc:	83 c4 04             	add    $0x4,%esp
40000cff:	40                   	inc    %eax
40000d00:	50                   	push   %eax
40000d01:	ff 75 0c             	pushl  0xc(%ebp)
40000d04:	ff 75 08             	pushl  0x8(%ebp)
40000d07:	e8 86 fe ff ff       	call   40000b92 <memcpy>
40000d0c:	83 c4 0c             	add    $0xc,%esp

40000d0f:	8b 45 08             	mov    0x8(%ebp),%eax
        if (y > 24) {
40000d12:	c9                   	leave  
40000d13:	c3                   	ret    

40000d14 <strclone>:
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
40000d14:	55                   	push   %ebp
40000d15:	89 e5                	mov    %esp,%ebp
40000d17:	83 ec 18             	sub    $0x18,%esp
        }
40000d1a:	ff 75 08             	pushl  0x8(%ebp)
40000d1d:	e8 9f ff ff ff       	call   40000cc1 <strlen>
40000d22:	83 c4 04             	add    $0x4,%esp
40000d25:	40                   	inc    %eax
40000d26:	83 ec 0c             	sub    $0xc,%esp
40000d29:	50                   	push   %eax
40000d2a:	e8 92 03 00 00       	call   400010c1 <malloc>
40000d2f:	83 c4 10             	add    $0x10,%esp
40000d32:	89 45 f4             	mov    %eax,-0xc(%ebp)

40000d35:	83 ec 08             	sub    $0x8,%esp
40000d38:	ff 75 08             	pushl  0x8(%ebp)
40000d3b:	ff 75 f4             	pushl  -0xc(%ebp)
40000d3e:	e8 ae ff ff ff       	call   40000cf1 <strcpy>
40000d43:	83 c4 10             	add    $0x10,%esp
        if (nchar == '\n') {
            color = 0x09;
40000d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
            continue;
40000d49:	c9                   	leave  
40000d4a:	c3                   	ret    

40000d4b <strtok>:
        }

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
40000d4b:	55                   	push   %ebp
40000d4c:	89 e5                	mov    %esp,%ebp
40000d4e:	83 ec 08             	sub    $0x8,%esp
            continue;
40000d51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000d55:	74 43                	je     40000d9a <strtok+0x4f>
        }
40000d57:	a1 14 40 00 40       	mov    0x40004014,%eax
40000d5c:	85 c0                	test   %eax,%eax
40000d5e:	74 11                	je     40000d71 <strtok+0x26>

40000d60:	a1 14 40 00 40       	mov    0x40004014,%eax
40000d65:	83 ec 0c             	sub    $0xc,%esp
40000d68:	50                   	push   %eax
40000d69:	e8 96 05 00 00       	call   40001304 <free>
40000d6e:	83 c4 10             	add    $0x10,%esp
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40000d71:	83 ec 0c             	sub    $0xc,%esp
40000d74:	ff 75 08             	pushl  0x8(%ebp)
40000d77:	e8 98 ff ff ff       	call   40000d14 <strclone>
40000d7c:	83 c4 10             	add    $0x10,%esp
40000d7f:	a3 14 40 00 40       	mov    %eax,0x40004014
                y--;
40000d84:	a1 14 40 00 40       	mov    0x40004014,%eax
40000d89:	83 ec 08             	sub    $0x8,%esp
40000d8c:	ff 75 0c             	pushl  0xc(%ebp)
40000d8f:	50                   	push   %eax
40000d90:	e8 17 00 00 00       	call   40000dac <strtoknc>
40000d95:	83 c4 10             	add    $0x10,%esp
40000d98:	eb 10                	jmp    40000daa <strtok+0x5f>
                x = 79;
            }
40000d9a:	83 ec 08             	sub    $0x8,%esp
40000d9d:	ff 75 0c             	pushl  0xc(%ebp)
40000da0:	6a 00                	push   $0x0
40000da2:	e8 05 00 00 00       	call   40000dac <strtoknc>
40000da7:	83 c4 10             	add    $0x10,%esp
            else
40000daa:	c9                   	leave  
40000dab:	c3                   	ret    

40000dac <strtoknc>:
            {
                x--;
40000dac:	55                   	push   %ebp
40000dad:	89 e5                	mov    %esp,%ebp
40000daf:	83 ec 10             	sub    $0x10,%esp
            }
40000db2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            ochar = ' ';
40000db9:	ff 75 0c             	pushl  0xc(%ebp)
40000dbc:	e8 00 ff ff ff       	call   40000cc1 <strlen>
40000dc1:	83 c4 04             	add    $0x4,%esp
40000dc4:	89 45 f8             	mov    %eax,-0x8(%ebp)
            nchar = 0;
            color = 0x09;
        }
40000dc7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
40000dcb:	75 0a                	jne    40000dd7 <strtoknc+0x2b>

40000dcd:	b8 00 00 00 00       	mov    $0x0,%eax
40000dd2:	e9 e0 00 00 00       	jmp    40000eb7 <strtoknc+0x10b>
        uint16_t send = 0;
        char* sndChr = (char*) &send;

40000dd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000ddb:	75 13                	jne    40000df0 <strtoknc+0x44>
40000ddd:	a1 10 40 00 40       	mov    0x40004010,%eax
40000de2:	85 c0                	test   %eax,%eax
40000de4:	75 0a                	jne    40000df0 <strtoknc+0x44>
        sndChr[0] = ochar;
40000de6:	b8 00 00 00 00       	mov    $0x0,%eax
40000deb:	e9 c7 00 00 00       	jmp    40000eb7 <strtoknc+0x10b>
        sndChr[1] = color;

        color = 0x09;
40000df0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000df4:	74 08                	je     40000dfe <strtoknc+0x52>

40000df6:	8b 45 08             	mov    0x8(%ebp),%eax
40000df9:	a3 10 40 00 40       	mov    %eax,0x40004010
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
40000dfe:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e03:	89 45 fc             	mov    %eax,-0x4(%ebp)
40000e06:	eb 01                	jmp    40000e09 <strtoknc+0x5d>
40000e08:	90                   	nop    
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
40000e09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000e10:	eb 19                	jmp    40000e2b <strtoknc+0x7f>

40000e12:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e15:	8a 10                	mov    (%eax),%dl
40000e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e1a:	03 45 0c             	add    0xc(%ebp),%eax
40000e1d:	8a 00                	mov    (%eax),%al
40000e1f:	38 c2                	cmp    %al,%dl
40000e21:	75 05                	jne    40000e28 <strtoknc+0x7c>
    return 0;
40000e23:	ff 45 fc             	incl   -0x4(%ebp)
}
40000e26:	eb 0b                	jmp    40000e33 <strtoknc+0x87>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
40000e28:	ff 45 f4             	incl   -0xc(%ebp)
40000e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e2e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000e31:	7c df                	jl     40000e12 <strtoknc+0x66>
    return 0;
}
40000e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e36:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000e39:	75 cd                	jne    40000e08 <strtoknc+0x5c>
40000e3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000e3e:	a3 10 40 00 40       	mov    %eax,0x40004010
40000e43:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e48:	8a 00                	mov    (%eax),%al
40000e4a:	84 c0                	test   %al,%al
40000e4c:	75 57                	jne    40000ea5 <strtoknc+0xf9>
40000e4e:	c7 05 10 40 00 40 00 	movl   $0x0,0x40004010
40000e55:	00 00 00 
40000e58:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e5d:	eb 58                	jmp    40000eb7 <strtoknc+0x10b>
40000e5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000e66:	eb 20                	jmp    40000e88 <strtoknc+0xdc>
40000e68:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e6d:	8a 10                	mov    (%eax),%dl
40000e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e72:	03 45 0c             	add    0xc(%ebp),%eax
40000e75:	8a 00                	mov    (%eax),%al
40000e77:	38 c2                	cmp    %al,%dl
40000e79:	75 0a                	jne    40000e85 <strtoknc+0xd9>
40000e7b:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e80:	c6 00 00             	movb   $0x0,(%eax)
40000e83:	eb 0b                	jmp    40000e90 <strtoknc+0xe4>
40000e85:	ff 45 f4             	incl   -0xc(%ebp)
40000e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e8b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000e8e:	7c d8                	jl     40000e68 <strtoknc+0xbc>
40000e90:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e95:	40                   	inc    %eax
40000e96:	a3 10 40 00 40       	mov    %eax,0x40004010
40000e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e9e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000ea1:	7c 10                	jl     40000eb3 <strtoknc+0x107>
40000ea3:	eb 01                	jmp    40000ea6 <strtoknc+0xfa>
40000ea5:	90                   	nop    
40000ea6:	a1 10 40 00 40       	mov    0x40004010,%eax
40000eab:	8a 00                	mov    (%eax),%al
40000ead:	84 c0                	test   %al,%al
40000eaf:	75 ae                	jne    40000e5f <strtoknc+0xb3>
40000eb1:	eb 01                	jmp    40000eb4 <strtoknc+0x108>
40000eb3:	90                   	nop    
40000eb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000eb7:	c9                   	leave  
40000eb8:	c3                   	ret    
40000eb9:	00 00                	add    %al,(%eax)
	...

40000ebc <remove_from_list>:
#include "stdlib.h"
#include "string.h"
#include "process.h"

#define CMD_SET    0
#define CMD_CLEAR  1
40000ebc:	55                   	push   %ebp
40000ebd:	89 e5                	mov    %esp,%ebp
40000ebf:	83 ec 10             	sub    $0x10,%esp
#define CMD_SCROLL 2
40000ec2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

40000ec9:	8b 45 08             	mov    0x8(%ebp),%eax
40000ecc:	8b 00                	mov    (%eax),%eax
40000ece:	89 45 fc             	mov    %eax,-0x4(%ebp)
struct vga_command {
    uint16_t command;
40000ed1:	eb 38                	jmp    40000f0b <remove_from_list+0x4f>
    uint16_t offset;
40000ed3:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
40000ed9:	75 21                	jne    40000efc <remove_from_list+0x40>
    uint16_t value;
40000edb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
40000edf:	75 0d                	jne    40000eee <remove_from_list+0x32>
};
40000ee1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ee4:	8b 50 08             	mov    0x8(%eax),%edx
40000ee7:	8b 45 08             	mov    0x8(%ebp),%eax
40000eea:	89 10                	mov    %edx,(%eax)

40000eec:	eb 23                	jmp    40000f11 <remove_from_list+0x55>
static int  x     = 0;
static int  y     = 0;
40000eee:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ef1:	8b 50 08             	mov    0x8(%eax),%edx
40000ef4:	8b 45 f8             	mov    -0x8(%ebp),%eax
40000ef7:	89 50 08             	mov    %edx,0x8(%eax)
static char color = 0x09;
40000efa:	eb 15                	jmp    40000f11 <remove_from_list+0x55>

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

40000efc:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000eff:	89 45 f8             	mov    %eax,-0x8(%ebp)
HANDLE vgaController;
40000f02:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f05:	8b 40 08             	mov    0x8(%eax),%eax
40000f08:	89 45 fc             	mov    %eax,-0x4(%ebp)
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40000f0b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40000f0f:	75 c2                	jne    40000ed3 <remove_from_list+0x17>

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000f11:	c9                   	leave  
40000f12:	c3                   	ret    

40000f13 <append_to_list>:
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000f13:	55                   	push   %ebp
40000f14:	89 e5                	mov    %esp,%ebp

40000f16:	8b 45 08             	mov    0x8(%ebp),%eax
40000f19:	8b 10                	mov    (%eax),%edx
40000f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f1e:	89 50 08             	mov    %edx,0x8(%eax)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000f21:	8b 45 08             	mov    0x8(%ebp),%eax
40000f24:	8b 55 0c             	mov    0xc(%ebp),%edx
40000f27:	89 10                	mov    %edx,(%eax)
}
40000f29:	5d                   	pop    %ebp
40000f2a:	c3                   	ret    

40000f2b <pop_from_list>:

int main(int argc, char* args[])
40000f2b:	55                   	push   %ebp
40000f2c:	89 e5                	mov    %esp,%ebp
40000f2e:	83 ec 10             	sub    $0x10,%esp
{
40000f31:	8b 45 08             	mov    0x8(%ebp),%eax
40000f34:	8b 00                	mov    (%eax),%eax
40000f36:	85 c0                	test   %eax,%eax
40000f38:	75 07                	jne    40000f41 <pop_from_list+0x16>
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000f3a:	b8 00 00 00 00       	mov    $0x0,%eax
40000f3f:	eb 19                	jmp    40000f5a <pop_from_list+0x2f>
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000f41:	8b 45 08             	mov    0x8(%ebp),%eax
40000f44:	8b 00                	mov    (%eax),%eax
40000f46:	89 45 fc             	mov    %eax,-0x4(%ebp)

40000f49:	ff 75 fc             	pushl  -0x4(%ebp)
40000f4c:	ff 75 08             	pushl  0x8(%ebp)
40000f4f:	e8 68 ff ff ff       	call   40000ebc <remove_from_list>
40000f54:	83 c4 08             	add    $0x8,%esp
    printf("vgaController: %x\n", vgaController);
40000f57:	8b 45 fc             	mov    -0x4(%ebp),%eax
    printf("fifoInpt: %x\n", fifoInpt);
40000f5a:	c9                   	leave  
40000f5b:	c3                   	ret    

40000f5c <allocate_unused_nodes>:

    struct vga_command* vgac = malloc(sizeof(struct vga_command));
40000f5c:	55                   	push   %ebp
40000f5d:	89 e5                	mov    %esp,%ebp
40000f5f:	83 ec 18             	sub    $0x18,%esp

40000f62:	83 ec 0c             	sub    $0xc,%esp
40000f65:	6a 01                	push   $0x1
40000f67:	e8 e0 03 00 00       	call   4000134c <vmm_alloc_cont>
40000f6c:	83 c4 10             	add    $0x10,%esp
40000f6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    setstdout("/dev/tty0");
40000f72:	83 ec 04             	sub    $0x4,%esp
40000f75:	68 00 10 00 00       	push   $0x1000
40000f7a:	6a 00                	push   $0x0
40000f7c:	ff 75 f0             	pushl  -0x10(%ebp)
40000f7f:	e8 e0 fb ff ff       	call   40000b64 <memset>
40000f84:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");

40000f87:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
40000f8e:	eb 23                	jmp    40000fb3 <allocate_unused_nodes+0x57>
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40000f90:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000f93:	89 d0                	mov    %edx,%eax
40000f95:	01 c0                	add    %eax,%eax
40000f97:	01 d0                	add    %edx,%eax
40000f99:	c1 e0 02             	shl    $0x2,%eax
40000f9c:	03 45 f0             	add    -0x10(%ebp),%eax
40000f9f:	83 ec 08             	sub    $0x8,%esp
40000fa2:	50                   	push   %eax
40000fa3:	68 18 40 00 40       	push   $0x40004018
40000fa8:	e8 66 ff ff ff       	call   40000f13 <append_to_list>
40000fad:	83 c4 10             	add    $0x10,%esp

    struct vga_command* vgac = malloc(sizeof(struct vga_command));

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

40000fb0:	ff 45 f4             	incl   -0xc(%ebp)
40000fb3:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
40000fba:	76 d4                	jbe    40000f90 <allocate_unused_nodes+0x34>
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000fbc:	c9                   	leave  
40000fbd:	c3                   	ret    

40000fbe <pop_unused_node>:

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000fbe:	55                   	push   %ebp
40000fbf:	89 e5                	mov    %esp,%ebp
40000fc1:	83 ec 18             	sub    $0x18,%esp
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40000fc4:	68 18 40 00 40       	push   $0x40004018
40000fc9:	e8 5d ff ff ff       	call   40000f2b <pop_from_list>
40000fce:	83 c4 04             	add    $0x4,%esp
40000fd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fclose(initCtrl);

40000fd4:	eb 18                	jmp    40000fee <pop_unused_node+0x30>
    char nchar = '\0';
40000fd6:	e8 81 ff ff ff       	call   40000f5c <allocate_unused_nodes>
    char ochar = '\0';
40000fdb:	83 ec 0c             	sub    $0xc,%esp
40000fde:	68 18 40 00 40       	push   $0x40004018
40000fe3:	e8 43 ff ff ff       	call   40000f2b <pop_from_list>
40000fe8:	83 c4 10             	add    $0x10,%esp
40000feb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

40000fee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000ff2:	74 e2                	je     40000fd6 <pop_unused_node+0x18>
    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
        ochar = nchar;
40000ff7:	c9                   	leave  
40000ff8:	c3                   	ret    

40000ff9 <merge_into_frees>:

        if ((nchar == '\n') || (x > 79)) {
40000ff9:	55                   	push   %ebp
40000ffa:	89 e5                	mov    %esp,%ebp
40000ffc:	83 ec 10             	sub    $0x10,%esp
            x = 0;
40000fff:	ff 75 08             	pushl  0x8(%ebp)
40001002:	68 1c 40 00 40       	push   $0x4000401c
40001007:	e8 b0 fe ff ff       	call   40000ebc <remove_from_list>
4000100c:	83 c4 08             	add    $0x8,%esp
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
4000100f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
            y--;
40001016:	a1 20 40 00 40       	mov    0x40004020,%eax
4000101b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        }

4000101e:	e9 82 00 00 00       	jmp    400010a5 <merge_into_frees+0xac>
        if (nchar == '\n') {
40001023:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001026:	8b 50 04             	mov    0x4(%eax),%edx
40001029:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000102c:	8b 00                	mov    (%eax),%eax
4000102e:	01 c2                	add    %eax,%edx
40001030:	8b 45 08             	mov    0x8(%ebp),%eax
40001033:	8b 40 04             	mov    0x4(%eax),%eax
40001036:	39 c2                	cmp    %eax,%edx
40001038:	75 1e                	jne    40001058 <merge_into_frees+0x5f>
            color = 0x09;
4000103a:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000103d:	8b 50 04             	mov    0x4(%eax),%edx
40001040:	8b 45 08             	mov    0x8(%ebp),%eax
40001043:	89 50 04             	mov    %edx,0x4(%eax)
            continue;
40001046:	ff 75 fc             	pushl  -0x4(%ebp)
40001049:	68 20 40 00 40       	push   $0x40004020
4000104e:	e8 69 fe ff ff       	call   40000ebc <remove_from_list>
40001053:	83 c4 08             	add    $0x8,%esp
        }
40001056:	eb b7                	jmp    4000100f <merge_into_frees+0x16>

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
40001058:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000105b:	8b 50 04             	mov    0x4(%eax),%edx
4000105e:	8b 45 08             	mov    0x8(%ebp),%eax
40001061:	8b 48 04             	mov    0x4(%eax),%ecx
40001064:	8b 45 08             	mov    0x8(%ebp),%eax
40001067:	8b 00                	mov    (%eax),%eax
40001069:	8d 04 01             	lea    (%ecx,%eax,1),%eax
4000106c:	39 c2                	cmp    %eax,%edx
4000106e:	75 26                	jne    40001096 <merge_into_frees+0x9d>
            color = nchar;
40001070:	8b 45 08             	mov    0x8(%ebp),%eax
40001073:	8b 10                	mov    (%eax),%edx
40001075:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001078:	8b 00                	mov    (%eax),%eax
4000107a:	01 c2                	add    %eax,%edx
4000107c:	8b 45 08             	mov    0x8(%ebp),%eax
4000107f:	89 10                	mov    %edx,(%eax)
            continue;
40001081:	ff 75 fc             	pushl  -0x4(%ebp)
40001084:	68 20 40 00 40       	push   $0x40004020
40001089:	e8 2e fe ff ff       	call   40000ebc <remove_from_list>
4000108e:	83 c4 08             	add    $0x8,%esp
        }
40001091:	e9 79 ff ff ff       	jmp    4000100f <merge_into_frees+0x16>

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40001096:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001099:	89 45 f8             	mov    %eax,-0x8(%ebp)
                y--;
4000109c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000109f:	8b 40 08             	mov    0x8(%eax),%eax
400010a2:	89 45 fc             	mov    %eax,-0x4(%ebp)

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

400010a5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400010a9:	0f 85 74 ff ff ff    	jne    40001023 <merge_into_frees+0x2a>
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
            else
400010af:	ff 75 08             	pushl  0x8(%ebp)
400010b2:	68 20 40 00 40       	push   $0x40004020
400010b7:	e8 57 fe ff ff       	call   40000f13 <append_to_list>
400010bc:	83 c4 08             	add    $0x8,%esp
            {
400010bf:	c9                   	leave  
400010c0:	c3                   	ret    

400010c1 <malloc>:
                x--;
            }
400010c1:	55                   	push   %ebp
400010c2:	89 e5                	mov    %esp,%ebp
400010c4:	83 ec 28             	sub    $0x28,%esp
            ochar = ' ';
400010c7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
            nchar = 0;
400010ce:	a1 20 40 00 40       	mov    0x40004020,%eax
400010d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
            color = 0x09;
        }
400010d6:	eb 19                	jmp    400010f1 <malloc+0x30>

400010d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
400010db:	8b 00                	mov    (%eax),%eax
400010dd:	3b 45 08             	cmp    0x8(%ebp),%eax
400010e0:	73 17                	jae    400010f9 <malloc+0x38>
        uint16_t send = 0;
        char* sndChr = (char*) &send;

400010e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
400010e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
        sndChr[0] = ochar;
400010e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
400010eb:	8b 40 08             	mov    0x8(%eax),%eax
400010ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
                x--;
            }
            ochar = ' ';
            nchar = 0;
            color = 0x09;
        }
400010f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
400010f5:	75 e1                	jne    400010d8 <malloc+0x17>
400010f7:	eb 01                	jmp    400010fa <malloc+0x39>

        uint16_t send = 0;
400010f9:	90                   	nop    
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
400010fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
400010fe:	0f 85 a6 00 00 00    	jne    400011aa <malloc+0xe9>

40001104:	8b 45 08             	mov    0x8(%ebp),%eax
40001107:	c1 e8 0c             	shr    $0xc,%eax
4000110a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        sendCommand(CMD_SET, x + y * 80, send);

4000110d:	8b 45 08             	mov    0x8(%ebp),%eax
40001110:	25 ff 0f 00 00       	and    $0xfff,%eax
40001115:	85 c0                	test   %eax,%eax
40001117:	74 03                	je     4000111c <malloc+0x5b>
        if(nchar != 0) {
40001119:	ff 45 e0             	incl   -0x20(%ebp)
            x++;
        }
4000111c:	83 ec 0c             	sub    $0xc,%esp
4000111f:	ff 75 e0             	pushl  -0x20(%ebp)
40001122:	e8 25 02 00 00       	call   4000134c <vmm_alloc_cont>
40001127:	83 c4 10             	add    $0x10,%esp
4000112a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

4000112d:	e8 8c fe ff ff       	call   40000fbe <pop_unused_node>
40001132:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return 0;
}
40001135:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001138:	8b 45 e8             	mov    -0x18(%ebp),%eax
4000113b:	89 50 04             	mov    %edx,0x4(%eax)
4000113e:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001141:	8b 55 08             	mov    0x8(%ebp),%edx
40001144:	89 10                	mov    %edx,(%eax)
40001146:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001149:	c1 e0 0c             	shl    $0xc,%eax
4000114c:	3b 45 08             	cmp    0x8(%ebp),%eax
4000114f:	76 3e                	jbe    4000118f <malloc+0xce>
40001151:	e8 68 fe ff ff       	call   40000fbe <pop_unused_node>
40001156:	89 45 ec             	mov    %eax,-0x14(%ebp)
40001159:	8b 45 e8             	mov    -0x18(%ebp),%eax
4000115c:	8b 50 04             	mov    0x4(%eax),%edx
4000115f:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001162:	8b 00                	mov    (%eax),%eax
40001164:	01 c2                	add    %eax,%edx
40001166:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001169:	89 50 04             	mov    %edx,0x4(%eax)
4000116c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000116f:	c1 e0 0c             	shl    $0xc,%eax
40001172:	89 c2                	mov    %eax,%edx
40001174:	2b 55 08             	sub    0x8(%ebp),%edx
40001177:	8b 45 ec             	mov    -0x14(%ebp),%eax
4000117a:	89 10                	mov    %edx,(%eax)
4000117c:	83 ec 08             	sub    $0x8,%esp
4000117f:	ff 75 ec             	pushl  -0x14(%ebp)
40001182:	68 20 40 00 40       	push   $0x40004020
40001187:	e8 87 fd ff ff       	call   40000f13 <append_to_list>
4000118c:	83 c4 10             	add    $0x10,%esp
4000118f:	83 ec 08             	sub    $0x8,%esp
40001192:	ff 75 e8             	pushl  -0x18(%ebp)
40001195:	68 1c 40 00 40       	push   $0x4000401c
4000119a:	e8 74 fd ff ff       	call   40000f13 <append_to_list>
4000119f:	83 c4 10             	add    $0x10,%esp
400011a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
400011a5:	8b 40 04             	mov    0x4(%eax),%eax
400011a8:	eb 7b                	jmp    40001225 <malloc+0x164>
400011aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
400011ad:	8b 00                	mov    (%eax),%eax
400011af:	2b 45 08             	sub    0x8(%ebp),%eax
400011b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
400011b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
400011b8:	8b 55 08             	mov    0x8(%ebp),%edx
400011bb:	89 10                	mov    %edx,(%eax)
400011bd:	83 ec 08             	sub    $0x8,%esp
400011c0:	ff 75 dc             	pushl  -0x24(%ebp)
400011c3:	68 20 40 00 40       	push   $0x40004020
400011c8:	e8 ef fc ff ff       	call   40000ebc <remove_from_list>
400011cd:	83 c4 10             	add    $0x10,%esp
400011d0:	83 ec 08             	sub    $0x8,%esp
400011d3:	ff 75 dc             	pushl  -0x24(%ebp)
400011d6:	68 1c 40 00 40       	push   $0x4000401c
400011db:	e8 33 fd ff ff       	call   40000f13 <append_to_list>
400011e0:	83 c4 10             	add    $0x10,%esp
400011e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400011e7:	74 36                	je     4000121f <malloc+0x15e>
400011e9:	e8 d0 fd ff ff       	call   40000fbe <pop_unused_node>
400011ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
400011f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
400011f4:	8b 50 04             	mov    0x4(%eax),%edx
400011f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
400011fa:	8b 00                	mov    (%eax),%eax
400011fc:	01 c2                	add    %eax,%edx
400011fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001201:	89 50 04             	mov    %edx,0x4(%eax)
40001204:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001207:	8b 55 f0             	mov    -0x10(%ebp),%edx
4000120a:	89 10                	mov    %edx,(%eax)
4000120c:	83 ec 08             	sub    $0x8,%esp
4000120f:	ff 75 f4             	pushl  -0xc(%ebp)
40001212:	68 20 40 00 40       	push   $0x40004020
40001217:	e8 f7 fc ff ff       	call   40000f13 <append_to_list>
4000121c:	83 c4 10             	add    $0x10,%esp
4000121f:	8b 45 dc             	mov    -0x24(%ebp),%eax
40001222:	8b 40 04             	mov    0x4(%eax),%eax
40001225:	c9                   	leave  
40001226:	c3                   	ret    

40001227 <calloc>:
40001227:	55                   	push   %ebp
40001228:	89 e5                	mov    %esp,%ebp
4000122a:	83 ec 18             	sub    $0x18,%esp
4000122d:	8b 45 08             	mov    0x8(%ebp),%eax
40001230:	0f af 45 0c          	imul   0xc(%ebp),%eax
40001234:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001237:	83 ec 0c             	sub    $0xc,%esp
4000123a:	ff 75 f0             	pushl  -0x10(%ebp)
4000123d:	e8 7f fe ff ff       	call   400010c1 <malloc>
40001242:	83 c4 10             	add    $0x10,%esp
40001245:	89 45 f4             	mov    %eax,-0xc(%ebp)
40001248:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000124c:	74 13                	je     40001261 <calloc+0x3a>
4000124e:	83 ec 04             	sub    $0x4,%esp
40001251:	ff 75 f0             	pushl  -0x10(%ebp)
40001254:	6a 00                	push   $0x0
40001256:	ff 75 f4             	pushl  -0xc(%ebp)
40001259:	e8 06 f9 ff ff       	call   40000b64 <memset>
4000125e:	83 c4 10             	add    $0x10,%esp
40001261:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001264:	c9                   	leave  
40001265:	c3                   	ret    

40001266 <realloc>:
40001266:	55                   	push   %ebp
40001267:	89 e5                	mov    %esp,%ebp
40001269:	83 ec 18             	sub    $0x18,%esp
4000126c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001273:	a1 1c 40 00 40       	mov    0x4000401c,%eax
40001278:	89 45 f0             	mov    %eax,-0x10(%ebp)
4000127b:	eb 7a                	jmp    400012f7 <realloc+0x91>
4000127d:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001280:	8b 50 04             	mov    0x4(%eax),%edx
40001283:	8b 45 08             	mov    0x8(%ebp),%eax
40001286:	39 c2                	cmp    %eax,%edx
40001288:	75 5e                	jne    400012e8 <realloc+0x82>
4000128a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
4000128e:	75 15                	jne    400012a5 <realloc+0x3f>
40001290:	83 ec 0c             	sub    $0xc,%esp
40001293:	ff 75 08             	pushl  0x8(%ebp)
40001296:	e8 69 00 00 00       	call   40001304 <free>
4000129b:	83 c4 10             	add    $0x10,%esp
4000129e:	b8 00 00 00 00       	mov    $0x0,%eax
400012a3:	eb 5d                	jmp    40001302 <realloc+0x9c>
400012a5:	83 ec 0c             	sub    $0xc,%esp
400012a8:	ff 75 0c             	pushl  0xc(%ebp)
400012ab:	e8 11 fe ff ff       	call   400010c1 <malloc>
400012b0:	83 c4 10             	add    $0x10,%esp
400012b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
400012b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012b9:	8b 10                	mov    (%eax),%edx
400012bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012be:	8b 40 04             	mov    0x4(%eax),%eax
400012c1:	83 ec 04             	sub    $0x4,%esp
400012c4:	52                   	push   %edx
400012c5:	50                   	push   %eax
400012c6:	ff 75 f4             	pushl  -0xc(%ebp)
400012c9:	e8 c4 f8 ff ff       	call   40000b92 <memcpy>
400012ce:	83 c4 10             	add    $0x10,%esp
400012d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012d4:	8b 40 04             	mov    0x4(%eax),%eax
400012d7:	83 ec 0c             	sub    $0xc,%esp
400012da:	50                   	push   %eax
400012db:	e8 24 00 00 00       	call   40001304 <free>
400012e0:	83 c4 10             	add    $0x10,%esp
400012e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
400012e6:	eb 1a                	jmp    40001302 <realloc+0x9c>
400012e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
400012ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012f1:	8b 40 08             	mov    0x8(%eax),%eax
400012f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
400012f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400012fb:	75 80                	jne    4000127d <realloc+0x17>
400012fd:	b8 00 00 00 00       	mov    $0x0,%eax
40001302:	c9                   	leave  
40001303:	c3                   	ret    

40001304 <free>:
40001304:	55                   	push   %ebp
40001305:	89 e5                	mov    %esp,%ebp
40001307:	83 ec 10             	sub    $0x10,%esp
4000130a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
40001311:	a1 1c 40 00 40       	mov    0x4000401c,%eax
40001316:	89 45 fc             	mov    %eax,-0x4(%ebp)
40001319:	eb 29                	jmp    40001344 <free+0x40>
4000131b:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000131e:	8b 50 04             	mov    0x4(%eax),%edx
40001321:	8b 45 08             	mov    0x8(%ebp),%eax
40001324:	39 c2                	cmp    %eax,%edx
40001326:	75 0d                	jne    40001335 <free+0x31>
40001328:	ff 75 fc             	pushl  -0x4(%ebp)
4000132b:	e8 c9 fc ff ff       	call   40000ff9 <merge_into_frees>
40001330:	83 c4 04             	add    $0x4,%esp
40001333:	eb 15                	jmp    4000134a <free+0x46>
40001335:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001338:	89 45 f8             	mov    %eax,-0x8(%ebp)
4000133b:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000133e:	8b 40 08             	mov    0x8(%eax),%eax
40001341:	89 45 fc             	mov    %eax,-0x4(%ebp)
40001344:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001348:	75 d1                	jne    4000131b <free+0x17>
4000134a:	c9                   	leave  
4000134b:	c3                   	ret    

4000134c <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
4000134c:	55                   	push   %ebp
4000134d:	89 e5                	mov    %esp,%ebp
4000134f:	83 ec 28             	sub    $0x28,%esp

#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
40001352:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
40001359:	8b 45 08             	mov    0x8(%ebp),%eax
4000135c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000135f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001366:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000136d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001374:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t command;
    uint16_t offset;
4000137b:	83 ec 0c             	sub    $0xc,%esp
4000137e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001381:	50                   	push   %eax
40001382:	e8 89 00 00 00       	call   40001410 <syscall>
40001387:	83 c4 10             	add    $0x10,%esp
    uint16_t value;
};
4000138a:	8b 45 e0             	mov    -0x20(%ebp),%eax

4000138d:	c9                   	leave  
4000138e:	c3                   	ret    

4000138f <vmm_free>:
static int  x     = 0;
static int  y     = 0;
4000138f:	55                   	push   %ebp
40001390:	89 e5                	mov    %esp,%ebp
40001392:	83 ec 28             	sub    $0x28,%esp
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40001395:	8b 45 08             	mov    0x8(%ebp),%eax

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
40001398:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000139f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400013a2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400013a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400013b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400013b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vgac.offset = o;
    vgac.value = v;
400013be:	83 ec 0c             	sub    $0xc,%esp
400013c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400013c4:	50                   	push   %eax
400013c5:	e8 46 00 00 00       	call   40001410 <syscall>
400013ca:	83 c4 10             	add    $0x10,%esp

400013cd:	c9                   	leave  
400013ce:	c3                   	ret    

400013cf <print_memstat>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}
400013cf:	55                   	push   %ebp
400013d0:	89 e5                	mov    %esp,%ebp
400013d2:	83 ec 28             	sub    $0x28,%esp
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
400013d5:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
400013dc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400013e3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400013ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400013f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400013f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    struct vga_command* vgac = malloc(sizeof(struct vga_command));
400013ff:	83 ec 0c             	sub    $0xc,%esp
40001402:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001405:	50                   	push   %eax
40001406:	e8 05 00 00 00       	call   40001410 <syscall>
4000140b:	83 c4 10             	add    $0x10,%esp

4000140e:	c9                   	leave  
4000140f:	c3                   	ret    

40001410 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
40001410:	55                   	push   %ebp
40001411:	89 e5                	mov    %esp,%ebp
40001413:	57                   	push   %edi
40001414:	56                   	push   %esi
40001415:	53                   	push   %ebx
40001416:	83 ec 0c             	sub    $0xc,%esp
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40001419:	8b 45 08             	mov    0x8(%ebp),%eax
4000141c:	8b 00                	mov    (%eax),%eax
4000141e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint16_t value;
40001421:	8b 55 08             	mov    0x8(%ebp),%edx
40001424:	8b 5a 04             	mov    0x4(%edx),%ebx
};
40001427:	8b 55 08             	mov    0x8(%ebp),%edx
4000142a:	8b 4a 08             	mov    0x8(%edx),%ecx

4000142d:	8b 55 08             	mov    0x8(%ebp),%edx
40001430:	8b 52 0c             	mov    0xc(%edx),%edx
40001433:	89 55 e8             	mov    %edx,-0x18(%ebp)
static int  x     = 0;
40001436:	8b 75 08             	mov    0x8(%ebp),%esi
40001439:	8b 76 10             	mov    0x10(%esi),%esi
static int  y     = 0;
4000143c:	8b 7d 08             	mov    0x8(%ebp),%edi
4000143f:	8b 7f 14             	mov    0x14(%edi),%edi
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
40001442:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001445:	8b 55 e8             	mov    -0x18(%ebp),%edx
40001448:	cd 30                	int    $0x30
4000144a:	89 55 e8             	mov    %edx,-0x18(%ebp)
4000144d:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001450:	8b 45 08             	mov    0x8(%ebp),%eax
40001453:	89 45 ec             	mov    %eax,-0x14(%ebp)
40001456:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001459:	8b 55 ec             	mov    -0x14(%ebp),%edx
4000145c:	89 02                	mov    %eax,(%edx)
4000145e:	8b 45 08             	mov    0x8(%ebp),%eax
40001461:	89 58 04             	mov    %ebx,0x4(%eax)
40001464:	8b 45 08             	mov    0x8(%ebp),%eax
40001467:	89 48 08             	mov    %ecx,0x8(%eax)
4000146a:	8b 45 08             	mov    0x8(%ebp),%eax
4000146d:	8b 55 e8             	mov    -0x18(%ebp),%edx
40001470:	89 50 0c             	mov    %edx,0xc(%eax)
40001473:	8b 45 08             	mov    0x8(%ebp),%eax
40001476:	89 70 10             	mov    %esi,0x10(%eax)
40001479:	8b 45 08             	mov    0x8(%ebp),%eax
4000147c:	89 78 14             	mov    %edi,0x14(%eax)
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;
4000147f:	83 c4 0c             	add    $0xc,%esp
40001482:	5b                   	pop    %ebx
40001483:	5e                   	pop    %esi
40001484:	5f                   	pop    %edi
40001485:	5d                   	pop    %ebp
40001486:	c3                   	ret    
	...

40001488 <return_rpc>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"
40001488:	55                   	push   %ebp
40001489:	89 e5                	mov    %esp,%ebp
4000148b:	83 ec 28             	sub    $0x28,%esp

#define CMD_SET    0
#define CMD_CLEAR  1
4000148e:	8b 45 08             	mov    0x8(%ebp),%eax
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40001491:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
40001498:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000149b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400014a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400014a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400014b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
400014b7:	83 ec 0c             	sub    $0xc,%esp
400014ba:	8d 45 e0             	lea    -0x20(%ebp),%eax
400014bd:	50                   	push   %eax
400014be:	e8 4d ff ff ff       	call   40001410 <syscall>
400014c3:	83 c4 10             	add    $0x10,%esp

static int  x     = 0;
400014c6:	eb fe                	jmp    400014c6 <return_rpc+0x3e>

400014c8 <call_rpc>:
static int  y     = 0;
static char color = 0x09;

400014c8:	55                   	push   %ebp
400014c9:	89 e5                	mov    %esp,%ebp
400014cb:	83 ec 28             	sub    $0x28,%esp
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
400014ce:	8b 55 08             	mov    0x8(%ebp),%edx

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
400014d1:	8b 45 14             	mov    0x14(%ebp),%eax
    vgac.offset = o;
    vgac.value = v;
400014d4:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
400014db:	89 55 e4             	mov    %edx,-0x1c(%ebp)
400014de:	8b 55 0c             	mov    0xc(%ebp),%edx
400014e1:	89 55 e8             	mov    %edx,-0x18(%ebp)
400014e4:	8b 55 10             	mov    0x10(%ebp),%edx
400014e7:	89 55 ec             	mov    %edx,-0x14(%ebp)
400014ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
400014ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400014f4:	83 ec 0c             	sub    $0xc,%esp
400014f7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400014fa:	50                   	push   %eax
400014fb:	e8 10 ff ff ff       	call   40001410 <syscall>
40001500:	83 c4 10             	add    $0x10,%esp
}

40001503:	8b 45 e0             	mov    -0x20(%ebp),%eax
int main(int argc, char* args[])
40001506:	c9                   	leave  
40001507:	c3                   	ret    

40001508 <fetch_rpc_data>:
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40001508:	55                   	push   %ebp
40001509:	89 e5                	mov    %esp,%ebp
4000150b:	83 ec 28             	sub    $0x28,%esp
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
4000150e:	8b 45 08             	mov    0x8(%ebp),%eax
    printf("fifoInpt: %x\n", fifoInpt);

    struct vga_command* vgac = malloc(sizeof(struct vga_command));

    setstdout("/dev/tty0");
40001511:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40001518:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000151b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001522:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001529:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001530:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    setstderr("/dev/tty0");

40001537:	83 ec 0c             	sub    $0xc,%esp
4000153a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000153d:	50                   	push   %eax
4000153e:	e8 cd fe ff ff       	call   40001410 <syscall>
40001543:	83 c4 10             	add    $0x10,%esp
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40001546:	c9                   	leave  
40001547:	c3                   	ret    

40001548 <register_irq_rpc_syscall>:

    sendCommand(CMD_CLEAR, 0, 0);
40001548:	55                   	push   %ebp
40001549:	89 e5                	mov    %esp,%ebp
4000154b:	83 ec 28             	sub    $0x28,%esp
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

4000154e:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40001555:	8b 45 08             	mov    0x8(%ebp),%eax
40001558:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000155b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001562:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001569:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001570:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40001577:	83 ec 0c             	sub    $0xc,%esp
4000157a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000157d:	50                   	push   %eax
4000157e:	e8 8d fe ff ff       	call   40001410 <syscall>
40001583:	83 c4 10             	add    $0x10,%esp
        ochar = nchar;

40001586:	8b 45 e0             	mov    -0x20(%ebp),%eax
        if ((nchar == '\n') || (x > 79)) {
40001589:	c9                   	leave  
4000158a:	c3                   	ret    

4000158b <register_irq_handler>:
            x = 0;
            y++;
        }

4000158b:	55                   	push   %ebp
4000158c:	89 e5                	mov    %esp,%ebp
4000158e:	83 ec 08             	sub    $0x8,%esp
        if (y > 24) {
40001591:	83 ec 0c             	sub    $0xc,%esp
40001594:	ff 75 08             	pushl  0x8(%ebp)
40001597:	e8 ac ff ff ff       	call   40001548 <register_irq_rpc_syscall>
4000159c:	83 c4 10             	add    $0x10,%esp
4000159f:	85 c0                	test   %eax,%eax
400015a1:	74 14                	je     400015b7 <register_irq_handler+0x2c>
            sendCommand(CMD_SCROLL, 0, 0);
400015a3:	8b 45 08             	mov    0x8(%ebp),%eax
400015a6:	8b 55 0c             	mov    0xc(%ebp),%edx
400015a9:	89 14 85 40 40 00 40 	mov    %edx,0x40004040(,%eax,4)
            y--;
400015b0:	b8 01 00 00 00       	mov    $0x1,%eax
400015b5:	eb 05                	jmp    400015bc <register_irq_handler+0x31>
        }

400015b7:	b8 00 00 00 00       	mov    $0x0,%eax
        if (nchar == '\n') {
400015bc:	c9                   	leave  
400015bd:	c3                   	ret    

400015be <_handle_rpc>:
            color = 0x09;
            continue;
400015be:	55                   	push   %ebp
400015bf:	89 e5                	mov    %esp,%ebp
400015c1:	83 ec 18             	sub    $0x18,%esp
        }
400015c4:	83 ec 0c             	sub    $0xc,%esp
400015c7:	ff 75 10             	pushl  0x10(%ebp)
400015ca:	e8 f2 fa ff ff       	call   400010c1 <malloc>
400015cf:	83 c4 10             	add    $0x10,%esp
400015d2:	89 45 f4             	mov    %eax,-0xc(%ebp)

400015d5:	83 ec 0c             	sub    $0xc,%esp
400015d8:	ff 75 f4             	pushl  -0xc(%ebp)
400015db:	e8 28 ff ff ff       	call   40001508 <fetch_rpc_data>
400015e0:	83 c4 10             	add    $0x10,%esp
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
400015e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400015e7:	75 30                	jne    40001619 <_handle_rpc+0x5b>
            color = nchar;
400015e9:	8b 45 0c             	mov    0xc(%ebp),%eax
400015ec:	8b 04 85 40 40 00 40 	mov    0x40004040(,%eax,4),%eax
400015f3:	85 c0                	test   %eax,%eax
400015f5:	74 22                	je     40001619 <_handle_rpc+0x5b>
            continue;
400015f7:	8b 45 0c             	mov    0xc(%ebp),%eax
400015fa:	8b 04 85 40 40 00 40 	mov    0x40004040(,%eax,4),%eax
40001601:	83 ec 0c             	sub    $0xc,%esp
40001604:	ff 75 0c             	pushl  0xc(%ebp)
40001607:	ff d0                	call   *%eax
40001609:	83 c4 10             	add    $0x10,%esp
        }
4000160c:	83 ec 0c             	sub    $0xc,%esp
4000160f:	6a 00                	push   $0x0
40001611:	e8 72 fe ff ff       	call   40001488 <return_rpc>
40001616:	83 c4 10             	add    $0x10,%esp

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
40001619:	83 ec 0c             	sub    $0xc,%esp
4000161c:	68 30 31 00 40       	push   $0x40003130
40001621:	e8 c1 f3 ff ff       	call   400009e7 <printf>
40001626:	83 c4 10             	add    $0x10,%esp
                x = 79;
            }
40001629:	83 ec 0c             	sub    $0xc,%esp
4000162c:	ff 75 f4             	pushl  -0xc(%ebp)
4000162f:	e8 d0 fc ff ff       	call   40001304 <free>
40001634:	83 c4 10             	add    $0x10,%esp
            else
40001637:	83 ec 0c             	sub    $0xc,%esp
4000163a:	6a 00                	push   $0x0
4000163c:	e8 47 fe ff ff       	call   40001488 <return_rpc>
40001641:	83 c4 10             	add    $0x10,%esp
            {
40001644:	c9                   	leave  
40001645:	c3                   	ret    

40001646 <set_rpc_handler>:
                x--;
            }
40001646:	55                   	push   %ebp
40001647:	89 e5                	mov    %esp,%ebp
40001649:	57                   	push   %edi
4000164a:	56                   	push   %esi
4000164b:	53                   	push   %ebx
4000164c:	83 ec 2c             	sub    $0x2c,%esp
            ochar = ' ';
4000164f:	83 ec 04             	sub    $0x4,%esp
40001652:	68 00 02 00 00       	push   $0x200
40001657:	6a 00                	push   $0x0
40001659:	68 40 40 00 40       	push   $0x40004040
4000165e:	e8 01 f5 ff ff       	call   40000b64 <memset>
40001663:	83 c4 10             	add    $0x10,%esp

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;
40001666:	8d 55 d0             	lea    -0x30(%ebp),%edx
40001669:	bb 2c 32 00 40       	mov    $0x4000322c,%ebx
4000166e:	b8 06 00 00 00       	mov    $0x6,%eax
40001673:	89 d7                	mov    %edx,%edi
40001675:	89 de                	mov    %ebx,%esi
40001677:	89 c1                	mov    %eax,%ecx
40001679:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

        color = 0x09;
4000167b:	83 ec 0c             	sub    $0xc,%esp
4000167e:	8d 45 d0             	lea    -0x30(%ebp),%eax
40001681:	50                   	push   %eax
40001682:	e8 89 fd ff ff       	call   40001410 <syscall>
40001687:	83 c4 10             	add    $0x10,%esp

4000168a:	8d 65 f4             	lea    -0xc(%ebp),%esp
4000168d:	83 c4 00             	add    $0x0,%esp
40001690:	5b                   	pop    %ebx
40001691:	5e                   	pop    %esi
40001692:	5f                   	pop    %edi
40001693:	5d                   	pop    %ebp
40001694:	c3                   	ret    

40001695 <getargs>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"

#define CMD_SET    0
40001695:	55                   	push   %ebp
40001696:	89 e5                	mov    %esp,%ebp
40001698:	83 ec 28             	sub    $0x28,%esp

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
4000169b:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
400016a2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400016a9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400016b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400016b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400016be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

static int  x     = 0;
400016c5:	83 ec 0c             	sub    $0xc,%esp
400016c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400016cb:	50                   	push   %eax
400016cc:	e8 3f fd ff ff       	call   40001410 <syscall>
400016d1:	83 c4 10             	add    $0x10,%esp
static int  y     = 0;
static char color = 0x09;
400016d4:	8b 45 e0             	mov    -0x20(%ebp),%eax

400016d7:	c9                   	leave  
400016d8:	c3                   	ret    

400016d9 <_start>:
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

400016d9:	55                   	push   %ebp
400016da:	89 e5                	mov    %esp,%ebp
400016dc:	83 ec 18             	sub    $0x18,%esp
HANDLE vgaController;
400016df:	e8 b1 ff ff ff       	call   40001695 <getargs>
400016e4:	89 45 ec             	mov    %eax,-0x14(%ebp)

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
400016e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    vgac.command = c;
    vgac.offset = o;
400016ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
400016f2:	74 14                	je     40001708 <_start+0x2f>
    vgac.value = v;
400016f4:	eb 03                	jmp    400016f9 <_start+0x20>

400016f6:	ff 45 f0             	incl   -0x10(%ebp)
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400016f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
400016fc:	c1 e0 02             	shl    $0x2,%eax
400016ff:	03 45 ec             	add    -0x14(%ebp),%eax
40001702:	8b 00                	mov    (%eax),%eax
40001704:	85 c0                	test   %eax,%eax
40001706:	75 ee                	jne    400016f6 <_start+0x1d>

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
40001708:	e8 39 ff ff ff       	call   40001646 <set_rpc_handler>
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
4000170d:	83 ec 08             	sub    $0x8,%esp
40001710:	ff 75 ec             	pushl  -0x14(%ebp)
40001713:	ff 75 f0             	pushl  -0x10(%ebp)
40001716:	e8 35 e9 ff ff       	call   40000050 <main>
4000171b:	83 c4 10             	add    $0x10,%esp
4000171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

40001721:	83 ec 0c             	sub    $0xc,%esp
40001724:	ff 75 f4             	pushl  -0xc(%ebp)
40001727:	e8 46 00 00 00       	call   40001772 <exit>
4000172c:	83 c4 10             	add    $0x10,%esp
    printf("vgaController: %x\n", vgaController);
4000172f:	c9                   	leave  
40001730:	c3                   	ret    

40001731 <yield>:
    printf("fifoInpt: %x\n", fifoInpt);

40001731:	55                   	push   %ebp
40001732:	89 e5                	mov    %esp,%ebp
40001734:	83 ec 28             	sub    $0x28,%esp
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40001737:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
4000173e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001745:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000174c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001753:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000175a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40001761:	83 ec 0c             	sub    $0xc,%esp
40001764:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001767:	50                   	push   %eax
40001768:	e8 a3 fc ff ff       	call   40001410 <syscall>
4000176d:	83 c4 10             	add    $0x10,%esp
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

40001770:	c9                   	leave  
40001771:	c3                   	ret    

40001772 <exit>:
    char nchar = '\0';
    char ochar = '\0';
40001772:	55                   	push   %ebp
40001773:	89 e5                	mov    %esp,%ebp
40001775:	83 ec 28             	sub    $0x28,%esp
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
40001778:	8b 45 08             	mov    0x8(%ebp),%eax
4000177b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40001782:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001785:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000178c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001793:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000179a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        }

400017a1:	83 ec 0c             	sub    $0xc,%esp
400017a4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400017a7:	50                   	push   %eax
400017a8:	e8 63 fc ff ff       	call   40001410 <syscall>
400017ad:	83 c4 10             	add    $0x10,%esp
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
400017b0:	83 ec 0c             	sub    $0xc,%esp
400017b3:	68 40 31 00 40       	push   $0x40003140
400017b8:	e8 2a f2 ff ff       	call   400009e7 <printf>
400017bd:	83 c4 10             	add    $0x10,%esp
        }
400017c0:	eb ee                	jmp    400017b0 <exit+0x3e>

400017c2 <getExecPath>:

        if (nchar == '\n') {
            color = 0x09;
400017c2:	55                   	push   %ebp
400017c3:	89 e5                	mov    %esp,%ebp
400017c5:	83 ec 28             	sub    $0x28,%esp
            continue;
        }

400017c8:	8b 45 08             	mov    0x8(%ebp),%eax
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }
400017cb:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400017d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400017d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400017dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400017e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400017ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        if(nchar == 8) { //8 = BACKSPACE
400017f1:	83 ec 0c             	sub    $0xc,%esp
400017f4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400017f7:	50                   	push   %eax
400017f8:	e8 13 fc ff ff       	call   40001410 <syscall>
400017fd:	83 c4 10             	add    $0x10,%esp
            if(x == 0) {
40001800:	c9                   	leave  
40001801:	c3                   	ret    

40001802 <changeExecPath>:
                y--;
                x = 79;
40001802:	55                   	push   %ebp
40001803:	89 e5                	mov    %esp,%ebp
40001805:	83 ec 28             	sub    $0x28,%esp
            }
            else
            {
40001808:	8b 45 08             	mov    0x8(%ebp),%eax
                x--;
            }
            ochar = ' ';
            nchar = 0;
            color = 0x09;
4000180b:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
40001812:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001815:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000181c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001823:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000182a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        }

40001831:	83 ec 0c             	sub    $0xc,%esp
40001834:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001837:	50                   	push   %eax
40001838:	e8 d3 fb ff ff       	call   40001410 <syscall>
4000183d:	83 c4 10             	add    $0x10,%esp
        uint16_t send = 0;
        char* sndChr = (char*) &send;
40001840:	8b 45 e0             	mov    -0x20(%ebp),%eax

40001843:	c9                   	leave  
40001844:	c3                   	ret    

40001845 <cd>:
        sndChr[0] = ochar;
        sndChr[1] = color;
40001845:	55                   	push   %ebp
40001846:	89 e5                	mov    %esp,%ebp
40001848:	83 ec 08             	sub    $0x8,%esp

4000184b:	83 ec 0c             	sub    $0xc,%esp
4000184e:	ff 75 08             	pushl  0x8(%ebp)
40001851:	e8 ac ff ff ff       	call   40001802 <changeExecPath>
40001856:	83 c4 10             	add    $0x10,%esp
40001859:	85 c0                	test   %eax,%eax
4000185b:	75 14                	jne    40001871 <cd+0x2c>
4000185d:	e8 4e ea ff ff       	call   400002b0 <getLastVFSErr>
40001862:	83 ec 08             	sub    $0x8,%esp
40001865:	50                   	push   %eax
40001866:	ff 75 08             	pushl  0x8(%ebp)
40001869:	e8 80 00 00 00       	call   400018ee <printFilesystemError>
4000186e:	83 c4 10             	add    $0x10,%esp
        color = 0x09;
40001871:	c9                   	leave  
40001872:	c3                   	ret    

40001873 <exec>:

        sendCommand(CMD_SET, x + y * 80, send);
40001873:	55                   	push   %ebp
40001874:	89 e5                	mov    %esp,%ebp
40001876:	83 ec 28             	sub    $0x28,%esp

        if(nchar != 0) {
            x++;
40001879:	8b 55 08             	mov    0x8(%ebp),%edx
        }
4000187c:	8b 45 0c             	mov    0xc(%ebp),%eax
    }

    return 0;
}
4000187f:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40001886:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40001889:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000188c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001893:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000189a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400018a1:	83 ec 0c             	sub    $0xc,%esp
400018a4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400018a7:	50                   	push   %eax
400018a8:	e8 63 fb ff ff       	call   40001410 <syscall>
400018ad:	83 c4 10             	add    $0x10,%esp
400018b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
400018b3:	c9                   	leave  
400018b4:	c3                   	ret    

400018b5 <texec>:
400018b5:	55                   	push   %ebp
400018b6:	89 e5                	mov    %esp,%ebp
400018b8:	83 ec 18             	sub    $0x18,%esp
400018bb:	83 ec 08             	sub    $0x8,%esp
400018be:	ff 75 0c             	pushl  0xc(%ebp)
400018c1:	ff 75 08             	pushl  0x8(%ebp)
400018c4:	e8 aa ff ff ff       	call   40001873 <exec>
400018c9:	83 c4 10             	add    $0x10,%esp
400018cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
400018cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400018d3:	75 14                	jne    400018e9 <texec+0x34>
400018d5:	e8 d6 e9 ff ff       	call   400002b0 <getLastVFSErr>
400018da:	83 ec 08             	sub    $0x8,%esp
400018dd:	50                   	push   %eax
400018de:	ff 75 08             	pushl  0x8(%ebp)
400018e1:	e8 08 00 00 00       	call   400018ee <printFilesystemError>
400018e6:	83 c4 10             	add    $0x10,%esp
400018e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
400018ec:	c9                   	leave  
400018ed:	c3                   	ret    

400018ee <printFilesystemError>:
400018ee:	55                   	push   %ebp
400018ef:	89 e5                	mov    %esp,%ebp
400018f1:	83 ec 08             	sub    $0x8,%esp
400018f4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
400018f8:	0f 87 8c 00 00 00    	ja     4000198a <printFilesystemError+0x9c>
400018fe:	8b 45 0c             	mov    0xc(%ebp),%eax
40001901:	c1 e0 02             	shl    $0x2,%eax
40001904:	8b 80 14 32 00 40    	mov    0x40003214(%eax),%eax
4000190a:	ff e0                	jmp    *%eax
4000190c:	83 ec 08             	sub    $0x8,%esp
4000190f:	ff 75 08             	pushl  0x8(%ebp)
40001912:	68 47 31 00 40       	push   $0x40003147
40001917:	e8 cb f0 ff ff       	call   400009e7 <printf>
4000191c:	83 c4 10             	add    $0x10,%esp
4000191f:	eb 7c                	jmp    4000199d <printFilesystemError+0xaf>
40001921:	83 ec 08             	sub    $0x8,%esp
40001924:	ff 75 08             	pushl  0x8(%ebp)
40001927:	68 5c 31 00 40       	push   $0x4000315c
4000192c:	e8 b6 f0 ff ff       	call   400009e7 <printf>
40001931:	83 c4 10             	add    $0x10,%esp
40001934:	eb 67                	jmp    4000199d <printFilesystemError+0xaf>
40001936:	83 ec 08             	sub    $0x8,%esp
40001939:	ff 75 08             	pushl  0x8(%ebp)
4000193c:	68 7c 31 00 40       	push   $0x4000317c
40001941:	e8 a1 f0 ff ff       	call   400009e7 <printf>
40001946:	83 c4 10             	add    $0x10,%esp
40001949:	eb 52                	jmp    4000199d <printFilesystemError+0xaf>
4000194b:	83 ec 08             	sub    $0x8,%esp
4000194e:	ff 75 08             	pushl  0x8(%ebp)
40001951:	68 a6 31 00 40       	push   $0x400031a6
40001956:	e8 8c f0 ff ff       	call   400009e7 <printf>
4000195b:	83 c4 10             	add    $0x10,%esp
4000195e:	eb 3d                	jmp    4000199d <printFilesystemError+0xaf>
40001960:	83 ec 08             	sub    $0x8,%esp
40001963:	ff 75 08             	pushl  0x8(%ebp)
40001966:	68 bc 31 00 40       	push   $0x400031bc
4000196b:	e8 77 f0 ff ff       	call   400009e7 <printf>
40001970:	83 c4 10             	add    $0x10,%esp
40001973:	eb 28                	jmp    4000199d <printFilesystemError+0xaf>
40001975:	83 ec 08             	sub    $0x8,%esp
40001978:	ff 75 08             	pushl  0x8(%ebp)
4000197b:	68 f7 31 00 40       	push   $0x400031f7
40001980:	e8 62 f0 ff ff       	call   400009e7 <printf>
40001985:	83 c4 10             	add    $0x10,%esp
40001988:	eb 13                	jmp    4000199d <printFilesystemError+0xaf>
4000198a:	83 ec 08             	sub    $0x8,%esp
4000198d:	ff 75 08             	pushl  0x8(%ebp)
40001990:	68 0a 32 00 40       	push   $0x4000320a
40001995:	e8 4d f0 ff ff       	call   400009e7 <printf>
4000199a:	83 c4 10             	add    $0x10,%esp
4000199d:	83 ec 0c             	sub    $0xc,%esp
400019a0:	68 12 32 00 40       	push   $0x40003212
400019a5:	e8 3d f0 ff ff       	call   400009e7 <printf>
400019aa:	83 c4 10             	add    $0x10,%esp
400019ad:	c9                   	leave  
400019ae:	c3                   	ret    
