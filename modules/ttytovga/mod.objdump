
../../initrfs/ibin/ttytovga:     file format elf32-i386
../../initrfs/ibin/ttytovga
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400005f7

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000013d0 memsz 0x000013d0 flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x00001236 memsz 0x00002228 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d0  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       000000ac  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  400030ac  400030ac  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000228  40004000  40004000  00004236  2**2
                  ALLOC
  5 .stab         00004adc  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008d14  2**0
                  CONTENTS, READONLY
  7 .stabstr      0000196f  00000000  00000000  00008d92  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
400030ac l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ttytovga.c
40004008 l     O .bss	00000004 x
4000400c l     O .bss	00000004 y
40002000 l     O .data	00000001 color
00000000 l    df *ABS*	00000000 process.c
40004010 l     O .bss	00000200 irq_handlers
40003094 l     O .rodata	00000018 C.7.1012
40000669 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
4000072c l     F .text	00000047 resolveHandle
40000bdc l     F .text	0000004a printrwerror
40000a29 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
400010d0 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
400003ed g     F .text	0000003d getExecPath
40000ae0 g     F .text	00000014 putchar
40000e8d g     F .text	00000033 strcpy
40000470 g     F .text	0000003e yield
40000af4 g     F .text	000000e8 printf
40001380 g     F .text	00000050 syscall
40000cf1 g     F .text	00000042 fgets
40000ce5 g     F .text	0000000c getc
40000dbc g     F .text	00000026 memcpy
40000a17 g     F .text	00000012 puts
400004ae g     F .text	0000003d pexists
40001139 g     F .text	000000f8 malloc
40000543 g     F .text	0000003d fetch_rpc_data
40000ec0 g     F .text	000000a5 strtoknc
40000383 g     F .text	0000003d changeExecPath
40004220 g     O .bss	00000004 first_free
40000000 g     F .text	00000050 sendCommand
400008c6 g     F .text	00000012 setstdout
40001291 g     F .text	00000034 calloc
40004000 g     O .bss	00000006 vgac
40001343 g     F .text	0000003d vmm_alloc_cont
40000311 g     F .text	0000003c exec
400005f7 g     F .text	00000072 _start
40001231 g     F .text	00000060 realloc
400005ba g     F .text	0000003d set_rpc_handler
40000f9e g     F .text	00000052 strtok
40000de2 g     F .text	00000047 memcmp
40000c26 g     F .text	00000085 fread
40004218 g     O .bss	00000004 first_unused
4000082a g     F .text	0000003c fopen
40000da0 g     F .text	0000001c memset
40000050 g     F .text	0000024f main
400007ed g     F .text	0000003d fclose
40000cd6 g     F .text	0000000f getchar
40000d33 g     F .text	0000006c getln
40004214 g     O .bss	00000004 fr
400007b0 g     F .text	0000003d favailable
40000acd g     F .text	00000013 putc
40000e29 g     F .text	00000049 strcmp
40004224 g     O .bss	00000004 vgaController
40000cab g     F .text	0000002b fgetc
40004210 g     O .bss	00000004 sp
400003c0 g     F .text	0000002d cd
4000421c g     O .bss	00000004 first_used
40000a68 g     F .text	00000065 fputc
40000916 g     F .text	00000093 fwrite
400008b4 g     F .text	00000012 setstdin
4000034d g     F .text	00000036 texec
40000f65 g     F .text	00000039 strclone
4000042a g     F .text	00000046 exit
400004eb g     F .text	00000058 register_irq_handler
40000866 g     F .text	0000003c fopenpmhandle
40001306 g     F .text	0000003d vmm_free
400002a0 g     F .text	00000071 printFilesystemError
40000e72 g     F .text	0000001b strlen
400008d8 g     F .text	0000003e getLastVFSErr
400009a9 g     F .text	0000006e fputs
40000773 g     F .text	0000003d fmkfifo
40000580 g     F .text	0000003a call_rpc
400008a2 g     F .text	00000012 setstderr
400012c8 g     F .text	0000003e print_memstat
40000ff0 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <sendCommand>:

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 18             	sub    $0x18,%esp
40000006:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000009:	8b 55 0c             	mov    0xc(%ebp),%edx
4000000c:	8b 45 10             	mov    0x10(%ebp),%eax
4000000f:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
40000013:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
40000017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    vgac.command = c;
4000001b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000001e:	66 a3 00 40 00 40    	mov    %ax,0x40004000
    vgac.offset = o;
40000024:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000027:	66 a3 02 40 00 40    	mov    %ax,0x40004002
    vgac.value = v;
4000002d:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000030:	66 a3 04 40 00 40    	mov    %ax,0x40004004

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000036:	a1 24 42 00 40       	mov    0x40004224,%eax
4000003b:	83 ec 04             	sub    $0x4,%esp
4000003e:	6a 06                	push   $0x6
40000040:	68 00 40 00 40       	push   $0x40004000
40000045:	50                   	push   %eax
40000046:	e8 cb 08 00 00       	call   40000916 <fwrite>
4000004b:	83 c4 10             	add    $0x10,%esp
}
4000004e:	c9                   	leave  
4000004f:	c3                   	ret    

40000050 <main>:

int main(int argc, char* args[])
{
40000050:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000054:	83 e4 f0             	and    $0xfffffff0,%esp
40000057:	ff 71 fc             	pushl  -0x4(%ecx)
4000005a:	55                   	push   %ebp
4000005b:	89 e5                	mov    %esp,%ebp
4000005d:	51                   	push   %ecx
4000005e:	83 ec 24             	sub    $0x24,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000061:	83 ec 08             	sub    $0x8,%esp
40000064:	6a 02                	push   $0x2
40000066:	68 00 30 00 40       	push   $0x40003000
4000006b:	e8 ba 07 00 00       	call   4000082a <fopen>
40000070:	83 c4 10             	add    $0x10,%esp
40000073:	a3 24 42 00 40       	mov    %eax,0x40004224
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000078:	83 ec 0c             	sub    $0xc,%esp
4000007b:	68 09 30 00 40       	push   $0x40003009
40000080:	e8 ee 06 00 00       	call   40000773 <fmkfifo>
40000085:	83 c4 10             	add    $0x10,%esp
40000088:	89 45 e8             	mov    %eax,-0x18(%ebp)

    printf("vgaController: %x\n", vgaController);
4000008b:	a1 24 42 00 40       	mov    0x40004224,%eax
40000090:	83 ec 08             	sub    $0x8,%esp
40000093:	50                   	push   %eax
40000094:	68 13 30 00 40       	push   $0x40003013
40000099:	e8 56 0a 00 00       	call   40000af4 <printf>
4000009e:	83 c4 10             	add    $0x10,%esp
    printf("fifoInpt: %x\n", fifoInpt);
400000a1:	83 ec 08             	sub    $0x8,%esp
400000a4:	ff 75 e8             	pushl  -0x18(%ebp)
400000a7:	68 26 30 00 40       	push   $0x40003026
400000ac:	e8 43 0a 00 00       	call   40000af4 <printf>
400000b1:	83 c4 10             	add    $0x10,%esp

    setstdout("/dev/tty0");
400000b4:	83 ec 0c             	sub    $0xc,%esp
400000b7:	68 09 30 00 40       	push   $0x40003009
400000bc:	e8 05 08 00 00       	call   400008c6 <setstdout>
400000c1:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
400000c4:	83 ec 0c             	sub    $0xc,%esp
400000c7:	68 09 30 00 40       	push   $0x40003009
400000cc:	e8 d1 07 00 00       	call   400008a2 <setstderr>
400000d1:	83 c4 10             	add    $0x10,%esp

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
400000d4:	83 ec 0c             	sub    $0xc,%esp
400000d7:	68 34 30 00 40       	push   $0x40003034
400000dc:	e8 13 0a 00 00       	call   40000af4 <printf>
400000e1:	83 c4 10             	add    $0x10,%esp

    sendCommand(CMD_CLEAR, 0, 0);
400000e4:	83 ec 04             	sub    $0x4,%esp
400000e7:	6a 00                	push   $0x0
400000e9:	6a 00                	push   $0x0
400000eb:	6a 01                	push   $0x1
400000ed:	e8 0e ff ff ff       	call   40000000 <sendCommand>
400000f2:	83 c4 10             	add    $0x10,%esp

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
400000f5:	83 ec 08             	sub    $0x8,%esp
400000f8:	6a 02                	push   $0x2
400000fa:	68 6c 30 00 40       	push   $0x4000306c
400000ff:	e8 26 07 00 00       	call   4000082a <fopen>
40000104:	83 c4 10             	add    $0x10,%esp
40000107:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000010a:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
4000010e:	83 ec 04             	sub    $0x4,%esp
40000111:	6a 01                	push   $0x1
40000113:	8d 45 e7             	lea    -0x19(%ebp),%eax
40000116:	50                   	push   %eax
40000117:	ff 75 ec             	pushl  -0x14(%ebp)
4000011a:	e8 f7 07 00 00       	call   40000916 <fwrite>
4000011f:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
40000122:	83 ec 0c             	sub    $0xc,%esp
40000125:	ff 75 ec             	pushl  -0x14(%ebp)
40000128:	e8 c0 06 00 00       	call   400007ed <fclose>
4000012d:	83 c4 10             	add    $0x10,%esp

    char nchar = '\0';
40000130:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
    char ochar = '\0';
40000134:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
40000138:	eb 01                	jmp    4000013b <main+0xeb>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
4000013a:	90                   	nop    

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
4000013b:	83 ec 04             	sub    $0x4,%esp
4000013e:	6a 01                	push   $0x1
40000140:	8d 45 e6             	lea    -0x1a(%ebp),%eax
40000143:	50                   	push   %eax
40000144:	ff 75 e8             	pushl  -0x18(%ebp)
40000147:	e8 da 0a 00 00       	call   40000c26 <fread>
4000014c:	83 c4 10             	add    $0x10,%esp
        ochar = nchar;
4000014f:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000152:	88 45 f3             	mov    %al,-0xd(%ebp)

        if ((nchar == '\n') || (x > 79)) {
40000155:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000158:	3c 0a                	cmp    $0xa,%al
4000015a:	74 0a                	je     40000166 <main+0x116>
4000015c:	a1 08 40 00 40       	mov    0x40004008,%eax
40000161:	83 f8 4f             	cmp    $0x4f,%eax
40000164:	7e 15                	jle    4000017b <main+0x12b>
            x = 0;
40000166:	c7 05 08 40 00 40 00 	movl   $0x0,0x40004008
4000016d:	00 00 00 
            y++;
40000170:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000175:	40                   	inc    %eax
40000176:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (y > 24) {
4000017b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000180:	83 f8 18             	cmp    $0x18,%eax
40000183:	7e 1c                	jle    400001a1 <main+0x151>
            sendCommand(CMD_SCROLL, 0, 0);
40000185:	83 ec 04             	sub    $0x4,%esp
40000188:	6a 00                	push   $0x0
4000018a:	6a 00                	push   $0x0
4000018c:	6a 02                	push   $0x2
4000018e:	e8 6d fe ff ff       	call   40000000 <sendCommand>
40000193:	83 c4 10             	add    $0x10,%esp
            y--;
40000196:	a1 0c 40 00 40       	mov    0x4000400c,%eax
4000019b:	48                   	dec    %eax
4000019c:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (nchar == '\n') {
400001a1:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001a4:	3c 0a                	cmp    $0xa,%al
400001a6:	75 0c                	jne    400001b4 <main+0x164>
            color = 0x09;
400001a8:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
            continue;
400001af:	e9 e6 00 00 00       	jmp    4000029a <main+0x24a>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
400001b4:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001b7:	3c 11                	cmp    $0x11,%al
400001b9:	75 21                	jne    400001dc <main+0x18c>
            fread(fifoInpt, &nchar, sizeof(char));
400001bb:	83 ec 04             	sub    $0x4,%esp
400001be:	6a 01                	push   $0x1
400001c0:	8d 45 e6             	lea    -0x1a(%ebp),%eax
400001c3:	50                   	push   %eax
400001c4:	ff 75 e8             	pushl  -0x18(%ebp)
400001c7:	e8 5a 0a 00 00       	call   40000c26 <fread>
400001cc:	83 c4 10             	add    $0x10,%esp
            color = nchar;
400001cf:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001d2:	a2 00 20 00 40       	mov    %al,0x40002000
            continue;
400001d7:	e9 be 00 00 00       	jmp    4000029a <main+0x24a>
        }

        if(nchar == 8) { //8 = BACKSPACE
400001dc:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001df:	3c 08                	cmp    $0x8,%al
400001e1:	75 3a                	jne    4000021d <main+0x1cd>
            if(x == 0) {
400001e3:	a1 08 40 00 40       	mov    0x40004008,%eax
400001e8:	85 c0                	test   %eax,%eax
400001ea:	75 17                	jne    40000203 <main+0x1b3>
                y--;
400001ec:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001f1:	48                   	dec    %eax
400001f2:	a3 0c 40 00 40       	mov    %eax,0x4000400c
                x = 79;
400001f7:	c7 05 08 40 00 40 4f 	movl   $0x4f,0x40004008
400001fe:	00 00 00 
40000201:	eb 0b                	jmp    4000020e <main+0x1be>
            }
            else
            {
                x--;
40000203:	a1 08 40 00 40       	mov    0x40004008,%eax
40000208:	48                   	dec    %eax
40000209:	a3 08 40 00 40       	mov    %eax,0x40004008
            }
            ochar = ' ';
4000020e:	c6 45 f3 20          	movb   $0x20,-0xd(%ebp)
            nchar = 0;
40000212:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
            color = 0x09;
40000216:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
        }

        uint16_t send = 0;
4000021d:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
        char* sndChr = (char*) &send;
40000223:	8d 45 e4             	lea    -0x1c(%ebp),%eax
40000226:	89 45 f4             	mov    %eax,-0xc(%ebp)

        sndChr[0] = ochar;
40000229:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000022c:	8a 55 f3             	mov    -0xd(%ebp),%dl
4000022f:	88 10                	mov    %dl,(%eax)
        sndChr[1] = color;
40000231:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000234:	8d 50 01             	lea    0x1(%eax),%edx
40000237:	a0 00 20 00 40       	mov    0x40002000,%al
4000023c:	88 02                	mov    %al,(%edx)

        color = 0x09;
4000023e:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000

        sendCommand(CMD_SET, x + y * 80, send);
40000245:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000248:	89 c1                	mov    %eax,%ecx
4000024a:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
40000250:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000255:	89 c2                	mov    %eax,%edx
40000257:	89 d0                	mov    %edx,%eax
40000259:	c1 e0 02             	shl    $0x2,%eax
4000025c:	01 d0                	add    %edx,%eax
4000025e:	c1 e0 04             	shl    $0x4,%eax
40000261:	89 c2                	mov    %eax,%edx
40000263:	a1 08 40 00 40       	mov    0x40004008,%eax
40000268:	8d 04 02             	lea    (%edx,%eax,1),%eax
4000026b:	25 ff ff 00 00       	and    $0xffff,%eax
40000270:	83 ec 04             	sub    $0x4,%esp
40000273:	51                   	push   %ecx
40000274:	50                   	push   %eax
40000275:	6a 00                	push   $0x0
40000277:	e8 84 fd ff ff       	call   40000000 <sendCommand>
4000027c:	83 c4 10             	add    $0x10,%esp

        if(nchar != 0) {
4000027f:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000282:	84 c0                	test   %al,%al
40000284:	0f 84 b0 fe ff ff    	je     4000013a <main+0xea>
            x++;
4000028a:	a1 08 40 00 40       	mov    0x40004008,%eax
4000028f:	40                   	inc    %eax
40000290:	a3 08 40 00 40       	mov    %eax,0x40004008
        }
    }
40000295:	e9 a1 fe ff ff       	jmp    4000013b <main+0xeb>
4000029a:	e9 9c fe ff ff       	jmp    4000013b <main+0xeb>
	...

400002a0 <printFilesystemError>:
400002a0:	55                   	push   %ebp
400002a1:	89 e5                	mov    %esp,%ebp
400002a3:	83 ec 08             	sub    $0x8,%esp
400002a6:	8b 55 0c             	mov    0xc(%ebp),%edx
400002a9:	8b 45 08             	mov    0x8(%ebp),%eax
400002ac:	83 fa 05             	cmp    $0x5,%edx
400002af:	77 43                	ja     400002f4 <printFilesystemError+0x54>
400002b1:	ff 24 95 7c 30 00 40 	jmp    *0x4000307c(,%edx,4)
400002b8:	52                   	push   %edx
400002b9:	52                   	push   %edx
400002ba:	50                   	push   %eax
400002bb:	68 ac 30 00 40       	push   $0x400030ac
400002c0:	eb 3a                	jmp    400002fc <printFilesystemError+0x5c>
400002c2:	51                   	push   %ecx
400002c3:	51                   	push   %ecx
400002c4:	50                   	push   %eax
400002c5:	68 be 30 00 40       	push   $0x400030be
400002ca:	eb 30                	jmp    400002fc <printFilesystemError+0x5c>
400002cc:	52                   	push   %edx
400002cd:	52                   	push   %edx
400002ce:	50                   	push   %eax
400002cf:	68 dd 30 00 40       	push   $0x400030dd
400002d4:	eb 26                	jmp    400002fc <printFilesystemError+0x5c>
400002d6:	51                   	push   %ecx
400002d7:	51                   	push   %ecx
400002d8:	50                   	push   %eax
400002d9:	68 07 31 00 40       	push   $0x40003107
400002de:	eb 1c                	jmp    400002fc <printFilesystemError+0x5c>
400002e0:	52                   	push   %edx
400002e1:	52                   	push   %edx
400002e2:	50                   	push   %eax
400002e3:	68 1c 31 00 40       	push   $0x4000311c
400002e8:	eb 12                	jmp    400002fc <printFilesystemError+0x5c>
400002ea:	51                   	push   %ecx
400002eb:	51                   	push   %ecx
400002ec:	50                   	push   %eax
400002ed:	68 57 31 00 40       	push   $0x40003157
400002f2:	eb 08                	jmp    400002fc <printFilesystemError+0x5c>
400002f4:	52                   	push   %edx
400002f5:	52                   	push   %edx
400002f6:	50                   	push   %eax
400002f7:	68 6a 31 00 40       	push   $0x4000316a
400002fc:	e8 f3 07 00 00       	call   40000af4 <printf>
40000301:	c7 45 08 87 31 00 40 	movl   $0x40003187,0x8(%ebp)
40000308:	83 c4 10             	add    $0x10,%esp
4000030b:	c9                   	leave  
4000030c:	e9 e3 07 00 00       	jmp    40000af4 <printf>

40000311 <exec>:
40000311:	55                   	push   %ebp
40000312:	89 e5                	mov    %esp,%ebp
40000314:	83 ec 34             	sub    $0x34,%esp
40000317:	8b 45 08             	mov    0x8(%ebp),%eax
4000031a:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40000321:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000324:	8b 45 0c             	mov    0xc(%ebp),%eax
40000327:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000032a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000032d:	50                   	push   %eax
4000032e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000335:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000033c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000343:	e8 38 10 00 00       	call   40001380 <syscall>
40000348:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000034b:	c9                   	leave  
4000034c:	c3                   	ret    

4000034d <texec>:
4000034d:	55                   	push   %ebp
4000034e:	89 e5                	mov    %esp,%ebp
40000350:	56                   	push   %esi
40000351:	53                   	push   %ebx
40000352:	53                   	push   %ebx
40000353:	53                   	push   %ebx
40000354:	8b 75 08             	mov    0x8(%ebp),%esi
40000357:	ff 75 0c             	pushl  0xc(%ebp)
4000035a:	56                   	push   %esi
4000035b:	e8 b1 ff ff ff       	call   40000311 <exec>
40000360:	83 c4 10             	add    $0x10,%esp
40000363:	89 c3                	mov    %eax,%ebx
40000365:	85 c0                	test   %eax,%eax
40000367:	75 11                	jne    4000037a <texec+0x2d>
40000369:	e8 6a 05 00 00       	call   400008d8 <getLastVFSErr>
4000036e:	51                   	push   %ecx
4000036f:	51                   	push   %ecx
40000370:	50                   	push   %eax
40000371:	56                   	push   %esi
40000372:	e8 29 ff ff ff       	call   400002a0 <printFilesystemError>
40000377:	83 c4 10             	add    $0x10,%esp
4000037a:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000037d:	89 d8                	mov    %ebx,%eax
4000037f:	5b                   	pop    %ebx
40000380:	5e                   	pop    %esi
40000381:	5d                   	pop    %ebp
40000382:	c3                   	ret    

40000383 <changeExecPath>:
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
40000383:	55                   	push   %ebp
40000384:	89 e5                	mov    %esp,%ebp
40000386:	83 ec 34             	sub    $0x34,%esp

        if(nchar != 0) {
            x++;
        }
    }

40000389:	8b 45 08             	mov    0x8(%ebp),%eax
4000038c:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
40000393:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return 0;
}
40000396:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000399:	50                   	push   %eax

        if(nchar != 0) {
            x++;
        }
    }

4000039a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return 0;
}
400003b6:	e8 c5 0f 00 00       	call   40001380 <syscall>
400003bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003be:	c9                   	leave  
400003bf:	c3                   	ret    

400003c0 <cd>:
400003c0:	55                   	push   %ebp
400003c1:	89 e5                	mov    %esp,%ebp
400003c3:	53                   	push   %ebx
400003c4:	83 ec 10             	sub    $0x10,%esp
400003c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
400003ca:	53                   	push   %ebx
400003cb:	e8 b3 ff ff ff       	call   40000383 <changeExecPath>
400003d0:	83 c4 10             	add    $0x10,%esp
400003d3:	85 c0                	test   %eax,%eax
400003d5:	75 11                	jne    400003e8 <cd+0x28>
400003d7:	e8 fc 04 00 00       	call   400008d8 <getLastVFSErr>
400003dc:	52                   	push   %edx
400003dd:	52                   	push   %edx
400003de:	50                   	push   %eax
400003df:	53                   	push   %ebx
400003e0:	e8 bb fe ff ff       	call   400002a0 <printFilesystemError>
400003e5:	83 c4 10             	add    $0x10,%esp
400003e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400003eb:	c9                   	leave  
400003ec:	c3                   	ret    

400003ed <getExecPath>:
                y--;
                x = 79;
            }
            else
            {
                x--;
400003ed:	55                   	push   %ebp
400003ee:	89 e5                	mov    %esp,%ebp
400003f0:	83 ec 34             	sub    $0x34,%esp
            nchar = 0;
            color = 0x09;
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;
400003f3:	8b 45 08             	mov    0x8(%ebp),%eax
400003f6:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400003fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        sndChr[0] = ochar;
40000400:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000403:	50                   	push   %eax
            nchar = 0;
            color = 0x09;
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;
40000404:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000040b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000412:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000419:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        sndChr[0] = ochar;
40000420:	e8 5b 0f 00 00       	call   40001380 <syscall>
40000425:	83 c4 10             	add    $0x10,%esp
        sndChr[1] = color;
40000428:	c9                   	leave  
40000429:	c3                   	ret    

4000042a <exit>:
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
            color = 0x09;
4000042a:	55                   	push   %ebp
4000042b:	89 e5                	mov    %esp,%ebp
4000042d:	83 ec 34             	sub    $0x34,%esp

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }
40000430:	8b 45 08             	mov    0x8(%ebp),%eax
40000433:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
4000043a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(nchar == 8) { //8 = BACKSPACE
4000043d:	8d 45 e0             	lea    -0x20(%ebp),%eax

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }
40000440:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000447:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000044e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000455:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        if(nchar == 8) { //8 = BACKSPACE
4000045c:	50                   	push   %eax
4000045d:	e8 1e 0f 00 00       	call   40001380 <syscall>
            if(x == 0) {
                y--;
                x = 79;
40000462:	c7 04 24 72 31 00 40 	movl   $0x40003172,(%esp)
40000469:	e8 86 06 00 00       	call   40000af4 <printf>
4000046e:	eb f2                	jmp    40000462 <exit+0x38>

40000470 <yield>:
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000470:	55                   	push   %ebp
40000471:	89 e5                	mov    %esp,%ebp
40000473:	83 ec 34             	sub    $0x34,%esp
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000476:	8d 45 e0             	lea    -0x20(%ebp),%eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000479:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000480:	50                   	push   %eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000481:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000488:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000048f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000496:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000049d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004a4:	e8 d7 0e 00 00       	call   40001380 <syscall>
400004a9:	83 c4 10             	add    $0x10,%esp
            y--;
        }

400004ac:	c9                   	leave  
400004ad:	c3                   	ret    

400004ae <pexists>:
static int  x     = 0;
static int  y     = 0;
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

400004ae:	55                   	push   %ebp
400004af:	89 e5                	mov    %esp,%ebp
400004b1:	83 ec 34             	sub    $0x34,%esp
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400004b4:	8b 45 08             	mov    0x8(%ebp),%eax
400004b7:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400004be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

400004c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004c4:	50                   	push   %eax
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400004c5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}

400004e1:	e8 9a 0e 00 00       	call   40001380 <syscall>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
400004e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
400004e9:	c9                   	leave  
400004ea:	c3                   	ret    

400004eb <register_irq_handler>:
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004eb:	55                   	push   %ebp
400004ec:	89 e5                	mov    %esp,%ebp
400004ee:	53                   	push   %ebx
400004ef:	83 ec 30             	sub    $0x30,%esp
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

400004f2:	8d 45 e0             	lea    -0x20(%ebp),%eax
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

400004f8:	50                   	push   %eax

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
400004f9:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40000500:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000503:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000050a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000511:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000518:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        ochar = nchar;

4000051f:	e8 5c 0e 00 00       	call   40001380 <syscall>
        if ((nchar == '\n') || (x > 79)) {
            x = 0;
40000524:	83 c4 10             	add    $0x10,%esp
40000527:	31 c0                	xor    %eax,%eax
40000529:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000052d:	74 0f                	je     4000053e <register_irq_handler+0x53>
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }
4000052f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000532:	89 04 9d 10 40 00 40 	mov    %eax,0x40004010(,%ebx,4)
40000539:	b8 01 00 00 00       	mov    $0x1,%eax

        if (nchar == '\n') {
            color = 0x09;
            continue;
4000053e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000541:	c9                   	leave  
40000542:	c3                   	ret    

40000543 <fetch_rpc_data>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000543:	55                   	push   %ebp
40000544:	89 e5                	mov    %esp,%ebp
40000546:	83 ec 34             	sub    $0x34,%esp
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

40000549:	8b 45 08             	mov    0x8(%ebp),%eax
4000054c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40000553:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

40000556:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000559:	50                   	push   %eax
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

4000055a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000561:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000568:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000056f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

40000576:	e8 05 0e 00 00       	call   40001380 <syscall>
4000057b:	83 c4 10             	add    $0x10,%esp
    sendCommand(CMD_CLEAR, 0, 0);
4000057e:	c9                   	leave  
4000057f:	c3                   	ret    

40000580 <call_rpc>:
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;

40000580:	55                   	push   %ebp
40000581:	89 e5                	mov    %esp,%ebp
40000583:	83 ec 34             	sub    $0x34,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000586:	8b 45 08             	mov    0x8(%ebp),%eax
40000589:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40000590:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000593:	8b 45 0c             	mov    0xc(%ebp),%eax
40000596:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000599:	8b 45 10             	mov    0x10(%ebp),%eax
4000059c:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000059f:	8b 45 14             	mov    0x14(%ebp),%eax
400005a2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400005a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005a8:	50                   	push   %eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400005a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400005b0:	e8 cb 0d 00 00       	call   40001380 <syscall>
}

int main(int argc, char* args[])
400005b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005b8:	c9                   	leave  
400005b9:	c3                   	ret    

400005ba <set_rpc_handler>:
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
400005ba:	55                   	push   %ebp
400005bb:	89 e5                	mov    %esp,%ebp
400005bd:	57                   	push   %edi
400005be:	56                   	push   %esi
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
400005bf:	be 94 30 00 40       	mov    $0x40003094,%esi
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
400005c4:	83 ec 24             	sub    $0x24,%esp
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
400005c7:	8d 7d e0             	lea    -0x20(%ebp),%edi
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
            color = 0x09;
400005ca:	68 00 02 00 00       	push   $0x200
400005cf:	6a 00                	push   $0x0
400005d1:	68 10 40 00 40       	push   $0x40004010
400005d6:	e8 c5 07 00 00       	call   40000da0 <memset>
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
400005db:	b9 06 00 00 00       	mov    $0x6,%ecx

        sendCommand(CMD_SET, x + y * 80, send);
400005e0:	8d 45 e0             	lea    -0x20(%ebp),%eax
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;

        color = 0x09;
400005e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

        sendCommand(CMD_SET, x + y * 80, send);
400005e5:	89 04 24             	mov    %eax,(%esp)
400005e8:	e8 93 0d 00 00       	call   40001380 <syscall>
400005ed:	83 c4 10             	add    $0x10,%esp

400005f0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400005f3:	5e                   	pop    %esi
400005f4:	5f                   	pop    %edi
400005f5:	5d                   	pop    %ebp
400005f6:	c3                   	ret    

400005f7 <_start>:

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

400005f7:	55                   	push   %ebp
400005f8:	89 e5                	mov    %esp,%ebp
400005fa:	56                   	push   %esi
400005fb:	53                   	push   %ebx
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
400005fc:	31 db                	xor    %ebx,%ebx

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

400005fe:	83 ec 2c             	sub    $0x2c,%esp
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
40000601:	8d 45 e0             	lea    -0x20(%ebp),%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40000604:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000060b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

static int  x     = 0;
40000612:	50                   	push   %eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40000613:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000061a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000621:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000628:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

static int  x     = 0;
4000062f:	e8 4c 0d 00 00       	call   40001380 <syscall>
static int  y     = 0;
static char color = 0x09;
40000634:	8b 75 e0             	mov    -0x20(%ebp),%esi

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
40000637:	83 c4 10             	add    $0x10,%esp
4000063a:	85 f6                	test   %esi,%esi
4000063c:	75 05                	jne    40000643 <_start+0x4c>
4000063e:	89 f3                	mov    %esi,%ebx
40000640:	eb 07                	jmp    40000649 <_start+0x52>

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40000642:	43                   	inc    %ebx
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

40000643:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
40000647:	75 f9                	jne    40000642 <_start+0x4b>
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000649:	e8 6c ff ff ff       	call   400005ba <set_rpc_handler>
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
4000064e:	51                   	push   %ecx
4000064f:	51                   	push   %ecx
40000650:	56                   	push   %esi
40000651:	53                   	push   %ebx
40000652:	e8 f9 f9 ff ff       	call   40000050 <main>

    char nchar = '\0';
40000657:	89 04 24             	mov    %eax,(%esp)
4000065a:	e8 cb fd ff ff       	call   4000042a <exit>
4000065f:	83 c4 10             	add    $0x10,%esp
    char ochar = '\0';
40000662:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000665:	5b                   	pop    %ebx
40000666:	5e                   	pop    %esi
40000667:	5d                   	pop    %ebp
40000668:	c3                   	ret    

40000669 <_handle_rpc>:

        if (nchar == '\n') {
            color = 0x09;
            continue;
        }

40000669:	55                   	push   %ebp
4000066a:	89 e5                	mov    %esp,%ebp
4000066c:	56                   	push   %esi
4000066d:	53                   	push   %ebx
4000066e:	83 ec 2c             	sub    $0x2c,%esp
        if(nchar == 0x11) { //0x11 = SETCLR
40000671:	ff 75 10             	pushl  0x10(%ebp)

        if (nchar == '\n') {
            color = 0x09;
            continue;
        }

40000674:	8b 75 0c             	mov    0xc(%ebp),%esi
        if(nchar == 0x11) { //0x11 = SETCLR
40000677:	e8 bd 0a 00 00       	call   40001139 <malloc>
            fread(fifoInpt, &nchar, sizeof(char));
4000067c:	89 04 24             	mov    %eax,(%esp)
        if (nchar == '\n') {
            color = 0x09;
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
4000067f:	89 c3                	mov    %eax,%ebx
            fread(fifoInpt, &nchar, sizeof(char));
40000681:	e8 bd fe ff ff       	call   40000543 <fetch_rpc_data>
            color = nchar;
            continue;
40000686:	83 c4 10             	add    $0x10,%esp
40000689:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000068d:	75 4b                	jne    400006da <_handle_rpc+0x71>
        }
4000068f:	8b 04 b5 10 40 00 40 	mov    0x40004010(,%esi,4),%eax
40000696:	85 c0                	test   %eax,%eax
40000698:	74 40                	je     400006da <_handle_rpc+0x71>

4000069a:	83 ec 0c             	sub    $0xc,%esp
4000069d:	56                   	push   %esi
4000069e:	ff d0                	call   *%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
400006a0:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006a3:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    uint16_t value;
};
400006aa:	89 04 24             	mov    %eax,(%esp)
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400006b4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
400006d0:	e8 ab 0c 00 00       	call   40001380 <syscall>
400006d5:	83 c4 10             	add    $0x10,%esp
400006d8:	eb fe                	jmp    400006d8 <_handle_rpc+0x6f>

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
400006da:	83 ec 0c             	sub    $0xc,%esp
400006dd:	68 79 31 00 40       	push   $0x40003179
400006e2:	e8 0d 04 00 00       	call   40000af4 <printf>
            else
            {
400006e7:	89 1c 24             	mov    %ebx,(%esp)
400006ea:	e8 01 09 00 00       	call   40000ff0 <free>

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
400006ef:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006f2:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    uint16_t value;
};
400006f9:	89 04 24             	mov    %eax,(%esp)
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006fc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000703:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000070a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000711:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000718:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
4000071f:	e8 5c 0c 00 00       	call   40001380 <syscall>
40000724:	83 c4 10             	add    $0x10,%esp
40000727:	eb fe                	jmp    40000727 <_handle_rpc+0xbe>
40000729:	00 00                	add    %al,(%eax)
	...

4000072c <resolveHandle>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
4000072c:	55                   	push   %ebp
4000072d:	89 e5                	mov    %esp,%ebp
4000072f:	83 ec 28             	sub    $0x28,%esp
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000732:	3d fe 0f 00 00       	cmp    $0xffe,%eax
40000737:	77 38                	ja     40000771 <resolveHandle+0x45>
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000739:	83 ec 0c             	sub    $0xc,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
4000073c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
4000073f:	8d 45 e0             	lea    -0x20(%ebp),%eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000742:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000749:	50                   	push   %eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
4000074a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000751:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000758:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000075f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000766:	e8 15 0c 00 00       	call   40001380 <syscall>
}

4000076b:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000076e:	83 c4 10             	add    $0x10,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

40000771:	c9                   	leave  
40000772:	c3                   	ret    

40000773 <fmkfifo>:
40000773:	55                   	push   %ebp
40000774:	89 e5                	mov    %esp,%ebp
40000776:	83 ec 34             	sub    $0x34,%esp
40000779:	8b 45 08             	mov    0x8(%ebp),%eax
4000077c:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
40000783:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000786:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000789:	50                   	push   %eax
4000078a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000791:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000798:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000079f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400007a6:	e8 d5 0b 00 00       	call   40001380 <syscall>
400007ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007ae:	c9                   	leave  
400007af:	c3                   	ret    

400007b0 <favailable>:

    return 0;
}
400007b0:	55                   	push   %ebp
400007b1:	89 e5                	mov    %esp,%ebp
400007b3:	83 ec 34             	sub    $0x34,%esp
400007b6:	8b 45 08             	mov    0x8(%ebp),%eax
400007b9:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400007c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007c3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007c6:	50                   	push   %eax
400007c7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400007e3:	e8 98 0b 00 00       	call   40001380 <syscall>
400007e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007eb:	c9                   	leave  
400007ec:	c3                   	ret    

400007ed <fclose>:
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

        if(nchar == 8) { //8 = BACKSPACE
400007ed:	55                   	push   %ebp
400007ee:	89 e5                	mov    %esp,%ebp
400007f0:	83 ec 34             	sub    $0x34,%esp
                x = 79;
            }
            else
            {
                x--;
            }
400007f3:	8b 45 08             	mov    0x8(%ebp),%eax
400007f6:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400007fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            ochar = ' ';
            nchar = 0;
40000800:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000803:	50                   	push   %eax
                x = 79;
            }
            else
            {
                x--;
            }
40000804:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000080b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000812:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            ochar = ' ';
            nchar = 0;
40000820:	e8 5b 0b 00 00       	call   40001380 <syscall>
            color = 0x09;
        }

40000825:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000828:	c9                   	leave  
40000829:	c3                   	ret    

4000082a <fopen>:
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
4000082a:	55                   	push   %ebp
4000082b:	89 e5                	mov    %esp,%ebp
4000082d:	83 ec 34             	sub    $0x34,%esp

        if (nchar == '\n') {
            color = 0x09;
            continue;
        }

40000830:	8b 45 08             	mov    0x8(%ebp),%eax
40000833:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
4000083a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000083d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000840:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
40000843:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000846:	50                   	push   %eax

        if (nchar == '\n') {
            color = 0x09;
            continue;
        }

40000847:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000084e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000855:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
4000085c:	e8 1f 0b 00 00       	call   40001380 <syscall>
            color = nchar;
            continue;
        }
40000861:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000864:	c9                   	leave  
40000865:	c3                   	ret    

40000866 <fopenpmhandle>:
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000866:	55                   	push   %ebp
40000867:	89 e5                	mov    %esp,%ebp
40000869:	83 ec 34             	sub    $0x34,%esp
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

4000086c:	8b 45 08             	mov    0x8(%ebp),%eax
4000086f:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000876:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000879:	8b 45 0c             	mov    0xc(%ebp),%eax
4000087c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
4000087f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000882:	50                   	push   %eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000883:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000088a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000891:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000898:	e8 e3 0a 00 00       	call   40001380 <syscall>
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
4000089d:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008a0:	c9                   	leave  
400008a1:	c3                   	ret    

400008a2 <setstderr>:
            x = 0;
            y++;
        }

400008a2:	55                   	push   %ebp
400008a3:	89 e5                	mov    %esp,%ebp
400008a5:	83 ec 10             	sub    $0x10,%esp
400008a8:	ff 75 08             	pushl  0x8(%ebp)
400008ab:	6a 03                	push   $0x3
400008ad:	e8 b4 ff ff ff       	call   40000866 <fopenpmhandle>
400008b2:	c9                   	leave  
400008b3:	c3                   	ret    

400008b4 <setstdin>:
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }
400008b4:	55                   	push   %ebp
400008b5:	89 e5                	mov    %esp,%ebp
400008b7:	83 ec 10             	sub    $0x10,%esp
400008ba:	ff 75 08             	pushl  0x8(%ebp)
400008bd:	6a 02                	push   $0x2
400008bf:	e8 a2 ff ff ff       	call   40000866 <fopenpmhandle>
400008c4:	c9                   	leave  
400008c5:	c3                   	ret    

400008c6 <setstdout>:
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
400008c6:	55                   	push   %ebp
400008c7:	89 e5                	mov    %esp,%ebp
400008c9:	83 ec 10             	sub    $0x10,%esp
400008cc:	ff 75 08             	pushl  0x8(%ebp)
400008cf:	6a 01                	push   $0x1
400008d1:	e8 90 ff ff ff       	call   40000866 <fopenpmhandle>
400008d6:	c9                   	leave  
400008d7:	c3                   	ret    

400008d8 <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"
400008d8:	55                   	push   %ebp
400008d9:	89 e5                	mov    %esp,%ebp
400008db:	83 ec 34             	sub    $0x34,%esp

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
400008de:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400008e1:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    uint16_t value;
};
400008e8:	50                   	push   %eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400008e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400008f0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400008f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000905:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
4000090c:	e8 6f 0a 00 00       	call   40001380 <syscall>

static int  x     = 0;
static int  y     = 0;
40000911:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000914:	c9                   	leave  
40000915:	c3                   	ret    

40000916 <fwrite>:
40000916:	55                   	push   %ebp
40000917:	89 e5                	mov    %esp,%ebp
40000919:	57                   	push   %edi
4000091a:	56                   	push   %esi
4000091b:	53                   	push   %ebx
4000091c:	83 ec 3c             	sub    $0x3c,%esp
4000091f:	8b 45 08             	mov    0x8(%ebp),%eax
40000922:	8b 7d 10             	mov    0x10(%ebp),%edi
40000925:	e8 02 fe ff ff       	call   4000072c <resolveHandle>
4000092a:	83 ec 0c             	sub    $0xc,%esp
4000092d:	89 c6                	mov    %eax,%esi
4000092f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
40000932:	8b 45 0c             	mov    0xc(%ebp),%eax
40000935:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
4000093c:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000093f:	8d 45 d0             	lea    -0x30(%ebp),%eax
40000942:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000945:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
4000094c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000953:	50                   	push   %eax
40000954:	89 45 c4             	mov    %eax,-0x3c(%ebp)
40000957:	eb 2d                	jmp    40000986 <fwrite+0x70>
40000959:	e8 12 fb ff ff       	call   40000470 <yield>
4000095e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000961:	83 ec 0c             	sub    $0xc,%esp
40000964:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000967:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000096a:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000971:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000974:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000977:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
4000097e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000985:	50                   	push   %eax
40000986:	e8 f5 09 00 00       	call   40001380 <syscall>
4000098b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
4000098e:	83 c4 10             	add    $0x10,%esp
40000991:	83 fb 01             	cmp    $0x1,%ebx
40000994:	74 c3                	je     40000959 <fwrite+0x43>
40000996:	89 f0                	mov    %esi,%eax
40000998:	89 da                	mov    %ebx,%edx
4000099a:	e8 3d 02 00 00       	call   40000bdc <printrwerror>
4000099f:	8d 65 f4             	lea    -0xc(%ebp),%esp
400009a2:	89 d8                	mov    %ebx,%eax
400009a4:	5b                   	pop    %ebx
400009a5:	5e                   	pop    %esi
400009a6:	5f                   	pop    %edi
400009a7:	5d                   	pop    %ebp
400009a8:	c3                   	ret    

400009a9 <fputs>:
400009a9:	55                   	push   %ebp
400009aa:	89 e5                	mov    %esp,%ebp
400009ac:	56                   	push   %esi
400009ad:	53                   	push   %ebx
400009ae:	83 ec 20             	sub    $0x20,%esp
400009b1:	8b 45 0c             	mov    0xc(%ebp),%eax
400009b4:	8b 5d 08             	mov    0x8(%ebp),%ebx
400009b7:	e8 70 fd ff ff       	call   4000072c <resolveHandle>
400009bc:	89 c6                	mov    %eax,%esi
400009be:	85 c0                	test   %eax,%eax
400009c0:	74 16                	je     400009d8 <fputs+0x2f>
400009c2:	83 ec 0c             	sub    $0xc,%esp
400009c5:	53                   	push   %ebx
400009c6:	e8 a7 04 00 00       	call   40000e72 <strlen>
400009cb:	83 c4 0c             	add    $0xc,%esp
400009ce:	50                   	push   %eax
400009cf:	53                   	push   %ebx
400009d0:	56                   	push   %esi
400009d1:	e8 40 ff ff ff       	call   40000916 <fwrite>
400009d6:	eb 35                	jmp    40000a0d <fputs+0x64>
400009d8:	83 ec 0c             	sub    $0xc,%esp
400009db:	8d 45 e0             	lea    -0x20(%ebp),%eax
400009de:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
400009e5:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400009e8:	50                   	push   %eax
400009e9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400009f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400009f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a05:	e8 76 09 00 00       	call   40001380 <syscall>
40000a0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000a0d:	83 c4 10             	add    $0x10,%esp
40000a10:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a13:	5b                   	pop    %ebx
40000a14:	5e                   	pop    %esi
40000a15:	5d                   	pop    %ebp
40000a16:	c3                   	ret    

40000a17 <puts>:
40000a17:	55                   	push   %ebp
40000a18:	89 e5                	mov    %esp,%ebp
40000a1a:	83 ec 10             	sub    $0x10,%esp
40000a1d:	6a 01                	push   $0x1
40000a1f:	ff 75 08             	pushl  0x8(%ebp)
40000a22:	e8 82 ff ff ff       	call   400009a9 <fputs>
40000a27:	c9                   	leave  
40000a28:	c3                   	ret    

40000a29 <putn>:
40000a29:	55                   	push   %ebp
40000a2a:	89 e5                	mov    %esp,%ebp
40000a2c:	56                   	push   %esi
40000a2d:	53                   	push   %ebx
40000a2e:	31 f6                	xor    %esi,%esi
40000a30:	83 ec 50             	sub    $0x50,%esp
40000a33:	89 d3                	mov    %edx,%ebx
40000a35:	83 fa 24             	cmp    $0x24,%edx
40000a38:	7f 25                	jg     40000a5f <putn+0x36>
40000a3a:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000a3e:	8d 4d f7             	lea    -0x9(%ebp),%ecx
40000a41:	31 d2                	xor    %edx,%edx
40000a43:	49                   	dec    %ecx
40000a44:	f7 f3                	div    %ebx
40000a46:	46                   	inc    %esi
40000a47:	85 c0                	test   %eax,%eax
40000a49:	8a 92 89 31 00 40    	mov    0x40003189(%edx),%dl
40000a4f:	88 11                	mov    %dl,(%ecx)
40000a51:	75 ee                	jne    40000a41 <putn+0x18>
40000a53:	83 ec 0c             	sub    $0xc,%esp
40000a56:	51                   	push   %ecx
40000a57:	e8 bb ff ff ff       	call   40000a17 <puts>
40000a5c:	83 c4 10             	add    $0x10,%esp
40000a5f:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a62:	89 f0                	mov    %esi,%eax
40000a64:	5b                   	pop    %ebx
40000a65:	5e                   	pop    %esi
40000a66:	5d                   	pop    %ebp
40000a67:	c3                   	ret    

40000a68 <fputc>:
40000a68:	55                   	push   %ebp
40000a69:	89 e5                	mov    %esp,%ebp
40000a6b:	83 ec 38             	sub    $0x38,%esp
40000a6e:	8b 45 08             	mov    0x8(%ebp),%eax
40000a71:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000a74:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a77:	e8 b0 fc ff ff       	call   4000072c <resolveHandle>
40000a7c:	85 c0                	test   %eax,%eax
40000a7e:	74 0f                	je     40000a8f <fputc+0x27>
40000a80:	52                   	push   %edx
40000a81:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000a84:	6a 01                	push   $0x1
40000a86:	52                   	push   %edx
40000a87:	50                   	push   %eax
40000a88:	e8 89 fe ff ff       	call   40000916 <fwrite>
40000a8d:	eb 39                	jmp    40000ac8 <fputc+0x60>
40000a8f:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000a93:	83 ec 0c             	sub    $0xc,%esp
40000a96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a99:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a9c:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000aa3:	50                   	push   %eax
40000aa4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000aab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000ab2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000ab9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000ac0:	e8 bb 08 00 00       	call   40001380 <syscall>
40000ac5:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000ac8:	83 c4 10             	add    $0x10,%esp
40000acb:	c9                   	leave  
40000acc:	c3                   	ret    

40000acd <putc>:
40000acd:	55                   	push   %ebp
40000ace:	89 e5                	mov    %esp,%ebp
40000ad0:	83 ec 08             	sub    $0x8,%esp
40000ad3:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000ad7:	89 45 08             	mov    %eax,0x8(%ebp)
40000ada:	c9                   	leave  
40000adb:	e9 88 ff ff ff       	jmp    40000a68 <fputc>

40000ae0 <putchar>:
40000ae0:	55                   	push   %ebp
40000ae1:	89 e5                	mov    %esp,%ebp
40000ae3:	83 ec 10             	sub    $0x10,%esp
40000ae6:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000aea:	6a 01                	push   $0x1
40000aec:	50                   	push   %eax
40000aed:	e8 76 ff ff ff       	call   40000a68 <fputc>
40000af2:	c9                   	leave  
40000af3:	c3                   	ret    

40000af4 <printf>:
40000af4:	55                   	push   %ebp
40000af5:	89 e5                	mov    %esp,%ebp
40000af7:	57                   	push   %edi
40000af8:	56                   	push   %esi
40000af9:	53                   	push   %ebx
40000afa:	83 ec 1c             	sub    $0x1c,%esp
40000afd:	8d 75 0c             	lea    0xc(%ebp),%esi
40000b00:	8b 7d 08             	mov    0x8(%ebp),%edi
40000b03:	31 db                	xor    %ebx,%ebx
40000b05:	e9 be 00 00 00       	jmp    40000bc8 <printf+0xd4>
40000b0a:	3c 25                	cmp    $0x25,%al
40000b0c:	0f 85 a4 00 00 00    	jne    40000bb6 <printf+0xc2>
40000b12:	47                   	inc    %edi
40000b13:	8a 07                	mov    (%edi),%al
40000b15:	3c 70                	cmp    $0x70,%al
40000b17:	74 47                	je     40000b60 <printf+0x6c>
40000b19:	7f 1a                	jg     40000b35 <printf+0x41>
40000b1b:	3c 63                	cmp    $0x63,%al
40000b1d:	74 5a                	je     40000b79 <printf+0x85>
40000b1f:	7f 0e                	jg     40000b2f <printf+0x3b>
40000b21:	84 c0                	test   %al,%al
40000b23:	0f 84 a9 00 00 00    	je     40000bd2 <printf+0xde>
40000b29:	3c 25                	cmp    $0x25,%al
40000b2b:	75 6c                	jne    40000b99 <printf+0xa5>
40000b2d:	eb 63                	jmp    40000b92 <printf+0x9e>
40000b2f:	3c 64                	cmp    $0x64,%al
40000b31:	75 66                	jne    40000b99 <printf+0xa5>
40000b33:	eb 1e                	jmp    40000b53 <printf+0x5f>
40000b35:	3c 75                	cmp    $0x75,%al
40000b37:	74 1a                	je     40000b53 <printf+0x5f>
40000b39:	3c 78                	cmp    $0x78,%al
40000b3b:	74 23                	je     40000b60 <printf+0x6c>
40000b3d:	3c 73                	cmp    $0x73,%al
40000b3f:	75 58                	jne    40000b99 <printf+0xa5>
40000b41:	83 ec 0c             	sub    $0xc,%esp
40000b44:	8d 46 04             	lea    0x4(%esi),%eax
40000b47:	ff 36                	pushl  (%esi)
40000b49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b4c:	e8 c6 fe ff ff       	call   40000a17 <puts>
40000b51:	eb 38                	jmp    40000b8b <printf+0x97>
40000b53:	8d 46 04             	lea    0x4(%esi),%eax
40000b56:	ba 0a 00 00 00       	mov    $0xa,%edx
40000b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b5e:	eb 0b                	jmp    40000b6b <printf+0x77>
40000b60:	8d 46 04             	lea    0x4(%esi),%eax
40000b63:	ba 10 00 00 00       	mov    $0x10,%edx
40000b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b6b:	8b 06                	mov    (%esi),%eax
40000b6d:	e8 b7 fe ff ff       	call   40000a29 <putn>
40000b72:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000b75:	01 c3                	add    %eax,%ebx
40000b77:	eb 4e                	jmp    40000bc7 <printf+0xd3>
40000b79:	8d 46 04             	lea    0x4(%esi),%eax
40000b7c:	83 ec 0c             	sub    $0xc,%esp
40000b7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b82:	0f be 06             	movsbl (%esi),%eax
40000b85:	50                   	push   %eax
40000b86:	e8 55 ff ff ff       	call   40000ae0 <putchar>
40000b8b:	01 c3                	add    %eax,%ebx
40000b8d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000b90:	eb 32                	jmp    40000bc4 <printf+0xd0>
40000b92:	83 ec 0c             	sub    $0xc,%esp
40000b95:	6a 25                	push   $0x25
40000b97:	eb 24                	jmp    40000bbd <printf+0xc9>
40000b99:	83 ec 0c             	sub    $0xc,%esp
40000b9c:	6a 25                	push   $0x25
40000b9e:	e8 3d ff ff ff       	call   40000ae0 <putchar>
40000ba3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000ba6:	0f be 07             	movsbl (%edi),%eax
40000ba9:	89 04 24             	mov    %eax,(%esp)
40000bac:	e8 2f ff ff ff       	call   40000ae0 <putchar>
40000bb1:	03 45 e4             	add    -0x1c(%ebp),%eax
40000bb4:	eb 0c                	jmp    40000bc2 <printf+0xce>
40000bb6:	83 ec 0c             	sub    $0xc,%esp
40000bb9:	0f be c0             	movsbl %al,%eax
40000bbc:	50                   	push   %eax
40000bbd:	e8 1e ff ff ff       	call   40000ae0 <putchar>
40000bc2:	01 c3                	add    %eax,%ebx
40000bc4:	83 c4 10             	add    $0x10,%esp
40000bc7:	47                   	inc    %edi
40000bc8:	8a 07                	mov    (%edi),%al
40000bca:	84 c0                	test   %al,%al
40000bcc:	0f 85 38 ff ff ff    	jne    40000b0a <printf+0x16>
40000bd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bd5:	89 d8                	mov    %ebx,%eax
40000bd7:	5b                   	pop    %ebx
40000bd8:	5e                   	pop    %esi
40000bd9:	5f                   	pop    %edi
40000bda:	5d                   	pop    %ebp
40000bdb:	c3                   	ret    

40000bdc <printrwerror>:
            nchar = 0;
            color = 0x09;
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;
40000bdc:	55                   	push   %ebp
40000bdd:	89 e5                	mov    %esp,%ebp
40000bdf:	83 ec 08             	sub    $0x8,%esp

40000be2:	83 fa 02             	cmp    $0x2,%edx
40000be5:	75 0a                	jne    40000bf1 <printrwerror+0x15>
        sndChr[0] = ochar;
40000be7:	52                   	push   %edx
40000be8:	52                   	push   %edx
40000be9:	50                   	push   %eax
40000bea:	68 ae 31 00 40       	push   $0x400031ae
40000bef:	eb 2b                	jmp    40000c1c <printrwerror+0x40>
        sndChr[1] = color;

        color = 0x09;
40000bf1:	83 fa 03             	cmp    $0x3,%edx
40000bf4:	75 0a                	jne    40000c00 <printrwerror+0x24>

40000bf6:	51                   	push   %ecx
40000bf7:	51                   	push   %ecx
40000bf8:	50                   	push   %eax
40000bf9:	68 c6 31 00 40       	push   $0x400031c6
40000bfe:	eb 1c                	jmp    40000c1c <printrwerror+0x40>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000c00:	83 fa 04             	cmp    $0x4,%edx
40000c03:	75 0a                	jne    40000c0f <printrwerror+0x33>
            x++;
40000c05:	52                   	push   %edx
40000c06:	52                   	push   %edx
40000c07:	50                   	push   %eax
40000c08:	68 e1 31 00 40       	push   $0x400031e1
40000c0d:	eb 0d                	jmp    40000c1c <printrwerror+0x40>
        }
    }

40000c0f:	83 fa 05             	cmp    $0x5,%edx
40000c12:	75 10                	jne    40000c24 <printrwerror+0x48>
    return 0;
40000c14:	51                   	push   %ecx
40000c15:	51                   	push   %ecx
40000c16:	50                   	push   %eax
40000c17:	68 0b 32 00 40       	push   $0x4000320b
40000c1c:	e8 d3 fe ff ff       	call   40000af4 <printf>
40000c21:	83 c4 10             	add    $0x10,%esp
}
40000c24:	c9                   	leave  
40000c25:	c3                   	ret    

40000c26 <fread>:
40000c26:	55                   	push   %ebp
40000c27:	89 e5                	mov    %esp,%ebp
40000c29:	57                   	push   %edi
40000c2a:	56                   	push   %esi
40000c2b:	53                   	push   %ebx
40000c2c:	83 ec 38             	sub    $0x38,%esp
40000c2f:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000c32:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c35:	8b 75 08             	mov    0x8(%ebp),%esi
40000c38:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c3b:	8b 45 10             	mov    0x10(%ebp),%eax
40000c3e:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000c45:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000c48:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000c4b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000c52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000c59:	eb 2c                	jmp    40000c87 <fread+0x61>
40000c5b:	e8 10 f8 ff ff       	call   40000470 <yield>
40000c60:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c63:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c66:	8b 45 10             	mov    0x10(%ebp),%eax
40000c69:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000c70:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000c73:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000c76:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000c7d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000c84:	83 ec 0c             	sub    $0xc,%esp
40000c87:	57                   	push   %edi
40000c88:	e8 f3 06 00 00       	call   40001380 <syscall>
40000c8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000c90:	83 c4 10             	add    $0x10,%esp
40000c93:	83 fb 01             	cmp    $0x1,%ebx
40000c96:	74 c3                	je     40000c5b <fread+0x35>
40000c98:	89 f0                	mov    %esi,%eax
40000c9a:	89 da                	mov    %ebx,%edx
40000c9c:	e8 3b ff ff ff       	call   40000bdc <printrwerror>
40000ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000ca4:	89 d8                	mov    %ebx,%eax
40000ca6:	5b                   	pop    %ebx
40000ca7:	5e                   	pop    %esi
40000ca8:	5f                   	pop    %edi
40000ca9:	5d                   	pop    %ebp
40000caa:	c3                   	ret    

40000cab <fgetc>:
40000cab:	55                   	push   %ebp
40000cac:	89 e5                	mov    %esp,%ebp
40000cae:	83 ec 18             	sub    $0x18,%esp
40000cb1:	8b 45 08             	mov    0x8(%ebp),%eax
40000cb4:	e8 73 fa ff ff       	call   4000072c <resolveHandle>
40000cb9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000cbd:	85 c0                	test   %eax,%eax
40000cbf:	74 10                	je     40000cd1 <fgetc+0x26>
40000cc1:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000cc4:	51                   	push   %ecx
40000cc5:	6a 01                	push   $0x1
40000cc7:	52                   	push   %edx
40000cc8:	50                   	push   %eax
40000cc9:	e8 58 ff ff ff       	call   40000c26 <fread>
40000cce:	83 c4 10             	add    $0x10,%esp
40000cd1:	8a 45 f7             	mov    -0x9(%ebp),%al
40000cd4:	c9                   	leave  
40000cd5:	c3                   	ret    

40000cd6 <getchar>:
40000cd6:	55                   	push   %ebp
40000cd7:	89 e5                	mov    %esp,%ebp
40000cd9:	83 ec 14             	sub    $0x14,%esp
40000cdc:	6a 02                	push   $0x2
40000cde:	e8 c8 ff ff ff       	call   40000cab <fgetc>
40000ce3:	c9                   	leave  
40000ce4:	c3                   	ret    

40000ce5 <getc>:
40000ce5:	55                   	push   %ebp
40000ce6:	89 e5                	mov    %esp,%ebp
40000ce8:	83 ec 08             	sub    $0x8,%esp
40000ceb:	c9                   	leave  
40000cec:	e9 ba ff ff ff       	jmp    40000cab <fgetc>

40000cf1 <fgets>:
40000cf1:	55                   	push   %ebp
40000cf2:	89 e5                	mov    %esp,%ebp
40000cf4:	57                   	push   %edi
40000cf5:	56                   	push   %esi
40000cf6:	53                   	push   %ebx
40000cf7:	83 ec 1c             	sub    $0x1c,%esp
40000cfa:	31 db                	xor    %ebx,%ebx
40000cfc:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000cff:	8b 75 08             	mov    0x8(%ebp),%esi
40000d02:	8d 47 ff             	lea    -0x1(%edi),%eax
40000d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000d08:	eb 16                	jmp    40000d20 <fgets+0x2f>
40000d0a:	83 ec 0c             	sub    $0xc,%esp
40000d0d:	ff 75 10             	pushl  0x10(%ebp)
40000d10:	e8 96 ff ff ff       	call   40000cab <fgetc>
40000d15:	83 c4 10             	add    $0x10,%esp
40000d18:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d1b:	84 c0                	test   %al,%al
40000d1d:	74 0a                	je     40000d29 <fgets+0x38>
40000d1f:	43                   	inc    %ebx
40000d20:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000d23:	7c e5                	jl     40000d0a <fgets+0x19>
40000d25:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000d29:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000d2c:	89 f0                	mov    %esi,%eax
40000d2e:	5b                   	pop    %ebx
40000d2f:	5e                   	pop    %esi
40000d30:	5f                   	pop    %edi
40000d31:	5d                   	pop    %ebp
40000d32:	c3                   	ret    

40000d33 <getln>:
40000d33:	55                   	push   %ebp
40000d34:	89 e5                	mov    %esp,%ebp
40000d36:	56                   	push   %esi
40000d37:	53                   	push   %ebx
40000d38:	31 db                	xor    %ebx,%ebx
40000d3a:	8b 75 08             	mov    0x8(%ebp),%esi
40000d3d:	eb 42                	jmp    40000d81 <getln+0x4e>
40000d3f:	3c 0a                	cmp    $0xa,%al
40000d41:	75 0f                	jne    40000d52 <getln+0x1f>
40000d43:	83 ec 0c             	sub    $0xc,%esp
40000d46:	6a 0a                	push   $0xa
40000d48:	e8 93 fd ff ff       	call   40000ae0 <putchar>
40000d4d:	83 c4 10             	add    $0x10,%esp
40000d50:	eb 40                	jmp    40000d92 <getln+0x5f>
40000d52:	3c 08                	cmp    $0x8,%al
40000d54:	75 18                	jne    40000d6e <getln+0x3b>
40000d56:	85 db                	test   %ebx,%ebx
40000d58:	74 0e                	je     40000d68 <getln+0x35>
40000d5a:	83 ec 0c             	sub    $0xc,%esp
40000d5d:	4b                   	dec    %ebx
40000d5e:	6a 08                	push   $0x8
40000d60:	e8 7b fd ff ff       	call   40000ae0 <putchar>
40000d65:	83 c4 10             	add    $0x10,%esp
40000d68:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000d6c:	eb 13                	jmp    40000d81 <getln+0x4e>
40000d6e:	83 ec 0c             	sub    $0xc,%esp
40000d71:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d74:	0f be c0             	movsbl %al,%eax
40000d77:	50                   	push   %eax
40000d78:	43                   	inc    %ebx
40000d79:	e8 62 fd ff ff       	call   40000ae0 <putchar>
40000d7e:	83 c4 10             	add    $0x10,%esp
40000d81:	83 ec 0c             	sub    $0xc,%esp
40000d84:	6a 02                	push   $0x2
40000d86:	e8 20 ff ff ff       	call   40000cab <fgetc>
40000d8b:	83 c4 10             	add    $0x10,%esp
40000d8e:	84 c0                	test   %al,%al
40000d90:	75 ad                	jne    40000d3f <getln+0xc>
40000d92:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000d99:	89 f0                	mov    %esi,%eax
40000d9b:	5b                   	pop    %ebx
40000d9c:	5e                   	pop    %esi
40000d9d:	5d                   	pop    %ebp
40000d9e:	c3                   	ret    
	...

40000da0 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
40000da0:	55                   	push   %ebp
40000da1:	89 e5                	mov    %esp,%ebp
40000da3:	53                   	push   %ebx
40000da4:	8b 45 08             	mov    0x8(%ebp),%eax
40000da7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
#include "process.h"
40000dad:	89 c2                	mov    %eax,%edx

#define CMD_SET    0
40000daf:	eb 04                	jmp    40000db5 <memset+0x15>
#define CMD_CLEAR  1
40000db1:	88 1a                	mov    %bl,(%edx)
40000db3:	49                   	dec    %ecx
40000db4:	42                   	inc    %edx
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"

#define CMD_SET    0
40000db5:	85 c9                	test   %ecx,%ecx
40000db7:	75 f8                	jne    40000db1 <memset+0x11>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40000db9:	5b                   	pop    %ebx
40000dba:	5d                   	pop    %ebp
40000dbb:	c3                   	ret    

40000dbc <memcpy>:
    uint16_t offset;
    uint16_t value;
40000dbc:	55                   	push   %ebp
};

static int  x     = 0;
static int  y     = 0;
40000dbd:	31 c9                	xor    %ecx,%ecx
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
40000dbf:	89 e5                	mov    %esp,%ebp
40000dc1:	56                   	push   %esi
40000dc2:	53                   	push   %ebx
40000dc3:	8b 75 10             	mov    0x10(%ebp),%esi
40000dc6:	8b 45 08             	mov    0x8(%ebp),%eax
40000dc9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
};

static int  x     = 0;
static int  y     = 0;
40000dcc:	85 f6                	test   %esi,%esi
40000dce:	75 04                	jne    40000dd4 <memcpy+0x18>
40000dd0:	31 c0                	xor    %eax,%eax
40000dd2:	eb 0a                	jmp    40000dde <memcpy+0x22>
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40000dd4:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000dd7:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000dda:	41                   	inc    %ecx
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;

40000ddb:	4e                   	dec    %esi
40000ddc:	75 f6                	jne    40000dd4 <memcpy+0x18>
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000dde:	5b                   	pop    %ebx
40000ddf:	5e                   	pop    %esi
40000de0:	5d                   	pop    %ebp
40000de1:	c3                   	ret    

40000de2 <memcmp>:
    vgac.command = c;
    vgac.offset = o;
40000de2:	55                   	push   %ebp
    vgac.value = v;
40000de3:	83 c8 ff             	or     $0xffffffff,%eax

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
40000de6:	89 e5                	mov    %esp,%ebp
40000de8:	57                   	push   %edi
40000de9:	56                   	push   %esi
40000dea:	53                   	push   %ebx
40000deb:	8b 75 08             	mov    0x8(%ebp),%esi
40000dee:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000df1:	8b 5d 10             	mov    0x10(%ebp),%ebx
    vgac.value = v;
40000df4:	85 f6                	test   %esi,%esi
40000df6:	74 2c                	je     40000e24 <memcmp+0x42>

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000df8:	b8 01 00 00 00       	mov    $0x1,%eax
40000dfd:	85 ff                	test   %edi,%edi
40000dff:	74 23                	je     40000e24 <memcmp+0x42>
}

40000e01:	31 d2                	xor    %edx,%edx
40000e03:	85 db                	test   %ebx,%ebx
40000e05:	75 17                	jne    40000e1e <memcmp+0x3c>
40000e07:	eb 19                	jmp    40000e22 <memcmp+0x40>
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
40000e09:	8a 04 16             	mov    (%esi,%edx,1),%al
40000e0c:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000e0f:	38 c8                	cmp    %cl,%al
40000e11:	74 0a                	je     40000e1d <memcmp+0x3b>

40000e13:	0f b6 c0             	movzbl %al,%eax
40000e16:	0f b6 c9             	movzbl %cl,%ecx
40000e19:	29 c8                	sub    %ecx,%eax
40000e1b:	eb 07                	jmp    40000e24 <memcmp+0x42>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
40000e1d:	42                   	inc    %edx
40000e1e:	39 da                	cmp    %ebx,%edx
40000e20:	72 e7                	jb     40000e09 <memcmp+0x27>
40000e22:	31 c0                	xor    %eax,%eax
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40000e24:	5b                   	pop    %ebx
40000e25:	5e                   	pop    %esi
40000e26:	5f                   	pop    %edi
40000e27:	5d                   	pop    %ebp
40000e28:	c3                   	ret    

40000e29 <strcmp>:

    sendCommand(CMD_CLEAR, 0, 0);
40000e29:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e2a:	31 c0                	xor    %eax,%eax
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000e2c:	89 e5                	mov    %esp,%ebp
40000e2e:	56                   	push   %esi
40000e2f:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e30:	31 db                	xor    %ebx,%ebx
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000e32:	8b 55 08             	mov    0x8(%ebp),%edx
40000e35:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e38:	85 d2                	test   %edx,%edx
40000e3a:	75 03                	jne    40000e3f <strcmp+0x16>
40000e3c:	eb 09                	jmp    40000e47 <strcmp+0x1e>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000e3e:	40                   	inc    %eax
40000e3f:	89 c3                	mov    %eax,%ebx
40000e41:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000e45:	75 f7                	jne    40000e3e <strcmp+0x15>
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e47:	31 c0                	xor    %eax,%eax
40000e49:	31 f6                	xor    %esi,%esi
40000e4b:	85 c9                	test   %ecx,%ecx
40000e4d:	75 03                	jne    40000e52 <strcmp+0x29>
40000e4f:	eb 09                	jmp    40000e5a <strcmp+0x31>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000e51:	40                   	inc    %eax
40000e52:	89 c6                	mov    %eax,%esi
40000e54:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000e58:	75 f7                	jne    40000e51 <strcmp+0x28>
    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

40000e5a:	89 f0                	mov    %esi,%eax
40000e5c:	39 de                	cmp    %ebx,%esi
40000e5e:	7e 02                	jle    40000e62 <strcmp+0x39>
40000e60:	89 d8                	mov    %ebx,%eax
40000e62:	40                   	inc    %eax
40000e63:	50                   	push   %eax
40000e64:	51                   	push   %ecx
40000e65:	52                   	push   %edx
40000e66:	e8 77 ff ff ff       	call   40000de2 <memcmp>
    char nchar = '\0';
40000e6b:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e6e:	5b                   	pop    %ebx
40000e6f:	5e                   	pop    %esi
40000e70:	5d                   	pop    %ebp
40000e71:	c3                   	ret    

40000e72 <strlen>:
    char ochar = '\0';

40000e72:	55                   	push   %ebp
    while(1) {
40000e73:	31 d2                	xor    %edx,%edx
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000e75:	89 e5                	mov    %esp,%ebp
    while(1) {
40000e77:	31 c0                	xor    %eax,%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000e79:	8b 4d 08             	mov    0x8(%ebp),%ecx
    while(1) {
40000e7c:	85 c9                	test   %ecx,%ecx
40000e7e:	75 03                	jne    40000e83 <strlen+0x11>
40000e80:	eb 09                	jmp    40000e8b <strlen+0x19>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000e82:	42                   	inc    %edx
40000e83:	89 d0                	mov    %edx,%eax
40000e85:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000e89:	75 f7                	jne    40000e82 <strlen+0x10>
        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
40000e8b:	5d                   	pop    %ebp
40000e8c:	c3                   	ret    

40000e8d <strcpy>:
        }

40000e8d:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e8e:	31 d2                	xor    %edx,%edx

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000e90:	89 e5                	mov    %esp,%ebp
40000e92:	56                   	push   %esi
40000e93:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e94:	31 c9                	xor    %ecx,%ecx

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000e96:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e99:	8b 45 08             	mov    0x8(%ebp),%eax
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e9c:	85 db                	test   %ebx,%ebx
40000e9e:	75 03                	jne    40000ea3 <strcpy+0x16>
40000ea0:	eb 09                	jmp    40000eab <strcpy+0x1e>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000ea2:	42                   	inc    %edx
40000ea3:	89 d1                	mov    %edx,%ecx
40000ea5:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000ea9:	75 f7                	jne    40000ea2 <strcpy+0x15>
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
40000eab:	89 ce                	mov    %ecx,%esi
40000ead:	46                   	inc    %esi
40000eae:	74 0c                	je     40000ebc <strcpy+0x2f>
40000eb0:	31 d2                	xor    %edx,%edx
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40000eb2:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000eb5:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000eb8:	42                   	inc    %edx
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;

40000eb9:	4e                   	dec    %esi
40000eba:	75 f6                	jne    40000eb2 <strcpy+0x25>
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
40000ebc:	5b                   	pop    %ebx
40000ebd:	5e                   	pop    %esi
40000ebe:	5d                   	pop    %ebp
40000ebf:	c3                   	ret    

40000ec0 <strtoknc>:
            }
            else
            {
                x--;
            }
            ochar = ' ';
40000ec0:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ec1:	31 c0                	xor    %eax,%eax
            }
            else
            {
                x--;
            }
            ochar = ' ';
40000ec3:	89 e5                	mov    %esp,%ebp
40000ec5:	57                   	push   %edi
40000ec6:	56                   	push   %esi
40000ec7:	53                   	push   %ebx
40000ec8:	83 ec 04             	sub    $0x4,%esp
40000ecb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ece:	8b 4d 08             	mov    0x8(%ebp),%ecx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ed1:	85 db                	test   %ebx,%ebx
40000ed3:	75 06                	jne    40000edb <strtoknc+0x1b>
40000ed5:	e9 83 00 00 00       	jmp    40000f5d <strtoknc+0x9d>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000eda:	40                   	inc    %eax
40000edb:	89 c7                	mov    %eax,%edi
40000edd:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000ee1:	75 f7                	jne    40000eda <strtoknc+0x1a>
            ochar = ' ';
            nchar = 0;
            color = 0x09;
        }

        uint16_t send = 0;
40000ee3:	85 c0                	test   %eax,%eax
40000ee5:	74 76                	je     40000f5d <strtoknc+0x9d>
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
        sndChr[1] = color;
40000ee7:	85 c9                	test   %ecx,%ecx
40000ee9:	75 0b                	jne    40000ef6 <strtoknc+0x36>
40000eeb:	83 3d 10 42 00 40 00 	cmpl   $0x0,0x40004210
40000ef2:	75 08                	jne    40000efc <strtoknc+0x3c>
40000ef4:	eb 67                	jmp    40000f5d <strtoknc+0x9d>

        color = 0x09;

        sendCommand(CMD_SET, x + y * 80, send);

40000ef6:	89 0d 10 42 00 40    	mov    %ecx,0x40004210
        if(nchar != 0) {
            x++;
        }
    }
40000efc:	a1 10 42 00 40       	mov    0x40004210,%eax
40000f01:	31 c9                	xor    %ecx,%ecx

    return 0;
40000f03:	eb 0b                	jmp    40000f10 <strtoknc+0x50>
}
40000f05:	8a 10                	mov    (%eax),%dl
40000f07:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f0a:	75 03                	jne    40000f0f <strtoknc+0x4f>
40000f0c:	40                   	inc    %eax
40000f0d:	eb 05                	jmp    40000f14 <strtoknc+0x54>
        if(nchar != 0) {
            x++;
        }
    }

    return 0;
40000f0f:	41                   	inc    %ecx
40000f10:	39 f9                	cmp    %edi,%ecx
40000f12:	7c f1                	jl     40000f05 <strtoknc+0x45>
40000f14:	39 f9                	cmp    %edi,%ecx
40000f16:	75 e9                	jne    40000f01 <strtoknc+0x41>
40000f18:	a3 10 42 00 40       	mov    %eax,0x40004210
40000f1d:	80 38 00             	cmpb   $0x0,(%eax)
40000f20:	75 28                	jne    40000f4a <strtoknc+0x8a>
40000f22:	c7 05 10 42 00 40 00 	movl   $0x0,0x40004210
40000f29:	00 00 00 
40000f2c:	eb 2f                	jmp    40000f5d <strtoknc+0x9d>
40000f2e:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000f31:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f34:	75 05                	jne    40000f3b <strtoknc+0x7b>
40000f36:	c6 06 00             	movb   $0x0,(%esi)
40000f39:	eb 05                	jmp    40000f40 <strtoknc+0x80>
40000f3b:	41                   	inc    %ecx
40000f3c:	39 f9                	cmp    %edi,%ecx
40000f3e:	7c ee                	jl     40000f2e <strtoknc+0x6e>
40000f40:	ff 05 10 42 00 40    	incl   0x40004210
40000f46:	39 f9                	cmp    %edi,%ecx
40000f48:	7c 15                	jl     40000f5f <strtoknc+0x9f>
40000f4a:	8b 35 10 42 00 40    	mov    0x40004210,%esi
40000f50:	8a 16                	mov    (%esi),%dl
40000f52:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000f55:	84 d2                	test   %dl,%dl
40000f57:	74 06                	je     40000f5f <strtoknc+0x9f>
40000f59:	31 c9                	xor    %ecx,%ecx
40000f5b:	eb df                	jmp    40000f3c <strtoknc+0x7c>
40000f5d:	31 c0                	xor    %eax,%eax
40000f5f:	5a                   	pop    %edx
40000f60:	5b                   	pop    %ebx
40000f61:	5e                   	pop    %esi
40000f62:	5f                   	pop    %edi
40000f63:	5d                   	pop    %ebp
40000f64:	c3                   	ret    

40000f65 <strclone>:

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f65:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f66:	31 c0                	xor    %eax,%eax

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f68:	89 e5                	mov    %esp,%ebp
40000f6a:	56                   	push   %esi
40000f6b:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f6c:	31 d2                	xor    %edx,%edx

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f6e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f71:	85 db                	test   %ebx,%ebx
40000f73:	75 03                	jne    40000f78 <strclone+0x13>
40000f75:	eb 09                	jmp    40000f80 <strclone+0x1b>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000f77:	40                   	inc    %eax
40000f78:	89 c2                	mov    %eax,%edx
40000f7a:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000f7e:	75 f7                	jne    40000f77 <strclone+0x12>
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
40000f80:	83 ec 0c             	sub    $0xc,%esp
40000f83:	42                   	inc    %edx
40000f84:	52                   	push   %edx
40000f85:	e8 af 01 00 00       	call   40001139 <malloc>
            color = 0x09;
40000f8a:	59                   	pop    %ecx
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
40000f8b:	89 c6                	mov    %eax,%esi
            color = 0x09;
40000f8d:	58                   	pop    %eax
40000f8e:	53                   	push   %ebx
40000f8f:	56                   	push   %esi
40000f90:	e8 f8 fe ff ff       	call   40000e8d <strcpy>
            continue;
        }

40000f95:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000f98:	89 f0                	mov    %esi,%eax
40000f9a:	5b                   	pop    %ebx
40000f9b:	5e                   	pop    %esi
40000f9c:	5d                   	pop    %ebp
40000f9d:	c3                   	ret    

40000f9e <strtok>:
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }
40000f9e:	55                   	push   %ebp
40000f9f:	89 e5                	mov    %esp,%ebp
40000fa1:	56                   	push   %esi
40000fa2:	53                   	push   %ebx
40000fa3:	8b 75 08             	mov    0x8(%ebp),%esi
40000fa6:	8b 5d 0c             	mov    0xc(%ebp),%ebx

40000fa9:	85 f6                	test   %esi,%esi
40000fab:	74 2e                	je     40000fdb <strtok+0x3d>
        if(nchar == 8) { //8 = BACKSPACE
40000fad:	a1 14 42 00 40       	mov    0x40004214,%eax
40000fb2:	85 c0                	test   %eax,%eax
40000fb4:	74 0c                	je     40000fc2 <strtok+0x24>
            if(x == 0) {
40000fb6:	83 ec 0c             	sub    $0xc,%esp
40000fb9:	50                   	push   %eax
40000fba:	e8 31 00 00 00       	call   40000ff0 <free>
40000fbf:	83 c4 10             	add    $0x10,%esp
                y--;
                x = 79;
40000fc2:	83 ec 0c             	sub    $0xc,%esp
40000fc5:	56                   	push   %esi
40000fc6:	e8 9a ff ff ff       	call   40000f65 <strclone>
            }
40000fcb:	83 c4 10             	add    $0x10,%esp
        }

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
40000fce:	a3 14 42 00 40       	mov    %eax,0x40004214
            }
40000fd3:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000fd6:	89 45 08             	mov    %eax,0x8(%ebp)
40000fd9:	eb 0a                	jmp    40000fe5 <strtok+0x47>
            else
            {
40000fdb:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000fde:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
                x--;
40000fe5:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000fe8:	5b                   	pop    %ebx
40000fe9:	5e                   	pop    %esi
40000fea:	5d                   	pop    %ebp
            if(x == 0) {
                y--;
                x = 79;
            }
            else
            {
40000feb:	e9 d0 fe ff ff       	jmp    40000ec0 <strtoknc>

40000ff0 <free>:
40000ff0:	55                   	push   %ebp
40000ff1:	89 e5                	mov    %esp,%ebp
40000ff3:	57                   	push   %edi
40000ff4:	56                   	push   %esi
40000ff5:	53                   	push   %ebx
40000ff6:	83 ec 08             	sub    $0x8,%esp
40000ff9:	8b 15 1c 42 00 40    	mov    0x4000421c,%edx
40000fff:	8b 4d 08             	mov    0x8(%ebp),%ecx
40001002:	89 d0                	mov    %edx,%eax
40001004:	e9 b8 00 00 00       	jmp    400010c1 <free+0xd1>
40001009:	3b 48 04             	cmp    0x4(%eax),%ecx
4000100c:	0f 85 ac 00 00 00    	jne    400010be <free+0xce>
40001012:	31 c9                	xor    %ecx,%ecx
40001014:	eb 23                	jmp    40001039 <free+0x49>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40001016:	39 c2                	cmp    %eax,%edx
40001018:	75 1a                	jne    40001034 <free+0x44>
    uint16_t value;
4000101a:	85 c9                	test   %ecx,%ecx
4000101c:	8b 50 08             	mov    0x8(%eax),%edx
4000101f:	75 0e                	jne    4000102f <free+0x3f>
};
40001021:	89 15 1c 42 00 40    	mov    %edx,0x4000421c
40001027:	8b 0d 20 42 00 40    	mov    0x40004220,%ecx
4000102d:	eb 10                	jmp    4000103f <free+0x4f>

static int  x     = 0;
static int  y     = 0;
4000102f:	89 51 08             	mov    %edx,0x8(%ecx)
40001032:	eb f3                	jmp    40001027 <free+0x37>
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
40001034:	89 d1                	mov    %edx,%ecx
40001036:	8b 52 08             	mov    0x8(%edx),%edx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40001039:	85 d2                	test   %edx,%edx
4000103b:	75 d9                	jne    40001016 <free+0x26>
4000103d:	eb e8                	jmp    40001027 <free+0x37>
4000103f:	89 ca                	mov    %ecx,%edx
40001041:	eb 6d                	jmp    400010b0 <free+0xc0>
            y--;
        }

        if (nchar == '\n') {
            color = 0x09;
            continue;
40001043:	8b 5a 04             	mov    0x4(%edx),%ebx
40001046:	8b 32                	mov    (%edx),%esi
40001048:	8b 78 04             	mov    0x4(%eax),%edi
4000104b:	89 7d ec             	mov    %edi,-0x14(%ebp)
4000104e:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40001051:	89 7d f0             	mov    %edi,-0x10(%ebp)
40001054:	8b 7d ec             	mov    -0x14(%ebp),%edi
40001057:	39 7d f0             	cmp    %edi,-0x10(%ebp)
4000105a:	75 18                	jne    40001074 <free+0x84>
        }
4000105c:	89 58 04             	mov    %ebx,0x4(%eax)
4000105f:	31 f6                	xor    %esi,%esi
40001061:	89 cb                	mov    %ecx,%ebx
40001063:	eb 09                	jmp    4000106e <free+0x7e>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40001065:	39 d3                	cmp    %edx,%ebx
40001067:	74 29                	je     40001092 <free+0xa2>
static int  y     = 0;
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
40001069:	89 de                	mov    %ebx,%esi
4000106b:	8b 5b 08             	mov    0x8(%ebx),%ebx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
4000106e:	85 db                	test   %ebx,%ebx
40001070:	75 f3                	jne    40001065 <free+0x75>
40001072:	eb cb                	jmp    4000103f <free+0x4f>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
40001074:	8b 38                	mov    (%eax),%edi
40001076:	89 7d f0             	mov    %edi,-0x10(%ebp)
40001079:	8b 7d ec             	mov    -0x14(%ebp),%edi
4000107c:	03 7d f0             	add    -0x10(%ebp),%edi
4000107f:	39 fb                	cmp    %edi,%ebx
40001081:	75 2a                	jne    400010ad <free+0xbd>
        }
40001083:	03 75 f0             	add    -0x10(%ebp),%esi
40001086:	89 cb                	mov    %ecx,%ebx
40001088:	89 30                	mov    %esi,(%eax)
4000108a:	31 f6                	xor    %esi,%esi
4000108c:	eb 19                	jmp    400010a7 <free+0xb7>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
4000108e:	39 d3                	cmp    %edx,%ebx
40001090:	75 10                	jne    400010a2 <free+0xb2>
    uint16_t value;
40001092:	85 f6                	test   %esi,%esi
40001094:	8b 53 08             	mov    0x8(%ebx),%edx
40001097:	75 04                	jne    4000109d <free+0xad>
};
40001099:	89 d1                	mov    %edx,%ecx
4000109b:	eb a2                	jmp    4000103f <free+0x4f>

static int  x     = 0;
static int  y     = 0;
4000109d:	89 56 08             	mov    %edx,0x8(%esi)
400010a0:	eb 9d                	jmp    4000103f <free+0x4f>
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
400010a2:	89 de                	mov    %ebx,%esi
400010a4:	8b 5b 08             	mov    0x8(%ebx),%ebx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
400010a7:	85 db                	test   %ebx,%ebx
400010a9:	75 e3                	jne    4000108e <free+0x9e>
400010ab:	eb 92                	jmp    4000103f <free+0x4f>

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
400010ad:	8b 52 08             	mov    0x8(%edx),%edx
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
            color = 0x09;
400010b0:	85 d2                	test   %edx,%edx
400010b2:	75 8f                	jne    40001043 <free+0x53>

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400010b4:	89 48 08             	mov    %ecx,0x8(%eax)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400010b7:	a3 20 42 00 40       	mov    %eax,0x40004220
400010bc:	eb 0b                	jmp    400010c9 <free+0xd9>
400010be:	8b 40 08             	mov    0x8(%eax),%eax
400010c1:	85 c0                	test   %eax,%eax
400010c3:	0f 85 40 ff ff ff    	jne    40001009 <free+0x19>
400010c9:	58                   	pop    %eax
400010ca:	5a                   	pop    %edx
400010cb:	5b                   	pop    %ebx
400010cc:	5e                   	pop    %esi
400010cd:	5f                   	pop    %edi
400010ce:	5d                   	pop    %ebp
400010cf:	c3                   	ret    

400010d0 <pop_unused_node>:

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
400010d0:	55                   	push   %ebp
400010d1:	89 e5                	mov    %esp,%ebp
400010d3:	53                   	push   %ebx
400010d4:	83 ec 04             	sub    $0x4,%esp

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
400010d7:	a1 18 42 00 40       	mov    0x40004218,%eax
400010dc:	eb 45                	jmp    40001123 <pop_unused_node+0x53>

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
400010de:	83 ec 0c             	sub    $0xc,%esp
400010e1:	6a 01                	push   $0x1
400010e3:	e8 5b 02 00 00       	call   40001343 <vmm_alloc_cont>

400010e8:	83 c4 0c             	add    $0xc,%esp

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
400010eb:	89 c3                	mov    %eax,%ebx

400010ed:	68 00 10 00 00       	push   $0x1000
400010f2:	6a 00                	push   $0x0
400010f4:	50                   	push   %eax
400010f5:	e8 a6 fc ff ff       	call   40000da0 <memset>
400010fa:	8b 15 18 42 00 40    	mov    0x40004218,%edx
40001100:	8d 43 0c             	lea    0xc(%ebx),%eax

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40001103:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40001109:	83 c4 10             	add    $0x10,%esp

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

4000110c:	89 50 08             	mov    %edx,0x8(%eax)
4000110f:	89 c2                	mov    %eax,%edx
40001111:	83 c0 0c             	add    $0xc,%eax

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

40001114:	39 c8                	cmp    %ecx,%eax
40001116:	75 f4                	jne    4000110c <pop_unused_node+0x3c>
40001118:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
4000111e:	a3 18 42 00 40       	mov    %eax,0x40004218

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
40001123:	85 c0                	test   %eax,%eax
40001125:	74 b7                	je     400010de <pop_unused_node+0xe>

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40001127:	8b 50 08             	mov    0x8(%eax),%edx
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';
4000112a:	85 c0                	test   %eax,%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
4000112c:	89 15 18 42 00 40    	mov    %edx,0x40004218
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';
40001132:	74 aa                	je     400010de <pop_unused_node+0xe>

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
40001134:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40001137:	c9                   	leave  
40001138:	c3                   	ret    

40001139 <malloc>:
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
40001139:	55                   	push   %ebp
4000113a:	89 e5                	mov    %esp,%ebp
4000113c:	57                   	push   %edi
4000113d:	56                   	push   %esi
4000113e:	53                   	push   %ebx
4000113f:	83 ec 1c             	sub    $0x1c,%esp
            color = 0x09;
        }
40001142:	a1 20 42 00 40       	mov    0x40004220,%eax
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
40001147:	8b 75 08             	mov    0x8(%ebp),%esi
            color = 0x09;
        }
4000114a:	89 c3                	mov    %eax,%ebx

        uint16_t send = 0;
4000114c:	eb 07                	jmp    40001155 <malloc+0x1c>
        char* sndChr = (char*) &send;
4000114e:	39 33                	cmp    %esi,(%ebx)
40001150:	73 0c                	jae    4000115e <malloc+0x25>

        sndChr[0] = ochar;
        sndChr[1] = color;

40001152:	8b 5b 08             	mov    0x8(%ebx),%ebx
            ochar = ' ';
            nchar = 0;
            color = 0x09;
        }

        uint16_t send = 0;
40001155:	85 db                	test   %ebx,%ebx
40001157:	75 f5                	jne    4000114e <malloc+0x15>
40001159:	e9 93 00 00 00       	jmp    400011f1 <malloc+0xb8>
4000115e:	8b 3b                	mov    (%ebx),%edi
40001160:	31 d2                	xor    %edx,%edx
40001162:	29 f7                	sub    %esi,%edi
40001164:	89 33                	mov    %esi,(%ebx)
40001166:	eb 4b                	jmp    400011b3 <malloc+0x7a>
40001168:	e8 63 ff ff ff       	call   400010d0 <pop_unused_node>
4000116d:	8b 13                	mov    (%ebx),%edx
4000116f:	03 53 04             	add    0x4(%ebx),%edx
40001172:	29 f7                	sub    %esi,%edi
40001174:	89 50 04             	mov    %edx,0x4(%eax)

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

40001177:	8b 15 20 42 00 40    	mov    0x40004220,%edx
4000117d:	89 50 08             	mov    %edx,0x8(%eax)
40001180:	89 38                	mov    %edi,(%eax)
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40001182:	a3 20 42 00 40       	mov    %eax,0x40004220

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

40001187:	a1 1c 42 00 40       	mov    0x4000421c,%eax
4000118c:	89 43 08             	mov    %eax,0x8(%ebx)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
4000118f:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
40001195:	eb 4f                	jmp    400011e6 <malloc+0xad>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40001197:	39 d8                	cmp    %ebx,%eax
40001199:	75 13                	jne    400011ae <malloc+0x75>
    uint16_t value;
4000119b:	85 d2                	test   %edx,%edx
4000119d:	8b 43 08             	mov    0x8(%ebx),%eax
400011a0:	75 07                	jne    400011a9 <malloc+0x70>
};
400011a2:	a3 20 42 00 40       	mov    %eax,0x40004220
400011a7:	eb 0e                	jmp    400011b7 <malloc+0x7e>

static int  x     = 0;
static int  y     = 0;
400011a9:	89 42 08             	mov    %eax,0x8(%edx)
400011ac:	eb 09                	jmp    400011b7 <malloc+0x7e>
static char color = 0x09;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
400011ae:	89 c2                	mov    %eax,%edx
400011b0:	8b 40 08             	mov    0x8(%eax),%eax
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
400011b3:	85 c0                	test   %eax,%eax
400011b5:	75 e0                	jne    40001197 <malloc+0x5e>

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011b7:	a1 1c 42 00 40       	mov    0x4000421c,%eax
400011bc:	85 ff                	test   %edi,%edi

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011be:	89 43 08             	mov    %eax,0x8(%ebx)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400011c1:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
400011c7:	74 1d                	je     400011e6 <malloc+0xad>
400011c9:	e8 02 ff ff ff       	call   400010d0 <pop_unused_node>
400011ce:	8b 13                	mov    (%ebx),%edx
400011d0:	03 53 04             	add    0x4(%ebx),%edx
400011d3:	89 50 04             	mov    %edx,0x4(%eax)

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011d6:	8b 15 20 42 00 40    	mov    0x40004220,%edx
400011dc:	89 50 08             	mov    %edx,0x8(%eax)
400011df:	89 38                	mov    %edi,(%eax)
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400011e1:	a3 20 42 00 40       	mov    %eax,0x40004220
400011e6:	8b 43 04             	mov    0x4(%ebx),%eax
400011e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
400011ec:	5b                   	pop    %ebx
400011ed:	5e                   	pop    %esi
400011ee:	5f                   	pop    %edi
400011ef:	5d                   	pop    %ebp
400011f0:	c3                   	ret    
        color = 0x09;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
400011f1:	89 f0                	mov    %esi,%eax
        sndChr[1] = color;

        color = 0x09;

        sendCommand(CMD_SET, x + y * 80, send);

400011f3:	89 f7                	mov    %esi,%edi
400011f5:	c1 ef 0c             	shr    $0xc,%edi
        if(nchar != 0) {
            x++;
400011f8:	25 ff 0f 00 00       	and    $0xfff,%eax
        }
400011fd:	83 f8 01             	cmp    $0x1,%eax
40001200:	83 df ff             	sbb    $0xffffffff,%edi
    }

40001203:	83 ec 0c             	sub    $0xc,%esp
40001206:	57                   	push   %edi
40001207:	e8 37 01 00 00       	call   40001343 <vmm_alloc_cont>
}
4000120c:	c1 e7 0c             	shl    $0xc,%edi
            x++;
        }
    }

    return 0;
}
4000120f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001212:	e8 b9 fe ff ff       	call   400010d0 <pop_unused_node>
40001217:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000121a:	83 c4 10             	add    $0x10,%esp
            x++;
        }
    }

    return 0;
}
4000121d:	89 c3                	mov    %eax,%ebx
4000121f:	89 50 04             	mov    %edx,0x4(%eax)
40001222:	89 30                	mov    %esi,(%eax)
40001224:	39 f7                	cmp    %esi,%edi
40001226:	0f 86 5b ff ff ff    	jbe    40001187 <malloc+0x4e>
4000122c:	e9 37 ff ff ff       	jmp    40001168 <malloc+0x2f>

40001231 <realloc>:
40001231:	55                   	push   %ebp
40001232:	89 e5                	mov    %esp,%ebp
40001234:	56                   	push   %esi
40001235:	53                   	push   %ebx
40001236:	8b 1d 1c 42 00 40    	mov    0x4000421c,%ebx
4000123c:	8b 55 08             	mov    0x8(%ebp),%edx
4000123f:	8b 45 0c             	mov    0xc(%ebp),%eax
40001242:	eb 3e                	jmp    40001282 <realloc+0x51>
40001244:	3b 53 04             	cmp    0x4(%ebx),%edx
40001247:	75 36                	jne    4000127f <realloc+0x4e>
40001249:	85 c0                	test   %eax,%eax
4000124b:	75 0b                	jne    40001258 <realloc+0x27>
4000124d:	52                   	push   %edx
4000124e:	31 f6                	xor    %esi,%esi
40001250:	e8 9b fd ff ff       	call   40000ff0 <free>
40001255:	5b                   	pop    %ebx
40001256:	eb 30                	jmp    40001288 <realloc+0x57>
40001258:	83 ec 0c             	sub    $0xc,%esp
4000125b:	50                   	push   %eax
4000125c:	e8 d8 fe ff ff       	call   40001139 <malloc>
40001261:	83 c4 0c             	add    $0xc,%esp
40001264:	89 c6                	mov    %eax,%esi
40001266:	ff 33                	pushl  (%ebx)
40001268:	ff 73 04             	pushl  0x4(%ebx)
4000126b:	50                   	push   %eax
4000126c:	e8 4b fb ff ff       	call   40000dbc <memcpy>
40001271:	59                   	pop    %ecx
40001272:	ff 73 04             	pushl  0x4(%ebx)
40001275:	e8 76 fd ff ff       	call   40000ff0 <free>
4000127a:	83 c4 10             	add    $0x10,%esp
4000127d:	eb 09                	jmp    40001288 <realloc+0x57>
4000127f:	8b 5b 08             	mov    0x8(%ebx),%ebx
40001282:	85 db                	test   %ebx,%ebx
40001284:	75 be                	jne    40001244 <realloc+0x13>
40001286:	31 f6                	xor    %esi,%esi
40001288:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000128b:	89 f0                	mov    %esi,%eax
4000128d:	5b                   	pop    %ebx
4000128e:	5e                   	pop    %esi
4000128f:	5d                   	pop    %ebp
40001290:	c3                   	ret    

40001291 <calloc>:
40001291:	55                   	push   %ebp
40001292:	89 e5                	mov    %esp,%ebp
40001294:	56                   	push   %esi
40001295:	53                   	push   %ebx
40001296:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40001299:	83 ec 0c             	sub    $0xc,%esp
4000129c:	0f af 5d 08          	imul   0x8(%ebp),%ebx
400012a0:	53                   	push   %ebx
400012a1:	e8 93 fe ff ff       	call   40001139 <malloc>
400012a6:	83 c4 10             	add    $0x10,%esp
400012a9:	89 c6                	mov    %eax,%esi
400012ab:	85 c0                	test   %eax,%eax
400012ad:	74 0d                	je     400012bc <calloc+0x2b>
400012af:	50                   	push   %eax
400012b0:	53                   	push   %ebx
400012b1:	6a 00                	push   $0x0
400012b3:	56                   	push   %esi
400012b4:	e8 e7 fa ff ff       	call   40000da0 <memset>
400012b9:	83 c4 10             	add    $0x10,%esp
400012bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
400012bf:	89 f0                	mov    %esi,%eax
400012c1:	5b                   	pop    %ebx
400012c2:	5e                   	pop    %esi
400012c3:	5d                   	pop    %ebp
400012c4:	c3                   	ret    
400012c5:	00 00                	add    %al,(%eax)
	...

400012c8 <print_memstat>:
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}
400012c8:	55                   	push   %ebp
400012c9:	89 e5                	mov    %esp,%ebp
400012cb:	83 ec 34             	sub    $0x34,%esp
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
400012ce:	8d 45 e0             	lea    -0x20(%ebp),%eax
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
400012d1:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)

    setstdout("/dev/tty0");
400012d8:	50                   	push   %eax
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
400012d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400012e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400012e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400012ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400012f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    setstdout("/dev/tty0");
400012fc:	e8 7f 00 00 00       	call   40001380 <syscall>
40001301:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
40001304:	c9                   	leave  
40001305:	c3                   	ret    

40001306 <vmm_free>:
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
40001306:	55                   	push   %ebp
40001307:	89 e5                	mov    %esp,%ebp
40001309:	83 ec 34             	sub    $0x34,%esp
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
4000130c:	8b 45 08             	mov    0x8(%ebp),%eax
4000130f:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
40001316:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vgac.offset = o;
    vgac.value = v;
40001319:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000131c:	50                   	push   %eax
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
4000131d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001324:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000132b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vgac.offset = o;
    vgac.value = v;
40001339:	e8 42 00 00 00       	call   40001380 <syscall>
4000133e:	83 c4 10             	add    $0x10,%esp

40001341:	c9                   	leave  
40001342:	c3                   	ret    

40001343 <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
40001343:	55                   	push   %ebp
40001344:	89 e5                	mov    %esp,%ebp
40001346:	83 ec 34             	sub    $0x34,%esp

#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
40001349:	8b 45 08             	mov    0x8(%ebp),%eax
4000134c:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
40001353:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint16_t command;
    uint16_t offset;
40001356:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001359:	50                   	push   %eax

#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
4000135a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001361:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001368:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000136f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t command;
    uint16_t offset;
40001376:	e8 05 00 00 00       	call   40001380 <syscall>
    uint16_t value;
};

4000137b:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000137e:	c9                   	leave  
4000137f:	c3                   	ret    

40001380 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
40001380:	55                   	push   %ebp
40001381:	89 e5                	mov    %esp,%ebp
40001383:	57                   	push   %edi
40001384:	56                   	push   %esi
40001385:	53                   	push   %ebx
40001386:	83 ec 10             	sub    $0x10,%esp
#include "string.h"
40001389:	8b 55 08             	mov    0x8(%ebp),%edx
4000138c:	8b 45 08             	mov    0x8(%ebp),%eax
4000138f:	8b 72 0c             	mov    0xc(%edx),%esi
40001392:	8b 00                	mov    (%eax),%eax
40001394:	89 75 e4             	mov    %esi,-0x1c(%ebp)
40001397:	8b 5a 04             	mov    0x4(%edx),%ebx
4000139a:	8b 4a 08             	mov    0x8(%edx),%ecx
4000139d:	8b 72 10             	mov    0x10(%edx),%esi
400013a0:	8b 7a 14             	mov    0x14(%edx),%edi
400013a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
400013a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400013a9:	cd 30                	int    $0x30
400013ab:	89 55 e8             	mov    %edx,-0x18(%ebp)
400013ae:	8b 55 08             	mov    0x8(%ebp),%edx
400013b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
400013b4:	89 02                	mov    %eax,(%edx)
400013b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
400013b9:	89 5a 04             	mov    %ebx,0x4(%edx)
400013bc:	89 4a 08             	mov    %ecx,0x8(%edx)
400013bf:	89 42 0c             	mov    %eax,0xc(%edx)
400013c2:	89 72 10             	mov    %esi,0x10(%edx)
400013c5:	89 7a 14             	mov    %edi,0x14(%edx)
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x09;
400013c8:	83 c4 10             	add    $0x10,%esp
400013cb:	5b                   	pop    %ebx
400013cc:	5e                   	pop    %esi
400013cd:	5f                   	pop    %edi
400013ce:	5d                   	pop    %ebp
400013cf:	c3                   	ret    
