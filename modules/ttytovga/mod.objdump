
../../initrfs/ibin/ttytovga:     file format elf32-i386
../../initrfs/ibin/ttytovga
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000061f

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000013f8 memsz 0x000013f8 flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x00001236 memsz 0x00002228 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f8  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       000000ac  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  400030ac  400030ac  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000228  40004000  40004000  00004236  2**2
                  ALLOC
  5 .stab         00004b84  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008dbc  2**0
                  CONTENTS, READONLY
  7 .stabstr      000019b3  00000000  00000000  00008e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
400030ac l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ttytovga.c
40004008 l     O .bss	00000004 x
4000400c l     O .bss	00000004 y
40002000 l     O .data	00000001 color
00000000 l    df *ABS*	00000000 process.c
40004010 l     O .bss	00000200 irq_handlers
40003094 l     O .rodata	00000018 C.7.1015
40000691 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000754 l     F .text	00000047 resolveHandle
40000c04 l     F .text	0000004a printrwerror
40000a51 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
400010f8 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
40000415 g     F .text	0000003d getExecPath
40000b08 g     F .text	00000014 putchar
40000eb5 g     F .text	00000033 strcpy
40000498 g     F .text	0000003e yield
40000b1c g     F .text	000000e8 printf
400013a8 g     F .text	00000050 syscall
40000d19 g     F .text	00000042 fgets
40000d0d g     F .text	0000000c getc
40000de4 g     F .text	00000026 memcpy
40000a3f g     F .text	00000012 puts
400004d6 g     F .text	0000003d pexists
40001161 g     F .text	000000f8 malloc
4000056b g     F .text	0000003d fetch_rpc_data
40000ee8 g     F .text	000000a5 strtoknc
400003ab g     F .text	0000003d changeExecPath
40004220 g     O .bss	00000004 first_free
40000000 g     F .text	00000050 sendCommand
400008ee g     F .text	00000012 setstdout
400012b9 g     F .text	00000034 calloc
4000036f g     F .text	0000003c getExecPathChild
40004000 g     O .bss	00000006 vgac
4000136b g     F .text	0000003d vmm_alloc_cont
400002fd g     F .text	0000003c exec
4000061f g     F .text	00000072 _start
40001259 g     F .text	00000060 realloc
400005e2 g     F .text	0000003d set_rpc_handler
40000fc6 g     F .text	00000052 strtok
40000e0a g     F .text	00000047 memcmp
40000c4e g     F .text	00000085 fread
40004218 g     O .bss	00000004 first_unused
40000852 g     F .text	0000003c fopen
40000dc8 g     F .text	0000001c memset
40000050 g     F .text	0000023a main
40000815 g     F .text	0000003d fclose
40000cfe g     F .text	0000000f getchar
40000d5b g     F .text	0000006c getln
40004214 g     O .bss	00000004 fr
400007d8 g     F .text	0000003d favailable
40000af5 g     F .text	00000013 putc
40000e51 g     F .text	00000049 strcmp
40004224 g     O .bss	00000004 vgaController
40000cd3 g     F .text	0000002b fgetc
40004210 g     O .bss	00000004 sp
400003e8 g     F .text	0000002d cd
4000421c g     O .bss	00000004 first_used
40000a90 g     F .text	00000065 fputc
4000093e g     F .text	00000093 fwrite
400008dc g     F .text	00000012 setstdin
40000339 g     F .text	00000036 texec
40000f8d g     F .text	00000039 strclone
40000452 g     F .text	00000046 exit
40000513 g     F .text	00000058 register_irq_handler
4000088e g     F .text	0000003c fopenpmhandle
4000132e g     F .text	0000003d vmm_free
4000028c g     F .text	00000071 printFilesystemError
40000e9a g     F .text	0000001b strlen
40000900 g     F .text	0000003e getLastVFSErr
400009d1 g     F .text	0000006e fputs
4000079b g     F .text	0000003d fmkfifo
400005a8 g     F .text	0000003a call_rpc
400008ca g     F .text	00000012 setstderr
400012f0 g     F .text	0000003e print_memstat
40001018 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <sendCommand>:

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 18             	sub    $0x18,%esp
40000006:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000009:	8b 55 0c             	mov    0xc(%ebp),%edx
4000000c:	8b 45 10             	mov    0x10(%ebp),%eax
4000000f:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
40000013:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
40000017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    vgac.command = c;
4000001b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000001e:	66 a3 00 40 00 40    	mov    %ax,0x40004000
    vgac.offset = o;
40000024:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000027:	66 a3 02 40 00 40    	mov    %ax,0x40004002
    vgac.value = v;
4000002d:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000030:	66 a3 04 40 00 40    	mov    %ax,0x40004004

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000036:	a1 24 42 00 40       	mov    0x40004224,%eax
4000003b:	83 ec 04             	sub    $0x4,%esp
4000003e:	6a 06                	push   $0x6
40000040:	68 00 40 00 40       	push   $0x40004000
40000045:	50                   	push   %eax
40000046:	e8 f3 08 00 00       	call   4000093e <fwrite>
4000004b:	83 c4 10             	add    $0x10,%esp
}
4000004e:	c9                   	leave  
4000004f:	c3                   	ret    

40000050 <main>:

int main(int argc, char* args[])
{
40000050:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000054:	83 e4 f0             	and    $0xfffffff0,%esp
40000057:	ff 71 fc             	pushl  -0x4(%ecx)
4000005a:	55                   	push   %ebp
4000005b:	89 e5                	mov    %esp,%ebp
4000005d:	51                   	push   %ecx
4000005e:	83 ec 24             	sub    $0x24,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000061:	83 ec 08             	sub    $0x8,%esp
40000064:	6a 02                	push   $0x2
40000066:	68 00 30 00 40       	push   $0x40003000
4000006b:	e8 e2 07 00 00       	call   40000852 <fopen>
40000070:	83 c4 10             	add    $0x10,%esp
40000073:	a3 24 42 00 40       	mov    %eax,0x40004224
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000078:	83 ec 0c             	sub    $0xc,%esp
4000007b:	68 09 30 00 40       	push   $0x40003009
40000080:	e8 16 07 00 00       	call   4000079b <fmkfifo>
40000085:	83 c4 10             	add    $0x10,%esp
40000088:	89 45 e8             	mov    %eax,-0x18(%ebp)

    printf("vgaController: %x\n", vgaController);
4000008b:	a1 24 42 00 40       	mov    0x40004224,%eax
40000090:	83 ec 08             	sub    $0x8,%esp
40000093:	50                   	push   %eax
40000094:	68 13 30 00 40       	push   $0x40003013
40000099:	e8 7e 0a 00 00       	call   40000b1c <printf>
4000009e:	83 c4 10             	add    $0x10,%esp
    printf("fifoInpt: %x\n", fifoInpt);
400000a1:	83 ec 08             	sub    $0x8,%esp
400000a4:	ff 75 e8             	pushl  -0x18(%ebp)
400000a7:	68 26 30 00 40       	push   $0x40003026
400000ac:	e8 6b 0a 00 00       	call   40000b1c <printf>
400000b1:	83 c4 10             	add    $0x10,%esp

    setstdout("/dev/tty0");
400000b4:	83 ec 0c             	sub    $0xc,%esp
400000b7:	68 09 30 00 40       	push   $0x40003009
400000bc:	e8 2d 08 00 00       	call   400008ee <setstdout>
400000c1:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
400000c4:	83 ec 0c             	sub    $0xc,%esp
400000c7:	68 09 30 00 40       	push   $0x40003009
400000cc:	e8 f9 07 00 00       	call   400008ca <setstderr>
400000d1:	83 c4 10             	add    $0x10,%esp

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
400000d4:	83 ec 0c             	sub    $0xc,%esp
400000d7:	68 34 30 00 40       	push   $0x40003034
400000dc:	e8 3b 0a 00 00       	call   40000b1c <printf>
400000e1:	83 c4 10             	add    $0x10,%esp

    sendCommand(CMD_CLEAR, 0, 0);
400000e4:	83 ec 04             	sub    $0x4,%esp
400000e7:	6a 00                	push   $0x0
400000e9:	6a 00                	push   $0x0
400000eb:	6a 01                	push   $0x1
400000ed:	e8 0e ff ff ff       	call   40000000 <sendCommand>
400000f2:	83 c4 10             	add    $0x10,%esp

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
400000f5:	83 ec 08             	sub    $0x8,%esp
400000f8:	6a 02                	push   $0x2
400000fa:	68 6c 30 00 40       	push   $0x4000306c
400000ff:	e8 4e 07 00 00       	call   40000852 <fopen>
40000104:	83 c4 10             	add    $0x10,%esp
40000107:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000010a:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
4000010e:	83 ec 04             	sub    $0x4,%esp
40000111:	6a 01                	push   $0x1
40000113:	8d 45 e7             	lea    -0x19(%ebp),%eax
40000116:	50                   	push   %eax
40000117:	ff 75 ec             	pushl  -0x14(%ebp)
4000011a:	e8 1f 08 00 00       	call   4000093e <fwrite>
4000011f:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
40000122:	83 ec 0c             	sub    $0xc,%esp
40000125:	ff 75 ec             	pushl  -0x14(%ebp)
40000128:	e8 e8 06 00 00       	call   40000815 <fclose>
4000012d:	83 c4 10             	add    $0x10,%esp

    char nchar = '\0';
40000130:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
    char ochar = '\0';
40000134:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
40000138:	eb 01                	jmp    4000013b <main+0xeb>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
4000013a:	90                   	nop    

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
4000013b:	83 ec 04             	sub    $0x4,%esp
4000013e:	6a 01                	push   $0x1
40000140:	8d 45 e6             	lea    -0x1a(%ebp),%eax
40000143:	50                   	push   %eax
40000144:	ff 75 e8             	pushl  -0x18(%ebp)
40000147:	e8 02 0b 00 00       	call   40000c4e <fread>
4000014c:	83 c4 10             	add    $0x10,%esp
        ochar = nchar;
4000014f:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000152:	88 45 f3             	mov    %al,-0xd(%ebp)

        if ((nchar == '\n') || (x > 79)) {
40000155:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000158:	3c 0a                	cmp    $0xa,%al
4000015a:	74 0a                	je     40000166 <main+0x116>
4000015c:	a1 08 40 00 40       	mov    0x40004008,%eax
40000161:	83 f8 4f             	cmp    $0x4f,%eax
40000164:	7e 15                	jle    4000017b <main+0x12b>
            x = 0;
40000166:	c7 05 08 40 00 40 00 	movl   $0x0,0x40004008
4000016d:	00 00 00 
            y++;
40000170:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000175:	40                   	inc    %eax
40000176:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (y > 24) {
4000017b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000180:	83 f8 18             	cmp    $0x18,%eax
40000183:	7e 1c                	jle    400001a1 <main+0x151>
            sendCommand(CMD_SCROLL, 0, 0);
40000185:	83 ec 04             	sub    $0x4,%esp
40000188:	6a 00                	push   $0x0
4000018a:	6a 00                	push   $0x0
4000018c:	6a 02                	push   $0x2
4000018e:	e8 6d fe ff ff       	call   40000000 <sendCommand>
40000193:	83 c4 10             	add    $0x10,%esp
            y--;
40000196:	a1 0c 40 00 40       	mov    0x4000400c,%eax
4000019b:	48                   	dec    %eax
4000019c:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (nchar == '\n') {
400001a1:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001a4:	3c 0a                	cmp    $0xa,%al
400001a6:	75 05                	jne    400001ad <main+0x15d>
            continue;
400001a8:	e9 d8 00 00 00       	jmp    40000285 <main+0x235>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
400001ad:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001b0:	3c 11                	cmp    $0x11,%al
400001b2:	75 21                	jne    400001d5 <main+0x185>
            fread(fifoInpt, &nchar, sizeof(char));
400001b4:	83 ec 04             	sub    $0x4,%esp
400001b7:	6a 01                	push   $0x1
400001b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
400001bc:	50                   	push   %eax
400001bd:	ff 75 e8             	pushl  -0x18(%ebp)
400001c0:	e8 89 0a 00 00       	call   40000c4e <fread>
400001c5:	83 c4 10             	add    $0x10,%esp
            color = nchar;
400001c8:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001cb:	a2 00 20 00 40       	mov    %al,0x40002000
            continue;
400001d0:	e9 b0 00 00 00       	jmp    40000285 <main+0x235>
        }

        if(nchar == 8) { //8 = BACKSPACE
400001d5:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001d8:	3c 08                	cmp    $0x8,%al
400001da:	75 33                	jne    4000020f <main+0x1bf>
            if(x == 0) {
400001dc:	a1 08 40 00 40       	mov    0x40004008,%eax
400001e1:	85 c0                	test   %eax,%eax
400001e3:	75 17                	jne    400001fc <main+0x1ac>
                y--;
400001e5:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001ea:	48                   	dec    %eax
400001eb:	a3 0c 40 00 40       	mov    %eax,0x4000400c
                x = 79;
400001f0:	c7 05 08 40 00 40 4f 	movl   $0x4f,0x40004008
400001f7:	00 00 00 
400001fa:	eb 0b                	jmp    40000207 <main+0x1b7>
            }
            else
            {
                x--;
400001fc:	a1 08 40 00 40       	mov    0x40004008,%eax
40000201:	48                   	dec    %eax
40000202:	a3 08 40 00 40       	mov    %eax,0x40004008
            }
            ochar = ' ';
40000207:	c6 45 f3 20          	movb   $0x20,-0xd(%ebp)
            nchar = 0;
4000020b:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
        }

        uint16_t send = 0;
4000020f:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
        char* sndChr = (char*) &send;
40000215:	8d 45 e4             	lea    -0x1c(%ebp),%eax
40000218:	89 45 f4             	mov    %eax,-0xc(%ebp)

        sndChr[0] = ochar;
4000021b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000021e:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000221:	88 10                	mov    %dl,(%eax)
        sndChr[1] = color;
40000223:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000226:	8d 50 01             	lea    0x1(%eax),%edx
40000229:	a0 00 20 00 40       	mov    0x40002000,%al
4000022e:	88 02                	mov    %al,(%edx)

        sendCommand(CMD_SET, x + y * 80, send);
40000230:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000233:	89 c1                	mov    %eax,%ecx
40000235:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
4000023b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000240:	89 c2                	mov    %eax,%edx
40000242:	89 d0                	mov    %edx,%eax
40000244:	c1 e0 02             	shl    $0x2,%eax
40000247:	01 d0                	add    %edx,%eax
40000249:	c1 e0 04             	shl    $0x4,%eax
4000024c:	89 c2                	mov    %eax,%edx
4000024e:	a1 08 40 00 40       	mov    0x40004008,%eax
40000253:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000256:	25 ff ff 00 00       	and    $0xffff,%eax
4000025b:	83 ec 04             	sub    $0x4,%esp
4000025e:	51                   	push   %ecx
4000025f:	50                   	push   %eax
40000260:	6a 00                	push   $0x0
40000262:	e8 99 fd ff ff       	call   40000000 <sendCommand>
40000267:	83 c4 10             	add    $0x10,%esp

        if(nchar != 0) {
4000026a:	8a 45 e6             	mov    -0x1a(%ebp),%al
4000026d:	84 c0                	test   %al,%al
4000026f:	0f 84 c5 fe ff ff    	je     4000013a <main+0xea>
            x++;
40000275:	a1 08 40 00 40       	mov    0x40004008,%eax
4000027a:	40                   	inc    %eax
4000027b:	a3 08 40 00 40       	mov    %eax,0x40004008
        }
    }
40000280:	e9 b6 fe ff ff       	jmp    4000013b <main+0xeb>
40000285:	e9 b1 fe ff ff       	jmp    4000013b <main+0xeb>
	...

4000028c <printFilesystemError>:
4000028c:	55                   	push   %ebp
4000028d:	89 e5                	mov    %esp,%ebp
4000028f:	83 ec 08             	sub    $0x8,%esp
40000292:	8b 55 0c             	mov    0xc(%ebp),%edx
40000295:	8b 45 08             	mov    0x8(%ebp),%eax
40000298:	83 fa 05             	cmp    $0x5,%edx
4000029b:	77 43                	ja     400002e0 <printFilesystemError+0x54>
4000029d:	ff 24 95 7c 30 00 40 	jmp    *0x4000307c(,%edx,4)
400002a4:	52                   	push   %edx
400002a5:	52                   	push   %edx
400002a6:	50                   	push   %eax
400002a7:	68 ac 30 00 40       	push   $0x400030ac
400002ac:	eb 3a                	jmp    400002e8 <printFilesystemError+0x5c>
400002ae:	51                   	push   %ecx
400002af:	51                   	push   %ecx
400002b0:	50                   	push   %eax
400002b1:	68 be 30 00 40       	push   $0x400030be
400002b6:	eb 30                	jmp    400002e8 <printFilesystemError+0x5c>
400002b8:	52                   	push   %edx
400002b9:	52                   	push   %edx
400002ba:	50                   	push   %eax
400002bb:	68 dd 30 00 40       	push   $0x400030dd
400002c0:	eb 26                	jmp    400002e8 <printFilesystemError+0x5c>
400002c2:	51                   	push   %ecx
400002c3:	51                   	push   %ecx
400002c4:	50                   	push   %eax
400002c5:	68 07 31 00 40       	push   $0x40003107
400002ca:	eb 1c                	jmp    400002e8 <printFilesystemError+0x5c>
400002cc:	52                   	push   %edx
400002cd:	52                   	push   %edx
400002ce:	50                   	push   %eax
400002cf:	68 1c 31 00 40       	push   $0x4000311c
400002d4:	eb 12                	jmp    400002e8 <printFilesystemError+0x5c>
400002d6:	51                   	push   %ecx
400002d7:	51                   	push   %ecx
400002d8:	50                   	push   %eax
400002d9:	68 57 31 00 40       	push   $0x40003157
400002de:	eb 08                	jmp    400002e8 <printFilesystemError+0x5c>
400002e0:	52                   	push   %edx
400002e1:	52                   	push   %edx
400002e2:	50                   	push   %eax
400002e3:	68 6a 31 00 40       	push   $0x4000316a
400002e8:	e8 2f 08 00 00       	call   40000b1c <printf>
400002ed:	c7 45 08 87 31 00 40 	movl   $0x40003187,0x8(%ebp)
400002f4:	83 c4 10             	add    $0x10,%esp
400002f7:	c9                   	leave  
400002f8:	e9 1f 08 00 00       	jmp    40000b1c <printf>

400002fd <exec>:
400002fd:	55                   	push   %ebp
400002fe:	89 e5                	mov    %esp,%ebp
40000300:	83 ec 34             	sub    $0x34,%esp
40000303:	8b 45 08             	mov    0x8(%ebp),%eax
40000306:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
4000030d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000310:	8b 45 0c             	mov    0xc(%ebp),%eax
40000313:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000316:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000319:	50                   	push   %eax
4000031a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000321:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000328:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000032f:	e8 74 10 00 00       	call   400013a8 <syscall>
40000334:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000337:	c9                   	leave  
40000338:	c3                   	ret    

40000339 <texec>:
40000339:	55                   	push   %ebp
4000033a:	89 e5                	mov    %esp,%ebp
4000033c:	56                   	push   %esi
4000033d:	53                   	push   %ebx
4000033e:	53                   	push   %ebx
4000033f:	53                   	push   %ebx
40000340:	8b 75 08             	mov    0x8(%ebp),%esi
40000343:	ff 75 0c             	pushl  0xc(%ebp)
40000346:	56                   	push   %esi
40000347:	e8 b1 ff ff ff       	call   400002fd <exec>
4000034c:	83 c4 10             	add    $0x10,%esp
4000034f:	89 c3                	mov    %eax,%ebx
40000351:	85 c0                	test   %eax,%eax
40000353:	75 11                	jne    40000366 <texec+0x2d>
40000355:	e8 a6 05 00 00       	call   40000900 <getLastVFSErr>
4000035a:	51                   	push   %ecx
4000035b:	51                   	push   %ecx
4000035c:	50                   	push   %eax
4000035d:	56                   	push   %esi
4000035e:	e8 29 ff ff ff       	call   4000028c <printFilesystemError>
40000363:	83 c4 10             	add    $0x10,%esp
40000366:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000369:	89 d8                	mov    %ebx,%eax
4000036b:	5b                   	pop    %ebx
4000036c:	5e                   	pop    %esi
4000036d:	5d                   	pop    %ebp
4000036e:	c3                   	ret    

4000036f <getExecPathChild>:
4000036f:	55                   	push   %ebp
40000370:	89 e5                	mov    %esp,%ebp
40000372:	83 ec 34             	sub    $0x34,%esp
40000375:	8b 45 08             	mov    0x8(%ebp),%eax
40000378:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
4000037f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000382:	8b 45 0c             	mov    0xc(%ebp),%eax
40000385:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000388:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000038b:	50                   	push   %eax
4000038c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000393:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000039a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003a1:	e8 02 10 00 00       	call   400013a8 <syscall>
400003a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003a9:	c9                   	leave  
400003aa:	c3                   	ret    

400003ab <changeExecPath>:
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
400003ab:	55                   	push   %ebp
400003ac:	89 e5                	mov    %esp,%ebp
400003ae:	83 ec 34             	sub    $0x34,%esp
    }

    return 0;
}
400003b1:	8b 45 08             	mov    0x8(%ebp),%eax
400003b4:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
400003bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003be:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003c1:	50                   	push   %eax
    }

    return 0;
}
400003c2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003c9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003de:	e8 c5 0f 00 00       	call   400013a8 <syscall>
400003e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003e6:	c9                   	leave  
400003e7:	c3                   	ret    

400003e8 <cd>:
400003e8:	55                   	push   %ebp
400003e9:	89 e5                	mov    %esp,%ebp
400003eb:	53                   	push   %ebx
400003ec:	83 ec 10             	sub    $0x10,%esp
400003ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
400003f2:	53                   	push   %ebx
400003f3:	e8 b3 ff ff ff       	call   400003ab <changeExecPath>
400003f8:	83 c4 10             	add    $0x10,%esp
400003fb:	85 c0                	test   %eax,%eax
400003fd:	75 11                	jne    40000410 <cd+0x28>
400003ff:	e8 fc 04 00 00       	call   40000900 <getLastVFSErr>
40000404:	52                   	push   %edx
40000405:	52                   	push   %edx
40000406:	50                   	push   %eax
40000407:	53                   	push   %ebx
40000408:	e8 7f fe ff ff       	call   4000028c <printFilesystemError>
4000040d:	83 c4 10             	add    $0x10,%esp
40000410:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000413:	c9                   	leave  
40000414:	c3                   	ret    

40000415 <getExecPath>:
                x = 79;
            }
            else
            {
                x--;
            }
40000415:	55                   	push   %ebp
40000416:	89 e5                	mov    %esp,%ebp
40000418:	83 ec 34             	sub    $0x34,%esp
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
4000041b:	8b 45 08             	mov    0x8(%ebp),%eax
4000041e:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
40000425:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        sndChr[1] = color;

40000428:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000042b:	50                   	push   %eax
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
4000042c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000433:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000043a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000441:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        sndChr[1] = color;

40000448:	e8 5b 0f 00 00       	call   400013a8 <syscall>
4000044d:	83 c4 10             	add    $0x10,%esp
        sendCommand(CMD_SET, x + y * 80, send);
40000450:	c9                   	leave  
40000451:	c3                   	ret    

40000452 <exit>:
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
            continue;
40000452:	55                   	push   %ebp
40000453:	89 e5                	mov    %esp,%ebp
40000455:	83 ec 34             	sub    $0x34,%esp
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

40000458:	8b 45 08             	mov    0x8(%ebp),%eax
4000045b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000462:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40000465:	8d 45 e0             	lea    -0x20(%ebp),%eax
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

40000468:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000046f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000476:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000047d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40000484:	50                   	push   %eax
40000485:	e8 1e 0f 00 00       	call   400013a8 <syscall>
                y--;
                x = 79;
            }
4000048a:	c7 04 24 72 31 00 40 	movl   $0x40003172,(%esp)
40000491:	e8 86 06 00 00       	call   40000b1c <printf>
40000496:	eb f2                	jmp    4000048a <exit+0x38>

40000498 <yield>:
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000498:	55                   	push   %ebp
40000499:	89 e5                	mov    %esp,%ebp
4000049b:	83 ec 34             	sub    $0x34,%esp
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
4000049e:	8d 45 e0             	lea    -0x20(%ebp),%eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

400004a1:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004a8:	50                   	push   %eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

400004a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400004b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004cc:	e8 d7 0e 00 00       	call   400013a8 <syscall>
400004d1:	83 c4 10             	add    $0x10,%esp
            y--;
        }

400004d4:	c9                   	leave  
400004d5:	c3                   	ret    

400004d6 <pexists>:
static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

400004d6:	55                   	push   %ebp
400004d7:	89 e5                	mov    %esp,%ebp
400004d9:	83 ec 34             	sub    $0x34,%esp
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400004dc:	8b 45 08             	mov    0x8(%ebp),%eax
400004df:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400004e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

400004e9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004ec:	50                   	push   %eax
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400004ed:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000502:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}

40000509:	e8 9a 0e 00 00       	call   400013a8 <syscall>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
4000050e:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000511:	c9                   	leave  
40000512:	c3                   	ret    

40000513 <register_irq_handler>:
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000513:	55                   	push   %ebp
40000514:	89 e5                	mov    %esp,%ebp
40000516:	53                   	push   %ebx
40000517:	83 ec 30             	sub    $0x30,%esp
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

4000051a:	8d 45 e0             	lea    -0x20(%ebp),%eax
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
4000051d:	8b 5d 08             	mov    0x8(%ebp),%ebx
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000520:	50                   	push   %eax

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000521:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40000528:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000052b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000532:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000539:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000540:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        ochar = nchar;

40000547:	e8 5c 0e 00 00       	call   400013a8 <syscall>
        if ((nchar == '\n') || (x > 79)) {
            x = 0;
4000054c:	83 c4 10             	add    $0x10,%esp
4000054f:	31 c0                	xor    %eax,%eax
40000551:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
40000555:	74 0f                	je     40000566 <register_irq_handler+0x53>
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }
40000557:	8b 45 0c             	mov    0xc(%ebp),%eax
4000055a:	89 04 9d 10 40 00 40 	mov    %eax,0x40004010(,%ebx,4)
40000561:	b8 01 00 00 00       	mov    $0x1,%eax

        if (nchar == '\n') {
            continue;
        }
40000566:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000569:	c9                   	leave  
4000056a:	c3                   	ret    

4000056b <fetch_rpc_data>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
4000056b:	55                   	push   %ebp
4000056c:	89 e5                	mov    %esp,%ebp
4000056e:	83 ec 34             	sub    $0x34,%esp
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

40000571:	8b 45 08             	mov    0x8(%ebp),%eax
40000574:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
4000057b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

4000057e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000581:	50                   	push   %eax
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

40000582:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000589:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000590:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000597:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

4000059e:	e8 05 0e 00 00       	call   400013a8 <syscall>
400005a3:	83 c4 10             	add    $0x10,%esp
    sendCommand(CMD_CLEAR, 0, 0);
400005a6:	c9                   	leave  
400005a7:	c3                   	ret    

400005a8 <call_rpc>:
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

400005a8:	55                   	push   %ebp
400005a9:	89 e5                	mov    %esp,%ebp
400005ab:	83 ec 34             	sub    $0x34,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400005ae:	8b 45 08             	mov    0x8(%ebp),%eax
400005b1:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
400005b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400005bb:	8b 45 0c             	mov    0xc(%ebp),%eax
400005be:	89 45 e8             	mov    %eax,-0x18(%ebp)
400005c1:	8b 45 10             	mov    0x10(%ebp),%eax
400005c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
400005c7:	8b 45 14             	mov    0x14(%ebp),%eax
400005ca:	89 45 f0             	mov    %eax,-0x10(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400005cd:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005d0:	50                   	push   %eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400005d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400005d8:	e8 cb 0d 00 00       	call   400013a8 <syscall>
}

int main(int argc, char* args[])
400005dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005e0:	c9                   	leave  
400005e1:	c3                   	ret    

400005e2 <set_rpc_handler>:
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
400005e2:	55                   	push   %ebp
400005e3:	89 e5                	mov    %esp,%ebp
400005e5:	57                   	push   %edi
400005e6:	56                   	push   %esi
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
400005e7:	be 94 30 00 40       	mov    $0x40003094,%esi
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
400005ec:	83 ec 24             	sub    $0x24,%esp
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
400005ef:	8d 7d e0             	lea    -0x20(%ebp),%edi
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }

400005f2:	68 00 02 00 00       	push   $0x200
400005f7:	6a 00                	push   $0x0
400005f9:	68 10 40 00 40       	push   $0x40004010
400005fe:	e8 c5 07 00 00       	call   40000dc8 <memset>
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000603:	b9 06 00 00 00       	mov    $0x6,%ecx
            x++;
        }
40000608:	8d 45 e0             	lea    -0x20(%ebp),%eax
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
4000060b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
            x++;
        }
4000060d:	89 04 24             	mov    %eax,(%esp)
40000610:	e8 93 0d 00 00       	call   400013a8 <syscall>
40000615:	83 c4 10             	add    $0x10,%esp
    }
40000618:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000061b:	5e                   	pop    %esi
4000061c:	5f                   	pop    %edi
4000061d:	5d                   	pop    %ebp
4000061e:	c3                   	ret    

4000061f <_start>:

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

4000061f:	55                   	push   %ebp
40000620:	89 e5                	mov    %esp,%ebp
40000622:	56                   	push   %esi
40000623:	53                   	push   %ebx
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
40000624:	31 db                	xor    %ebx,%ebx

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

40000626:	83 ec 2c             	sub    $0x2c,%esp
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
40000629:	8d 45 e0             	lea    -0x20(%ebp),%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
4000062c:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000633:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

static int  x     = 0;
4000063a:	50                   	push   %eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
4000063b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000642:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000649:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000650:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

static int  x     = 0;
40000657:	e8 4c 0d 00 00       	call   400013a8 <syscall>
static int  y     = 0;
static char color = 0x07;
4000065c:	8b 75 e0             	mov    -0x20(%ebp),%esi

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
4000065f:	83 c4 10             	add    $0x10,%esp
40000662:	85 f6                	test   %esi,%esi
40000664:	75 05                	jne    4000066b <_start+0x4c>
40000666:	89 f3                	mov    %esi,%ebx
40000668:	eb 07                	jmp    40000671 <_start+0x52>

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
4000066a:	43                   	inc    %ebx
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

4000066b:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
4000066f:	75 f9                	jne    4000066a <_start+0x4b>
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000671:	e8 6c ff ff ff       	call   400005e2 <set_rpc_handler>
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000676:	51                   	push   %ecx
40000677:	51                   	push   %ecx
40000678:	56                   	push   %esi
40000679:	53                   	push   %ebx
4000067a:	e8 d1 f9 ff ff       	call   40000050 <main>

    char nchar = '\0';
4000067f:	89 04 24             	mov    %eax,(%esp)
40000682:	e8 cb fd ff ff       	call   40000452 <exit>
40000687:	83 c4 10             	add    $0x10,%esp
    char ochar = '\0';
4000068a:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000068d:	5b                   	pop    %ebx
4000068e:	5e                   	pop    %esi
4000068f:	5d                   	pop    %ebp
40000690:	c3                   	ret    

40000691 <_handle_rpc>:

        if (nchar == '\n') {
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
40000691:	55                   	push   %ebp
40000692:	89 e5                	mov    %esp,%ebp
40000694:	56                   	push   %esi
40000695:	53                   	push   %ebx
40000696:	83 ec 2c             	sub    $0x2c,%esp
            fread(fifoInpt, &nchar, sizeof(char));
40000699:	ff 75 10             	pushl  0x10(%ebp)

        if (nchar == '\n') {
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
4000069c:	8b 75 0c             	mov    0xc(%ebp),%esi
            fread(fifoInpt, &nchar, sizeof(char));
4000069f:	e8 bd 0a 00 00       	call   40001161 <malloc>
            color = nchar;
400006a4:	89 04 24             	mov    %eax,(%esp)
        if (nchar == '\n') {
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
400006a7:	89 c3                	mov    %eax,%ebx
            color = nchar;
400006a9:	e8 bd fe ff ff       	call   4000056b <fetch_rpc_data>
            continue;
        }
400006ae:	83 c4 10             	add    $0x10,%esp
400006b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400006b5:	75 4b                	jne    40000702 <_handle_rpc+0x71>

400006b7:	8b 04 b5 10 40 00 40 	mov    0x40004010(,%esi,4),%eax
400006be:	85 c0                	test   %eax,%eax
400006c0:	74 40                	je     40000702 <_handle_rpc+0x71>
        if(nchar == 8) { //8 = BACKSPACE
400006c2:	83 ec 0c             	sub    $0xc,%esp
400006c5:	56                   	push   %esi
400006c6:	ff d0                	call   *%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
400006c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006cb:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    uint16_t value;
};
400006d2:	89 04 24             	mov    %eax,(%esp)
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400006d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400006dc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
400006f8:	e8 ab 0c 00 00       	call   400013a8 <syscall>
400006fd:	83 c4 10             	add    $0x10,%esp
40000700:	eb fe                	jmp    40000700 <_handle_rpc+0x6f>
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
            else
40000702:	83 ec 0c             	sub    $0xc,%esp
40000705:	68 79 31 00 40       	push   $0x40003179
4000070a:	e8 0d 04 00 00       	call   40000b1c <printf>
            {
                x--;
4000070f:	89 1c 24             	mov    %ebx,(%esp)
40000712:	e8 01 09 00 00       	call   40001018 <free>

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40000717:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
4000071a:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    uint16_t value;
};
40000721:	89 04 24             	mov    %eax,(%esp)
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40000724:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000072b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000732:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000739:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000740:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
40000747:	e8 5c 0c 00 00       	call   400013a8 <syscall>
4000074c:	83 c4 10             	add    $0x10,%esp
4000074f:	eb fe                	jmp    4000074f <_handle_rpc+0xbe>
40000751:	00 00                	add    %al,(%eax)
	...

40000754 <resolveHandle>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000754:	55                   	push   %ebp
40000755:	89 e5                	mov    %esp,%ebp
40000757:	83 ec 28             	sub    $0x28,%esp
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
4000075a:	3d fe 0f 00 00       	cmp    $0xffe,%eax
4000075f:	77 38                	ja     40000799 <resolveHandle+0x45>
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000761:	83 ec 0c             	sub    $0xc,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000764:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000767:	8d 45 e0             	lea    -0x20(%ebp),%eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
4000076a:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000771:	50                   	push   %eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000772:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000779:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000780:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000787:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
4000078e:	e8 15 0c 00 00       	call   400013a8 <syscall>
}

40000793:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000796:	83 c4 10             	add    $0x10,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

40000799:	c9                   	leave  
4000079a:	c3                   	ret    

4000079b <fmkfifo>:
4000079b:	55                   	push   %ebp
4000079c:	89 e5                	mov    %esp,%ebp
4000079e:	83 ec 34             	sub    $0x34,%esp
400007a1:	8b 45 08             	mov    0x8(%ebp),%eax
400007a4:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
400007ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007ae:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007b1:	50                   	push   %eax
400007b2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400007ce:	e8 d5 0b 00 00       	call   400013a8 <syscall>
400007d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007d6:	c9                   	leave  
400007d7:	c3                   	ret    

400007d8 <favailable>:
400007d8:	55                   	push   %ebp
400007d9:	89 e5                	mov    %esp,%ebp
400007db:	83 ec 34             	sub    $0x34,%esp
400007de:	8b 45 08             	mov    0x8(%ebp),%eax
400007e1:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400007e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400007eb:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007ee:	50                   	push   %eax
400007ef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000804:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000080b:	e8 98 0b 00 00       	call   400013a8 <syscall>
40000810:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000813:	c9                   	leave  
40000814:	c3                   	ret    

40000815 <fclose>:
            color = nchar;
            continue;
        }

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
40000815:	55                   	push   %ebp
40000816:	89 e5                	mov    %esp,%ebp
40000818:	83 ec 34             	sub    $0x34,%esp
            }
            else
            {
                x--;
            }
            ochar = ' ';
4000081b:	8b 45 08             	mov    0x8(%ebp),%eax
4000081e:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000825:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            nchar = 0;
        }
40000828:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000082b:	50                   	push   %eax
            }
            else
            {
                x--;
            }
            ochar = ' ';
4000082c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000833:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000083a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            nchar = 0;
        }
40000848:	e8 5b 0b 00 00       	call   400013a8 <syscall>

        uint16_t send = 0;
        char* sndChr = (char*) &send;
4000084d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000850:	c9                   	leave  
40000851:	c3                   	ret    

40000852 <fopen>:
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000852:	55                   	push   %ebp
40000853:	89 e5                	mov    %esp,%ebp
40000855:	83 ec 34             	sub    $0x34,%esp

        if (nchar == '\n') {
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
40000858:	8b 45 08             	mov    0x8(%ebp),%eax
4000085b:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000862:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000865:	8b 45 0c             	mov    0xc(%ebp),%eax
40000868:	89 45 e8             	mov    %eax,-0x18(%ebp)
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
4000086b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000086e:	50                   	push   %eax

        if (nchar == '\n') {
            continue;
        }

        if(nchar == 0x11) { //0x11 = SETCLR
4000086f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000876:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000087d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
40000884:	e8 1f 0b 00 00       	call   400013a8 <syscall>
            continue;
        }

40000889:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000088c:	c9                   	leave  
4000088d:	c3                   	ret    

4000088e <fopenpmhandle>:
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
4000088e:	55                   	push   %ebp
4000088f:	89 e5                	mov    %esp,%ebp
40000891:	83 ec 34             	sub    $0x34,%esp
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000894:	8b 45 08             	mov    0x8(%ebp),%eax
40000897:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
4000089e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400008a1:	8b 45 0c             	mov    0xc(%ebp),%eax
400008a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
400008a7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008aa:	50                   	push   %eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

400008ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
400008c0:	e8 e3 0a 00 00       	call   400013a8 <syscall>
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
400008c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008c8:	c9                   	leave  
400008c9:	c3                   	ret    

400008ca <setstderr>:
            x = 0;
            y++;
        }

400008ca:	55                   	push   %ebp
400008cb:	89 e5                	mov    %esp,%ebp
400008cd:	83 ec 10             	sub    $0x10,%esp
400008d0:	ff 75 08             	pushl  0x8(%ebp)
400008d3:	6a 03                	push   $0x3
400008d5:	e8 b4 ff ff ff       	call   4000088e <fopenpmhandle>
400008da:	c9                   	leave  
400008db:	c3                   	ret    

400008dc <setstdin>:
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }
400008dc:	55                   	push   %ebp
400008dd:	89 e5                	mov    %esp,%ebp
400008df:	83 ec 10             	sub    $0x10,%esp
400008e2:	ff 75 08             	pushl  0x8(%ebp)
400008e5:	6a 02                	push   $0x2
400008e7:	e8 a2 ff ff ff       	call   4000088e <fopenpmhandle>
400008ec:	c9                   	leave  
400008ed:	c3                   	ret    

400008ee <setstdout>:
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
400008ee:	55                   	push   %ebp
400008ef:	89 e5                	mov    %esp,%ebp
400008f1:	83 ec 10             	sub    $0x10,%esp
400008f4:	ff 75 08             	pushl  0x8(%ebp)
400008f7:	6a 01                	push   $0x1
400008f9:	e8 90 ff ff ff       	call   4000088e <fopenpmhandle>
400008fe:	c9                   	leave  
400008ff:	c3                   	ret    

40000900 <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"
40000900:	55                   	push   %ebp
40000901:	89 e5                	mov    %esp,%ebp
40000903:	83 ec 34             	sub    $0x34,%esp

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40000906:	8d 45 e0             	lea    -0x20(%ebp),%eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40000909:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    uint16_t value;
};
40000910:	50                   	push   %eax
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
40000911:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000918:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000091f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000926:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000092d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t value;
};
40000934:	e8 6f 0a 00 00       	call   400013a8 <syscall>

static int  x     = 0;
static int  y     = 0;
40000939:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000093c:	c9                   	leave  
4000093d:	c3                   	ret    

4000093e <fwrite>:
4000093e:	55                   	push   %ebp
4000093f:	89 e5                	mov    %esp,%ebp
40000941:	57                   	push   %edi
40000942:	56                   	push   %esi
40000943:	53                   	push   %ebx
40000944:	83 ec 3c             	sub    $0x3c,%esp
40000947:	8b 45 08             	mov    0x8(%ebp),%eax
4000094a:	8b 7d 10             	mov    0x10(%ebp),%edi
4000094d:	e8 02 fe ff ff       	call   40000754 <resolveHandle>
40000952:	83 ec 0c             	sub    $0xc,%esp
40000955:	89 c6                	mov    %eax,%esi
40000957:	89 45 d4             	mov    %eax,-0x2c(%ebp)
4000095a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000095d:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000964:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000967:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000096a:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000096d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000974:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000097b:	50                   	push   %eax
4000097c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
4000097f:	eb 2d                	jmp    400009ae <fwrite+0x70>
40000981:	e8 12 fb ff ff       	call   40000498 <yield>
40000986:	8b 45 0c             	mov    0xc(%ebp),%eax
40000989:	83 ec 0c             	sub    $0xc,%esp
4000098c:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000098f:	8d 45 d0             	lea    -0x30(%ebp),%eax
40000992:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000999:	89 75 d4             	mov    %esi,-0x2c(%ebp)
4000099c:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000099f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400009a6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400009ad:	50                   	push   %eax
400009ae:	e8 f5 09 00 00       	call   400013a8 <syscall>
400009b3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
400009b6:	83 c4 10             	add    $0x10,%esp
400009b9:	83 fb 01             	cmp    $0x1,%ebx
400009bc:	74 c3                	je     40000981 <fwrite+0x43>
400009be:	89 f0                	mov    %esi,%eax
400009c0:	89 da                	mov    %ebx,%edx
400009c2:	e8 3d 02 00 00       	call   40000c04 <printrwerror>
400009c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
400009ca:	89 d8                	mov    %ebx,%eax
400009cc:	5b                   	pop    %ebx
400009cd:	5e                   	pop    %esi
400009ce:	5f                   	pop    %edi
400009cf:	5d                   	pop    %ebp
400009d0:	c3                   	ret    

400009d1 <fputs>:
400009d1:	55                   	push   %ebp
400009d2:	89 e5                	mov    %esp,%ebp
400009d4:	56                   	push   %esi
400009d5:	53                   	push   %ebx
400009d6:	83 ec 20             	sub    $0x20,%esp
400009d9:	8b 45 0c             	mov    0xc(%ebp),%eax
400009dc:	8b 5d 08             	mov    0x8(%ebp),%ebx
400009df:	e8 70 fd ff ff       	call   40000754 <resolveHandle>
400009e4:	89 c6                	mov    %eax,%esi
400009e6:	85 c0                	test   %eax,%eax
400009e8:	74 16                	je     40000a00 <fputs+0x2f>
400009ea:	83 ec 0c             	sub    $0xc,%esp
400009ed:	53                   	push   %ebx
400009ee:	e8 a7 04 00 00       	call   40000e9a <strlen>
400009f3:	83 c4 0c             	add    $0xc,%esp
400009f6:	50                   	push   %eax
400009f7:	53                   	push   %ebx
400009f8:	56                   	push   %esi
400009f9:	e8 40 ff ff ff       	call   4000093e <fwrite>
400009fe:	eb 35                	jmp    40000a35 <fputs+0x64>
40000a00:	83 ec 0c             	sub    $0xc,%esp
40000a03:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a06:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000a0d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000a10:	50                   	push   %eax
40000a11:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000a18:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000a1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000a26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a2d:	e8 76 09 00 00       	call   400013a8 <syscall>
40000a32:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000a35:	83 c4 10             	add    $0x10,%esp
40000a38:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a3b:	5b                   	pop    %ebx
40000a3c:	5e                   	pop    %esi
40000a3d:	5d                   	pop    %ebp
40000a3e:	c3                   	ret    

40000a3f <puts>:
40000a3f:	55                   	push   %ebp
40000a40:	89 e5                	mov    %esp,%ebp
40000a42:	83 ec 10             	sub    $0x10,%esp
40000a45:	6a 01                	push   $0x1
40000a47:	ff 75 08             	pushl  0x8(%ebp)
40000a4a:	e8 82 ff ff ff       	call   400009d1 <fputs>
40000a4f:	c9                   	leave  
40000a50:	c3                   	ret    

40000a51 <putn>:
40000a51:	55                   	push   %ebp
40000a52:	89 e5                	mov    %esp,%ebp
40000a54:	56                   	push   %esi
40000a55:	53                   	push   %ebx
40000a56:	31 f6                	xor    %esi,%esi
40000a58:	83 ec 50             	sub    $0x50,%esp
40000a5b:	89 d3                	mov    %edx,%ebx
40000a5d:	83 fa 24             	cmp    $0x24,%edx
40000a60:	7f 25                	jg     40000a87 <putn+0x36>
40000a62:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000a66:	8d 4d f7             	lea    -0x9(%ebp),%ecx
40000a69:	31 d2                	xor    %edx,%edx
40000a6b:	49                   	dec    %ecx
40000a6c:	f7 f3                	div    %ebx
40000a6e:	46                   	inc    %esi
40000a6f:	85 c0                	test   %eax,%eax
40000a71:	8a 92 89 31 00 40    	mov    0x40003189(%edx),%dl
40000a77:	88 11                	mov    %dl,(%ecx)
40000a79:	75 ee                	jne    40000a69 <putn+0x18>
40000a7b:	83 ec 0c             	sub    $0xc,%esp
40000a7e:	51                   	push   %ecx
40000a7f:	e8 bb ff ff ff       	call   40000a3f <puts>
40000a84:	83 c4 10             	add    $0x10,%esp
40000a87:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a8a:	89 f0                	mov    %esi,%eax
40000a8c:	5b                   	pop    %ebx
40000a8d:	5e                   	pop    %esi
40000a8e:	5d                   	pop    %ebp
40000a8f:	c3                   	ret    

40000a90 <fputc>:
40000a90:	55                   	push   %ebp
40000a91:	89 e5                	mov    %esp,%ebp
40000a93:	83 ec 38             	sub    $0x38,%esp
40000a96:	8b 45 08             	mov    0x8(%ebp),%eax
40000a99:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a9f:	e8 b0 fc ff ff       	call   40000754 <resolveHandle>
40000aa4:	85 c0                	test   %eax,%eax
40000aa6:	74 0f                	je     40000ab7 <fputc+0x27>
40000aa8:	52                   	push   %edx
40000aa9:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000aac:	6a 01                	push   $0x1
40000aae:	52                   	push   %edx
40000aaf:	50                   	push   %eax
40000ab0:	e8 89 fe ff ff       	call   4000093e <fwrite>
40000ab5:	eb 39                	jmp    40000af0 <fputc+0x60>
40000ab7:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000abb:	83 ec 0c             	sub    $0xc,%esp
40000abe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000ac1:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000ac4:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000acb:	50                   	push   %eax
40000acc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000ad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000ada:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000ae1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000ae8:	e8 bb 08 00 00       	call   400013a8 <syscall>
40000aed:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000af0:	83 c4 10             	add    $0x10,%esp
40000af3:	c9                   	leave  
40000af4:	c3                   	ret    

40000af5 <putc>:
40000af5:	55                   	push   %ebp
40000af6:	89 e5                	mov    %esp,%ebp
40000af8:	83 ec 08             	sub    $0x8,%esp
40000afb:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000aff:	89 45 08             	mov    %eax,0x8(%ebp)
40000b02:	c9                   	leave  
40000b03:	e9 88 ff ff ff       	jmp    40000a90 <fputc>

40000b08 <putchar>:
40000b08:	55                   	push   %ebp
40000b09:	89 e5                	mov    %esp,%ebp
40000b0b:	83 ec 10             	sub    $0x10,%esp
40000b0e:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000b12:	6a 01                	push   $0x1
40000b14:	50                   	push   %eax
40000b15:	e8 76 ff ff ff       	call   40000a90 <fputc>
40000b1a:	c9                   	leave  
40000b1b:	c3                   	ret    

40000b1c <printf>:
40000b1c:	55                   	push   %ebp
40000b1d:	89 e5                	mov    %esp,%ebp
40000b1f:	57                   	push   %edi
40000b20:	56                   	push   %esi
40000b21:	53                   	push   %ebx
40000b22:	83 ec 1c             	sub    $0x1c,%esp
40000b25:	8d 75 0c             	lea    0xc(%ebp),%esi
40000b28:	8b 7d 08             	mov    0x8(%ebp),%edi
40000b2b:	31 db                	xor    %ebx,%ebx
40000b2d:	e9 be 00 00 00       	jmp    40000bf0 <printf+0xd4>
40000b32:	3c 25                	cmp    $0x25,%al
40000b34:	0f 85 a4 00 00 00    	jne    40000bde <printf+0xc2>
40000b3a:	47                   	inc    %edi
40000b3b:	8a 07                	mov    (%edi),%al
40000b3d:	3c 70                	cmp    $0x70,%al
40000b3f:	74 47                	je     40000b88 <printf+0x6c>
40000b41:	7f 1a                	jg     40000b5d <printf+0x41>
40000b43:	3c 63                	cmp    $0x63,%al
40000b45:	74 5a                	je     40000ba1 <printf+0x85>
40000b47:	7f 0e                	jg     40000b57 <printf+0x3b>
40000b49:	84 c0                	test   %al,%al
40000b4b:	0f 84 a9 00 00 00    	je     40000bfa <printf+0xde>
40000b51:	3c 25                	cmp    $0x25,%al
40000b53:	75 6c                	jne    40000bc1 <printf+0xa5>
40000b55:	eb 63                	jmp    40000bba <printf+0x9e>
40000b57:	3c 64                	cmp    $0x64,%al
40000b59:	75 66                	jne    40000bc1 <printf+0xa5>
40000b5b:	eb 1e                	jmp    40000b7b <printf+0x5f>
40000b5d:	3c 75                	cmp    $0x75,%al
40000b5f:	74 1a                	je     40000b7b <printf+0x5f>
40000b61:	3c 78                	cmp    $0x78,%al
40000b63:	74 23                	je     40000b88 <printf+0x6c>
40000b65:	3c 73                	cmp    $0x73,%al
40000b67:	75 58                	jne    40000bc1 <printf+0xa5>
40000b69:	83 ec 0c             	sub    $0xc,%esp
40000b6c:	8d 46 04             	lea    0x4(%esi),%eax
40000b6f:	ff 36                	pushl  (%esi)
40000b71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b74:	e8 c6 fe ff ff       	call   40000a3f <puts>
40000b79:	eb 38                	jmp    40000bb3 <printf+0x97>
40000b7b:	8d 46 04             	lea    0x4(%esi),%eax
40000b7e:	ba 0a 00 00 00       	mov    $0xa,%edx
40000b83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b86:	eb 0b                	jmp    40000b93 <printf+0x77>
40000b88:	8d 46 04             	lea    0x4(%esi),%eax
40000b8b:	ba 10 00 00 00       	mov    $0x10,%edx
40000b90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b93:	8b 06                	mov    (%esi),%eax
40000b95:	e8 b7 fe ff ff       	call   40000a51 <putn>
40000b9a:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000b9d:	01 c3                	add    %eax,%ebx
40000b9f:	eb 4e                	jmp    40000bef <printf+0xd3>
40000ba1:	8d 46 04             	lea    0x4(%esi),%eax
40000ba4:	83 ec 0c             	sub    $0xc,%esp
40000ba7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000baa:	0f be 06             	movsbl (%esi),%eax
40000bad:	50                   	push   %eax
40000bae:	e8 55 ff ff ff       	call   40000b08 <putchar>
40000bb3:	01 c3                	add    %eax,%ebx
40000bb5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000bb8:	eb 32                	jmp    40000bec <printf+0xd0>
40000bba:	83 ec 0c             	sub    $0xc,%esp
40000bbd:	6a 25                	push   $0x25
40000bbf:	eb 24                	jmp    40000be5 <printf+0xc9>
40000bc1:	83 ec 0c             	sub    $0xc,%esp
40000bc4:	6a 25                	push   $0x25
40000bc6:	e8 3d ff ff ff       	call   40000b08 <putchar>
40000bcb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000bce:	0f be 07             	movsbl (%edi),%eax
40000bd1:	89 04 24             	mov    %eax,(%esp)
40000bd4:	e8 2f ff ff ff       	call   40000b08 <putchar>
40000bd9:	03 45 e4             	add    -0x1c(%ebp),%eax
40000bdc:	eb 0c                	jmp    40000bea <printf+0xce>
40000bde:	83 ec 0c             	sub    $0xc,%esp
40000be1:	0f be c0             	movsbl %al,%eax
40000be4:	50                   	push   %eax
40000be5:	e8 1e ff ff ff       	call   40000b08 <putchar>
40000bea:	01 c3                	add    %eax,%ebx
40000bec:	83 c4 10             	add    $0x10,%esp
40000bef:	47                   	inc    %edi
40000bf0:	8a 07                	mov    (%edi),%al
40000bf2:	84 c0                	test   %al,%al
40000bf4:	0f 85 38 ff ff ff    	jne    40000b32 <printf+0x16>
40000bfa:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bfd:	89 d8                	mov    %ebx,%eax
40000bff:	5b                   	pop    %ebx
40000c00:	5e                   	pop    %esi
40000c01:	5f                   	pop    %edi
40000c02:	5d                   	pop    %ebp
40000c03:	c3                   	ret    

40000c04 <printrwerror>:
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
40000c04:	55                   	push   %ebp
40000c05:	89 e5                	mov    %esp,%ebp
40000c07:	83 ec 08             	sub    $0x8,%esp
        sndChr[1] = color;
40000c0a:	83 fa 02             	cmp    $0x2,%edx
40000c0d:	75 0a                	jne    40000c19 <printrwerror+0x15>

40000c0f:	52                   	push   %edx
40000c10:	52                   	push   %edx
40000c11:	50                   	push   %eax
40000c12:	68 ae 31 00 40       	push   $0x400031ae
40000c17:	eb 2b                	jmp    40000c44 <printrwerror+0x40>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000c19:	83 fa 03             	cmp    $0x3,%edx
40000c1c:	75 0a                	jne    40000c28 <printrwerror+0x24>
            x++;
40000c1e:	51                   	push   %ecx
40000c1f:	51                   	push   %ecx
40000c20:	50                   	push   %eax
40000c21:	68 c6 31 00 40       	push   $0x400031c6
40000c26:	eb 1c                	jmp    40000c44 <printrwerror+0x40>
        }
    }

40000c28:	83 fa 04             	cmp    $0x4,%edx
40000c2b:	75 0a                	jne    40000c37 <printrwerror+0x33>
    return 0;
40000c2d:	52                   	push   %edx
40000c2e:	52                   	push   %edx
40000c2f:	50                   	push   %eax
40000c30:	68 e1 31 00 40       	push   $0x400031e1
40000c35:	eb 0d                	jmp    40000c44 <printrwerror+0x40>
}
40000c37:	83 fa 05             	cmp    $0x5,%edx
40000c3a:	75 10                	jne    40000c4c <printrwerror+0x48>
40000c3c:	51                   	push   %ecx
40000c3d:	51                   	push   %ecx
40000c3e:	50                   	push   %eax
40000c3f:	68 0b 32 00 40       	push   $0x4000320b
40000c44:	e8 d3 fe ff ff       	call   40000b1c <printf>
40000c49:	83 c4 10             	add    $0x10,%esp
40000c4c:	c9                   	leave  
40000c4d:	c3                   	ret    

40000c4e <fread>:
40000c4e:	55                   	push   %ebp
40000c4f:	89 e5                	mov    %esp,%ebp
40000c51:	57                   	push   %edi
40000c52:	56                   	push   %esi
40000c53:	53                   	push   %ebx
40000c54:	83 ec 38             	sub    $0x38,%esp
40000c57:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c5d:	8b 75 08             	mov    0x8(%ebp),%esi
40000c60:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c63:	8b 45 10             	mov    0x10(%ebp),%eax
40000c66:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000c6d:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000c70:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000c73:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000c7a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000c81:	eb 2c                	jmp    40000caf <fread+0x61>
40000c83:	e8 10 f8 ff ff       	call   40000498 <yield>
40000c88:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c8e:	8b 45 10             	mov    0x10(%ebp),%eax
40000c91:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000c98:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000c9b:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000c9e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000ca5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000cac:	83 ec 0c             	sub    $0xc,%esp
40000caf:	57                   	push   %edi
40000cb0:	e8 f3 06 00 00       	call   400013a8 <syscall>
40000cb5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000cb8:	83 c4 10             	add    $0x10,%esp
40000cbb:	83 fb 01             	cmp    $0x1,%ebx
40000cbe:	74 c3                	je     40000c83 <fread+0x35>
40000cc0:	89 f0                	mov    %esi,%eax
40000cc2:	89 da                	mov    %ebx,%edx
40000cc4:	e8 3b ff ff ff       	call   40000c04 <printrwerror>
40000cc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000ccc:	89 d8                	mov    %ebx,%eax
40000cce:	5b                   	pop    %ebx
40000ccf:	5e                   	pop    %esi
40000cd0:	5f                   	pop    %edi
40000cd1:	5d                   	pop    %ebp
40000cd2:	c3                   	ret    

40000cd3 <fgetc>:
40000cd3:	55                   	push   %ebp
40000cd4:	89 e5                	mov    %esp,%ebp
40000cd6:	83 ec 18             	sub    $0x18,%esp
40000cd9:	8b 45 08             	mov    0x8(%ebp),%eax
40000cdc:	e8 73 fa ff ff       	call   40000754 <resolveHandle>
40000ce1:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000ce5:	85 c0                	test   %eax,%eax
40000ce7:	74 10                	je     40000cf9 <fgetc+0x26>
40000ce9:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000cec:	51                   	push   %ecx
40000ced:	6a 01                	push   $0x1
40000cef:	52                   	push   %edx
40000cf0:	50                   	push   %eax
40000cf1:	e8 58 ff ff ff       	call   40000c4e <fread>
40000cf6:	83 c4 10             	add    $0x10,%esp
40000cf9:	8a 45 f7             	mov    -0x9(%ebp),%al
40000cfc:	c9                   	leave  
40000cfd:	c3                   	ret    

40000cfe <getchar>:
40000cfe:	55                   	push   %ebp
40000cff:	89 e5                	mov    %esp,%ebp
40000d01:	83 ec 14             	sub    $0x14,%esp
40000d04:	6a 02                	push   $0x2
40000d06:	e8 c8 ff ff ff       	call   40000cd3 <fgetc>
40000d0b:	c9                   	leave  
40000d0c:	c3                   	ret    

40000d0d <getc>:
40000d0d:	55                   	push   %ebp
40000d0e:	89 e5                	mov    %esp,%ebp
40000d10:	83 ec 08             	sub    $0x8,%esp
40000d13:	c9                   	leave  
40000d14:	e9 ba ff ff ff       	jmp    40000cd3 <fgetc>

40000d19 <fgets>:
40000d19:	55                   	push   %ebp
40000d1a:	89 e5                	mov    %esp,%ebp
40000d1c:	57                   	push   %edi
40000d1d:	56                   	push   %esi
40000d1e:	53                   	push   %ebx
40000d1f:	83 ec 1c             	sub    $0x1c,%esp
40000d22:	31 db                	xor    %ebx,%ebx
40000d24:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000d27:	8b 75 08             	mov    0x8(%ebp),%esi
40000d2a:	8d 47 ff             	lea    -0x1(%edi),%eax
40000d2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000d30:	eb 16                	jmp    40000d48 <fgets+0x2f>
40000d32:	83 ec 0c             	sub    $0xc,%esp
40000d35:	ff 75 10             	pushl  0x10(%ebp)
40000d38:	e8 96 ff ff ff       	call   40000cd3 <fgetc>
40000d3d:	83 c4 10             	add    $0x10,%esp
40000d40:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d43:	84 c0                	test   %al,%al
40000d45:	74 0a                	je     40000d51 <fgets+0x38>
40000d47:	43                   	inc    %ebx
40000d48:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000d4b:	7c e5                	jl     40000d32 <fgets+0x19>
40000d4d:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000d51:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000d54:	89 f0                	mov    %esi,%eax
40000d56:	5b                   	pop    %ebx
40000d57:	5e                   	pop    %esi
40000d58:	5f                   	pop    %edi
40000d59:	5d                   	pop    %ebp
40000d5a:	c3                   	ret    

40000d5b <getln>:
40000d5b:	55                   	push   %ebp
40000d5c:	89 e5                	mov    %esp,%ebp
40000d5e:	56                   	push   %esi
40000d5f:	53                   	push   %ebx
40000d60:	31 db                	xor    %ebx,%ebx
40000d62:	8b 75 08             	mov    0x8(%ebp),%esi
40000d65:	eb 42                	jmp    40000da9 <getln+0x4e>
40000d67:	3c 0a                	cmp    $0xa,%al
40000d69:	75 0f                	jne    40000d7a <getln+0x1f>
40000d6b:	83 ec 0c             	sub    $0xc,%esp
40000d6e:	6a 0a                	push   $0xa
40000d70:	e8 93 fd ff ff       	call   40000b08 <putchar>
40000d75:	83 c4 10             	add    $0x10,%esp
40000d78:	eb 40                	jmp    40000dba <getln+0x5f>
40000d7a:	3c 08                	cmp    $0x8,%al
40000d7c:	75 18                	jne    40000d96 <getln+0x3b>
40000d7e:	85 db                	test   %ebx,%ebx
40000d80:	74 0e                	je     40000d90 <getln+0x35>
40000d82:	83 ec 0c             	sub    $0xc,%esp
40000d85:	4b                   	dec    %ebx
40000d86:	6a 08                	push   $0x8
40000d88:	e8 7b fd ff ff       	call   40000b08 <putchar>
40000d8d:	83 c4 10             	add    $0x10,%esp
40000d90:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000d94:	eb 13                	jmp    40000da9 <getln+0x4e>
40000d96:	83 ec 0c             	sub    $0xc,%esp
40000d99:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d9c:	0f be c0             	movsbl %al,%eax
40000d9f:	50                   	push   %eax
40000da0:	43                   	inc    %ebx
40000da1:	e8 62 fd ff ff       	call   40000b08 <putchar>
40000da6:	83 c4 10             	add    $0x10,%esp
40000da9:	83 ec 0c             	sub    $0xc,%esp
40000dac:	6a 02                	push   $0x2
40000dae:	e8 20 ff ff ff       	call   40000cd3 <fgetc>
40000db3:	83 c4 10             	add    $0x10,%esp
40000db6:	84 c0                	test   %al,%al
40000db8:	75 ad                	jne    40000d67 <getln+0xc>
40000dba:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000dbe:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000dc1:	89 f0                	mov    %esi,%eax
40000dc3:	5b                   	pop    %ebx
40000dc4:	5e                   	pop    %esi
40000dc5:	5d                   	pop    %ebp
40000dc6:	c3                   	ret    
	...

40000dc8 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
40000dc8:	55                   	push   %ebp
40000dc9:	89 e5                	mov    %esp,%ebp
40000dcb:	53                   	push   %ebx
40000dcc:	8b 45 08             	mov    0x8(%ebp),%eax
40000dcf:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000dd2:	8b 4d 10             	mov    0x10(%ebp),%ecx
#include "process.h"
40000dd5:	89 c2                	mov    %eax,%edx

#define CMD_SET    0
40000dd7:	eb 04                	jmp    40000ddd <memset+0x15>
#define CMD_CLEAR  1
40000dd9:	88 1a                	mov    %bl,(%edx)
40000ddb:	49                   	dec    %ecx
40000ddc:	42                   	inc    %edx
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "process.h"

#define CMD_SET    0
40000ddd:	85 c9                	test   %ecx,%ecx
40000ddf:	75 f8                	jne    40000dd9 <memset+0x11>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40000de1:	5b                   	pop    %ebx
40000de2:	5d                   	pop    %ebp
40000de3:	c3                   	ret    

40000de4 <memcpy>:
    uint16_t offset;
    uint16_t value;
40000de4:	55                   	push   %ebp
};

static int  x     = 0;
static int  y     = 0;
40000de5:	31 c9                	xor    %ecx,%ecx
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
40000de7:	89 e5                	mov    %esp,%ebp
40000de9:	56                   	push   %esi
40000dea:	53                   	push   %ebx
40000deb:	8b 75 10             	mov    0x10(%ebp),%esi
40000dee:	8b 45 08             	mov    0x8(%ebp),%eax
40000df1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
};

static int  x     = 0;
static int  y     = 0;
40000df4:	85 f6                	test   %esi,%esi
40000df6:	75 04                	jne    40000dfc <memcpy+0x18>
40000df8:	31 c0                	xor    %eax,%eax
40000dfa:	eb 0a                	jmp    40000e06 <memcpy+0x22>
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40000dfc:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000dff:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000e02:	41                   	inc    %ecx
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

40000e03:	4e                   	dec    %esi
40000e04:	75 f6                	jne    40000dfc <memcpy+0x18>
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000e06:	5b                   	pop    %ebx
40000e07:	5e                   	pop    %esi
40000e08:	5d                   	pop    %ebp
40000e09:	c3                   	ret    

40000e0a <memcmp>:
    vgac.command = c;
    vgac.offset = o;
40000e0a:	55                   	push   %ebp
    vgac.value = v;
40000e0b:	83 c8 ff             	or     $0xffffffff,%eax

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
40000e0e:	89 e5                	mov    %esp,%ebp
40000e10:	57                   	push   %edi
40000e11:	56                   	push   %esi
40000e12:	53                   	push   %ebx
40000e13:	8b 75 08             	mov    0x8(%ebp),%esi
40000e16:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000e19:	8b 5d 10             	mov    0x10(%ebp),%ebx
    vgac.value = v;
40000e1c:	85 f6                	test   %esi,%esi
40000e1e:	74 2c                	je     40000e4c <memcmp+0x42>

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000e20:	b8 01 00 00 00       	mov    $0x1,%eax
40000e25:	85 ff                	test   %edi,%edi
40000e27:	74 23                	je     40000e4c <memcmp+0x42>
}

40000e29:	31 d2                	xor    %edx,%edx
40000e2b:	85 db                	test   %ebx,%ebx
40000e2d:	75 17                	jne    40000e46 <memcmp+0x3c>
40000e2f:	eb 19                	jmp    40000e4a <memcmp+0x40>
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
40000e31:	8a 04 16             	mov    (%esi,%edx,1),%al
40000e34:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000e37:	38 c8                	cmp    %cl,%al
40000e39:	74 0a                	je     40000e45 <memcmp+0x3b>

40000e3b:	0f b6 c0             	movzbl %al,%eax
40000e3e:	0f b6 c9             	movzbl %cl,%ecx
40000e41:	29 c8                	sub    %ecx,%eax
40000e43:	eb 07                	jmp    40000e4c <memcmp+0x42>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
40000e45:	42                   	inc    %edx
40000e46:	39 da                	cmp    %ebx,%edx
40000e48:	72 e7                	jb     40000e31 <memcmp+0x27>
40000e4a:	31 c0                	xor    %eax,%eax
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
40000e4c:	5b                   	pop    %ebx
40000e4d:	5e                   	pop    %esi
40000e4e:	5f                   	pop    %edi
40000e4f:	5d                   	pop    %ebp
40000e50:	c3                   	ret    

40000e51 <strcmp>:

    sendCommand(CMD_CLEAR, 0, 0);
40000e51:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e52:	31 c0                	xor    %eax,%eax
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000e54:	89 e5                	mov    %esp,%ebp
40000e56:	56                   	push   %esi
40000e57:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e58:	31 db                	xor    %ebx,%ebx
    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

    sendCommand(CMD_CLEAR, 0, 0);
40000e5a:	8b 55 08             	mov    0x8(%ebp),%edx
40000e5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e60:	85 d2                	test   %edx,%edx
40000e62:	75 03                	jne    40000e67 <strcmp+0x16>
40000e64:	eb 09                	jmp    40000e6f <strcmp+0x1e>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000e66:	40                   	inc    %eax
40000e67:	89 c3                	mov    %eax,%ebx
40000e69:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000e6d:	75 f7                	jne    40000e66 <strcmp+0x15>
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000e6f:	31 c0                	xor    %eax,%eax
40000e71:	31 f6                	xor    %esi,%esi
40000e73:	85 c9                	test   %ecx,%ecx
40000e75:	75 03                	jne    40000e7a <strcmp+0x29>
40000e77:	eb 09                	jmp    40000e82 <strcmp+0x31>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000e79:	40                   	inc    %eax
40000e7a:	89 c6                	mov    %eax,%esi
40000e7c:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000e80:	75 f7                	jne    40000e79 <strcmp+0x28>
    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

40000e82:	89 f0                	mov    %esi,%eax
40000e84:	39 de                	cmp    %ebx,%esi
40000e86:	7e 02                	jle    40000e8a <strcmp+0x39>
40000e88:	89 d8                	mov    %ebx,%eax
40000e8a:	40                   	inc    %eax
40000e8b:	50                   	push   %eax
40000e8c:	51                   	push   %ecx
40000e8d:	52                   	push   %edx
40000e8e:	e8 77 ff ff ff       	call   40000e0a <memcmp>
    char nchar = '\0';
40000e93:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e96:	5b                   	pop    %ebx
40000e97:	5e                   	pop    %esi
40000e98:	5d                   	pop    %ebp
40000e99:	c3                   	ret    

40000e9a <strlen>:
    char ochar = '\0';

40000e9a:	55                   	push   %ebp
    while(1) {
40000e9b:	31 d2                	xor    %edx,%edx
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000e9d:	89 e5                	mov    %esp,%ebp
    while(1) {
40000e9f:	31 c0                	xor    %eax,%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

40000ea1:	8b 4d 08             	mov    0x8(%ebp),%ecx
    while(1) {
40000ea4:	85 c9                	test   %ecx,%ecx
40000ea6:	75 03                	jne    40000eab <strlen+0x11>
40000ea8:	eb 09                	jmp    40000eb3 <strlen+0x19>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000eaa:	42                   	inc    %edx
40000eab:	89 d0                	mov    %edx,%eax
40000ead:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000eb1:	75 f7                	jne    40000eaa <strlen+0x10>
        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
40000eb3:	5d                   	pop    %ebp
40000eb4:	c3                   	ret    

40000eb5 <strcpy>:
        }

40000eb5:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000eb6:	31 d2                	xor    %edx,%edx

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000eb8:	89 e5                	mov    %esp,%ebp
40000eba:	56                   	push   %esi
40000ebb:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ebc:	31 c9                	xor    %ecx,%ecx

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

40000ebe:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ec1:	8b 45 08             	mov    0x8(%ebp),%eax
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ec4:	85 db                	test   %ebx,%ebx
40000ec6:	75 03                	jne    40000ecb <strcpy+0x16>
40000ec8:	eb 09                	jmp    40000ed3 <strcpy+0x1e>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000eca:	42                   	inc    %edx
40000ecb:	89 d1                	mov    %edx,%ecx
40000ecd:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000ed1:	75 f7                	jne    40000eca <strcpy+0x15>
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
40000ed3:	89 ce                	mov    %ecx,%esi
40000ed5:	46                   	inc    %esi
40000ed6:	74 0c                	je     40000ee4 <strcpy+0x2f>
40000ed8:	31 d2                	xor    %edx,%edx
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };
40000eda:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000edd:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000ee0:	42                   	inc    %edx
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

40000ee1:	4e                   	dec    %esi
40000ee2:	75 f6                	jne    40000eda <strcpy+0x25>
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
40000ee4:	5b                   	pop    %ebx
40000ee5:	5e                   	pop    %esi
40000ee6:	5d                   	pop    %ebp
40000ee7:	c3                   	ret    

40000ee8 <strtoknc>:
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
40000ee8:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ee9:	31 c0                	xor    %eax,%eax
            else
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
40000eeb:	89 e5                	mov    %esp,%ebp
40000eed:	57                   	push   %edi
40000eee:	56                   	push   %esi
40000eef:	53                   	push   %ebx
40000ef0:	83 ec 04             	sub    $0x4,%esp
40000ef3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ef6:	8b 4d 08             	mov    0x8(%ebp),%ecx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000ef9:	85 db                	test   %ebx,%ebx
40000efb:	75 06                	jne    40000f03 <strtoknc+0x1b>
40000efd:	e9 83 00 00 00       	jmp    40000f85 <strtoknc+0x9d>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000f02:	40                   	inc    %eax
40000f03:	89 c7                	mov    %eax,%edi
40000f05:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000f09:	75 f7                	jne    40000f02 <strtoknc+0x1a>
            nchar = 0;
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

40000f0b:	85 c0                	test   %eax,%eax
40000f0d:	74 76                	je     40000f85 <strtoknc+0x9d>
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);
40000f0f:	85 c9                	test   %ecx,%ecx
40000f11:	75 0b                	jne    40000f1e <strtoknc+0x36>
40000f13:	83 3d 10 42 00 40 00 	cmpl   $0x0,0x40004210
40000f1a:	75 08                	jne    40000f24 <strtoknc+0x3c>
40000f1c:	eb 67                	jmp    40000f85 <strtoknc+0x9d>

        if(nchar != 0) {
            x++;
        }
    }
40000f1e:	89 0d 10 42 00 40    	mov    %ecx,0x40004210

    return 0;
}
40000f24:	a1 10 42 00 40       	mov    0x40004210,%eax
40000f29:	31 c9                	xor    %ecx,%ecx
40000f2b:	eb 0b                	jmp    40000f38 <strtoknc+0x50>
40000f2d:	8a 10                	mov    (%eax),%dl
40000f2f:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f32:	75 03                	jne    40000f37 <strtoknc+0x4f>
40000f34:	40                   	inc    %eax
40000f35:	eb 05                	jmp    40000f3c <strtoknc+0x54>

    return 0;
}
40000f37:	41                   	inc    %ecx
40000f38:	39 f9                	cmp    %edi,%ecx
40000f3a:	7c f1                	jl     40000f2d <strtoknc+0x45>
40000f3c:	39 f9                	cmp    %edi,%ecx
40000f3e:	75 e9                	jne    40000f29 <strtoknc+0x41>
40000f40:	a3 10 42 00 40       	mov    %eax,0x40004210
40000f45:	80 38 00             	cmpb   $0x0,(%eax)
40000f48:	75 28                	jne    40000f72 <strtoknc+0x8a>
40000f4a:	c7 05 10 42 00 40 00 	movl   $0x0,0x40004210
40000f51:	00 00 00 
40000f54:	eb 2f                	jmp    40000f85 <strtoknc+0x9d>
40000f56:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000f59:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f5c:	75 05                	jne    40000f63 <strtoknc+0x7b>
40000f5e:	c6 06 00             	movb   $0x0,(%esi)
40000f61:	eb 05                	jmp    40000f68 <strtoknc+0x80>
40000f63:	41                   	inc    %ecx
40000f64:	39 f9                	cmp    %edi,%ecx
40000f66:	7c ee                	jl     40000f56 <strtoknc+0x6e>
40000f68:	ff 05 10 42 00 40    	incl   0x40004210
40000f6e:	39 f9                	cmp    %edi,%ecx
40000f70:	7c 15                	jl     40000f87 <strtoknc+0x9f>
40000f72:	8b 35 10 42 00 40    	mov    0x40004210,%esi
40000f78:	8a 16                	mov    (%esi),%dl
40000f7a:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000f7d:	84 d2                	test   %dl,%dl
40000f7f:	74 06                	je     40000f87 <strtoknc+0x9f>
40000f81:	31 c9                	xor    %ecx,%ecx
40000f83:	eb df                	jmp    40000f64 <strtoknc+0x7c>
40000f85:	31 c0                	xor    %eax,%eax
40000f87:	5a                   	pop    %edx
40000f88:	5b                   	pop    %ebx
40000f89:	5e                   	pop    %esi
40000f8a:	5f                   	pop    %edi
40000f8b:	5d                   	pop    %ebp
40000f8c:	c3                   	ret    

40000f8d <strclone>:

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f8d:	55                   	push   %ebp
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f8e:	31 c0                	xor    %eax,%eax

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f90:	89 e5                	mov    %esp,%ebp
40000f92:	56                   	push   %esi
40000f93:	53                   	push   %ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f94:	31 d2                	xor    %edx,%edx

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

40000f96:	8b 5d 08             	mov    0x8(%ebp),%ebx
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
40000f99:	85 db                	test   %ebx,%ebx
40000f9b:	75 03                	jne    40000fa0 <strclone+0x13>
40000f9d:	eb 09                	jmp    40000fa8 <strclone+0x1b>
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000f9f:	40                   	inc    %eax
40000fa0:	89 c2                	mov    %eax,%edx
40000fa2:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000fa6:	75 f7                	jne    40000f9f <strclone+0x12>
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
40000fa8:	83 ec 0c             	sub    $0xc,%esp
40000fab:	42                   	inc    %edx
40000fac:	52                   	push   %edx
40000fad:	e8 af 01 00 00       	call   40001161 <malloc>
            continue;
40000fb2:	59                   	pop    %ecx
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
40000fb3:	89 c6                	mov    %eax,%esi
            continue;
40000fb5:	58                   	pop    %eax
40000fb6:	53                   	push   %ebx
40000fb7:	56                   	push   %esi
40000fb8:	e8 f8 fe ff ff       	call   40000eb5 <strcpy>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
40000fbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000fc0:	89 f0                	mov    %esi,%eax
40000fc2:	5b                   	pop    %ebx
40000fc3:	5e                   	pop    %esi
40000fc4:	5d                   	pop    %ebp
40000fc5:	c3                   	ret    

40000fc6 <strtok>:
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

40000fc6:	55                   	push   %ebp
40000fc7:	89 e5                	mov    %esp,%ebp
40000fc9:	56                   	push   %esi
40000fca:	53                   	push   %ebx
40000fcb:	8b 75 08             	mov    0x8(%ebp),%esi
40000fce:	8b 5d 0c             	mov    0xc(%ebp),%ebx
        if(nchar == 8) { //8 = BACKSPACE
40000fd1:	85 f6                	test   %esi,%esi
40000fd3:	74 2e                	je     40001003 <strtok+0x3d>
            if(x == 0) {
40000fd5:	a1 14 42 00 40       	mov    0x40004214,%eax
40000fda:	85 c0                	test   %eax,%eax
40000fdc:	74 0c                	je     40000fea <strtok+0x24>
                y--;
40000fde:	83 ec 0c             	sub    $0xc,%esp
40000fe1:	50                   	push   %eax
40000fe2:	e8 31 00 00 00       	call   40001018 <free>
40000fe7:	83 c4 10             	add    $0x10,%esp
                x = 79;
            }
40000fea:	83 ec 0c             	sub    $0xc,%esp
40000fed:	56                   	push   %esi
40000fee:	e8 9a ff ff ff       	call   40000f8d <strclone>
            else
40000ff3:	83 c4 10             	add    $0x10,%esp

        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
40000ff6:	a3 14 42 00 40       	mov    %eax,0x40004214
            else
40000ffb:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000ffe:	89 45 08             	mov    %eax,0x8(%ebp)
40001001:	eb 0a                	jmp    4000100d <strtok+0x47>
            {
                x--;
40001003:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40001006:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
            }
4000100d:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001010:	5b                   	pop    %ebx
40001011:	5e                   	pop    %esi
40001012:	5d                   	pop    %ebp
                y--;
                x = 79;
            }
            else
            {
                x--;
40001013:	e9 d0 fe ff ff       	jmp    40000ee8 <strtoknc>

40001018 <free>:
40001018:	55                   	push   %ebp
40001019:	89 e5                	mov    %esp,%ebp
4000101b:	57                   	push   %edi
4000101c:	56                   	push   %esi
4000101d:	53                   	push   %ebx
4000101e:	83 ec 08             	sub    $0x8,%esp
40001021:	8b 15 1c 42 00 40    	mov    0x4000421c,%edx
40001027:	8b 4d 08             	mov    0x8(%ebp),%ecx
4000102a:	89 d0                	mov    %edx,%eax
4000102c:	e9 b8 00 00 00       	jmp    400010e9 <free+0xd1>
40001031:	3b 48 04             	cmp    0x4(%eax),%ecx
40001034:	0f 85 ac 00 00 00    	jne    400010e6 <free+0xce>
4000103a:	31 c9                	xor    %ecx,%ecx
4000103c:	eb 23                	jmp    40001061 <free+0x49>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
4000103e:	39 c2                	cmp    %eax,%edx
40001040:	75 1a                	jne    4000105c <free+0x44>
    uint16_t value;
40001042:	85 c9                	test   %ecx,%ecx
40001044:	8b 50 08             	mov    0x8(%eax),%edx
40001047:	75 0e                	jne    40001057 <free+0x3f>
};
40001049:	89 15 1c 42 00 40    	mov    %edx,0x4000421c
4000104f:	8b 0d 20 42 00 40    	mov    0x40004220,%ecx
40001055:	eb 10                	jmp    40001067 <free+0x4f>

static int  x     = 0;
static int  y     = 0;
40001057:	89 51 08             	mov    %edx,0x8(%ecx)
4000105a:	eb f3                	jmp    4000104f <free+0x37>
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
4000105c:	89 d1                	mov    %edx,%ecx
4000105e:	8b 52 08             	mov    0x8(%edx),%edx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40001061:	85 d2                	test   %edx,%edx
40001063:	75 d9                	jne    4000103e <free+0x26>
40001065:	eb e8                	jmp    4000104f <free+0x37>
40001067:	89 ca                	mov    %ecx,%edx
40001069:	eb 6d                	jmp    400010d8 <free+0xc0>
            y--;
        }

        if (nchar == '\n') {
            continue;
        }
4000106b:	8b 5a 04             	mov    0x4(%edx),%ebx
4000106e:	8b 32                	mov    (%edx),%esi
40001070:	8b 78 04             	mov    0x4(%eax),%edi
40001073:	89 7d ec             	mov    %edi,-0x14(%ebp)
40001076:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40001079:	89 7d f0             	mov    %edi,-0x10(%ebp)
4000107c:	8b 7d ec             	mov    -0x14(%ebp),%edi
4000107f:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40001082:	75 18                	jne    4000109c <free+0x84>

40001084:	89 58 04             	mov    %ebx,0x4(%eax)
40001087:	31 f6                	xor    %esi,%esi
40001089:	89 cb                	mov    %ecx,%ebx
4000108b:	eb 09                	jmp    40001096 <free+0x7e>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
4000108d:	39 d3                	cmp    %edx,%ebx
4000108f:	74 29                	je     400010ba <free+0xa2>
static int  y     = 0;
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
40001091:	89 de                	mov    %ebx,%esi
40001093:	8b 5b 08             	mov    0x8(%ebx),%ebx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
40001096:	85 db                	test   %ebx,%ebx
40001098:	75 f3                	jne    4000108d <free+0x75>
4000109a:	eb cb                	jmp    40001067 <free+0x4f>

        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }
4000109c:	8b 38                	mov    (%eax),%edi
4000109e:	89 7d f0             	mov    %edi,-0x10(%ebp)
400010a1:	8b 7d ec             	mov    -0x14(%ebp),%edi
400010a4:	03 7d f0             	add    -0x10(%ebp),%edi
400010a7:	39 fb                	cmp    %edi,%ebx
400010a9:	75 2a                	jne    400010d5 <free+0xbd>

400010ab:	03 75 f0             	add    -0x10(%ebp),%esi
400010ae:	89 cb                	mov    %ecx,%ebx
400010b0:	89 30                	mov    %esi,(%eax)
400010b2:	31 f6                	xor    %esi,%esi
400010b4:	eb 19                	jmp    400010cf <free+0xb7>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400010b6:	39 d3                	cmp    %edx,%ebx
400010b8:	75 10                	jne    400010ca <free+0xb2>
    uint16_t value;
400010ba:	85 f6                	test   %esi,%esi
400010bc:	8b 53 08             	mov    0x8(%ebx),%edx
400010bf:	75 04                	jne    400010c5 <free+0xad>
};
400010c1:	89 d1                	mov    %edx,%ecx
400010c3:	eb a2                	jmp    40001067 <free+0x4f>

static int  x     = 0;
static int  y     = 0;
400010c5:	89 56 08             	mov    %edx,0x8(%esi)
400010c8:	eb 9d                	jmp    40001067 <free+0x4f>
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
400010ca:	89 de                	mov    %ebx,%esi
400010cc:	8b 5b 08             	mov    0x8(%ebx),%ebx
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
400010cf:	85 db                	test   %ebx,%ebx
400010d1:	75 e3                	jne    400010b6 <free+0x9e>
400010d3:	eb 92                	jmp    40001067 <free+0x4f>
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
                y--;
                x = 79;
            }
            else
400010d5:	8b 52 08             	mov    0x8(%edx),%edx
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
            continue;
400010d8:	85 d2                	test   %edx,%edx
400010da:	75 8f                	jne    4000106b <free+0x53>

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400010dc:	89 48 08             	mov    %ecx,0x8(%eax)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400010df:	a3 20 42 00 40       	mov    %eax,0x40004220
400010e4:	eb 0b                	jmp    400010f1 <free+0xd9>
400010e6:	8b 40 08             	mov    0x8(%eax),%eax
400010e9:	85 c0                	test   %eax,%eax
400010eb:	0f 85 40 ff ff ff    	jne    40001031 <free+0x19>
400010f1:	58                   	pop    %eax
400010f2:	5a                   	pop    %edx
400010f3:	5b                   	pop    %ebx
400010f4:	5e                   	pop    %esi
400010f5:	5f                   	pop    %edi
400010f6:	5d                   	pop    %ebp
400010f7:	c3                   	ret    

400010f8 <pop_unused_node>:

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
400010f8:	55                   	push   %ebp
400010f9:	89 e5                	mov    %esp,%ebp
400010fb:	53                   	push   %ebx
400010fc:	83 ec 04             	sub    $0x4,%esp

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
400010ff:	a1 18 42 00 40       	mov    0x40004218,%eax
40001104:	eb 45                	jmp    4000114b <pop_unused_node+0x53>

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
40001106:	83 ec 0c             	sub    $0xc,%esp
40001109:	6a 01                	push   $0x1
4000110b:	e8 5b 02 00 00       	call   4000136b <vmm_alloc_cont>

40001110:	83 c4 0c             	add    $0xc,%esp

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");
40001113:	89 c3                	mov    %eax,%ebx

40001115:	68 00 10 00 00       	push   $0x1000
4000111a:	6a 00                	push   $0x0
4000111c:	50                   	push   %eax
4000111d:	e8 a6 fc ff ff       	call   40000dc8 <memset>
40001122:	8b 15 18 42 00 40    	mov    0x40004218,%edx
40001128:	8d 43 0c             	lea    0xc(%ebx),%eax

    sendCommand(CMD_CLEAR, 0, 0);

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
4000112b:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40001131:	83 c4 10             	add    $0x10,%esp

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

40001134:	89 50 08             	mov    %edx,0x8(%eax)
40001137:	89 c2                	mov    %eax,%edx
40001139:	83 c0 0c             	add    $0xc,%eax

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

4000113c:	39 c8                	cmp    %ecx,%eax
4000113e:	75 f4                	jne    40001134 <pop_unused_node+0x3c>
40001140:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40001146:	a3 18 42 00 40       	mov    %eax,0x40004218

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
4000114b:	85 c0                	test   %eax,%eax
4000114d:	74 b7                	je     40001106 <pop_unused_node+0xe>

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
4000114f:	8b 50 08             	mov    0x8(%eax),%edx
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';
40001152:	85 c0                	test   %eax,%eax

struct vga_command {
    uint16_t command;
    uint16_t offset;
    uint16_t value;
};
40001154:	89 15 18 42 00 40    	mov    %edx,0x40004218
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';
4000115a:	74 aa                	je     40001106 <pop_unused_node+0xe>

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

        if ((nchar == '\n') || (x > 79)) {
4000115c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000115f:	c9                   	leave  
40001160:	c3                   	ret    

40001161 <malloc>:
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
40001161:	55                   	push   %ebp
40001162:	89 e5                	mov    %esp,%ebp
40001164:	57                   	push   %edi
40001165:	56                   	push   %esi
40001166:	53                   	push   %ebx
40001167:	83 ec 1c             	sub    $0x1c,%esp

        uint16_t send = 0;
4000116a:	a1 20 42 00 40       	mov    0x40004220,%eax
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
4000116f:	8b 75 08             	mov    0x8(%ebp),%esi

        uint16_t send = 0;
40001172:	89 c3                	mov    %eax,%ebx
        char* sndChr = (char*) &send;

40001174:	eb 07                	jmp    4000117d <malloc+0x1c>
        sndChr[0] = ochar;
40001176:	39 33                	cmp    %esi,(%ebx)
40001178:	73 0c                	jae    40001186 <malloc+0x25>
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

4000117a:	8b 5b 08             	mov    0x8(%ebx),%ebx
            nchar = 0;
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

4000117d:	85 db                	test   %ebx,%ebx
4000117f:	75 f5                	jne    40001176 <malloc+0x15>
40001181:	e9 93 00 00 00       	jmp    40001219 <malloc+0xb8>
40001186:	8b 3b                	mov    (%ebx),%edi
40001188:	31 d2                	xor    %edx,%edx
4000118a:	29 f7                	sub    %esi,%edi
4000118c:	89 33                	mov    %esi,(%ebx)
4000118e:	eb 4b                	jmp    400011db <malloc+0x7a>
40001190:	e8 63 ff ff ff       	call   400010f8 <pop_unused_node>
40001195:	8b 13                	mov    (%ebx),%edx
40001197:	03 53 04             	add    0x4(%ebx),%edx
4000119a:	29 f7                	sub    %esi,%edi
4000119c:	89 50 04             	mov    %edx,0x4(%eax)

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

4000119f:	8b 15 20 42 00 40    	mov    0x40004220,%edx
400011a5:	89 50 08             	mov    %edx,0x8(%eax)
400011a8:	89 38                	mov    %edi,(%eax)
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400011aa:	a3 20 42 00 40       	mov    %eax,0x40004220

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011af:	a1 1c 42 00 40       	mov    0x4000421c,%eax
400011b4:	89 43 08             	mov    %eax,0x8(%ebx)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400011b7:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
400011bd:	eb 4f                	jmp    4000120e <malloc+0xad>
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
    uint16_t offset;
400011bf:	39 d8                	cmp    %ebx,%eax
400011c1:	75 13                	jne    400011d6 <malloc+0x75>
    uint16_t value;
400011c3:	85 d2                	test   %edx,%edx
400011c5:	8b 43 08             	mov    0x8(%ebx),%eax
400011c8:	75 07                	jne    400011d1 <malloc+0x70>
};
400011ca:	a3 20 42 00 40       	mov    %eax,0x40004220
400011cf:	eb 0e                	jmp    400011df <malloc+0x7e>

static int  x     = 0;
static int  y     = 0;
400011d1:	89 42 08             	mov    %eax,0x8(%edx)
400011d4:	eb 09                	jmp    400011df <malloc+0x7e>
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;
400011d6:	89 c2                	mov    %eax,%edx
400011d8:	8b 40 08             	mov    0x8(%eax),%eax
#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
    uint16_t command;
400011db:	85 c0                	test   %eax,%eax
400011dd:	75 e0                	jne    400011bf <malloc+0x5e>

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011df:	a1 1c 42 00 40       	mov    0x4000421c,%eax
400011e4:	85 ff                	test   %edi,%edi

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011e6:	89 43 08             	mov    %eax,0x8(%ebx)
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
400011e9:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
400011ef:	74 1d                	je     4000120e <malloc+0xad>
400011f1:	e8 02 ff ff ff       	call   400010f8 <pop_unused_node>
400011f6:	8b 13                	mov    (%ebx),%edx
400011f8:	03 53 04             	add    0x4(%ebx),%edx
400011fb:	89 50 04             	mov    %edx,0x4(%eax)

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

400011fe:	8b 15 20 42 00 40    	mov    0x40004220,%edx
40001204:	89 50 08             	mov    %edx,0x8(%eax)
40001207:	89 38                	mov    %edi,(%eax)
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40001209:	a3 20 42 00 40       	mov    %eax,0x40004220
4000120e:	8b 43 04             	mov    0x4(%ebx),%eax
40001211:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001214:	5b                   	pop    %ebx
40001215:	5e                   	pop    %esi
40001216:	5f                   	pop    %edi
40001217:	5d                   	pop    %ebp
40001218:	c3                   	ret    
        if(nchar != 0) {
            x++;
        }
    }

    return 0;
40001219:	89 f0                	mov    %esi,%eax
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
4000121b:	89 f7                	mov    %esi,%edi
4000121d:	c1 ef 0c             	shr    $0xc,%edi

    return 0;
40001220:	25 ff 0f 00 00       	and    $0xfff,%eax
}
40001225:	83 f8 01             	cmp    $0x1,%eax
40001228:	83 df ff             	sbb    $0xffffffff,%edi
4000122b:	83 ec 0c             	sub    $0xc,%esp
4000122e:	57                   	push   %edi
4000122f:	e8 37 01 00 00       	call   4000136b <vmm_alloc_cont>
40001234:	c1 e7 0c             	shl    $0xc,%edi
    return 0;
}
40001237:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000123a:	e8 b9 fe ff ff       	call   400010f8 <pop_unused_node>
4000123f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001242:	83 c4 10             	add    $0x10,%esp
    return 0;
}
40001245:	89 c3                	mov    %eax,%ebx
40001247:	89 50 04             	mov    %edx,0x4(%eax)
4000124a:	89 30                	mov    %esi,(%eax)
4000124c:	39 f7                	cmp    %esi,%edi
4000124e:	0f 86 5b ff ff ff    	jbe    400011af <malloc+0x4e>
40001254:	e9 37 ff ff ff       	jmp    40001190 <malloc+0x2f>

40001259 <realloc>:
40001259:	55                   	push   %ebp
4000125a:	89 e5                	mov    %esp,%ebp
4000125c:	56                   	push   %esi
4000125d:	53                   	push   %ebx
4000125e:	8b 1d 1c 42 00 40    	mov    0x4000421c,%ebx
40001264:	8b 55 08             	mov    0x8(%ebp),%edx
40001267:	8b 45 0c             	mov    0xc(%ebp),%eax
4000126a:	eb 3e                	jmp    400012aa <realloc+0x51>
4000126c:	3b 53 04             	cmp    0x4(%ebx),%edx
4000126f:	75 36                	jne    400012a7 <realloc+0x4e>
40001271:	85 c0                	test   %eax,%eax
40001273:	75 0b                	jne    40001280 <realloc+0x27>
40001275:	52                   	push   %edx
40001276:	31 f6                	xor    %esi,%esi
40001278:	e8 9b fd ff ff       	call   40001018 <free>
4000127d:	5b                   	pop    %ebx
4000127e:	eb 30                	jmp    400012b0 <realloc+0x57>
40001280:	83 ec 0c             	sub    $0xc,%esp
40001283:	50                   	push   %eax
40001284:	e8 d8 fe ff ff       	call   40001161 <malloc>
40001289:	83 c4 0c             	add    $0xc,%esp
4000128c:	89 c6                	mov    %eax,%esi
4000128e:	ff 33                	pushl  (%ebx)
40001290:	ff 73 04             	pushl  0x4(%ebx)
40001293:	50                   	push   %eax
40001294:	e8 4b fb ff ff       	call   40000de4 <memcpy>
40001299:	59                   	pop    %ecx
4000129a:	ff 73 04             	pushl  0x4(%ebx)
4000129d:	e8 76 fd ff ff       	call   40001018 <free>
400012a2:	83 c4 10             	add    $0x10,%esp
400012a5:	eb 09                	jmp    400012b0 <realloc+0x57>
400012a7:	8b 5b 08             	mov    0x8(%ebx),%ebx
400012aa:	85 db                	test   %ebx,%ebx
400012ac:	75 be                	jne    4000126c <realloc+0x13>
400012ae:	31 f6                	xor    %esi,%esi
400012b0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400012b3:	89 f0                	mov    %esi,%eax
400012b5:	5b                   	pop    %ebx
400012b6:	5e                   	pop    %esi
400012b7:	5d                   	pop    %ebp
400012b8:	c3                   	ret    

400012b9 <calloc>:
400012b9:	55                   	push   %ebp
400012ba:	89 e5                	mov    %esp,%ebp
400012bc:	56                   	push   %esi
400012bd:	53                   	push   %ebx
400012be:	8b 5d 0c             	mov    0xc(%ebp),%ebx
400012c1:	83 ec 0c             	sub    $0xc,%esp
400012c4:	0f af 5d 08          	imul   0x8(%ebp),%ebx
400012c8:	53                   	push   %ebx
400012c9:	e8 93 fe ff ff       	call   40001161 <malloc>
400012ce:	83 c4 10             	add    $0x10,%esp
400012d1:	89 c6                	mov    %eax,%esi
400012d3:	85 c0                	test   %eax,%eax
400012d5:	74 0d                	je     400012e4 <calloc+0x2b>
400012d7:	50                   	push   %eax
400012d8:	53                   	push   %ebx
400012d9:	6a 00                	push   $0x0
400012db:	56                   	push   %esi
400012dc:	e8 e7 fa ff ff       	call   40000dc8 <memset>
400012e1:	83 c4 10             	add    $0x10,%esp
400012e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
400012e7:	89 f0                	mov    %esi,%eax
400012e9:	5b                   	pop    %ebx
400012ea:	5e                   	pop    %esi
400012eb:	5d                   	pop    %ebp
400012ec:	c3                   	ret    
400012ed:	00 00                	add    %al,(%eax)
	...

400012f0 <print_memstat>:
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}
400012f0:	55                   	push   %ebp
400012f1:	89 e5                	mov    %esp,%ebp
400012f3:	83 ec 34             	sub    $0x34,%esp
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
400012f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
400012f9:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)

    setstdout("/dev/tty0");
40001300:	50                   	push   %eax
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
    HANDLE fifoInpt = fmkfifo("/dev/tty0");

    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);
40001301:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001308:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000130f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001316:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000131d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    setstdout("/dev/tty0");
40001324:	e8 7f 00 00 00       	call   400013a8 <syscall>
40001329:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
4000132c:	c9                   	leave  
4000132d:	c3                   	ret    

4000132e <vmm_free>:
    uint16_t offset;
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
4000132e:	55                   	push   %ebp
4000132f:	89 e5                	mov    %esp,%ebp
40001331:	83 ec 34             	sub    $0x34,%esp
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
40001334:	8b 45 08             	mov    0x8(%ebp),%eax
40001337:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000133e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vgac.offset = o;
    vgac.value = v;
40001341:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001344:	50                   	push   %eax
struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
40001345:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000134c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001353:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000135a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vgac.offset = o;
    vgac.value = v;
40001361:	e8 42 00 00 00       	call   400013a8 <syscall>
40001366:	83 c4 10             	add    $0x10,%esp

40001369:	c9                   	leave  
4000136a:	c3                   	ret    

4000136b <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
4000136b:	55                   	push   %ebp
4000136c:	89 e5                	mov    %esp,%ebp
4000136e:	83 ec 34             	sub    $0x34,%esp

#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
40001371:	8b 45 08             	mov    0x8(%ebp),%eax
40001374:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
4000137b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint16_t command;
    uint16_t offset;
4000137e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001381:	50                   	push   %eax

#define CMD_SET    0
#define CMD_CLEAR  1
#define CMD_SCROLL 2

struct vga_command {
40001382:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001389:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001390:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001397:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint16_t command;
    uint16_t offset;
4000139e:	e8 05 00 00 00       	call   400013a8 <syscall>
    uint16_t value;
};

400013a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400013a6:	c9                   	leave  
400013a7:	c3                   	ret    

400013a8 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "stdlib.h"
400013a8:	55                   	push   %ebp
400013a9:	89 e5                	mov    %esp,%ebp
400013ab:	57                   	push   %edi
400013ac:	56                   	push   %esi
400013ad:	53                   	push   %ebx
400013ae:	83 ec 10             	sub    $0x10,%esp
#include "string.h"
400013b1:	8b 55 08             	mov    0x8(%ebp),%edx
400013b4:	8b 45 08             	mov    0x8(%ebp),%eax
400013b7:	8b 72 0c             	mov    0xc(%edx),%esi
400013ba:	8b 00                	mov    (%eax),%eax
400013bc:	89 75 e4             	mov    %esi,-0x1c(%ebp)
400013bf:	8b 5a 04             	mov    0x4(%edx),%ebx
400013c2:	8b 4a 08             	mov    0x8(%edx),%ecx
400013c5:	8b 72 10             	mov    0x10(%edx),%esi
400013c8:	8b 7a 14             	mov    0x14(%edx),%edi
400013cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
400013ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400013d1:	cd 30                	int    $0x30
400013d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
400013d6:	8b 55 08             	mov    0x8(%ebp),%edx
400013d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
400013dc:	89 02                	mov    %eax,(%edx)
400013de:	8b 45 e8             	mov    -0x18(%ebp),%eax
400013e1:	89 5a 04             	mov    %ebx,0x4(%edx)
400013e4:	89 4a 08             	mov    %ecx,0x8(%edx)
400013e7:	89 42 0c             	mov    %eax,0xc(%edx)
400013ea:	89 72 10             	mov    %esi,0x10(%edx)
400013ed:	89 7a 14             	mov    %edi,0x14(%edx)
    uint16_t value;
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x07;
400013f0:	83 c4 10             	add    $0x10,%esp
400013f3:	5b                   	pop    %ebx
400013f4:	5e                   	pop    %esi
400013f5:	5f                   	pop    %edi
400013f6:	5d                   	pop    %ebp
400013f7:	c3                   	ret    
