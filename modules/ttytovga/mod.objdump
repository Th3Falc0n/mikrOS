
../../initrfs/ibin/ttytovga:     file format elf32-i386


Disassembly of section .text:

40000000 <sendCommand>:

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 28             	sub    $0x28,%esp
40000006:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000009:	8b 55 0c             	mov    0xc(%ebp),%edx
4000000c:	8b 45 10             	mov    0x10(%ebp),%eax
4000000f:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
40000013:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
40000017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    vgac.command = c;
4000001b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
4000001f:	66 a3 00 40 00 40    	mov    %ax,0x40004000
    vgac.offset = o;
40000025:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
40000029:	66 a3 02 40 00 40    	mov    %ax,0x40004002
    vgac.value = v;
4000002f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
40000033:	66 a3 04 40 00 40    	mov    %ax,0x40004004

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000039:	a1 34 42 00 40       	mov    0x40004234,%eax
4000003e:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
40000045:	00 
40000046:	c7 44 24 04 00 40 00 	movl   $0x40004000,0x4(%esp)
4000004d:	40 
4000004e:	89 04 24             	mov    %eax,(%esp)
40000051:	e8 fd 09 00 00       	call   40000a53 <fwrite>
}
40000056:	c9                   	leave  
40000057:	c3                   	ret    

40000058 <main>:

int main(int argc, char* args[])
{
40000058:	55                   	push   %ebp
40000059:	89 e5                	mov    %esp,%ebp
4000005b:	83 e4 f0             	and    $0xfffffff0,%esp
4000005e:	83 ec 30             	sub    $0x30,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000061:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
40000068:	00 
40000069:	c7 04 24 00 30 00 40 	movl   $0x40003000,(%esp)
40000070:	e8 b8 08 00 00       	call   4000092d <fopen>
40000075:	a3 34 42 00 40       	mov    %eax,0x40004234
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
4000007a:	c7 04 24 09 30 00 40 	movl   $0x40003009,(%esp)
40000081:	e8 ce 0a 00 00       	call   40000b54 <fmkfifo>
40000086:	89 44 24 28          	mov    %eax,0x28(%esp)

    printf("vgaController: %x\n", vgaController);
4000008a:	a1 34 42 00 40       	mov    0x40004234,%eax
4000008f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000093:	c7 04 24 13 30 00 40 	movl   $0x40003013,(%esp)
4000009a:	e8 71 0e 00 00       	call   40000f10 <printf>
    printf("fifoInpt: %x\n", fifoInpt);
4000009f:	8b 44 24 28          	mov    0x28(%esp),%eax
400000a3:	89 44 24 04          	mov    %eax,0x4(%esp)
400000a7:	c7 04 24 26 30 00 40 	movl   $0x40003026,(%esp)
400000ae:	e8 5d 0e 00 00       	call   40000f10 <printf>

    struct vga_command* vgac = malloc(sizeof(struct vga_command));
400000b3:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
400000ba:	e8 41 15 00 00       	call   40001600 <malloc>
400000bf:	89 44 24 24          	mov    %eax,0x24(%esp)

    setstdout("/dev/tty0");
400000c3:	c7 04 24 09 30 00 40 	movl   $0x40003009,(%esp)
400000ca:	e8 0d 08 00 00       	call   400008dc <setstdout>
    setstderr("/dev/tty0");
400000cf:	c7 04 24 09 30 00 40 	movl   $0x40003009,(%esp)
400000d6:	e8 37 08 00 00       	call   40000912 <setstderr>

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
400000db:	c7 04 24 34 30 00 40 	movl   $0x40003034,(%esp)
400000e2:	e8 29 0e 00 00       	call   40000f10 <printf>

    sendCommand(CMD_CLEAR, 0, 0);
400000e7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
400000ee:	00 
400000ef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400000f6:	00 
400000f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400000fe:	e8 fd fe ff ff       	call   40000000 <sendCommand>

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000103:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
4000010a:	00 
4000010b:	c7 04 24 6c 30 00 40 	movl   $0x4000306c,(%esp)
40000112:	e8 16 08 00 00       	call   4000092d <fopen>
40000117:	89 44 24 20          	mov    %eax,0x20(%esp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000011b:	c6 44 24 1b 4b       	movb   $0x4b,0x1b(%esp)
40000120:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000127:	00 
40000128:	8d 44 24 1b          	lea    0x1b(%esp),%eax
4000012c:	89 44 24 04          	mov    %eax,0x4(%esp)
40000130:	8b 44 24 20          	mov    0x20(%esp),%eax
40000134:	89 04 24             	mov    %eax,(%esp)
40000137:	e8 17 09 00 00       	call   40000a53 <fwrite>
    fclose(initCtrl);
4000013c:	8b 44 24 20          	mov    0x20(%esp),%eax
40000140:	89 04 24             	mov    %eax,(%esp)
40000143:	e8 23 08 00 00       	call   4000096b <fclose>

    char nchar = '\0';
40000148:	c6 44 24 1a 00       	movb   $0x0,0x1a(%esp)
    char ochar = '\0';
4000014d:	c6 44 24 2f 00       	movb   $0x0,0x2f(%esp)

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000152:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000159:	00 
4000015a:	8d 44 24 1a          	lea    0x1a(%esp),%eax
4000015e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000162:	8b 44 24 28          	mov    0x28(%esp),%eax
40000166:	89 04 24             	mov    %eax,(%esp)
40000169:	e8 84 09 00 00       	call   40000af2 <fread>
        ochar = nchar;
4000016e:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
40000173:	88 44 24 2f          	mov    %al,0x2f(%esp)

        if ((nchar == '\n') || (x > 79)) {
40000177:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
4000017c:	3c 0a                	cmp    $0xa,%al
4000017e:	74 0a                	je     4000018a <main+0x132>
40000180:	a1 08 40 00 40       	mov    0x40004008,%eax
40000185:	83 f8 4f             	cmp    $0x4f,%eax
40000188:	7e 17                	jle    400001a1 <main+0x149>
            x = 0;
4000018a:	c7 05 08 40 00 40 00 	movl   $0x0,0x40004008
40000191:	00 00 00 
            y++;
40000194:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000199:	83 c0 01             	add    $0x1,%eax
4000019c:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (y > 24) {
400001a1:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001a6:	83 f8 18             	cmp    $0x18,%eax
400001a9:	7e 29                	jle    400001d4 <main+0x17c>
            sendCommand(CMD_SCROLL, 0, 0);
400001ab:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
400001b2:	00 
400001b3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400001ba:	00 
400001bb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
400001c2:	e8 39 fe ff ff       	call   40000000 <sendCommand>
            y--;
400001c7:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001cc:	83 e8 01             	sub    $0x1,%eax
400001cf:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (nchar == '\n') {
400001d4:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
400001d9:	3c 0a                	cmp    $0xa,%al
400001db:	75 0c                	jne    400001e9 <main+0x191>
            color = 0x09;
400001dd:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
            continue;
400001e4:	e9 02 01 00 00       	jmp    400002eb <main+0x293>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
400001e9:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
400001ee:	3c 11                	cmp    $0x11,%al
400001f0:	75 2b                	jne    4000021d <main+0x1c5>
            fread(fifoInpt, &nchar, sizeof(char));
400001f2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
400001f9:	00 
400001fa:	8d 44 24 1a          	lea    0x1a(%esp),%eax
400001fe:	89 44 24 04          	mov    %eax,0x4(%esp)
40000202:	8b 44 24 28          	mov    0x28(%esp),%eax
40000206:	89 04 24             	mov    %eax,(%esp)
40000209:	e8 e4 08 00 00       	call   40000af2 <fread>
            color = nchar;
4000020e:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
40000213:	a2 00 20 00 40       	mov    %al,0x40002000
            continue;
40000218:	e9 ce 00 00 00       	jmp    400002eb <main+0x293>
        }

        if(nchar == 8) { //8 = BACKSPACE
4000021d:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
40000222:	3c 08                	cmp    $0x8,%al
40000224:	75 40                	jne    40000266 <main+0x20e>
            if(x == 0) {
40000226:	a1 08 40 00 40       	mov    0x40004008,%eax
4000022b:	85 c0                	test   %eax,%eax
4000022d:	75 19                	jne    40000248 <main+0x1f0>
                y--;
4000022f:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000234:	83 e8 01             	sub    $0x1,%eax
40000237:	a3 0c 40 00 40       	mov    %eax,0x4000400c
                x = 79;
4000023c:	c7 05 08 40 00 40 4f 	movl   $0x4f,0x40004008
40000243:	00 00 00 
40000246:	eb 0d                	jmp    40000255 <main+0x1fd>
            }
            else
            {
                x--;
40000248:	a1 08 40 00 40       	mov    0x40004008,%eax
4000024d:	83 e8 01             	sub    $0x1,%eax
40000250:	a3 08 40 00 40       	mov    %eax,0x40004008
            }
            ochar = ' ';
40000255:	c6 44 24 2f 20       	movb   $0x20,0x2f(%esp)
            nchar = 0;
4000025a:	c6 44 24 1a 00       	movb   $0x0,0x1a(%esp)
            color = 0x09;
4000025f:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000
        }

        uint16_t send = 0;
40000266:	66 c7 44 24 18 00 00 	movw   $0x0,0x18(%esp)
        char* sndChr = (char*) &send;
4000026d:	8d 44 24 18          	lea    0x18(%esp),%eax
40000271:	89 44 24 1c          	mov    %eax,0x1c(%esp)

        sndChr[0] = ochar;
40000275:	8b 44 24 1c          	mov    0x1c(%esp),%eax
40000279:	0f b6 54 24 2f       	movzbl 0x2f(%esp),%edx
4000027e:	88 10                	mov    %dl,(%eax)
        sndChr[1] = color;
40000280:	8b 44 24 1c          	mov    0x1c(%esp),%eax
40000284:	8d 50 01             	lea    0x1(%eax),%edx
40000287:	0f b6 05 00 20 00 40 	movzbl 0x40002000,%eax
4000028e:	88 02                	mov    %al,(%edx)

        color = 0x09;
40000290:	c6 05 00 20 00 40 09 	movb   $0x9,0x40002000

        sendCommand(CMD_SET, x + y * 80, send);
40000297:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
4000029c:	0f b7 c8             	movzwl %ax,%ecx
4000029f:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400002a4:	89 c2                	mov    %eax,%edx
400002a6:	89 d0                	mov    %edx,%eax
400002a8:	c1 e0 02             	shl    $0x2,%eax
400002ab:	01 d0                	add    %edx,%eax
400002ad:	c1 e0 04             	shl    $0x4,%eax
400002b0:	89 c2                	mov    %eax,%edx
400002b2:	a1 08 40 00 40       	mov    0x40004008,%eax
400002b7:	01 d0                	add    %edx,%eax
400002b9:	0f b7 c0             	movzwl %ax,%eax
400002bc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
400002c0:	89 44 24 04          	mov    %eax,0x4(%esp)
400002c4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400002cb:	e8 30 fd ff ff       	call   40000000 <sendCommand>

        if(nchar != 0) {
400002d0:	0f b6 44 24 1a       	movzbl 0x1a(%esp),%eax
400002d5:	84 c0                	test   %al,%al
400002d7:	74 12                	je     400002eb <main+0x293>
            x++;
400002d9:	a1 08 40 00 40       	mov    0x40004008,%eax
400002de:	83 c0 01             	add    $0x1,%eax
400002e1:	a3 08 40 00 40       	mov    %eax,0x40004008
        }
    }
400002e6:	e9 67 fe ff ff       	jmp    40000152 <main+0xfa>
400002eb:	e9 62 fe ff ff       	jmp    40000152 <main+0xfa>

400002f0 <return_rpc>:
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
400002f0:	55                   	push   %ebp
400002f1:	89 e5                	mov    %esp,%ebp
400002f3:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400002f6:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .eax = 30,
      .ebx = (uint32_t)code,
400002fd:	8b 45 08             	mov    0x8(%ebp),%eax
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
    struct regstate state = {
40000300:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000303:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000030a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000311:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000318:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000031f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000322:	89 04 24             	mov    %eax,(%esp)
40000325:	e8 13 16 00 00       	call   4000193d <syscall>

    while(1);
4000032a:	eb fe                	jmp    4000032a <return_rpc+0x3a>

4000032c <call_rpc>:
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
4000032c:	55                   	push   %ebp
4000032d:	89 e5                	mov    %esp,%ebp
4000032f:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000332:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
40000339:	8b 45 08             	mov    0x8(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000033c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000033f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000342:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000345:	8b 45 10             	mov    0x10(%ebp),%eax
40000348:	89 45 ec             	mov    %eax,-0x14(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
4000034b:	8b 45 14             	mov    0x14(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000034e:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000351:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };

    syscall(&state);
40000358:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000035b:	89 04 24             	mov    %eax,(%esp)
4000035e:	e8 da 15 00 00       	call   4000193d <syscall>

    return state.eax;
40000363:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000366:	c9                   	leave  
40000367:	c3                   	ret    

40000368 <fetch_rpc_data>:

void fetch_rpc_data(void* dest) {
40000368:	55                   	push   %ebp
40000369:	89 e5                	mov    %esp,%ebp
4000036b:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000036e:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
      .eax = 33,
      .ebx = (uint32_t)dest,
40000375:	8b 45 08             	mov    0x8(%ebp),%eax

    return state.eax;
}

void fetch_rpc_data(void* dest) {
    struct regstate state = {
40000378:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000037b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000382:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000389:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000390:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000397:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000039a:	89 04 24             	mov    %eax,(%esp)
4000039d:	e8 9b 15 00 00       	call   4000193d <syscall>
}
400003a2:	c9                   	leave  
400003a3:	c3                   	ret    

400003a4 <register_irq_rpc_syscall>:

static uint32_t register_irq_rpc_syscall(uint32_t irq) {
400003a4:	55                   	push   %ebp
400003a5:	89 e5                	mov    %esp,%ebp
400003a7:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003aa:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400003b1:	8b 45 08             	mov    0x8(%ebp),%eax
400003b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400003d3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003d6:	89 04 24             	mov    %eax,(%esp)
400003d9:	e8 5f 15 00 00       	call   4000193d <syscall>

    return state.eax;
400003de:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400003e1:	c9                   	leave  
400003e2:	c3                   	ret    

400003e3 <register_irq_handler>:

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
400003e3:	55                   	push   %ebp
400003e4:	89 e5                	mov    %esp,%ebp
400003e6:	83 ec 18             	sub    $0x18,%esp
    if(register_irq_rpc_syscall(irq)) {
400003e9:	8b 45 08             	mov    0x8(%ebp),%eax
400003ec:	89 04 24             	mov    %eax,(%esp)
400003ef:	e8 b0 ff ff ff       	call   400003a4 <register_irq_rpc_syscall>
400003f4:	85 c0                	test   %eax,%eax
400003f6:	74 14                	je     4000040c <register_irq_handler+0x29>
        irq_handlers[irq] = handler;
400003f8:	8b 45 08             	mov    0x8(%ebp),%eax
400003fb:	8b 55 0c             	mov    0xc(%ebp),%edx
400003fe:	89 14 85 20 40 00 40 	mov    %edx,0x40004020(,%eax,4)
        return 1;
40000405:	b8 01 00 00 00       	mov    $0x1,%eax
4000040a:	eb 05                	jmp    40000411 <register_irq_handler+0x2e>
    }
    return 0;
4000040c:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000411:	c9                   	leave  
40000412:	c3                   	ret    

40000413 <_handle_rpc>:

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
40000413:	55                   	push   %ebp
40000414:	89 e5                	mov    %esp,%ebp
40000416:	83 ec 28             	sub    $0x28,%esp
    void* localData = malloc(datasize);
40000419:	8b 45 10             	mov    0x10(%ebp),%eax
4000041c:	89 04 24             	mov    %eax,(%esp)
4000041f:	e8 dc 11 00 00       	call   40001600 <malloc>
40000424:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fetch_rpc_data(localData);
40000427:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000042a:	89 04 24             	mov    %eax,(%esp)
4000042d:	e8 36 ff ff ff       	call   40000368 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
40000432:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000436:	75 2c                	jne    40000464 <_handle_rpc+0x51>
        if(irq_handlers[funcID]) {
40000438:	8b 45 0c             	mov    0xc(%ebp),%eax
4000043b:	8b 04 85 20 40 00 40 	mov    0x40004020(,%eax,4),%eax
40000442:	85 c0                	test   %eax,%eax
40000444:	74 1e                	je     40000464 <_handle_rpc+0x51>
            irq_handlers[funcID](funcID);
40000446:	8b 45 0c             	mov    0xc(%ebp),%eax
40000449:	8b 04 85 20 40 00 40 	mov    0x40004020(,%eax,4),%eax
40000450:	8b 55 0c             	mov    0xc(%ebp),%edx
40000453:	89 14 24             	mov    %edx,(%esp)
40000456:	ff d0                	call   *%eax
            return_rpc(0);
40000458:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000045f:	e8 8c fe ff ff       	call   400002f0 <return_rpc>
        }
    }

    printf("Unhandled RPC!\n");
40000464:	c7 04 24 7c 30 00 40 	movl   $0x4000307c,(%esp)
4000046b:	e8 a0 0a 00 00       	call   40000f10 <printf>

    free(localData);
40000470:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000473:	89 04 24             	mov    %eax,(%esp)
40000476:	e8 c2 13 00 00       	call   4000183d <free>
    return_rpc(0);
4000047b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
40000482:	e8 69 fe ff ff       	call   400002f0 <return_rpc>
}
40000487:	c9                   	leave  
40000488:	c3                   	ret    

40000489 <set_rpc_handler>:

void set_rpc_handler() {
40000489:	55                   	push   %ebp
4000048a:	89 e5                	mov    %esp,%ebp
4000048c:	83 ec 38             	sub    $0x38,%esp
    memset(irq_handlers, 0, sizeof(irq_handlers));
4000048f:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
40000496:	00 
40000497:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
4000049e:	00 
4000049f:	c7 04 24 20 40 00 40 	movl   $0x40004020,(%esp)
400004a6:	e8 d5 0b 00 00       	call   40001080 <memset>

    struct regstate state = {
400004ab:	c7 45 e0 20 00 00 00 	movl   $0x20,-0x20(%ebp)
      .eax = 32,
      .ebx = (uint32_t)_handle_rpc,
400004b2:	b8 13 04 00 40       	mov    $0x40000413,%eax
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));

    struct regstate state = {
400004b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400004ba:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004c1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400004d6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004d9:	89 04 24             	mov    %eax,(%esp)
400004dc:	e8 5c 14 00 00       	call   4000193d <syscall>
}
400004e1:	c9                   	leave  
400004e2:	c3                   	ret    

400004e3 <getargs>:
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
400004e3:	55                   	push   %ebp
400004e4:	89 e5                	mov    %esp,%ebp
400004e6:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400004e9:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
400004f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400004f7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000505:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000050c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000513:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000516:	89 04 24             	mov    %eax,(%esp)
40000519:	e8 1f 14 00 00       	call   4000193d <syscall>

    return state.eax;
4000051e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000521:	c9                   	leave  
40000522:	c3                   	ret    

40000523 <_start>:

void _start() {
40000523:	55                   	push   %ebp
40000524:	89 e5                	mov    %esp,%ebp
40000526:	83 ec 28             	sub    $0x28,%esp
  char** args = (char**) getargs();
40000529:	e8 b5 ff ff ff       	call   400004e3 <getargs>
4000052e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int argc = 0;
40000531:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if(args != 0) {
40000538:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
4000053c:	74 1b                	je     40000559 <_start+0x36>
      while(args[argc] != 0) {
4000053e:	eb 04                	jmp    40000544 <_start+0x21>
          argc++;
40000540:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000544:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000547:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
4000054e:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000551:	01 d0                	add    %edx,%eax
40000553:	8b 00                	mov    (%eax),%eax
40000555:	85 c0                	test   %eax,%eax
40000557:	75 e7                	jne    40000540 <_start+0x1d>
          argc++;
      }
  }

  set_rpc_handler();
40000559:	e8 2b ff ff ff       	call   40000489 <set_rpc_handler>

  int result = main(argc, args);
4000055e:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000561:	89 44 24 04          	mov    %eax,0x4(%esp)
40000565:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000568:	89 04 24             	mov    %eax,(%esp)
4000056b:	e8 e8 fa ff ff       	call   40000058 <main>
40000570:	89 45 ec             	mov    %eax,-0x14(%ebp)

  exit(result);
40000573:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000576:	89 04 24             	mov    %eax,(%esp)
40000579:	e8 40 00 00 00       	call   400005be <exit>
}
4000057e:	c9                   	leave  
4000057f:	c3                   	ret    

40000580 <yield>:

void yield() {
40000580:	55                   	push   %ebp
40000581:	89 e5                	mov    %esp,%ebp
40000583:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000586:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
4000058d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000594:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000059b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400005b0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005b3:	89 04 24             	mov    %eax,(%esp)
400005b6:	e8 82 13 00 00       	call   4000193d <syscall>

    return;
400005bb:	90                   	nop
}
400005bc:	c9                   	leave  
400005bd:	c3                   	ret    

400005be <exit>:

void exit(int returncode) {
400005be:	55                   	push   %ebp
400005bf:	89 e5                	mov    %esp,%ebp
400005c1:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400005c4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400005cb:	8b 45 08             	mov    0x8(%ebp),%eax
400005ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400005d1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400005ed:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005f0:	89 04 24             	mov    %eax,(%esp)
400005f3:	e8 45 13 00 00       	call   4000193d <syscall>

    while(1) {
      printf("error\n");
400005f8:	c7 04 24 8c 30 00 40 	movl   $0x4000308c,(%esp)
400005ff:	e8 0c 09 00 00       	call   40000f10 <printf>
    }
40000604:	eb f2                	jmp    400005f8 <exit+0x3a>

40000606 <getExecPath>:
}

void getExecPath(char* dest) {
40000606:	55                   	push   %ebp
40000607:	89 e5                	mov    %esp,%ebp
40000609:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000060c:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
40000613:	8b 45 08             	mov    0x8(%ebp),%eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000616:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000619:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000620:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000627:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000062e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000635:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000638:	89 04 24             	mov    %eax,(%esp)
4000063b:	e8 fd 12 00 00       	call   4000193d <syscall>
}
40000640:	c9                   	leave  
40000641:	c3                   	ret    

40000642 <changeExecPath>:

int changeExecPath(char* path) {
40000642:	55                   	push   %ebp
40000643:	89 e5                	mov    %esp,%ebp
40000645:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000648:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
        .eax = 7,
        .ebx = (uint32_t)path,
4000064f:	8b 45 08             	mov    0x8(%ebp),%eax

    syscall(&state);
}

int changeExecPath(char* path) {
    struct regstate state = {
40000652:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000655:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000065c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000663:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000066a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000671:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000674:	89 04 24             	mov    %eax,(%esp)
40000677:	e8 c1 12 00 00       	call   4000193d <syscall>

    return state.eax;
4000067c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000067f:	c9                   	leave  
40000680:	c3                   	ret    

40000681 <cd>:

void cd(char* path) {
40000681:	55                   	push   %ebp
40000682:	89 e5                	mov    %esp,%ebp
40000684:	83 ec 18             	sub    $0x18,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
40000687:	8b 45 08             	mov    0x8(%ebp),%eax
4000068a:	89 04 24             	mov    %eax,(%esp)
4000068d:	e8 b0 ff ff ff       	call   40000642 <changeExecPath>
40000692:	85 c0                	test   %eax,%eax
40000694:	75 14                	jne    400006aa <cd+0x29>
40000696:	e8 48 01 00 00       	call   400007e3 <getLastVFSErr>
4000069b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000069f:	8b 45 08             	mov    0x8(%ebp),%eax
400006a2:	89 04 24             	mov    %eax,(%esp)
400006a5:	e8 7a 00 00 00       	call   40000724 <printFilesystemError>
}
400006aa:	c9                   	leave  
400006ab:	c3                   	ret    

400006ac <exec>:

int exec(char* path, char** args) {
400006ac:	55                   	push   %ebp
400006ad:	89 e5                	mov    %esp,%ebp
400006af:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400006b2:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
400006b9:	8b 45 08             	mov    0x8(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400006bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400006bf:	8b 45 0c             	mov    0xc(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400006c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
400006c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400006da:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006dd:	89 04 24             	mov    %eax,(%esp)
400006e0:	e8 58 12 00 00       	call   4000193d <syscall>

    return state.eax;
400006e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400006e8:	c9                   	leave  
400006e9:	c3                   	ret    

400006ea <texec>:

int texec(char* path, char** args) {
400006ea:	55                   	push   %ebp
400006eb:	89 e5                	mov    %esp,%ebp
400006ed:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = exec(path, args);
400006f0:	8b 45 0c             	mov    0xc(%ebp),%eax
400006f3:	89 44 24 04          	mov    %eax,0x4(%esp)
400006f7:	8b 45 08             	mov    0x8(%ebp),%eax
400006fa:	89 04 24             	mov    %eax,(%esp)
400006fd:	e8 aa ff ff ff       	call   400006ac <exec>
40000702:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!res) {
40000705:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000709:	75 14                	jne    4000071f <texec+0x35>
        printFilesystemError(path, getLastVFSErr());
4000070b:	e8 d3 00 00 00       	call   400007e3 <getLastVFSErr>
40000710:	89 44 24 04          	mov    %eax,0x4(%esp)
40000714:	8b 45 08             	mov    0x8(%ebp),%eax
40000717:	89 04 24             	mov    %eax,(%esp)
4000071a:	e8 05 00 00 00       	call   40000724 <printFilesystemError>
    }

    return res;
4000071f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000722:	c9                   	leave  
40000723:	c3                   	ret    

40000724 <printFilesystemError>:

void printFilesystemError(char* path, uint32_t code) {
40000724:	55                   	push   %ebp
40000725:	89 e5                	mov    %esp,%ebp
40000727:	83 ec 18             	sub    $0x18,%esp
    switch(code) {
4000072a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000072e:	0f 87 8d 00 00 00    	ja     400007c1 <printFilesystemError+0x9d>
40000734:	8b 45 0c             	mov    0xc(%ebp),%eax
40000737:	c1 e0 02             	shl    $0x2,%eax
4000073a:	05 60 31 00 40       	add    $0x40003160,%eax
4000073f:	8b 00                	mov    (%eax),%eax
40000741:	ff e0                	jmp    *%eax
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
40000743:	8b 45 08             	mov    0x8(%ebp),%eax
40000746:	89 44 24 04          	mov    %eax,0x4(%esp)
4000074a:	c7 04 24 93 30 00 40 	movl   $0x40003093,(%esp)
40000751:	e8 ba 07 00 00       	call   40000f10 <printf>
        break;
40000756:	eb 7d                	jmp    400007d5 <printFilesystemError+0xb1>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
40000758:	8b 45 08             	mov    0x8(%ebp),%eax
4000075b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000075f:	c7 04 24 a8 30 00 40 	movl   $0x400030a8,(%esp)
40000766:	e8 a5 07 00 00       	call   40000f10 <printf>
        break;
4000076b:	eb 68                	jmp    400007d5 <printFilesystemError+0xb1>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
4000076d:	8b 45 08             	mov    0x8(%ebp),%eax
40000770:	89 44 24 04          	mov    %eax,0x4(%esp)
40000774:	c7 04 24 c8 30 00 40 	movl   $0x400030c8,(%esp)
4000077b:	e8 90 07 00 00       	call   40000f10 <printf>
        break;
40000780:	eb 53                	jmp    400007d5 <printFilesystemError+0xb1>
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
40000782:	8b 45 08             	mov    0x8(%ebp),%eax
40000785:	89 44 24 04          	mov    %eax,0x4(%esp)
40000789:	c7 04 24 f2 30 00 40 	movl   $0x400030f2,(%esp)
40000790:	e8 7b 07 00 00       	call   40000f10 <printf>
        break;
40000795:	eb 3e                	jmp    400007d5 <printFilesystemError+0xb1>
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
40000797:	8b 45 08             	mov    0x8(%ebp),%eax
4000079a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000079e:	c7 04 24 08 31 00 40 	movl   $0x40003108,(%esp)
400007a5:	e8 66 07 00 00       	call   40000f10 <printf>
        break;
400007aa:	eb 29                	jmp    400007d5 <printFilesystemError+0xb1>
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
400007ac:	8b 45 08             	mov    0x8(%ebp),%eax
400007af:	89 44 24 04          	mov    %eax,0x4(%esp)
400007b3:	c7 04 24 43 31 00 40 	movl   $0x40003143,(%esp)
400007ba:	e8 51 07 00 00       	call   40000f10 <printf>
        break;
400007bf:	eb 14                	jmp    400007d5 <printFilesystemError+0xb1>
    default:
        printf("%s: WTF", path);
400007c1:	8b 45 08             	mov    0x8(%ebp),%eax
400007c4:	89 44 24 04          	mov    %eax,0x4(%esp)
400007c8:	c7 04 24 56 31 00 40 	movl   $0x40003156,(%esp)
400007cf:	e8 3c 07 00 00       	call   40000f10 <printf>
        break;
400007d4:	90                   	nop

    }
    printf("\n");
400007d5:	c7 04 24 5e 31 00 40 	movl   $0x4000315e,(%esp)
400007dc:	e8 2f 07 00 00       	call   40000f10 <printf>
}
400007e1:	c9                   	leave  
400007e2:	c3                   	ret    

400007e3 <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
400007e3:	55                   	push   %ebp
400007e4:	89 e5                	mov    %esp,%ebp
400007e6:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400007e9:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
400007f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400007f7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000805:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000080c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000813:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000816:	89 04 24             	mov    %eax,(%esp)
40000819:	e8 1f 11 00 00       	call   4000193d <syscall>

    return state.eax;
4000081e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000821:	c9                   	leave  
40000822:	c3                   	ret    

40000823 <getpmhandle>:

static HANDLE getpmhandle   (uint32_t pmid) {
40000823:	55                   	push   %ebp
40000824:	89 e5                	mov    %esp,%ebp
40000826:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000829:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
40000830:	8b 45 08             	mov    0x8(%ebp),%eax
40000833:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000836:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000083d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000844:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000084b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000852:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000855:	89 04 24             	mov    %eax,(%esp)
40000858:	e8 e0 10 00 00       	call   4000193d <syscall>

    return (HANDLE)state.eax;
4000085d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000860:	c9                   	leave  
40000861:	c3                   	ret    

40000862 <getstdout>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
40000862:	55                   	push   %ebp
40000863:	89 e5                	mov    %esp,%ebp
40000865:	83 ec 18             	sub    $0x18,%esp
40000868:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000086f:	e8 af ff ff ff       	call   40000823 <getpmhandle>
40000874:	c9                   	leave  
40000875:	c3                   	ret    

40000876 <getstdin>:
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
40000876:	55                   	push   %ebp
40000877:	89 e5                	mov    %esp,%ebp
40000879:	83 ec 18             	sub    $0x18,%esp
4000087c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000883:	e8 9b ff ff ff       	call   40000823 <getpmhandle>
40000888:	c9                   	leave  
40000889:	c3                   	ret    

4000088a <getstderr>:
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };
4000088a:	55                   	push   %ebp
4000088b:	89 e5                	mov    %esp,%ebp
4000088d:	83 ec 18             	sub    $0x18,%esp
40000890:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000897:	e8 87 ff ff ff       	call   40000823 <getpmhandle>
4000089c:	c9                   	leave  
4000089d:	c3                   	ret    

4000089e <fopenpmhandle>:

int fopenpmhandle (uint32_t pmid, char* path) {
4000089e:	55                   	push   %ebp
4000089f:	89 e5                	mov    %esp,%ebp
400008a1:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400008a4:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400008ab:	8b 45 08             	mov    0x8(%ebp),%eax
400008ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 21,
      .ebx = pmid,
      .ecx = (uint32_t)path,
400008b1:	8b 45 0c             	mov    0xc(%ebp),%eax
static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
    struct regstate state = {
400008b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400008b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400008cc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008cf:	89 04 24             	mov    %eax,(%esp)
400008d2:	e8 66 10 00 00       	call   4000193d <syscall>

    return (HANDLE)state.eax;
400008d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400008da:	c9                   	leave  
400008db:	c3                   	ret    

400008dc <setstdout>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
400008dc:	55                   	push   %ebp
400008dd:	89 e5                	mov    %esp,%ebp
400008df:	83 ec 18             	sub    $0x18,%esp
400008e2:	8b 45 08             	mov    0x8(%ebp),%eax
400008e5:	89 44 24 04          	mov    %eax,0x4(%esp)
400008e9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400008f0:	e8 a9 ff ff ff       	call   4000089e <fopenpmhandle>
400008f5:	c9                   	leave  
400008f6:	c3                   	ret    

400008f7 <setstdin>:
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
400008f7:	55                   	push   %ebp
400008f8:	89 e5                	mov    %esp,%ebp
400008fa:	83 ec 18             	sub    $0x18,%esp
400008fd:	8b 45 08             	mov    0x8(%ebp),%eax
40000900:	89 44 24 04          	mov    %eax,0x4(%esp)
40000904:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
4000090b:	e8 8e ff ff ff       	call   4000089e <fopenpmhandle>
40000910:	c9                   	leave  
40000911:	c3                   	ret    

40000912 <setstderr>:
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
40000912:	55                   	push   %ebp
40000913:	89 e5                	mov    %esp,%ebp
40000915:	83 ec 18             	sub    $0x18,%esp
40000918:	8b 45 08             	mov    0x8(%ebp),%eax
4000091b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000091f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000926:	e8 73 ff ff ff       	call   4000089e <fopenpmhandle>
4000092b:	c9                   	leave  
4000092c:	c3                   	ret    

4000092d <fopen>:

HANDLE fopen(char* path, uint32_t mode) {
4000092d:	55                   	push   %ebp
4000092e:	89 e5                	mov    %esp,%ebp
40000930:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000933:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
      .eax = 10,
      .ebx = (uint32_t)path,
4000093a:	8b 45 08             	mov    0x8(%ebp),%eax
int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
    struct regstate state = {
4000093d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000940:	8b 45 0c             	mov    0xc(%ebp),%eax
40000943:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000946:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000094d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000954:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000095b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000095e:	89 04 24             	mov    %eax,(%esp)
40000961:	e8 d7 0f 00 00       	call   4000193d <syscall>

    return (HANDLE)state.eax;
40000966:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000969:	c9                   	leave  
4000096a:	c3                   	ret    

4000096b <fclose>:

int fclose(uint32_t handle) {
4000096b:	55                   	push   %ebp
4000096c:	89 e5                	mov    %esp,%ebp
4000096e:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000971:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000978:	8b 45 08             	mov    0x8(%ebp),%eax
4000097b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000097e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000985:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000098c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000099a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000099d:	89 04 24             	mov    %eax,(%esp)
400009a0:	e8 98 0f 00 00       	call   4000193d <syscall>

    return (int)state.eax;
400009a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400009a8:	c9                   	leave  
400009a9:	c3                   	ret    

400009aa <printrwerror>:

static void printrwerror(HANDLE handle, uint32_t res) {
400009aa:	55                   	push   %ebp
400009ab:	89 e5                	mov    %esp,%ebp
400009ad:	83 ec 18             	sub    $0x18,%esp
    if(res == RW_ERR_VFS) {
400009b0:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
400009b4:	75 13                	jne    400009c9 <printrwerror+0x1f>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
400009b6:	8b 45 08             	mov    0x8(%ebp),%eax
400009b9:	89 44 24 04          	mov    %eax,0x4(%esp)
400009bd:	c7 04 24 78 31 00 40 	movl   $0x40003178,(%esp)
400009c4:	e8 47 05 00 00       	call   40000f10 <printf>
    }

    if(res == RW_ERR_DRIVER) {
400009c9:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
400009cd:	75 13                	jne    400009e2 <printrwerror+0x38>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
400009cf:	8b 45 08             	mov    0x8(%ebp),%eax
400009d2:	89 44 24 04          	mov    %eax,0x4(%esp)
400009d6:	c7 04 24 90 31 00 40 	movl   $0x40003190,(%esp)
400009dd:	e8 2e 05 00 00       	call   40000f10 <printf>
    }

    if(res == RW_NOFM_READ) {
400009e2:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
400009e6:	75 13                	jne    400009fb <printrwerror+0x51>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
400009e8:	8b 45 08             	mov    0x8(%ebp),%eax
400009eb:	89 44 24 04          	mov    %eax,0x4(%esp)
400009ef:	c7 04 24 ac 31 00 40 	movl   $0x400031ac,(%esp)
400009f6:	e8 15 05 00 00       	call   40000f10 <printf>
    }

    if(res == RW_NOFM_WRITE) {
400009fb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
400009ff:	75 13                	jne    40000a14 <printrwerror+0x6a>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
40000a01:	8b 45 08             	mov    0x8(%ebp),%eax
40000a04:	89 44 24 04          	mov    %eax,0x4(%esp)
40000a08:	c7 04 24 d8 31 00 40 	movl   $0x400031d8,(%esp)
40000a0f:	e8 fc 04 00 00       	call   40000f10 <printf>
    }
}
40000a14:	c9                   	leave  
40000a15:	c3                   	ret    

40000a16 <frwrite>:

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
40000a16:	55                   	push   %ebp
40000a17:	89 e5                	mov    %esp,%ebp
40000a19:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000a1c:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
40000a23:	8b 45 08             	mov    0x8(%ebp),%eax
40000a26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 12,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
40000a29:	8b 45 0c             	mov    0xc(%ebp),%eax
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
    struct regstate state = {
40000a2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000a2f:	8b 45 10             	mov    0x10(%ebp),%eax
40000a32:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000a35:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000a3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000a43:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a46:	89 04 24             	mov    %eax,(%esp)
40000a49:	e8 ef 0e 00 00       	call   4000193d <syscall>

    return (int)state.eax;
40000a4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000a51:	c9                   	leave  
40000a52:	c3                   	ret    

40000a53 <fwrite>:

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
40000a53:	55                   	push   %ebp
40000a54:	89 e5                	mov    %esp,%ebp
40000a56:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frwrite(handle, src, length);
40000a59:	8b 45 10             	mov    0x10(%ebp),%eax
40000a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
40000a60:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a63:	89 44 24 04          	mov    %eax,0x4(%esp)
40000a67:	8b 45 08             	mov    0x8(%ebp),%eax
40000a6a:	89 04 24             	mov    %eax,(%esp)
40000a6d:	e8 a4 ff ff ff       	call   40000a16 <frwrite>
40000a72:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000a75:	eb 21                	jmp    40000a98 <fwrite+0x45>
        yield();
40000a77:	e8 04 fb ff ff       	call   40000580 <yield>
        res = frwrite(handle, src, length);
40000a7c:	8b 45 10             	mov    0x10(%ebp),%eax
40000a7f:	89 44 24 08          	mov    %eax,0x8(%esp)
40000a83:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a86:	89 44 24 04          	mov    %eax,0x4(%esp)
40000a8a:	8b 45 08             	mov    0x8(%ebp),%eax
40000a8d:	89 04 24             	mov    %eax,(%esp)
40000a90:	e8 81 ff ff ff       	call   40000a16 <frwrite>
40000a95:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
40000a98:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000a9c:	74 d9                	je     40000a77 <fwrite+0x24>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
40000a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000aa1:	89 44 24 04          	mov    %eax,0x4(%esp)
40000aa5:	8b 45 08             	mov    0x8(%ebp),%eax
40000aa8:	89 04 24             	mov    %eax,(%esp)
40000aab:	e8 fa fe ff ff       	call   400009aa <printrwerror>

    return res;
40000ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000ab3:	c9                   	leave  
40000ab4:	c3                   	ret    

40000ab5 <frread>:

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
40000ab5:	55                   	push   %ebp
40000ab6:	89 e5                	mov    %esp,%ebp
40000ab8:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000abb:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
40000ac2:	8b 45 08             	mov    0x8(%ebp),%eax
40000ac5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 13,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
40000ac8:	8b 45 0c             	mov    0xc(%ebp),%eax

    return res;
}

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
    struct regstate state = {
40000acb:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000ace:	8b 45 10             	mov    0x10(%ebp),%eax
40000ad1:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000ad4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000adb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000ae2:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000ae5:	89 04 24             	mov    %eax,(%esp)
40000ae8:	e8 50 0e 00 00       	call   4000193d <syscall>

    return (int)state.eax;
40000aed:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000af0:	c9                   	leave  
40000af1:	c3                   	ret    

40000af2 <fread>:

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000af2:	55                   	push   %ebp
40000af3:	89 e5                	mov    %esp,%ebp
40000af5:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frread(handle, dest, length);
40000af8:	8b 45 10             	mov    0x10(%ebp),%eax
40000afb:	89 44 24 08          	mov    %eax,0x8(%esp)
40000aff:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b02:	89 44 24 04          	mov    %eax,0x4(%esp)
40000b06:	8b 45 08             	mov    0x8(%ebp),%eax
40000b09:	89 04 24             	mov    %eax,(%esp)
40000b0c:	e8 a4 ff ff ff       	call   40000ab5 <frread>
40000b11:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000b14:	eb 21                	jmp    40000b37 <fread+0x45>
        yield();
40000b16:	e8 65 fa ff ff       	call   40000580 <yield>
        res = frread(handle, dest, length);
40000b1b:	8b 45 10             	mov    0x10(%ebp),%eax
40000b1e:	89 44 24 08          	mov    %eax,0x8(%esp)
40000b22:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b25:	89 44 24 04          	mov    %eax,0x4(%esp)
40000b29:	8b 45 08             	mov    0x8(%ebp),%eax
40000b2c:	89 04 24             	mov    %eax,(%esp)
40000b2f:	e8 81 ff ff ff       	call   40000ab5 <frread>
40000b34:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000b37:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000b3b:	74 d9                	je     40000b16 <fread+0x24>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
40000b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b40:	89 44 24 04          	mov    %eax,0x4(%esp)
40000b44:	8b 45 08             	mov    0x8(%ebp),%eax
40000b47:	89 04 24             	mov    %eax,(%esp)
40000b4a:	e8 5b fe ff ff       	call   400009aa <printrwerror>

    return res;
40000b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000b52:	c9                   	leave  
40000b53:	c3                   	ret    

40000b54 <fmkfifo>:

HANDLE fmkfifo(char* path) {
40000b54:	55                   	push   %ebp
40000b55:	89 e5                	mov    %esp,%ebp
40000b57:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000b5a:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
      .eax = 14,
      .ebx = (uint32_t)path,
40000b61:	8b 45 08             	mov    0x8(%ebp),%eax

    return res;
}

HANDLE fmkfifo(char* path) {
    struct regstate state = {
40000b64:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b67:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000b83:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000b86:	89 04 24             	mov    %eax,(%esp)
40000b89:	e8 af 0d 00 00       	call   4000193d <syscall>

    return (HANDLE)state.eax;
40000b8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000b91:	c9                   	leave  
40000b92:	c3                   	ret    

40000b93 <resolveHandle>:

static HANDLE resolveHandle(HANDLE hdl) {
40000b93:	55                   	push   %ebp
40000b94:	89 e5                	mov    %esp,%ebp
40000b96:	83 ec 18             	sub    $0x18,%esp
    if(hdl < 0xFFF) {
40000b99:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
40000ba0:	77 0e                	ja     40000bb0 <resolveHandle+0x1d>
        hdl = getpmhandle(hdl);
40000ba2:	8b 45 08             	mov    0x8(%ebp),%eax
40000ba5:	89 04 24             	mov    %eax,(%esp)
40000ba8:	e8 76 fc ff ff       	call   40000823 <getpmhandle>
40000bad:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    return hdl;
40000bb0:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000bb3:	c9                   	leave  
40000bb4:	c3                   	ret    

40000bb5 <fgetc>:

char fgetc(HANDLE hdl) {
40000bb5:	55                   	push   %ebp
40000bb6:	89 e5                	mov    %esp,%ebp
40000bb8:	83 ec 28             	sub    $0x28,%esp
    hdl = resolveHandle(hdl);
40000bbb:	8b 45 08             	mov    0x8(%ebp),%eax
40000bbe:	89 04 24             	mov    %eax,(%esp)
40000bc1:	e8 cd ff ff ff       	call   40000b93 <resolveHandle>
40000bc6:	89 45 08             	mov    %eax,0x8(%ebp)
    char in = 0;
40000bc9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
40000bcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000bd1:	74 1a                	je     40000bed <fgetc+0x38>
        fread(hdl, &in, sizeof(char));
40000bd3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000bda:	00 
40000bdb:	8d 45 f7             	lea    -0x9(%ebp),%eax
40000bde:	89 44 24 04          	mov    %eax,0x4(%esp)
40000be2:	8b 45 08             	mov    0x8(%ebp),%eax
40000be5:	89 04 24             	mov    %eax,(%esp)
40000be8:	e8 05 ff ff ff       	call   40000af2 <fread>
    }
    return in;
40000bed:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
40000bf1:	c9                   	leave  
40000bf2:	c3                   	ret    

40000bf3 <fgets>:

char* fgets(char* str, int num, HANDLE hdl) {
40000bf3:	55                   	push   %ebp
40000bf4:	89 e5                	mov    %esp,%ebp
40000bf6:	53                   	push   %ebx
40000bf7:	83 ec 24             	sub    $0x24,%esp
    for(int n = 0; n < (num - 1); n++) {
40000bfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000c01:	eb 3d                	jmp    40000c40 <fgets+0x4d>
        str[n] = fgetc(hdl);
40000c03:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000c06:	8b 45 08             	mov    0x8(%ebp),%eax
40000c09:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
40000c0c:	8b 45 10             	mov    0x10(%ebp),%eax
40000c0f:	89 04 24             	mov    %eax,(%esp)
40000c12:	e8 9e ff ff ff       	call   40000bb5 <fgetc>
40000c17:	88 03                	mov    %al,(%ebx)
        if(str[n] == 0 || str[n] == '\0') {
40000c19:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000c1c:	8b 45 08             	mov    0x8(%ebp),%eax
40000c1f:	01 d0                	add    %edx,%eax
40000c21:	0f b6 00             	movzbl (%eax),%eax
40000c24:	84 c0                	test   %al,%al
40000c26:	74 0f                	je     40000c37 <fgets+0x44>
40000c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000c2b:	8b 45 08             	mov    0x8(%ebp),%eax
40000c2e:	01 d0                	add    %edx,%eax
40000c30:	0f b6 00             	movzbl (%eax),%eax
40000c33:	84 c0                	test   %al,%al
40000c35:	75 05                	jne    40000c3c <fgets+0x49>
            return str;
40000c37:	8b 45 08             	mov    0x8(%ebp),%eax
40000c3a:	eb 1d                	jmp    40000c59 <fgets+0x66>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
40000c3c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
40000c40:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c43:	83 e8 01             	sub    $0x1,%eax
40000c46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40000c49:	7f b8                	jg     40000c03 <fgets+0x10>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
40000c4b:	8b 55 0c             	mov    0xc(%ebp),%edx
40000c4e:	8b 45 08             	mov    0x8(%ebp),%eax
40000c51:	01 d0                	add    %edx,%eax
40000c53:	c6 00 00             	movb   $0x0,(%eax)
    return str;
40000c56:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000c59:	83 c4 24             	add    $0x24,%esp
40000c5c:	5b                   	pop    %ebx
40000c5d:	5d                   	pop    %ebp
40000c5e:	c3                   	ret    

40000c5f <getc>:

char getc(HANDLE hdl) {
40000c5f:	55                   	push   %ebp
40000c60:	89 e5                	mov    %esp,%ebp
40000c62:	83 ec 18             	sub    $0x18,%esp
    return fgetc(hdl);
40000c65:	8b 45 08             	mov    0x8(%ebp),%eax
40000c68:	89 04 24             	mov    %eax,(%esp)
40000c6b:	e8 45 ff ff ff       	call   40000bb5 <fgetc>
}
40000c70:	c9                   	leave  
40000c71:	c3                   	ret    

40000c72 <getchar>:

char getchar() {
40000c72:	55                   	push   %ebp
40000c73:	89 e5                	mov    %esp,%ebp
40000c75:	83 ec 18             	sub    $0x18,%esp
    return fgetc(PMID_STDIN);
40000c78:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000c7f:	e8 31 ff ff ff       	call   40000bb5 <fgetc>
}
40000c84:	c9                   	leave  
40000c85:	c3                   	ret    

40000c86 <getln>:

char* getln(char* str) {
40000c86:	55                   	push   %ebp
40000c87:	89 e5                	mov    %esp,%ebp
40000c89:	83 ec 28             	sub    $0x28,%esp
    uint32_t index = 0;
40000c8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char lastChar = 0;
40000c93:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)

    while((lastChar = fgetc(PMID_STDIN))) {
40000c97:	eb 5b                	jmp    40000cf4 <getln+0x6e>
        if(lastChar == '\n') {
40000c99:	80 7d f3 0a          	cmpb   $0xa,-0xd(%ebp)
40000c9d:	75 0e                	jne    40000cad <getln+0x27>
            putchar('\n');
40000c9f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
40000ca6:	e8 b4 00 00 00       	call   40000d5f <putchar>
            break;
40000cab:	eb 5c                	jmp    40000d09 <getln+0x83>
        }

        if(lastChar == 8) {
40000cad:	80 7d f3 08          	cmpb   $0x8,-0xd(%ebp)
40000cb1:	75 23                	jne    40000cd6 <getln+0x50>
            if(index != 0) {
40000cb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000cb7:	74 10                	je     40000cc9 <getln+0x43>
                index--;
40000cb9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
                putchar(8);
40000cbd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
40000cc4:	e8 96 00 00 00       	call   40000d5f <putchar>
            }
            str[index] = 0;
40000cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ccc:	8b 55 08             	mov    0x8(%ebp),%edx
40000ccf:	01 d0                	add    %edx,%eax
40000cd1:	c6 00 00             	movb   $0x0,(%eax)
            continue;
40000cd4:	eb 1e                	jmp    40000cf4 <getln+0x6e>
        }

        str[index] = lastChar;
40000cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000cd9:	8b 55 08             	mov    0x8(%ebp),%edx
40000cdc:	01 c2                	add    %eax,%edx
40000cde:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
40000ce2:	88 02                	mov    %al,(%edx)
        putchar(lastChar);
40000ce4:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000ce8:	89 04 24             	mov    %eax,(%esp)
40000ceb:	e8 6f 00 00 00       	call   40000d5f <putchar>

        index++;
40000cf0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000cf4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000cfb:	e8 b5 fe ff ff       	call   40000bb5 <fgetc>
40000d00:	88 45 f3             	mov    %al,-0xd(%ebp)
40000d03:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
40000d07:	75 90                	jne    40000c99 <getln+0x13>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d0c:	8b 55 08             	mov    0x8(%ebp),%edx
40000d0f:	01 d0                	add    %edx,%eax
40000d11:	c6 00 00             	movb   $0x0,(%eax)

    return str;
40000d14:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000d17:	c9                   	leave  
40000d18:	c3                   	ret    

40000d19 <kputc>:

static int kputc(char c) {
40000d19:	55                   	push   %ebp
40000d1a:	89 e5                	mov    %esp,%ebp
40000d1c:	83 ec 38             	sub    $0x38,%esp
40000d1f:	8b 45 08             	mov    0x8(%ebp),%eax
40000d22:	88 45 d4             	mov    %al,-0x2c(%ebp)
  struct regstate state = {
40000d25:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
    .eax = 201,
    .ebx = (uint32_t)c,
40000d2c:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax

    return str;
}

static int kputc(char c) {
  struct regstate state = {
40000d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000d33:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000d3a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000d41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000d48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000d4f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000d52:	89 04 24             	mov    %eax,(%esp)
40000d55:	e8 e3 0b 00 00       	call   4000193d <syscall>
  
  return state.eax;
40000d5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000d5d:	c9                   	leave  
40000d5e:	c3                   	ret    

40000d5f <putchar>:

int putchar(char c) {
40000d5f:	55                   	push   %ebp
40000d60:	89 e5                	mov    %esp,%ebp
40000d62:	83 ec 18             	sub    $0x18,%esp
40000d65:	8b 45 08             	mov    0x8(%ebp),%eax
40000d68:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, PMID_STDOUT);
40000d6b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000d6f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000d76:	00 
40000d77:	89 04 24             	mov    %eax,(%esp)
40000d7a:	e8 23 00 00 00       	call   40000da2 <fputc>
}
40000d7f:	c9                   	leave  
40000d80:	c3                   	ret    

40000d81 <putc>:

int putc(char c, HANDLE hdl) {
40000d81:	55                   	push   %ebp
40000d82:	89 e5                	mov    %esp,%ebp
40000d84:	83 ec 18             	sub    $0x18,%esp
40000d87:	8b 45 08             	mov    0x8(%ebp),%eax
40000d8a:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, hdl);
40000d8d:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000d91:	8b 55 0c             	mov    0xc(%ebp),%edx
40000d94:	89 54 24 04          	mov    %edx,0x4(%esp)
40000d98:	89 04 24             	mov    %eax,(%esp)
40000d9b:	e8 02 00 00 00       	call   40000da2 <fputc>
}
40000da0:	c9                   	leave  
40000da1:	c3                   	ret    

40000da2 <fputc>:

int fputc(char c, HANDLE hdl) {
40000da2:	55                   	push   %ebp
40000da3:	89 e5                	mov    %esp,%ebp
40000da5:	83 ec 18             	sub    $0x18,%esp
40000da8:	8b 45 08             	mov    0x8(%ebp),%eax
40000dab:	88 45 f4             	mov    %al,-0xc(%ebp)
    hdl = resolveHandle(hdl);
40000dae:	8b 45 0c             	mov    0xc(%ebp),%eax
40000db1:	89 04 24             	mov    %eax,(%esp)
40000db4:	e8 da fd ff ff       	call   40000b93 <resolveHandle>
40000db9:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000dbc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000dc0:	74 1c                	je     40000dde <fputc+0x3c>
        return fwrite(hdl, &c, sizeof(char));
40000dc2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000dc9:	00 
40000dca:	8d 45 f4             	lea    -0xc(%ebp),%eax
40000dcd:	89 44 24 04          	mov    %eax,0x4(%esp)
40000dd1:	8b 45 0c             	mov    0xc(%ebp),%eax
40000dd4:	89 04 24             	mov    %eax,(%esp)
40000dd7:	e8 77 fc ff ff       	call   40000a53 <fwrite>
40000ddc:	eb 0f                	jmp    40000ded <fputc+0x4b>
    }
    return kputc(c);
40000dde:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
40000de2:	0f be c0             	movsbl %al,%eax
40000de5:	89 04 24             	mov    %eax,(%esp)
40000de8:	e8 2c ff ff ff       	call   40000d19 <kputc>
}
40000ded:	c9                   	leave  
40000dee:	c3                   	ret    

40000def <kputs>:

static int kputs(const char* cp) {
40000def:	55                   	push   %ebp
40000df0:	89 e5                	mov    %esp,%ebp
40000df2:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40000df5:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
    .eax = 202,
    .ebx = (uint32_t)cp,
40000dfc:	8b 45 08             	mov    0x8(%ebp),%eax
    }
    return kputc(c);
}

static int kputs(const char* cp) {
  struct regstate state = {
40000dff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000e02:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000e09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000e10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000e17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000e1e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000e21:	89 04 24             	mov    %eax,(%esp)
40000e24:	e8 14 0b 00 00       	call   4000193d <syscall>
  
  return state.eax;
40000e29:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000e2c:	c9                   	leave  
40000e2d:	c3                   	ret    

40000e2e <puts>:

int puts(const char* c) {
40000e2e:	55                   	push   %ebp
40000e2f:	89 e5                	mov    %esp,%ebp
40000e31:	83 ec 18             	sub    $0x18,%esp
    return fputs(c, PMID_STDOUT);
40000e34:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000e3b:	00 
40000e3c:	8b 45 08             	mov    0x8(%ebp),%eax
40000e3f:	89 04 24             	mov    %eax,(%esp)
40000e42:	e8 02 00 00 00       	call   40000e49 <fputs>
}
40000e47:	c9                   	leave  
40000e48:	c3                   	ret    

40000e49 <fputs>:

int fputs(const char* c, HANDLE hdl) {
40000e49:	55                   	push   %ebp
40000e4a:	89 e5                	mov    %esp,%ebp
40000e4c:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000e4f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000e52:	89 04 24             	mov    %eax,(%esp)
40000e55:	e8 39 fd ff ff       	call   40000b93 <resolveHandle>
40000e5a:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000e5d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000e61:	74 23                	je     40000e86 <fputs+0x3d>
        return fwrite(hdl, c, strlen(c));
40000e63:	8b 45 08             	mov    0x8(%ebp),%eax
40000e66:	89 04 24             	mov    %eax,(%esp)
40000e69:	e8 68 03 00 00       	call   400011d6 <strlen>
40000e6e:	89 44 24 08          	mov    %eax,0x8(%esp)
40000e72:	8b 45 08             	mov    0x8(%ebp),%eax
40000e75:	89 44 24 04          	mov    %eax,0x4(%esp)
40000e79:	8b 45 0c             	mov    0xc(%ebp),%eax
40000e7c:	89 04 24             	mov    %eax,(%esp)
40000e7f:	e8 cf fb ff ff       	call   40000a53 <fwrite>
40000e84:	eb 0b                	jmp    40000e91 <fputs+0x48>
    }
    return kputs(c);
40000e86:	8b 45 08             	mov    0x8(%ebp),%eax
40000e89:	89 04 24             	mov    %eax,(%esp)
40000e8c:	e8 5e ff ff ff       	call   40000def <kputs>
}
40000e91:	c9                   	leave  
40000e92:	c3                   	ret    

40000e93 <putn>:

static int putn(unsigned long x, int base)
{
40000e93:	55                   	push   %ebp
40000e94:	89 e5                	mov    %esp,%ebp
40000e96:	53                   	push   %ebx
40000e97:	83 ec 64             	sub    $0x64,%esp
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
40000e9a:	c7 45 ec 04 32 00 40 	movl   $0x40003204,-0x14(%ebp)
  char* p;
  int wrt = 0;
40000ea1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  if (base > 36) {
40000ea8:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000eac:	7e 07                	jle    40000eb5 <putn+0x22>
    return 0;
40000eae:	b8 00 00 00 00       	mov    $0x0,%eax
40000eb3:	eb 55                	jmp    40000f0a <putn+0x77>
  }

  p = buf + 64;
40000eb5:	8d 45 ab             	lea    -0x55(%ebp),%eax
40000eb8:	83 c0 40             	add    $0x40,%eax
40000ebb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  *p = '\0';
40000ebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ec1:	c6 00 00             	movb   $0x0,(%eax)
  do {
    wrt++;
40000ec4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    *--p = digits[x % base];
40000ec8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
40000ecc:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000ecf:	8b 45 08             	mov    0x8(%ebp),%eax
40000ed2:	ba 00 00 00 00       	mov    $0x0,%edx
40000ed7:	f7 f1                	div    %ecx
40000ed9:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000edc:	01 d0                	add    %edx,%eax
40000ede:	0f b6 10             	movzbl (%eax),%edx
40000ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000ee4:	88 10                	mov    %dl,(%eax)
    x /= base;
40000ee6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ee9:	8b 45 08             	mov    0x8(%ebp),%eax
40000eec:	ba 00 00 00 00       	mov    $0x0,%edx
40000ef1:	f7 f3                	div    %ebx
40000ef3:	89 45 08             	mov    %eax,0x8(%ebp)
  } while (x);
40000ef6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000efa:	75 c8                	jne    40000ec4 <putn+0x31>
  puts(p);
40000efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000eff:	89 04 24             	mov    %eax,(%esp)
40000f02:	e8 27 ff ff ff       	call   40000e2e <puts>
  
  return wrt;
40000f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40000f0a:	83 c4 64             	add    $0x64,%esp
40000f0d:	5b                   	pop    %ebx
40000f0e:	5d                   	pop    %ebp
40000f0f:	c3                   	ret    

40000f10 <printf>:

int printf(const char* fmt, ...)
{
40000f10:	55                   	push   %ebp
40000f11:	89 e5                	mov    %esp,%ebp
40000f13:	83 ec 38             	sub    $0x38,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;
	int wrt = 0;
40000f16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  va_start(ap, fmt);
40000f1d:	8d 45 0c             	lea    0xc(%ebp),%eax
40000f20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while (*fmt) {
40000f23:	e9 42 01 00 00       	jmp    4000106a <printf+0x15a>
    if (*fmt == '%') {
40000f28:	8b 45 08             	mov    0x8(%ebp),%eax
40000f2b:	0f b6 00             	movzbl (%eax),%eax
40000f2e:	3c 25                	cmp    $0x25,%al
40000f30:	0f 85 1c 01 00 00    	jne    40001052 <printf+0x142>
      fmt++;
40000f36:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
40000f3a:	8b 45 08             	mov    0x8(%ebp),%eax
40000f3d:	0f b6 00             	movzbl (%eax),%eax
40000f40:	0f be c0             	movsbl %al,%eax
40000f43:	83 f8 64             	cmp    $0x64,%eax
40000f46:	74 68                	je     40000fb0 <printf+0xa0>
40000f48:	83 f8 64             	cmp    $0x64,%eax
40000f4b:	7f 1f                	jg     40000f6c <printf+0x5c>
40000f4d:	83 f8 25             	cmp    $0x25,%eax
40000f50:	0f 84 c5 00 00 00    	je     4000101b <printf+0x10b>
40000f56:	83 f8 63             	cmp    $0x63,%eax
40000f59:	0f 84 9d 00 00 00    	je     40000ffc <printf+0xec>
40000f5f:	85 c0                	test   %eax,%eax
40000f61:	0f 84 13 01 00 00    	je     4000107a <printf+0x16a>
40000f67:	e9 c0 00 00 00       	jmp    4000102c <printf+0x11c>
40000f6c:	83 f8 73             	cmp    $0x73,%eax
40000f6f:	74 1e                	je     40000f8f <printf+0x7f>
40000f71:	83 f8 73             	cmp    $0x73,%eax
40000f74:	7f 0a                	jg     40000f80 <printf+0x70>
40000f76:	83 f8 70             	cmp    $0x70,%eax
40000f79:	74 5b                	je     40000fd6 <printf+0xc6>
40000f7b:	e9 ac 00 00 00       	jmp    4000102c <printf+0x11c>
40000f80:	83 f8 75             	cmp    $0x75,%eax
40000f83:	74 2b                	je     40000fb0 <printf+0xa0>
40000f85:	83 f8 78             	cmp    $0x78,%eax
40000f88:	74 4c                	je     40000fd6 <printf+0xc6>
40000f8a:	e9 9d 00 00 00       	jmp    4000102c <printf+0x11c>
        case 's':
          s = va_arg(ap, char*);
40000f8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000f92:	8d 50 04             	lea    0x4(%eax),%edx
40000f95:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000f98:	8b 00                	mov    (%eax),%eax
40000f9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
          wrt += puts(s);
40000f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000fa0:	89 04 24             	mov    %eax,(%esp)
40000fa3:	e8 86 fe ff ff       	call   40000e2e <puts>
40000fa8:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000fab:	e9 a0 00 00 00       	jmp    40001050 <printf+0x140>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000fb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000fb3:	8d 50 04             	lea    0x4(%eax),%edx
40000fb6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000fb9:	8b 00                	mov    (%eax),%eax
40000fbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 10);
40000fbe:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
40000fc5:	00 
40000fc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000fc9:	89 04 24             	mov    %eax,(%esp)
40000fcc:	e8 c2 fe ff ff       	call   40000e93 <putn>
40000fd1:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000fd4:	eb 7a                	jmp    40001050 <printf+0x140>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000fd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000fd9:	8d 50 04             	lea    0x4(%eax),%edx
40000fdc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000fdf:	8b 00                	mov    (%eax),%eax
40000fe1:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 16);
40000fe4:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
40000feb:	00 
40000fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000fef:	89 04 24             	mov    %eax,(%esp)
40000ff2:	e8 9c fe ff ff       	call   40000e93 <putn>
40000ff7:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000ffa:	eb 54                	jmp    40001050 <printf+0x140>
        case 'c':
          c = va_arg(ap, int);
40000ffc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000fff:	8d 50 04             	lea    0x4(%eax),%edx
40001002:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40001005:	8b 00                	mov    (%eax),%eax
40001007:	88 45 eb             	mov    %al,-0x15(%ebp)
          wrt += putchar(c);
4000100a:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
4000100e:	89 04 24             	mov    %eax,(%esp)
40001011:	e8 49 fd ff ff       	call   40000d5f <putchar>
40001016:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40001019:	eb 35                	jmp    40001050 <printf+0x140>
        case '%':
          wrt += putchar('%');
4000101b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40001022:	e8 38 fd ff ff       	call   40000d5f <putchar>
40001027:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
4000102a:	eb 24                	jmp    40001050 <printf+0x140>
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
4000102c:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40001033:	e8 27 fd ff ff       	call   40000d5f <putchar>
40001038:	01 45 f4             	add    %eax,-0xc(%ebp)
          wrt += putchar(*fmt);
4000103b:	8b 45 08             	mov    0x8(%ebp),%eax
4000103e:	0f b6 00             	movzbl (%eax),%eax
40001041:	0f be c0             	movsbl %al,%eax
40001044:	89 04 24             	mov    %eax,(%esp)
40001047:	e8 13 fd ff ff       	call   40000d5f <putchar>
4000104c:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
4000104f:	90                   	nop
40001050:	eb 14                	jmp    40001066 <printf+0x156>
      }
    } else {
      wrt += putchar(*fmt);
40001052:	8b 45 08             	mov    0x8(%ebp),%eax
40001055:	0f b6 00             	movzbl (%eax),%eax
40001058:	0f be c0             	movsbl %al,%eax
4000105b:	89 04 24             	mov    %eax,(%esp)
4000105e:	e8 fc fc ff ff       	call   40000d5f <putchar>
40001063:	01 45 f4             	add    %eax,-0xc(%ebp)
    }

    fmt++;
40001066:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
4000106a:	8b 45 08             	mov    0x8(%ebp),%eax
4000106d:	0f b6 00             	movzbl (%eax),%eax
40001070:	84 c0                	test   %al,%al
40001072:	0f 85 b0 fe ff ff    	jne    40000f28 <printf+0x18>
40001078:	eb 01                	jmp    4000107b <printf+0x16b>
          break;
        case '%':
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
4000107a:	90                   	nop
  }

out:
  va_end(ap);

  return wrt;
4000107b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000107e:	c9                   	leave  
4000107f:	c3                   	ret    

40001080 <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40001080:	55                   	push   %ebp
40001081:	89 e5                	mov    %esp,%ebp
40001083:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
40001086:	8b 45 08             	mov    0x8(%ebp),%eax
40001089:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
4000108c:	eb 0e                	jmp    4000109c <memset+0x1c>
        *p++ = c;
4000108e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001091:	8d 50 01             	lea    0x1(%eax),%edx
40001094:	89 55 fc             	mov    %edx,-0x4(%ebp)
40001097:	8b 55 0c             	mov    0xc(%ebp),%edx
4000109a:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
4000109c:	8b 45 10             	mov    0x10(%ebp),%eax
4000109f:	8d 50 ff             	lea    -0x1(%eax),%edx
400010a2:	89 55 10             	mov    %edx,0x10(%ebp)
400010a5:	85 c0                	test   %eax,%eax
400010a7:	75 e5                	jne    4000108e <memset+0xe>
        *p++ = c;
    }

    return buf;
400010a9:	8b 45 08             	mov    0x8(%ebp),%eax
}
400010ac:	c9                   	leave  
400010ad:	c3                   	ret    

400010ae <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
400010ae:	55                   	push   %ebp
400010af:	89 e5                	mov    %esp,%ebp
400010b1:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
400010b4:	8b 45 08             	mov    0x8(%ebp),%eax
400010b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
400010ba:	8b 45 0c             	mov    0xc(%ebp),%eax
400010bd:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
400010c0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
400010c4:	75 07                	jne    400010cd <memcpy+0x1f>
400010c6:	b8 00 00 00 00       	mov    $0x0,%eax
400010cb:	eb 29                	jmp    400010f6 <memcpy+0x48>

    while (n--) {
400010cd:	eb 17                	jmp    400010e6 <memcpy+0x38>
        *(d++) = *(s++);
400010cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
400010d2:	8d 50 01             	lea    0x1(%eax),%edx
400010d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
400010d8:	8b 55 f8             	mov    -0x8(%ebp),%edx
400010db:	8d 4a 01             	lea    0x1(%edx),%ecx
400010de:	89 4d f8             	mov    %ecx,-0x8(%ebp)
400010e1:	0f b6 12             	movzbl (%edx),%edx
400010e4:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
400010e6:	8b 45 10             	mov    0x10(%ebp),%eax
400010e9:	8d 50 ff             	lea    -0x1(%eax),%edx
400010ec:	89 55 10             	mov    %edx,0x10(%ebp)
400010ef:	85 c0                	test   %eax,%eax
400010f1:	75 dc                	jne    400010cf <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
400010f3:	8b 45 08             	mov    0x8(%ebp),%eax
}
400010f6:	c9                   	leave  
400010f7:	c3                   	ret    

400010f8 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
400010f8:	55                   	push   %ebp
400010f9:	89 e5                	mov    %esp,%ebp
400010fb:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
400010fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001102:	75 07                	jne    4000110b <memcmp+0x13>
        return -1;
40001104:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40001109:	eb 7c                	jmp    40001187 <memcmp+0x8f>
    if (ptr2 == 0)
4000110b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
4000110f:	75 07                	jne    40001118 <memcmp+0x20>
        return 1;
40001111:	b8 01 00 00 00       	mov    $0x1,%eax
40001116:	eb 6f                	jmp    40001187 <memcmp+0x8f>
    if (num == 0)
40001118:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
4000111c:	75 07                	jne    40001125 <memcmp+0x2d>
        return 0;
4000111e:	b8 00 00 00 00       	mov    $0x0,%eax
40001123:	eb 62                	jmp    40001187 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
40001125:	8b 45 08             	mov    0x8(%ebp),%eax
40001128:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
4000112b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000112e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
40001131:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40001138:	eb 40                	jmp    4000117a <memcmp+0x82>
        if (pa[i] != pb[i]) {
4000113a:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000113d:	8b 55 f8             	mov    -0x8(%ebp),%edx
40001140:	01 d0                	add    %edx,%eax
40001142:	0f b6 10             	movzbl (%eax),%edx
40001145:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001148:	8b 4d f4             	mov    -0xc(%ebp),%ecx
4000114b:	01 c8                	add    %ecx,%eax
4000114d:	0f b6 00             	movzbl (%eax),%eax
40001150:	38 c2                	cmp    %al,%dl
40001152:	74 22                	je     40001176 <memcmp+0x7e>
            return pa[i] - pb[i];
40001154:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001157:	8b 55 f8             	mov    -0x8(%ebp),%edx
4000115a:	01 d0                	add    %edx,%eax
4000115c:	0f b6 00             	movzbl (%eax),%eax
4000115f:	0f b6 d0             	movzbl %al,%edx
40001162:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001165:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40001168:	01 c8                	add    %ecx,%eax
4000116a:	0f b6 00             	movzbl (%eax),%eax
4000116d:	0f b6 c0             	movzbl %al,%eax
40001170:	29 c2                	sub    %eax,%edx
40001172:	89 d0                	mov    %edx,%eax
40001174:	eb 11                	jmp    40001187 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40001176:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
4000117a:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000117d:	3b 45 10             	cmp    0x10(%ebp),%eax
40001180:	72 b8                	jb     4000113a <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
40001182:	b8 00 00 00 00       	mov    $0x0,%eax
}
40001187:	c9                   	leave  
40001188:	c3                   	ret    

40001189 <strcmp>:

int strcmp(const char* str1, const char* str2) {
40001189:	55                   	push   %ebp
4000118a:	89 e5                	mov    %esp,%ebp
4000118c:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
4000118f:	8b 45 08             	mov    0x8(%ebp),%eax
40001192:	89 04 24             	mov    %eax,(%esp)
40001195:	e8 3c 00 00 00       	call   400011d6 <strlen>
4000119a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
4000119d:	8b 45 0c             	mov    0xc(%ebp),%eax
400011a0:	89 04 24             	mov    %eax,(%esp)
400011a3:	e8 2e 00 00 00       	call   400011d6 <strlen>
400011a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
400011ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
400011ae:	39 45 f0             	cmp    %eax,-0x10(%ebp)
400011b1:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
400011b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
400011b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
400011bb:	83 c0 01             	add    $0x1,%eax
400011be:	89 44 24 08          	mov    %eax,0x8(%esp)
400011c2:	8b 45 0c             	mov    0xc(%ebp),%eax
400011c5:	89 44 24 04          	mov    %eax,0x4(%esp)
400011c9:	8b 45 08             	mov    0x8(%ebp),%eax
400011cc:	89 04 24             	mov    %eax,(%esp)
400011cf:	e8 24 ff ff ff       	call   400010f8 <memcmp>
}
400011d4:	c9                   	leave  
400011d5:	c3                   	ret    

400011d6 <strlen>:

unsigned int strlen(const char* str) {
400011d6:	55                   	push   %ebp
400011d7:	89 e5                	mov    %esp,%ebp
400011d9:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
400011dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400011e0:	75 07                	jne    400011e9 <strlen+0x13>
        return 0;
400011e2:	b8 00 00 00 00       	mov    $0x0,%eax
400011e7:	eb 1f                	jmp    40001208 <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
400011e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
400011f0:	eb 04                	jmp    400011f6 <strlen+0x20>
400011f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
400011f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
400011f9:	8b 45 08             	mov    0x8(%ebp),%eax
400011fc:	01 d0                	add    %edx,%eax
400011fe:	0f b6 00             	movzbl (%eax),%eax
40001201:	84 c0                	test   %al,%al
40001203:	75 ed                	jne    400011f2 <strlen+0x1c>
        ;
    return i;
40001205:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
40001208:	c9                   	leave  
40001209:	c3                   	ret    

4000120a <strcpy>:

char* strcpy(char* dest, const char* src) {
4000120a:	55                   	push   %ebp
4000120b:	89 e5                	mov    %esp,%ebp
4000120d:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
40001210:	8b 45 0c             	mov    0xc(%ebp),%eax
40001213:	89 04 24             	mov    %eax,(%esp)
40001216:	e8 bb ff ff ff       	call   400011d6 <strlen>
4000121b:	83 c0 01             	add    $0x1,%eax
4000121e:	89 44 24 08          	mov    %eax,0x8(%esp)
40001222:	8b 45 0c             	mov    0xc(%ebp),%eax
40001225:	89 44 24 04          	mov    %eax,0x4(%esp)
40001229:	8b 45 08             	mov    0x8(%ebp),%eax
4000122c:	89 04 24             	mov    %eax,(%esp)
4000122f:	e8 7a fe ff ff       	call   400010ae <memcpy>
    return dest;
40001234:	8b 45 08             	mov    0x8(%ebp),%eax
}
40001237:	c9                   	leave  
40001238:	c3                   	ret    

40001239 <strclone>:

char* strclone(char* str) {
40001239:	55                   	push   %ebp
4000123a:	89 e5                	mov    %esp,%ebp
4000123c:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
4000123f:	8b 45 08             	mov    0x8(%ebp),%eax
40001242:	89 04 24             	mov    %eax,(%esp)
40001245:	e8 8c ff ff ff       	call   400011d6 <strlen>
4000124a:	83 c0 01             	add    $0x1,%eax
4000124d:	89 04 24             	mov    %eax,(%esp)
40001250:	e8 ab 03 00 00       	call   40001600 <malloc>
40001255:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
40001258:	8b 45 08             	mov    0x8(%ebp),%eax
4000125b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000125f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001262:	89 04 24             	mov    %eax,(%esp)
40001265:	e8 a0 ff ff ff       	call   4000120a <strcpy>

    return ret;
4000126a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000126d:	c9                   	leave  
4000126e:	c3                   	ret    

4000126f <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
4000126f:	55                   	push   %ebp
40001270:	89 e5                	mov    %esp,%ebp
40001272:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40001275:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001279:	74 3c                	je     400012b7 <strtok+0x48>
        if(fr != 0) {
4000127b:	a1 24 42 00 40       	mov    0x40004224,%eax
40001280:	85 c0                	test   %eax,%eax
40001282:	74 0d                	je     40001291 <strtok+0x22>
            free(fr);
40001284:	a1 24 42 00 40       	mov    0x40004224,%eax
40001289:	89 04 24             	mov    %eax,(%esp)
4000128c:	e8 ac 05 00 00       	call   4000183d <free>
        }
        fr = strclone(str);
40001291:	8b 45 08             	mov    0x8(%ebp),%eax
40001294:	89 04 24             	mov    %eax,(%esp)
40001297:	e8 9d ff ff ff       	call   40001239 <strclone>
4000129c:	a3 24 42 00 40       	mov    %eax,0x40004224
        return strtoknc(fr, delimiters);
400012a1:	a1 24 42 00 40       	mov    0x40004224,%eax
400012a6:	8b 55 0c             	mov    0xc(%ebp),%edx
400012a9:	89 54 24 04          	mov    %edx,0x4(%esp)
400012ad:	89 04 24             	mov    %eax,(%esp)
400012b0:	e8 17 00 00 00       	call   400012cc <strtoknc>
400012b5:	eb 13                	jmp    400012ca <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
400012b7:	8b 45 0c             	mov    0xc(%ebp),%eax
400012ba:	89 44 24 04          	mov    %eax,0x4(%esp)
400012be:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400012c5:	e8 02 00 00 00       	call   400012cc <strtoknc>
}
400012ca:	c9                   	leave  
400012cb:	c3                   	ret    

400012cc <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
400012cc:	55                   	push   %ebp
400012cd:	89 e5                	mov    %esp,%ebp
400012cf:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
400012d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
400012d9:	8b 45 0c             	mov    0xc(%ebp),%eax
400012dc:	89 04 24             	mov    %eax,(%esp)
400012df:	e8 f2 fe ff ff       	call   400011d6 <strlen>
400012e4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
400012e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400012eb:	75 0a                	jne    400012f7 <strtoknc+0x2b>
        return 0;
400012ed:	b8 00 00 00 00       	mov    $0x0,%eax
400012f2:	e9 ef 00 00 00       	jmp    400013e6 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
400012f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400012fb:	75 13                	jne    40001310 <strtoknc+0x44>
400012fd:	a1 20 42 00 40       	mov    0x40004220,%eax
40001302:	85 c0                	test   %eax,%eax
40001304:	75 0a                	jne    40001310 <strtoknc+0x44>
        return 0;
40001306:	b8 00 00 00 00       	mov    $0x0,%eax
4000130b:	e9 d6 00 00 00       	jmp    400013e6 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
40001310:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001314:	74 08                	je     4000131e <strtoknc+0x52>
        sp = str;
40001316:	8b 45 08             	mov    0x8(%ebp),%eax
40001319:	a3 20 42 00 40       	mov    %eax,0x40004220
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
4000131e:	a1 20 42 00 40       	mov    0x40004220,%eax
40001323:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
40001326:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000132d:	eb 1f                	jmp    4000134e <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
4000132f:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001332:	0f b6 10             	movzbl (%eax),%edx
40001335:	8b 4d fc             	mov    -0x4(%ebp),%ecx
40001338:	8b 45 0c             	mov    0xc(%ebp),%eax
4000133b:	01 c8                	add    %ecx,%eax
4000133d:	0f b6 00             	movzbl (%eax),%eax
40001340:	38 c2                	cmp    %al,%dl
40001342:	75 06                	jne    4000134a <strtoknc+0x7e>
                p_start++;
40001344:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
40001348:	eb 0c                	jmp    40001356 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
4000134a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
4000134e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001351:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40001354:	7c d9                	jl     4000132f <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
40001356:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001359:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000135c:	75 17                	jne    40001375 <strtoknc+0xa9>
            sp = p_start;
4000135e:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001361:	a3 20 42 00 40       	mov    %eax,0x40004220
            break;
40001366:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
40001367:	a1 20 42 00 40       	mov    0x40004220,%eax
4000136c:	0f b6 00             	movzbl (%eax),%eax
4000136f:	84 c0                	test   %al,%al
40001371:	75 15                	jne    40001388 <strtoknc+0xbc>
40001373:	eb 02                	jmp    40001377 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
40001375:	eb af                	jmp    40001326 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
40001377:	c7 05 20 42 00 40 00 	movl   $0x0,0x40004220
4000137e:	00 00 00 
        return sp;
40001381:	a1 20 42 00 40       	mov    0x40004220,%eax
40001386:	eb 5e                	jmp    400013e6 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
40001388:	eb 4d                	jmp    400013d7 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
4000138a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40001391:	eb 25                	jmp    400013b8 <strtoknc+0xec>
            if (*sp == delimiters[i]) {
40001393:	a1 20 42 00 40       	mov    0x40004220,%eax
40001398:	0f b6 10             	movzbl (%eax),%edx
4000139b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
4000139e:	8b 45 0c             	mov    0xc(%ebp),%eax
400013a1:	01 c8                	add    %ecx,%eax
400013a3:	0f b6 00             	movzbl (%eax),%eax
400013a6:	38 c2                	cmp    %al,%dl
400013a8:	75 0a                	jne    400013b4 <strtoknc+0xe8>
                *sp = '\0';
400013aa:	a1 20 42 00 40       	mov    0x40004220,%eax
400013af:	c6 00 00             	movb   $0x0,(%eax)
                break;
400013b2:	eb 0c                	jmp    400013c0 <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
400013b4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
400013b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400013be:	7c d3                	jl     40001393 <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
400013c0:	a1 20 42 00 40       	mov    0x40004220,%eax
400013c5:	83 c0 01             	add    $0x1,%eax
400013c8:	a3 20 42 00 40       	mov    %eax,0x40004220
        if (i < len)
400013cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400013d3:	7d 02                	jge    400013d7 <strtoknc+0x10b>
            break;
400013d5:	eb 0c                	jmp    400013e3 <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400013d7:	a1 20 42 00 40       	mov    0x40004220,%eax
400013dc:	0f b6 00             	movzbl (%eax),%eax
400013df:	84 c0                	test   %al,%al
400013e1:	75 a7                	jne    4000138a <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
400013e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
400013e6:	c9                   	leave  
400013e7:	c3                   	ret    

400013e8 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
400013e8:	55                   	push   %ebp
400013e9:	89 e5                	mov    %esp,%ebp
400013eb:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
400013ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
400013f5:	8b 45 08             	mov    0x8(%ebp),%eax
400013f8:	8b 00                	mov    (%eax),%eax
400013fa:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
400013fd:	eb 38                	jmp    40001437 <remove_from_list+0x4f>
        if (cur == element) {
400013ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001402:	3b 45 0c             	cmp    0xc(%ebp),%eax
40001405:	75 21                	jne    40001428 <remove_from_list+0x40>
            if (last == 0) {
40001407:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
4000140b:	75 0d                	jne    4000141a <remove_from_list+0x32>
                *root = cur->next;
4000140d:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001410:	8b 50 08             	mov    0x8(%eax),%edx
40001413:	8b 45 08             	mov    0x8(%ebp),%eax
40001416:	89 10                	mov    %edx,(%eax)
                return;
40001418:	eb 23                	jmp    4000143d <remove_from_list+0x55>
            } else {
                last->next = cur->next;
4000141a:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000141d:	8b 50 08             	mov    0x8(%eax),%edx
40001420:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001423:	89 50 08             	mov    %edx,0x8(%eax)
                return;
40001426:	eb 15                	jmp    4000143d <remove_from_list+0x55>
            }
        }
        last = cur;
40001428:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000142b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
4000142e:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001431:	8b 40 08             	mov    0x8(%eax),%eax
40001434:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40001437:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
4000143b:	75 c2                	jne    400013ff <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
4000143d:	c9                   	leave  
4000143e:	c3                   	ret    

4000143f <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
4000143f:	55                   	push   %ebp
40001440:	89 e5                	mov    %esp,%ebp
    element->next = *root;
40001442:	8b 45 08             	mov    0x8(%ebp),%eax
40001445:	8b 10                	mov    (%eax),%edx
40001447:	8b 45 0c             	mov    0xc(%ebp),%eax
4000144a:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
4000144d:	8b 45 08             	mov    0x8(%ebp),%eax
40001450:	8b 55 0c             	mov    0xc(%ebp),%edx
40001453:	89 10                	mov    %edx,(%eax)
}
40001455:	5d                   	pop    %ebp
40001456:	c3                   	ret    

40001457 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
40001457:	55                   	push   %ebp
40001458:	89 e5                	mov    %esp,%ebp
4000145a:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
4000145d:	8b 45 08             	mov    0x8(%ebp),%eax
40001460:	8b 00                	mov    (%eax),%eax
40001462:	85 c0                	test   %eax,%eax
40001464:	75 07                	jne    4000146d <pop_from_list+0x16>
        return 0;
40001466:	b8 00 00 00 00       	mov    $0x0,%eax
4000146b:	eb 1d                	jmp    4000148a <pop_from_list+0x33>
    struct memory_node* pop = *root;
4000146d:	8b 45 08             	mov    0x8(%ebp),%eax
40001470:	8b 00                	mov    (%eax),%eax
40001472:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
40001475:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001478:	89 44 24 04          	mov    %eax,0x4(%esp)
4000147c:	8b 45 08             	mov    0x8(%ebp),%eax
4000147f:	89 04 24             	mov    %eax,(%esp)
40001482:	e8 61 ff ff ff       	call   400013e8 <remove_from_list>
    return pop;
40001487:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
4000148a:	c9                   	leave  
4000148b:	c3                   	ret    

4000148c <allocate_unused_nodes>:

static void allocate_unused_nodes() {
4000148c:	55                   	push   %ebp
4000148d:	89 e5                	mov    %esp,%ebp
4000148f:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
40001492:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40001499:	e8 e7 03 00 00       	call   40001885 <vmm_alloc_cont>
4000149e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
400014a1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
400014a8:	00 
400014a9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400014b0:	00 
400014b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014b4:	89 04 24             	mov    %eax,(%esp)
400014b7:	e8 c4 fb ff ff       	call   40001080 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
400014bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
400014c3:	eb 27                	jmp    400014ec <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
400014c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
400014c8:	89 d0                	mov    %edx,%eax
400014ca:	01 c0                	add    %eax,%eax
400014cc:	01 d0                	add    %edx,%eax
400014ce:	c1 e0 02             	shl    $0x2,%eax
400014d1:	89 c2                	mov    %eax,%edx
400014d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014d6:	01 d0                	add    %edx,%eax
400014d8:	89 44 24 04          	mov    %eax,0x4(%esp)
400014dc:	c7 04 24 28 42 00 40 	movl   $0x40004228,(%esp)
400014e3:	e8 57 ff ff ff       	call   4000143f <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
400014e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
400014ec:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
400014f3:	76 d0                	jbe    400014c5 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
400014f5:	c9                   	leave  
400014f6:	c3                   	ret    

400014f7 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
400014f7:	55                   	push   %ebp
400014f8:	89 e5                	mov    %esp,%ebp
400014fa:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
400014fd:	c7 04 24 28 42 00 40 	movl   $0x40004228,(%esp)
40001504:	e8 4e ff ff ff       	call   40001457 <pop_from_list>
40001509:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
4000150c:	eb 14                	jmp    40001522 <pop_unused_node+0x2b>
        allocate_unused_nodes();
4000150e:	e8 79 ff ff ff       	call   4000148c <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
40001513:	c7 04 24 28 42 00 40 	movl   $0x40004228,(%esp)
4000151a:	e8 38 ff ff ff       	call   40001457 <pop_from_list>
4000151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40001522:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001526:	74 e6                	je     4000150e <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
40001528:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000152b:	c9                   	leave  
4000152c:	c3                   	ret    

4000152d <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
4000152d:	55                   	push   %ebp
4000152e:	89 e5                	mov    %esp,%ebp
40001530:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
40001533:	8b 45 08             	mov    0x8(%ebp),%eax
40001536:	89 44 24 04          	mov    %eax,0x4(%esp)
4000153a:	c7 04 24 2c 42 00 40 	movl   $0x4000422c,(%esp)
40001541:	e8 a2 fe ff ff       	call   400013e8 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
40001546:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    cur = first_free;
4000154d:	a1 30 42 00 40       	mov    0x40004230,%eax
40001552:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001555:	e9 87 00 00 00       	jmp    400015e1 <merge_into_frees+0xb4>
        if (cur->address + cur->size == tf->address) {
4000155a:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000155d:	8b 50 04             	mov    0x4(%eax),%edx
40001560:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001563:	8b 00                	mov    (%eax),%eax
40001565:	01 c2                	add    %eax,%edx
40001567:	8b 45 08             	mov    0x8(%ebp),%eax
4000156a:	8b 40 04             	mov    0x4(%eax),%eax
4000156d:	39 c2                	cmp    %eax,%edx
4000156f:	75 21                	jne    40001592 <merge_into_frees+0x65>
            tf->address = cur->address;
40001571:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001574:	8b 50 04             	mov    0x4(%eax),%edx
40001577:	8b 45 08             	mov    0x8(%ebp),%eax
4000157a:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
4000157d:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001580:	89 44 24 04          	mov    %eax,0x4(%esp)
40001584:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
4000158b:	e8 58 fe ff ff       	call   400013e8 <remove_from_list>
            goto editedList;
40001590:	eb b4                	jmp    40001546 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
40001592:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001595:	8b 50 04             	mov    0x4(%eax),%edx
40001598:	8b 45 08             	mov    0x8(%ebp),%eax
4000159b:	8b 48 04             	mov    0x4(%eax),%ecx
4000159e:	8b 45 08             	mov    0x8(%ebp),%eax
400015a1:	8b 00                	mov    (%eax),%eax
400015a3:	01 c8                	add    %ecx,%eax
400015a5:	39 c2                	cmp    %eax,%edx
400015a7:	75 29                	jne    400015d2 <merge_into_frees+0xa5>
            tf->size += cur->size;
400015a9:	8b 45 08             	mov    0x8(%ebp),%eax
400015ac:	8b 10                	mov    (%eax),%edx
400015ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015b1:	8b 00                	mov    (%eax),%eax
400015b3:	01 c2                	add    %eax,%edx
400015b5:	8b 45 08             	mov    0x8(%ebp),%eax
400015b8:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
400015ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015bd:	89 44 24 04          	mov    %eax,0x4(%esp)
400015c1:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
400015c8:	e8 1b fe ff ff       	call   400013e8 <remove_from_list>
            goto editedList;
400015cd:	e9 74 ff ff ff       	jmp    40001546 <merge_into_frees+0x19>
        }

        last = cur;
400015d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015d5:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
400015d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
400015db:	8b 40 08             	mov    0x8(%eax),%eax
400015de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
400015e1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400015e5:	0f 85 6f ff ff ff    	jne    4000155a <merge_into_frees+0x2d>

        last = cur;
        cur = cur->next;
    }

    append_to_list(&first_free, tf);
400015eb:	8b 45 08             	mov    0x8(%ebp),%eax
400015ee:	89 44 24 04          	mov    %eax,0x4(%esp)
400015f2:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
400015f9:	e8 41 fe ff ff       	call   4000143f <append_to_list>
}
400015fe:	c9                   	leave  
400015ff:	c3                   	ret    

40001600 <malloc>:

void* malloc(size_t size) {
40001600:	55                   	push   %ebp
40001601:	89 e5                	mov    %esp,%ebp
40001603:	83 ec 38             	sub    $0x38,%esp
    struct memory_node* last = 0;
40001606:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    struct memory_node* cur = first_free;
4000160d:	a1 30 42 00 40       	mov    0x40004230,%eax
40001612:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001615:	eb 1b                	jmp    40001632 <malloc+0x32>
        if (cur->size >= size) {
40001617:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000161a:	8b 00                	mov    (%eax),%eax
4000161c:	3b 45 08             	cmp    0x8(%ebp),%eax
4000161f:	72 02                	jb     40001623 <malloc+0x23>
            break;
40001621:	eb 15                	jmp    40001638 <malloc+0x38>
        }
        last = cur;
40001623:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001626:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cur = cur->next;
40001629:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000162c:	8b 40 08             	mov    0x8(%eax),%eax
4000162f:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40001632:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001636:	75 df                	jne    40001617 <malloc+0x17>
        }
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
40001638:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000163c:	0f 85 a4 00 00 00    	jne    400016e6 <malloc+0xe6>
        uint32_t pgs = size / PAGESIZE;
40001642:	8b 45 08             	mov    0x8(%ebp),%eax
40001645:	c1 e8 0c             	shr    $0xc,%eax
40001648:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
4000164b:	8b 45 08             	mov    0x8(%ebp),%eax
4000164e:	25 ff 0f 00 00       	and    $0xfff,%eax
40001653:	85 c0                	test   %eax,%eax
40001655:	74 04                	je     4000165b <malloc+0x5b>
            pgs++;
40001657:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
4000165b:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000165e:	89 04 24             	mov    %eax,(%esp)
40001661:	e8 1f 02 00 00       	call   40001885 <vmm_alloc_cont>
40001666:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
40001669:	e8 89 fe ff ff       	call   400014f7 <pop_unused_node>
4000166e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
40001671:	8b 55 e8             	mov    -0x18(%ebp),%edx
40001674:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001677:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
4000167a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000167d:	8b 55 08             	mov    0x8(%ebp),%edx
40001680:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
40001682:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001685:	c1 e0 0c             	shl    $0xc,%eax
40001688:	3b 45 08             	cmp    0x8(%ebp),%eax
4000168b:	76 3e                	jbe    400016cb <malloc+0xcb>
            struct memory_node* free = pop_unused_node();
4000168d:	e8 65 fe ff ff       	call   400014f7 <pop_unused_node>
40001692:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
40001695:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001698:	8b 50 04             	mov    0x4(%eax),%edx
4000169b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000169e:	8b 00                	mov    (%eax),%eax
400016a0:	01 c2                	add    %eax,%edx
400016a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
400016a5:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
400016a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
400016ab:	c1 e0 0c             	shl    $0xc,%eax
400016ae:	2b 45 08             	sub    0x8(%ebp),%eax
400016b1:	89 c2                	mov    %eax,%edx
400016b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400016b6:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
400016b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
400016bb:	89 44 24 04          	mov    %eax,0x4(%esp)
400016bf:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
400016c6:	e8 74 fd ff ff       	call   4000143f <append_to_list>
        }

        append_to_list(&first_used, fill);
400016cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400016ce:	89 44 24 04          	mov    %eax,0x4(%esp)
400016d2:	c7 04 24 2c 42 00 40 	movl   $0x4000422c,(%esp)
400016d9:	e8 61 fd ff ff       	call   4000143f <append_to_list>

        return (void*) fill->address;
400016de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400016e1:	8b 40 04             	mov    0x4(%eax),%eax
400016e4:	eb 7b                	jmp    40001761 <malloc+0x161>
    } else {
        uint32_t freesize = cur->size - size;
400016e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400016e9:	8b 00                	mov    (%eax),%eax
400016eb:	2b 45 08             	sub    0x8(%ebp),%eax
400016ee:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
400016f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
400016f4:	8b 55 08             	mov    0x8(%ebp),%edx
400016f7:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
400016f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
400016fc:	89 44 24 04          	mov    %eax,0x4(%esp)
40001700:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
40001707:	e8 dc fc ff ff       	call   400013e8 <remove_from_list>
        append_to_list(&first_used, cur);
4000170c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000170f:	89 44 24 04          	mov    %eax,0x4(%esp)
40001713:	c7 04 24 2c 42 00 40 	movl   $0x4000422c,(%esp)
4000171a:	e8 20 fd ff ff       	call   4000143f <append_to_list>

        if (freesize > 0) {
4000171f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40001723:	74 36                	je     4000175b <malloc+0x15b>
            struct memory_node* free = pop_unused_node();
40001725:	e8 cd fd ff ff       	call   400014f7 <pop_unused_node>
4000172a:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
4000172d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001730:	8b 50 04             	mov    0x4(%eax),%edx
40001733:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001736:	8b 00                	mov    (%eax),%eax
40001738:	01 c2                	add    %eax,%edx
4000173a:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000173d:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
40001740:	8b 45 d8             	mov    -0x28(%ebp),%eax
40001743:	8b 55 dc             	mov    -0x24(%ebp),%edx
40001746:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
40001748:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000174b:	89 44 24 04          	mov    %eax,0x4(%esp)
4000174f:	c7 04 24 30 42 00 40 	movl   $0x40004230,(%esp)
40001756:	e8 e4 fc ff ff       	call   4000143f <append_to_list>
        }

        return (void*) cur->address;
4000175b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000175e:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
40001761:	c9                   	leave  
40001762:	c3                   	ret    

40001763 <calloc>:

void* calloc(size_t num, size_t size) {
40001763:	55                   	push   %ebp
40001764:	89 e5                	mov    %esp,%ebp
40001766:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
40001769:	8b 45 08             	mov    0x8(%ebp),%eax
4000176c:	0f af 45 0c          	imul   0xc(%ebp),%eax
40001770:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
40001773:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001776:	89 04 24             	mov    %eax,(%esp)
40001779:	e8 82 fe ff ff       	call   40001600 <malloc>
4000177e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
40001781:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40001785:	74 1a                	je     400017a1 <calloc+0x3e>
        memset(p, 0, gsize);
40001787:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000178a:	89 44 24 08          	mov    %eax,0x8(%esp)
4000178e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40001795:	00 
40001796:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001799:	89 04 24             	mov    %eax,(%esp)
4000179c:	e8 df f8 ff ff       	call   40001080 <memset>
    }

    return p;
400017a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
400017a4:	c9                   	leave  
400017a5:	c3                   	ret    

400017a6 <realloc>:

void* realloc(void* ptr, size_t size) {
400017a6:	55                   	push   %ebp
400017a7:	89 e5                	mov    %esp,%ebp
400017a9:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* last = 0;
400017ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
400017b3:	a1 2c 42 00 40       	mov    0x4000422c,%eax
400017b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
400017bb:	eb 73                	jmp    40001830 <realloc+0x8a>
        if (cur->address == (uint32_t) ptr) {
400017bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
400017c0:	8b 50 04             	mov    0x4(%eax),%edx
400017c3:	8b 45 08             	mov    0x8(%ebp),%eax
400017c6:	39 c2                	cmp    %eax,%edx
400017c8:	75 57                	jne    40001821 <realloc+0x7b>
            if (size == 0) {
400017ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
400017ce:	75 12                	jne    400017e2 <realloc+0x3c>
                free(ptr);
400017d0:	8b 45 08             	mov    0x8(%ebp),%eax
400017d3:	89 04 24             	mov    %eax,(%esp)
400017d6:	e8 62 00 00 00       	call   4000183d <free>
                return 0;
400017db:	b8 00 00 00 00       	mov    $0x0,%eax
400017e0:	eb 59                	jmp    4000183b <realloc+0x95>
            } else {
                void* new = malloc(size);
400017e2:	8b 45 0c             	mov    0xc(%ebp),%eax
400017e5:	89 04 24             	mov    %eax,(%esp)
400017e8:	e8 13 fe ff ff       	call   40001600 <malloc>
400017ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
400017f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
400017f3:	8b 10                	mov    (%eax),%edx
400017f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
400017f8:	8b 40 04             	mov    0x4(%eax),%eax
400017fb:	89 54 24 08          	mov    %edx,0x8(%esp)
400017ff:	89 44 24 04          	mov    %eax,0x4(%esp)
40001803:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001806:	89 04 24             	mov    %eax,(%esp)
40001809:	e8 a0 f8 ff ff       	call   400010ae <memcpy>
                free((void*) cur->address);
4000180e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001811:	8b 40 04             	mov    0x4(%eax),%eax
40001814:	89 04 24             	mov    %eax,(%esp)
40001817:	e8 21 00 00 00       	call   4000183d <free>

                return new;
4000181c:	8b 45 ec             	mov    -0x14(%ebp),%eax
4000181f:	eb 1a                	jmp    4000183b <realloc+0x95>
            }
        }
        last = cur;
40001821:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001824:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
40001827:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000182a:	8b 40 08             	mov    0x8(%eax),%eax
4000182d:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
40001830:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001834:	75 87                	jne    400017bd <realloc+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
40001836:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000183b:	c9                   	leave  
4000183c:	c3                   	ret    

4000183d <free>:

void free(void* ptr) {
4000183d:	55                   	push   %ebp
4000183e:	89 e5                	mov    %esp,%ebp
40001840:	83 ec 14             	sub    $0x14,%esp
    struct memory_node* last = 0;
40001843:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
4000184a:	a1 2c 42 00 40       	mov    0x4000422c,%eax
4000184f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001852:	eb 29                	jmp    4000187d <free+0x40>
        if (cur->address == (uint32_t) ptr) {
40001854:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001857:	8b 50 04             	mov    0x4(%eax),%edx
4000185a:	8b 45 08             	mov    0x8(%ebp),%eax
4000185d:	39 c2                	cmp    %eax,%edx
4000185f:	75 0d                	jne    4000186e <free+0x31>
            merge_into_frees(cur);
40001861:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001864:	89 04 24             	mov    %eax,(%esp)
40001867:	e8 c1 fc ff ff       	call   4000152d <merge_into_frees>
            break;
4000186c:	eb 15                	jmp    40001883 <free+0x46>
        }
        last = cur;
4000186e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001871:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
40001874:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001877:	8b 40 08             	mov    0x8(%eax),%eax
4000187a:	89 45 fc             	mov    %eax,-0x4(%ebp)

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000187d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001881:	75 d1                	jne    40001854 <free+0x17>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
40001883:	c9                   	leave  
40001884:	c3                   	ret    

40001885 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
40001885:	55                   	push   %ebp
40001886:	89 e5                	mov    %esp,%ebp
40001888:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
4000188b:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
40001892:	8b 45 08             	mov    0x8(%ebp),%eax
40001895:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001898:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000189f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400018a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400018ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
400018b4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400018b7:	89 04 24             	mov    %eax,(%esp)
400018ba:	e8 7e 00 00 00       	call   4000193d <syscall>
  
  return (void*)state.eax;
400018bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400018c2:	c9                   	leave  
400018c3:	c3                   	ret    

400018c4 <vmm_free>:

void vmm_free (void* vaddr) {
400018c4:	55                   	push   %ebp
400018c5:	89 e5                	mov    %esp,%ebp
400018c7:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400018ca:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
    .eax = 204,
    .ebx = (uint32_t)vaddr,
400018d1:	8b 45 08             	mov    0x8(%ebp),%eax
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
  struct regstate state = {
400018d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400018d7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400018de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400018e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400018ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
400018f3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400018f6:	89 04 24             	mov    %eax,(%esp)
400018f9:	e8 3f 00 00 00       	call   4000193d <syscall>
}
400018fe:	c9                   	leave  
400018ff:	c3                   	ret    

40001900 <print_memstat>:

void print_memstat() {
40001900:	55                   	push   %ebp
40001901:	89 e5                	mov    %esp,%ebp
40001903:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001906:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
4000190d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001914:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000191b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001922:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001929:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001930:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001933:	89 04 24             	mov    %eax,(%esp)
40001936:	e8 02 00 00 00       	call   4000193d <syscall>
}
4000193b:	c9                   	leave  
4000193c:	c3                   	ret    

4000193d <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
4000193d:	55                   	push   %ebp
4000193e:	89 e5                	mov    %esp,%ebp
40001940:	57                   	push   %edi
40001941:	56                   	push   %esi
40001942:	53                   	push   %ebx
40001943:	83 ec 08             	sub    $0x8,%esp
			"=c" (state->ecx),
			"=d" (state->edx),
			"=S" (state->esi),
			"=D" (state->edi)

			: "a" (state->eax),
40001946:	8b 45 08             	mov    0x8(%ebp),%eax
40001949:	8b 00                	mov    (%eax),%eax
			"b" (state->ebx),
4000194b:	8b 55 08             	mov    0x8(%ebp),%edx
4000194e:	8b 5a 04             	mov    0x4(%edx),%ebx
			"c" (state->ecx),
40001951:	8b 55 08             	mov    0x8(%ebp),%edx
40001954:	8b 4a 08             	mov    0x8(%edx),%ecx
			"d" (state->edx),
40001957:	8b 55 08             	mov    0x8(%ebp),%edx
4000195a:	8b 52 0c             	mov    0xc(%edx),%edx
			"S" (state->esi),
4000195d:	8b 75 08             	mov    0x8(%ebp),%esi
40001960:	8b 76 10             	mov    0x10(%esi),%esi
			"D" (state->edi));
40001963:	8b 7d 08             	mov    0x8(%ebp),%edi
40001966:	8b 7f 14             	mov    0x14(%edi),%edi
#include "syscall.h"

void syscall(struct regstate* state) {
	asm("int $0x30"
40001969:	cd 30                	int    $0x30
4000196b:	89 55 ec             	mov    %edx,-0x14(%ebp)
4000196e:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001971:	8b 45 08             	mov    0x8(%ebp),%eax
40001974:	8b 55 f0             	mov    -0x10(%ebp),%edx
40001977:	89 10                	mov    %edx,(%eax)
40001979:	8b 45 08             	mov    0x8(%ebp),%eax
4000197c:	89 58 04             	mov    %ebx,0x4(%eax)
4000197f:	8b 45 08             	mov    0x8(%ebp),%eax
40001982:	89 48 08             	mov    %ecx,0x8(%eax)
40001985:	8b 45 08             	mov    0x8(%ebp),%eax
40001988:	8b 55 ec             	mov    -0x14(%ebp),%edx
4000198b:	89 50 0c             	mov    %edx,0xc(%eax)
4000198e:	8b 45 08             	mov    0x8(%ebp),%eax
40001991:	89 70 10             	mov    %esi,0x10(%eax)
40001994:	8b 45 08             	mov    0x8(%ebp),%eax
40001997:	89 78 14             	mov    %edi,0x14(%eax)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
4000199a:	83 c4 08             	add    $0x8,%esp
4000199d:	5b                   	pop    %ebx
4000199e:	5e                   	pop    %esi
4000199f:	5f                   	pop    %edi
400019a0:	5d                   	pop    %ebp
400019a1:	c3                   	ret    
