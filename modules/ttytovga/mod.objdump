
../../initrfs/ibin/ttytovga:     file format elf32-i386
../../initrfs/ibin/ttytovga
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40000655

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x0000142c memsz 0x0000142c flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x00001236 memsz 0x00002228 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142c  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       000000ac  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  400030ac  400030ac  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000228  40004000  40004000  00004236  2**2
                  ALLOC
  5 .stab         00004c74  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008eac  2**0
                  CONTENTS, READONLY
  7 .stabstr      000019de  00000000  00000000  00008f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
400030ac l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ttytovga.c
40004008 l     O .bss	00000004 x
4000400c l     O .bss	00000004 y
40002000 l     O .data	00000001 color
00000000 l    df *ABS*	00000000 process.c
40004010 l     O .bss	00000200 irq_handlers
40003094 l     O .rodata	00000018 C.7.1020
400006c7 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000788 l     F .text	00000047 resolveHandle
40000c38 l     F .text	0000004a printrwerror
40000a85 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
4000112c l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
4000044b g     F .text	0000003d getExecPath
40000b3c g     F .text	00000014 putchar
40000ee9 g     F .text	00000033 strcpy
400004ce g     F .text	0000003e yield
40000b50 g     F .text	000000e8 printf
400013dc g     F .text	00000050 syscall
40000d4d g     F .text	00000042 fgets
40000d41 g     F .text	0000000c getc
40000e18 g     F .text	00000026 memcpy
40000a73 g     F .text	00000012 puts
4000050c g     F .text	0000003d pexists
40001195 g     F .text	000000f8 malloc
400005a1 g     F .text	0000003d fetch_rpc_data
40000f1c g     F .text	000000a5 strtoknc
400003e1 g     F .text	0000003d changeExecPath
40004220 g     O .bss	00000004 first_free
4000036f g     F .text	00000037 dexec
40000000 g     F .text	00000050 sendCommand
40000922 g     F .text	00000012 setstdout
400012ed g     F .text	00000034 calloc
40004000 g     O .bss	00000006 vgac
4000139f g     F .text	0000003d vmm_alloc_cont
400002fd g     F .text	0000003b exec
40000655 g     F .text	00000072 _start
4000128d g     F .text	00000060 realloc
40000618 g     F .text	0000003d set_rpc_handler
40000ffa g     F .text	00000052 strtok
40000e3e g     F .text	00000047 memcmp
40000338 g     F .text	00000037 sexec
40000c82 g     F .text	00000085 fread
40004218 g     O .bss	00000004 first_unused
40000886 g     F .text	0000003c fopen
40000dfc g     F .text	0000001c memset
40000050 g     F .text	0000023a main
40000849 g     F .text	0000003d fclose
40000d32 g     F .text	0000000f getchar
40000d8f g     F .text	0000006c getln
40004214 g     O .bss	00000004 fr
4000080c g     F .text	0000003d favailable
40000b29 g     F .text	00000013 putc
40000e85 g     F .text	00000049 strcmp
40004224 g     O .bss	00000004 vgaController
40000d07 g     F .text	0000002b fgetc
400003a6 g     F .text	0000003b getPathChild
40004210 g     O .bss	00000004 sp
4000041e g     F .text	0000002d cd
4000421c g     O .bss	00000004 first_used
40000ac4 g     F .text	00000065 fputc
40000972 g     F .text	00000093 fwrite
40000910 g     F .text	00000012 setstdin
40000fc1 g     F .text	00000039 strclone
40000488 g     F .text	00000046 exit
40000549 g     F .text	00000058 register_irq_handler
400008c2 g     F .text	0000003c fopenpmhandle
40001362 g     F .text	0000003d vmm_free
4000028c g     F .text	00000071 printFilesystemError
40000ece g     F .text	0000001b strlen
40000934 g     F .text	0000003e getLastVFSErr
40000a05 g     F .text	0000006e fputs
400007cf g     F .text	0000003d fmkfifo
400005de g     F .text	0000003a call_rpc
400008fe g     F .text	00000012 setstderr
40001324 g     F .text	0000003e print_memstat
4000104c g     F .text	000000e0 free



Disassembly of section .text:

40000000 <sendCommand>:

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
40000003:	83 ec 18             	sub    $0x18,%esp
40000006:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000009:	8b 55 0c             	mov    0xc(%ebp),%edx
4000000c:	8b 45 10             	mov    0x10(%ebp),%eax
4000000f:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
40000013:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
40000017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    vgac.command = c;
4000001b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000001e:	66 a3 00 40 00 40    	mov    %ax,0x40004000
    vgac.offset = o;
40000024:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000027:	66 a3 02 40 00 40    	mov    %ax,0x40004002
    vgac.value = v;
4000002d:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000030:	66 a3 04 40 00 40    	mov    %ax,0x40004004

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000036:	a1 24 42 00 40       	mov    0x40004224,%eax
4000003b:	83 ec 04             	sub    $0x4,%esp
4000003e:	6a 06                	push   $0x6
40000040:	68 00 40 00 40       	push   $0x40004000
40000045:	50                   	push   %eax
40000046:	e8 27 09 00 00       	call   40000972 <fwrite>
4000004b:	83 c4 10             	add    $0x10,%esp
}
4000004e:	c9                   	leave  
4000004f:	c3                   	ret    

40000050 <main>:

int main(int argc, char* args[])
{
40000050:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000054:	83 e4 f0             	and    $0xfffffff0,%esp
40000057:	ff 71 fc             	pushl  -0x4(%ecx)
4000005a:	55                   	push   %ebp
4000005b:	89 e5                	mov    %esp,%ebp
4000005d:	51                   	push   %ecx
4000005e:	83 ec 24             	sub    $0x24,%esp
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000061:	83 ec 08             	sub    $0x8,%esp
40000064:	6a 02                	push   $0x2
40000066:	68 00 30 00 40       	push   $0x40003000
4000006b:	e8 16 08 00 00       	call   40000886 <fopen>
40000070:	83 c4 10             	add    $0x10,%esp
40000073:	a3 24 42 00 40       	mov    %eax,0x40004224
    HANDLE fifoInpt = fmkfifo("/dev/tty0");
40000078:	83 ec 0c             	sub    $0xc,%esp
4000007b:	68 09 30 00 40       	push   $0x40003009
40000080:	e8 4a 07 00 00       	call   400007cf <fmkfifo>
40000085:	83 c4 10             	add    $0x10,%esp
40000088:	89 45 e8             	mov    %eax,-0x18(%ebp)

    printf("vgaController: %x\n", vgaController);
4000008b:	a1 24 42 00 40       	mov    0x40004224,%eax
40000090:	83 ec 08             	sub    $0x8,%esp
40000093:	50                   	push   %eax
40000094:	68 13 30 00 40       	push   $0x40003013
40000099:	e8 b2 0a 00 00       	call   40000b50 <printf>
4000009e:	83 c4 10             	add    $0x10,%esp
    printf("fifoInpt: %x\n", fifoInpt);
400000a1:	83 ec 08             	sub    $0x8,%esp
400000a4:	ff 75 e8             	pushl  -0x18(%ebp)
400000a7:	68 26 30 00 40       	push   $0x40003026
400000ac:	e8 9f 0a 00 00       	call   40000b50 <printf>
400000b1:	83 c4 10             	add    $0x10,%esp

    setstdout("/dev/tty0");
400000b4:	83 ec 0c             	sub    $0xc,%esp
400000b7:	68 09 30 00 40       	push   $0x40003009
400000bc:	e8 61 08 00 00       	call   40000922 <setstdout>
400000c1:	83 c4 10             	add    $0x10,%esp
    setstderr("/dev/tty0");
400000c4:	83 ec 0c             	sub    $0xc,%esp
400000c7:	68 09 30 00 40       	push   $0x40003009
400000cc:	e8 2d 08 00 00       	call   400008fe <setstderr>
400000d1:	83 c4 10             	add    $0x10,%esp

    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");
400000d4:	83 ec 0c             	sub    $0xc,%esp
400000d7:	68 34 30 00 40       	push   $0x40003034
400000dc:	e8 6f 0a 00 00       	call   40000b50 <printf>
400000e1:	83 c4 10             	add    $0x10,%esp

    sendCommand(CMD_CLEAR, 0, 0);
400000e4:	83 ec 04             	sub    $0x4,%esp
400000e7:	6a 00                	push   $0x0
400000e9:	6a 00                	push   $0x0
400000eb:	6a 01                	push   $0x1
400000ed:	e8 0e ff ff ff       	call   40000000 <sendCommand>
400000f2:	83 c4 10             	add    $0x10,%esp

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
400000f5:	83 ec 08             	sub    $0x8,%esp
400000f8:	6a 02                	push   $0x2
400000fa:	68 6c 30 00 40       	push   $0x4000306c
400000ff:	e8 82 07 00 00       	call   40000886 <fopen>
40000104:	83 c4 10             	add    $0x10,%esp
40000107:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000010a:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
4000010e:	83 ec 04             	sub    $0x4,%esp
40000111:	6a 01                	push   $0x1
40000113:	8d 45 e7             	lea    -0x19(%ebp),%eax
40000116:	50                   	push   %eax
40000117:	ff 75 ec             	pushl  -0x14(%ebp)
4000011a:	e8 53 08 00 00       	call   40000972 <fwrite>
4000011f:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
40000122:	83 ec 0c             	sub    $0xc,%esp
40000125:	ff 75 ec             	pushl  -0x14(%ebp)
40000128:	e8 1c 07 00 00       	call   40000849 <fclose>
4000012d:	83 c4 10             	add    $0x10,%esp

    char nchar = '\0';
40000130:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
    char ochar = '\0';
40000134:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
40000138:	eb 01                	jmp    4000013b <main+0xeb>
        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
            x++;
        }
    }
4000013a:	90                   	nop    

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
4000013b:	83 ec 04             	sub    $0x4,%esp
4000013e:	6a 01                	push   $0x1
40000140:	8d 45 e6             	lea    -0x1a(%ebp),%eax
40000143:	50                   	push   %eax
40000144:	ff 75 e8             	pushl  -0x18(%ebp)
40000147:	e8 36 0b 00 00       	call   40000c82 <fread>
4000014c:	83 c4 10             	add    $0x10,%esp
        ochar = nchar;
4000014f:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000152:	88 45 f3             	mov    %al,-0xd(%ebp)

        if ((nchar == '\n') || (x > 79)) {
40000155:	8a 45 e6             	mov    -0x1a(%ebp),%al
40000158:	3c 0a                	cmp    $0xa,%al
4000015a:	74 0a                	je     40000166 <main+0x116>
4000015c:	a1 08 40 00 40       	mov    0x40004008,%eax
40000161:	83 f8 4f             	cmp    $0x4f,%eax
40000164:	7e 15                	jle    4000017b <main+0x12b>
            x = 0;
40000166:	c7 05 08 40 00 40 00 	movl   $0x0,0x40004008
4000016d:	00 00 00 
            y++;
40000170:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000175:	40                   	inc    %eax
40000176:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (y > 24) {
4000017b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000180:	83 f8 18             	cmp    $0x18,%eax
40000183:	7e 1c                	jle    400001a1 <main+0x151>
            sendCommand(CMD_SCROLL, 0, 0);
40000185:	83 ec 04             	sub    $0x4,%esp
40000188:	6a 00                	push   $0x0
4000018a:	6a 00                	push   $0x0
4000018c:	6a 02                	push   $0x2
4000018e:	e8 6d fe ff ff       	call   40000000 <sendCommand>
40000193:	83 c4 10             	add    $0x10,%esp
            y--;
40000196:	a1 0c 40 00 40       	mov    0x4000400c,%eax
4000019b:	48                   	dec    %eax
4000019c:	a3 0c 40 00 40       	mov    %eax,0x4000400c
        }

        if (nchar == '\n') {
400001a1:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001a4:	3c 0a                	cmp    $0xa,%al
400001a6:	75 05                	jne    400001ad <main+0x15d>
            continue;
400001a8:	e9 d8 00 00 00       	jmp    40000285 <main+0x235>
        }

        if(nchar == 0x11) { //0x11 = SETCLR
400001ad:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001b0:	3c 11                	cmp    $0x11,%al
400001b2:	75 21                	jne    400001d5 <main+0x185>
            fread(fifoInpt, &nchar, sizeof(char));
400001b4:	83 ec 04             	sub    $0x4,%esp
400001b7:	6a 01                	push   $0x1
400001b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
400001bc:	50                   	push   %eax
400001bd:	ff 75 e8             	pushl  -0x18(%ebp)
400001c0:	e8 bd 0a 00 00       	call   40000c82 <fread>
400001c5:	83 c4 10             	add    $0x10,%esp
            color = nchar;
400001c8:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001cb:	a2 00 20 00 40       	mov    %al,0x40002000
            continue;
400001d0:	e9 b0 00 00 00       	jmp    40000285 <main+0x235>
        }

        if(nchar == 8) { //8 = BACKSPACE
400001d5:	8a 45 e6             	mov    -0x1a(%ebp),%al
400001d8:	3c 08                	cmp    $0x8,%al
400001da:	75 33                	jne    4000020f <main+0x1bf>
            if(x == 0) {
400001dc:	a1 08 40 00 40       	mov    0x40004008,%eax
400001e1:	85 c0                	test   %eax,%eax
400001e3:	75 17                	jne    400001fc <main+0x1ac>
                y--;
400001e5:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400001ea:	48                   	dec    %eax
400001eb:	a3 0c 40 00 40       	mov    %eax,0x4000400c
                x = 79;
400001f0:	c7 05 08 40 00 40 4f 	movl   $0x4f,0x40004008
400001f7:	00 00 00 
400001fa:	eb 0b                	jmp    40000207 <main+0x1b7>
            }
            else
            {
                x--;
400001fc:	a1 08 40 00 40       	mov    0x40004008,%eax
40000201:	48                   	dec    %eax
40000202:	a3 08 40 00 40       	mov    %eax,0x40004008
            }
            ochar = ' ';
40000207:	c6 45 f3 20          	movb   $0x20,-0xd(%ebp)
            nchar = 0;
4000020b:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
        }

        uint16_t send = 0;
4000020f:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%ebp)
        char* sndChr = (char*) &send;
40000215:	8d 45 e4             	lea    -0x1c(%ebp),%eax
40000218:	89 45 f4             	mov    %eax,-0xc(%ebp)

        sndChr[0] = ochar;
4000021b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000021e:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000221:	88 10                	mov    %dl,(%eax)
        sndChr[1] = color;
40000223:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000226:	8d 50 01             	lea    0x1(%eax),%edx
40000229:	a0 00 20 00 40       	mov    0x40002000,%al
4000022e:	88 02                	mov    %al,(%edx)

        sendCommand(CMD_SET, x + y * 80, send);
40000230:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000233:	89 c1                	mov    %eax,%ecx
40000235:	81 e1 ff ff 00 00    	and    $0xffff,%ecx
4000023b:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40000240:	89 c2                	mov    %eax,%edx
40000242:	89 d0                	mov    %edx,%eax
40000244:	c1 e0 02             	shl    $0x2,%eax
40000247:	01 d0                	add    %edx,%eax
40000249:	c1 e0 04             	shl    $0x4,%eax
4000024c:	89 c2                	mov    %eax,%edx
4000024e:	a1 08 40 00 40       	mov    0x40004008,%eax
40000253:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000256:	25 ff ff 00 00       	and    $0xffff,%eax
4000025b:	83 ec 04             	sub    $0x4,%esp
4000025e:	51                   	push   %ecx
4000025f:	50                   	push   %eax
40000260:	6a 00                	push   $0x0
40000262:	e8 99 fd ff ff       	call   40000000 <sendCommand>
40000267:	83 c4 10             	add    $0x10,%esp

        if(nchar != 0) {
4000026a:	8a 45 e6             	mov    -0x1a(%ebp),%al
4000026d:	84 c0                	test   %al,%al
4000026f:	0f 84 c5 fe ff ff    	je     4000013a <main+0xea>
            x++;
40000275:	a1 08 40 00 40       	mov    0x40004008,%eax
4000027a:	40                   	inc    %eax
4000027b:	a3 08 40 00 40       	mov    %eax,0x40004008
        }
    }
40000280:	e9 b6 fe ff ff       	jmp    4000013b <main+0xeb>
40000285:	e9 b1 fe ff ff       	jmp    4000013b <main+0xeb>
	...

4000028c <printFilesystemError>:
4000028c:	55                   	push   %ebp
4000028d:	89 e5                	mov    %esp,%ebp
4000028f:	83 ec 08             	sub    $0x8,%esp
40000292:	8b 55 0c             	mov    0xc(%ebp),%edx
40000295:	8b 45 08             	mov    0x8(%ebp),%eax
40000298:	83 fa 05             	cmp    $0x5,%edx
4000029b:	77 43                	ja     400002e0 <printFilesystemError+0x54>
4000029d:	ff 24 95 7c 30 00 40 	jmp    *0x4000307c(,%edx,4)
400002a4:	52                   	push   %edx
400002a5:	52                   	push   %edx
400002a6:	50                   	push   %eax
400002a7:	68 ac 30 00 40       	push   $0x400030ac
400002ac:	eb 3a                	jmp    400002e8 <printFilesystemError+0x5c>
400002ae:	51                   	push   %ecx
400002af:	51                   	push   %ecx
400002b0:	50                   	push   %eax
400002b1:	68 be 30 00 40       	push   $0x400030be
400002b6:	eb 30                	jmp    400002e8 <printFilesystemError+0x5c>
400002b8:	52                   	push   %edx
400002b9:	52                   	push   %edx
400002ba:	50                   	push   %eax
400002bb:	68 dd 30 00 40       	push   $0x400030dd
400002c0:	eb 26                	jmp    400002e8 <printFilesystemError+0x5c>
400002c2:	51                   	push   %ecx
400002c3:	51                   	push   %ecx
400002c4:	50                   	push   %eax
400002c5:	68 07 31 00 40       	push   $0x40003107
400002ca:	eb 1c                	jmp    400002e8 <printFilesystemError+0x5c>
400002cc:	52                   	push   %edx
400002cd:	52                   	push   %edx
400002ce:	50                   	push   %eax
400002cf:	68 1c 31 00 40       	push   $0x4000311c
400002d4:	eb 12                	jmp    400002e8 <printFilesystemError+0x5c>
400002d6:	51                   	push   %ecx
400002d7:	51                   	push   %ecx
400002d8:	50                   	push   %eax
400002d9:	68 57 31 00 40       	push   $0x40003157
400002de:	eb 08                	jmp    400002e8 <printFilesystemError+0x5c>
400002e0:	52                   	push   %edx
400002e1:	52                   	push   %edx
400002e2:	50                   	push   %eax
400002e3:	68 6a 31 00 40       	push   $0x4000316a
400002e8:	e8 63 08 00 00       	call   40000b50 <printf>
400002ed:	c7 45 08 87 31 00 40 	movl   $0x40003187,0x8(%ebp)
400002f4:	83 c4 10             	add    $0x10,%esp
400002f7:	c9                   	leave  
400002f8:	e9 53 08 00 00       	jmp    40000b50 <printf>

400002fd <exec>:
400002fd:	55                   	push   %ebp
400002fe:	89 e5                	mov    %esp,%ebp
40000300:	83 ec 34             	sub    $0x34,%esp
40000303:	8b 45 08             	mov    0x8(%ebp),%eax
40000306:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
4000030d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000310:	8b 45 0c             	mov    0xc(%ebp),%eax
40000313:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000316:	8b 45 10             	mov    0x10(%ebp),%eax
40000319:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000031c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000031f:	50                   	push   %eax
40000320:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000327:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000032e:	e8 a9 10 00 00       	call   400013dc <syscall>
40000333:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000336:	c9                   	leave  
40000337:	c3                   	ret    

40000338 <sexec>:
40000338:	55                   	push   %ebp
40000339:	89 e5                	mov    %esp,%ebp
4000033b:	56                   	push   %esi
4000033c:	53                   	push   %ebx
4000033d:	53                   	push   %ebx
4000033e:	6a 01                	push   $0x1
40000340:	8b 75 08             	mov    0x8(%ebp),%esi
40000343:	ff 75 0c             	pushl  0xc(%ebp)
40000346:	56                   	push   %esi
40000347:	e8 b1 ff ff ff       	call   400002fd <exec>
4000034c:	83 c4 10             	add    $0x10,%esp
4000034f:	89 c3                	mov    %eax,%ebx
40000351:	85 c0                	test   %eax,%eax
40000353:	75 11                	jne    40000366 <sexec+0x2e>
40000355:	e8 da 05 00 00       	call   40000934 <getLastVFSErr>
4000035a:	51                   	push   %ecx
4000035b:	51                   	push   %ecx
4000035c:	50                   	push   %eax
4000035d:	56                   	push   %esi
4000035e:	e8 29 ff ff ff       	call   4000028c <printFilesystemError>
40000363:	83 c4 10             	add    $0x10,%esp
40000366:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000369:	89 d8                	mov    %ebx,%eax
4000036b:	5b                   	pop    %ebx
4000036c:	5e                   	pop    %esi
4000036d:	5d                   	pop    %ebp
4000036e:	c3                   	ret    

4000036f <dexec>:
4000036f:	55                   	push   %ebp
40000370:	89 e5                	mov    %esp,%ebp
40000372:	56                   	push   %esi
40000373:	53                   	push   %ebx
40000374:	51                   	push   %ecx
40000375:	6a 00                	push   $0x0
40000377:	8b 75 08             	mov    0x8(%ebp),%esi
4000037a:	ff 75 0c             	pushl  0xc(%ebp)
4000037d:	56                   	push   %esi
4000037e:	e8 7a ff ff ff       	call   400002fd <exec>
40000383:	83 c4 10             	add    $0x10,%esp
40000386:	89 c3                	mov    %eax,%ebx
40000388:	85 c0                	test   %eax,%eax
4000038a:	75 11                	jne    4000039d <dexec+0x2e>
4000038c:	e8 a3 05 00 00       	call   40000934 <getLastVFSErr>
40000391:	52                   	push   %edx
40000392:	52                   	push   %edx
40000393:	50                   	push   %eax
40000394:	56                   	push   %esi
40000395:	e8 f2 fe ff ff       	call   4000028c <printFilesystemError>
4000039a:	83 c4 10             	add    $0x10,%esp
4000039d:	8d 65 f8             	lea    -0x8(%ebp),%esp
400003a0:	89 d8                	mov    %ebx,%eax
400003a2:	5b                   	pop    %ebx
400003a3:	5e                   	pop    %esi
400003a4:	5d                   	pop    %ebp
400003a5:	c3                   	ret    

400003a6 <getPathChild>:
400003a6:	55                   	push   %ebp
400003a7:	89 e5                	mov    %esp,%ebp
400003a9:	83 ec 34             	sub    $0x34,%esp
400003ac:	8b 45 08             	mov    0x8(%ebp),%eax
400003af:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
400003b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003b9:	8b 45 0c             	mov    0xc(%ebp),%eax
400003bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
400003bf:	8b 45 10             	mov    0x10(%ebp),%eax
400003c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
400003c5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003c8:	50                   	push   %eax
400003c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003d7:	e8 00 10 00 00       	call   400013dc <syscall>
400003dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003df:	c9                   	leave  
400003e0:	c3                   	ret    

400003e1 <changeExecPath>:
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
400003e1:	55                   	push   %ebp
400003e2:	89 e5                	mov    %esp,%ebp
400003e4:	83 ec 34             	sub    $0x34,%esp
    }

    return 0;
}
400003e7:	8b 45 08             	mov    0x8(%ebp),%eax
400003ea:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
400003f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003f4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003f7:	50                   	push   %eax
    }

    return 0;
}
400003f8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000406:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000040d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000414:	e8 c3 0f 00 00       	call   400013dc <syscall>
40000419:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000041c:	c9                   	leave  
4000041d:	c3                   	ret    

4000041e <cd>:
4000041e:	55                   	push   %ebp
4000041f:	89 e5                	mov    %esp,%ebp
40000421:	53                   	push   %ebx
40000422:	83 ec 10             	sub    $0x10,%esp
40000425:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000428:	53                   	push   %ebx
40000429:	e8 b3 ff ff ff       	call   400003e1 <changeExecPath>
4000042e:	83 c4 10             	add    $0x10,%esp
40000431:	85 c0                	test   %eax,%eax
40000433:	75 11                	jne    40000446 <cd+0x28>
40000435:	e8 fa 04 00 00       	call   40000934 <getLastVFSErr>
4000043a:	52                   	push   %edx
4000043b:	52                   	push   %edx
4000043c:	50                   	push   %eax
4000043d:	53                   	push   %ebx
4000043e:	e8 49 fe ff ff       	call   4000028c <printFilesystemError>
40000443:	83 c4 10             	add    $0x10,%esp
40000446:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000449:	c9                   	leave  
4000044a:	c3                   	ret    

4000044b <getExecPath>:
                x = 79;
            }
            else
            {
                x--;
            }
4000044b:	55                   	push   %ebp
4000044c:	89 e5                	mov    %esp,%ebp
4000044e:	83 ec 34             	sub    $0x34,%esp
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
40000451:	8b 45 08             	mov    0x8(%ebp),%eax
40000454:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
4000045b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        sndChr[1] = color;

4000045e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000461:	50                   	push   %eax
        }

        uint16_t send = 0;
        char* sndChr = (char*) &send;

        sndChr[0] = ochar;
40000462:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000469:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000470:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000477:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        sndChr[1] = color;

4000047e:	e8 59 0f 00 00       	call   400013dc <syscall>
40000483:	83 c4 10             	add    $0x10,%esp
        sendCommand(CMD_SET, x + y * 80, send);
40000486:	c9                   	leave  
40000487:	c3                   	ret    

40000488 <exit>:
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }

        if (nchar == '\n') {
            continue;
40000488:	55                   	push   %ebp
40000489:	89 e5                	mov    %esp,%ebp
4000048b:	83 ec 34             	sub    $0x34,%esp
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

4000048e:	8b 45 08             	mov    0x8(%ebp),%eax
40000491:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000498:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
4000049b:	8d 45 e0             	lea    -0x20(%ebp),%eax
        if(nchar == 0x11) { //0x11 = SETCLR
            fread(fifoInpt, &nchar, sizeof(char));
            color = nchar;
            continue;
        }

4000049e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(nchar == 8) { //8 = BACKSPACE
            if(x == 0) {
400004ba:	50                   	push   %eax
400004bb:	e8 1c 0f 00 00       	call   400013dc <syscall>
                y--;
                x = 79;
            }
400004c0:	c7 04 24 72 31 00 40 	movl   $0x40003172,(%esp)
400004c7:	e8 84 06 00 00       	call   40000b50 <printf>
400004cc:	eb f2                	jmp    400004c0 <exit+0x38>

400004ce <yield>:
    fclose(initCtrl);

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
400004ce:	55                   	push   %ebp
400004cf:	89 e5                	mov    %esp,%ebp
400004d1:	83 ec 34             	sub    $0x34,%esp
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004d4:	8d 45 e0             	lea    -0x20(%ebp),%eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

400004d7:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
400004de:	50                   	push   %eax

        if ((nchar == '\n') || (x > 79)) {
            x = 0;
            y++;
        }

400004df:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400004e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000502:	e8 d5 0e 00 00       	call   400013dc <syscall>
40000507:	83 c4 10             	add    $0x10,%esp
            y--;
        }

4000050a:	c9                   	leave  
4000050b:	c3                   	ret    

4000050c <pexists>:
static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

struct vga_command vgac = { .command = 0, .offset = 0, .value = 0 };

4000050c:	55                   	push   %ebp
4000050d:	89 e5                	mov    %esp,%ebp
4000050f:	83 ec 34             	sub    $0x34,%esp
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000512:	8b 45 08             	mov    0x8(%ebp),%eax
40000515:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
4000051c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

4000051f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000522:	50                   	push   %eax
void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000523:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000052a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000531:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000538:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}

4000053f:	e8 98 0e 00 00       	call   400013dc <syscall>
int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
40000544:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000547:	c9                   	leave  
40000548:	c3                   	ret    

40000549 <register_irq_handler>:
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000549:	55                   	push   %ebp
4000054a:	89 e5                	mov    %esp,%ebp
4000054c:	53                   	push   %ebx
4000054d:	83 ec 30             	sub    $0x30,%esp
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000550:	8d 45 e0             	lea    -0x20(%ebp),%eax
            x = 0;
            y++;
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
40000553:	8b 5d 08             	mov    0x8(%ebp),%ebx
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
        ochar = nchar;

40000556:	50                   	push   %eax

    char nchar = '\0';
    char ochar = '\0';

    while(1) {
        fread(fifoInpt, &nchar, sizeof(char));
40000557:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
4000055e:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000561:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000568:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000056f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000576:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        ochar = nchar;

4000057d:	e8 5a 0e 00 00       	call   400013dc <syscall>
        if ((nchar == '\n') || (x > 79)) {
            x = 0;
40000582:	83 c4 10             	add    $0x10,%esp
40000585:	31 c0                	xor    %eax,%eax
40000587:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000058b:	74 0f                	je     4000059c <register_irq_handler+0x53>
        }

        if (y > 24) {
            sendCommand(CMD_SCROLL, 0, 0);
            y--;
        }
4000058d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000590:	89 04 9d 10 40 00 40 	mov    %eax,0x40004010(,%ebx,4)
40000597:	b8 01 00 00 00       	mov    $0x1,%eax

        if (nchar == '\n') {
            continue;
        }
4000059c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000059f:	c9                   	leave  
400005a0:	c3                   	ret    

400005a1 <fetch_rpc_data>:
    fwrite(vgaController, &vgac, sizeof(struct vga_command));
}

int main(int argc, char* args[])
{
    vgaController   = fopen("/dev/vga", FM_WRITE);
400005a1:	55                   	push   %ebp
400005a2:	89 e5                	mov    %esp,%ebp
400005a4:	83 ec 34             	sub    $0x34,%esp
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

400005a7:	8b 45 08             	mov    0x8(%ebp),%eax
400005aa:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
400005b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

400005b4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400005b7:	50                   	push   %eax
    printf("vgaController: %x\n", vgaController);
    printf("fifoInpt: %x\n", fifoInpt);

    setstdout("/dev/tty0");
    setstderr("/dev/tty0");

400005b8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    printf("[ttytovga] Switched to TTY to VGA (userspace terminal)\n");

400005d4:	e8 03 0e 00 00       	call   400013dc <syscall>
400005d9:	83 c4 10             	add    $0x10,%esp
    sendCommand(CMD_CLEAR, 0, 0);
400005dc:	c9                   	leave  
400005dd:	c3                   	ret    

400005de <call_rpc>:
};

static int  x     = 0;
static int  y     = 0;
static char color = 0x07;

400005de:	55                   	push   %ebp
400005df:	89 e5                	mov    %esp,%ebp
400005e1:	83 ec 34             	sub    $0x34,%esp
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
400005e4:	8b 45 08             	mov    0x8(%ebp),%eax
400005e7:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
400005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400005f1:	8b 45 0c             	mov    0xc(%ebp),%eax
400005f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400005f7:	8b 45 10             	mov    0x10(%ebp),%eax
400005fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
400005fd:	8b 45 14             	mov    0x14(%ebp),%eax
40000600:	89 45 f0             	mov    %eax,-0x10(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
40000603:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000606:	50                   	push   %eax
HANDLE vgaController;

void sendCommand(uint16_t c, uint16_t o, uint16_t v) {
    vgac.command = c;
    vgac.offset = o;
    vgac.value = v;
40000607:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    fwrite(vgaController, &vgac, sizeof(struct vga_command));
4000060e:	e8 c9 0d 00 00       	call   400013dc <syscall>
}

int main(int argc, char* args[])
40000613:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000616:	c9                   	leave  
40000617:	c3                   	ret    

40000618 <set_rpc_handler>:
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
40000618:	55                   	push   %ebp
40000619:	89 e5                	mov    %esp,%ebp
4000061b:	57                   	push   %edi
4000061c:	56                   	push   %esi
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
4000061d:	be 94 30 00 40       	mov    $0x40003094,%esi
            {
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }
40000622:	83 ec 24             	sub    $0x24,%esp
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000625:	8d 7d e0             	lea    -0x20(%ebp),%edi
                x--;
            }
            ochar = ' ';
            nchar = 0;
        }

40000628:	68 00 02 00 00       	push   $0x200
4000062d:	6a 00                	push   $0x0
4000062f:	68 10 40 00 40       	push   $0x40004010
40000634:	e8 c3 07 00 00       	call   40000dfc <memset>
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000639:	b9 06 00 00 00       	mov    $0x6,%ecx
            x++;
        }
4000063e:	8d 45 e0             	lea    -0x20(%ebp),%eax
        sndChr[0] = ochar;
        sndChr[1] = color;

        sendCommand(CMD_SET, x + y * 80, send);

        if(nchar != 0) {
40000641:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
            x++;
        }
40000643:	89 04 24             	mov    %eax,(%esp)
40000646:	e8 91 0d 00 00       	call   400013dc <syscall>
4000064b:	83 c4 10             	add    $0x10,%esp
    }
4000064e:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000651:	5e                   	pop    %esi
40000652:	5f                   	pop    %edi
40000653:	5d                   	pop    %ebp
40000654:	c3                   	ret    

40000655 <_start>:
    syscall(&state);

    return state.eax;
}

void _start() {
40000655:	55                   	push   %ebp
40000656:	89 e5                	mov    %esp,%ebp
40000658:	56                   	push   %esi
40000659:	53                   	push   %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
4000065a:	31 db                	xor    %ebx,%ebx
    syscall(&state);

    return state.eax;
}

void _start() {
4000065c:	83 ec 2c             	sub    $0x2c,%esp
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000065f:	8d 45 e0             	lea    -0x20(%ebp),%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000662:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000669:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    syscall(&state);
40000670:	50                   	push   %eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000671:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000678:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000067f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    syscall(&state);
4000068d:	e8 4a 0d 00 00       	call   400013dc <syscall>

    return state.eax;
40000692:	8b 75 e0             	mov    -0x20(%ebp),%esi
void _start() {
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
40000695:	83 c4 10             	add    $0x10,%esp
40000698:	85 f6                	test   %esi,%esi
4000069a:	75 05                	jne    400006a1 <_start+0x4c>
4000069c:	89 f3                	mov    %esi,%ebx
4000069e:	eb 07                	jmp    400006a7 <_start+0x52>
      while(args[argc] != 0) {
          argc++;
400006a0:	43                   	inc    %ebx
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
400006a1:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
400006a5:	75 f9                	jne    400006a0 <_start+0x4b>
          argc++;
      }
  }

  set_rpc_handler();
400006a7:	e8 6c ff ff ff       	call   40000618 <set_rpc_handler>

  int result = main(argc, args);
400006ac:	51                   	push   %ecx
400006ad:	51                   	push   %ecx
400006ae:	56                   	push   %esi
400006af:	53                   	push   %ebx
400006b0:	e8 9b f9 ff ff       	call   40000050 <main>

  exit(result);
400006b5:	89 04 24             	mov    %eax,(%esp)
400006b8:	e8 cb fd ff ff       	call   40000488 <exit>
400006bd:	83 c4 10             	add    $0x10,%esp
}
400006c0:	8d 65 f8             	lea    -0x8(%ebp),%esp
400006c3:	5b                   	pop    %ebx
400006c4:	5e                   	pop    %esi
400006c5:	5d                   	pop    %ebp
400006c6:	c3                   	ret    

400006c7 <_handle_rpc>:
}

void exit(int returncode) {
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
400006c7:	55                   	push   %ebp
400006c8:	89 e5                	mov    %esp,%ebp
400006ca:	56                   	push   %esi
400006cb:	53                   	push   %ebx
400006cc:	83 ec 2c             	sub    $0x2c,%esp
        .ecx = 0,
400006cf:	ff 75 10             	pushl  0x10(%ebp)
}

void exit(int returncode) {
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
400006d2:	8b 75 0c             	mov    0xc(%ebp),%esi
        .ecx = 0,
400006d5:	e8 bb 0a 00 00       	call   40001195 <malloc>
        .edx = 0,
400006da:	89 04 24             	mov    %eax,(%esp)

void exit(int returncode) {
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
        .ecx = 0,
400006dd:	89 c3                	mov    %eax,%ebx
        .edx = 0,
400006df:	e8 bd fe ff ff       	call   400005a1 <fetch_rpc_data>
        .esi = 0,
        .edi = 0
400006e4:	83 c4 10             	add    $0x10,%esp
400006e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400006eb:	75 4b                	jne    40000738 <_handle_rpc+0x71>
    };
400006ed:	8b 04 b5 10 40 00 40 	mov    0x40004010(,%esi,4),%eax
400006f4:	85 c0                	test   %eax,%eax
400006f6:	74 40                	je     40000738 <_handle_rpc+0x71>

400006f8:	83 ec 0c             	sub    $0xc,%esp
400006fb:	56                   	push   %esi
400006fc:	ff d0                	call   *%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400006fe:	8d 45 e0             	lea    -0x20(%ebp),%eax
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000701:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .edi = 0
    };
40000708:	89 04 24             	mov    %eax,(%esp)
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
4000070b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000712:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000719:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000720:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000727:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edi = 0
    };
4000072e:	e8 a9 0c 00 00       	call   400013dc <syscall>
40000733:	83 c4 10             	add    $0x10,%esp
40000736:	eb fe                	jmp    40000736 <_handle_rpc+0x6f>

    syscall(&state);

    while(1) {
      printf("error\n");
    }
40000738:	83 ec 0c             	sub    $0xc,%esp
4000073b:	68 79 31 00 40       	push   $0x40003179
40000740:	e8 0b 04 00 00       	call   40000b50 <printf>
}

40000745:	89 1c 24             	mov    %ebx,(%esp)
40000748:	e8 ff 08 00 00       	call   4000104c <free>
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000074d:	8d 45 e0             	lea    -0x20(%ebp),%eax
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000750:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .edi = 0
    };
40000757:	89 04 24             	mov    %eax,(%esp)
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
4000075a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000761:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000768:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000076f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000776:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edi = 0
    };
4000077d:	e8 5a 0c 00 00       	call   400013dc <syscall>
40000782:	83 c4 10             	add    $0x10,%esp
40000785:	eb fe                	jmp    40000785 <_handle_rpc+0xbe>
	...

40000788 <resolveHandle>:
    };

    syscall(&state);

    return state.eax;
}
40000788:	55                   	push   %ebp
40000789:	89 e5                	mov    %esp,%ebp
4000078b:	83 ec 28             	sub    $0x28,%esp

4000078e:	3d fe 0f 00 00       	cmp    $0xffe,%eax
40000793:	77 38                	ja     400007cd <resolveHandle+0x45>
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000795:	83 ec 0c             	sub    $0xc,%esp
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000798:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .edi = 0
    };
4000079b:	8d 45 e0             	lea    -0x20(%ebp),%eax
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
4000079e:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
      .edi = 0
    };
400007a5:	50                   	push   %eax
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
400007a6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edi = 0
    };
400007c2:	e8 15 0c 00 00       	call   400013dc <syscall>

    syscall(&state);
400007c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007ca:	83 c4 10             	add    $0x10,%esp
}

void _start() {
  char** args = (char**) getargs();

  int argc = 0;
400007cd:	c9                   	leave  
400007ce:	c3                   	ret    

400007cf <fmkfifo>:
        printf("%s: Filesystem error", path);
        break;
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
        break;
    case PE_FILE_NOT_FOUND:
400007cf:	55                   	push   %ebp
400007d0:	89 e5                	mov    %esp,%ebp
400007d2:	83 ec 34             	sub    $0x34,%esp
    default:
        printf("%s: WTF", path);
        break;

    }
    printf("\n");
400007d5:	8b 45 08             	mov    0x8(%ebp),%eax
400007d8:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
400007df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}
400007e2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007e5:	50                   	push   %eax
    default:
        printf("%s: WTF", path);
        break;

    }
    printf("\n");
400007e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}
40000802:	e8 d5 0b 00 00       	call   400013dc <syscall>
40000807:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000080a:	c9                   	leave  
4000080b:	c3                   	ret    

4000080c <favailable>:
    };

    syscall(&state);

    return state.eax;
}
4000080c:	55                   	push   %ebp
4000080d:	89 e5                	mov    %esp,%ebp
4000080f:	83 ec 34             	sub    $0x34,%esp
    struct regstate state = {
        .eax = 17,
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
40000812:	8b 45 08             	mov    0x8(%ebp),%eax
40000815:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
4000081c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .edi = 0
    };
4000081f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000822:	50                   	push   %eax
    struct regstate state = {
        .eax = 17,
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
40000823:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000082a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000831:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000838:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edi = 0
    };
4000083f:	e8 98 0b 00 00       	call   400013dc <syscall>

    syscall(&state);

40000844:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000847:	c9                   	leave  
40000848:	c3                   	ret    

40000849 <fclose>:
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000849:	55                   	push   %ebp
4000084a:	89 e5                	mov    %esp,%ebp
4000084c:	83 ec 34             	sub    $0x34,%esp
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
4000084f:	8b 45 08             	mov    0x8(%ebp),%eax
40000852:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000859:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
4000085c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000085f:	50                   	push   %eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000860:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000867:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000086e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000875:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
4000087c:	e8 5b 0b 00 00       	call   400013dc <syscall>
        .ecx = 0,
        .edx = 0,
        .esi = 0,
40000881:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000884:	c9                   	leave  
40000885:	c3                   	ret    

40000886 <fopen>:
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000886:	55                   	push   %ebp
40000887:	89 e5                	mov    %esp,%ebp
40000889:	83 ec 34             	sub    $0x34,%esp
}

void exit(int returncode) {
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
4000088c:	8b 45 08             	mov    0x8(%ebp),%eax
4000088f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000896:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000899:	8b 45 0c             	mov    0xc(%ebp),%eax
4000089c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        .ecx = 0,
        .edx = 0,
4000089f:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008a2:	50                   	push   %eax
}

void exit(int returncode) {
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
400008a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .ecx = 0,
        .edx = 0,
400008b8:	e8 1f 0b 00 00       	call   400013dc <syscall>
        .esi = 0,
        .edi = 0
    };
400008bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008c0:	c9                   	leave  
400008c1:	c3                   	ret    

400008c2 <fopenpmhandle>:

  if(args != 0) {
      while(args[argc] != 0) {
          argc++;
      }
  }
400008c2:	55                   	push   %ebp
400008c3:	89 e5                	mov    %esp,%ebp
400008c5:	83 ec 34             	sub    $0x34,%esp

  int result = main(argc, args);

  exit(result);
}

400008c8:	8b 45 08             	mov    0x8(%ebp),%eax
400008cb:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400008d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400008d5:	8b 45 0c             	mov    0xc(%ebp),%eax
400008d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
void yield() {
    struct regstate state = {
400008db:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008de:	50                   	push   %eax

  int result = main(argc, args);

  exit(result);
}

400008df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
void yield() {
    struct regstate state = {
400008f4:	e8 e3 0a 00 00       	call   400013dc <syscall>
      .eax = 5,
      .ebx = 0,
      .ecx = 0,
400008f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008fc:	c9                   	leave  
400008fd:	c3                   	ret    

400008fe <setstderr>:
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400008fe:	55                   	push   %ebp
400008ff:	89 e5                	mov    %esp,%ebp
40000901:	83 ec 10             	sub    $0x10,%esp
40000904:	ff 75 08             	pushl  0x8(%ebp)
40000907:	6a 03                	push   $0x3
40000909:	e8 b4 ff ff ff       	call   400008c2 <fopenpmhandle>
4000090e:	c9                   	leave  
4000090f:	c3                   	ret    

40000910 <setstdin>:
      .eax = 5,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40000910:	55                   	push   %ebp
40000911:	89 e5                	mov    %esp,%ebp
40000913:	83 ec 10             	sub    $0x10,%esp
40000916:	ff 75 08             	pushl  0x8(%ebp)
40000919:	6a 02                	push   $0x2
4000091b:	e8 a2 ff ff ff       	call   400008c2 <fopenpmhandle>
40000920:	c9                   	leave  
40000921:	c3                   	ret    

40000922 <setstdout>:
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000922:	55                   	push   %ebp
40000923:	89 e5                	mov    %esp,%ebp
40000925:	83 ec 10             	sub    $0x10,%esp
40000928:	ff 75 08             	pushl  0x8(%ebp)
4000092b:	6a 01                	push   $0x1
4000092d:	e8 90 ff ff ff       	call   400008c2 <fopenpmhandle>
40000932:	c9                   	leave  
40000933:	c3                   	ret    

40000934 <getLastVFSErr>:
#include "process.h"
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);
40000934:	55                   	push   %ebp
40000935:	89 e5                	mov    %esp,%ebp
40000937:	83 ec 34             	sub    $0x34,%esp
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000093a:	8d 45 e0             	lea    -0x20(%ebp),%eax
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
4000093d:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
      .edi = 0
    };
40000944:	50                   	push   %eax
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000945:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000094c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000953:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000095a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000961:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edi = 0
    };
40000968:	e8 6f 0a 00 00       	call   400013dc <syscall>

    syscall(&state);

4000096d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000970:	c9                   	leave  
40000971:	c3                   	ret    

40000972 <fwrite>:
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };

40000972:	55                   	push   %ebp
40000973:	89 e5                	mov    %esp,%ebp
40000975:	57                   	push   %edi
40000976:	56                   	push   %esi
40000977:	53                   	push   %ebx
40000978:	83 ec 3c             	sub    $0x3c,%esp
    syscall(&state);
4000097b:	8b 45 08             	mov    0x8(%ebp),%eax
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };

4000097e:	8b 7d 10             	mov    0x10(%ebp),%edi
    syscall(&state);
40000981:	e8 02 fe ff ff       	call   40000788 <resolveHandle>

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
40000986:	83 ec 0c             	sub    $0xc,%esp
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000989:	89 c6                	mov    %eax,%esi
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
4000098b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
4000098e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000991:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000998:	89 45 d8             	mov    %eax,-0x28(%ebp)
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
4000099b:	8d 45 d0             	lea    -0x30(%ebp),%eax
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
4000099e:	89 7d dc             	mov    %edi,-0x24(%ebp)
400009a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400009a8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400009af:	50                   	push   %eax
400009b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
400009b3:	eb 2d                	jmp    400009e2 <fwrite+0x70>
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
400009b5:	e8 14 fb ff ff       	call   400004ce <yield>
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
400009ba:	8b 45 0c             	mov    0xc(%ebp),%eax
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400009bd:	83 ec 0c             	sub    $0xc,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
400009c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400009c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
400009c6:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400009cd:	89 75 d4             	mov    %esi,-0x2c(%ebp)
400009d0:	89 7d dc             	mov    %edi,-0x24(%ebp)
400009d3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400009da:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400009e1:	50                   	push   %eax
400009e2:	e8 f5 09 00 00       	call   400013dc <syscall>
        .edx = asSubtask,
        .esi = 0,
400009e7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
400009ea:	83 c4 10             	add    $0x10,%esp

    syscall(&state);

    return state.eax;
}

400009ed:	83 fb 01             	cmp    $0x1,%ebx
400009f0:	74 c3                	je     400009b5 <fwrite+0x43>
int dexec(char* path, char** args) {
    uint32_t res = exec(path, args, 0);

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
400009f2:	89 f0                	mov    %esi,%eax
400009f4:	89 da                	mov    %ebx,%edx
400009f6:	e8 3d 02 00 00       	call   40000c38 <printrwerror>
    }

    return res;
400009fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
400009fe:	89 d8                	mov    %ebx,%eax
40000a00:	5b                   	pop    %ebx
40000a01:	5e                   	pop    %esi
40000a02:	5f                   	pop    %edi
40000a03:	5d                   	pop    %ebp
40000a04:	c3                   	ret    

40000a05 <fputs>:
40000a05:	55                   	push   %ebp
40000a06:	89 e5                	mov    %esp,%ebp
40000a08:	56                   	push   %esi
40000a09:	53                   	push   %ebx
40000a0a:	83 ec 20             	sub    $0x20,%esp
40000a0d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a10:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000a13:	e8 70 fd ff ff       	call   40000788 <resolveHandle>
40000a18:	89 c6                	mov    %eax,%esi
40000a1a:	85 c0                	test   %eax,%eax
40000a1c:	74 16                	je     40000a34 <fputs+0x2f>
40000a1e:	83 ec 0c             	sub    $0xc,%esp
40000a21:	53                   	push   %ebx
40000a22:	e8 a7 04 00 00       	call   40000ece <strlen>
40000a27:	83 c4 0c             	add    $0xc,%esp
40000a2a:	50                   	push   %eax
40000a2b:	53                   	push   %ebx
40000a2c:	56                   	push   %esi
40000a2d:	e8 40 ff ff ff       	call   40000972 <fwrite>
40000a32:	eb 35                	jmp    40000a69 <fputs+0x64>
40000a34:	83 ec 0c             	sub    $0xc,%esp
40000a37:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000a3a:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000a41:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000a44:	50                   	push   %eax
40000a45:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000a4c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000a53:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000a5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a61:	e8 76 09 00 00       	call   400013dc <syscall>
40000a66:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000a69:	83 c4 10             	add    $0x10,%esp
40000a6c:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000a6f:	5b                   	pop    %ebx
40000a70:	5e                   	pop    %esi
40000a71:	5d                   	pop    %ebp
40000a72:	c3                   	ret    

40000a73 <puts>:
40000a73:	55                   	push   %ebp
40000a74:	89 e5                	mov    %esp,%ebp
40000a76:	83 ec 10             	sub    $0x10,%esp
40000a79:	6a 01                	push   $0x1
40000a7b:	ff 75 08             	pushl  0x8(%ebp)
40000a7e:	e8 82 ff ff ff       	call   40000a05 <fputs>
40000a83:	c9                   	leave  
40000a84:	c3                   	ret    

40000a85 <putn>:
40000a85:	55                   	push   %ebp
40000a86:	89 e5                	mov    %esp,%ebp
40000a88:	56                   	push   %esi
40000a89:	53                   	push   %ebx
40000a8a:	31 f6                	xor    %esi,%esi
40000a8c:	83 ec 50             	sub    $0x50,%esp
40000a8f:	89 d3                	mov    %edx,%ebx
40000a91:	83 fa 24             	cmp    $0x24,%edx
40000a94:	7f 25                	jg     40000abb <putn+0x36>
40000a96:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000a9a:	8d 4d f7             	lea    -0x9(%ebp),%ecx
40000a9d:	31 d2                	xor    %edx,%edx
40000a9f:	49                   	dec    %ecx
40000aa0:	f7 f3                	div    %ebx
40000aa2:	46                   	inc    %esi
40000aa3:	85 c0                	test   %eax,%eax
40000aa5:	8a 92 89 31 00 40    	mov    0x40003189(%edx),%dl
40000aab:	88 11                	mov    %dl,(%ecx)
40000aad:	75 ee                	jne    40000a9d <putn+0x18>
40000aaf:	83 ec 0c             	sub    $0xc,%esp
40000ab2:	51                   	push   %ecx
40000ab3:	e8 bb ff ff ff       	call   40000a73 <puts>
40000ab8:	83 c4 10             	add    $0x10,%esp
40000abb:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000abe:	89 f0                	mov    %esi,%eax
40000ac0:	5b                   	pop    %ebx
40000ac1:	5e                   	pop    %esi
40000ac2:	5d                   	pop    %ebp
40000ac3:	c3                   	ret    

40000ac4 <fputc>:
40000ac4:	55                   	push   %ebp
40000ac5:	89 e5                	mov    %esp,%ebp
40000ac7:	83 ec 38             	sub    $0x38,%esp
40000aca:	8b 45 08             	mov    0x8(%ebp),%eax
40000acd:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ad3:	e8 b0 fc ff ff       	call   40000788 <resolveHandle>
40000ad8:	85 c0                	test   %eax,%eax
40000ada:	74 0f                	je     40000aeb <fputc+0x27>
40000adc:	52                   	push   %edx
40000add:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000ae0:	6a 01                	push   $0x1
40000ae2:	52                   	push   %edx
40000ae3:	50                   	push   %eax
40000ae4:	e8 89 fe ff ff       	call   40000972 <fwrite>
40000ae9:	eb 39                	jmp    40000b24 <fputc+0x60>
40000aeb:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000aef:	83 ec 0c             	sub    $0xc,%esp
40000af2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000af5:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000af8:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000aff:	50                   	push   %eax
40000b00:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b07:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b0e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000b1c:	e8 bb 08 00 00       	call   400013dc <syscall>
40000b21:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000b24:	83 c4 10             	add    $0x10,%esp
40000b27:	c9                   	leave  
40000b28:	c3                   	ret    

40000b29 <putc>:
40000b29:	55                   	push   %ebp
40000b2a:	89 e5                	mov    %esp,%ebp
40000b2c:	83 ec 08             	sub    $0x8,%esp
40000b2f:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000b33:	89 45 08             	mov    %eax,0x8(%ebp)
40000b36:	c9                   	leave  
40000b37:	e9 88 ff ff ff       	jmp    40000ac4 <fputc>

40000b3c <putchar>:
40000b3c:	55                   	push   %ebp
40000b3d:	89 e5                	mov    %esp,%ebp
40000b3f:	83 ec 10             	sub    $0x10,%esp
40000b42:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000b46:	6a 01                	push   $0x1
40000b48:	50                   	push   %eax
40000b49:	e8 76 ff ff ff       	call   40000ac4 <fputc>
40000b4e:	c9                   	leave  
40000b4f:	c3                   	ret    

40000b50 <printf>:
40000b50:	55                   	push   %ebp
40000b51:	89 e5                	mov    %esp,%ebp
40000b53:	57                   	push   %edi
40000b54:	56                   	push   %esi
40000b55:	53                   	push   %ebx
40000b56:	83 ec 1c             	sub    $0x1c,%esp
40000b59:	8d 75 0c             	lea    0xc(%ebp),%esi
40000b5c:	8b 7d 08             	mov    0x8(%ebp),%edi
40000b5f:	31 db                	xor    %ebx,%ebx
40000b61:	e9 be 00 00 00       	jmp    40000c24 <printf+0xd4>
40000b66:	3c 25                	cmp    $0x25,%al
40000b68:	0f 85 a4 00 00 00    	jne    40000c12 <printf+0xc2>
40000b6e:	47                   	inc    %edi
40000b6f:	8a 07                	mov    (%edi),%al
40000b71:	3c 70                	cmp    $0x70,%al
40000b73:	74 47                	je     40000bbc <printf+0x6c>
40000b75:	7f 1a                	jg     40000b91 <printf+0x41>
40000b77:	3c 63                	cmp    $0x63,%al
40000b79:	74 5a                	je     40000bd5 <printf+0x85>
40000b7b:	7f 0e                	jg     40000b8b <printf+0x3b>
40000b7d:	84 c0                	test   %al,%al
40000b7f:	0f 84 a9 00 00 00    	je     40000c2e <printf+0xde>
40000b85:	3c 25                	cmp    $0x25,%al
40000b87:	75 6c                	jne    40000bf5 <printf+0xa5>
40000b89:	eb 63                	jmp    40000bee <printf+0x9e>
40000b8b:	3c 64                	cmp    $0x64,%al
40000b8d:	75 66                	jne    40000bf5 <printf+0xa5>
40000b8f:	eb 1e                	jmp    40000baf <printf+0x5f>
40000b91:	3c 75                	cmp    $0x75,%al
40000b93:	74 1a                	je     40000baf <printf+0x5f>
40000b95:	3c 78                	cmp    $0x78,%al
40000b97:	74 23                	je     40000bbc <printf+0x6c>
40000b99:	3c 73                	cmp    $0x73,%al
40000b9b:	75 58                	jne    40000bf5 <printf+0xa5>
40000b9d:	83 ec 0c             	sub    $0xc,%esp
40000ba0:	8d 46 04             	lea    0x4(%esi),%eax
40000ba3:	ff 36                	pushl  (%esi)
40000ba5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000ba8:	e8 c6 fe ff ff       	call   40000a73 <puts>
40000bad:	eb 38                	jmp    40000be7 <printf+0x97>
40000baf:	8d 46 04             	lea    0x4(%esi),%eax
40000bb2:	ba 0a 00 00 00       	mov    $0xa,%edx
40000bb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000bba:	eb 0b                	jmp    40000bc7 <printf+0x77>
40000bbc:	8d 46 04             	lea    0x4(%esi),%eax
40000bbf:	ba 10 00 00 00       	mov    $0x10,%edx
40000bc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000bc7:	8b 06                	mov    (%esi),%eax
40000bc9:	e8 b7 fe ff ff       	call   40000a85 <putn>
40000bce:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000bd1:	01 c3                	add    %eax,%ebx
40000bd3:	eb 4e                	jmp    40000c23 <printf+0xd3>
40000bd5:	8d 46 04             	lea    0x4(%esi),%eax
40000bd8:	83 ec 0c             	sub    $0xc,%esp
40000bdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000bde:	0f be 06             	movsbl (%esi),%eax
40000be1:	50                   	push   %eax
40000be2:	e8 55 ff ff ff       	call   40000b3c <putchar>
40000be7:	01 c3                	add    %eax,%ebx
40000be9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000bec:	eb 32                	jmp    40000c20 <printf+0xd0>
40000bee:	83 ec 0c             	sub    $0xc,%esp
40000bf1:	6a 25                	push   $0x25
40000bf3:	eb 24                	jmp    40000c19 <printf+0xc9>
40000bf5:	83 ec 0c             	sub    $0xc,%esp
40000bf8:	6a 25                	push   $0x25
40000bfa:	e8 3d ff ff ff       	call   40000b3c <putchar>
40000bff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c02:	0f be 07             	movsbl (%edi),%eax
40000c05:	89 04 24             	mov    %eax,(%esp)
40000c08:	e8 2f ff ff ff       	call   40000b3c <putchar>
40000c0d:	03 45 e4             	add    -0x1c(%ebp),%eax
40000c10:	eb 0c                	jmp    40000c1e <printf+0xce>
40000c12:	83 ec 0c             	sub    $0xc,%esp
40000c15:	0f be c0             	movsbl %al,%eax
40000c18:	50                   	push   %eax
40000c19:	e8 1e ff ff ff       	call   40000b3c <putchar>
40000c1e:	01 c3                	add    %eax,%ebx
40000c20:	83 c4 10             	add    $0x10,%esp
40000c23:	47                   	inc    %edi
40000c24:	8a 07                	mov    (%edi),%al
40000c26:	84 c0                	test   %al,%al
40000c28:	0f 85 38 ff ff ff    	jne    40000b66 <printf+0x16>
40000c2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000c31:	89 d8                	mov    %ebx,%eax
40000c33:	5b                   	pop    %ebx
40000c34:	5e                   	pop    %esi
40000c35:	5f                   	pop    %edi
40000c36:	5d                   	pop    %ebp
40000c37:	c3                   	ret    

40000c38 <printrwerror>:
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000c38:	55                   	push   %ebp
40000c39:	89 e5                	mov    %esp,%ebp
40000c3b:	83 ec 08             	sub    $0x8,%esp

40000c3e:	83 fa 02             	cmp    $0x2,%edx
40000c41:	75 0a                	jne    40000c4d <printrwerror+0x15>
    syscall(&state);
40000c43:	52                   	push   %edx
40000c44:	52                   	push   %edx
40000c45:	50                   	push   %eax
40000c46:	68 ae 31 00 40       	push   $0x400031ae
40000c4b:	eb 2b                	jmp    40000c78 <printrwerror+0x40>
}

int changeExecPath(char* path) {
40000c4d:	83 fa 03             	cmp    $0x3,%edx
40000c50:	75 0a                	jne    40000c5c <printrwerror+0x24>
    struct regstate state = {
40000c52:	51                   	push   %ecx
40000c53:	51                   	push   %ecx
40000c54:	50                   	push   %eax
40000c55:	68 c6 31 00 40       	push   $0x400031c6
40000c5a:	eb 1c                	jmp    40000c78 <printrwerror+0x40>
        .eax = 7,
        .ebx = (uint32_t)path,
        .ecx = 0,
40000c5c:	83 fa 04             	cmp    $0x4,%edx
40000c5f:	75 0a                	jne    40000c6b <printrwerror+0x33>
        .edx = 0,
40000c61:	52                   	push   %edx
40000c62:	52                   	push   %edx
40000c63:	50                   	push   %eax
40000c64:	68 e1 31 00 40       	push   $0x400031e1
40000c69:	eb 0d                	jmp    40000c78 <printrwerror+0x40>
        .esi = 0,
        .edi = 0
    };
40000c6b:	83 fa 05             	cmp    $0x5,%edx
40000c6e:	75 10                	jne    40000c80 <printrwerror+0x48>

40000c70:	51                   	push   %ecx
40000c71:	51                   	push   %ecx
40000c72:	50                   	push   %eax
40000c73:	68 0b 32 00 40       	push   $0x4000320b
40000c78:	e8 d3 fe ff ff       	call   40000b50 <printf>
40000c7d:	83 c4 10             	add    $0x10,%esp
    syscall(&state);

40000c80:	c9                   	leave  
40000c81:	c3                   	ret    

40000c82 <fread>:

void printFilesystemError(char* path, uint32_t code) {
    switch(code) {
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
        break;
40000c82:	55                   	push   %ebp
40000c83:	89 e5                	mov    %esp,%ebp
40000c85:	57                   	push   %edi
40000c86:	56                   	push   %esi
40000c87:	53                   	push   %ebx
40000c88:	83 ec 38             	sub    $0x38,%esp
        printFilesystemError(path, getLastVFSErr());
    }

    return res;
}

40000c8b:	8d 7d d0             	lea    -0x30(%ebp),%edi

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
    }

    return res;
40000c8e:	8b 45 0c             	mov    0xc(%ebp),%eax

void printFilesystemError(char* path, uint32_t code) {
    switch(code) {
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
        break;
40000c91:	8b 75 08             	mov    0x8(%ebp),%esi

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
    }

    return res;
40000c94:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000c97:	8b 45 10             	mov    0x10(%ebp),%eax
40000c9a:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000ca1:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000ca4:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000ca7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000cae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000cb5:	eb 2c                	jmp    40000ce3 <fread+0x61>
        printf("%s: Unknown error", path);
        break;
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
        break;
    case PE_CORRUPT_FILE:
40000cb7:	e8 12 f8 ff ff       	call   400004ce <yield>

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
    }

    return res;
40000cbc:	8b 45 0c             	mov    0xc(%ebp),%eax
40000cbf:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000cc2:	8b 45 10             	mov    0x10(%ebp),%eax
40000cc5:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000ccc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000ccf:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000cd2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000cd9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
}

40000ce0:	83 ec 0c             	sub    $0xc,%esp
40000ce3:	57                   	push   %edi
40000ce4:	e8 f3 06 00 00       	call   400013dc <syscall>
void printFilesystemError(char* path, uint32_t code) {
    switch(code) {
40000ce9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000cec:	83 c4 10             	add    $0x10,%esp
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
        break;
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
        break;
40000cef:	83 fb 01             	cmp    $0x1,%ebx
40000cf2:	74 c3                	je     40000cb7 <fread+0x35>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
        break;
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
40000cf4:	89 f0                	mov    %esi,%eax
40000cf6:	89 da                	mov    %ebx,%edx
40000cf8:	e8 3b ff ff ff       	call   40000c38 <printrwerror>
        break;
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
40000cfd:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000d00:	89 d8                	mov    %ebx,%eax
40000d02:	5b                   	pop    %ebx
40000d03:	5e                   	pop    %esi
40000d04:	5f                   	pop    %edi
40000d05:	5d                   	pop    %ebp
40000d06:	c3                   	ret    

40000d07 <fgetc>:
40000d07:	55                   	push   %ebp
40000d08:	89 e5                	mov    %esp,%ebp
40000d0a:	83 ec 18             	sub    $0x18,%esp
40000d0d:	8b 45 08             	mov    0x8(%ebp),%eax
40000d10:	e8 73 fa ff ff       	call   40000788 <resolveHandle>
40000d15:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000d19:	85 c0                	test   %eax,%eax
40000d1b:	74 10                	je     40000d2d <fgetc+0x26>
40000d1d:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000d20:	51                   	push   %ecx
40000d21:	6a 01                	push   $0x1
40000d23:	52                   	push   %edx
40000d24:	50                   	push   %eax
40000d25:	e8 58 ff ff ff       	call   40000c82 <fread>
40000d2a:	83 c4 10             	add    $0x10,%esp
40000d2d:	8a 45 f7             	mov    -0x9(%ebp),%al
40000d30:	c9                   	leave  
40000d31:	c3                   	ret    

40000d32 <getchar>:
40000d32:	55                   	push   %ebp
40000d33:	89 e5                	mov    %esp,%ebp
40000d35:	83 ec 14             	sub    $0x14,%esp
40000d38:	6a 02                	push   $0x2
40000d3a:	e8 c8 ff ff ff       	call   40000d07 <fgetc>
40000d3f:	c9                   	leave  
40000d40:	c3                   	ret    

40000d41 <getc>:
40000d41:	55                   	push   %ebp
40000d42:	89 e5                	mov    %esp,%ebp
40000d44:	83 ec 08             	sub    $0x8,%esp
40000d47:	c9                   	leave  
40000d48:	e9 ba ff ff ff       	jmp    40000d07 <fgetc>

40000d4d <fgets>:
40000d4d:	55                   	push   %ebp
40000d4e:	89 e5                	mov    %esp,%ebp
40000d50:	57                   	push   %edi
40000d51:	56                   	push   %esi
40000d52:	53                   	push   %ebx
40000d53:	83 ec 1c             	sub    $0x1c,%esp
40000d56:	31 db                	xor    %ebx,%ebx
40000d58:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000d5b:	8b 75 08             	mov    0x8(%ebp),%esi
40000d5e:	8d 47 ff             	lea    -0x1(%edi),%eax
40000d61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000d64:	eb 16                	jmp    40000d7c <fgets+0x2f>
40000d66:	83 ec 0c             	sub    $0xc,%esp
40000d69:	ff 75 10             	pushl  0x10(%ebp)
40000d6c:	e8 96 ff ff ff       	call   40000d07 <fgetc>
40000d71:	83 c4 10             	add    $0x10,%esp
40000d74:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000d77:	84 c0                	test   %al,%al
40000d79:	74 0a                	je     40000d85 <fgets+0x38>
40000d7b:	43                   	inc    %ebx
40000d7c:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000d7f:	7c e5                	jl     40000d66 <fgets+0x19>
40000d81:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000d85:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000d88:	89 f0                	mov    %esi,%eax
40000d8a:	5b                   	pop    %ebx
40000d8b:	5e                   	pop    %esi
40000d8c:	5f                   	pop    %edi
40000d8d:	5d                   	pop    %ebp
40000d8e:	c3                   	ret    

40000d8f <getln>:
40000d8f:	55                   	push   %ebp
40000d90:	89 e5                	mov    %esp,%ebp
40000d92:	56                   	push   %esi
40000d93:	53                   	push   %ebx
40000d94:	31 db                	xor    %ebx,%ebx
40000d96:	8b 75 08             	mov    0x8(%ebp),%esi
40000d99:	eb 42                	jmp    40000ddd <getln+0x4e>
40000d9b:	3c 0a                	cmp    $0xa,%al
40000d9d:	75 0f                	jne    40000dae <getln+0x1f>
40000d9f:	83 ec 0c             	sub    $0xc,%esp
40000da2:	6a 0a                	push   $0xa
40000da4:	e8 93 fd ff ff       	call   40000b3c <putchar>
40000da9:	83 c4 10             	add    $0x10,%esp
40000dac:	eb 40                	jmp    40000dee <getln+0x5f>
40000dae:	3c 08                	cmp    $0x8,%al
40000db0:	75 18                	jne    40000dca <getln+0x3b>
40000db2:	85 db                	test   %ebx,%ebx
40000db4:	74 0e                	je     40000dc4 <getln+0x35>
40000db6:	83 ec 0c             	sub    $0xc,%esp
40000db9:	4b                   	dec    %ebx
40000dba:	6a 08                	push   $0x8
40000dbc:	e8 7b fd ff ff       	call   40000b3c <putchar>
40000dc1:	83 c4 10             	add    $0x10,%esp
40000dc4:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000dc8:	eb 13                	jmp    40000ddd <getln+0x4e>
40000dca:	83 ec 0c             	sub    $0xc,%esp
40000dcd:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000dd0:	0f be c0             	movsbl %al,%eax
40000dd3:	50                   	push   %eax
40000dd4:	43                   	inc    %ebx
40000dd5:	e8 62 fd ff ff       	call   40000b3c <putchar>
40000dda:	83 c4 10             	add    $0x10,%esp
40000ddd:	83 ec 0c             	sub    $0xc,%esp
40000de0:	6a 02                	push   $0x2
40000de2:	e8 20 ff ff ff       	call   40000d07 <fgetc>
40000de7:	83 c4 10             	add    $0x10,%esp
40000dea:	84 c0                	test   %al,%al
40000dec:	75 ad                	jne    40000d9b <getln+0xc>
40000dee:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000df2:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000df5:	89 f0                	mov    %esi,%eax
40000df7:	5b                   	pop    %ebx
40000df8:	5e                   	pop    %esi
40000df9:	5d                   	pop    %ebp
40000dfa:	c3                   	ret    
	...

40000dfc <memset>:
#include "process.h"
#include "stdio.h"
#include "process_rpc.c"

40000dfc:	55                   	push   %ebp
40000dfd:	89 e5                	mov    %esp,%ebp
40000dff:	53                   	push   %ebx
40000e00:	8b 45 08             	mov    0x8(%ebp),%eax
40000e03:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e06:	8b 4d 10             	mov    0x10(%ebp),%ecx
extern int main(int argc, char* args[]);
40000e09:	89 c2                	mov    %eax,%edx

static uint32_t getargs() {
40000e0b:	eb 04                	jmp    40000e11 <memset+0x15>
    struct regstate state = {
40000e0d:	88 1a                	mov    %bl,(%edx)
40000e0f:	49                   	dec    %ecx
40000e10:	42                   	inc    %edx
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
40000e11:	85 c9                	test   %ecx,%ecx
40000e13:	75 f8                	jne    40000e0d <memset+0x11>
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
40000e15:	5b                   	pop    %ebx
40000e16:	5d                   	pop    %ebp
40000e17:	c3                   	ret    

40000e18 <memcpy>:
      .esi = 0,
      .edi = 0
40000e18:	55                   	push   %ebp
    };

    syscall(&state);

40000e19:	31 c9                	xor    %ecx,%ecx
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40000e1b:	89 e5                	mov    %esp,%ebp
40000e1d:	56                   	push   %esi
40000e1e:	53                   	push   %ebx
40000e1f:	8b 75 10             	mov    0x10(%ebp),%esi
40000e22:	8b 45 08             	mov    0x8(%ebp),%eax
40000e25:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    };

    syscall(&state);

40000e28:	85 f6                	test   %esi,%esi
40000e2a:	75 04                	jne    40000e30 <memcpy+0x18>
40000e2c:	31 c0                	xor    %eax,%eax
40000e2e:	eb 0a                	jmp    40000e3a <memcpy+0x22>
    return state.eax;
}

40000e30:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000e33:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000e36:	41                   	inc    %ecx
    };

    syscall(&state);

    return state.eax;
}
40000e37:	4e                   	dec    %esi
40000e38:	75 f6                	jne    40000e30 <memcpy+0x18>

uint32_t pexists(int pid) {
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
40000e3a:	5b                   	pop    %ebx
40000e3b:	5e                   	pop    %esi
40000e3c:	5d                   	pop    %ebp
40000e3d:	c3                   	ret    

40000e3e <memcmp>:
      .ecx = 0,
      .edx = 0,
40000e3e:	55                   	push   %ebp
      .esi = 0,
40000e3f:	83 c8 ff             	or     $0xffffffff,%eax
uint32_t pexists(int pid) {
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
40000e42:	89 e5                	mov    %esp,%ebp
40000e44:	57                   	push   %edi
40000e45:	56                   	push   %esi
40000e46:	53                   	push   %ebx
40000e47:	8b 75 08             	mov    0x8(%ebp),%esi
40000e4a:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000e4d:	8b 5d 10             	mov    0x10(%ebp),%ebx
      .esi = 0,
40000e50:	85 f6                	test   %esi,%esi
40000e52:	74 2c                	je     40000e80 <memcmp+0x42>
      .edi = 0
    };
40000e54:	b8 01 00 00 00       	mov    $0x1,%eax
40000e59:	85 ff                	test   %edi,%edi
40000e5b:	74 23                	je     40000e80 <memcmp+0x42>

    syscall(&state);
40000e5d:	31 d2                	xor    %edx,%edx
40000e5f:	85 db                	test   %ebx,%ebx
40000e61:	75 17                	jne    40000e7a <memcmp+0x3c>
40000e63:	eb 19                	jmp    40000e7e <memcmp+0x40>
    return state.eax;
}

void _start() {
  char** args = (char**) getargs();

40000e65:	8a 04 16             	mov    (%esi,%edx,1),%al
40000e68:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000e6b:	38 c8                	cmp    %cl,%al
40000e6d:	74 0a                	je     40000e79 <memcmp+0x3b>
  int argc = 0;
40000e6f:	0f b6 c0             	movzbl %al,%eax
40000e72:	0f b6 c9             	movzbl %cl,%ecx
40000e75:	29 c8                	sub    %ecx,%eax
40000e77:	eb 07                	jmp    40000e80 <memcmp+0x42>

    return state.eax;
}

void _start() {
  char** args = (char**) getargs();
40000e79:	42                   	inc    %edx
40000e7a:	39 da                	cmp    %ebx,%edx
40000e7c:	72 e7                	jb     40000e65 <memcmp+0x27>
40000e7e:	31 c0                	xor    %eax,%eax

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
          argc++;
40000e80:	5b                   	pop    %ebx
40000e81:	5e                   	pop    %esi
40000e82:	5f                   	pop    %edi
40000e83:	5d                   	pop    %ebp
40000e84:	c3                   	ret    

40000e85 <strcmp>:
      }
  }
40000e85:	55                   	push   %ebp
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000e86:	31 c0                	xor    %eax,%eax

  if(args != 0) {
      while(args[argc] != 0) {
          argc++;
      }
  }
40000e88:	89 e5                	mov    %esp,%ebp
40000e8a:	56                   	push   %esi
40000e8b:	53                   	push   %ebx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000e8c:	31 db                	xor    %ebx,%ebx

  if(args != 0) {
      while(args[argc] != 0) {
          argc++;
      }
  }
40000e8e:	8b 55 08             	mov    0x8(%ebp),%edx
40000e91:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000e94:	85 d2                	test   %edx,%edx
40000e96:	75 03                	jne    40000e9b <strcmp+0x16>
40000e98:	eb 09                	jmp    40000ea3 <strcmp+0x1e>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000e9a:	40                   	inc    %eax
40000e9b:	89 c3                	mov    %eax,%ebx
40000e9d:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000ea1:	75 f7                	jne    40000e9a <strcmp+0x15>
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000ea3:	31 c0                	xor    %eax,%eax
40000ea5:	31 f6                	xor    %esi,%esi
40000ea7:	85 c9                	test   %ecx,%ecx
40000ea9:	75 03                	jne    40000eae <strcmp+0x29>
40000eab:	eb 09                	jmp    40000eb6 <strcmp+0x31>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000ead:	40                   	inc    %eax
40000eae:	89 c6                	mov    %eax,%esi
40000eb0:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000eb4:	75 f7                	jne    40000ead <strcmp+0x28>
  }

  set_rpc_handler();

  int result = main(argc, args);

40000eb6:	89 f0                	mov    %esi,%eax
40000eb8:	39 de                	cmp    %ebx,%esi
40000eba:	7e 02                	jle    40000ebe <strcmp+0x39>
40000ebc:	89 d8                	mov    %ebx,%eax
40000ebe:	40                   	inc    %eax
40000ebf:	50                   	push   %eax
40000ec0:	51                   	push   %ecx
40000ec1:	52                   	push   %edx
40000ec2:	e8 77 ff ff ff       	call   40000e3e <memcmp>
  exit(result);
40000ec7:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000eca:	5b                   	pop    %ebx
40000ecb:	5e                   	pop    %esi
40000ecc:	5d                   	pop    %ebp
40000ecd:	c3                   	ret    

40000ece <strlen>:
}

40000ece:	55                   	push   %ebp
void yield() {
40000ecf:	31 d2                	xor    %edx,%edx

  int result = main(argc, args);

  exit(result);
}

40000ed1:	89 e5                	mov    %esp,%ebp
void yield() {
40000ed3:	31 c0                	xor    %eax,%eax

  int result = main(argc, args);

  exit(result);
}

40000ed5:	8b 4d 08             	mov    0x8(%ebp),%ecx
void yield() {
40000ed8:	85 c9                	test   %ecx,%ecx
40000eda:	75 03                	jne    40000edf <strlen+0x11>
40000edc:	eb 09                	jmp    40000ee7 <strlen+0x19>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000ede:	42                   	inc    %edx
40000edf:	89 d0                	mov    %edx,%eax
40000ee1:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000ee5:	75 f7                	jne    40000ede <strlen+0x10>
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40000ee7:	5d                   	pop    %ebp
40000ee8:	c3                   	ret    

40000ee9 <strcpy>:
      .edi = 0
    };
40000ee9:	55                   	push   %ebp
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000eea:	31 d2                	xor    %edx,%edx
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000eec:	89 e5                	mov    %esp,%ebp
40000eee:	56                   	push   %esi
40000eef:	53                   	push   %ebx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000ef0:	31 c9                	xor    %ecx,%ecx
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40000ef2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ef5:	8b 45 08             	mov    0x8(%ebp),%eax
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000ef8:	85 db                	test   %ebx,%ebx
40000efa:	75 03                	jne    40000eff <strcpy+0x16>
40000efc:	eb 09                	jmp    40000f07 <strcpy+0x1e>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000efe:	42                   	inc    %edx
40000eff:	89 d1                	mov    %edx,%ecx
40000f01:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000f05:	75 f7                	jne    40000efe <strcpy+0x15>
      .esi = 0,
      .edi = 0
    };

    syscall(&state);

40000f07:	89 ce                	mov    %ecx,%esi
40000f09:	46                   	inc    %esi
40000f0a:	74 0c                	je     40000f18 <strcpy+0x2f>
40000f0c:	31 d2                	xor    %edx,%edx
    return state.eax;
}

40000f0e:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000f11:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000f14:	42                   	inc    %edx
    };

    syscall(&state);

    return state.eax;
}
40000f15:	4e                   	dec    %esi
40000f16:	75 f6                	jne    40000f0e <strcpy+0x25>
      .esi = 0,
      .edi = 0
    };

    syscall(&state);

40000f18:	5b                   	pop    %ebx
40000f19:	5e                   	pop    %esi
40000f1a:	5d                   	pop    %ebp
40000f1b:	c3                   	ret    

40000f1c <strtoknc>:
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
        .eax = 6,
40000f1c:	55                   	push   %ebp
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000f1d:	31 c0                	xor    %eax,%eax
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
        .eax = 6,
40000f1f:	89 e5                	mov    %esp,%ebp
40000f21:	57                   	push   %edi
40000f22:	56                   	push   %esi
40000f23:	53                   	push   %ebx
40000f24:	83 ec 04             	sub    $0x4,%esp
40000f27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000f2a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000f2d:	85 db                	test   %ebx,%ebx
40000f2f:	75 06                	jne    40000f37 <strtoknc+0x1b>
40000f31:	e9 83 00 00 00       	jmp    40000fb9 <strtoknc+0x9d>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000f36:	40                   	inc    %eax
40000f37:	89 c7                	mov    %eax,%edi
40000f39:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000f3d:	75 f7                	jne    40000f36 <strtoknc+0x1a>
        .eax = 6,
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
40000f3f:	85 c0                	test   %eax,%eax
40000f41:	74 76                	je     40000fb9 <strtoknc+0x9d>
    };

    syscall(&state);
}
40000f43:	85 c9                	test   %ecx,%ecx
40000f45:	75 0b                	jne    40000f52 <strtoknc+0x36>
40000f47:	83 3d 10 42 00 40 00 	cmpl   $0x0,0x40004210
40000f4e:	75 08                	jne    40000f58 <strtoknc+0x3c>
40000f50:	eb 67                	jmp    40000fb9 <strtoknc+0x9d>

int changeExecPath(char* path) {
    struct regstate state = {
        .eax = 7,
        .ebx = (uint32_t)path,
40000f52:	89 0d 10 42 00 40    	mov    %ecx,0x40004210
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
40000f58:	a1 10 42 00 40       	mov    0x40004210,%eax
40000f5d:	31 c9                	xor    %ecx,%ecx
    };

40000f5f:	eb 0b                	jmp    40000f6c <strtoknc+0x50>
    syscall(&state);
40000f61:	8a 10                	mov    (%eax),%dl
40000f63:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f66:	75 03                	jne    40000f6b <strtoknc+0x4f>

40000f68:	40                   	inc    %eax
    return state.eax;
40000f69:	eb 05                	jmp    40000f70 <strtoknc+0x54>
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

40000f6b:	41                   	inc    %ecx
40000f6c:	39 f9                	cmp    %edi,%ecx
40000f6e:	7c f1                	jl     40000f61 <strtoknc+0x45>

    return state.eax;
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
    struct regstate state = {
40000f70:	39 f9                	cmp    %edi,%ecx
40000f72:	75 e9                	jne    40000f5d <strtoknc+0x41>
        .eax = 17,
40000f74:	a3 10 42 00 40       	mov    %eax,0x40004210
        .ebx = index,
        .ecx = (uint32_t)strbuf,
        .edx = (uint32_t)path,
        .esi = 0,
        .edi = 0
    };
40000f79:	80 38 00             	cmpb   $0x0,(%eax)
40000f7c:	75 28                	jne    40000fa6 <strtoknc+0x8a>

40000f7e:	c7 05 10 42 00 40 00 	movl   $0x0,0x40004210
40000f85:	00 00 00 
40000f88:	eb 2f                	jmp    40000fb9 <strtoknc+0x9d>

    return (char*)state.eax;
}

void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
40000f8a:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000f8d:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000f90:	75 05                	jne    40000f97 <strtoknc+0x7b>
}
40000f92:	c6 06 00             	movb   $0x0,(%esi)

40000f95:	eb 05                	jmp    40000f9c <strtoknc+0x80>
    syscall(&state);

    return (char*)state.eax;
}

void cd(char* path) {
40000f97:	41                   	inc    %ecx
40000f98:	39 f9                	cmp    %edi,%ecx
40000f9a:	7c ee                	jl     40000f8a <strtoknc+0x6e>
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
        .ebx = (uint32_t) path,
40000f9c:	ff 05 10 42 00 40    	incl   0x40004210
        .ecx = (uint32_t) args,
40000fa2:	39 f9                	cmp    %edi,%ecx
40000fa4:	7c 15                	jl     40000fbb <strtoknc+0x9f>

    syscall(&state);

    return (char*)state.eax;
}

40000fa6:	8b 35 10 42 00 40    	mov    0x40004210,%esi
40000fac:	8a 16                	mov    (%esi),%dl
40000fae:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000fb1:	84 d2                	test   %dl,%dl
40000fb3:	74 06                	je     40000fbb <strtoknc+0x9f>
40000fb5:	31 c9                	xor    %ecx,%ecx
40000fb7:	eb df                	jmp    40000f98 <strtoknc+0x7c>
40000fb9:	31 c0                	xor    %eax,%eax
        .ecx = (uint32_t) args,
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };

40000fbb:	5a                   	pop    %edx
40000fbc:	5b                   	pop    %ebx
40000fbd:	5e                   	pop    %esi
40000fbe:	5f                   	pop    %edi
40000fbf:	5d                   	pop    %ebp
40000fc0:	c3                   	ret    

40000fc1 <strclone>:
    };

    syscall(&state);

    return;
}
40000fc1:	55                   	push   %ebp
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000fc2:	31 c0                	xor    %eax,%eax
    };

    syscall(&state);

    return;
}
40000fc4:	89 e5                	mov    %esp,%ebp
40000fc6:	56                   	push   %esi
40000fc7:	53                   	push   %ebx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000fc8:	31 d2                	xor    %edx,%edx
    };

    syscall(&state);

    return;
}
40000fca:	8b 5d 08             	mov    0x8(%ebp),%ebx
  int result = main(argc, args);

  exit(result);
}

void yield() {
40000fcd:	85 db                	test   %ebx,%ebx
40000fcf:	75 03                	jne    40000fd4 <strclone+0x13>
40000fd1:	eb 09                	jmp    40000fdc <strclone+0x1b>
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
40000fd3:	40                   	inc    %eax
40000fd4:	89 c2                	mov    %eax,%edx
40000fd6:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000fda:	75 f7                	jne    40000fd3 <strclone+0x12>

    syscall(&state);

    return;
}

40000fdc:	83 ec 0c             	sub    $0xc,%esp
40000fdf:	42                   	inc    %edx
40000fe0:	52                   	push   %edx
40000fe1:	e8 af 01 00 00       	call   40001195 <malloc>
void exit(int returncode) {
40000fe6:	59                   	pop    %ecx

    syscall(&state);

    return;
}

40000fe7:	89 c6                	mov    %eax,%esi
void exit(int returncode) {
40000fe9:	58                   	pop    %eax
40000fea:	53                   	push   %ebx
40000feb:	56                   	push   %esi
40000fec:	e8 f8 fe ff ff       	call   40000ee9 <strcpy>
    struct regstate state = {
        .eax = 1,
        .ebx = returncode,
40000ff1:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ff4:	89 f0                	mov    %esi,%eax
40000ff6:	5b                   	pop    %ebx
40000ff7:	5e                   	pop    %esi
40000ff8:	5d                   	pop    %ebp
40000ff9:	c3                   	ret    

40000ffa <strtok>:
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
    };
40000ffa:	55                   	push   %ebp
40000ffb:	89 e5                	mov    %esp,%ebp
40000ffd:	56                   	push   %esi
40000ffe:	53                   	push   %ebx
40000fff:	8b 75 08             	mov    0x8(%ebp),%esi
40001002:	8b 5d 0c             	mov    0xc(%ebp),%ebx

40001005:	85 f6                	test   %esi,%esi
40001007:	74 2e                	je     40001037 <strtok+0x3d>
    syscall(&state);
40001009:	a1 14 42 00 40       	mov    0x40004214,%eax
4000100e:	85 c0                	test   %eax,%eax
40001010:	74 0c                	je     4000101e <strtok+0x24>

40001012:	83 ec 0c             	sub    $0xc,%esp
40001015:	50                   	push   %eax
40001016:	e8 31 00 00 00       	call   4000104c <free>
4000101b:	83 c4 10             	add    $0x10,%esp
    while(1) {
      printf("error\n");
4000101e:	83 ec 0c             	sub    $0xc,%esp
40001021:	56                   	push   %esi
40001022:	e8 9a ff ff ff       	call   40000fc1 <strclone>
    }
40001027:	83 c4 10             	add    $0x10,%esp
    };

    syscall(&state);

    while(1) {
      printf("error\n");
4000102a:	a3 14 42 00 40       	mov    %eax,0x40004214
    }
4000102f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40001032:	89 45 08             	mov    %eax,0x8(%ebp)
40001035:	eb 0a                	jmp    40001041 <strtok+0x47>
}

40001037:	89 5d 0c             	mov    %ebx,0xc(%ebp)
4000103a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
void getExecPath(char* dest) {
40001041:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001044:	5b                   	pop    %ebx
40001045:	5e                   	pop    %esi
40001046:	5d                   	pop    %ebp

    while(1) {
      printf("error\n");
    }
}

40001047:	e9 d0 fe ff ff       	jmp    40000f1c <strtoknc>

4000104c <free>:
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
        break;
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
        break;
4000104c:	55                   	push   %ebp
4000104d:	89 e5                	mov    %esp,%ebp
4000104f:	57                   	push   %edi
40001050:	56                   	push   %esi
40001051:	53                   	push   %ebx
40001052:	83 ec 08             	sub    $0x8,%esp
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
40001055:	8b 15 1c 42 00 40    	mov    0x4000421c,%edx
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
        break;
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
        break;
4000105b:	8b 4d 08             	mov    0x8(%ebp),%ecx
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
4000105e:	89 d0                	mov    %edx,%eax
        break;
    case PE_FILE_NOT_FOUND:
40001060:	e9 b8 00 00 00       	jmp    4000111d <free+0xd1>
        printf("%s: File not found", path);
40001065:	3b 48 04             	cmp    0x4(%eax),%ecx
40001068:	0f 85 ac 00 00 00    	jne    4000111a <free+0xce>
4000106e:	31 c9                	xor    %ecx,%ecx
40001070:	eb 23                	jmp    40001095 <free+0x49>
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
40001072:	39 c2                	cmp    %eax,%edx
40001074:	75 1a                	jne    40001090 <free+0x44>
      .edi = 0
40001076:	85 c9                	test   %ecx,%ecx
40001078:	8b 50 08             	mov    0x8(%eax),%edx
4000107b:	75 0e                	jne    4000108b <free+0x3f>
    };
4000107d:	89 15 1c 42 00 40    	mov    %edx,0x4000421c
40001083:	8b 0d 20 42 00 40    	mov    0x40004220,%ecx
40001089:	eb 10                	jmp    4000109b <free+0x4f>

    syscall(&state);

4000108b:	89 51 08             	mov    %edx,0x8(%ecx)
4000108e:	eb f3                	jmp    40001083 <free+0x37>
    return state.eax;
}

uint32_t pexists(int pid) {
    struct regstate state = {
40001090:	89 d1                	mov    %edx,%ecx
40001092:	8b 52 08             	mov    0x8(%edx),%edx
static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
40001095:	85 d2                	test   %edx,%edx
40001097:	75 d9                	jne    40001072 <free+0x26>
40001099:	eb e8                	jmp    40001083 <free+0x37>
4000109b:	89 ca                	mov    %ecx,%edx
4000109d:	eb 6d                	jmp    4000110c <free+0xc0>

    return;
}

void exit(int returncode) {
    struct regstate state = {
4000109f:	8b 5a 04             	mov    0x4(%edx),%ebx
400010a2:	8b 32                	mov    (%edx),%esi
400010a4:	8b 78 04             	mov    0x4(%eax),%edi
400010a7:	89 7d ec             	mov    %edi,-0x14(%ebp)
400010aa:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
400010ad:	89 7d f0             	mov    %edi,-0x10(%ebp)
400010b0:	8b 7d ec             	mov    -0x14(%ebp),%edi
400010b3:	39 7d f0             	cmp    %edi,-0x10(%ebp)
400010b6:	75 18                	jne    400010d0 <free+0x84>
        .eax = 1,
400010b8:	89 58 04             	mov    %ebx,0x4(%eax)
400010bb:	31 f6                	xor    %esi,%esi
400010bd:	89 cb                	mov    %ecx,%ebx
400010bf:	eb 09                	jmp    400010ca <free+0x7e>
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
400010c1:	39 d3                	cmp    %edx,%ebx
400010c3:	74 29                	je     400010ee <free+0xa2>

    return state.eax;
}

uint32_t pexists(int pid) {
    struct regstate state = {
400010c5:	89 de                	mov    %ebx,%esi
400010c7:	8b 5b 08             	mov    0x8(%ebx),%ebx
static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
400010ca:	85 db                	test   %ebx,%ebx
400010cc:	75 f3                	jne    400010c1 <free+0x75>
400010ce:	eb cb                	jmp    4000109b <free+0x4f>
        .eax = 1,
        .ebx = returncode,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
400010d0:	8b 38                	mov    (%eax),%edi
400010d2:	89 7d f0             	mov    %edi,-0x10(%ebp)
400010d5:	8b 7d ec             	mov    -0x14(%ebp),%edi
400010d8:	03 7d f0             	add    -0x10(%ebp),%edi
400010db:	39 fb                	cmp    %edi,%ebx
400010dd:	75 2a                	jne    40001109 <free+0xbd>
    };
400010df:	03 75 f0             	add    -0x10(%ebp),%esi
400010e2:	89 cb                	mov    %ecx,%ebx
400010e4:	89 30                	mov    %esi,(%eax)
400010e6:	31 f6                	xor    %esi,%esi
400010e8:	eb 19                	jmp    40001103 <free+0xb7>
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
400010ea:	39 d3                	cmp    %edx,%ebx
400010ec:	75 10                	jne    400010fe <free+0xb2>
      .edi = 0
400010ee:	85 f6                	test   %esi,%esi
400010f0:	8b 53 08             	mov    0x8(%ebx),%edx
400010f3:	75 04                	jne    400010f9 <free+0xad>
    };
400010f5:	89 d1                	mov    %edx,%ecx
400010f7:	eb a2                	jmp    4000109b <free+0x4f>

    syscall(&state);

400010f9:	89 56 08             	mov    %edx,0x8(%esi)
400010fc:	eb 9d                	jmp    4000109b <free+0x4f>
    return state.eax;
}

uint32_t pexists(int pid) {
    struct regstate state = {
400010fe:	89 de                	mov    %ebx,%esi
40001100:	8b 5b 08             	mov    0x8(%ebx),%ebx
static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
40001103:	85 db                	test   %ebx,%ebx
40001105:	75 e3                	jne    400010ea <free+0x9e>
40001107:	eb 92                	jmp    4000109b <free+0x4f>

    syscall(&state);

    while(1) {
      printf("error\n");
    }
40001109:	8b 52 08             	mov    0x8(%edx),%edx
    syscall(&state);

    return;
}

void exit(int returncode) {
4000110c:	85 d2                	test   %edx,%edx
4000110e:	75 8f                	jne    4000109f <free+0x53>
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40001110:	89 48 08             	mov    %ecx,0x8(%eax)
    };
40001113:	a3 20 42 00 40       	mov    %eax,0x40004220
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
        break;
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
        break;
    default:
40001118:	eb 0b                	jmp    40001125 <free+0xd9>
        printf("%s: WTF", path);
        break;

4000111a:	8b 40 08             	mov    0x8(%eax),%eax
        printf("%s: Filesystem error", path);
        break;
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
        break;
    case PE_FILE_NOT_FOUND:
4000111d:	85 c0                	test   %eax,%eax
4000111f:	0f 85 40 ff ff ff    	jne    40001065 <free+0x19>
    default:
        printf("%s: WTF", path);
        break;

    }
    printf("\n");
40001125:	58                   	pop    %eax
40001126:	5a                   	pop    %edx
40001127:	5b                   	pop    %ebx
40001128:	5e                   	pop    %esi
40001129:	5f                   	pop    %edi
4000112a:	5d                   	pop    %ebp
4000112b:	c3                   	ret    

4000112c <pop_unused_node>:
      }
  }

  set_rpc_handler();

  int result = main(argc, args);
4000112c:	55                   	push   %ebp
4000112d:	89 e5                	mov    %esp,%ebp
4000112f:	53                   	push   %ebx
40001130:	83 ec 04             	sub    $0x4,%esp
      .edi = 0
    };

    syscall(&state);

    return state.eax;
40001133:	a1 18 42 00 40       	mov    0x40004218,%eax
40001138:	eb 45                	jmp    4000117f <pop_unused_node+0x53>
void _start() {
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
4000113a:	83 ec 0c             	sub    $0xc,%esp
4000113d:	6a 01                	push   $0x1
4000113f:	e8 5b 02 00 00       	call   4000139f <vmm_alloc_cont>
      while(args[argc] != 0) {
40001144:	83 c4 0c             	add    $0xc,%esp
void _start() {
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
40001147:	89 c3                	mov    %eax,%ebx
      while(args[argc] != 0) {
40001149:	68 00 10 00 00       	push   $0x1000
4000114e:	6a 00                	push   $0x0
40001150:	50                   	push   %eax
40001151:	e8 a6 fc ff ff       	call   40000dfc <memset>
40001156:	8b 15 18 42 00 40    	mov    0x40004218,%edx
4000115c:	8d 43 0c             	lea    0xc(%ebx),%eax
      }
  }

  set_rpc_handler();

  int result = main(argc, args);
4000115f:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40001165:	83 c4 10             	add    $0x10,%esp
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40001168:	89 50 08             	mov    %edx,0x8(%eax)
4000116b:	89 c2                	mov    %eax,%edx
4000116d:	83 c0 0c             	add    $0xc,%eax
  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
          argc++;
      }
40001170:	39 c8                	cmp    %ecx,%eax
40001172:	75 f4                	jne    40001168 <pop_unused_node+0x3c>
40001174:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
4000117a:	a3 18 42 00 40       	mov    %eax,0x40004218
      .edi = 0
    };

    syscall(&state);

    return state.eax;
4000117f:	85 c0                	test   %eax,%eax
40001181:	74 b7                	je     4000113a <pop_unused_node+0xe>
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40001183:	8b 50 08             	mov    0x8(%eax),%edx
  set_rpc_handler();

  int result = main(argc, args);

  exit(result);
}
40001186:	85 c0                	test   %eax,%eax
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
40001188:	89 15 18 42 00 40    	mov    %edx,0x40004218
  set_rpc_handler();

  int result = main(argc, args);

  exit(result);
}
4000118e:	74 aa                	je     4000113a <pop_unused_node+0xe>

void yield() {
    struct regstate state = {
      .eax = 5,
      .ebx = 0,
      .ecx = 0,
40001190:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40001193:	c9                   	leave  
40001194:	c3                   	ret    

40001195 <malloc>:
}

void getExecPath(char* dest) {
    struct regstate state = {
        .eax = 6,
        .ebx = (uint32_t)dest,
40001195:	55                   	push   %ebp
40001196:	89 e5                	mov    %esp,%ebp
40001198:	57                   	push   %edi
40001199:	56                   	push   %esi
4000119a:	53                   	push   %ebx
4000119b:	83 ec 1c             	sub    $0x1c,%esp
        .ecx = 0,
        .edx = 0,
4000119e:	a1 20 42 00 40       	mov    0x40004220,%eax
}

void getExecPath(char* dest) {
    struct regstate state = {
        .eax = 6,
        .ebx = (uint32_t)dest,
400011a3:	8b 75 08             	mov    0x8(%ebp),%esi
        .ecx = 0,
        .edx = 0,
400011a6:	89 c3                	mov    %eax,%ebx
        .esi = 0,
        .edi = 0
400011a8:	eb 07                	jmp    400011b1 <malloc+0x1c>
    };
400011aa:	39 33                	cmp    %esi,(%ebx)
400011ac:	73 0c                	jae    400011ba <malloc+0x25>

    syscall(&state);
}

400011ae:	8b 5b 08             	mov    0x8(%ebx),%ebx
        .eax = 6,
        .ebx = (uint32_t)dest,
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0
400011b1:	85 db                	test   %ebx,%ebx
400011b3:	75 f5                	jne    400011aa <malloc+0x15>
400011b5:	e9 93 00 00 00       	jmp    4000124d <malloc+0xb8>
    };

    syscall(&state);

    return (char*)state.eax;
}
400011ba:	8b 3b                	mov    (%ebx),%edi

void cd(char* path) {
400011bc:	31 d2                	xor    %edx,%edx
    };

    syscall(&state);

    return (char*)state.eax;
}
400011be:	29 f7                	sub    %esi,%edi

void cd(char* path) {
400011c0:	89 33                	mov    %esi,(%ebx)
400011c2:	eb 4b                	jmp    4000120f <malloc+0x7a>

    return state.eax;
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
    struct regstate state = {
400011c4:	e8 63 ff ff ff       	call   4000112c <pop_unused_node>
        .eax = 17,
        .ebx = index,
400011c9:	8b 13                	mov    (%ebx),%edx
400011cb:	03 53 04             	add    0x4(%ebx),%edx
        .ecx = (uint32_t)strbuf,
400011ce:	29 f7                	sub    %esi,%edi
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
    struct regstate state = {
        .eax = 17,
        .ebx = index,
400011d0:	89 50 04             	mov    %edx,0x4(%eax)
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
400011d3:	8b 15 20 42 00 40    	mov    0x40004220,%edx
400011d9:	89 50 08             	mov    %edx,0x8(%eax)

char* getPathChild(uint32_t index, char* strbuf, char* path) {
    struct regstate state = {
        .eax = 17,
        .ebx = index,
        .ecx = (uint32_t)strbuf,
400011dc:	89 38                	mov    %edi,(%eax)
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
400011de:	a3 20 42 00 40       	mov    %eax,0x40004220
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
400011e3:	a1 1c 42 00 40       	mov    0x4000421c,%eax
400011e8:	89 43 08             	mov    %eax,0x8(%ebx)
    };
400011eb:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
400011f1:	eb 4f                	jmp    40001242 <malloc+0xad>
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
400011f3:	39 d8                	cmp    %ebx,%eax
400011f5:	75 13                	jne    4000120a <malloc+0x75>
      .edi = 0
400011f7:	85 d2                	test   %edx,%edx
400011f9:	8b 43 08             	mov    0x8(%ebx),%eax
400011fc:	75 07                	jne    40001205 <malloc+0x70>
    };
400011fe:	a3 20 42 00 40       	mov    %eax,0x40004220
40001203:	eb 0e                	jmp    40001213 <malloc+0x7e>

    syscall(&state);

40001205:	89 42 08             	mov    %eax,0x8(%edx)
40001208:	eb 09                	jmp    40001213 <malloc+0x7e>
    return state.eax;
}

uint32_t pexists(int pid) {
    struct regstate state = {
4000120a:	89 c2                	mov    %eax,%edx
4000120c:	8b 40 08             	mov    0x8(%eax),%eax
static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
      .edx = 0,
4000120f:	85 c0                	test   %eax,%eax
40001211:	75 e0                	jne    400011f3 <malloc+0x5e>
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40001213:	a1 1c 42 00 40       	mov    0x4000421c,%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
40001218:	85 ff                	test   %edi,%edi
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
4000121a:	89 43 08             	mov    %eax,0x8(%ebx)
    };
4000121d:	89 1d 1c 42 00 40    	mov    %ebx,0x4000421c
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
40001223:	74 1d                	je     40001242 <malloc+0xad>
        .eax = 3,
40001225:	e8 02 ff ff ff       	call   4000112c <pop_unused_node>
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
4000122a:	8b 13                	mov    (%ebx),%edx
4000122c:	03 53 04             	add    0x4(%ebx),%edx
4000122f:	89 50 04             	mov    %edx,0x4(%eax)
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
40001232:	8b 15 20 42 00 40    	mov    0x40004220,%edx
40001238:	89 50 08             	mov    %edx,0x8(%eax)
int exec(char* path, char** args, int asSubtask) {
    struct regstate state = {
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
        .edx = asSubtask,
4000123b:	89 38                	mov    %edi,(%eax)
      .ebx = (uint32_t)pid,
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };
4000123d:	a3 20 42 00 40       	mov    %eax,0x40004220
        .edx = asSubtask,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40001242:	8b 43 04             	mov    0x4(%ebx),%eax

    return state.eax;
40001245:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001248:	5b                   	pop    %ebx
40001249:	5e                   	pop    %esi
4000124a:	5f                   	pop    %edi
4000124b:	5d                   	pop    %ebp
4000124c:	c3                   	ret    
int changeExecPath(char* path) {
    struct regstate state = {
        .eax = 7,
        .ebx = (uint32_t)path,
        .ecx = 0,
        .edx = 0,
4000124d:	89 f0                	mov    %esi,%eax
}

int changeExecPath(char* path) {
    struct regstate state = {
        .eax = 7,
        .ebx = (uint32_t)path,
4000124f:	89 f7                	mov    %esi,%edi
40001251:	c1 ef 0c             	shr    $0xc,%edi
        .ecx = 0,
        .edx = 0,
40001254:	25 ff 0f 00 00       	and    $0xfff,%eax
        .esi = 0,
40001259:	83 f8 01             	cmp    $0x1,%eax
4000125c:	83 df ff             	sbb    $0xffffffff,%edi
        .edi = 0
    };
4000125f:	83 ec 0c             	sub    $0xc,%esp
40001262:	57                   	push   %edi
40001263:	e8 37 01 00 00       	call   4000139f <vmm_alloc_cont>
    syscall(&state);

    return state.eax;
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
40001268:	c1 e7 0c             	shl    $0xc,%edi
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000126b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000126e:	e8 b9 fe ff ff       	call   4000112c <pop_unused_node>

    return state.eax;
40001273:	8b 55 e4             	mov    -0x1c(%ebp),%edx
}

char* getPathChild(uint32_t index, char* strbuf, char* path) {
40001276:	83 c4 10             	add    $0x10,%esp
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40001279:	89 c3                	mov    %eax,%ebx

    return state.eax;
4000127b:	89 50 04             	mov    %edx,0x4(%eax)
}
4000127e:	89 30                	mov    %esi,(%eax)

char* getPathChild(uint32_t index, char* strbuf, char* path) {
40001280:	39 f7                	cmp    %esi,%edi
40001282:	0f 86 5b ff ff ff    	jbe    400011e3 <malloc+0x4e>
40001288:	e9 37 ff ff ff       	jmp    400011c4 <malloc+0x2f>

4000128d <realloc>:
    }

    return res;
}

int sexec(char* path, char** args) {
4000128d:	55                   	push   %ebp
4000128e:	89 e5                	mov    %esp,%ebp
40001290:	56                   	push   %esi
40001291:	53                   	push   %ebx
    uint32_t res = exec(path, args, 1);

40001292:	8b 1d 1c 42 00 40    	mov    0x4000421c,%ebx
    }

    return res;
}

int sexec(char* path, char** args) {
40001298:	8b 55 08             	mov    0x8(%ebp),%edx
4000129b:	8b 45 0c             	mov    0xc(%ebp),%eax
    uint32_t res = exec(path, args, 1);

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
4000129e:	eb 3e                	jmp    400012de <realloc+0x51>
    }
400012a0:	3b 53 04             	cmp    0x4(%ebx),%edx
400012a3:	75 36                	jne    400012db <realloc+0x4e>

400012a5:	85 c0                	test   %eax,%eax
400012a7:	75 0b                	jne    400012b4 <realloc+0x27>
    return res;
400012a9:	52                   	push   %edx
400012aa:	31 f6                	xor    %esi,%esi
400012ac:	e8 9b fd ff ff       	call   4000104c <free>
}
400012b1:	5b                   	pop    %ebx
400012b2:	eb 30                	jmp    400012e4 <realloc+0x57>

void printFilesystemError(char* path, uint32_t code) {
400012b4:	83 ec 0c             	sub    $0xc,%esp
400012b7:	50                   	push   %eax
400012b8:	e8 d8 fe ff ff       	call   40001195 <malloc>
    switch(code) {
400012bd:	83 c4 0c             	add    $0xc,%esp
    }

    return res;
}

void printFilesystemError(char* path, uint32_t code) {
400012c0:	89 c6                	mov    %eax,%esi
    switch(code) {
400012c2:	ff 33                	pushl  (%ebx)
400012c4:	ff 73 04             	pushl  0x4(%ebx)
400012c7:	50                   	push   %eax
400012c8:	e8 4b fb ff ff       	call   40000e18 <memcpy>
    case PE_NO_ERROR:
400012cd:	59                   	pop    %ecx
400012ce:	ff 73 04             	pushl  0x4(%ebx)
400012d1:	e8 76 fd ff ff       	call   4000104c <free>
        printf("%s: Unknown error", path);
        break;
400012d6:	83 c4 10             	add    $0x10,%esp
400012d9:	eb 09                	jmp    400012e4 <realloc+0x57>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
        break;
    case PE_CORRUPT_FILE:
400012db:	8b 5b 08             	mov    0x8(%ebx),%ebx

int sexec(char* path, char** args) {
    uint32_t res = exec(path, args, 1);

    if(!res) {
        printFilesystemError(path, getLastVFSErr());
400012de:	85 db                	test   %ebx,%ebx
400012e0:	75 be                	jne    400012a0 <realloc+0x13>
400012e2:	31 f6                	xor    %esi,%esi
        printf("%s: Specified path was invalid", path);
        break;
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
        break;
    case PE_FILESYSTEM:
400012e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
400012e7:	89 f0                	mov    %esi,%eax
400012e9:	5b                   	pop    %ebx
400012ea:	5e                   	pop    %esi
400012eb:	5d                   	pop    %ebp
400012ec:	c3                   	ret    

400012ed <calloc>:

    syscall(&state);

    return state.eax;
}

400012ed:	55                   	push   %ebp
400012ee:	89 e5                	mov    %esp,%ebp
400012f0:	56                   	push   %esi
400012f1:	53                   	push   %ebx
400012f2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
int dexec(char* path, char** args) {
    uint32_t res = exec(path, args, 0);
400012f5:	83 ec 0c             	sub    $0xc,%esp
    syscall(&state);

    return state.eax;
}

int dexec(char* path, char** args) {
400012f8:	0f af 5d 08          	imul   0x8(%ebp),%ebx
    uint32_t res = exec(path, args, 0);
400012fc:	53                   	push   %ebx
400012fd:	e8 93 fe ff ff       	call   40001195 <malloc>

    if(!res) {
40001302:	83 c4 10             	add    $0x10,%esp

    return state.eax;
}

int dexec(char* path, char** args) {
    uint32_t res = exec(path, args, 0);
40001305:	89 c6                	mov    %eax,%esi

    if(!res) {
40001307:	85 c0                	test   %eax,%eax
40001309:	74 0d                	je     40001318 <calloc+0x2b>
        printFilesystemError(path, getLastVFSErr());
4000130b:	50                   	push   %eax
4000130c:	53                   	push   %ebx
4000130d:	6a 00                	push   $0x0
4000130f:	56                   	push   %esi
40001310:	e8 e7 fa ff ff       	call   40000dfc <memset>
40001315:	83 c4 10             	add    $0x10,%esp
    }

    return res;
}
40001318:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000131b:	89 f0                	mov    %esi,%eax
4000131d:	5b                   	pop    %ebx
4000131e:	5e                   	pop    %esi
4000131f:	5d                   	pop    %ebp
40001320:	c3                   	ret    
40001321:	00 00                	add    %al,(%eax)
	...

40001324 <print_memstat>:
      .ecx = 0,
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

40001324:	55                   	push   %ebp
40001325:	89 e5                	mov    %esp,%ebp
40001327:	83 ec 34             	sub    $0x34,%esp

void _start() {
  char** args = (char**) getargs();

  int argc = 0;

4000132a:	8d 45 e0             	lea    -0x20(%ebp),%eax
    return state.eax;
}

void _start() {
  char** args = (char**) getargs();

4000132d:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
  int argc = 0;

40001334:	50                   	push   %eax
    return state.eax;
}

void _start() {
  char** args = (char**) getargs();

40001335:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000133c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001343:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000134a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001351:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  int argc = 0;

40001358:	e8 7f 00 00 00       	call   400013dc <syscall>
4000135d:	83 c4 10             	add    $0x10,%esp
  if(args != 0) {
40001360:	c9                   	leave  
40001361:	c3                   	ret    

40001362 <vmm_free>:
      .esi = 0,
      .edi = 0
    };

    syscall(&state);

40001362:	55                   	push   %ebp
40001363:	89 e5                	mov    %esp,%ebp
40001365:	83 ec 34             	sub    $0x34,%esp

uint32_t pexists(int pid) {
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
40001368:	8b 45 08             	mov    0x8(%ebp),%eax
4000136b:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
40001372:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .edx = 0,
      .esi = 0,
40001375:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001378:	50                   	push   %eax

uint32_t pexists(int pid) {
    struct regstate state = {
      .eax = 2,
      .ebx = (uint32_t)pid,
      .ecx = 0,
40001379:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001380:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001387:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000138e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
40001395:	e8 42 00 00 00       	call   400013dc <syscall>
4000139a:	83 c4 10             	add    $0x10,%esp
      .edi = 0
4000139d:	c9                   	leave  
4000139e:	c3                   	ret    

4000139f <vmm_alloc_cont>:
#include "process.h"
#include "stdio.h"
#include "process_rpc.c"
4000139f:	55                   	push   %ebp
400013a0:	89 e5                	mov    %esp,%ebp
400013a2:	83 ec 34             	sub    $0x34,%esp

static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
400013a5:	8b 45 08             	mov    0x8(%ebp),%eax
400013a8:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400013af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .edx = 0,
      .esi = 0,
400013b2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400013b5:	50                   	push   %eax

static uint32_t getargs() {
    struct regstate state = {
      .eax = 4,
      .ebx = 0,
      .ecx = 0,
400013b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400013bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400013c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400013cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
400013d2:	e8 05 00 00 00       	call   400013dc <syscall>
      .edi = 0
    };

400013d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400013da:	c9                   	leave  
400013db:	c3                   	ret    

400013dc <syscall>:
#include "process.h"
#include "stdio.h"
#include "process_rpc.c"
400013dc:	55                   	push   %ebp
400013dd:	89 e5                	mov    %esp,%ebp
400013df:	57                   	push   %edi
400013e0:	56                   	push   %esi
400013e1:	53                   	push   %ebx
400013e2:	83 ec 10             	sub    $0x10,%esp

400013e5:	8b 55 08             	mov    0x8(%ebp),%edx
400013e8:	8b 45 08             	mov    0x8(%ebp),%eax
400013eb:	8b 72 0c             	mov    0xc(%edx),%esi
400013ee:	8b 00                	mov    (%eax),%eax
400013f0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
400013f3:	8b 5a 04             	mov    0x4(%edx),%ebx
400013f6:	8b 4a 08             	mov    0x8(%edx),%ecx
400013f9:	8b 72 10             	mov    0x10(%edx),%esi
400013fc:	8b 7a 14             	mov    0x14(%edx),%edi
400013ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
40001402:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001405:	cd 30                	int    $0x30
40001407:	89 55 e8             	mov    %edx,-0x18(%ebp)
4000140a:	8b 55 08             	mov    0x8(%ebp),%edx
4000140d:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001410:	89 02                	mov    %eax,(%edx)
40001412:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001415:	89 5a 04             	mov    %ebx,0x4(%edx)
40001418:	89 4a 08             	mov    %ecx,0x8(%edx)
4000141b:	89 42 0c             	mov    %eax,0xc(%edx)
4000141e:	89 72 10             	mov    %esi,0x10(%edx)
40001421:	89 7a 14             	mov    %edi,0x14(%edx)
      .edi = 0
    };

    syscall(&state);

    return state.eax;
40001424:	83 c4 10             	add    $0x10,%esp
40001427:	5b                   	pop    %ebx
40001428:	5e                   	pop    %esi
40001429:	5f                   	pop    %edi
4000142a:	5d                   	pop    %ebp
4000142b:	c3                   	ret    
