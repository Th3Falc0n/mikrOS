
../../initrfs/ibin/ls:     file format elf32-i386
../../initrfs/ibin/ls
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000047e

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000021be memsz 0x000021be flags r-x
    LOAD off    0x00004000 vaddr 0x40003000 paddr 0x40003000 align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001254  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000034  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.str1.1 0000018a  40002034  40002034  00003034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000214  40003000  40003000  00004000  2**2
                  ALLOC
  4 .stab         00004968  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00007b28  2**0
                  CONTENTS, READONLY
  6 .stabstr      00001888  00000000  00000000  00007ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .rodata	00000000 .rodata
40002034 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40003000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ls.c
00000000 l    df *ABS*	00000000 process.c
40003000 l     O .bss	00000200 irq_handlers
4000201c l     O .rodata	00000018 C.7.1019
400004f0 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
400005b0 l     F .text	00000047 resolveHandle
40000a60 l     F .text	0000004a printrwerror
400008ad l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000f54 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
40000274 g     F .text	0000003d getExecPath
40000964 g     F .text	00000014 putchar
40000d11 g     F .text	00000033 strcpy
400002f7 g     F .text	0000003e yield
40000978 g     F .text	000000e8 printf
40001204 g     F .text	00000050 syscall
40000b75 g     F .text	00000042 fgets
40000b69 g     F .text	0000000c getc
40000c40 g     F .text	00000026 memcpy
4000089b g     F .text	00000012 puts
40000335 g     F .text	0000003d pexists
40000fbd g     F .text	000000f8 malloc
400003ca g     F .text	0000003d fetch_rpc_data
40000d44 g     F .text	000000a5 strtoknc
4000020a g     F .text	0000003d changeExecPath
40003210 g     O .bss	00000004 first_free
40000197 g     F .text	00000037 dexec
4000074a g     F .text	00000012 setstdout
40001115 g     F .text	00000034 calloc
400001ce g     F .text	0000003c getExecPathChild
400011c7 g     F .text	0000003d vmm_alloc_cont
40000125 g     F .text	0000003b exec
4000047e g     F .text	00000072 _start
400010b5 g     F .text	00000060 realloc
40000441 g     F .text	0000003d set_rpc_handler
40000e22 g     F .text	00000052 strtok
40000c66 g     F .text	00000047 memcmp
40000160 g     F .text	00000037 sexec
40000aaa g     F .text	00000085 fread
40003208 g     O .bss	00000004 first_unused
400006ae g     F .text	0000003c fopen
40000c24 g     F .text	0000001c memset
40000000 g     F .text	000000b4 main
40000671 g     F .text	0000003d fclose
40000b5a g     F .text	0000000f getchar
40000bb7 g     F .text	0000006c getln
40003204 g     O .bss	00000004 fr
40000634 g     F .text	0000003d favailable
40000951 g     F .text	00000013 putc
40000cad g     F .text	00000049 strcmp
40000b2f g     F .text	0000002b fgetc
40003200 g     O .bss	00000004 sp
40000247 g     F .text	0000002d cd
4000320c g     O .bss	00000004 first_used
400008ec g     F .text	00000065 fputc
4000079a g     F .text	00000093 fwrite
40000738 g     F .text	00000012 setstdin
40000de9 g     F .text	00000039 strclone
400002b1 g     F .text	00000046 exit
40000372 g     F .text	00000058 register_irq_handler
400006ea g     F .text	0000003c fopenpmhandle
4000118a g     F .text	0000003d vmm_free
400000b4 g     F .text	00000071 printFilesystemError
40000cf6 g     F .text	0000001b strlen
4000075c g     F .text	0000003e getLastVFSErr
4000082d g     F .text	0000006e fputs
400005f7 g     F .text	0000003d fmkfifo
40000407 g     F .text	0000003a call_rpc
40000726 g     F .text	00000012 setstderr
4000114c g     F .text	0000003e print_memstat
40000e74 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <main>:
#include "stdio.h"
#include "process.h"
#include "string.h"
 
int main(int argc, char* args[])
{
40000000:	8d 4c 24 04          	lea    0x4(%esp),%ecx
40000004:	83 e4 f0             	and    $0xfffffff0,%esp
40000007:	ff 71 fc             	pushl  -0x4(%ecx)
4000000a:	55                   	push   %ebp
4000000b:	89 e5                	mov    %esp,%ebp
4000000d:	51                   	push   %ecx
4000000e:	81 ec 14 02 00 00    	sub    $0x214,%esp
    uint32_t index = 0;
40000014:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char child[512];


    while(getExecPathChild(index++, child)) {
4000001b:	eb 69                	jmp    40000086 <main+0x86>

    	if(child[strlen(child)-1] == '/') {
4000001d:	83 ec 0c             	sub    $0xc,%esp
40000020:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
40000026:	50                   	push   %eax
40000027:	e8 ca 0c 00 00       	call   40000cf6 <strlen>
4000002c:	83 c4 10             	add    $0x10,%esp
4000002f:	48                   	dec    %eax
40000030:	8a 84 05 f4 fd ff ff 	mov    -0x20c(%ebp,%eax,1),%al
40000037:	3c 2f                	cmp    $0x2f,%al
40000039:	75 1a                	jne    40000055 <main+0x55>
    	    putchar(0x11);
4000003b:	83 ec 0c             	sub    $0xc,%esp
4000003e:	6a 11                	push   $0x11
40000040:	e8 1f 09 00 00       	call   40000964 <putchar>
40000045:	83 c4 10             	add    $0x10,%esp
    	    putchar(0x31);
40000048:	83 ec 0c             	sub    $0xc,%esp
4000004b:	6a 31                	push   $0x31
4000004d:	e8 12 09 00 00       	call   40000964 <putchar>
40000052:	83 c4 10             	add    $0x10,%esp
    	}

		printf("%s\n", child);
40000055:	83 ec 08             	sub    $0x8,%esp
40000058:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
4000005e:	50                   	push   %eax
4000005f:	68 00 20 00 40       	push   $0x40002000
40000064:	e8 0f 09 00 00       	call   40000978 <printf>
40000069:	83 c4 10             	add    $0x10,%esp

	    putchar(0x11);
4000006c:	83 ec 0c             	sub    $0xc,%esp
4000006f:	6a 11                	push   $0x11
40000071:	e8 ee 08 00 00       	call   40000964 <putchar>
40000076:	83 c4 10             	add    $0x10,%esp
	    putchar(0x07);
40000079:	83 ec 0c             	sub    $0xc,%esp
4000007c:	6a 07                	push   $0x7
4000007e:	e8 e1 08 00 00       	call   40000964 <putchar>
40000083:	83 c4 10             	add    $0x10,%esp
{
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40000086:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000089:	ff 45 f4             	incl   -0xc(%ebp)
4000008c:	83 ec 08             	sub    $0x8,%esp
4000008f:	8d 95 f4 fd ff ff    	lea    -0x20c(%ebp),%edx
40000095:	52                   	push   %edx
40000096:	50                   	push   %eax
40000097:	e8 32 01 00 00       	call   400001ce <getExecPathChild>
4000009c:	83 c4 10             	add    $0x10,%esp
4000009f:	85 c0                	test   %eax,%eax
400000a1:	0f 85 76 ff ff ff    	jne    4000001d <main+0x1d>

	    putchar(0x11);
	    putchar(0x07);
    }

    return 0;
400000a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
400000ac:	8b 4d fc             	mov    -0x4(%ebp),%ecx
400000af:	c9                   	leave  
400000b0:	8d 61 fc             	lea    -0x4(%ecx),%esp
400000b3:	c3                   	ret    

400000b4 <printFilesystemError>:
400000b4:	55                   	push   %ebp
400000b5:	89 e5                	mov    %esp,%ebp
400000b7:	83 ec 08             	sub    $0x8,%esp
400000ba:	8b 55 0c             	mov    0xc(%ebp),%edx
400000bd:	8b 45 08             	mov    0x8(%ebp),%eax
400000c0:	83 fa 05             	cmp    $0x5,%edx
400000c3:	77 43                	ja     40000108 <printFilesystemError+0x54>
400000c5:	ff 24 95 04 20 00 40 	jmp    *0x40002004(,%edx,4)
400000cc:	52                   	push   %edx
400000cd:	52                   	push   %edx
400000ce:	50                   	push   %eax
400000cf:	68 34 20 00 40       	push   $0x40002034
400000d4:	eb 3a                	jmp    40000110 <printFilesystemError+0x5c>
400000d6:	51                   	push   %ecx
400000d7:	51                   	push   %ecx
400000d8:	50                   	push   %eax
400000d9:	68 46 20 00 40       	push   $0x40002046
400000de:	eb 30                	jmp    40000110 <printFilesystemError+0x5c>
400000e0:	52                   	push   %edx
400000e1:	52                   	push   %edx
400000e2:	50                   	push   %eax
400000e3:	68 65 20 00 40       	push   $0x40002065
400000e8:	eb 26                	jmp    40000110 <printFilesystemError+0x5c>
400000ea:	51                   	push   %ecx
400000eb:	51                   	push   %ecx
400000ec:	50                   	push   %eax
400000ed:	68 8f 20 00 40       	push   $0x4000208f
400000f2:	eb 1c                	jmp    40000110 <printFilesystemError+0x5c>
400000f4:	52                   	push   %edx
400000f5:	52                   	push   %edx
400000f6:	50                   	push   %eax
400000f7:	68 a4 20 00 40       	push   $0x400020a4
400000fc:	eb 12                	jmp    40000110 <printFilesystemError+0x5c>
400000fe:	51                   	push   %ecx
400000ff:	51                   	push   %ecx
40000100:	50                   	push   %eax
40000101:	68 df 20 00 40       	push   $0x400020df
40000106:	eb 08                	jmp    40000110 <printFilesystemError+0x5c>
40000108:	52                   	push   %edx
40000109:	52                   	push   %edx
4000010a:	50                   	push   %eax
4000010b:	68 f2 20 00 40       	push   $0x400020f2
40000110:	e8 63 08 00 00       	call   40000978 <printf>
40000115:	c7 45 08 0f 21 00 40 	movl   $0x4000210f,0x8(%ebp)
4000011c:	83 c4 10             	add    $0x10,%esp
4000011f:	c9                   	leave  
40000120:	e9 53 08 00 00       	jmp    40000978 <printf>

40000125 <exec>:
40000125:	55                   	push   %ebp
40000126:	89 e5                	mov    %esp,%ebp
40000128:	83 ec 34             	sub    $0x34,%esp
4000012b:	8b 45 08             	mov    0x8(%ebp),%eax
4000012e:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40000135:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000138:	8b 45 0c             	mov    0xc(%ebp),%eax
4000013b:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000013e:	8b 45 10             	mov    0x10(%ebp),%eax
40000141:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000144:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000147:	50                   	push   %eax
40000148:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000014f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000156:	e8 a9 10 00 00       	call   40001204 <syscall>
4000015b:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000015e:	c9                   	leave  
4000015f:	c3                   	ret    

40000160 <sexec>:
40000160:	55                   	push   %ebp
40000161:	89 e5                	mov    %esp,%ebp
40000163:	56                   	push   %esi
40000164:	53                   	push   %ebx
40000165:	53                   	push   %ebx
40000166:	6a 01                	push   $0x1
40000168:	8b 75 08             	mov    0x8(%ebp),%esi
4000016b:	ff 75 0c             	pushl  0xc(%ebp)
4000016e:	56                   	push   %esi
4000016f:	e8 b1 ff ff ff       	call   40000125 <exec>
40000174:	83 c4 10             	add    $0x10,%esp
40000177:	89 c3                	mov    %eax,%ebx
40000179:	85 c0                	test   %eax,%eax
4000017b:	75 11                	jne    4000018e <sexec+0x2e>
4000017d:	e8 da 05 00 00       	call   4000075c <getLastVFSErr>
40000182:	51                   	push   %ecx
40000183:	51                   	push   %ecx
40000184:	50                   	push   %eax
40000185:	56                   	push   %esi
40000186:	e8 29 ff ff ff       	call   400000b4 <printFilesystemError>
4000018b:	83 c4 10             	add    $0x10,%esp
4000018e:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000191:	89 d8                	mov    %ebx,%eax
40000193:	5b                   	pop    %ebx
40000194:	5e                   	pop    %esi
40000195:	5d                   	pop    %ebp
40000196:	c3                   	ret    

40000197 <dexec>:
40000197:	55                   	push   %ebp
40000198:	89 e5                	mov    %esp,%ebp
4000019a:	56                   	push   %esi
4000019b:	53                   	push   %ebx
4000019c:	51                   	push   %ecx
4000019d:	6a 00                	push   $0x0
4000019f:	8b 75 08             	mov    0x8(%ebp),%esi
400001a2:	ff 75 0c             	pushl  0xc(%ebp)
400001a5:	56                   	push   %esi
400001a6:	e8 7a ff ff ff       	call   40000125 <exec>
400001ab:	83 c4 10             	add    $0x10,%esp
400001ae:	89 c3                	mov    %eax,%ebx
400001b0:	85 c0                	test   %eax,%eax
400001b2:	75 11                	jne    400001c5 <dexec+0x2e>
400001b4:	e8 a3 05 00 00       	call   4000075c <getLastVFSErr>
400001b9:	52                   	push   %edx
400001ba:	52                   	push   %edx
400001bb:	50                   	push   %eax
400001bc:	56                   	push   %esi
400001bd:	e8 f2 fe ff ff       	call   400000b4 <printFilesystemError>
400001c2:	83 c4 10             	add    $0x10,%esp
400001c5:	8d 65 f8             	lea    -0x8(%ebp),%esp
400001c8:	89 d8                	mov    %ebx,%eax
400001ca:	5b                   	pop    %ebx
400001cb:	5e                   	pop    %esi
400001cc:	5d                   	pop    %ebp
400001cd:	c3                   	ret    

400001ce <getExecPathChild>:
400001ce:	55                   	push   %ebp
400001cf:	89 e5                	mov    %esp,%ebp
400001d1:	83 ec 34             	sub    $0x34,%esp
400001d4:	8b 45 08             	mov    0x8(%ebp),%eax
400001d7:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
400001de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001e1:	8b 45 0c             	mov    0xc(%ebp),%eax
400001e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400001e7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001ea:	50                   	push   %eax
400001eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000200:	e8 ff 0f 00 00       	call   40001204 <syscall>
40000205:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000208:	c9                   	leave  
40000209:	c3                   	ret    

4000020a <changeExecPath>:
4000020a:	55                   	push   %ebp
4000020b:	89 e5                	mov    %esp,%ebp
4000020d:	83 ec 34             	sub    $0x34,%esp
40000210:	8b 45 08             	mov    0x8(%ebp),%eax
40000213:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
4000021a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000021d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000220:	50                   	push   %eax
40000221:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000228:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000022f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000236:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000023d:	e8 c2 0f 00 00       	call   40001204 <syscall>
40000242:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000245:	c9                   	leave  
40000246:	c3                   	ret    

40000247 <cd>:
40000247:	55                   	push   %ebp
40000248:	89 e5                	mov    %esp,%ebp
4000024a:	53                   	push   %ebx
4000024b:	83 ec 10             	sub    $0x10,%esp
4000024e:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000251:	53                   	push   %ebx
40000252:	e8 b3 ff ff ff       	call   4000020a <changeExecPath>
40000257:	83 c4 10             	add    $0x10,%esp
4000025a:	85 c0                	test   %eax,%eax
4000025c:	75 11                	jne    4000026f <cd+0x28>
4000025e:	e8 f9 04 00 00       	call   4000075c <getLastVFSErr>
40000263:	52                   	push   %edx
40000264:	52                   	push   %edx
40000265:	50                   	push   %eax
40000266:	53                   	push   %ebx
40000267:	e8 48 fe ff ff       	call   400000b4 <printFilesystemError>
4000026c:	83 c4 10             	add    $0x10,%esp
4000026f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000272:	c9                   	leave  
40000273:	c3                   	ret    

40000274 <getExecPath>:
40000274:	55                   	push   %ebp
40000275:	89 e5                	mov    %esp,%ebp
40000277:	83 ec 34             	sub    $0x34,%esp
4000027a:	8b 45 08             	mov    0x8(%ebp),%eax
4000027d:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
40000284:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000287:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000028a:	50                   	push   %eax
4000028b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000292:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000299:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002a7:	e8 58 0f 00 00       	call   40001204 <syscall>
400002ac:	83 c4 10             	add    $0x10,%esp
400002af:	c9                   	leave  
400002b0:	c3                   	ret    

400002b1 <exit>:
400002b1:	55                   	push   %ebp
400002b2:	89 e5                	mov    %esp,%ebp
400002b4:	83 ec 34             	sub    $0x34,%esp
400002b7:	8b 45 08             	mov    0x8(%ebp),%eax
400002ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400002c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002c4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002c7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002e3:	50                   	push   %eax
400002e4:	e8 1b 0f 00 00       	call   40001204 <syscall>
400002e9:	c7 04 24 fa 20 00 40 	movl   $0x400020fa,(%esp)
400002f0:	e8 83 06 00 00       	call   40000978 <printf>
400002f5:	eb f2                	jmp    400002e9 <exit+0x38>

400002f7 <yield>:
400002f7:	55                   	push   %ebp
400002f8:	89 e5                	mov    %esp,%ebp
400002fa:	83 ec 34             	sub    $0x34,%esp
400002fd:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000300:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
40000307:	50                   	push   %eax
40000308:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000030f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000316:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000031d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000324:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000032b:	e8 d4 0e 00 00       	call   40001204 <syscall>
40000330:	83 c4 10             	add    $0x10,%esp
40000333:	c9                   	leave  
40000334:	c3                   	ret    

40000335 <pexists>:
    	}

		printf("%s\n", child);

	    putchar(0x11);
	    putchar(0x07);
40000335:	55                   	push   %ebp
40000336:	89 e5                	mov    %esp,%ebp
40000338:	83 ec 34             	sub    $0x34,%esp
    return 0;
}
4000033b:	8b 45 08             	mov    0x8(%ebp),%eax
4000033e:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
40000345:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000348:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000034b:	50                   	push   %eax
    return 0;
}
4000034c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000353:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000035a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000361:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000368:	e8 97 0e 00 00       	call   40001204 <syscall>
4000036d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000370:	c9                   	leave  
40000371:	c3                   	ret    

40000372 <register_irq_handler>:
40000372:	55                   	push   %ebp
40000373:	89 e5                	mov    %esp,%ebp
40000375:	53                   	push   %ebx
40000376:	83 ec 30             	sub    $0x30,%esp
40000379:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000037c:	8b 5d 08             	mov    0x8(%ebp),%ebx
4000037f:	50                   	push   %eax
40000380:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
40000387:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000038a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000391:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000398:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000039f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003a6:	e8 59 0e 00 00       	call   40001204 <syscall>
400003ab:	83 c4 10             	add    $0x10,%esp
400003ae:	31 c0                	xor    %eax,%eax
400003b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
400003b4:	74 0f                	je     400003c5 <register_irq_handler+0x53>
400003b6:	8b 45 0c             	mov    0xc(%ebp),%eax
400003b9:	89 04 9d 00 30 00 40 	mov    %eax,0x40003000(,%ebx,4)
400003c0:	b8 01 00 00 00       	mov    $0x1,%eax
400003c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400003c8:	c9                   	leave  
400003c9:	c3                   	ret    

400003ca <fetch_rpc_data>:
400003ca:	55                   	push   %ebp
400003cb:	89 e5                	mov    %esp,%ebp
400003cd:	83 ec 34             	sub    $0x34,%esp
400003d0:	8b 45 08             	mov    0x8(%ebp),%eax
400003d3:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
400003da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003dd:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003e0:	50                   	push   %eax
400003e1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003fd:	e8 02 0e 00 00       	call   40001204 <syscall>
40000402:	83 c4 10             	add    $0x10,%esp
40000405:	c9                   	leave  
40000406:	c3                   	ret    

40000407 <call_rpc>:
    	    putchar(0x11);
    	    putchar(0x31);
    	}

		printf("%s\n", child);

40000407:	55                   	push   %ebp
40000408:	89 e5                	mov    %esp,%ebp
4000040a:	83 ec 34             	sub    $0x34,%esp
    }

    return 0;
}
4000040d:	8b 45 08             	mov    0x8(%ebp),%eax
40000410:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40000417:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000041a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000041d:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000420:	8b 45 10             	mov    0x10(%ebp),%eax
40000423:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000426:	8b 45 14             	mov    0x14(%ebp),%eax
40000429:	89 45 f0             	mov    %eax,-0x10(%ebp)
4000042c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000042f:	50                   	push   %eax
    }

    return 0;
}
40000430:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000437:	e8 c8 0d 00 00       	call   40001204 <syscall>
4000043c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000043f:	c9                   	leave  
40000440:	c3                   	ret    

40000441 <set_rpc_handler>:
40000441:	55                   	push   %ebp
40000442:	89 e5                	mov    %esp,%ebp
40000444:	57                   	push   %edi
40000445:	56                   	push   %esi
40000446:	be 1c 20 00 40       	mov    $0x4000201c,%esi
4000044b:	83 ec 24             	sub    $0x24,%esp
4000044e:	8d 7d e0             	lea    -0x20(%ebp),%edi
40000451:	68 00 02 00 00       	push   $0x200
40000456:	6a 00                	push   $0x0
40000458:	68 00 30 00 40       	push   $0x40003000
4000045d:	e8 c2 07 00 00       	call   40000c24 <memset>
40000462:	b9 06 00 00 00       	mov    $0x6,%ecx
40000467:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000046a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
4000046c:	89 04 24             	mov    %eax,(%esp)
4000046f:	e8 90 0d 00 00       	call   40001204 <syscall>
40000474:	83 c4 10             	add    $0x10,%esp
40000477:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000047a:	5e                   	pop    %esi
4000047b:	5f                   	pop    %edi
4000047c:	5d                   	pop    %ebp
4000047d:	c3                   	ret    

4000047e <_start>:
4000047e:	55                   	push   %ebp
4000047f:	89 e5                	mov    %esp,%ebp
40000481:	56                   	push   %esi
40000482:	53                   	push   %ebx
40000483:	31 db                	xor    %ebx,%ebx
40000485:	83 ec 2c             	sub    $0x2c,%esp
    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
    	    putchar(0x31);
    	}
40000488:	8d 45 e0             	lea    -0x20(%ebp),%eax


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
4000048b:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000492:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    	    putchar(0x31);
    	}
40000499:	50                   	push   %eax


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
4000049a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    	    putchar(0x31);
    	}
400004b6:	e8 49 0d 00 00       	call   40001204 <syscall>

		printf("%s\n", child);
400004bb:	8b 75 e0             	mov    -0x20(%ebp),%esi
400004be:	83 c4 10             	add    $0x10,%esp
400004c1:	85 f6                	test   %esi,%esi
400004c3:	75 05                	jne    400004ca <_start+0x4c>
400004c5:	89 f3                	mov    %esi,%ebx
400004c7:	eb 07                	jmp    400004d0 <_start+0x52>
400004c9:	43                   	inc    %ebx
400004ca:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
400004ce:	75 f9                	jne    400004c9 <_start+0x4b>
400004d0:	e8 6c ff ff ff       	call   40000441 <set_rpc_handler>
400004d5:	51                   	push   %ecx
400004d6:	51                   	push   %ecx
400004d7:	56                   	push   %esi
400004d8:	53                   	push   %ebx
400004d9:	e8 22 fb ff ff       	call   40000000 <main>
400004de:	89 04 24             	mov    %eax,(%esp)
400004e1:	e8 cb fd ff ff       	call   400002b1 <exit>
400004e6:	83 c4 10             	add    $0x10,%esp
400004e9:	8d 65 f8             	lea    -0x8(%ebp),%esp
400004ec:	5b                   	pop    %ebx
400004ed:	5e                   	pop    %esi
400004ee:	5d                   	pop    %ebp
400004ef:	c3                   	ret    

400004f0 <_handle_rpc>:
400004f0:	55                   	push   %ebp
400004f1:	89 e5                	mov    %esp,%ebp
400004f3:	56                   	push   %esi
400004f4:	53                   	push   %ebx
400004f5:	83 ec 2c             	sub    $0x2c,%esp
400004f8:	ff 75 10             	pushl  0x10(%ebp)
400004fb:	8b 75 0c             	mov    0xc(%ebp),%esi
400004fe:	e8 ba 0a 00 00       	call   40000fbd <malloc>
40000503:	89 04 24             	mov    %eax,(%esp)
40000506:	89 c3                	mov    %eax,%ebx
40000508:	e8 bd fe ff ff       	call   400003ca <fetch_rpc_data>
4000050d:	83 c4 10             	add    $0x10,%esp
40000510:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000514:	75 4b                	jne    40000561 <_handle_rpc+0x71>
40000516:	8b 04 b5 00 30 00 40 	mov    0x40003000(,%esi,4),%eax
4000051d:	85 c0                	test   %eax,%eax
4000051f:	74 40                	je     40000561 <_handle_rpc+0x71>
40000521:	83 ec 0c             	sub    $0xc,%esp
40000524:	56                   	push   %esi
40000525:	ff d0                	call   *%eax


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000527:	8d 45 e0             	lea    -0x20(%ebp),%eax
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

4000052a:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000531:	89 04 24             	mov    %eax,(%esp)
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000534:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000053b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000542:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000549:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000550:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000557:	e8 a8 0c 00 00       	call   40001204 <syscall>
4000055c:	83 c4 10             	add    $0x10,%esp
4000055f:	eb fe                	jmp    4000055f <_handle_rpc+0x6f>
40000561:	83 ec 0c             	sub    $0xc,%esp
40000564:	68 01 21 00 40       	push   $0x40002101
40000569:	e8 0a 04 00 00       	call   40000978 <printf>
4000056e:	89 1c 24             	mov    %ebx,(%esp)
40000571:	e8 fe 08 00 00       	call   40000e74 <free>


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000576:	8d 45 e0             	lea    -0x20(%ebp),%eax
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000579:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000580:	89 04 24             	mov    %eax,(%esp)
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000583:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000058a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000591:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000598:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000059f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
400005a6:	e8 59 0c 00 00       	call   40001204 <syscall>
400005ab:	83 c4 10             	add    $0x10,%esp
400005ae:	eb fe                	jmp    400005ae <_handle_rpc+0xbe>

400005b0 <resolveHandle>:
400005b0:	55                   	push   %ebp
400005b1:	89 e5                	mov    %esp,%ebp
400005b3:	83 ec 28             	sub    $0x28,%esp
400005b6:	3d fe 0f 00 00       	cmp    $0xffe,%eax
400005bb:	77 38                	ja     400005f5 <resolveHandle+0x45>
    return 0;
}
400005bd:	83 ec 0c             	sub    $0xc,%esp
    }

    return 0;
}
400005c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400005c3:	8d 45 e0             	lea    -0x20(%ebp),%eax
    }

    return 0;
}
400005c6:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
400005cd:	50                   	push   %eax
    }

    return 0;
}
400005ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400005ea:	e8 15 0c 00 00       	call   40001204 <syscall>
400005ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005f2:	83 c4 10             	add    $0x10,%esp
400005f5:	c9                   	leave  
400005f6:	c3                   	ret    

400005f7 <fmkfifo>:
400005f7:	55                   	push   %ebp
400005f8:	89 e5                	mov    %esp,%ebp
400005fa:	83 ec 34             	sub    $0x34,%esp
400005fd:	8b 45 08             	mov    0x8(%ebp),%eax
40000600:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
40000607:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000060a:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000060d:	50                   	push   %eax
4000060e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000615:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000061c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000062a:	e8 d5 0b 00 00       	call   40001204 <syscall>
4000062f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000632:	c9                   	leave  
40000633:	c3                   	ret    

40000634 <favailable>:
40000634:	55                   	push   %ebp
40000635:	89 e5                	mov    %esp,%ebp
40000637:	83 ec 34             	sub    $0x34,%esp
4000063a:	8b 45 08             	mov    0x8(%ebp),%eax
4000063d:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
40000644:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000647:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000064a:	50                   	push   %eax
4000064b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000652:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000659:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000660:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000667:	e8 98 0b 00 00       	call   40001204 <syscall>
4000066c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000066f:	c9                   	leave  
40000670:	c3                   	ret    

40000671 <fclose>:
40000671:	55                   	push   %ebp
40000672:	89 e5                	mov    %esp,%ebp
40000674:	83 ec 34             	sub    $0x34,%esp
40000677:	8b 45 08             	mov    0x8(%ebp),%eax
4000067a:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000681:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000684:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000687:	50                   	push   %eax
40000688:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000068f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000696:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000069d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006a4:	e8 5b 0b 00 00       	call   40001204 <syscall>
400006a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006ac:	c9                   	leave  
400006ad:	c3                   	ret    

400006ae <fopen>:
400006ae:	55                   	push   %ebp
400006af:	89 e5                	mov    %esp,%ebp
400006b1:	83 ec 34             	sub    $0x34,%esp
400006b4:	8b 45 08             	mov    0x8(%ebp),%eax
400006b7:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
400006be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006c1:	8b 45 0c             	mov    0xc(%ebp),%eax
400006c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
400006c7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006ca:	50                   	push   %eax
400006cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006e0:	e8 1f 0b 00 00       	call   40001204 <syscall>
400006e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006e8:	c9                   	leave  
400006e9:	c3                   	ret    

400006ea <fopenpmhandle>:
400006ea:	55                   	push   %ebp
400006eb:	89 e5                	mov    %esp,%ebp
400006ed:	83 ec 34             	sub    $0x34,%esp
400006f0:	8b 45 08             	mov    0x8(%ebp),%eax
400006f3:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400006fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006fd:	8b 45 0c             	mov    0xc(%ebp),%eax
40000700:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000703:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000706:	50                   	push   %eax
40000707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000070e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000715:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000071c:	e8 e3 0a 00 00       	call   40001204 <syscall>
40000721:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000724:	c9                   	leave  
40000725:	c3                   	ret    

40000726 <setstderr>:
40000726:	55                   	push   %ebp
40000727:	89 e5                	mov    %esp,%ebp
40000729:	83 ec 10             	sub    $0x10,%esp
4000072c:	ff 75 08             	pushl  0x8(%ebp)
4000072f:	6a 03                	push   $0x3
40000731:	e8 b4 ff ff ff       	call   400006ea <fopenpmhandle>
40000736:	c9                   	leave  
40000737:	c3                   	ret    

40000738 <setstdin>:
40000738:	55                   	push   %ebp
40000739:	89 e5                	mov    %esp,%ebp
4000073b:	83 ec 10             	sub    $0x10,%esp
4000073e:	ff 75 08             	pushl  0x8(%ebp)
40000741:	6a 02                	push   $0x2
40000743:	e8 a2 ff ff ff       	call   400006ea <fopenpmhandle>
40000748:	c9                   	leave  
40000749:	c3                   	ret    

4000074a <setstdout>:
4000074a:	55                   	push   %ebp
4000074b:	89 e5                	mov    %esp,%ebp
4000074d:	83 ec 10             	sub    $0x10,%esp
40000750:	ff 75 08             	pushl  0x8(%ebp)
40000753:	6a 01                	push   $0x1
40000755:	e8 90 ff ff ff       	call   400006ea <fopenpmhandle>
4000075a:	c9                   	leave  
4000075b:	c3                   	ret    

4000075c <getLastVFSErr>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
#include "string.h"
 
4000075c:	55                   	push   %ebp
4000075d:	89 e5                	mov    %esp,%ebp
4000075f:	83 ec 34             	sub    $0x34,%esp


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000762:	8d 45 e0             	lea    -0x20(%ebp),%eax
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000765:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
4000076c:	50                   	push   %eax
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

4000076d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000774:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000077b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000782:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000789:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000790:	e8 6f 0a 00 00       	call   40001204 <syscall>
    	    putchar(0x31);
    	}

40000795:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000798:	c9                   	leave  
40000799:	c3                   	ret    

4000079a <fwrite>:
4000079a:	55                   	push   %ebp
4000079b:	89 e5                	mov    %esp,%ebp
4000079d:	57                   	push   %edi
4000079e:	56                   	push   %esi
4000079f:	53                   	push   %ebx
400007a0:	83 ec 3c             	sub    $0x3c,%esp
400007a3:	8b 45 08             	mov    0x8(%ebp),%eax
400007a6:	8b 7d 10             	mov    0x10(%ebp),%edi
400007a9:	e8 02 fe ff ff       	call   400005b0 <resolveHandle>
400007ae:	83 ec 0c             	sub    $0xc,%esp
400007b1:	89 c6                	mov    %eax,%esi
400007b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
400007b6:	8b 45 0c             	mov    0xc(%ebp),%eax
400007b9:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400007c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
400007c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
400007c6:	89 7d dc             	mov    %edi,-0x24(%ebp)
400007c9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400007d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400007d7:	50                   	push   %eax
400007d8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
400007db:	eb 2d                	jmp    4000080a <fwrite+0x70>
400007dd:	e8 15 fb ff ff       	call   400002f7 <yield>
400007e2:	8b 45 0c             	mov    0xc(%ebp),%eax
400007e5:	83 ec 0c             	sub    $0xc,%esp
400007e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
400007eb:	8d 45 d0             	lea    -0x30(%ebp),%eax
400007ee:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400007f5:	89 75 d4             	mov    %esi,-0x2c(%ebp)
400007f8:	89 7d dc             	mov    %edi,-0x24(%ebp)
400007fb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000802:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000809:	50                   	push   %eax
4000080a:	e8 f5 09 00 00       	call   40001204 <syscall>
4000080f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000812:	83 c4 10             	add    $0x10,%esp
40000815:	83 fb 01             	cmp    $0x1,%ebx
40000818:	74 c3                	je     400007dd <fwrite+0x43>
4000081a:	89 f0                	mov    %esi,%eax
4000081c:	89 da                	mov    %ebx,%edx
4000081e:	e8 3d 02 00 00       	call   40000a60 <printrwerror>
40000823:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000826:	89 d8                	mov    %ebx,%eax
40000828:	5b                   	pop    %ebx
40000829:	5e                   	pop    %esi
4000082a:	5f                   	pop    %edi
4000082b:	5d                   	pop    %ebp
4000082c:	c3                   	ret    

4000082d <fputs>:
4000082d:	55                   	push   %ebp
4000082e:	89 e5                	mov    %esp,%ebp
40000830:	56                   	push   %esi
40000831:	53                   	push   %ebx
40000832:	83 ec 20             	sub    $0x20,%esp
40000835:	8b 45 0c             	mov    0xc(%ebp),%eax
40000838:	8b 5d 08             	mov    0x8(%ebp),%ebx
4000083b:	e8 70 fd ff ff       	call   400005b0 <resolveHandle>
40000840:	89 c6                	mov    %eax,%esi
40000842:	85 c0                	test   %eax,%eax
40000844:	74 16                	je     4000085c <fputs+0x2f>
40000846:	83 ec 0c             	sub    $0xc,%esp
40000849:	53                   	push   %ebx
4000084a:	e8 a7 04 00 00       	call   40000cf6 <strlen>
4000084f:	83 c4 0c             	add    $0xc,%esp
40000852:	50                   	push   %eax
40000853:	53                   	push   %ebx
40000854:	56                   	push   %esi
40000855:	e8 40 ff ff ff       	call   4000079a <fwrite>
4000085a:	eb 35                	jmp    40000891 <fputs+0x64>
4000085c:	83 ec 0c             	sub    $0xc,%esp
4000085f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000862:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000869:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000086c:	50                   	push   %eax
4000086d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000874:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000087b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000882:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000889:	e8 76 09 00 00       	call   40001204 <syscall>
4000088e:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000891:	83 c4 10             	add    $0x10,%esp
40000894:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000897:	5b                   	pop    %ebx
40000898:	5e                   	pop    %esi
40000899:	5d                   	pop    %ebp
4000089a:	c3                   	ret    

4000089b <puts>:
4000089b:	55                   	push   %ebp
4000089c:	89 e5                	mov    %esp,%ebp
4000089e:	83 ec 10             	sub    $0x10,%esp
400008a1:	6a 01                	push   $0x1
400008a3:	ff 75 08             	pushl  0x8(%ebp)
400008a6:	e8 82 ff ff ff       	call   4000082d <fputs>
400008ab:	c9                   	leave  
400008ac:	c3                   	ret    

400008ad <putn>:
400008ad:	55                   	push   %ebp
400008ae:	89 e5                	mov    %esp,%ebp
400008b0:	56                   	push   %esi
400008b1:	53                   	push   %ebx
400008b2:	31 f6                	xor    %esi,%esi
400008b4:	83 ec 50             	sub    $0x50,%esp
400008b7:	89 d3                	mov    %edx,%ebx
400008b9:	83 fa 24             	cmp    $0x24,%edx
400008bc:	7f 25                	jg     400008e3 <putn+0x36>
400008be:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
400008c2:	8d 4d f7             	lea    -0x9(%ebp),%ecx
400008c5:	31 d2                	xor    %edx,%edx
400008c7:	49                   	dec    %ecx
400008c8:	f7 f3                	div    %ebx
400008ca:	46                   	inc    %esi
400008cb:	85 c0                	test   %eax,%eax
400008cd:	8a 92 11 21 00 40    	mov    0x40002111(%edx),%dl
400008d3:	88 11                	mov    %dl,(%ecx)
400008d5:	75 ee                	jne    400008c5 <putn+0x18>
400008d7:	83 ec 0c             	sub    $0xc,%esp
400008da:	51                   	push   %ecx
400008db:	e8 bb ff ff ff       	call   4000089b <puts>
400008e0:	83 c4 10             	add    $0x10,%esp
400008e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
400008e6:	89 f0                	mov    %esi,%eax
400008e8:	5b                   	pop    %ebx
400008e9:	5e                   	pop    %esi
400008ea:	5d                   	pop    %ebp
400008eb:	c3                   	ret    

400008ec <fputc>:
400008ec:	55                   	push   %ebp
400008ed:	89 e5                	mov    %esp,%ebp
400008ef:	83 ec 38             	sub    $0x38,%esp
400008f2:	8b 45 08             	mov    0x8(%ebp),%eax
400008f5:	88 45 d4             	mov    %al,-0x2c(%ebp)
400008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
400008fb:	e8 b0 fc ff ff       	call   400005b0 <resolveHandle>
40000900:	85 c0                	test   %eax,%eax
40000902:	74 0f                	je     40000913 <fputc+0x27>
40000904:	52                   	push   %edx
40000905:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000908:	6a 01                	push   $0x1
4000090a:	52                   	push   %edx
4000090b:	50                   	push   %eax
4000090c:	e8 89 fe ff ff       	call   4000079a <fwrite>
40000911:	eb 39                	jmp    4000094c <fputc+0x60>
40000913:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000917:	83 ec 0c             	sub    $0xc,%esp
4000091a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000091d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000920:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
40000927:	50                   	push   %eax
40000928:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000092f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000936:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000093d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000944:	e8 bb 08 00 00       	call   40001204 <syscall>
40000949:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000094c:	83 c4 10             	add    $0x10,%esp
4000094f:	c9                   	leave  
40000950:	c3                   	ret    

40000951 <putc>:
40000951:	55                   	push   %ebp
40000952:	89 e5                	mov    %esp,%ebp
40000954:	83 ec 08             	sub    $0x8,%esp
40000957:	0f be 45 08          	movsbl 0x8(%ebp),%eax
4000095b:	89 45 08             	mov    %eax,0x8(%ebp)
4000095e:	c9                   	leave  
4000095f:	e9 88 ff ff ff       	jmp    400008ec <fputc>

40000964 <putchar>:
40000964:	55                   	push   %ebp
40000965:	89 e5                	mov    %esp,%ebp
40000967:	83 ec 10             	sub    $0x10,%esp
4000096a:	0f be 45 08          	movsbl 0x8(%ebp),%eax
4000096e:	6a 01                	push   $0x1
40000970:	50                   	push   %eax
40000971:	e8 76 ff ff ff       	call   400008ec <fputc>
40000976:	c9                   	leave  
40000977:	c3                   	ret    

40000978 <printf>:
40000978:	55                   	push   %ebp
40000979:	89 e5                	mov    %esp,%ebp
4000097b:	57                   	push   %edi
4000097c:	56                   	push   %esi
4000097d:	53                   	push   %ebx
4000097e:	83 ec 1c             	sub    $0x1c,%esp
40000981:	8d 75 0c             	lea    0xc(%ebp),%esi
40000984:	8b 7d 08             	mov    0x8(%ebp),%edi
40000987:	31 db                	xor    %ebx,%ebx
40000989:	e9 be 00 00 00       	jmp    40000a4c <printf+0xd4>
4000098e:	3c 25                	cmp    $0x25,%al
40000990:	0f 85 a4 00 00 00    	jne    40000a3a <printf+0xc2>
40000996:	47                   	inc    %edi
40000997:	8a 07                	mov    (%edi),%al
40000999:	3c 70                	cmp    $0x70,%al
4000099b:	74 47                	je     400009e4 <printf+0x6c>
4000099d:	7f 1a                	jg     400009b9 <printf+0x41>
4000099f:	3c 63                	cmp    $0x63,%al
400009a1:	74 5a                	je     400009fd <printf+0x85>
400009a3:	7f 0e                	jg     400009b3 <printf+0x3b>
400009a5:	84 c0                	test   %al,%al
400009a7:	0f 84 a9 00 00 00    	je     40000a56 <printf+0xde>
400009ad:	3c 25                	cmp    $0x25,%al
400009af:	75 6c                	jne    40000a1d <printf+0xa5>
400009b1:	eb 63                	jmp    40000a16 <printf+0x9e>
400009b3:	3c 64                	cmp    $0x64,%al
400009b5:	75 66                	jne    40000a1d <printf+0xa5>
400009b7:	eb 1e                	jmp    400009d7 <printf+0x5f>
400009b9:	3c 75                	cmp    $0x75,%al
400009bb:	74 1a                	je     400009d7 <printf+0x5f>
400009bd:	3c 78                	cmp    $0x78,%al
400009bf:	74 23                	je     400009e4 <printf+0x6c>
400009c1:	3c 73                	cmp    $0x73,%al
400009c3:	75 58                	jne    40000a1d <printf+0xa5>
400009c5:	83 ec 0c             	sub    $0xc,%esp
400009c8:	8d 46 04             	lea    0x4(%esi),%eax
400009cb:	ff 36                	pushl  (%esi)
400009cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009d0:	e8 c6 fe ff ff       	call   4000089b <puts>
400009d5:	eb 38                	jmp    40000a0f <printf+0x97>
400009d7:	8d 46 04             	lea    0x4(%esi),%eax
400009da:	ba 0a 00 00 00       	mov    $0xa,%edx
400009df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009e2:	eb 0b                	jmp    400009ef <printf+0x77>
400009e4:	8d 46 04             	lea    0x4(%esi),%eax
400009e7:	ba 10 00 00 00       	mov    $0x10,%edx
400009ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009ef:	8b 06                	mov    (%esi),%eax
400009f1:	e8 b7 fe ff ff       	call   400008ad <putn>
400009f6:	8b 75 e4             	mov    -0x1c(%ebp),%esi
400009f9:	01 c3                	add    %eax,%ebx
400009fb:	eb 4e                	jmp    40000a4b <printf+0xd3>
400009fd:	8d 46 04             	lea    0x4(%esi),%eax
40000a00:	83 ec 0c             	sub    $0xc,%esp
40000a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a06:	0f be 06             	movsbl (%esi),%eax
40000a09:	50                   	push   %eax
40000a0a:	e8 55 ff ff ff       	call   40000964 <putchar>
40000a0f:	01 c3                	add    %eax,%ebx
40000a11:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a14:	eb 32                	jmp    40000a48 <printf+0xd0>
40000a16:	83 ec 0c             	sub    $0xc,%esp
40000a19:	6a 25                	push   $0x25
40000a1b:	eb 24                	jmp    40000a41 <printf+0xc9>
40000a1d:	83 ec 0c             	sub    $0xc,%esp
40000a20:	6a 25                	push   $0x25
40000a22:	e8 3d ff ff ff       	call   40000964 <putchar>
40000a27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a2a:	0f be 07             	movsbl (%edi),%eax
40000a2d:	89 04 24             	mov    %eax,(%esp)
40000a30:	e8 2f ff ff ff       	call   40000964 <putchar>
40000a35:	03 45 e4             	add    -0x1c(%ebp),%eax
40000a38:	eb 0c                	jmp    40000a46 <printf+0xce>
40000a3a:	83 ec 0c             	sub    $0xc,%esp
40000a3d:	0f be c0             	movsbl %al,%eax
40000a40:	50                   	push   %eax
40000a41:	e8 1e ff ff ff       	call   40000964 <putchar>
40000a46:	01 c3                	add    %eax,%ebx
40000a48:	83 c4 10             	add    $0x10,%esp
40000a4b:	47                   	inc    %edi
40000a4c:	8a 07                	mov    (%edi),%al
40000a4e:	84 c0                	test   %al,%al
40000a50:	0f 85 38 ff ff ff    	jne    4000098e <printf+0x16>
40000a56:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000a59:	89 d8                	mov    %ebx,%eax
40000a5b:	5b                   	pop    %ebx
40000a5c:	5e                   	pop    %esi
40000a5d:	5f                   	pop    %edi
40000a5e:	5d                   	pop    %ebp
40000a5f:	c3                   	ret    

40000a60 <printrwerror>:
40000a60:	55                   	push   %ebp
40000a61:	89 e5                	mov    %esp,%ebp
40000a63:	83 ec 08             	sub    $0x8,%esp
40000a66:	83 fa 02             	cmp    $0x2,%edx
40000a69:	75 0a                	jne    40000a75 <printrwerror+0x15>
40000a6b:	52                   	push   %edx
40000a6c:	52                   	push   %edx
40000a6d:	50                   	push   %eax
40000a6e:	68 36 21 00 40       	push   $0x40002136
40000a73:	eb 2b                	jmp    40000aa0 <printrwerror+0x40>
40000a75:	83 fa 03             	cmp    $0x3,%edx
40000a78:	75 0a                	jne    40000a84 <printrwerror+0x24>
40000a7a:	51                   	push   %ecx
40000a7b:	51                   	push   %ecx
40000a7c:	50                   	push   %eax
40000a7d:	68 4e 21 00 40       	push   $0x4000214e
40000a82:	eb 1c                	jmp    40000aa0 <printrwerror+0x40>
40000a84:	83 fa 04             	cmp    $0x4,%edx
40000a87:	75 0a                	jne    40000a93 <printrwerror+0x33>
40000a89:	52                   	push   %edx
40000a8a:	52                   	push   %edx
40000a8b:	50                   	push   %eax
40000a8c:	68 69 21 00 40       	push   $0x40002169
40000a91:	eb 0d                	jmp    40000aa0 <printrwerror+0x40>
40000a93:	83 fa 05             	cmp    $0x5,%edx
40000a96:	75 10                	jne    40000aa8 <printrwerror+0x48>
40000a98:	51                   	push   %ecx
40000a99:	51                   	push   %ecx
40000a9a:	50                   	push   %eax
40000a9b:	68 93 21 00 40       	push   $0x40002193
40000aa0:	e8 d3 fe ff ff       	call   40000978 <printf>
40000aa5:	83 c4 10             	add    $0x10,%esp
40000aa8:	c9                   	leave  
40000aa9:	c3                   	ret    

40000aaa <fread>:
40000aaa:	55                   	push   %ebp
40000aab:	89 e5                	mov    %esp,%ebp
40000aad:	57                   	push   %edi
40000aae:	56                   	push   %esi
40000aaf:	53                   	push   %ebx
40000ab0:	83 ec 38             	sub    $0x38,%esp
40000ab3:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000ab6:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ab9:	8b 75 08             	mov    0x8(%ebp),%esi
40000abc:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000abf:	8b 45 10             	mov    0x10(%ebp),%eax
40000ac2:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000ac9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000acc:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000acf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000ad6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000add:	eb 2c                	jmp    40000b0b <fread+0x61>
40000adf:	e8 13 f8 ff ff       	call   400002f7 <yield>
40000ae4:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ae7:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000aea:	8b 45 10             	mov    0x10(%ebp),%eax
40000aed:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000af4:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000af7:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000afa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b01:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b08:	83 ec 0c             	sub    $0xc,%esp
40000b0b:	57                   	push   %edi
40000b0c:	e8 f3 06 00 00       	call   40001204 <syscall>
40000b11:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000b14:	83 c4 10             	add    $0x10,%esp
40000b17:	83 fb 01             	cmp    $0x1,%ebx
40000b1a:	74 c3                	je     40000adf <fread+0x35>
40000b1c:	89 f0                	mov    %esi,%eax
40000b1e:	89 da                	mov    %ebx,%edx
40000b20:	e8 3b ff ff ff       	call   40000a60 <printrwerror>
40000b25:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b28:	89 d8                	mov    %ebx,%eax
40000b2a:	5b                   	pop    %ebx
40000b2b:	5e                   	pop    %esi
40000b2c:	5f                   	pop    %edi
40000b2d:	5d                   	pop    %ebp
40000b2e:	c3                   	ret    

40000b2f <fgetc>:
40000b2f:	55                   	push   %ebp
40000b30:	89 e5                	mov    %esp,%ebp
40000b32:	83 ec 18             	sub    $0x18,%esp
40000b35:	8b 45 08             	mov    0x8(%ebp),%eax
40000b38:	e8 73 fa ff ff       	call   400005b0 <resolveHandle>
40000b3d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000b41:	85 c0                	test   %eax,%eax
40000b43:	74 10                	je     40000b55 <fgetc+0x26>
40000b45:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000b48:	51                   	push   %ecx
40000b49:	6a 01                	push   $0x1
40000b4b:	52                   	push   %edx
40000b4c:	50                   	push   %eax
40000b4d:	e8 58 ff ff ff       	call   40000aaa <fread>
40000b52:	83 c4 10             	add    $0x10,%esp
40000b55:	8a 45 f7             	mov    -0x9(%ebp),%al
40000b58:	c9                   	leave  
40000b59:	c3                   	ret    

40000b5a <getchar>:
40000b5a:	55                   	push   %ebp
40000b5b:	89 e5                	mov    %esp,%ebp
40000b5d:	83 ec 14             	sub    $0x14,%esp
40000b60:	6a 02                	push   $0x2
40000b62:	e8 c8 ff ff ff       	call   40000b2f <fgetc>
40000b67:	c9                   	leave  
40000b68:	c3                   	ret    

40000b69 <getc>:
40000b69:	55                   	push   %ebp
40000b6a:	89 e5                	mov    %esp,%ebp
40000b6c:	83 ec 08             	sub    $0x8,%esp
40000b6f:	c9                   	leave  
40000b70:	e9 ba ff ff ff       	jmp    40000b2f <fgetc>

40000b75 <fgets>:
40000b75:	55                   	push   %ebp
40000b76:	89 e5                	mov    %esp,%ebp
40000b78:	57                   	push   %edi
40000b79:	56                   	push   %esi
40000b7a:	53                   	push   %ebx
40000b7b:	83 ec 1c             	sub    $0x1c,%esp
40000b7e:	31 db                	xor    %ebx,%ebx
40000b80:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000b83:	8b 75 08             	mov    0x8(%ebp),%esi
40000b86:	8d 47 ff             	lea    -0x1(%edi),%eax
40000b89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b8c:	eb 16                	jmp    40000ba4 <fgets+0x2f>
40000b8e:	83 ec 0c             	sub    $0xc,%esp
40000b91:	ff 75 10             	pushl  0x10(%ebp)
40000b94:	e8 96 ff ff ff       	call   40000b2f <fgetc>
40000b99:	83 c4 10             	add    $0x10,%esp
40000b9c:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000b9f:	84 c0                	test   %al,%al
40000ba1:	74 0a                	je     40000bad <fgets+0x38>
40000ba3:	43                   	inc    %ebx
40000ba4:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000ba7:	7c e5                	jl     40000b8e <fgets+0x19>
40000ba9:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000bad:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bb0:	89 f0                	mov    %esi,%eax
40000bb2:	5b                   	pop    %ebx
40000bb3:	5e                   	pop    %esi
40000bb4:	5f                   	pop    %edi
40000bb5:	5d                   	pop    %ebp
40000bb6:	c3                   	ret    

40000bb7 <getln>:
40000bb7:	55                   	push   %ebp
40000bb8:	89 e5                	mov    %esp,%ebp
40000bba:	56                   	push   %esi
40000bbb:	53                   	push   %ebx
40000bbc:	31 db                	xor    %ebx,%ebx
40000bbe:	8b 75 08             	mov    0x8(%ebp),%esi
40000bc1:	eb 42                	jmp    40000c05 <getln+0x4e>
40000bc3:	3c 0a                	cmp    $0xa,%al
40000bc5:	75 0f                	jne    40000bd6 <getln+0x1f>
40000bc7:	83 ec 0c             	sub    $0xc,%esp
40000bca:	6a 0a                	push   $0xa
40000bcc:	e8 93 fd ff ff       	call   40000964 <putchar>
40000bd1:	83 c4 10             	add    $0x10,%esp
40000bd4:	eb 40                	jmp    40000c16 <getln+0x5f>
40000bd6:	3c 08                	cmp    $0x8,%al
40000bd8:	75 18                	jne    40000bf2 <getln+0x3b>
40000bda:	85 db                	test   %ebx,%ebx
40000bdc:	74 0e                	je     40000bec <getln+0x35>
40000bde:	83 ec 0c             	sub    $0xc,%esp
40000be1:	4b                   	dec    %ebx
40000be2:	6a 08                	push   $0x8
40000be4:	e8 7b fd ff ff       	call   40000964 <putchar>
40000be9:	83 c4 10             	add    $0x10,%esp
40000bec:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000bf0:	eb 13                	jmp    40000c05 <getln+0x4e>
40000bf2:	83 ec 0c             	sub    $0xc,%esp
40000bf5:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000bf8:	0f be c0             	movsbl %al,%eax
40000bfb:	50                   	push   %eax
40000bfc:	43                   	inc    %ebx
40000bfd:	e8 62 fd ff ff       	call   40000964 <putchar>
40000c02:	83 c4 10             	add    $0x10,%esp
40000c05:	83 ec 0c             	sub    $0xc,%esp
40000c08:	6a 02                	push   $0x2
40000c0a:	e8 20 ff ff ff       	call   40000b2f <fgetc>
40000c0f:	83 c4 10             	add    $0x10,%esp
40000c12:	84 c0                	test   %al,%al
40000c14:	75 ad                	jne    40000bc3 <getln+0xc>
40000c16:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c1a:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000c1d:	89 f0                	mov    %esi,%eax
40000c1f:	5b                   	pop    %ebx
40000c20:	5e                   	pop    %esi
40000c21:	5d                   	pop    %ebp
40000c22:	c3                   	ret    
	...

40000c24 <memset>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
#include "string.h"
40000c24:	55                   	push   %ebp
40000c25:	89 e5                	mov    %esp,%ebp
40000c27:	53                   	push   %ebx
40000c28:	8b 45 08             	mov    0x8(%ebp),%eax
40000c2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c2e:	8b 4d 10             	mov    0x10(%ebp),%ecx
 
40000c31:	89 c2                	mov    %eax,%edx
int main(int argc, char* args[])
{
40000c33:	eb 04                	jmp    40000c39 <memset+0x15>
    uint32_t index = 0;
40000c35:	88 1a                	mov    %bl,(%edx)
40000c37:	49                   	dec    %ecx
40000c38:	42                   	inc    %edx
#include "stdio.h"
#include "process.h"
#include "string.h"
 
int main(int argc, char* args[])
{
40000c39:	85 c9                	test   %ecx,%ecx
40000c3b:	75 f8                	jne    40000c35 <memset+0x11>
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40000c3d:	5b                   	pop    %ebx
40000c3e:	5d                   	pop    %ebp
40000c3f:	c3                   	ret    

40000c40 <memcpy>:

    	if(child[strlen(child)-1] == '/') {
40000c40:	55                   	push   %ebp
    	    putchar(0x11);
    	    putchar(0x31);
    	}

40000c41:	31 c9                	xor    %ecx,%ecx
    char child[512];


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
40000c43:	89 e5                	mov    %esp,%ebp
40000c45:	56                   	push   %esi
40000c46:	53                   	push   %ebx
40000c47:	8b 75 10             	mov    0x10(%ebp),%esi
40000c4a:	8b 45 08             	mov    0x8(%ebp),%eax
40000c4d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    	    putchar(0x11);
    	    putchar(0x31);
    	}

40000c50:	85 f6                	test   %esi,%esi
40000c52:	75 04                	jne    40000c58 <memcpy+0x18>
40000c54:	31 c0                	xor    %eax,%eax
40000c56:	eb 0a                	jmp    40000c62 <memcpy+0x22>
		printf("%s\n", child);

	    putchar(0x11);
40000c58:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000c5b:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000c5e:	41                   	inc    %ecx
    	    putchar(0x11);
    	    putchar(0x31);
    	}

		printf("%s\n", child);

40000c5f:	4e                   	dec    %esi
40000c60:	75 f6                	jne    40000c58 <memcpy+0x18>
	    putchar(0x11);
	    putchar(0x07);
    }

    return 0;
40000c62:	5b                   	pop    %ebx
40000c63:	5e                   	pop    %esi
40000c64:	5d                   	pop    %ebp
40000c65:	c3                   	ret    

40000c66 <memcmp>:
}
40000c66:	55                   	push   %ebp
40000c67:	83 c8 ff             	or     $0xffffffff,%eax
	    putchar(0x07);
    }

    return 0;
}
40000c6a:	89 e5                	mov    %esp,%ebp
40000c6c:	57                   	push   %edi
40000c6d:	56                   	push   %esi
40000c6e:	53                   	push   %ebx
40000c6f:	8b 75 08             	mov    0x8(%ebp),%esi
40000c72:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000c75:	8b 5d 10             	mov    0x10(%ebp),%ebx
40000c78:	85 f6                	test   %esi,%esi
40000c7a:	74 2c                	je     40000ca8 <memcmp+0x42>
40000c7c:	b8 01 00 00 00       	mov    $0x1,%eax
40000c81:	85 ff                	test   %edi,%edi
40000c83:	74 23                	je     40000ca8 <memcmp+0x42>
40000c85:	31 d2                	xor    %edx,%edx
40000c87:	85 db                	test   %ebx,%ebx
40000c89:	75 17                	jne    40000ca2 <memcmp+0x3c>
40000c8b:	eb 19                	jmp    40000ca6 <memcmp+0x40>
40000c8d:	8a 04 16             	mov    (%esi,%edx,1),%al
40000c90:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000c93:	38 c8                	cmp    %cl,%al
40000c95:	74 0a                	je     40000ca1 <memcmp+0x3b>
40000c97:	0f b6 c0             	movzbl %al,%eax
40000c9a:	0f b6 c9             	movzbl %cl,%ecx
40000c9d:	29 c8                	sub    %ecx,%eax
40000c9f:	eb 07                	jmp    40000ca8 <memcmp+0x42>
40000ca1:	42                   	inc    %edx
40000ca2:	39 da                	cmp    %ebx,%edx
40000ca4:	72 e7                	jb     40000c8d <memcmp+0x27>
40000ca6:	31 c0                	xor    %eax,%eax
40000ca8:	5b                   	pop    %ebx
40000ca9:	5e                   	pop    %esi
40000caa:	5f                   	pop    %edi
40000cab:	5d                   	pop    %ebp
40000cac:	c3                   	ret    

40000cad <strcmp>:
40000cad:	55                   	push   %ebp
40000cae:	31 c0                	xor    %eax,%eax
40000cb0:	89 e5                	mov    %esp,%ebp
40000cb2:	56                   	push   %esi
40000cb3:	53                   	push   %ebx
40000cb4:	31 db                	xor    %ebx,%ebx
40000cb6:	8b 55 08             	mov    0x8(%ebp),%edx
40000cb9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000cbc:	85 d2                	test   %edx,%edx
40000cbe:	75 03                	jne    40000cc3 <strcmp+0x16>
40000cc0:	eb 09                	jmp    40000ccb <strcmp+0x1e>
40000cc2:	40                   	inc    %eax
40000cc3:	89 c3                	mov    %eax,%ebx
40000cc5:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000cc9:	75 f7                	jne    40000cc2 <strcmp+0x15>
40000ccb:	31 c0                	xor    %eax,%eax
40000ccd:	31 f6                	xor    %esi,%esi
40000ccf:	85 c9                	test   %ecx,%ecx
40000cd1:	75 03                	jne    40000cd6 <strcmp+0x29>
40000cd3:	eb 09                	jmp    40000cde <strcmp+0x31>
40000cd5:	40                   	inc    %eax
40000cd6:	89 c6                	mov    %eax,%esi
40000cd8:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000cdc:	75 f7                	jne    40000cd5 <strcmp+0x28>
40000cde:	89 f0                	mov    %esi,%eax
40000ce0:	39 de                	cmp    %ebx,%esi
40000ce2:	7e 02                	jle    40000ce6 <strcmp+0x39>
40000ce4:	89 d8                	mov    %ebx,%eax
40000ce6:	40                   	inc    %eax
40000ce7:	50                   	push   %eax
40000ce8:	51                   	push   %ecx
40000ce9:	52                   	push   %edx
40000cea:	e8 77 ff ff ff       	call   40000c66 <memcmp>
40000cef:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000cf2:	5b                   	pop    %ebx
40000cf3:	5e                   	pop    %esi
40000cf4:	5d                   	pop    %ebp
40000cf5:	c3                   	ret    

40000cf6 <strlen>:
40000cf6:	55                   	push   %ebp
40000cf7:	31 d2                	xor    %edx,%edx
40000cf9:	89 e5                	mov    %esp,%ebp
40000cfb:	31 c0                	xor    %eax,%eax
40000cfd:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d00:	85 c9                	test   %ecx,%ecx
40000d02:	75 03                	jne    40000d07 <strlen+0x11>
40000d04:	eb 09                	jmp    40000d0f <strlen+0x19>
40000d06:	42                   	inc    %edx
40000d07:	89 d0                	mov    %edx,%eax
40000d09:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000d0d:	75 f7                	jne    40000d06 <strlen+0x10>
40000d0f:	5d                   	pop    %ebp
40000d10:	c3                   	ret    

40000d11 <strcpy>:
40000d11:	55                   	push   %ebp
40000d12:	31 d2                	xor    %edx,%edx
40000d14:	89 e5                	mov    %esp,%ebp
40000d16:	56                   	push   %esi
40000d17:	53                   	push   %ebx
40000d18:	31 c9                	xor    %ecx,%ecx
40000d1a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d1d:	8b 45 08             	mov    0x8(%ebp),%eax
40000d20:	85 db                	test   %ebx,%ebx
40000d22:	75 03                	jne    40000d27 <strcpy+0x16>
40000d24:	eb 09                	jmp    40000d2f <strcpy+0x1e>
40000d26:	42                   	inc    %edx
40000d27:	89 d1                	mov    %edx,%ecx
40000d29:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000d2d:	75 f7                	jne    40000d26 <strcpy+0x15>

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
    	    putchar(0x31);
    	}

40000d2f:	89 ce                	mov    %ecx,%esi
40000d31:	46                   	inc    %esi
40000d32:	74 0c                	je     40000d40 <strcpy+0x2f>
40000d34:	31 d2                	xor    %edx,%edx
		printf("%s\n", child);

	    putchar(0x11);
40000d36:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000d39:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000d3c:	42                   	inc    %edx
    	    putchar(0x11);
    	    putchar(0x31);
    	}

		printf("%s\n", child);

40000d3d:	4e                   	dec    %esi
40000d3e:	75 f6                	jne    40000d36 <strcpy+0x25>
40000d40:	5b                   	pop    %ebx
40000d41:	5e                   	pop    %esi
40000d42:	5d                   	pop    %ebp
40000d43:	c3                   	ret    

40000d44 <strtoknc>:
40000d44:	55                   	push   %ebp
40000d45:	31 c0                	xor    %eax,%eax
40000d47:	89 e5                	mov    %esp,%ebp
40000d49:	57                   	push   %edi
40000d4a:	56                   	push   %esi
40000d4b:	53                   	push   %ebx
40000d4c:	83 ec 04             	sub    $0x4,%esp
40000d4f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d52:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d55:	85 db                	test   %ebx,%ebx
40000d57:	75 06                	jne    40000d5f <strtoknc+0x1b>
40000d59:	e9 83 00 00 00       	jmp    40000de1 <strtoknc+0x9d>
40000d5e:	40                   	inc    %eax
40000d5f:	89 c7                	mov    %eax,%edi
40000d61:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000d65:	75 f7                	jne    40000d5e <strtoknc+0x1a>
40000d67:	85 c0                	test   %eax,%eax
40000d69:	74 76                	je     40000de1 <strtoknc+0x9d>
40000d6b:	85 c9                	test   %ecx,%ecx
40000d6d:	75 0b                	jne    40000d7a <strtoknc+0x36>
40000d6f:	83 3d 00 32 00 40 00 	cmpl   $0x0,0x40003200
40000d76:	75 08                	jne    40000d80 <strtoknc+0x3c>
40000d78:	eb 67                	jmp    40000de1 <strtoknc+0x9d>
40000d7a:	89 0d 00 32 00 40    	mov    %ecx,0x40003200
40000d80:	a1 00 32 00 40       	mov    0x40003200,%eax
40000d85:	31 c9                	xor    %ecx,%ecx
40000d87:	eb 0b                	jmp    40000d94 <strtoknc+0x50>
40000d89:	8a 10                	mov    (%eax),%dl
40000d8b:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000d8e:	75 03                	jne    40000d93 <strtoknc+0x4f>
40000d90:	40                   	inc    %eax
40000d91:	eb 05                	jmp    40000d98 <strtoknc+0x54>
40000d93:	41                   	inc    %ecx
40000d94:	39 f9                	cmp    %edi,%ecx
40000d96:	7c f1                	jl     40000d89 <strtoknc+0x45>
40000d98:	39 f9                	cmp    %edi,%ecx
40000d9a:	75 e9                	jne    40000d85 <strtoknc+0x41>
40000d9c:	a3 00 32 00 40       	mov    %eax,0x40003200
40000da1:	80 38 00             	cmpb   $0x0,(%eax)
40000da4:	75 28                	jne    40000dce <strtoknc+0x8a>
40000da6:	c7 05 00 32 00 40 00 	movl   $0x0,0x40003200
40000dad:	00 00 00 
40000db0:	eb 2f                	jmp    40000de1 <strtoknc+0x9d>
40000db2:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000db5:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000db8:	75 05                	jne    40000dbf <strtoknc+0x7b>
40000dba:	c6 06 00             	movb   $0x0,(%esi)
40000dbd:	eb 05                	jmp    40000dc4 <strtoknc+0x80>
40000dbf:	41                   	inc    %ecx
40000dc0:	39 f9                	cmp    %edi,%ecx
40000dc2:	7c ee                	jl     40000db2 <strtoknc+0x6e>
40000dc4:	ff 05 00 32 00 40    	incl   0x40003200
40000dca:	39 f9                	cmp    %edi,%ecx
40000dcc:	7c 15                	jl     40000de3 <strtoknc+0x9f>
40000dce:	8b 35 00 32 00 40    	mov    0x40003200,%esi
40000dd4:	8a 16                	mov    (%esi),%dl
40000dd6:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000dd9:	84 d2                	test   %dl,%dl
40000ddb:	74 06                	je     40000de3 <strtoknc+0x9f>
40000ddd:	31 c9                	xor    %ecx,%ecx
40000ddf:	eb df                	jmp    40000dc0 <strtoknc+0x7c>
40000de1:	31 c0                	xor    %eax,%eax
40000de3:	5a                   	pop    %edx
40000de4:	5b                   	pop    %ebx
40000de5:	5e                   	pop    %esi
40000de6:	5f                   	pop    %edi
40000de7:	5d                   	pop    %ebp
40000de8:	c3                   	ret    

40000de9 <strclone>:
40000de9:	55                   	push   %ebp
40000dea:	31 c0                	xor    %eax,%eax
40000dec:	89 e5                	mov    %esp,%ebp
40000dee:	56                   	push   %esi
40000def:	53                   	push   %ebx
40000df0:	31 d2                	xor    %edx,%edx
40000df2:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000df5:	85 db                	test   %ebx,%ebx
40000df7:	75 03                	jne    40000dfc <strclone+0x13>
40000df9:	eb 09                	jmp    40000e04 <strclone+0x1b>
40000dfb:	40                   	inc    %eax
40000dfc:	89 c2                	mov    %eax,%edx
40000dfe:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e02:	75 f7                	jne    40000dfb <strclone+0x12>
40000e04:	83 ec 0c             	sub    $0xc,%esp
40000e07:	42                   	inc    %edx
40000e08:	52                   	push   %edx
40000e09:	e8 af 01 00 00       	call   40000fbd <malloc>
40000e0e:	59                   	pop    %ecx
40000e0f:	89 c6                	mov    %eax,%esi
40000e11:	58                   	pop    %eax
40000e12:	53                   	push   %ebx
40000e13:	56                   	push   %esi
40000e14:	e8 f8 fe ff ff       	call   40000d11 <strcpy>
40000e19:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e1c:	89 f0                	mov    %esi,%eax
40000e1e:	5b                   	pop    %ebx
40000e1f:	5e                   	pop    %esi
40000e20:	5d                   	pop    %ebp
40000e21:	c3                   	ret    

40000e22 <strtok>:
40000e22:	55                   	push   %ebp
40000e23:	89 e5                	mov    %esp,%ebp
40000e25:	56                   	push   %esi
40000e26:	53                   	push   %ebx
40000e27:	8b 75 08             	mov    0x8(%ebp),%esi
40000e2a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e2d:	85 f6                	test   %esi,%esi
40000e2f:	74 2e                	je     40000e5f <strtok+0x3d>
40000e31:	a1 04 32 00 40       	mov    0x40003204,%eax
40000e36:	85 c0                	test   %eax,%eax
40000e38:	74 0c                	je     40000e46 <strtok+0x24>
40000e3a:	83 ec 0c             	sub    $0xc,%esp
40000e3d:	50                   	push   %eax
40000e3e:	e8 31 00 00 00       	call   40000e74 <free>
40000e43:	83 c4 10             	add    $0x10,%esp
40000e46:	83 ec 0c             	sub    $0xc,%esp
40000e49:	56                   	push   %esi
40000e4a:	e8 9a ff ff ff       	call   40000de9 <strclone>
40000e4f:	83 c4 10             	add    $0x10,%esp
40000e52:	a3 04 32 00 40       	mov    %eax,0x40003204
40000e57:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000e5a:	89 45 08             	mov    %eax,0x8(%ebp)
40000e5d:	eb 0a                	jmp    40000e69 <strtok+0x47>
40000e5f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000e62:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000e69:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e6c:	5b                   	pop    %ebx
40000e6d:	5e                   	pop    %esi
40000e6e:	5d                   	pop    %ebp
40000e6f:	e9 d0 fe ff ff       	jmp    40000d44 <strtoknc>

40000e74 <free>:
40000e74:	55                   	push   %ebp
40000e75:	89 e5                	mov    %esp,%ebp
40000e77:	57                   	push   %edi
40000e78:	56                   	push   %esi
40000e79:	53                   	push   %ebx
40000e7a:	83 ec 08             	sub    $0x8,%esp
40000e7d:	8b 15 0c 32 00 40    	mov    0x4000320c,%edx
40000e83:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000e86:	89 d0                	mov    %edx,%eax
40000e88:	e9 b8 00 00 00       	jmp    40000f45 <free+0xd1>
40000e8d:	3b 48 04             	cmp    0x4(%eax),%ecx
40000e90:	0f 85 ac 00 00 00    	jne    40000f42 <free+0xce>
40000e96:	31 c9                	xor    %ecx,%ecx
40000e98:	eb 23                	jmp    40000ebd <free+0x49>
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000e9a:	39 c2                	cmp    %eax,%edx
40000e9c:	75 1a                	jne    40000eb8 <free+0x44>
    	if(child[strlen(child)-1] == '/') {
40000e9e:	85 c9                	test   %ecx,%ecx
40000ea0:	8b 50 08             	mov    0x8(%eax),%edx
40000ea3:	75 0e                	jne    40000eb3 <free+0x3f>
    	    putchar(0x11);
40000ea5:	89 15 0c 32 00 40    	mov    %edx,0x4000320c
40000eab:	8b 0d 10 32 00 40    	mov    0x40003210,%ecx
40000eb1:	eb 10                	jmp    40000ec3 <free+0x4f>
    	    putchar(0x31);
    	}

40000eb3:	89 51 08             	mov    %edx,0x8(%ecx)
40000eb6:	eb f3                	jmp    40000eab <free+0x37>
		printf("%s\n", child);

	    putchar(0x11);
	    putchar(0x07);
    }
40000eb8:	89 d1                	mov    %edx,%ecx
40000eba:	8b 52 08             	mov    0x8(%edx),%edx
{
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40000ebd:	85 d2                	test   %edx,%edx
40000ebf:	75 d9                	jne    40000e9a <free+0x26>
40000ec1:	eb e8                	jmp    40000eab <free+0x37>
40000ec3:	89 ca                	mov    %ecx,%edx
40000ec5:	eb 6d                	jmp    40000f34 <free+0xc0>
40000ec7:	8b 5a 04             	mov    0x4(%edx),%ebx
40000eca:	8b 32                	mov    (%edx),%esi
40000ecc:	8b 78 04             	mov    0x4(%eax),%edi
40000ecf:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000ed2:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000ed5:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000ed8:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000edb:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000ede:	75 18                	jne    40000ef8 <free+0x84>
40000ee0:	89 58 04             	mov    %ebx,0x4(%eax)
40000ee3:	31 f6                	xor    %esi,%esi
40000ee5:	89 cb                	mov    %ecx,%ebx
40000ee7:	eb 09                	jmp    40000ef2 <free+0x7e>
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000ee9:	39 d3                	cmp    %edx,%ebx
40000eeb:	74 29                	je     40000f16 <free+0xa2>

		printf("%s\n", child);

	    putchar(0x11);
	    putchar(0x07);
    }
40000eed:	89 de                	mov    %ebx,%esi
40000eef:	8b 5b 08             	mov    0x8(%ebx),%ebx
{
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40000ef2:	85 db                	test   %ebx,%ebx
40000ef4:	75 f3                	jne    40000ee9 <free+0x75>
40000ef6:	eb cb                	jmp    40000ec3 <free+0x4f>
40000ef8:	8b 38                	mov    (%eax),%edi
40000efa:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000efd:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f00:	03 7d f0             	add    -0x10(%ebp),%edi
40000f03:	39 fb                	cmp    %edi,%ebx
40000f05:	75 2a                	jne    40000f31 <free+0xbd>
40000f07:	03 75 f0             	add    -0x10(%ebp),%esi
40000f0a:	89 cb                	mov    %ecx,%ebx
40000f0c:	89 30                	mov    %esi,(%eax)
40000f0e:	31 f6                	xor    %esi,%esi
40000f10:	eb 19                	jmp    40000f2b <free+0xb7>
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

40000f12:	39 d3                	cmp    %edx,%ebx
40000f14:	75 10                	jne    40000f26 <free+0xb2>
    	if(child[strlen(child)-1] == '/') {
40000f16:	85 f6                	test   %esi,%esi
40000f18:	8b 53 08             	mov    0x8(%ebx),%edx
40000f1b:	75 04                	jne    40000f21 <free+0xad>
    	    putchar(0x11);
40000f1d:	89 d1                	mov    %edx,%ecx
40000f1f:	eb a2                	jmp    40000ec3 <free+0x4f>
    	    putchar(0x31);
    	}

40000f21:	89 56 08             	mov    %edx,0x8(%esi)
40000f24:	eb 9d                	jmp    40000ec3 <free+0x4f>
		printf("%s\n", child);

	    putchar(0x11);
	    putchar(0x07);
    }
40000f26:	89 de                	mov    %ebx,%esi
40000f28:	8b 5b 08             	mov    0x8(%ebx),%ebx
{
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40000f2b:	85 db                	test   %ebx,%ebx
40000f2d:	75 e3                	jne    40000f12 <free+0x9e>
40000f2f:	eb 92                	jmp    40000ec3 <free+0x4f>
40000f31:	8b 52 08             	mov    0x8(%edx),%edx
40000f34:	85 d2                	test   %edx,%edx
40000f36:	75 8f                	jne    40000ec7 <free+0x53>

    return 0;
}
40000f38:	89 48 08             	mov    %ecx,0x8(%eax)
40000f3b:	a3 10 32 00 40       	mov    %eax,0x40003210
40000f40:	eb 0b                	jmp    40000f4d <free+0xd9>
40000f42:	8b 40 08             	mov    0x8(%eax),%eax
40000f45:	85 c0                	test   %eax,%eax
40000f47:	0f 85 40 ff ff ff    	jne    40000e8d <free+0x19>
40000f4d:	58                   	pop    %eax
40000f4e:	5a                   	pop    %edx
40000f4f:	5b                   	pop    %ebx
40000f50:	5e                   	pop    %esi
40000f51:	5f                   	pop    %edi
40000f52:	5d                   	pop    %ebp
40000f53:	c3                   	ret    

40000f54 <pop_unused_node>:
40000f54:	55                   	push   %ebp
40000f55:	89 e5                	mov    %esp,%ebp
40000f57:	53                   	push   %ebx
40000f58:	83 ec 04             	sub    $0x4,%esp
40000f5b:	a1 08 32 00 40       	mov    0x40003208,%eax
40000f60:	eb 45                	jmp    40000fa7 <pop_unused_node+0x53>
40000f62:	83 ec 0c             	sub    $0xc,%esp
40000f65:	6a 01                	push   $0x1
40000f67:	e8 5b 02 00 00       	call   400011c7 <vmm_alloc_cont>
40000f6c:	83 c4 0c             	add    $0xc,%esp
40000f6f:	89 c3                	mov    %eax,%ebx
40000f71:	68 00 10 00 00       	push   $0x1000
40000f76:	6a 00                	push   $0x0
40000f78:	50                   	push   %eax
40000f79:	e8 a6 fc ff ff       	call   40000c24 <memset>
40000f7e:	8b 15 08 32 00 40    	mov    0x40003208,%edx
40000f84:	8d 43 0c             	lea    0xc(%ebx),%eax
40000f87:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40000f8d:	83 c4 10             	add    $0x10,%esp

    return 0;
}
40000f90:	89 50 08             	mov    %edx,0x8(%eax)
40000f93:	89 c2                	mov    %eax,%edx
40000f95:	83 c0 0c             	add    $0xc,%eax
40000f98:	39 c8                	cmp    %ecx,%eax
40000f9a:	75 f4                	jne    40000f90 <pop_unused_node+0x3c>
40000f9c:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40000fa2:	a3 08 32 00 40       	mov    %eax,0x40003208
40000fa7:	85 c0                	test   %eax,%eax
40000fa9:	74 b7                	je     40000f62 <pop_unused_node+0xe>


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000fab:	8b 50 08             	mov    0x8(%eax),%edx
40000fae:	85 c0                	test   %eax,%eax


    while(getExecPathChild(index++, child)) {

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
40000fb0:	89 15 08 32 00 40    	mov    %edx,0x40003208
40000fb6:	74 aa                	je     40000f62 <pop_unused_node+0xe>
40000fb8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000fbb:	c9                   	leave  
40000fbc:	c3                   	ret    

40000fbd <malloc>:
40000fbd:	55                   	push   %ebp
40000fbe:	89 e5                	mov    %esp,%ebp
40000fc0:	57                   	push   %edi
40000fc1:	56                   	push   %esi
40000fc2:	53                   	push   %ebx
40000fc3:	83 ec 1c             	sub    $0x1c,%esp
40000fc6:	a1 10 32 00 40       	mov    0x40003210,%eax
40000fcb:	8b 75 08             	mov    0x8(%ebp),%esi
40000fce:	89 c3                	mov    %eax,%ebx
40000fd0:	eb 07                	jmp    40000fd9 <malloc+0x1c>
40000fd2:	39 33                	cmp    %esi,(%ebx)
40000fd4:	73 0c                	jae    40000fe2 <malloc+0x25>
40000fd6:	8b 5b 08             	mov    0x8(%ebx),%ebx
40000fd9:	85 db                	test   %ebx,%ebx
40000fdb:	75 f5                	jne    40000fd2 <malloc+0x15>
40000fdd:	e9 93 00 00 00       	jmp    40001075 <malloc+0xb8>
40000fe2:	8b 3b                	mov    (%ebx),%edi
40000fe4:	31 d2                	xor    %edx,%edx
40000fe6:	29 f7                	sub    %esi,%edi
40000fe8:	89 33                	mov    %esi,(%ebx)
40000fea:	eb 4b                	jmp    40001037 <malloc+0x7a>
40000fec:	e8 63 ff ff ff       	call   40000f54 <pop_unused_node>
40000ff1:	8b 13                	mov    (%ebx),%edx
40000ff3:	03 53 04             	add    0x4(%ebx),%edx
40000ff6:	29 f7                	sub    %esi,%edi
40000ff8:	89 50 04             	mov    %edx,0x4(%eax)

    return 0;
}
40000ffb:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001001:	89 50 08             	mov    %edx,0x8(%eax)
40001004:	89 38                	mov    %edi,(%eax)
    return 0;
}
40001006:	a3 10 32 00 40       	mov    %eax,0x40003210

    return 0;
}
4000100b:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001010:	89 43 08             	mov    %eax,0x8(%ebx)
40001013:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
40001019:	eb 4f                	jmp    4000106a <malloc+0xad>
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {

4000101b:	39 d8                	cmp    %ebx,%eax
4000101d:	75 13                	jne    40001032 <malloc+0x75>
    	if(child[strlen(child)-1] == '/') {
4000101f:	85 d2                	test   %edx,%edx
40001021:	8b 43 08             	mov    0x8(%ebx),%eax
40001024:	75 07                	jne    4000102d <malloc+0x70>
    	    putchar(0x11);
40001026:	a3 10 32 00 40       	mov    %eax,0x40003210
4000102b:	eb 0e                	jmp    4000103b <malloc+0x7e>
    	    putchar(0x31);
    	}

4000102d:	89 42 08             	mov    %eax,0x8(%edx)
40001030:	eb 09                	jmp    4000103b <malloc+0x7e>
		printf("%s\n", child);

	    putchar(0x11);
	    putchar(0x07);
    }
40001032:	89 c2                	mov    %eax,%edx
40001034:	8b 40 08             	mov    0x8(%eax),%eax
{
    uint32_t index = 0;
    char child[512];


    while(getExecPathChild(index++, child)) {
40001037:	85 c0                	test   %eax,%eax
40001039:	75 e0                	jne    4000101b <malloc+0x5e>

    return 0;
}
4000103b:	a1 0c 32 00 40       	mov    0x4000320c,%eax
40001040:	85 ff                	test   %edi,%edi

    return 0;
}
40001042:	89 43 08             	mov    %eax,0x8(%ebx)
40001045:	89 1d 0c 32 00 40    	mov    %ebx,0x4000320c
4000104b:	74 1d                	je     4000106a <malloc+0xad>
4000104d:	e8 02 ff ff ff       	call   40000f54 <pop_unused_node>
40001052:	8b 13                	mov    (%ebx),%edx
40001054:	03 53 04             	add    0x4(%ebx),%edx
40001057:	89 50 04             	mov    %edx,0x4(%eax)

    return 0;
}
4000105a:	8b 15 10 32 00 40    	mov    0x40003210,%edx
40001060:	89 50 08             	mov    %edx,0x8(%eax)
40001063:	89 38                	mov    %edi,(%eax)
    return 0;
}
40001065:	a3 10 32 00 40       	mov    %eax,0x40003210
4000106a:	8b 43 04             	mov    0x4(%ebx),%eax
4000106d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001070:	5b                   	pop    %ebx
40001071:	5e                   	pop    %esi
40001072:	5f                   	pop    %edi
40001073:	5d                   	pop    %ebp
40001074:	c3                   	ret    
40001075:	89 f0                	mov    %esi,%eax
40001077:	89 f7                	mov    %esi,%edi
40001079:	c1 ef 0c             	shr    $0xc,%edi
4000107c:	25 ff 0f 00 00       	and    $0xfff,%eax
40001081:	83 f8 01             	cmp    $0x1,%eax
40001084:	83 df ff             	sbb    $0xffffffff,%edi
40001087:	83 ec 0c             	sub    $0xc,%esp
4000108a:	57                   	push   %edi
4000108b:	e8 37 01 00 00       	call   400011c7 <vmm_alloc_cont>
40001090:	c1 e7 0c             	shl    $0xc,%edi
40001093:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001096:	e8 b9 fe ff ff       	call   40000f54 <pop_unused_node>
4000109b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000109e:	83 c4 10             	add    $0x10,%esp
400010a1:	89 c3                	mov    %eax,%ebx
400010a3:	89 50 04             	mov    %edx,0x4(%eax)
400010a6:	89 30                	mov    %esi,(%eax)
400010a8:	39 f7                	cmp    %esi,%edi
400010aa:	0f 86 5b ff ff ff    	jbe    4000100b <malloc+0x4e>
400010b0:	e9 37 ff ff ff       	jmp    40000fec <malloc+0x2f>

400010b5 <realloc>:
400010b5:	55                   	push   %ebp
400010b6:	89 e5                	mov    %esp,%ebp
400010b8:	56                   	push   %esi
400010b9:	53                   	push   %ebx
400010ba:	8b 1d 0c 32 00 40    	mov    0x4000320c,%ebx
400010c0:	8b 55 08             	mov    0x8(%ebp),%edx
400010c3:	8b 45 0c             	mov    0xc(%ebp),%eax
400010c6:	eb 3e                	jmp    40001106 <realloc+0x51>
400010c8:	3b 53 04             	cmp    0x4(%ebx),%edx
400010cb:	75 36                	jne    40001103 <realloc+0x4e>
400010cd:	85 c0                	test   %eax,%eax
400010cf:	75 0b                	jne    400010dc <realloc+0x27>
400010d1:	52                   	push   %edx
400010d2:	31 f6                	xor    %esi,%esi
400010d4:	e8 9b fd ff ff       	call   40000e74 <free>
400010d9:	5b                   	pop    %ebx
400010da:	eb 30                	jmp    4000110c <realloc+0x57>
400010dc:	83 ec 0c             	sub    $0xc,%esp
400010df:	50                   	push   %eax
400010e0:	e8 d8 fe ff ff       	call   40000fbd <malloc>
400010e5:	83 c4 0c             	add    $0xc,%esp
400010e8:	89 c6                	mov    %eax,%esi
400010ea:	ff 33                	pushl  (%ebx)
400010ec:	ff 73 04             	pushl  0x4(%ebx)
400010ef:	50                   	push   %eax
400010f0:	e8 4b fb ff ff       	call   40000c40 <memcpy>
400010f5:	59                   	pop    %ecx
400010f6:	ff 73 04             	pushl  0x4(%ebx)
400010f9:	e8 76 fd ff ff       	call   40000e74 <free>
400010fe:	83 c4 10             	add    $0x10,%esp
40001101:	eb 09                	jmp    4000110c <realloc+0x57>
40001103:	8b 5b 08             	mov    0x8(%ebx),%ebx
40001106:	85 db                	test   %ebx,%ebx
40001108:	75 be                	jne    400010c8 <realloc+0x13>
4000110a:	31 f6                	xor    %esi,%esi
4000110c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000110f:	89 f0                	mov    %esi,%eax
40001111:	5b                   	pop    %ebx
40001112:	5e                   	pop    %esi
40001113:	5d                   	pop    %ebp
40001114:	c3                   	ret    

40001115 <calloc>:
40001115:	55                   	push   %ebp
40001116:	89 e5                	mov    %esp,%ebp
40001118:	56                   	push   %esi
40001119:	53                   	push   %ebx
4000111a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
4000111d:	83 ec 0c             	sub    $0xc,%esp
40001120:	0f af 5d 08          	imul   0x8(%ebp),%ebx
40001124:	53                   	push   %ebx
40001125:	e8 93 fe ff ff       	call   40000fbd <malloc>
4000112a:	83 c4 10             	add    $0x10,%esp
4000112d:	89 c6                	mov    %eax,%esi
4000112f:	85 c0                	test   %eax,%eax
40001131:	74 0d                	je     40001140 <calloc+0x2b>
40001133:	50                   	push   %eax
40001134:	53                   	push   %ebx
40001135:	6a 00                	push   $0x0
40001137:	56                   	push   %esi
40001138:	e8 e7 fa ff ff       	call   40000c24 <memset>
4000113d:	83 c4 10             	add    $0x10,%esp
40001140:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001143:	89 f0                	mov    %esi,%eax
40001145:	5b                   	pop    %ebx
40001146:	5e                   	pop    %esi
40001147:	5d                   	pop    %ebp
40001148:	c3                   	ret    
40001149:	00 00                	add    %al,(%eax)
	...

4000114c <print_memstat>:
}
4000114c:	55                   	push   %ebp
4000114d:	89 e5                	mov    %esp,%ebp
4000114f:	83 ec 34             	sub    $0x34,%esp
40001152:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001155:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
4000115c:	50                   	push   %eax
4000115d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001164:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000116b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001172:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001179:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40001180:	e8 7f 00 00 00       	call   40001204 <syscall>
40001185:	83 c4 10             	add    $0x10,%esp
40001188:	c9                   	leave  
40001189:	c3                   	ret    

4000118a <vmm_free>:

    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
    	    putchar(0x31);
    	}

4000118a:	55                   	push   %ebp
4000118b:	89 e5                	mov    %esp,%ebp
4000118d:	83 ec 34             	sub    $0x34,%esp
	    putchar(0x11);
	    putchar(0x07);
    }

    return 0;
}
40001190:	8b 45 08             	mov    0x8(%ebp),%eax
40001193:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000119a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000119d:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011a0:	50                   	push   %eax
	    putchar(0x11);
	    putchar(0x07);
    }

    return 0;
}
400011a1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400011bd:	e8 42 00 00 00       	call   40001204 <syscall>
400011c2:	83 c4 10             	add    $0x10,%esp
400011c5:	c9                   	leave  
400011c6:	c3                   	ret    

400011c7 <vmm_alloc_cont>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
400011c7:	55                   	push   %ebp
400011c8:	89 e5                	mov    %esp,%ebp
400011ca:	83 ec 34             	sub    $0x34,%esp
int main(int argc, char* args[])
{
    uint32_t index = 0;
    char child[512];


400011cd:	8b 45 08             	mov    0x8(%ebp),%eax
400011d0:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400011d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(getExecPathChild(index++, child)) {

400011da:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011dd:	50                   	push   %eax
int main(int argc, char* args[])
{
    uint32_t index = 0;
    char child[512];


400011de:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(getExecPathChild(index++, child)) {

400011fa:	e8 05 00 00 00       	call   40001204 <syscall>
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
    	    putchar(0x31);
400011ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001202:	c9                   	leave  
40001203:	c3                   	ret    

40001204 <syscall>:
#include "stdint.h"
#include "stdio.h"
#include "process.h"
40001204:	55                   	push   %ebp
40001205:	89 e5                	mov    %esp,%ebp
40001207:	57                   	push   %edi
40001208:	56                   	push   %esi
40001209:	53                   	push   %ebx
4000120a:	83 ec 10             	sub    $0x10,%esp
#include "string.h"
4000120d:	8b 55 08             	mov    0x8(%ebp),%edx
40001210:	8b 45 08             	mov    0x8(%ebp),%eax
40001213:	8b 72 0c             	mov    0xc(%edx),%esi
40001216:	8b 00                	mov    (%eax),%eax
40001218:	89 75 e4             	mov    %esi,-0x1c(%ebp)
4000121b:	8b 5a 04             	mov    0x4(%edx),%ebx
4000121e:	8b 4a 08             	mov    0x8(%edx),%ecx
40001221:	8b 72 10             	mov    0x10(%edx),%esi
40001224:	8b 7a 14             	mov    0x14(%edx),%edi
40001227:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000122a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
4000122d:	cd 30                	int    $0x30
4000122f:	89 55 e8             	mov    %edx,-0x18(%ebp)
40001232:	8b 55 08             	mov    0x8(%ebp),%edx
40001235:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001238:	89 02                	mov    %eax,(%edx)
4000123a:	8b 45 e8             	mov    -0x18(%ebp),%eax
4000123d:	89 5a 04             	mov    %ebx,0x4(%edx)
40001240:	89 4a 08             	mov    %ecx,0x8(%edx)
40001243:	89 42 0c             	mov    %eax,0xc(%edx)
40001246:	89 72 10             	mov    %esi,0x10(%edx)
40001249:	89 7a 14             	mov    %edi,0x14(%edx)
    	if(child[strlen(child)-1] == '/') {
    	    putchar(0x11);
    	    putchar(0x31);
    	}

		printf("%s\n", child);
4000124c:	83 c4 10             	add    $0x10,%esp
4000124f:	5b                   	pop    %ebx
40001250:	5e                   	pop    %esi
40001251:	5f                   	pop    %edi
40001252:	5d                   	pop    %ebp
40001253:	c3                   	ret    
