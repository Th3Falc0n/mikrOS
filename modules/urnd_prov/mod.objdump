
../../initrfs/ibin/urnd_prov:     file format elf32-i386
../../initrfs/ibin/urnd_prov
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400004f5

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x000012cc memsz 0x000012cc flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x000011da memsz 0x00002214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012cc  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       00000050  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  40003050  40003050  00004050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000214  40004000  40004000  000041da  2**2
                  ALLOC
  5 .stab         00004a4c  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008c28  2**0
                  CONTENTS, READONLY
  7 .stabstr      0000191b  00000000  00000000  00008ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
40003050 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 urnd_prov.c
40000000 l     F .text	0000007a get_next
00000000 l    df *ABS*	00000000 process.c
40004000 l     O .bss	00000200 irq_handlers
40003038 l     O .rodata	00000018 C.7.1020
40000567 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
40000628 l     F .text	00000047 resolveHandle
40000ad8 l     F .text	0000004a printrwerror
40000925 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000fcc l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
400002eb g     F .text	0000003d getExecPath
400009dc g     F .text	00000014 putchar
40000d89 g     F .text	00000033 strcpy
4000036e g     F .text	0000003e yield
400009f0 g     F .text	000000e8 printf
4000127c g     F .text	00000050 syscall
40000bed g     F .text	00000042 fgets
40000be1 g     F .text	0000000c getc
40000cb8 g     F .text	00000026 memcpy
40000913 g     F .text	00000012 puts
400003ac g     F .text	0000003d pexists
40001035 g     F .text	000000f8 malloc
40000441 g     F .text	0000003d fetch_rpc_data
40000dbc g     F .text	000000a5 strtoknc
40000281 g     F .text	0000003d changeExecPath
40004210 g     O .bss	00000004 first_free
4000020f g     F .text	00000037 dexec
400007c2 g     F .text	00000012 setstdout
40002000 g     O .data	00000004 m_z
4000118d g     F .text	00000034 calloc
4000123f g     F .text	0000003d vmm_alloc_cont
4000019d g     F .text	0000003b exec
400004f5 g     F .text	00000072 _start
4000112d g     F .text	00000060 realloc
400004b8 g     F .text	0000003d set_rpc_handler
40000e9a g     F .text	00000052 strtok
40000cde g     F .text	00000047 memcmp
400001d8 g     F .text	00000037 sexec
40002004 g     O .data	00000004 m_w
40000b22 g     F .text	00000085 fread
40004208 g     O .bss	00000004 first_unused
40000726 g     F .text	0000003c fopen
40000c9c g     F .text	0000001c memset
4000007a g     F .text	000000af main
400006e9 g     F .text	0000003d fclose
40000bd2 g     F .text	0000000f getchar
40000c2f g     F .text	0000006c getln
40004204 g     O .bss	00000004 fr
400006ac g     F .text	0000003d favailable
400009c9 g     F .text	00000013 putc
40000d25 g     F .text	00000049 strcmp
40000ba7 g     F .text	0000002b fgetc
40000246 g     F .text	0000003b getPathChild
40004200 g     O .bss	00000004 sp
400002be g     F .text	0000002d cd
4000420c g     O .bss	00000004 first_used
40000964 g     F .text	00000065 fputc
40000812 g     F .text	00000093 fwrite
400007b0 g     F .text	00000012 setstdin
40000e61 g     F .text	00000039 strclone
40000328 g     F .text	00000046 exit
400003e9 g     F .text	00000058 register_irq_handler
40000762 g     F .text	0000003c fopenpmhandle
40001202 g     F .text	0000003d vmm_free
4000012c g     F .text	00000071 printFilesystemError
40000d6e g     F .text	0000001b strlen
400007d4 g     F .text	0000003e getLastVFSErr
400008a5 g     F .text	0000006e fputs
4000066f g     F .text	0000003d fmkfifo
4000047e g     F .text	0000003a call_rpc
4000079e g     F .text	00000012 setstderr
400011c4 g     F .text	0000003e print_memstat
40000eec g     F .text	000000e0 free



Disassembly of section .text:

40000000 <get_next>:
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000003:	a1 00 20 00 40       	mov    0x40002000,%eax
40000008:	0f b7 d0             	movzwl %ax,%edx
4000000b:	89 d0                	mov    %edx,%eax
4000000d:	c1 e0 03             	shl    $0x3,%eax
40000010:	01 d0                	add    %edx,%eax
40000012:	c1 e0 06             	shl    $0x6,%eax
40000015:	01 d0                	add    %edx,%eax
40000017:	01 c0                	add    %eax,%eax
40000019:	01 d0                	add    %edx,%eax
4000001b:	c1 e0 02             	shl    $0x2,%eax
4000001e:	01 d0                	add    %edx,%eax
40000020:	c1 e0 03             	shl    $0x3,%eax
40000023:	8d 14 10             	lea    (%eax,%edx,1),%edx
40000026:	a1 00 20 00 40       	mov    0x40002000,%eax
4000002b:	c1 e8 10             	shr    $0x10,%eax
4000002e:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000031:	a3 00 20 00 40       	mov    %eax,0x40002000
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000036:	a1 04 20 00 40       	mov    0x40002004,%eax
4000003b:	0f b7 d0             	movzwl %ax,%edx
4000003e:	89 d0                	mov    %edx,%eax
40000040:	c1 e0 02             	shl    $0x2,%eax
40000043:	01 d0                	add    %edx,%eax
40000045:	89 c2                	mov    %eax,%edx
40000047:	c1 e2 04             	shl    $0x4,%edx
4000004a:	29 c2                	sub    %eax,%edx
4000004c:	89 d0                	mov    %edx,%eax
4000004e:	c1 e0 04             	shl    $0x4,%eax
40000051:	29 d0                	sub    %edx,%eax
40000053:	c1 e0 04             	shl    $0x4,%eax
40000056:	8b 15 04 20 00 40    	mov    0x40002004,%edx
4000005c:	c1 ea 10             	shr    $0x10,%edx
4000005f:	01 d0                	add    %edx,%eax
40000061:	a3 04 20 00 40       	mov    %eax,0x40002004
    return (m_z << 16) + m_w;
40000066:	a1 00 20 00 40       	mov    0x40002000,%eax
4000006b:	89 c2                	mov    %eax,%edx
4000006d:	c1 e2 10             	shl    $0x10,%edx
40000070:	a1 04 20 00 40       	mov    0x40002004,%eax
40000075:	8d 04 02             	lea    (%edx,%eax,1),%eax
}
40000078:	5d                   	pop    %ebp
40000079:	c3                   	ret    

4000007a <main>:

int main(int argc, char* args[])
{
4000007a:	8d 4c 24 04          	lea    0x4(%esp),%ecx
4000007e:	83 e4 f0             	and    $0xfffffff0,%esp
40000081:	ff 71 fc             	pushl  -0x4(%ecx)
40000084:	55                   	push   %ebp
40000085:	89 e5                	mov    %esp,%ebp
40000087:	53                   	push   %ebx
40000088:	51                   	push   %ecx
40000089:	83 ec 20             	sub    $0x20,%esp
    HANDLE out = fmkfifo("/dev/urandom");
4000008c:	83 ec 0c             	sub    $0xc,%esp
4000008f:	68 00 30 00 40       	push   $0x40003000
40000094:	e8 d6 05 00 00       	call   4000066f <fmkfifo>
40000099:	83 c4 10             	add    $0x10,%esp
4000009c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
4000009f:	83 ec 08             	sub    $0x8,%esp
400000a2:	6a 02                	push   $0x2
400000a4:	68 0d 30 00 40       	push   $0x4000300d
400000a9:	e8 78 06 00 00       	call   40000726 <fopen>
400000ae:	83 c4 10             	add    $0x10,%esp
400000b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400000b4:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
400000b8:	83 ec 04             	sub    $0x4,%esp
400000bb:	6a 01                	push   $0x1
400000bd:	8d 45 e7             	lea    -0x19(%ebp),%eax
400000c0:	50                   	push   %eax
400000c1:	ff 75 ec             	pushl  -0x14(%ebp)
400000c4:	e8 49 07 00 00       	call   40000812 <fwrite>
400000c9:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
400000cc:	83 ec 0c             	sub    $0xc,%esp
400000cf:	ff 75 ec             	pushl  -0x14(%ebp)
400000d2:	e8 12 06 00 00       	call   400006e9 <fclose>
400000d7:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
400000da:	83 ec 0c             	sub    $0xc,%esp
400000dd:	68 00 02 00 00       	push   $0x200
400000e2:	e8 4e 0f 00 00       	call   40001035 <malloc>
400000e7:	83 c4 10             	add    $0x10,%esp
400000ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(1) {
        for(int i = 0; i < 128; i++) {
400000ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400000f4:	eb 15                	jmp    4000010b <main+0x91>
            rnd[i] = get_next();
400000f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400000f9:	c1 e0 02             	shl    $0x2,%eax
400000fc:	89 c3                	mov    %eax,%ebx
400000fe:	03 5d f0             	add    -0x10(%ebp),%ebx
40000101:	e8 fa fe ff ff       	call   40000000 <get_next>
40000106:	89 03                	mov    %eax,(%ebx)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000108:	ff 45 f4             	incl   -0xc(%ebp)
4000010b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
4000010f:	7e e5                	jle    400000f6 <main+0x7c>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000111:	83 ec 04             	sub    $0x4,%esp
40000114:	68 00 02 00 00       	push   $0x200
40000119:	ff 75 f0             	pushl  -0x10(%ebp)
4000011c:	ff 75 e8             	pushl  -0x18(%ebp)
4000011f:	e8 ee 06 00 00       	call   40000812 <fwrite>
40000124:	83 c4 10             	add    $0x10,%esp
    }
40000127:	eb c4                	jmp    400000ed <main+0x73>
40000129:	00 00                	add    %al,(%eax)
	...

4000012c <printFilesystemError>:
4000012c:	55                   	push   %ebp
4000012d:	89 e5                	mov    %esp,%ebp
4000012f:	83 ec 08             	sub    $0x8,%esp
40000132:	8b 55 0c             	mov    0xc(%ebp),%edx
40000135:	8b 45 08             	mov    0x8(%ebp),%eax
40000138:	83 fa 05             	cmp    $0x5,%edx
4000013b:	77 43                	ja     40000180 <printFilesystemError+0x54>
4000013d:	ff 24 95 20 30 00 40 	jmp    *0x40003020(,%edx,4)
40000144:	52                   	push   %edx
40000145:	52                   	push   %edx
40000146:	50                   	push   %eax
40000147:	68 50 30 00 40       	push   $0x40003050
4000014c:	eb 3a                	jmp    40000188 <printFilesystemError+0x5c>
4000014e:	51                   	push   %ecx
4000014f:	51                   	push   %ecx
40000150:	50                   	push   %eax
40000151:	68 62 30 00 40       	push   $0x40003062
40000156:	eb 30                	jmp    40000188 <printFilesystemError+0x5c>
40000158:	52                   	push   %edx
40000159:	52                   	push   %edx
4000015a:	50                   	push   %eax
4000015b:	68 81 30 00 40       	push   $0x40003081
40000160:	eb 26                	jmp    40000188 <printFilesystemError+0x5c>
40000162:	51                   	push   %ecx
40000163:	51                   	push   %ecx
40000164:	50                   	push   %eax
40000165:	68 ab 30 00 40       	push   $0x400030ab
4000016a:	eb 1c                	jmp    40000188 <printFilesystemError+0x5c>
4000016c:	52                   	push   %edx
4000016d:	52                   	push   %edx
4000016e:	50                   	push   %eax
4000016f:	68 c0 30 00 40       	push   $0x400030c0
40000174:	eb 12                	jmp    40000188 <printFilesystemError+0x5c>
40000176:	51                   	push   %ecx
40000177:	51                   	push   %ecx
40000178:	50                   	push   %eax
40000179:	68 fb 30 00 40       	push   $0x400030fb
4000017e:	eb 08                	jmp    40000188 <printFilesystemError+0x5c>
40000180:	52                   	push   %edx
40000181:	52                   	push   %edx
40000182:	50                   	push   %eax
40000183:	68 0e 31 00 40       	push   $0x4000310e
40000188:	e8 63 08 00 00       	call   400009f0 <printf>
4000018d:	c7 45 08 2b 31 00 40 	movl   $0x4000312b,0x8(%ebp)
40000194:	83 c4 10             	add    $0x10,%esp
40000197:	c9                   	leave  
40000198:	e9 53 08 00 00       	jmp    400009f0 <printf>

4000019d <exec>:
4000019d:	55                   	push   %ebp
4000019e:	89 e5                	mov    %esp,%ebp
400001a0:	83 ec 34             	sub    $0x34,%esp
400001a3:	8b 45 08             	mov    0x8(%ebp),%eax
400001a6:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
400001ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001b0:	8b 45 0c             	mov    0xc(%ebp),%eax
400001b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
400001b6:	8b 45 10             	mov    0x10(%ebp),%eax
400001b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
400001bc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001bf:	50                   	push   %eax
400001c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400001ce:	e8 a9 10 00 00       	call   4000127c <syscall>
400001d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400001d6:	c9                   	leave  
400001d7:	c3                   	ret    

400001d8 <sexec>:
400001d8:	55                   	push   %ebp
400001d9:	89 e5                	mov    %esp,%ebp
400001db:	56                   	push   %esi
400001dc:	53                   	push   %ebx
400001dd:	53                   	push   %ebx
400001de:	6a 01                	push   $0x1
400001e0:	8b 75 08             	mov    0x8(%ebp),%esi
400001e3:	ff 75 0c             	pushl  0xc(%ebp)
400001e6:	56                   	push   %esi
400001e7:	e8 b1 ff ff ff       	call   4000019d <exec>
400001ec:	83 c4 10             	add    $0x10,%esp
400001ef:	89 c3                	mov    %eax,%ebx
400001f1:	85 c0                	test   %eax,%eax
400001f3:	75 11                	jne    40000206 <sexec+0x2e>
400001f5:	e8 da 05 00 00       	call   400007d4 <getLastVFSErr>
400001fa:	51                   	push   %ecx
400001fb:	51                   	push   %ecx
400001fc:	50                   	push   %eax
400001fd:	56                   	push   %esi
400001fe:	e8 29 ff ff ff       	call   4000012c <printFilesystemError>
40000203:	83 c4 10             	add    $0x10,%esp
40000206:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000209:	89 d8                	mov    %ebx,%eax
4000020b:	5b                   	pop    %ebx
4000020c:	5e                   	pop    %esi
4000020d:	5d                   	pop    %ebp
4000020e:	c3                   	ret    

4000020f <dexec>:
4000020f:	55                   	push   %ebp
40000210:	89 e5                	mov    %esp,%ebp
40000212:	56                   	push   %esi
40000213:	53                   	push   %ebx
40000214:	51                   	push   %ecx
40000215:	6a 00                	push   $0x0
40000217:	8b 75 08             	mov    0x8(%ebp),%esi
4000021a:	ff 75 0c             	pushl  0xc(%ebp)
4000021d:	56                   	push   %esi
4000021e:	e8 7a ff ff ff       	call   4000019d <exec>
40000223:	83 c4 10             	add    $0x10,%esp
40000226:	89 c3                	mov    %eax,%ebx
40000228:	85 c0                	test   %eax,%eax
4000022a:	75 11                	jne    4000023d <dexec+0x2e>
4000022c:	e8 a3 05 00 00       	call   400007d4 <getLastVFSErr>
40000231:	52                   	push   %edx
40000232:	52                   	push   %edx
40000233:	50                   	push   %eax
40000234:	56                   	push   %esi
40000235:	e8 f2 fe ff ff       	call   4000012c <printFilesystemError>
4000023a:	83 c4 10             	add    $0x10,%esp
4000023d:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000240:	89 d8                	mov    %ebx,%eax
40000242:	5b                   	pop    %ebx
40000243:	5e                   	pop    %esi
40000244:	5d                   	pop    %ebp
40000245:	c3                   	ret    

40000246 <getPathChild>:
40000246:	55                   	push   %ebp
40000247:	89 e5                	mov    %esp,%ebp
40000249:	83 ec 34             	sub    $0x34,%esp
4000024c:	8b 45 08             	mov    0x8(%ebp),%eax
4000024f:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
40000256:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000259:	8b 45 0c             	mov    0xc(%ebp),%eax
4000025c:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000025f:	8b 45 10             	mov    0x10(%ebp),%eax
40000262:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000265:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000268:	50                   	push   %eax
40000269:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000270:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000277:	e8 00 10 00 00       	call   4000127c <syscall>
4000027c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000027f:	c9                   	leave  
40000280:	c3                   	ret    

40000281 <changeExecPath>:
40000281:	55                   	push   %ebp
40000282:	89 e5                	mov    %esp,%ebp
40000284:	83 ec 34             	sub    $0x34,%esp
40000287:	8b 45 08             	mov    0x8(%ebp),%eax
4000028a:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
40000291:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000294:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000297:	50                   	push   %eax
40000298:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000029f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002b4:	e8 c3 0f 00 00       	call   4000127c <syscall>
400002b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002bc:	c9                   	leave  
400002bd:	c3                   	ret    

400002be <cd>:
400002be:	55                   	push   %ebp
400002bf:	89 e5                	mov    %esp,%ebp
400002c1:	53                   	push   %ebx
400002c2:	83 ec 10             	sub    $0x10,%esp
400002c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
400002c8:	53                   	push   %ebx
400002c9:	e8 b3 ff ff ff       	call   40000281 <changeExecPath>
400002ce:	83 c4 10             	add    $0x10,%esp
400002d1:	85 c0                	test   %eax,%eax
400002d3:	75 11                	jne    400002e6 <cd+0x28>
400002d5:	e8 fa 04 00 00       	call   400007d4 <getLastVFSErr>
400002da:	52                   	push   %edx
400002db:	52                   	push   %edx
400002dc:	50                   	push   %eax
400002dd:	53                   	push   %ebx
400002de:	e8 49 fe ff ff       	call   4000012c <printFilesystemError>
400002e3:	83 c4 10             	add    $0x10,%esp
400002e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400002e9:	c9                   	leave  
400002ea:	c3                   	ret    

400002eb <getExecPath>:
400002eb:	55                   	push   %ebp
400002ec:	89 e5                	mov    %esp,%ebp
400002ee:	83 ec 34             	sub    $0x34,%esp
400002f1:	8b 45 08             	mov    0x8(%ebp),%eax
400002f4:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400002fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002fe:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000301:	50                   	push   %eax
40000302:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000309:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000310:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000317:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000031e:	e8 59 0f 00 00       	call   4000127c <syscall>
40000323:	83 c4 10             	add    $0x10,%esp
40000326:	c9                   	leave  
40000327:	c3                   	ret    

40000328 <exit>:
40000328:	55                   	push   %ebp
40000329:	89 e5                	mov    %esp,%ebp
4000032b:	83 ec 34             	sub    $0x34,%esp
4000032e:	8b 45 08             	mov    0x8(%ebp),%eax
40000331:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000338:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000033b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000033e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000345:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000034c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000035a:	50                   	push   %eax
4000035b:	e8 1c 0f 00 00       	call   4000127c <syscall>
40000360:	c7 04 24 16 31 00 40 	movl   $0x40003116,(%esp)
40000367:	e8 84 06 00 00       	call   400009f0 <printf>
4000036c:	eb f2                	jmp    40000360 <exit+0x38>

4000036e <yield>:
4000036e:	55                   	push   %ebp
4000036f:	89 e5                	mov    %esp,%ebp
40000371:	83 ec 34             	sub    $0x34,%esp
40000374:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000377:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
4000037e:	50                   	push   %eax
4000037f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000386:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000038d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000394:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000039b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003a2:	e8 d5 0e 00 00       	call   4000127c <syscall>
400003a7:	83 c4 10             	add    $0x10,%esp
400003aa:	c9                   	leave  
400003ab:	c3                   	ret    

400003ac <pexists>:
int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400003ac:	55                   	push   %ebp
400003ad:	89 e5                	mov    %esp,%ebp
400003af:	83 ec 34             	sub    $0x34,%esp
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
400003b2:	8b 45 08             	mov    0x8(%ebp),%eax
400003b5:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
400003bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400003bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003c2:	50                   	push   %eax
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
400003c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400003df:	e8 98 0e 00 00       	call   4000127c <syscall>
    }

    return 0;
400003e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003e7:	c9                   	leave  
400003e8:	c3                   	ret    

400003e9 <register_irq_handler>:
400003e9:	55                   	push   %ebp
400003ea:	89 e5                	mov    %esp,%ebp
400003ec:	53                   	push   %ebx
400003ed:	83 ec 30             	sub    $0x30,%esp
400003f0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003f3:	8b 5d 08             	mov    0x8(%ebp),%ebx
400003f6:	50                   	push   %eax
400003f7:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400003fe:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000401:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000408:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000040f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000041d:	e8 5a 0e 00 00       	call   4000127c <syscall>
40000422:	83 c4 10             	add    $0x10,%esp
40000425:	31 c0                	xor    %eax,%eax
40000427:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
4000042b:	74 0f                	je     4000043c <register_irq_handler+0x53>
4000042d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000430:	89 04 9d 00 40 00 40 	mov    %eax,0x40004000(,%ebx,4)
40000437:	b8 01 00 00 00       	mov    $0x1,%eax
4000043c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000043f:	c9                   	leave  
40000440:	c3                   	ret    

40000441 <fetch_rpc_data>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
40000441:	55                   	push   %ebp
40000442:	89 e5                	mov    %esp,%ebp
40000444:	83 ec 34             	sub    $0x34,%esp
40000447:	8b 45 08             	mov    0x8(%ebp),%eax
4000044a:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40000451:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000454:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000457:	50                   	push   %eax
40000458:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000045f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000466:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000046d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000474:	e8 03 0e 00 00       	call   4000127c <syscall>
40000479:	83 c4 10             	add    $0x10,%esp
4000047c:	c9                   	leave  
4000047d:	c3                   	ret    

4000047e <call_rpc>:
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

4000047e:	55                   	push   %ebp
4000047f:	89 e5                	mov    %esp,%ebp
40000481:	83 ec 34             	sub    $0x34,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000484:	8b 45 08             	mov    0x8(%ebp),%eax
40000487:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
4000048e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000491:	8b 45 0c             	mov    0xc(%ebp),%eax
40000494:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000497:	8b 45 10             	mov    0x10(%ebp),%eax
4000049a:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000049d:	8b 45 14             	mov    0x14(%ebp),%eax
400004a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
            rnd[i] = get_next();
        }
400004a3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004a6:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
400004a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
400004ae:	e8 c9 0d 00 00       	call   4000127c <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }
400004b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
400004b6:	c9                   	leave  
400004b7:	c3                   	ret    

400004b8 <set_rpc_handler>:
400004b8:	55                   	push   %ebp
400004b9:	89 e5                	mov    %esp,%ebp
400004bb:	57                   	push   %edi
400004bc:	56                   	push   %esi
400004bd:	be 38 30 00 40       	mov    $0x40003038,%esi
400004c2:	83 ec 24             	sub    $0x24,%esp
400004c5:	8d 7d e0             	lea    -0x20(%ebp),%edi
400004c8:	68 00 02 00 00       	push   $0x200
400004cd:	6a 00                	push   $0x0
400004cf:	68 00 40 00 40       	push   $0x40004000
400004d4:	e8 c3 07 00 00       	call   40000c9c <memset>
400004d9:	b9 06 00 00 00       	mov    $0x6,%ecx
400004de:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004e1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
400004e3:	89 04 24             	mov    %eax,(%esp)
400004e6:	e8 91 0d 00 00       	call   4000127c <syscall>
400004eb:	83 c4 10             	add    $0x10,%esp
400004ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
400004f1:	5e                   	pop    %esi
400004f2:	5f                   	pop    %edi
400004f3:	5d                   	pop    %ebp
400004f4:	c3                   	ret    

400004f5 <_start>:
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
400004f5:	55                   	push   %ebp
400004f6:	89 e5                	mov    %esp,%ebp
400004f8:	56                   	push   %esi
400004f9:	53                   	push   %ebx
400004fa:	31 db                	xor    %ebx,%ebx
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
400004fc:	83 ec 2c             	sub    $0x2c,%esp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
400004ff:	8d 45 e0             	lea    -0x20(%ebp),%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000502:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000509:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

int main(int argc, char* args[])
40000510:	50                   	push   %eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000511:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000518:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000051f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

int main(int argc, char* args[])
4000052d:	e8 4a 0d 00 00       	call   4000127c <syscall>
{
    HANDLE out = fmkfifo("/dev/urandom");
40000532:	8b 75 e0             	mov    -0x20(%ebp),%esi
40000535:	83 c4 10             	add    $0x10,%esp
40000538:	85 f6                	test   %esi,%esi
4000053a:	75 05                	jne    40000541 <_start+0x4c>
4000053c:	89 f3                	mov    %esi,%ebx
4000053e:	eb 07                	jmp    40000547 <_start+0x52>
40000540:	43                   	inc    %ebx
40000541:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
40000545:	75 f9                	jne    40000540 <_start+0x4b>
40000547:	e8 6c ff ff ff       	call   400004b8 <set_rpc_handler>
4000054c:	51                   	push   %ecx
4000054d:	51                   	push   %ecx
4000054e:	56                   	push   %esi
4000054f:	53                   	push   %ebx
40000550:	e8 25 fb ff ff       	call   4000007a <main>
40000555:	89 04 24             	mov    %eax,(%esp)
40000558:	e8 cb fd ff ff       	call   40000328 <exit>
4000055d:	83 c4 10             	add    $0x10,%esp
40000560:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000563:	5b                   	pop    %ebx
40000564:	5e                   	pop    %esi
40000565:	5d                   	pop    %ebp
40000566:	c3                   	ret    

40000567 <_handle_rpc>:
40000567:	55                   	push   %ebp
40000568:	89 e5                	mov    %esp,%ebp
4000056a:	56                   	push   %esi
4000056b:	53                   	push   %ebx
4000056c:	83 ec 2c             	sub    $0x2c,%esp
4000056f:	ff 75 10             	pushl  0x10(%ebp)
40000572:	8b 75 0c             	mov    0xc(%ebp),%esi
40000575:	e8 bb 0a 00 00       	call   40001035 <malloc>
4000057a:	89 04 24             	mov    %eax,(%esp)
4000057d:	89 c3                	mov    %eax,%ebx
4000057f:	e8 bd fe ff ff       	call   40000441 <fetch_rpc_data>
40000584:	83 c4 10             	add    $0x10,%esp
40000587:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000058b:	75 4b                	jne    400005d8 <_handle_rpc+0x71>
4000058d:	8b 04 b5 00 40 00 40 	mov    0x40004000(,%esi,4),%eax
40000594:	85 c0                	test   %eax,%eax
40000596:	74 40                	je     400005d8 <_handle_rpc+0x71>
40000598:	83 ec 0c             	sub    $0xc,%esp
4000059b:	56                   	push   %esi
4000059c:	ff d0                	call   *%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
4000059e:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005a1:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
400005a8:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400005b2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
400005ce:	e8 a9 0c 00 00       	call   4000127c <syscall>
400005d3:	83 c4 10             	add    $0x10,%esp
400005d6:	eb fe                	jmp    400005d6 <_handle_rpc+0x6f>
400005d8:	83 ec 0c             	sub    $0xc,%esp
400005db:	68 1d 31 00 40       	push   $0x4000311d
400005e0:	e8 0b 04 00 00       	call   400009f0 <printf>
400005e5:	89 1c 24             	mov    %ebx,(%esp)
400005e8:	e8 ff 08 00 00       	call   40000eec <free>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400005ed:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005f0:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
400005f7:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000601:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000608:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000060f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000616:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
4000061d:	e8 5a 0c 00 00       	call   4000127c <syscall>
40000622:	83 c4 10             	add    $0x10,%esp
40000625:	eb fe                	jmp    40000625 <_handle_rpc+0xbe>
	...

40000628 <resolveHandle>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
40000628:	55                   	push   %ebp
40000629:	89 e5                	mov    %esp,%ebp
4000062b:	83 ec 28             	sub    $0x28,%esp
}
4000062e:	3d fe 0f 00 00       	cmp    $0xffe,%eax
40000633:	77 38                	ja     4000066d <resolveHandle+0x45>
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
40000635:	83 ec 0c             	sub    $0xc,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000638:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            rnd[i] = get_next();
        }
4000063b:	8d 45 e0             	lea    -0x20(%ebp),%eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
4000063e:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
            rnd[i] = get_next();
        }
40000645:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000646:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000064d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000654:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000065b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
40000662:	e8 15 0c 00 00       	call   4000127c <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000667:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000066a:	83 c4 10             	add    $0x10,%esp
    return 0;
}
4000066d:	c9                   	leave  
4000066e:	c3                   	ret    

4000066f <fmkfifo>:
4000066f:	55                   	push   %ebp
40000670:	89 e5                	mov    %esp,%ebp
40000672:	83 ec 34             	sub    $0x34,%esp
40000675:	8b 45 08             	mov    0x8(%ebp),%eax
40000678:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
4000067f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000682:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000685:	50                   	push   %eax
40000686:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000068d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000694:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000069b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006a2:	e8 d5 0b 00 00       	call   4000127c <syscall>
400006a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006aa:	c9                   	leave  
400006ab:	c3                   	ret    

400006ac <favailable>:
400006ac:	55                   	push   %ebp
400006ad:	89 e5                	mov    %esp,%ebp
400006af:	83 ec 34             	sub    $0x34,%esp
400006b2:	8b 45 08             	mov    0x8(%ebp),%eax
400006b5:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
400006bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006c2:	50                   	push   %eax
400006c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006df:	e8 98 0b 00 00       	call   4000127c <syscall>
400006e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006e7:	c9                   	leave  
400006e8:	c3                   	ret    

400006e9 <fclose>:
400006e9:	55                   	push   %ebp
400006ea:	89 e5                	mov    %esp,%ebp
400006ec:	83 ec 34             	sub    $0x34,%esp
400006ef:	8b 45 08             	mov    0x8(%ebp),%eax
400006f2:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400006f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006fc:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006ff:	50                   	push   %eax
40000700:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000070e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000715:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000071c:	e8 5b 0b 00 00       	call   4000127c <syscall>
40000721:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000724:	c9                   	leave  
40000725:	c3                   	ret    

40000726 <fopen>:
40000726:	55                   	push   %ebp
40000727:	89 e5                	mov    %esp,%ebp
40000729:	83 ec 34             	sub    $0x34,%esp
4000072c:	8b 45 08             	mov    0x8(%ebp),%eax
4000072f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000736:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000739:	8b 45 0c             	mov    0xc(%ebp),%eax
4000073c:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000073f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000742:	50                   	push   %eax
40000743:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000074a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000751:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000758:	e8 1f 0b 00 00       	call   4000127c <syscall>
4000075d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000760:	c9                   	leave  
40000761:	c3                   	ret    

40000762 <fopenpmhandle>:
40000762:	55                   	push   %ebp
40000763:	89 e5                	mov    %esp,%ebp
40000765:	83 ec 34             	sub    $0x34,%esp
40000768:	8b 45 08             	mov    0x8(%ebp),%eax
4000076b:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000772:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000775:	8b 45 0c             	mov    0xc(%ebp),%eax
40000778:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000077b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000077e:	50                   	push   %eax
4000077f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000786:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000078d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000794:	e8 e3 0a 00 00       	call   4000127c <syscall>
40000799:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000079c:	c9                   	leave  
4000079d:	c3                   	ret    

4000079e <setstderr>:
4000079e:	55                   	push   %ebp
4000079f:	89 e5                	mov    %esp,%ebp
400007a1:	83 ec 10             	sub    $0x10,%esp
400007a4:	ff 75 08             	pushl  0x8(%ebp)
400007a7:	6a 03                	push   $0x3
400007a9:	e8 b4 ff ff ff       	call   40000762 <fopenpmhandle>
400007ae:	c9                   	leave  
400007af:	c3                   	ret    

400007b0 <setstdin>:
400007b0:	55                   	push   %ebp
400007b1:	89 e5                	mov    %esp,%ebp
400007b3:	83 ec 10             	sub    $0x10,%esp
400007b6:	ff 75 08             	pushl  0x8(%ebp)
400007b9:	6a 02                	push   $0x2
400007bb:	e8 a2 ff ff ff       	call   40000762 <fopenpmhandle>
400007c0:	c9                   	leave  
400007c1:	c3                   	ret    

400007c2 <setstdout>:
400007c2:	55                   	push   %ebp
400007c3:	89 e5                	mov    %esp,%ebp
400007c5:	83 ec 10             	sub    $0x10,%esp
400007c8:	ff 75 08             	pushl  0x8(%ebp)
400007cb:	6a 01                	push   $0x1
400007cd:	e8 90 ff ff ff       	call   40000762 <fopenpmhandle>
400007d2:	c9                   	leave  
400007d3:	c3                   	ret    

400007d4 <getLastVFSErr>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
400007d4:	55                   	push   %ebp
400007d5:	89 e5                	mov    %esp,%ebp
400007d7:	83 ec 34             	sub    $0x34,%esp
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400007da:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400007dd:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
400007e4:	50                   	push   %eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400007e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400007ec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007fa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000801:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
40000808:	e8 6f 0a 00 00       	call   4000127c <syscall>

int main(int argc, char* args[])
{
4000080d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000810:	c9                   	leave  
40000811:	c3                   	ret    

40000812 <fwrite>:
40000812:	55                   	push   %ebp
40000813:	89 e5                	mov    %esp,%ebp
40000815:	57                   	push   %edi
40000816:	56                   	push   %esi
40000817:	53                   	push   %ebx
40000818:	83 ec 3c             	sub    $0x3c,%esp
4000081b:	8b 45 08             	mov    0x8(%ebp),%eax
4000081e:	8b 7d 10             	mov    0x10(%ebp),%edi
40000821:	e8 02 fe ff ff       	call   40000628 <resolveHandle>
40000826:	83 ec 0c             	sub    $0xc,%esp
40000829:	89 c6                	mov    %eax,%esi
4000082b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
4000082e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000831:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000838:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000083b:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000083e:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000841:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000848:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000084f:	50                   	push   %eax
40000850:	89 45 c4             	mov    %eax,-0x3c(%ebp)
40000853:	eb 2d                	jmp    40000882 <fwrite+0x70>
40000855:	e8 14 fb ff ff       	call   4000036e <yield>
4000085a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000085d:	83 ec 0c             	sub    $0xc,%esp
40000860:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000863:	8d 45 d0             	lea    -0x30(%ebp),%eax
40000866:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
4000086d:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000870:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000873:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
4000087a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000881:	50                   	push   %eax
40000882:	e8 f5 09 00 00       	call   4000127c <syscall>
40000887:	8b 5d d0             	mov    -0x30(%ebp),%ebx
4000088a:	83 c4 10             	add    $0x10,%esp
4000088d:	83 fb 01             	cmp    $0x1,%ebx
40000890:	74 c3                	je     40000855 <fwrite+0x43>
40000892:	89 f0                	mov    %esi,%eax
40000894:	89 da                	mov    %ebx,%edx
40000896:	e8 3d 02 00 00       	call   40000ad8 <printrwerror>
4000089b:	8d 65 f4             	lea    -0xc(%ebp),%esp
4000089e:	89 d8                	mov    %ebx,%eax
400008a0:	5b                   	pop    %ebx
400008a1:	5e                   	pop    %esi
400008a2:	5f                   	pop    %edi
400008a3:	5d                   	pop    %ebp
400008a4:	c3                   	ret    

400008a5 <fputs>:
400008a5:	55                   	push   %ebp
400008a6:	89 e5                	mov    %esp,%ebp
400008a8:	56                   	push   %esi
400008a9:	53                   	push   %ebx
400008aa:	83 ec 20             	sub    $0x20,%esp
400008ad:	8b 45 0c             	mov    0xc(%ebp),%eax
400008b0:	8b 5d 08             	mov    0x8(%ebp),%ebx
400008b3:	e8 70 fd ff ff       	call   40000628 <resolveHandle>
400008b8:	89 c6                	mov    %eax,%esi
400008ba:	85 c0                	test   %eax,%eax
400008bc:	74 16                	je     400008d4 <fputs+0x2f>
400008be:	83 ec 0c             	sub    $0xc,%esp
400008c1:	53                   	push   %ebx
400008c2:	e8 a7 04 00 00       	call   40000d6e <strlen>
400008c7:	83 c4 0c             	add    $0xc,%esp
400008ca:	50                   	push   %eax
400008cb:	53                   	push   %ebx
400008cc:	56                   	push   %esi
400008cd:	e8 40 ff ff ff       	call   40000812 <fwrite>
400008d2:	eb 35                	jmp    40000909 <fputs+0x64>
400008d4:	83 ec 0c             	sub    $0xc,%esp
400008d7:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008da:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
400008e1:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400008e4:	50                   	push   %eax
400008e5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400008ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000901:	e8 76 09 00 00       	call   4000127c <syscall>
40000906:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000909:	83 c4 10             	add    $0x10,%esp
4000090c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000090f:	5b                   	pop    %ebx
40000910:	5e                   	pop    %esi
40000911:	5d                   	pop    %ebp
40000912:	c3                   	ret    

40000913 <puts>:
40000913:	55                   	push   %ebp
40000914:	89 e5                	mov    %esp,%ebp
40000916:	83 ec 10             	sub    $0x10,%esp
40000919:	6a 01                	push   $0x1
4000091b:	ff 75 08             	pushl  0x8(%ebp)
4000091e:	e8 82 ff ff ff       	call   400008a5 <fputs>
40000923:	c9                   	leave  
40000924:	c3                   	ret    

40000925 <putn>:
40000925:	55                   	push   %ebp
40000926:	89 e5                	mov    %esp,%ebp
40000928:	56                   	push   %esi
40000929:	53                   	push   %ebx
4000092a:	31 f6                	xor    %esi,%esi
4000092c:	83 ec 50             	sub    $0x50,%esp
4000092f:	89 d3                	mov    %edx,%ebx
40000931:	83 fa 24             	cmp    $0x24,%edx
40000934:	7f 25                	jg     4000095b <putn+0x36>
40000936:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
4000093a:	8d 4d f7             	lea    -0x9(%ebp),%ecx
4000093d:	31 d2                	xor    %edx,%edx
4000093f:	49                   	dec    %ecx
40000940:	f7 f3                	div    %ebx
40000942:	46                   	inc    %esi
40000943:	85 c0                	test   %eax,%eax
40000945:	8a 92 2d 31 00 40    	mov    0x4000312d(%edx),%dl
4000094b:	88 11                	mov    %dl,(%ecx)
4000094d:	75 ee                	jne    4000093d <putn+0x18>
4000094f:	83 ec 0c             	sub    $0xc,%esp
40000952:	51                   	push   %ecx
40000953:	e8 bb ff ff ff       	call   40000913 <puts>
40000958:	83 c4 10             	add    $0x10,%esp
4000095b:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000095e:	89 f0                	mov    %esi,%eax
40000960:	5b                   	pop    %ebx
40000961:	5e                   	pop    %esi
40000962:	5d                   	pop    %ebp
40000963:	c3                   	ret    

40000964 <fputc>:
40000964:	55                   	push   %ebp
40000965:	89 e5                	mov    %esp,%ebp
40000967:	83 ec 38             	sub    $0x38,%esp
4000096a:	8b 45 08             	mov    0x8(%ebp),%eax
4000096d:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000970:	8b 45 0c             	mov    0xc(%ebp),%eax
40000973:	e8 b0 fc ff ff       	call   40000628 <resolveHandle>
40000978:	85 c0                	test   %eax,%eax
4000097a:	74 0f                	je     4000098b <fputc+0x27>
4000097c:	52                   	push   %edx
4000097d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000980:	6a 01                	push   $0x1
40000982:	52                   	push   %edx
40000983:	50                   	push   %eax
40000984:	e8 89 fe ff ff       	call   40000812 <fwrite>
40000989:	eb 39                	jmp    400009c4 <fputc+0x60>
4000098b:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
4000098f:	83 ec 0c             	sub    $0xc,%esp
40000992:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000995:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000998:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
4000099f:	50                   	push   %eax
400009a0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400009a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400009ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400009b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400009bc:	e8 bb 08 00 00       	call   4000127c <syscall>
400009c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400009c4:	83 c4 10             	add    $0x10,%esp
400009c7:	c9                   	leave  
400009c8:	c3                   	ret    

400009c9 <putc>:
400009c9:	55                   	push   %ebp
400009ca:	89 e5                	mov    %esp,%ebp
400009cc:	83 ec 08             	sub    $0x8,%esp
400009cf:	0f be 45 08          	movsbl 0x8(%ebp),%eax
400009d3:	89 45 08             	mov    %eax,0x8(%ebp)
400009d6:	c9                   	leave  
400009d7:	e9 88 ff ff ff       	jmp    40000964 <fputc>

400009dc <putchar>:
400009dc:	55                   	push   %ebp
400009dd:	89 e5                	mov    %esp,%ebp
400009df:	83 ec 10             	sub    $0x10,%esp
400009e2:	0f be 45 08          	movsbl 0x8(%ebp),%eax
400009e6:	6a 01                	push   $0x1
400009e8:	50                   	push   %eax
400009e9:	e8 76 ff ff ff       	call   40000964 <fputc>
400009ee:	c9                   	leave  
400009ef:	c3                   	ret    

400009f0 <printf>:
400009f0:	55                   	push   %ebp
400009f1:	89 e5                	mov    %esp,%ebp
400009f3:	57                   	push   %edi
400009f4:	56                   	push   %esi
400009f5:	53                   	push   %ebx
400009f6:	83 ec 1c             	sub    $0x1c,%esp
400009f9:	8d 75 0c             	lea    0xc(%ebp),%esi
400009fc:	8b 7d 08             	mov    0x8(%ebp),%edi
400009ff:	31 db                	xor    %ebx,%ebx
40000a01:	e9 be 00 00 00       	jmp    40000ac4 <printf+0xd4>
40000a06:	3c 25                	cmp    $0x25,%al
40000a08:	0f 85 a4 00 00 00    	jne    40000ab2 <printf+0xc2>
40000a0e:	47                   	inc    %edi
40000a0f:	8a 07                	mov    (%edi),%al
40000a11:	3c 70                	cmp    $0x70,%al
40000a13:	74 47                	je     40000a5c <printf+0x6c>
40000a15:	7f 1a                	jg     40000a31 <printf+0x41>
40000a17:	3c 63                	cmp    $0x63,%al
40000a19:	74 5a                	je     40000a75 <printf+0x85>
40000a1b:	7f 0e                	jg     40000a2b <printf+0x3b>
40000a1d:	84 c0                	test   %al,%al
40000a1f:	0f 84 a9 00 00 00    	je     40000ace <printf+0xde>
40000a25:	3c 25                	cmp    $0x25,%al
40000a27:	75 6c                	jne    40000a95 <printf+0xa5>
40000a29:	eb 63                	jmp    40000a8e <printf+0x9e>
40000a2b:	3c 64                	cmp    $0x64,%al
40000a2d:	75 66                	jne    40000a95 <printf+0xa5>
40000a2f:	eb 1e                	jmp    40000a4f <printf+0x5f>
40000a31:	3c 75                	cmp    $0x75,%al
40000a33:	74 1a                	je     40000a4f <printf+0x5f>
40000a35:	3c 78                	cmp    $0x78,%al
40000a37:	74 23                	je     40000a5c <printf+0x6c>
40000a39:	3c 73                	cmp    $0x73,%al
40000a3b:	75 58                	jne    40000a95 <printf+0xa5>
40000a3d:	83 ec 0c             	sub    $0xc,%esp
40000a40:	8d 46 04             	lea    0x4(%esi),%eax
40000a43:	ff 36                	pushl  (%esi)
40000a45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a48:	e8 c6 fe ff ff       	call   40000913 <puts>
40000a4d:	eb 38                	jmp    40000a87 <printf+0x97>
40000a4f:	8d 46 04             	lea    0x4(%esi),%eax
40000a52:	ba 0a 00 00 00       	mov    $0xa,%edx
40000a57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a5a:	eb 0b                	jmp    40000a67 <printf+0x77>
40000a5c:	8d 46 04             	lea    0x4(%esi),%eax
40000a5f:	ba 10 00 00 00       	mov    $0x10,%edx
40000a64:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a67:	8b 06                	mov    (%esi),%eax
40000a69:	e8 b7 fe ff ff       	call   40000925 <putn>
40000a6e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a71:	01 c3                	add    %eax,%ebx
40000a73:	eb 4e                	jmp    40000ac3 <printf+0xd3>
40000a75:	8d 46 04             	lea    0x4(%esi),%eax
40000a78:	83 ec 0c             	sub    $0xc,%esp
40000a7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a7e:	0f be 06             	movsbl (%esi),%eax
40000a81:	50                   	push   %eax
40000a82:	e8 55 ff ff ff       	call   400009dc <putchar>
40000a87:	01 c3                	add    %eax,%ebx
40000a89:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a8c:	eb 32                	jmp    40000ac0 <printf+0xd0>
40000a8e:	83 ec 0c             	sub    $0xc,%esp
40000a91:	6a 25                	push   $0x25
40000a93:	eb 24                	jmp    40000ab9 <printf+0xc9>
40000a95:	83 ec 0c             	sub    $0xc,%esp
40000a98:	6a 25                	push   $0x25
40000a9a:	e8 3d ff ff ff       	call   400009dc <putchar>
40000a9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000aa2:	0f be 07             	movsbl (%edi),%eax
40000aa5:	89 04 24             	mov    %eax,(%esp)
40000aa8:	e8 2f ff ff ff       	call   400009dc <putchar>
40000aad:	03 45 e4             	add    -0x1c(%ebp),%eax
40000ab0:	eb 0c                	jmp    40000abe <printf+0xce>
40000ab2:	83 ec 0c             	sub    $0xc,%esp
40000ab5:	0f be c0             	movsbl %al,%eax
40000ab8:	50                   	push   %eax
40000ab9:	e8 1e ff ff ff       	call   400009dc <putchar>
40000abe:	01 c3                	add    %eax,%ebx
40000ac0:	83 c4 10             	add    $0x10,%esp
40000ac3:	47                   	inc    %edi
40000ac4:	8a 07                	mov    (%edi),%al
40000ac6:	84 c0                	test   %al,%al
40000ac8:	0f 85 38 ff ff ff    	jne    40000a06 <printf+0x16>
40000ace:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000ad1:	89 d8                	mov    %ebx,%eax
40000ad3:	5b                   	pop    %ebx
40000ad4:	5e                   	pop    %esi
40000ad5:	5f                   	pop    %edi
40000ad6:	5d                   	pop    %ebp
40000ad7:	c3                   	ret    

40000ad8 <printrwerror>:
40000ad8:	55                   	push   %ebp
40000ad9:	89 e5                	mov    %esp,%ebp
40000adb:	83 ec 08             	sub    $0x8,%esp
40000ade:	83 fa 02             	cmp    $0x2,%edx
40000ae1:	75 0a                	jne    40000aed <printrwerror+0x15>
40000ae3:	52                   	push   %edx
40000ae4:	52                   	push   %edx
40000ae5:	50                   	push   %eax
40000ae6:	68 52 31 00 40       	push   $0x40003152
40000aeb:	eb 2b                	jmp    40000b18 <printrwerror+0x40>
40000aed:	83 fa 03             	cmp    $0x3,%edx
40000af0:	75 0a                	jne    40000afc <printrwerror+0x24>
40000af2:	51                   	push   %ecx
40000af3:	51                   	push   %ecx
40000af4:	50                   	push   %eax
40000af5:	68 6a 31 00 40       	push   $0x4000316a
40000afa:	eb 1c                	jmp    40000b18 <printrwerror+0x40>
40000afc:	83 fa 04             	cmp    $0x4,%edx
40000aff:	75 0a                	jne    40000b0b <printrwerror+0x33>
40000b01:	52                   	push   %edx
40000b02:	52                   	push   %edx
40000b03:	50                   	push   %eax
40000b04:	68 85 31 00 40       	push   $0x40003185
40000b09:	eb 0d                	jmp    40000b18 <printrwerror+0x40>
40000b0b:	83 fa 05             	cmp    $0x5,%edx
40000b0e:	75 10                	jne    40000b20 <printrwerror+0x48>
40000b10:	51                   	push   %ecx
40000b11:	51                   	push   %ecx
40000b12:	50                   	push   %eax
40000b13:	68 af 31 00 40       	push   $0x400031af
40000b18:	e8 d3 fe ff ff       	call   400009f0 <printf>
40000b1d:	83 c4 10             	add    $0x10,%esp
40000b20:	c9                   	leave  
40000b21:	c3                   	ret    

40000b22 <fread>:
40000b22:	55                   	push   %ebp
40000b23:	89 e5                	mov    %esp,%ebp
40000b25:	57                   	push   %edi
40000b26:	56                   	push   %esi
40000b27:	53                   	push   %ebx
40000b28:	83 ec 38             	sub    $0x38,%esp
40000b2b:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000b2e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b31:	8b 75 08             	mov    0x8(%ebp),%esi
40000b34:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b37:	8b 45 10             	mov    0x10(%ebp),%eax
40000b3a:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b41:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b44:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b47:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b4e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b55:	eb 2c                	jmp    40000b83 <fread+0x61>
40000b57:	e8 12 f8 ff ff       	call   4000036e <yield>
40000b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b62:	8b 45 10             	mov    0x10(%ebp),%eax
40000b65:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b6c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b72:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b79:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b80:	83 ec 0c             	sub    $0xc,%esp
40000b83:	57                   	push   %edi
40000b84:	e8 f3 06 00 00       	call   4000127c <syscall>
40000b89:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000b8c:	83 c4 10             	add    $0x10,%esp
40000b8f:	83 fb 01             	cmp    $0x1,%ebx
40000b92:	74 c3                	je     40000b57 <fread+0x35>
40000b94:	89 f0                	mov    %esi,%eax
40000b96:	89 da                	mov    %ebx,%edx
40000b98:	e8 3b ff ff ff       	call   40000ad8 <printrwerror>
40000b9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000ba0:	89 d8                	mov    %ebx,%eax
40000ba2:	5b                   	pop    %ebx
40000ba3:	5e                   	pop    %esi
40000ba4:	5f                   	pop    %edi
40000ba5:	5d                   	pop    %ebp
40000ba6:	c3                   	ret    

40000ba7 <fgetc>:
40000ba7:	55                   	push   %ebp
40000ba8:	89 e5                	mov    %esp,%ebp
40000baa:	83 ec 18             	sub    $0x18,%esp
40000bad:	8b 45 08             	mov    0x8(%ebp),%eax
40000bb0:	e8 73 fa ff ff       	call   40000628 <resolveHandle>
40000bb5:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000bb9:	85 c0                	test   %eax,%eax
40000bbb:	74 10                	je     40000bcd <fgetc+0x26>
40000bbd:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000bc0:	51                   	push   %ecx
40000bc1:	6a 01                	push   $0x1
40000bc3:	52                   	push   %edx
40000bc4:	50                   	push   %eax
40000bc5:	e8 58 ff ff ff       	call   40000b22 <fread>
40000bca:	83 c4 10             	add    $0x10,%esp
40000bcd:	8a 45 f7             	mov    -0x9(%ebp),%al
40000bd0:	c9                   	leave  
40000bd1:	c3                   	ret    

40000bd2 <getchar>:
40000bd2:	55                   	push   %ebp
40000bd3:	89 e5                	mov    %esp,%ebp
40000bd5:	83 ec 14             	sub    $0x14,%esp
40000bd8:	6a 02                	push   $0x2
40000bda:	e8 c8 ff ff ff       	call   40000ba7 <fgetc>
40000bdf:	c9                   	leave  
40000be0:	c3                   	ret    

40000be1 <getc>:
40000be1:	55                   	push   %ebp
40000be2:	89 e5                	mov    %esp,%ebp
40000be4:	83 ec 08             	sub    $0x8,%esp
40000be7:	c9                   	leave  
40000be8:	e9 ba ff ff ff       	jmp    40000ba7 <fgetc>

40000bed <fgets>:
40000bed:	55                   	push   %ebp
40000bee:	89 e5                	mov    %esp,%ebp
40000bf0:	57                   	push   %edi
40000bf1:	56                   	push   %esi
40000bf2:	53                   	push   %ebx
40000bf3:	83 ec 1c             	sub    $0x1c,%esp
40000bf6:	31 db                	xor    %ebx,%ebx
40000bf8:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000bfb:	8b 75 08             	mov    0x8(%ebp),%esi
40000bfe:	8d 47 ff             	lea    -0x1(%edi),%eax
40000c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c04:	eb 16                	jmp    40000c1c <fgets+0x2f>
40000c06:	83 ec 0c             	sub    $0xc,%esp
40000c09:	ff 75 10             	pushl  0x10(%ebp)
40000c0c:	e8 96 ff ff ff       	call   40000ba7 <fgetc>
40000c11:	83 c4 10             	add    $0x10,%esp
40000c14:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000c17:	84 c0                	test   %al,%al
40000c19:	74 0a                	je     40000c25 <fgets+0x38>
40000c1b:	43                   	inc    %ebx
40000c1c:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000c1f:	7c e5                	jl     40000c06 <fgets+0x19>
40000c21:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000c25:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000c28:	89 f0                	mov    %esi,%eax
40000c2a:	5b                   	pop    %ebx
40000c2b:	5e                   	pop    %esi
40000c2c:	5f                   	pop    %edi
40000c2d:	5d                   	pop    %ebp
40000c2e:	c3                   	ret    

40000c2f <getln>:
40000c2f:	55                   	push   %ebp
40000c30:	89 e5                	mov    %esp,%ebp
40000c32:	56                   	push   %esi
40000c33:	53                   	push   %ebx
40000c34:	31 db                	xor    %ebx,%ebx
40000c36:	8b 75 08             	mov    0x8(%ebp),%esi
40000c39:	eb 42                	jmp    40000c7d <getln+0x4e>
40000c3b:	3c 0a                	cmp    $0xa,%al
40000c3d:	75 0f                	jne    40000c4e <getln+0x1f>
40000c3f:	83 ec 0c             	sub    $0xc,%esp
40000c42:	6a 0a                	push   $0xa
40000c44:	e8 93 fd ff ff       	call   400009dc <putchar>
40000c49:	83 c4 10             	add    $0x10,%esp
40000c4c:	eb 40                	jmp    40000c8e <getln+0x5f>
40000c4e:	3c 08                	cmp    $0x8,%al
40000c50:	75 18                	jne    40000c6a <getln+0x3b>
40000c52:	85 db                	test   %ebx,%ebx
40000c54:	74 0e                	je     40000c64 <getln+0x35>
40000c56:	83 ec 0c             	sub    $0xc,%esp
40000c59:	4b                   	dec    %ebx
40000c5a:	6a 08                	push   $0x8
40000c5c:	e8 7b fd ff ff       	call   400009dc <putchar>
40000c61:	83 c4 10             	add    $0x10,%esp
40000c64:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c68:	eb 13                	jmp    40000c7d <getln+0x4e>
40000c6a:	83 ec 0c             	sub    $0xc,%esp
40000c6d:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000c70:	0f be c0             	movsbl %al,%eax
40000c73:	50                   	push   %eax
40000c74:	43                   	inc    %ebx
40000c75:	e8 62 fd ff ff       	call   400009dc <putchar>
40000c7a:	83 c4 10             	add    $0x10,%esp
40000c7d:	83 ec 0c             	sub    $0xc,%esp
40000c80:	6a 02                	push   $0x2
40000c82:	e8 20 ff ff ff       	call   40000ba7 <fgetc>
40000c87:	83 c4 10             	add    $0x10,%esp
40000c8a:	84 c0                	test   %al,%al
40000c8c:	75 ad                	jne    40000c3b <getln+0xc>
40000c8e:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c92:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000c95:	89 f0                	mov    %esi,%eax
40000c97:	5b                   	pop    %ebx
40000c98:	5e                   	pop    %esi
40000c99:	5d                   	pop    %ebp
40000c9a:	c3                   	ret    
	...

40000c9c <memset>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
40000c9c:	55                   	push   %ebp
40000c9d:	89 e5                	mov    %esp,%ebp
40000c9f:	53                   	push   %ebx
40000ca0:	8b 45 08             	mov    0x8(%ebp),%eax
40000ca3:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ca6:	8b 4d 10             	mov    0x10(%ebp),%ecx
#include "vmmcall.h"
40000ca9:	89 c2                	mov    %eax,%edx
#include "process.h"
 
40000cab:	eb 04                	jmp    40000cb1 <memset+0x15>
uint32_t m_z = 1, m_w = 2;
40000cad:	88 1a                	mov    %bl,(%edx)
40000caf:	49                   	dec    %ecx
40000cb0:	42                   	inc    %edx
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
40000cb1:	85 c9                	test   %ecx,%ecx
40000cb3:	75 f8                	jne    40000cad <memset+0x11>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000cb5:	5b                   	pop    %ebx
40000cb6:	5d                   	pop    %ebp
40000cb7:	c3                   	ret    

40000cb8 <memcpy>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000cb8:	55                   	push   %ebp
}

int main(int argc, char* args[])
{
40000cb9:	31 c9                	xor    %ecx,%ecx

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000cbb:	89 e5                	mov    %esp,%ebp
40000cbd:	56                   	push   %esi
40000cbe:	53                   	push   %ebx
40000cbf:	8b 75 10             	mov    0x10(%ebp),%esi
40000cc2:	8b 45 08             	mov    0x8(%ebp),%eax
40000cc5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
}

int main(int argc, char* args[])
{
40000cc8:	85 f6                	test   %esi,%esi
40000cca:	75 04                	jne    40000cd0 <memcpy+0x18>
40000ccc:	31 c0                	xor    %eax,%eax
40000cce:	eb 0a                	jmp    40000cda <memcpy+0x22>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000cd0:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000cd3:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000cd6:	41                   	inc    %ecx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000cd7:	4e                   	dec    %esi
40000cd8:	75 f6                	jne    40000cd0 <memcpy+0x18>
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40000cda:	5b                   	pop    %ebx
40000cdb:	5e                   	pop    %esi
40000cdc:	5d                   	pop    %ebp
40000cdd:	c3                   	ret    

40000cde <memcmp>:

    while(1) {
40000cde:	55                   	push   %ebp
        for(int i = 0; i < 128; i++) {
40000cdf:	83 c8 ff             	or     $0xffffffff,%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
40000ce2:	89 e5                	mov    %esp,%ebp
40000ce4:	57                   	push   %edi
40000ce5:	56                   	push   %esi
40000ce6:	53                   	push   %ebx
40000ce7:	8b 75 08             	mov    0x8(%ebp),%esi
40000cea:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000ced:	8b 5d 10             	mov    0x10(%ebp),%ebx
        for(int i = 0; i < 128; i++) {
40000cf0:	85 f6                	test   %esi,%esi
40000cf2:	74 2c                	je     40000d20 <memcmp+0x42>
            rnd[i] = get_next();
        }
40000cf4:	b8 01 00 00 00       	mov    $0x1,%eax
40000cf9:	85 ff                	test   %edi,%edi
40000cfb:	74 23                	je     40000d20 <memcmp+0x42>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000cfd:	31 d2                	xor    %edx,%edx
40000cff:	85 db                	test   %ebx,%ebx
40000d01:	75 17                	jne    40000d1a <memcmp+0x3c>
40000d03:	eb 19                	jmp    40000d1e <memcmp+0x40>

    return 0;
}
40000d05:	8a 04 16             	mov    (%esi,%edx,1),%al
40000d08:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000d0b:	38 c8                	cmp    %cl,%al
40000d0d:	74 0a                	je     40000d19 <memcmp+0x3b>
40000d0f:	0f b6 c0             	movzbl %al,%eax
40000d12:	0f b6 c9             	movzbl %cl,%ecx
40000d15:	29 c8                	sub    %ecx,%eax
40000d17:	eb 07                	jmp    40000d20 <memcmp+0x42>
    }

    return 0;
}
40000d19:	42                   	inc    %edx
40000d1a:	39 da                	cmp    %ebx,%edx
40000d1c:	72 e7                	jb     40000d05 <memcmp+0x27>
40000d1e:	31 c0                	xor    %eax,%eax
40000d20:	5b                   	pop    %ebx
40000d21:	5e                   	pop    %esi
40000d22:	5f                   	pop    %edi
40000d23:	5d                   	pop    %ebp
40000d24:	c3                   	ret    

40000d25 <strcmp>:
40000d25:	55                   	push   %ebp
40000d26:	31 c0                	xor    %eax,%eax
40000d28:	89 e5                	mov    %esp,%ebp
40000d2a:	56                   	push   %esi
40000d2b:	53                   	push   %ebx
40000d2c:	31 db                	xor    %ebx,%ebx
40000d2e:	8b 55 08             	mov    0x8(%ebp),%edx
40000d31:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000d34:	85 d2                	test   %edx,%edx
40000d36:	75 03                	jne    40000d3b <strcmp+0x16>
40000d38:	eb 09                	jmp    40000d43 <strcmp+0x1e>
40000d3a:	40                   	inc    %eax
40000d3b:	89 c3                	mov    %eax,%ebx
40000d3d:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000d41:	75 f7                	jne    40000d3a <strcmp+0x15>
40000d43:	31 c0                	xor    %eax,%eax
40000d45:	31 f6                	xor    %esi,%esi
40000d47:	85 c9                	test   %ecx,%ecx
40000d49:	75 03                	jne    40000d4e <strcmp+0x29>
40000d4b:	eb 09                	jmp    40000d56 <strcmp+0x31>
40000d4d:	40                   	inc    %eax
40000d4e:	89 c6                	mov    %eax,%esi
40000d50:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000d54:	75 f7                	jne    40000d4d <strcmp+0x28>
40000d56:	89 f0                	mov    %esi,%eax
40000d58:	39 de                	cmp    %ebx,%esi
40000d5a:	7e 02                	jle    40000d5e <strcmp+0x39>
40000d5c:	89 d8                	mov    %ebx,%eax
40000d5e:	40                   	inc    %eax
40000d5f:	50                   	push   %eax
40000d60:	51                   	push   %ecx
40000d61:	52                   	push   %edx
40000d62:	e8 77 ff ff ff       	call   40000cde <memcmp>
40000d67:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000d6a:	5b                   	pop    %ebx
40000d6b:	5e                   	pop    %esi
40000d6c:	5d                   	pop    %ebp
40000d6d:	c3                   	ret    

40000d6e <strlen>:
40000d6e:	55                   	push   %ebp
40000d6f:	31 d2                	xor    %edx,%edx
40000d71:	89 e5                	mov    %esp,%ebp
40000d73:	31 c0                	xor    %eax,%eax
40000d75:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d78:	85 c9                	test   %ecx,%ecx
40000d7a:	75 03                	jne    40000d7f <strlen+0x11>
40000d7c:	eb 09                	jmp    40000d87 <strlen+0x19>
40000d7e:	42                   	inc    %edx
40000d7f:	89 d0                	mov    %edx,%eax
40000d81:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000d85:	75 f7                	jne    40000d7e <strlen+0x10>
40000d87:	5d                   	pop    %ebp
40000d88:	c3                   	ret    

40000d89 <strcpy>:
40000d89:	55                   	push   %ebp
40000d8a:	31 d2                	xor    %edx,%edx
40000d8c:	89 e5                	mov    %esp,%ebp
40000d8e:	56                   	push   %esi
40000d8f:	53                   	push   %ebx
40000d90:	31 c9                	xor    %ecx,%ecx
40000d92:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d95:	8b 45 08             	mov    0x8(%ebp),%eax
40000d98:	85 db                	test   %ebx,%ebx
40000d9a:	75 03                	jne    40000d9f <strcpy+0x16>
40000d9c:	eb 09                	jmp    40000da7 <strcpy+0x1e>
40000d9e:	42                   	inc    %edx
40000d9f:	89 d1                	mov    %edx,%ecx
40000da1:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000da5:	75 f7                	jne    40000d9e <strcpy+0x15>
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
40000da7:	89 ce                	mov    %ecx,%esi
40000da9:	46                   	inc    %esi
40000daa:	74 0c                	je     40000db8 <strcpy+0x2f>
40000dac:	31 d2                	xor    %edx,%edx
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000dae:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000db1:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000db4:	42                   	inc    %edx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000db5:	4e                   	dec    %esi
40000db6:	75 f6                	jne    40000dae <strcpy+0x25>
40000db8:	5b                   	pop    %ebx
40000db9:	5e                   	pop    %esi
40000dba:	5d                   	pop    %ebp
40000dbb:	c3                   	ret    

40000dbc <strtoknc>:
40000dbc:	55                   	push   %ebp
40000dbd:	31 c0                	xor    %eax,%eax
40000dbf:	89 e5                	mov    %esp,%ebp
40000dc1:	57                   	push   %edi
40000dc2:	56                   	push   %esi
40000dc3:	53                   	push   %ebx
40000dc4:	83 ec 04             	sub    $0x4,%esp
40000dc7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000dca:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000dcd:	85 db                	test   %ebx,%ebx
40000dcf:	75 06                	jne    40000dd7 <strtoknc+0x1b>
40000dd1:	e9 83 00 00 00       	jmp    40000e59 <strtoknc+0x9d>
40000dd6:	40                   	inc    %eax
40000dd7:	89 c7                	mov    %eax,%edi
40000dd9:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000ddd:	75 f7                	jne    40000dd6 <strtoknc+0x1a>
40000ddf:	85 c0                	test   %eax,%eax
40000de1:	74 76                	je     40000e59 <strtoknc+0x9d>
40000de3:	85 c9                	test   %ecx,%ecx
40000de5:	75 0b                	jne    40000df2 <strtoknc+0x36>
40000de7:	83 3d 00 42 00 40 00 	cmpl   $0x0,0x40004200
40000dee:	75 08                	jne    40000df8 <strtoknc+0x3c>
40000df0:	eb 67                	jmp    40000e59 <strtoknc+0x9d>
40000df2:	89 0d 00 42 00 40    	mov    %ecx,0x40004200
40000df8:	a1 00 42 00 40       	mov    0x40004200,%eax
40000dfd:	31 c9                	xor    %ecx,%ecx
40000dff:	eb 0b                	jmp    40000e0c <strtoknc+0x50>
40000e01:	8a 10                	mov    (%eax),%dl
40000e03:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e06:	75 03                	jne    40000e0b <strtoknc+0x4f>
40000e08:	40                   	inc    %eax
40000e09:	eb 05                	jmp    40000e10 <strtoknc+0x54>
40000e0b:	41                   	inc    %ecx
40000e0c:	39 f9                	cmp    %edi,%ecx
40000e0e:	7c f1                	jl     40000e01 <strtoknc+0x45>
40000e10:	39 f9                	cmp    %edi,%ecx
40000e12:	75 e9                	jne    40000dfd <strtoknc+0x41>
40000e14:	a3 00 42 00 40       	mov    %eax,0x40004200
40000e19:	80 38 00             	cmpb   $0x0,(%eax)
40000e1c:	75 28                	jne    40000e46 <strtoknc+0x8a>
40000e1e:	c7 05 00 42 00 40 00 	movl   $0x0,0x40004200
40000e25:	00 00 00 
40000e28:	eb 2f                	jmp    40000e59 <strtoknc+0x9d>
40000e2a:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000e2d:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000e30:	75 05                	jne    40000e37 <strtoknc+0x7b>
40000e32:	c6 06 00             	movb   $0x0,(%esi)
40000e35:	eb 05                	jmp    40000e3c <strtoknc+0x80>
40000e37:	41                   	inc    %ecx
40000e38:	39 f9                	cmp    %edi,%ecx
40000e3a:	7c ee                	jl     40000e2a <strtoknc+0x6e>
40000e3c:	ff 05 00 42 00 40    	incl   0x40004200
40000e42:	39 f9                	cmp    %edi,%ecx
40000e44:	7c 15                	jl     40000e5b <strtoknc+0x9f>
40000e46:	8b 35 00 42 00 40    	mov    0x40004200,%esi
40000e4c:	8a 16                	mov    (%esi),%dl
40000e4e:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000e51:	84 d2                	test   %dl,%dl
40000e53:	74 06                	je     40000e5b <strtoknc+0x9f>
40000e55:	31 c9                	xor    %ecx,%ecx
40000e57:	eb df                	jmp    40000e38 <strtoknc+0x7c>
40000e59:	31 c0                	xor    %eax,%eax
40000e5b:	5a                   	pop    %edx
40000e5c:	5b                   	pop    %ebx
40000e5d:	5e                   	pop    %esi
40000e5e:	5f                   	pop    %edi
40000e5f:	5d                   	pop    %ebp
40000e60:	c3                   	ret    

40000e61 <strclone>:
40000e61:	55                   	push   %ebp
40000e62:	31 c0                	xor    %eax,%eax
40000e64:	89 e5                	mov    %esp,%ebp
40000e66:	56                   	push   %esi
40000e67:	53                   	push   %ebx
40000e68:	31 d2                	xor    %edx,%edx
40000e6a:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000e6d:	85 db                	test   %ebx,%ebx
40000e6f:	75 03                	jne    40000e74 <strclone+0x13>
40000e71:	eb 09                	jmp    40000e7c <strclone+0x1b>
40000e73:	40                   	inc    %eax
40000e74:	89 c2                	mov    %eax,%edx
40000e76:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e7a:	75 f7                	jne    40000e73 <strclone+0x12>
40000e7c:	83 ec 0c             	sub    $0xc,%esp
40000e7f:	42                   	inc    %edx
40000e80:	52                   	push   %edx
40000e81:	e8 af 01 00 00       	call   40001035 <malloc>
40000e86:	59                   	pop    %ecx
40000e87:	89 c6                	mov    %eax,%esi
40000e89:	58                   	pop    %eax
40000e8a:	53                   	push   %ebx
40000e8b:	56                   	push   %esi
40000e8c:	e8 f8 fe ff ff       	call   40000d89 <strcpy>
40000e91:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e94:	89 f0                	mov    %esi,%eax
40000e96:	5b                   	pop    %ebx
40000e97:	5e                   	pop    %esi
40000e98:	5d                   	pop    %ebp
40000e99:	c3                   	ret    

40000e9a <strtok>:
40000e9a:	55                   	push   %ebp
40000e9b:	89 e5                	mov    %esp,%ebp
40000e9d:	56                   	push   %esi
40000e9e:	53                   	push   %ebx
40000e9f:	8b 75 08             	mov    0x8(%ebp),%esi
40000ea2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000ea5:	85 f6                	test   %esi,%esi
40000ea7:	74 2e                	je     40000ed7 <strtok+0x3d>
40000ea9:	a1 04 42 00 40       	mov    0x40004204,%eax
40000eae:	85 c0                	test   %eax,%eax
40000eb0:	74 0c                	je     40000ebe <strtok+0x24>
40000eb2:	83 ec 0c             	sub    $0xc,%esp
40000eb5:	50                   	push   %eax
40000eb6:	e8 31 00 00 00       	call   40000eec <free>
40000ebb:	83 c4 10             	add    $0x10,%esp
40000ebe:	83 ec 0c             	sub    $0xc,%esp
40000ec1:	56                   	push   %esi
40000ec2:	e8 9a ff ff ff       	call   40000e61 <strclone>
40000ec7:	83 c4 10             	add    $0x10,%esp
40000eca:	a3 04 42 00 40       	mov    %eax,0x40004204
40000ecf:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000ed2:	89 45 08             	mov    %eax,0x8(%ebp)
40000ed5:	eb 0a                	jmp    40000ee1 <strtok+0x47>
40000ed7:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000eda:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000ee1:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000ee4:	5b                   	pop    %ebx
40000ee5:	5e                   	pop    %esi
40000ee6:	5d                   	pop    %ebp
40000ee7:	e9 d0 fe ff ff       	jmp    40000dbc <strtoknc>

40000eec <free>:
40000eec:	55                   	push   %ebp
40000eed:	89 e5                	mov    %esp,%ebp
40000eef:	57                   	push   %edi
40000ef0:	56                   	push   %esi
40000ef1:	53                   	push   %ebx
40000ef2:	83 ec 08             	sub    $0x8,%esp
40000ef5:	8b 15 0c 42 00 40    	mov    0x4000420c,%edx
40000efb:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000efe:	89 d0                	mov    %edx,%eax
40000f00:	e9 b8 00 00 00       	jmp    40000fbd <free+0xd1>
40000f05:	3b 48 04             	cmp    0x4(%eax),%ecx
40000f08:	0f 85 ac 00 00 00    	jne    40000fba <free+0xce>
40000f0e:	31 c9                	xor    %ecx,%ecx
40000f10:	eb 23                	jmp    40000f35 <free+0x49>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f12:	39 c2                	cmp    %eax,%edx
40000f14:	75 1a                	jne    40000f30 <free+0x44>
    return (m_z << 16) + m_w;
40000f16:	85 c9                	test   %ecx,%ecx
40000f18:	8b 50 08             	mov    0x8(%eax),%edx
40000f1b:	75 0e                	jne    40000f2b <free+0x3f>
}
40000f1d:	89 15 0c 42 00 40    	mov    %edx,0x4000420c
40000f23:	8b 0d 10 42 00 40    	mov    0x40004210,%ecx
40000f29:	eb 10                	jmp    40000f3b <free+0x4f>

int main(int argc, char* args[])
{
40000f2b:	89 51 08             	mov    %edx,0x8(%ecx)
40000f2e:	eb f3                	jmp    40000f23 <free+0x37>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f30:	89 d1                	mov    %edx,%ecx
40000f32:	8b 52 08             	mov    0x8(%edx),%edx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f35:	85 d2                	test   %edx,%edx
40000f37:	75 d9                	jne    40000f12 <free+0x26>
40000f39:	eb e8                	jmp    40000f23 <free+0x37>
40000f3b:	89 ca                	mov    %ecx,%edx
40000f3d:	eb 6d                	jmp    40000fac <free+0xc0>
40000f3f:	8b 5a 04             	mov    0x4(%edx),%ebx
40000f42:	8b 32                	mov    (%edx),%esi
40000f44:	8b 78 04             	mov    0x4(%eax),%edi
40000f47:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000f4a:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000f4d:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f50:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f53:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000f56:	75 18                	jne    40000f70 <free+0x84>
40000f58:	89 58 04             	mov    %ebx,0x4(%eax)
40000f5b:	31 f6                	xor    %esi,%esi
40000f5d:	89 cb                	mov    %ecx,%ebx
40000f5f:	eb 09                	jmp    40000f6a <free+0x7e>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f61:	39 d3                	cmp    %edx,%ebx
40000f63:	74 29                	je     40000f8e <free+0xa2>
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f65:	89 de                	mov    %ebx,%esi
40000f67:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f6a:	85 db                	test   %ebx,%ebx
40000f6c:	75 f3                	jne    40000f61 <free+0x75>
40000f6e:	eb cb                	jmp    40000f3b <free+0x4f>
40000f70:	8b 38                	mov    (%eax),%edi
40000f72:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f75:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f78:	03 7d f0             	add    -0x10(%ebp),%edi
40000f7b:	39 fb                	cmp    %edi,%ebx
40000f7d:	75 2a                	jne    40000fa9 <free+0xbd>
40000f7f:	03 75 f0             	add    -0x10(%ebp),%esi
40000f82:	89 cb                	mov    %ecx,%ebx
40000f84:	89 30                	mov    %esi,(%eax)
40000f86:	31 f6                	xor    %esi,%esi
40000f88:	eb 19                	jmp    40000fa3 <free+0xb7>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f8a:	39 d3                	cmp    %edx,%ebx
40000f8c:	75 10                	jne    40000f9e <free+0xb2>
    return (m_z << 16) + m_w;
40000f8e:	85 f6                	test   %esi,%esi
40000f90:	8b 53 08             	mov    0x8(%ebx),%edx
40000f93:	75 04                	jne    40000f99 <free+0xad>
}
40000f95:	89 d1                	mov    %edx,%ecx
40000f97:	eb a2                	jmp    40000f3b <free+0x4f>

int main(int argc, char* args[])
{
40000f99:	89 56 08             	mov    %edx,0x8(%esi)
40000f9c:	eb 9d                	jmp    40000f3b <free+0x4f>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f9e:	89 de                	mov    %ebx,%esi
40000fa0:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000fa3:	85 db                	test   %ebx,%ebx
40000fa5:	75 e3                	jne    40000f8a <free+0x9e>
40000fa7:	eb 92                	jmp    40000f3b <free+0x4f>
40000fa9:	8b 52 08             	mov    0x8(%edx),%edx
40000fac:	85 d2                	test   %edx,%edx
40000fae:	75 8f                	jne    40000f3f <free+0x53>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40000fb0:	89 48 08             	mov    %ecx,0x8(%eax)
        }
40000fb3:	a3 10 42 00 40       	mov    %eax,0x40004210
40000fb8:	eb 0b                	jmp    40000fc5 <free+0xd9>
40000fba:	8b 40 08             	mov    0x8(%eax),%eax
40000fbd:	85 c0                	test   %eax,%eax
40000fbf:	0f 85 40 ff ff ff    	jne    40000f05 <free+0x19>
40000fc5:	58                   	pop    %eax
40000fc6:	5a                   	pop    %edx
40000fc7:	5b                   	pop    %ebx
40000fc8:	5e                   	pop    %esi
40000fc9:	5f                   	pop    %edi
40000fca:	5d                   	pop    %ebp
40000fcb:	c3                   	ret    

40000fcc <pop_unused_node>:
40000fcc:	55                   	push   %ebp
40000fcd:	89 e5                	mov    %esp,%ebp
40000fcf:	53                   	push   %ebx
40000fd0:	83 ec 04             	sub    $0x4,%esp
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

40000fd3:	a1 08 42 00 40       	mov    0x40004208,%eax
40000fd8:	eb 45                	jmp    4000101f <pop_unused_node+0x53>
40000fda:	83 ec 0c             	sub    $0xc,%esp
40000fdd:	6a 01                	push   $0x1
40000fdf:	e8 5b 02 00 00       	call   4000123f <vmm_alloc_cont>
40000fe4:	83 c4 0c             	add    $0xc,%esp
40000fe7:	89 c3                	mov    %eax,%ebx
40000fe9:	68 00 10 00 00       	push   $0x1000
40000fee:	6a 00                	push   $0x0
40000ff0:	50                   	push   %eax
40000ff1:	e8 a6 fc ff ff       	call   40000c9c <memset>
40000ff6:	8b 15 08 42 00 40    	mov    0x40004208,%edx
40000ffc:	8d 43 0c             	lea    0xc(%ebx),%eax
40000fff:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40001005:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001008:	89 50 08             	mov    %edx,0x8(%eax)
4000100b:	89 c2                	mov    %eax,%edx
4000100d:	83 c0 0c             	add    $0xc,%eax
40001010:	39 c8                	cmp    %ecx,%eax
40001012:	75 f4                	jne    40001008 <pop_unused_node+0x3c>
40001014:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
4000101a:	a3 08 42 00 40       	mov    %eax,0x40004208
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

4000101f:	85 c0                	test   %eax,%eax
40001021:	74 b7                	je     40000fda <pop_unused_node+0xe>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40001023:	8b 50 08             	mov    0x8(%eax),%edx
40001026:	85 c0                	test   %eax,%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40001028:	89 15 08 42 00 40    	mov    %edx,0x40004208
4000102e:	74 aa                	je     40000fda <pop_unused_node+0xe>
40001030:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40001033:	c9                   	leave  
40001034:	c3                   	ret    

40001035 <malloc>:
40001035:	55                   	push   %ebp
40001036:	89 e5                	mov    %esp,%ebp
40001038:	57                   	push   %edi
40001039:	56                   	push   %esi
4000103a:	53                   	push   %ebx
4000103b:	83 ec 1c             	sub    $0x1c,%esp
4000103e:	a1 10 42 00 40       	mov    0x40004210,%eax
40001043:	8b 75 08             	mov    0x8(%ebp),%esi
40001046:	89 c3                	mov    %eax,%ebx
40001048:	eb 07                	jmp    40001051 <malloc+0x1c>
4000104a:	39 33                	cmp    %esi,(%ebx)
4000104c:	73 0c                	jae    4000105a <malloc+0x25>
4000104e:	8b 5b 08             	mov    0x8(%ebx),%ebx
40001051:	85 db                	test   %ebx,%ebx
40001053:	75 f5                	jne    4000104a <malloc+0x15>
40001055:	e9 93 00 00 00       	jmp    400010ed <malloc+0xb8>
4000105a:	8b 3b                	mov    (%ebx),%edi
4000105c:	31 d2                	xor    %edx,%edx
4000105e:	29 f7                	sub    %esi,%edi
40001060:	89 33                	mov    %esi,(%ebx)
40001062:	eb 4b                	jmp    400010af <malloc+0x7a>
40001064:	e8 63 ff ff ff       	call   40000fcc <pop_unused_node>
40001069:	8b 13                	mov    (%ebx),%edx
4000106b:	03 53 04             	add    0x4(%ebx),%edx
4000106e:	29 f7                	sub    %esi,%edi
40001070:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001073:	8b 15 10 42 00 40    	mov    0x40004210,%edx
40001079:	89 50 08             	mov    %edx,0x8(%eax)
4000107c:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000107e:	a3 10 42 00 40       	mov    %eax,0x40004210

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001083:	a1 0c 42 00 40       	mov    0x4000420c,%eax
40001088:	89 43 08             	mov    %eax,0x8(%ebx)
        }
4000108b:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
40001091:	eb 4f                	jmp    400010e2 <malloc+0xad>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001093:	39 d8                	cmp    %ebx,%eax
40001095:	75 13                	jne    400010aa <malloc+0x75>
    return (m_z << 16) + m_w;
40001097:	85 d2                	test   %edx,%edx
40001099:	8b 43 08             	mov    0x8(%ebx),%eax
4000109c:	75 07                	jne    400010a5 <malloc+0x70>
}
4000109e:	a3 10 42 00 40       	mov    %eax,0x40004210
400010a3:	eb 0e                	jmp    400010b3 <malloc+0x7e>

int main(int argc, char* args[])
{
400010a5:	89 42 08             	mov    %eax,0x8(%edx)
400010a8:	eb 09                	jmp    400010b3 <malloc+0x7e>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
400010aa:	89 c2                	mov    %eax,%edx
400010ac:	8b 40 08             	mov    0x8(%eax),%eax
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
400010af:	85 c0                	test   %eax,%eax
400010b1:	75 e0                	jne    40001093 <malloc+0x5e>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
400010b3:	a1 0c 42 00 40       	mov    0x4000420c,%eax
400010b8:	85 ff                	test   %edi,%edi

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
400010ba:	89 43 08             	mov    %eax,0x8(%ebx)
        }
400010bd:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
400010c3:	74 1d                	je     400010e2 <malloc+0xad>
400010c5:	e8 02 ff ff ff       	call   40000fcc <pop_unused_node>
400010ca:	8b 13                	mov    (%ebx),%edx
400010cc:	03 53 04             	add    0x4(%ebx),%edx
400010cf:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
400010d2:	8b 15 10 42 00 40    	mov    0x40004210,%edx
400010d8:	89 50 08             	mov    %edx,0x8(%eax)
400010db:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
400010dd:	a3 10 42 00 40       	mov    %eax,0x40004210
400010e2:	8b 43 04             	mov    0x4(%ebx),%eax
400010e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
400010e8:	5b                   	pop    %ebx
400010e9:	5e                   	pop    %esi
400010ea:	5f                   	pop    %edi
400010eb:	5d                   	pop    %ebp
400010ec:	c3                   	ret    
400010ed:	89 f0                	mov    %esi,%eax
400010ef:	89 f7                	mov    %esi,%edi
400010f1:	c1 ef 0c             	shr    $0xc,%edi
400010f4:	25 ff 0f 00 00       	and    $0xfff,%eax
400010f9:	83 f8 01             	cmp    $0x1,%eax
400010fc:	83 df ff             	sbb    $0xffffffff,%edi
400010ff:	83 ec 0c             	sub    $0xc,%esp
40001102:	57                   	push   %edi
40001103:	e8 37 01 00 00       	call   4000123f <vmm_alloc_cont>
40001108:	c1 e7 0c             	shl    $0xc,%edi
4000110b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000110e:	e8 b9 fe ff ff       	call   40000fcc <pop_unused_node>
40001113:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001116:	83 c4 10             	add    $0x10,%esp
40001119:	89 c3                	mov    %eax,%ebx
4000111b:	89 50 04             	mov    %edx,0x4(%eax)
4000111e:	89 30                	mov    %esi,(%eax)
40001120:	39 f7                	cmp    %esi,%edi
40001122:	0f 86 5b ff ff ff    	jbe    40001083 <malloc+0x4e>
40001128:	e9 37 ff ff ff       	jmp    40001064 <malloc+0x2f>

4000112d <realloc>:
4000112d:	55                   	push   %ebp
4000112e:	89 e5                	mov    %esp,%ebp
40001130:	56                   	push   %esi
40001131:	53                   	push   %ebx
40001132:	8b 1d 0c 42 00 40    	mov    0x4000420c,%ebx
40001138:	8b 55 08             	mov    0x8(%ebp),%edx
4000113b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000113e:	eb 3e                	jmp    4000117e <realloc+0x51>
40001140:	3b 53 04             	cmp    0x4(%ebx),%edx
40001143:	75 36                	jne    4000117b <realloc+0x4e>
40001145:	85 c0                	test   %eax,%eax
40001147:	75 0b                	jne    40001154 <realloc+0x27>
40001149:	52                   	push   %edx
4000114a:	31 f6                	xor    %esi,%esi
4000114c:	e8 9b fd ff ff       	call   40000eec <free>
40001151:	5b                   	pop    %ebx
40001152:	eb 30                	jmp    40001184 <realloc+0x57>
40001154:	83 ec 0c             	sub    $0xc,%esp
40001157:	50                   	push   %eax
40001158:	e8 d8 fe ff ff       	call   40001035 <malloc>
4000115d:	83 c4 0c             	add    $0xc,%esp
40001160:	89 c6                	mov    %eax,%esi
40001162:	ff 33                	pushl  (%ebx)
40001164:	ff 73 04             	pushl  0x4(%ebx)
40001167:	50                   	push   %eax
40001168:	e8 4b fb ff ff       	call   40000cb8 <memcpy>
4000116d:	59                   	pop    %ecx
4000116e:	ff 73 04             	pushl  0x4(%ebx)
40001171:	e8 76 fd ff ff       	call   40000eec <free>
40001176:	83 c4 10             	add    $0x10,%esp
40001179:	eb 09                	jmp    40001184 <realloc+0x57>
4000117b:	8b 5b 08             	mov    0x8(%ebx),%ebx
4000117e:	85 db                	test   %ebx,%ebx
40001180:	75 be                	jne    40001140 <realloc+0x13>
40001182:	31 f6                	xor    %esi,%esi
40001184:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001187:	89 f0                	mov    %esi,%eax
40001189:	5b                   	pop    %ebx
4000118a:	5e                   	pop    %esi
4000118b:	5d                   	pop    %ebp
4000118c:	c3                   	ret    

4000118d <calloc>:
4000118d:	55                   	push   %ebp
4000118e:	89 e5                	mov    %esp,%ebp
40001190:	56                   	push   %esi
40001191:	53                   	push   %ebx
40001192:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40001195:	83 ec 0c             	sub    $0xc,%esp
40001198:	0f af 5d 08          	imul   0x8(%ebp),%ebx
4000119c:	53                   	push   %ebx
4000119d:	e8 93 fe ff ff       	call   40001035 <malloc>
400011a2:	83 c4 10             	add    $0x10,%esp
400011a5:	89 c6                	mov    %eax,%esi
400011a7:	85 c0                	test   %eax,%eax
400011a9:	74 0d                	je     400011b8 <calloc+0x2b>
400011ab:	50                   	push   %eax
400011ac:	53                   	push   %ebx
400011ad:	6a 00                	push   $0x0
400011af:	56                   	push   %esi
400011b0:	e8 e7 fa ff ff       	call   40000c9c <memset>
400011b5:	83 c4 10             	add    $0x10,%esp
400011b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
400011bb:	89 f0                	mov    %esi,%eax
400011bd:	5b                   	pop    %ebx
400011be:	5e                   	pop    %esi
400011bf:	5d                   	pop    %ebp
400011c0:	c3                   	ret    
400011c1:	00 00                	add    %al,(%eax)
	...

400011c4 <print_memstat>:

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }

400011c4:	55                   	push   %ebp
400011c5:	89 e5                	mov    %esp,%ebp
400011c7:	83 ec 34             	sub    $0x34,%esp
}
400011ca:	8d 45 e0             	lea    -0x20(%ebp),%eax

    return 0;
}
400011cd:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
400011d4:	50                   	push   %eax

    return 0;
}
400011d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400011dc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400011f8:	e8 7f 00 00 00       	call   4000127c <syscall>
400011fd:	83 c4 10             	add    $0x10,%esp
40001200:	c9                   	leave  
40001201:	c3                   	ret    

40001202 <vmm_free>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
40001202:	55                   	push   %ebp
40001203:	89 e5                	mov    %esp,%ebp
40001205:	83 ec 34             	sub    $0x34,%esp
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

40001208:	8b 45 08             	mov    0x8(%ebp),%eax
4000120b:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
40001212:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
40001215:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001218:	50                   	push   %eax
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

40001219:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001220:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001227:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000122e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
40001235:	e8 42 00 00 00       	call   4000127c <syscall>
4000123a:	83 c4 10             	add    $0x10,%esp
            rnd[i] = get_next();
4000123d:	c9                   	leave  
4000123e:	c3                   	ret    

4000123f <vmm_alloc_cont>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
4000123f:	55                   	push   %ebp
40001240:	89 e5                	mov    %esp,%ebp
40001242:	83 ec 34             	sub    $0x34,%esp
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40001245:	8b 45 08             	mov    0x8(%ebp),%eax
40001248:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
4000124f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001252:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001255:	50                   	push   %eax
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40001256:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000125d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001264:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000126b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001272:	e8 05 00 00 00       	call   4000127c <syscall>
    return (m_z << 16) + m_w;
}

40001277:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000127a:	c9                   	leave  
4000127b:	c3                   	ret    

4000127c <syscall>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
4000127c:	55                   	push   %ebp
4000127d:	89 e5                	mov    %esp,%ebp
4000127f:	57                   	push   %edi
40001280:	56                   	push   %esi
40001281:	53                   	push   %ebx
40001282:	83 ec 10             	sub    $0x10,%esp
#include "stdlib.h"
40001285:	8b 55 08             	mov    0x8(%ebp),%edx
40001288:	8b 45 08             	mov    0x8(%ebp),%eax
4000128b:	8b 72 0c             	mov    0xc(%edx),%esi
4000128e:	8b 00                	mov    (%eax),%eax
40001290:	89 75 e4             	mov    %esi,-0x1c(%ebp)
40001293:	8b 5a 04             	mov    0x4(%edx),%ebx
40001296:	8b 4a 08             	mov    0x8(%edx),%ecx
40001299:	8b 72 10             	mov    0x10(%edx),%esi
4000129c:	8b 7a 14             	mov    0x14(%edx),%edi
4000129f:	89 45 ec             	mov    %eax,-0x14(%ebp)
400012a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400012a5:	cd 30                	int    $0x30
400012a7:	89 55 e8             	mov    %edx,-0x18(%ebp)
400012aa:	8b 55 08             	mov    0x8(%ebp),%edx
400012ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
400012b0:	89 02                	mov    %eax,(%edx)
400012b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
400012b5:	89 5a 04             	mov    %ebx,0x4(%edx)
400012b8:	89 4a 08             	mov    %ecx,0x8(%edx)
400012bb:	89 42 0c             	mov    %eax,0xc(%edx)
400012be:	89 72 10             	mov    %esi,0x10(%edx)
400012c1:	89 7a 14             	mov    %edi,0x14(%edx)
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");
400012c4:	83 c4 10             	add    $0x10,%esp
400012c7:	5b                   	pop    %ebx
400012c8:	5e                   	pop    %esi
400012c9:	5f                   	pop    %edi
400012ca:	5d                   	pop    %ebp
400012cb:	c3                   	ret    
