
../../initrfs/ibin/urnd_prov:     file format elf32-i386
../../initrfs/ibin/urnd_prov
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40001555

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x0000182b memsz 0x0000182b flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x000011e8 memsz 0x00002220 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000182b  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       000001e8  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000220  40004000  40004000  000041e8  2**5
                  ALLOC
  4 .stab         00004518  00000000  00000000  000041e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007e  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY
  6 .stabstr      000018c7  00000000  00000000  0000877e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 urnd_prov.c
40000000 l     F .text	0000007a get_next
00000000 l    df *ABS*	00000000 stdio.c
40000170 l     F .text	00000043 getpmhandle
400001b3 l     F .text	00000015 getstdout
400001c8 l     F .text	00000015 getstdin
400001dd l     F .text	00000015 getstderr
40000301 l     F .text	0000006c printrwerror
4000036d l     F .text	00000041 frwrite
40000405 l     F .text	00000041 frread
400004e0 l     F .text	00000025 resolveHandle
40000665 l     F .text	0000004a kputc
4000073d l     F .text	00000043 kputs
400007e7 l     F .text	0000007c putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000d38 l     F .text	00000057 remove_from_list
40000d8f l     F .text	00000018 append_to_list
40000da7 l     F .text	00000031 pop_from_list
40000dd8 l     F .text	00000062 allocate_unused_nodes
40000e3a l     F .text	0000003b pop_unused_node
40000e75 l     F .text	000000c8 merge_into_frees
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
00000000 l    df *ABS*	00000000 process.c
40001304 l     F .text	00000040 return_rpc
400013c4 l     F .text	00000043 register_irq_rpc_syscall
40004020 l     O .bss	00000200 irq_handlers
4000143a l     F .text	00000088 _handle_rpc
400031d0 l     O .rodata	00000018 C.8.1010
40001511 l     F .text	00000044 getargs
4000163e g     F .text	00000040 getExecPath
400006af g     F .text	00000020 putchar
40000b6d g     F .text	00000023 strcpy
400015ad g     F .text	00000041 yield
40000863 g     F .text	0000017a printf
4000128c g     F .text	00000077 syscall
4000053f g     F .text	00000062 fgets
400005a1 g     F .text	00000016 getc
40000a0e g     F .text	00000045 memcpy
40000780 g     F .text	00000018 puts
40000f3d g     F .text	00000166 malloc
40001384 g     F .text	00000040 fetch_rpc_data
40000c28 g     F .text	0000010d strtoknc
4000167e g     F .text	00000043 changeExecPath
40004010 g     O .bss	00000004 first_free
40000234 g     F .text	00000018 setstdout
40002000 g     O .data	00000004 m_z
400010a3 g     F .text	0000003f calloc
400011c8 g     F .text	00000043 vmm_alloc_cont
400016ef g     F .text	00000042 exec
40001555 g     F .text	00000058 _start
400010e2 g     F .text	0000009e realloc
400014c2 g     F .text	0000004f set_rpc_handler
40000bc7 g     F .text	00000061 strtok
40000a53 g     F .text	0000009b memcmp
40002004 g     O .data	00000004 m_w
40000446 g     F .text	00000057 fread
40004008 g     O .bss	00000004 first_unused
4000027c g     F .text	00000042 fopen
400009e0 g     F .text	0000002e memset
4000007a g     F .text	000000af main
400002be g     F .text	00000043 fclose
400005b7 g     F .text	00000015 getchar
400005cc g     F .text	00000099 getln
40004004 g     O .bss	00000004 fr
400006cf g     F .text	00000021 putc
40000aee g     F .text	0000004f strcmp
40000505 g     F .text	0000003a fgetc
400016c1 g     F .text	0000002e cd
40004000 g     O .bss	00000004 sp
4000400c g     O .bss	00000004 first_used
400006f0 g     F .text	0000004d fputc
400003ae g     F .text	00000057 fwrite
4000024c g     F .text	00000018 setstdin
40001731 g     F .text	00000039 texec
40000b90 g     F .text	00000037 strclone
400015ee g     F .text	00000050 exit
40001407 g     F .text	00000033 register_irq_handler
400001f2 g     F .text	00000042 fopenpmhandle
4000120b g     F .text	00000040 vmm_free
4000176a g     F .text	000000c1 printFilesystemError
40000b3d g     F .text	00000030 strlen
4000012c g     F .text	00000044 getLastVFSErr
40000798 g     F .text	0000004f fputs
4000049d g     F .text	00000043 fmkfifo
40001344 g     F .text	00000040 call_rpc
40000264 g     F .text	00000018 setstderr
4000124b g     F .text	00000041 print_memstat
40001180 g     F .text	00000048 free



Disassembly of section .text:

40000000 <get_next>:
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000003:	a1 00 20 00 40       	mov    0x40002000,%eax
40000008:	0f b7 d0             	movzwl %ax,%edx
4000000b:	89 d0                	mov    %edx,%eax
4000000d:	c1 e0 03             	shl    $0x3,%eax
40000010:	01 d0                	add    %edx,%eax
40000012:	c1 e0 06             	shl    $0x6,%eax
40000015:	01 d0                	add    %edx,%eax
40000017:	01 c0                	add    %eax,%eax
40000019:	01 d0                	add    %edx,%eax
4000001b:	c1 e0 02             	shl    $0x2,%eax
4000001e:	01 d0                	add    %edx,%eax
40000020:	c1 e0 03             	shl    $0x3,%eax
40000023:	8d 14 10             	lea    (%eax,%edx,1),%edx
40000026:	a1 00 20 00 40       	mov    0x40002000,%eax
4000002b:	c1 e8 10             	shr    $0x10,%eax
4000002e:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000031:	a3 00 20 00 40       	mov    %eax,0x40002000
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000036:	a1 04 20 00 40       	mov    0x40002004,%eax
4000003b:	0f b7 d0             	movzwl %ax,%edx
4000003e:	89 d0                	mov    %edx,%eax
40000040:	c1 e0 02             	shl    $0x2,%eax
40000043:	01 d0                	add    %edx,%eax
40000045:	89 c2                	mov    %eax,%edx
40000047:	c1 e2 04             	shl    $0x4,%edx
4000004a:	29 c2                	sub    %eax,%edx
4000004c:	89 d0                	mov    %edx,%eax
4000004e:	c1 e0 04             	shl    $0x4,%eax
40000051:	29 d0                	sub    %edx,%eax
40000053:	c1 e0 04             	shl    $0x4,%eax
40000056:	8b 15 04 20 00 40    	mov    0x40002004,%edx
4000005c:	c1 ea 10             	shr    $0x10,%edx
4000005f:	01 d0                	add    %edx,%eax
40000061:	a3 04 20 00 40       	mov    %eax,0x40002004
    return (m_z << 16) + m_w;
40000066:	a1 00 20 00 40       	mov    0x40002000,%eax
4000006b:	89 c2                	mov    %eax,%edx
4000006d:	c1 e2 10             	shl    $0x10,%edx
40000070:	a1 04 20 00 40       	mov    0x40002004,%eax
40000075:	8d 04 02             	lea    (%edx,%eax,1),%eax
}
40000078:	5d                   	pop    %ebp
40000079:	c3                   	ret    

4000007a <main>:

int main(int argc, char* args[])
{
4000007a:	8d 4c 24 04          	lea    0x4(%esp),%ecx
4000007e:	83 e4 f0             	and    $0xfffffff0,%esp
40000081:	ff 71 fc             	pushl  -0x4(%ecx)
40000084:	55                   	push   %ebp
40000085:	89 e5                	mov    %esp,%ebp
40000087:	53                   	push   %ebx
40000088:	51                   	push   %ecx
40000089:	83 ec 20             	sub    $0x20,%esp
    HANDLE out = fmkfifo("/dev/urandom");
4000008c:	83 ec 0c             	sub    $0xc,%esp
4000008f:	68 00 30 00 40       	push   $0x40003000
40000094:	e8 04 04 00 00       	call   4000049d <fmkfifo>
40000099:	83 c4 10             	add    $0x10,%esp
4000009c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
4000009f:	83 ec 08             	sub    $0x8,%esp
400000a2:	6a 02                	push   $0x2
400000a4:	68 0d 30 00 40       	push   $0x4000300d
400000a9:	e8 ce 01 00 00       	call   4000027c <fopen>
400000ae:	83 c4 10             	add    $0x10,%esp
400000b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400000b4:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
400000b8:	83 ec 04             	sub    $0x4,%esp
400000bb:	6a 01                	push   $0x1
400000bd:	8d 45 e7             	lea    -0x19(%ebp),%eax
400000c0:	50                   	push   %eax
400000c1:	ff 75 ec             	pushl  -0x14(%ebp)
400000c4:	e8 e5 02 00 00       	call   400003ae <fwrite>
400000c9:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
400000cc:	83 ec 0c             	sub    $0xc,%esp
400000cf:	ff 75 ec             	pushl  -0x14(%ebp)
400000d2:	e8 e7 01 00 00       	call   400002be <fclose>
400000d7:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
400000da:	83 ec 0c             	sub    $0xc,%esp
400000dd:	68 00 02 00 00       	push   $0x200
400000e2:	e8 56 0e 00 00       	call   40000f3d <malloc>
400000e7:	83 c4 10             	add    $0x10,%esp
400000ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(1) {
        for(int i = 0; i < 128; i++) {
400000ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400000f4:	eb 15                	jmp    4000010b <main+0x91>
            rnd[i] = get_next();
400000f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400000f9:	c1 e0 02             	shl    $0x2,%eax
400000fc:	89 c3                	mov    %eax,%ebx
400000fe:	03 5d f0             	add    -0x10(%ebp),%ebx
40000101:	e8 fa fe ff ff       	call   40000000 <get_next>
40000106:	89 03                	mov    %eax,(%ebx)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000108:	ff 45 f4             	incl   -0xc(%ebp)
4000010b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
4000010f:	7e e5                	jle    400000f6 <main+0x7c>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000111:	83 ec 04             	sub    $0x4,%esp
40000114:	68 00 02 00 00       	push   $0x200
40000119:	ff 75 f0             	pushl  -0x10(%ebp)
4000011c:	ff 75 e8             	pushl  -0x18(%ebp)
4000011f:	e8 8a 02 00 00       	call   400003ae <fwrite>
40000124:	83 c4 10             	add    $0x10,%esp
    }
40000127:	eb c4                	jmp    400000ed <main+0x73>
40000129:	00 00                	add    %al,(%eax)
	...

4000012c <getLastVFSErr>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
4000012c:	55                   	push   %ebp
4000012d:	89 e5                	mov    %esp,%ebp
4000012f:	83 ec 28             	sub    $0x28,%esp
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000132:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
40000139:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000140:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000147:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000014e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000155:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
4000015c:	83 ec 0c             	sub    $0xc,%esp
4000015f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000162:	50                   	push   %eax
40000163:	e8 24 11 00 00       	call   4000128c <syscall>
40000168:	83 c4 10             	add    $0x10,%esp

int main(int argc, char* args[])
4000016b:	8b 45 e0             	mov    -0x20(%ebp),%eax
{
4000016e:	c9                   	leave  
4000016f:	c3                   	ret    

40000170 <getpmhandle>:
    HANDLE out = fmkfifo("/dev/urandom");

40000170:	55                   	push   %ebp
40000171:	89 e5                	mov    %esp,%ebp
40000173:	83 ec 28             	sub    $0x28,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000176:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
4000017d:	8b 45 08             	mov    0x8(%ebp),%eax
40000180:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000183:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000018a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000191:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000198:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
4000019f:	83 ec 0c             	sub    $0xc,%esp
400001a2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001a5:	50                   	push   %eax
400001a6:	e8 e1 10 00 00       	call   4000128c <syscall>
400001ab:	83 c4 10             	add    $0x10,%esp

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400001ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
    }
400001b1:	c9                   	leave  
400001b2:	c3                   	ret    

400001b3 <getstdout>:

    return 0;
400001b3:	55                   	push   %ebp
400001b4:	89 e5                	mov    %esp,%ebp
400001b6:	83 ec 08             	sub    $0x8,%esp
400001b9:	83 ec 0c             	sub    $0xc,%esp
400001bc:	6a 00                	push   $0x0
400001be:	e8 ad ff ff ff       	call   40000170 <getpmhandle>
400001c3:	83 c4 10             	add    $0x10,%esp
400001c6:	c9                   	leave  
400001c7:	c3                   	ret    

400001c8 <getstdin>:
}
400001c8:	55                   	push   %ebp
400001c9:	89 e5                	mov    %esp,%ebp
400001cb:	83 ec 08             	sub    $0x8,%esp
400001ce:	83 ec 0c             	sub    $0xc,%esp
400001d1:	6a 01                	push   $0x1
400001d3:	e8 98 ff ff ff       	call   40000170 <getpmhandle>
400001d8:	83 c4 10             	add    $0x10,%esp
400001db:	c9                   	leave  
400001dc:	c3                   	ret    

400001dd <getstderr>:
400001dd:	55                   	push   %ebp
400001de:	89 e5                	mov    %esp,%ebp
400001e0:	83 ec 08             	sub    $0x8,%esp
400001e3:	83 ec 0c             	sub    $0xc,%esp
400001e6:	6a 02                	push   $0x2
400001e8:	e8 83 ff ff ff       	call   40000170 <getpmhandle>
400001ed:	83 c4 10             	add    $0x10,%esp
400001f0:	c9                   	leave  
400001f1:	c3                   	ret    

400001f2 <fopenpmhandle>:
400001f2:	55                   	push   %ebp
400001f3:	89 e5                	mov    %esp,%ebp
400001f5:	83 ec 28             	sub    $0x28,%esp
400001f8:	8b 45 0c             	mov    0xc(%ebp),%eax
400001fb:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000202:	8b 55 08             	mov    0x8(%ebp),%edx
40000205:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000208:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000020b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000212:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000219:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000220:	83 ec 0c             	sub    $0xc,%esp
40000223:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000226:	50                   	push   %eax
40000227:	e8 60 10 00 00       	call   4000128c <syscall>
4000022c:	83 c4 10             	add    $0x10,%esp
4000022f:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000232:	c9                   	leave  
40000233:	c3                   	ret    

40000234 <setstdout>:
40000234:	55                   	push   %ebp
40000235:	89 e5                	mov    %esp,%ebp
40000237:	83 ec 08             	sub    $0x8,%esp
4000023a:	83 ec 08             	sub    $0x8,%esp
4000023d:	ff 75 08             	pushl  0x8(%ebp)
40000240:	6a 00                	push   $0x0
40000242:	e8 ab ff ff ff       	call   400001f2 <fopenpmhandle>
40000247:	83 c4 10             	add    $0x10,%esp
4000024a:	c9                   	leave  
4000024b:	c3                   	ret    

4000024c <setstdin>:
4000024c:	55                   	push   %ebp
4000024d:	89 e5                	mov    %esp,%ebp
4000024f:	83 ec 08             	sub    $0x8,%esp
40000252:	83 ec 08             	sub    $0x8,%esp
40000255:	ff 75 08             	pushl  0x8(%ebp)
40000258:	6a 01                	push   $0x1
4000025a:	e8 93 ff ff ff       	call   400001f2 <fopenpmhandle>
4000025f:	83 c4 10             	add    $0x10,%esp
40000262:	c9                   	leave  
40000263:	c3                   	ret    

40000264 <setstderr>:
40000264:	55                   	push   %ebp
40000265:	89 e5                	mov    %esp,%ebp
40000267:	83 ec 08             	sub    $0x8,%esp
4000026a:	83 ec 08             	sub    $0x8,%esp
4000026d:	ff 75 08             	pushl  0x8(%ebp)
40000270:	6a 02                	push   $0x2
40000272:	e8 7b ff ff ff       	call   400001f2 <fopenpmhandle>
40000277:	83 c4 10             	add    $0x10,%esp
4000027a:	c9                   	leave  
4000027b:	c3                   	ret    

4000027c <fopen>:
4000027c:	55                   	push   %ebp
4000027d:	89 e5                	mov    %esp,%ebp
4000027f:	83 ec 28             	sub    $0x28,%esp
40000282:	8b 45 08             	mov    0x8(%ebp),%eax
40000285:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
4000028c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000028f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000292:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000295:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000029c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002aa:	83 ec 0c             	sub    $0xc,%esp
400002ad:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002b0:	50                   	push   %eax
400002b1:	e8 d6 0f 00 00       	call   4000128c <syscall>
400002b6:	83 c4 10             	add    $0x10,%esp
400002b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002bc:	c9                   	leave  
400002bd:	c3                   	ret    

400002be <fclose>:
400002be:	55                   	push   %ebp
400002bf:	89 e5                	mov    %esp,%ebp
400002c1:	83 ec 28             	sub    $0x28,%esp
400002c4:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400002cb:	8b 45 08             	mov    0x8(%ebp),%eax
400002ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002d1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002ed:	83 ec 0c             	sub    $0xc,%esp
400002f0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002f3:	50                   	push   %eax
400002f4:	e8 93 0f 00 00       	call   4000128c <syscall>
400002f9:	83 c4 10             	add    $0x10,%esp
400002fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400002ff:	c9                   	leave  
40000300:	c3                   	ret    

40000301 <printrwerror>:
40000301:	55                   	push   %ebp
40000302:	89 e5                	mov    %esp,%ebp
40000304:	83 ec 08             	sub    $0x8,%esp
40000307:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
4000030b:	75 13                	jne    40000320 <printrwerror+0x1f>
4000030d:	83 ec 08             	sub    $0x8,%esp
40000310:	ff 75 08             	pushl  0x8(%ebp)
40000313:	68 20 30 00 40       	push   $0x40003020
40000318:	e8 46 05 00 00       	call   40000863 <printf>
4000031d:	83 c4 10             	add    $0x10,%esp
40000320:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
40000324:	75 13                	jne    40000339 <printrwerror+0x38>
40000326:	83 ec 08             	sub    $0x8,%esp
40000329:	ff 75 08             	pushl  0x8(%ebp)
4000032c:	68 38 30 00 40       	push   $0x40003038
40000331:	e8 2d 05 00 00       	call   40000863 <printf>
40000336:	83 c4 10             	add    $0x10,%esp
40000339:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
4000033d:	75 13                	jne    40000352 <printrwerror+0x51>
4000033f:	83 ec 08             	sub    $0x8,%esp
40000342:	ff 75 08             	pushl  0x8(%ebp)
40000345:	68 54 30 00 40       	push   $0x40003054
4000034a:	e8 14 05 00 00       	call   40000863 <printf>
4000034f:	83 c4 10             	add    $0x10,%esp
40000352:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
40000356:	75 13                	jne    4000036b <printrwerror+0x6a>
40000358:	83 ec 08             	sub    $0x8,%esp
4000035b:	ff 75 08             	pushl  0x8(%ebp)
4000035e:	68 80 30 00 40       	push   $0x40003080
40000363:	e8 fb 04 00 00       	call   40000863 <printf>
40000368:	83 c4 10             	add    $0x10,%esp
4000036b:	c9                   	leave  
4000036c:	c3                   	ret    

4000036d <frwrite>:
4000036d:	55                   	push   %ebp
4000036e:	89 e5                	mov    %esp,%ebp
40000370:	83 ec 28             	sub    $0x28,%esp
40000373:	8b 45 0c             	mov    0xc(%ebp),%eax
40000376:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
4000037d:	8b 55 08             	mov    0x8(%ebp),%edx
40000380:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000383:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000386:	8b 45 10             	mov    0x10(%ebp),%eax
40000389:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000038c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000039a:	83 ec 0c             	sub    $0xc,%esp
4000039d:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003a0:	50                   	push   %eax
400003a1:	e8 e6 0e 00 00       	call   4000128c <syscall>
400003a6:	83 c4 10             	add    $0x10,%esp
400003a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003ac:	c9                   	leave  
400003ad:	c3                   	ret    

400003ae <fwrite>:
400003ae:	55                   	push   %ebp
400003af:	89 e5                	mov    %esp,%ebp
400003b1:	83 ec 18             	sub    $0x18,%esp
400003b4:	83 ec 04             	sub    $0x4,%esp
400003b7:	ff 75 10             	pushl  0x10(%ebp)
400003ba:	ff 75 0c             	pushl  0xc(%ebp)
400003bd:	ff 75 08             	pushl  0x8(%ebp)
400003c0:	e8 a8 ff ff ff       	call   4000036d <frwrite>
400003c5:	83 c4 10             	add    $0x10,%esp
400003c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
400003cb:	eb 1c                	jmp    400003e9 <fwrite+0x3b>
400003cd:	e8 db 11 00 00       	call   400015ad <yield>
400003d2:	83 ec 04             	sub    $0x4,%esp
400003d5:	ff 75 10             	pushl  0x10(%ebp)
400003d8:	ff 75 0c             	pushl  0xc(%ebp)
400003db:	ff 75 08             	pushl  0x8(%ebp)
400003de:	e8 8a ff ff ff       	call   4000036d <frwrite>
400003e3:	83 c4 10             	add    $0x10,%esp
400003e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
400003e9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
400003ed:	74 de                	je     400003cd <fwrite+0x1f>
400003ef:	83 ec 08             	sub    $0x8,%esp
400003f2:	ff 75 f4             	pushl  -0xc(%ebp)
400003f5:	ff 75 08             	pushl  0x8(%ebp)
400003f8:	e8 04 ff ff ff       	call   40000301 <printrwerror>
400003fd:	83 c4 10             	add    $0x10,%esp
40000400:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000403:	c9                   	leave  
40000404:	c3                   	ret    

40000405 <frread>:
40000405:	55                   	push   %ebp
40000406:	89 e5                	mov    %esp,%ebp
40000408:	83 ec 28             	sub    $0x28,%esp
4000040b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000040e:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
40000415:	8b 55 08             	mov    0x8(%ebp),%edx
40000418:	89 55 e4             	mov    %edx,-0x1c(%ebp)
4000041b:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000041e:	8b 45 10             	mov    0x10(%ebp),%eax
40000421:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000424:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000042b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000432:	83 ec 0c             	sub    $0xc,%esp
40000435:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000438:	50                   	push   %eax
40000439:	e8 4e 0e 00 00       	call   4000128c <syscall>
4000043e:	83 c4 10             	add    $0x10,%esp
40000441:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000444:	c9                   	leave  
40000445:	c3                   	ret    

40000446 <fread>:
40000446:	55                   	push   %ebp
40000447:	89 e5                	mov    %esp,%ebp
40000449:	83 ec 18             	sub    $0x18,%esp
4000044c:	83 ec 04             	sub    $0x4,%esp
4000044f:	ff 75 10             	pushl  0x10(%ebp)
40000452:	ff 75 0c             	pushl  0xc(%ebp)
40000455:	ff 75 08             	pushl  0x8(%ebp)
40000458:	e8 a8 ff ff ff       	call   40000405 <frread>
4000045d:	83 c4 10             	add    $0x10,%esp
40000460:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000463:	eb 1c                	jmp    40000481 <fread+0x3b>
40000465:	e8 43 11 00 00       	call   400015ad <yield>
4000046a:	83 ec 04             	sub    $0x4,%esp
4000046d:	ff 75 10             	pushl  0x10(%ebp)
40000470:	ff 75 0c             	pushl  0xc(%ebp)
40000473:	ff 75 08             	pushl  0x8(%ebp)
40000476:	e8 8a ff ff ff       	call   40000405 <frread>
4000047b:	83 c4 10             	add    $0x10,%esp
4000047e:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000481:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000485:	74 de                	je     40000465 <fread+0x1f>
40000487:	83 ec 08             	sub    $0x8,%esp
4000048a:	ff 75 f4             	pushl  -0xc(%ebp)
4000048d:	ff 75 08             	pushl  0x8(%ebp)
40000490:	e8 6c fe ff ff       	call   40000301 <printrwerror>
40000495:	83 c4 10             	add    $0x10,%esp
40000498:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000049b:	c9                   	leave  
4000049c:	c3                   	ret    

4000049d <fmkfifo>:
4000049d:	55                   	push   %ebp
4000049e:	89 e5                	mov    %esp,%ebp
400004a0:	83 ec 28             	sub    $0x28,%esp
400004a3:	8b 45 08             	mov    0x8(%ebp),%eax
400004a6:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
400004ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400004b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400004cc:	83 ec 0c             	sub    $0xc,%esp
400004cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004d2:	50                   	push   %eax
400004d3:	e8 b4 0d 00 00       	call   4000128c <syscall>
400004d8:	83 c4 10             	add    $0x10,%esp
400004db:	8b 45 e0             	mov    -0x20(%ebp),%eax
400004de:	c9                   	leave  
400004df:	c3                   	ret    

400004e0 <resolveHandle>:
400004e0:	55                   	push   %ebp
400004e1:	89 e5                	mov    %esp,%ebp
400004e3:	83 ec 08             	sub    $0x8,%esp
400004e6:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
400004ed:	77 11                	ja     40000500 <resolveHandle+0x20>
400004ef:	83 ec 0c             	sub    $0xc,%esp
400004f2:	ff 75 08             	pushl  0x8(%ebp)
400004f5:	e8 76 fc ff ff       	call   40000170 <getpmhandle>
400004fa:	83 c4 10             	add    $0x10,%esp
400004fd:	89 45 08             	mov    %eax,0x8(%ebp)
40000500:	8b 45 08             	mov    0x8(%ebp),%eax
40000503:	c9                   	leave  
40000504:	c3                   	ret    

40000505 <fgetc>:
40000505:	55                   	push   %ebp
40000506:	89 e5                	mov    %esp,%ebp
40000508:	83 ec 18             	sub    $0x18,%esp
4000050b:	83 ec 0c             	sub    $0xc,%esp
4000050e:	ff 75 08             	pushl  0x8(%ebp)
40000511:	e8 ca ff ff ff       	call   400004e0 <resolveHandle>
40000516:	83 c4 10             	add    $0x10,%esp
40000519:	89 45 08             	mov    %eax,0x8(%ebp)
4000051c:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000520:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000524:	74 14                	je     4000053a <fgetc+0x35>
40000526:	83 ec 04             	sub    $0x4,%esp
40000529:	6a 01                	push   $0x1
4000052b:	8d 45 f7             	lea    -0x9(%ebp),%eax
4000052e:	50                   	push   %eax
4000052f:	ff 75 08             	pushl  0x8(%ebp)
40000532:	e8 0f ff ff ff       	call   40000446 <fread>
40000537:	83 c4 10             	add    $0x10,%esp
4000053a:	8a 45 f7             	mov    -0x9(%ebp),%al
4000053d:	c9                   	leave  
4000053e:	c3                   	ret    

4000053f <fgets>:
4000053f:	55                   	push   %ebp
40000540:	89 e5                	mov    %esp,%ebp
40000542:	53                   	push   %ebx
40000543:	83 ec 14             	sub    $0x14,%esp
40000546:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000054d:	eb 38                	jmp    40000587 <fgets+0x48>
4000054f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000552:	89 c3                	mov    %eax,%ebx
40000554:	03 5d 08             	add    0x8(%ebp),%ebx
40000557:	83 ec 0c             	sub    $0xc,%esp
4000055a:	ff 75 10             	pushl  0x10(%ebp)
4000055d:	e8 a3 ff ff ff       	call   40000505 <fgetc>
40000562:	83 c4 10             	add    $0x10,%esp
40000565:	88 03                	mov    %al,(%ebx)
40000567:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000056a:	03 45 08             	add    0x8(%ebp),%eax
4000056d:	8a 00                	mov    (%eax),%al
4000056f:	84 c0                	test   %al,%al
40000571:	74 0c                	je     4000057f <fgets+0x40>
40000573:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000576:	03 45 08             	add    0x8(%ebp),%eax
40000579:	8a 00                	mov    (%eax),%al
4000057b:	84 c0                	test   %al,%al
4000057d:	75 05                	jne    40000584 <fgets+0x45>
4000057f:	8b 45 08             	mov    0x8(%ebp),%eax
40000582:	eb 18                	jmp    4000059c <fgets+0x5d>
40000584:	ff 45 f4             	incl   -0xc(%ebp)
40000587:	8b 45 0c             	mov    0xc(%ebp),%eax
4000058a:	48                   	dec    %eax
4000058b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000058e:	7f bf                	jg     4000054f <fgets+0x10>
40000590:	8b 45 0c             	mov    0xc(%ebp),%eax
40000593:	03 45 08             	add    0x8(%ebp),%eax
40000596:	c6 00 00             	movb   $0x0,(%eax)
40000599:	8b 45 08             	mov    0x8(%ebp),%eax
4000059c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
4000059f:	c9                   	leave  
400005a0:	c3                   	ret    

400005a1 <getc>:
400005a1:	55                   	push   %ebp
400005a2:	89 e5                	mov    %esp,%ebp
400005a4:	83 ec 08             	sub    $0x8,%esp
400005a7:	83 ec 0c             	sub    $0xc,%esp
400005aa:	ff 75 08             	pushl  0x8(%ebp)
400005ad:	e8 53 ff ff ff       	call   40000505 <fgetc>
400005b2:	83 c4 10             	add    $0x10,%esp
400005b5:	c9                   	leave  
400005b6:	c3                   	ret    

400005b7 <getchar>:
400005b7:	55                   	push   %ebp
400005b8:	89 e5                	mov    %esp,%ebp
400005ba:	83 ec 08             	sub    $0x8,%esp
400005bd:	83 ec 0c             	sub    $0xc,%esp
400005c0:	6a 01                	push   $0x1
400005c2:	e8 3e ff ff ff       	call   40000505 <fgetc>
400005c7:	83 c4 10             	add    $0x10,%esp
400005ca:	c9                   	leave  
400005cb:	c3                   	ret    

400005cc <getln>:
400005cc:	55                   	push   %ebp
400005cd:	89 e5                	mov    %esp,%ebp
400005cf:	83 ec 18             	sub    $0x18,%esp
400005d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005d9:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
400005dd:	eb 5f                	jmp    4000063e <getln+0x72>
400005df:	80 7d f7 0a          	cmpb   $0xa,-0x9(%ebp)
400005e3:	75 0f                	jne    400005f4 <getln+0x28>
400005e5:	83 ec 0c             	sub    $0xc,%esp
400005e8:	6a 0a                	push   $0xa
400005ea:	e8 c0 00 00 00       	call   400006af <putchar>
400005ef:	83 c4 10             	add    $0x10,%esp
400005f2:	eb 60                	jmp    40000654 <getln+0x88>
400005f4:	80 7d f7 08          	cmpb   $0x8,-0x9(%ebp)
400005f8:	75 24                	jne    4000061e <getln+0x52>
400005fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400005fe:	74 10                	je     40000610 <getln+0x44>
40000600:	ff 4d f0             	decl   -0x10(%ebp)
40000603:	83 ec 0c             	sub    $0xc,%esp
40000606:	6a 08                	push   $0x8
40000608:	e8 a2 00 00 00       	call   400006af <putchar>
4000060d:	83 c4 10             	add    $0x10,%esp
40000610:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000613:	8b 55 08             	mov    0x8(%ebp),%edx
40000616:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000619:	c6 00 00             	movb   $0x0,(%eax)
4000061c:	eb 20                	jmp    4000063e <getln+0x72>
4000061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000621:	8b 55 08             	mov    0x8(%ebp),%edx
40000624:	01 c2                	add    %eax,%edx
40000626:	8a 45 f7             	mov    -0x9(%ebp),%al
40000629:	88 02                	mov    %al,(%edx)
4000062b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
4000062f:	83 ec 0c             	sub    $0xc,%esp
40000632:	50                   	push   %eax
40000633:	e8 77 00 00 00       	call   400006af <putchar>
40000638:	83 c4 10             	add    $0x10,%esp
4000063b:	ff 45 f0             	incl   -0x10(%ebp)
4000063e:	83 ec 0c             	sub    $0xc,%esp
40000641:	6a 01                	push   $0x1
40000643:	e8 bd fe ff ff       	call   40000505 <fgetc>
40000648:	83 c4 10             	add    $0x10,%esp
4000064b:	88 45 f7             	mov    %al,-0x9(%ebp)
4000064e:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
40000652:	75 8b                	jne    400005df <getln+0x13>
40000654:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000657:	8b 55 08             	mov    0x8(%ebp),%edx
4000065a:	8d 04 02             	lea    (%edx,%eax,1),%eax
4000065d:	c6 00 00             	movb   $0x0,(%eax)
40000660:	8b 45 08             	mov    0x8(%ebp),%eax
40000663:	c9                   	leave  
40000664:	c3                   	ret    

40000665 <kputc>:
40000665:	55                   	push   %ebp
40000666:	89 e5                	mov    %esp,%ebp
40000668:	83 ec 38             	sub    $0x38,%esp
4000066b:	8b 45 08             	mov    0x8(%ebp),%eax
4000066e:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000671:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
40000675:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
4000067c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000067f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000686:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000068d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000694:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000069b:	83 ec 0c             	sub    $0xc,%esp
4000069e:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006a1:	50                   	push   %eax
400006a2:	e8 e5 0b 00 00       	call   4000128c <syscall>
400006a7:	83 c4 10             	add    $0x10,%esp
400006aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006ad:	c9                   	leave  
400006ae:	c3                   	ret    

400006af <putchar>:
400006af:	55                   	push   %ebp
400006b0:	89 e5                	mov    %esp,%ebp
400006b2:	83 ec 18             	sub    $0x18,%esp
400006b5:	8b 45 08             	mov    0x8(%ebp),%eax
400006b8:	88 45 f4             	mov    %al,-0xc(%ebp)
400006bb:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
400006bf:	83 ec 08             	sub    $0x8,%esp
400006c2:	6a 00                	push   $0x0
400006c4:	50                   	push   %eax
400006c5:	e8 26 00 00 00       	call   400006f0 <fputc>
400006ca:	83 c4 10             	add    $0x10,%esp
400006cd:	c9                   	leave  
400006ce:	c3                   	ret    

400006cf <putc>:
400006cf:	55                   	push   %ebp
400006d0:	89 e5                	mov    %esp,%ebp
400006d2:	83 ec 18             	sub    $0x18,%esp
400006d5:	8b 45 08             	mov    0x8(%ebp),%eax
400006d8:	88 45 f4             	mov    %al,-0xc(%ebp)
400006db:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
400006df:	83 ec 08             	sub    $0x8,%esp
400006e2:	ff 75 0c             	pushl  0xc(%ebp)
400006e5:	50                   	push   %eax
400006e6:	e8 05 00 00 00       	call   400006f0 <fputc>
400006eb:	83 c4 10             	add    $0x10,%esp
400006ee:	c9                   	leave  
400006ef:	c3                   	ret    

400006f0 <fputc>:
400006f0:	55                   	push   %ebp
400006f1:	89 e5                	mov    %esp,%ebp
400006f3:	83 ec 18             	sub    $0x18,%esp
400006f6:	8b 45 08             	mov    0x8(%ebp),%eax
400006f9:	88 45 f4             	mov    %al,-0xc(%ebp)
400006fc:	83 ec 0c             	sub    $0xc,%esp
400006ff:	ff 75 0c             	pushl  0xc(%ebp)
40000702:	e8 d9 fd ff ff       	call   400004e0 <resolveHandle>
40000707:	83 c4 10             	add    $0x10,%esp
4000070a:	89 45 0c             	mov    %eax,0xc(%ebp)
4000070d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000711:	74 16                	je     40000729 <fputc+0x39>
40000713:	83 ec 04             	sub    $0x4,%esp
40000716:	6a 01                	push   $0x1
40000718:	8d 45 f4             	lea    -0xc(%ebp),%eax
4000071b:	50                   	push   %eax
4000071c:	ff 75 0c             	pushl  0xc(%ebp)
4000071f:	e8 8a fc ff ff       	call   400003ae <fwrite>
40000724:	83 c4 10             	add    $0x10,%esp
40000727:	eb 12                	jmp    4000073b <fputc+0x4b>
40000729:	8a 45 f4             	mov    -0xc(%ebp),%al
4000072c:	0f be c0             	movsbl %al,%eax
4000072f:	83 ec 0c             	sub    $0xc,%esp
40000732:	50                   	push   %eax
40000733:	e8 2d ff ff ff       	call   40000665 <kputc>
40000738:	83 c4 10             	add    $0x10,%esp
4000073b:	c9                   	leave  
4000073c:	c3                   	ret    

4000073d <kputs>:
4000073d:	55                   	push   %ebp
4000073e:	89 e5                	mov    %esp,%ebp
40000740:	83 ec 28             	sub    $0x28,%esp
40000743:	8b 45 08             	mov    0x8(%ebp),%eax
40000746:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
4000074d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000750:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000757:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000075e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000765:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000076c:	83 ec 0c             	sub    $0xc,%esp
4000076f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000772:	50                   	push   %eax
40000773:	e8 14 0b 00 00       	call   4000128c <syscall>
40000778:	83 c4 10             	add    $0x10,%esp
4000077b:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000077e:	c9                   	leave  
4000077f:	c3                   	ret    

40000780 <puts>:
40000780:	55                   	push   %ebp
40000781:	89 e5                	mov    %esp,%ebp
40000783:	83 ec 08             	sub    $0x8,%esp
40000786:	83 ec 08             	sub    $0x8,%esp
40000789:	6a 00                	push   $0x0
4000078b:	ff 75 08             	pushl  0x8(%ebp)
4000078e:	e8 05 00 00 00       	call   40000798 <fputs>
40000793:	83 c4 10             	add    $0x10,%esp
40000796:	c9                   	leave  
40000797:	c3                   	ret    

40000798 <fputs>:
40000798:	55                   	push   %ebp
40000799:	89 e5                	mov    %esp,%ebp
4000079b:	83 ec 08             	sub    $0x8,%esp
4000079e:	83 ec 0c             	sub    $0xc,%esp
400007a1:	ff 75 0c             	pushl  0xc(%ebp)
400007a4:	e8 37 fd ff ff       	call   400004e0 <resolveHandle>
400007a9:	83 c4 10             	add    $0x10,%esp
400007ac:	89 45 0c             	mov    %eax,0xc(%ebp)
400007af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
400007b3:	74 22                	je     400007d7 <fputs+0x3f>
400007b5:	83 ec 0c             	sub    $0xc,%esp
400007b8:	ff 75 08             	pushl  0x8(%ebp)
400007bb:	e8 7d 03 00 00       	call   40000b3d <strlen>
400007c0:	83 c4 10             	add    $0x10,%esp
400007c3:	83 ec 04             	sub    $0x4,%esp
400007c6:	50                   	push   %eax
400007c7:	ff 75 08             	pushl  0x8(%ebp)
400007ca:	ff 75 0c             	pushl  0xc(%ebp)
400007cd:	e8 dc fb ff ff       	call   400003ae <fwrite>
400007d2:	83 c4 10             	add    $0x10,%esp
400007d5:	eb 0e                	jmp    400007e5 <fputs+0x4d>
400007d7:	83 ec 0c             	sub    $0xc,%esp
400007da:	ff 75 08             	pushl  0x8(%ebp)
400007dd:	e8 5b ff ff ff       	call   4000073d <kputs>
400007e2:	83 c4 10             	add    $0x10,%esp
400007e5:	c9                   	leave  
400007e6:	c3                   	ret    

400007e7 <putn>:
400007e7:	55                   	push   %ebp
400007e8:	89 e5                	mov    %esp,%ebp
400007ea:	83 ec 58             	sub    $0x58,%esp
400007ed:	c7 45 ec ac 30 00 40 	movl   $0x400030ac,-0x14(%ebp)
400007f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400007fb:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
400007ff:	7e 07                	jle    40000808 <putn+0x21>
40000801:	b8 00 00 00 00       	mov    $0x0,%eax
40000806:	eb 59                	jmp    40000861 <putn+0x7a>
40000808:	8d 45 ab             	lea    -0x55(%ebp),%eax
4000080b:	83 c0 40             	add    $0x40,%eax
4000080e:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000811:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000814:	c6 00 00             	movb   $0x0,(%eax)
40000817:	ff 45 f4             	incl   -0xc(%ebp)
4000081a:	ff 4d f0             	decl   -0x10(%ebp)
4000081d:	8b 55 0c             	mov    0xc(%ebp),%edx
40000820:	8b 45 08             	mov    0x8(%ebp),%eax
40000823:	89 d1                	mov    %edx,%ecx
40000825:	ba 00 00 00 00       	mov    $0x0,%edx
4000082a:	f7 f1                	div    %ecx
4000082c:	89 d0                	mov    %edx,%eax
4000082e:	03 45 ec             	add    -0x14(%ebp),%eax
40000831:	8a 10                	mov    (%eax),%dl
40000833:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000836:	88 10                	mov    %dl,(%eax)
40000838:	8b 55 0c             	mov    0xc(%ebp),%edx
4000083b:	8b 45 08             	mov    0x8(%ebp),%eax
4000083e:	89 d1                	mov    %edx,%ecx
40000840:	ba 00 00 00 00       	mov    $0x0,%edx
40000845:	f7 f1                	div    %ecx
40000847:	89 45 08             	mov    %eax,0x8(%ebp)
4000084a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
4000084e:	75 c7                	jne    40000817 <putn+0x30>
40000850:	83 ec 0c             	sub    $0xc,%esp
40000853:	ff 75 f0             	pushl  -0x10(%ebp)
40000856:	e8 25 ff ff ff       	call   40000780 <puts>
4000085b:	83 c4 10             	add    $0x10,%esp
4000085e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000861:	c9                   	leave  
40000862:	c3                   	ret    

40000863 <printf>:
40000863:	55                   	push   %ebp
40000864:	89 e5                	mov    %esp,%ebp
40000866:	83 ec 28             	sub    $0x28,%esp
40000869:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000870:	8d 45 0c             	lea    0xc(%ebp),%eax
40000873:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000876:	e9 4d 01 00 00       	jmp    400009c8 <printf+0x165>
4000087b:	8b 45 08             	mov    0x8(%ebp),%eax
4000087e:	8a 00                	mov    (%eax),%al
40000880:	3c 25                	cmp    $0x25,%al
40000882:	0f 85 26 01 00 00    	jne    400009ae <printf+0x14b>
40000888:	ff 45 08             	incl   0x8(%ebp)
4000088b:	8b 45 08             	mov    0x8(%ebp),%eax
4000088e:	8a 00                	mov    (%eax),%al
40000890:	0f be c0             	movsbl %al,%eax
40000893:	83 f8 70             	cmp    $0x70,%eax
40000896:	0f 84 90 00 00 00    	je     4000092c <printf+0xc9>
4000089c:	83 f8 70             	cmp    $0x70,%eax
4000089f:	7f 2e                	jg     400008cf <printf+0x6c>
400008a1:	83 f8 63             	cmp    $0x63,%eax
400008a4:	0f 84 a5 00 00 00    	je     4000094f <printf+0xec>
400008aa:	83 f8 63             	cmp    $0x63,%eax
400008ad:	7f 16                	jg     400008c5 <printf+0x62>
400008af:	85 c0                	test   %eax,%eax
400008b1:	0f 84 20 01 00 00    	je     400009d7 <printf+0x174>
400008b7:	83 f8 25             	cmp    $0x25,%eax
400008ba:	0f 84 b2 00 00 00    	je     40000972 <printf+0x10f>
400008c0:	e9 c0 00 00 00       	jmp    40000985 <printf+0x122>
400008c5:	83 f8 64             	cmp    $0x64,%eax
400008c8:	74 3c                	je     40000906 <printf+0xa3>
400008ca:	e9 b6 00 00 00       	jmp    40000985 <printf+0x122>
400008cf:	83 f8 75             	cmp    $0x75,%eax
400008d2:	74 32                	je     40000906 <printf+0xa3>
400008d4:	83 f8 78             	cmp    $0x78,%eax
400008d7:	74 53                	je     4000092c <printf+0xc9>
400008d9:	83 f8 73             	cmp    $0x73,%eax
400008dc:	0f 85 a3 00 00 00    	jne    40000985 <printf+0x122>
400008e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400008e5:	8d 50 04             	lea    0x4(%eax),%edx
400008e8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
400008eb:	8b 00                	mov    (%eax),%eax
400008ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
400008f0:	83 ec 0c             	sub    $0xc,%esp
400008f3:	ff 75 e8             	pushl  -0x18(%ebp)
400008f6:	e8 85 fe ff ff       	call   40000780 <puts>
400008fb:	83 c4 10             	add    $0x10,%esp
400008fe:	01 45 f4             	add    %eax,-0xc(%ebp)
40000901:	e9 bf 00 00 00       	jmp    400009c5 <printf+0x162>
40000906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000909:	8d 50 04             	lea    0x4(%eax),%edx
4000090c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
4000090f:	8b 00                	mov    (%eax),%eax
40000911:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000914:	83 ec 08             	sub    $0x8,%esp
40000917:	6a 0a                	push   $0xa
40000919:	ff 75 ec             	pushl  -0x14(%ebp)
4000091c:	e8 c6 fe ff ff       	call   400007e7 <putn>
40000921:	83 c4 10             	add    $0x10,%esp
40000924:	01 45 f4             	add    %eax,-0xc(%ebp)
40000927:	e9 99 00 00 00       	jmp    400009c5 <printf+0x162>
4000092c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000092f:	8d 50 04             	lea    0x4(%eax),%edx
40000932:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000935:	8b 00                	mov    (%eax),%eax
40000937:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000093a:	83 ec 08             	sub    $0x8,%esp
4000093d:	6a 10                	push   $0x10
4000093f:	ff 75 ec             	pushl  -0x14(%ebp)
40000942:	e8 a0 fe ff ff       	call   400007e7 <putn>
40000947:	83 c4 10             	add    $0x10,%esp
4000094a:	01 45 f4             	add    %eax,-0xc(%ebp)
4000094d:	eb 76                	jmp    400009c5 <printf+0x162>
4000094f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000952:	8d 50 04             	lea    0x4(%eax),%edx
40000955:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000958:	8b 00                	mov    (%eax),%eax
4000095a:	88 45 f3             	mov    %al,-0xd(%ebp)
4000095d:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000961:	83 ec 0c             	sub    $0xc,%esp
40000964:	50                   	push   %eax
40000965:	e8 45 fd ff ff       	call   400006af <putchar>
4000096a:	83 c4 10             	add    $0x10,%esp
4000096d:	01 45 f4             	add    %eax,-0xc(%ebp)
40000970:	eb 53                	jmp    400009c5 <printf+0x162>
40000972:	83 ec 0c             	sub    $0xc,%esp
40000975:	6a 25                	push   $0x25
40000977:	e8 33 fd ff ff       	call   400006af <putchar>
4000097c:	83 c4 10             	add    $0x10,%esp
4000097f:	01 45 f4             	add    %eax,-0xc(%ebp)
40000982:	90                   	nop    
40000983:	eb 40                	jmp    400009c5 <printf+0x162>
40000985:	83 ec 0c             	sub    $0xc,%esp
40000988:	6a 25                	push   $0x25
4000098a:	e8 20 fd ff ff       	call   400006af <putchar>
4000098f:	83 c4 10             	add    $0x10,%esp
40000992:	01 45 f4             	add    %eax,-0xc(%ebp)
40000995:	8b 45 08             	mov    0x8(%ebp),%eax
40000998:	8a 00                	mov    (%eax),%al
4000099a:	0f be c0             	movsbl %al,%eax
4000099d:	83 ec 0c             	sub    $0xc,%esp
400009a0:	50                   	push   %eax
400009a1:	e8 09 fd ff ff       	call   400006af <putchar>
400009a6:	83 c4 10             	add    $0x10,%esp
400009a9:	01 45 f4             	add    %eax,-0xc(%ebp)
400009ac:	eb 17                	jmp    400009c5 <printf+0x162>
400009ae:	8b 45 08             	mov    0x8(%ebp),%eax
400009b1:	8a 00                	mov    (%eax),%al
400009b3:	0f be c0             	movsbl %al,%eax
400009b6:	83 ec 0c             	sub    $0xc,%esp
400009b9:	50                   	push   %eax
400009ba:	e8 f0 fc ff ff       	call   400006af <putchar>
400009bf:	83 c4 10             	add    $0x10,%esp
400009c2:	01 45 f4             	add    %eax,-0xc(%ebp)
400009c5:	ff 45 08             	incl   0x8(%ebp)
400009c8:	8b 45 08             	mov    0x8(%ebp),%eax
400009cb:	8a 00                	mov    (%eax),%al
400009cd:	84 c0                	test   %al,%al
400009cf:	0f 85 a6 fe ff ff    	jne    4000087b <printf+0x18>
400009d5:	eb 01                	jmp    400009d8 <printf+0x175>
400009d7:	90                   	nop    
400009d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
400009db:	c9                   	leave  
400009dc:	c3                   	ret    
400009dd:	00 00                	add    %al,(%eax)
	...

400009e0 <memset>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
400009e0:	55                   	push   %ebp
400009e1:	89 e5                	mov    %esp,%ebp
400009e3:	83 ec 10             	sub    $0x10,%esp
#include "vmmcall.h"
400009e6:	8b 45 08             	mov    0x8(%ebp),%eax
400009e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
#include "process.h"
 
400009ec:	eb 0d                	jmp    400009fb <memset+0x1b>
uint32_t m_z = 1, m_w = 2;
400009ee:	8b 45 0c             	mov    0xc(%ebp),%eax
400009f1:	88 c2                	mov    %al,%dl
400009f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
400009f6:	88 10                	mov    %dl,(%eax)
400009f8:	ff 45 fc             	incl   -0x4(%ebp)
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
400009fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
400009ff:	0f 95 c0             	setne  %al
40000a02:	ff 4d 10             	decl   0x10(%ebp)
40000a05:	84 c0                	test   %al,%al
40000a07:	75 e5                	jne    400009ee <memset+0xe>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000a09:	8b 45 08             	mov    0x8(%ebp),%eax
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000a0c:	c9                   	leave  
40000a0d:	c3                   	ret    

40000a0e <memcpy>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000a0e:	55                   	push   %ebp
40000a0f:	89 e5                	mov    %esp,%ebp
40000a11:	83 ec 10             	sub    $0x10,%esp
}
40000a14:	8b 45 08             	mov    0x8(%ebp),%eax
40000a17:	89 45 f8             	mov    %eax,-0x8(%ebp)

40000a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
int main(int argc, char* args[])
{
40000a20:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000a24:	75 19                	jne    40000a3f <memcpy+0x31>
40000a26:	b8 00 00 00 00       	mov    $0x0,%eax
40000a2b:	eb 24                	jmp    40000a51 <memcpy+0x43>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000a2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000a30:	8a 10                	mov    (%eax),%dl
40000a32:	8b 45 f8             	mov    -0x8(%ebp),%eax
40000a35:	88 10                	mov    %dl,(%eax)
40000a37:	ff 45 f8             	incl   -0x8(%ebp)
40000a3a:	ff 45 fc             	incl   -0x4(%ebp)
40000a3d:	eb 01                	jmp    40000a40 <memcpy+0x32>
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000a3f:	90                   	nop    
40000a40:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000a44:	0f 95 c0             	setne  %al
40000a47:	ff 4d 10             	decl   0x10(%ebp)
40000a4a:	84 c0                	test   %al,%al
40000a4c:	75 df                	jne    40000a2d <memcpy+0x1f>
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

40000a4e:	8b 45 08             	mov    0x8(%ebp),%eax
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40000a51:	c9                   	leave  
40000a52:	c3                   	ret    

40000a53 <memcmp>:

    while(1) {
40000a53:	55                   	push   %ebp
40000a54:	89 e5                	mov    %esp,%ebp
40000a56:	83 ec 10             	sub    $0x10,%esp
        for(int i = 0; i < 128; i++) {
40000a59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000a5d:	75 0a                	jne    40000a69 <memcmp+0x16>
            rnd[i] = get_next();
40000a5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000a64:	e9 83 00 00 00       	jmp    40000aec <memcmp+0x99>
        }
40000a69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000a6d:	75 07                	jne    40000a76 <memcmp+0x23>

40000a6f:	b8 01 00 00 00       	mov    $0x1,%eax
40000a74:	eb 76                	jmp    40000aec <memcmp+0x99>
        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000a76:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000a7a:	75 07                	jne    40000a83 <memcmp+0x30>
    }
40000a7c:	b8 00 00 00 00       	mov    $0x0,%eax
40000a81:	eb 69                	jmp    40000aec <memcmp+0x99>

    return 0;
40000a83:	8b 45 08             	mov    0x8(%ebp),%eax
40000a86:	89 45 f4             	mov    %eax,-0xc(%ebp)
}
40000a89:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a8c:	89 45 f8             	mov    %eax,-0x8(%ebp)
40000a8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000a96:	eb 47                	jmp    40000adf <memcmp+0x8c>
40000a98:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000a9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a9e:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000aa1:	8a 10                	mov    (%eax),%dl
40000aa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000aa6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
40000aa9:	8d 04 01             	lea    (%ecx,%eax,1),%eax
40000aac:	8a 00                	mov    (%eax),%al
40000aae:	38 c2                	cmp    %al,%dl
40000ab0:	74 2a                	je     40000adc <memcmp+0x89>
40000ab2:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ab5:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000ab8:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000abb:	8a 00                	mov    (%eax),%al
40000abd:	ba 00 00 00 00       	mov    $0x0,%edx
40000ac2:	88 c2                	mov    %al,%dl
40000ac4:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ac7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
40000aca:	8d 04 01             	lea    (%ecx,%eax,1),%eax
40000acd:	8a 00                	mov    (%eax),%al
40000acf:	25 ff 00 00 00       	and    $0xff,%eax
40000ad4:	89 d1                	mov    %edx,%ecx
40000ad6:	29 c1                	sub    %eax,%ecx
40000ad8:	89 c8                	mov    %ecx,%eax
40000ada:	eb 10                	jmp    40000aec <memcmp+0x99>
    }

    return 0;
}
40000adc:	ff 45 fc             	incl   -0x4(%ebp)
40000adf:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ae2:	3b 45 10             	cmp    0x10(%ebp),%eax
40000ae5:	72 b1                	jb     40000a98 <memcmp+0x45>
40000ae7:	b8 00 00 00 00       	mov    $0x0,%eax
40000aec:	c9                   	leave  
40000aed:	c3                   	ret    

40000aee <strcmp>:
40000aee:	55                   	push   %ebp
40000aef:	89 e5                	mov    %esp,%ebp
40000af1:	83 ec 18             	sub    $0x18,%esp
40000af4:	83 ec 0c             	sub    $0xc,%esp
40000af7:	ff 75 08             	pushl  0x8(%ebp)
40000afa:	e8 3e 00 00 00       	call   40000b3d <strlen>
40000aff:	83 c4 10             	add    $0x10,%esp
40000b02:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000b05:	83 ec 0c             	sub    $0xc,%esp
40000b08:	ff 75 0c             	pushl  0xc(%ebp)
40000b0b:	e8 2d 00 00 00       	call   40000b3d <strlen>
40000b10:	83 c4 10             	add    $0x10,%esp
40000b13:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000b16:	8b 55 f0             	mov    -0x10(%ebp),%edx
40000b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b1c:	39 d0                	cmp    %edx,%eax
40000b1e:	7e 02                	jle    40000b22 <strcmp+0x34>
40000b20:	89 d0                	mov    %edx,%eax
40000b22:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000b28:	40                   	inc    %eax
40000b29:	83 ec 04             	sub    $0x4,%esp
40000b2c:	50                   	push   %eax
40000b2d:	ff 75 0c             	pushl  0xc(%ebp)
40000b30:	ff 75 08             	pushl  0x8(%ebp)
40000b33:	e8 1b ff ff ff       	call   40000a53 <memcmp>
40000b38:	83 c4 10             	add    $0x10,%esp
40000b3b:	c9                   	leave  
40000b3c:	c3                   	ret    

40000b3d <strlen>:
40000b3d:	55                   	push   %ebp
40000b3e:	89 e5                	mov    %esp,%ebp
40000b40:	83 ec 10             	sub    $0x10,%esp
40000b43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000b47:	75 07                	jne    40000b50 <strlen+0x13>
40000b49:	b8 00 00 00 00       	mov    $0x0,%eax
40000b4e:	eb 1b                	jmp    40000b6b <strlen+0x2e>
40000b50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000b57:	eb 03                	jmp    40000b5c <strlen+0x1f>
40000b59:	ff 45 fc             	incl   -0x4(%ebp)
40000b5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000b5f:	03 45 08             	add    0x8(%ebp),%eax
40000b62:	8a 00                	mov    (%eax),%al
40000b64:	84 c0                	test   %al,%al
40000b66:	75 f1                	jne    40000b59 <strlen+0x1c>
40000b68:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000b6b:	c9                   	leave  
40000b6c:	c3                   	ret    

40000b6d <strcpy>:
40000b6d:	55                   	push   %ebp
40000b6e:	89 e5                	mov    %esp,%ebp
40000b70:	ff 75 0c             	pushl  0xc(%ebp)
40000b73:	e8 c5 ff ff ff       	call   40000b3d <strlen>
40000b78:	83 c4 04             	add    $0x4,%esp
40000b7b:	40                   	inc    %eax
40000b7c:	50                   	push   %eax
40000b7d:	ff 75 0c             	pushl  0xc(%ebp)
40000b80:	ff 75 08             	pushl  0x8(%ebp)
40000b83:	e8 86 fe ff ff       	call   40000a0e <memcpy>
40000b88:	83 c4 0c             	add    $0xc,%esp
40000b8b:	8b 45 08             	mov    0x8(%ebp),%eax
40000b8e:	c9                   	leave  
40000b8f:	c3                   	ret    

40000b90 <strclone>:
40000b90:	55                   	push   %ebp
40000b91:	89 e5                	mov    %esp,%ebp
40000b93:	83 ec 18             	sub    $0x18,%esp
40000b96:	ff 75 08             	pushl  0x8(%ebp)
40000b99:	e8 9f ff ff ff       	call   40000b3d <strlen>
40000b9e:	83 c4 04             	add    $0x4,%esp
40000ba1:	40                   	inc    %eax
40000ba2:	83 ec 0c             	sub    $0xc,%esp
40000ba5:	50                   	push   %eax
40000ba6:	e8 92 03 00 00       	call   40000f3d <malloc>
40000bab:	83 c4 10             	add    $0x10,%esp
40000bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000bb1:	83 ec 08             	sub    $0x8,%esp
40000bb4:	ff 75 08             	pushl  0x8(%ebp)
40000bb7:	ff 75 f4             	pushl  -0xc(%ebp)
40000bba:	e8 ae ff ff ff       	call   40000b6d <strcpy>
40000bbf:	83 c4 10             	add    $0x10,%esp
40000bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000bc5:	c9                   	leave  
40000bc6:	c3                   	ret    

40000bc7 <strtok>:
40000bc7:	55                   	push   %ebp
40000bc8:	89 e5                	mov    %esp,%ebp
40000bca:	83 ec 08             	sub    $0x8,%esp
40000bcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000bd1:	74 43                	je     40000c16 <strtok+0x4f>
40000bd3:	a1 04 40 00 40       	mov    0x40004004,%eax
40000bd8:	85 c0                	test   %eax,%eax
40000bda:	74 11                	je     40000bed <strtok+0x26>
40000bdc:	a1 04 40 00 40       	mov    0x40004004,%eax
40000be1:	83 ec 0c             	sub    $0xc,%esp
40000be4:	50                   	push   %eax
40000be5:	e8 96 05 00 00       	call   40001180 <free>
40000bea:	83 c4 10             	add    $0x10,%esp
40000bed:	83 ec 0c             	sub    $0xc,%esp
40000bf0:	ff 75 08             	pushl  0x8(%ebp)
40000bf3:	e8 98 ff ff ff       	call   40000b90 <strclone>
40000bf8:	83 c4 10             	add    $0x10,%esp
40000bfb:	a3 04 40 00 40       	mov    %eax,0x40004004
40000c00:	a1 04 40 00 40       	mov    0x40004004,%eax
40000c05:	83 ec 08             	sub    $0x8,%esp
40000c08:	ff 75 0c             	pushl  0xc(%ebp)
40000c0b:	50                   	push   %eax
40000c0c:	e8 17 00 00 00       	call   40000c28 <strtoknc>
40000c11:	83 c4 10             	add    $0x10,%esp
40000c14:	eb 10                	jmp    40000c26 <strtok+0x5f>
40000c16:	83 ec 08             	sub    $0x8,%esp
40000c19:	ff 75 0c             	pushl  0xc(%ebp)
40000c1c:	6a 00                	push   $0x0
40000c1e:	e8 05 00 00 00       	call   40000c28 <strtoknc>
40000c23:	83 c4 10             	add    $0x10,%esp
40000c26:	c9                   	leave  
40000c27:	c3                   	ret    

40000c28 <strtoknc>:
40000c28:	55                   	push   %ebp
40000c29:	89 e5                	mov    %esp,%ebp
40000c2b:	83 ec 10             	sub    $0x10,%esp
40000c2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000c35:	ff 75 0c             	pushl  0xc(%ebp)
40000c38:	e8 00 ff ff ff       	call   40000b3d <strlen>
40000c3d:	83 c4 04             	add    $0x4,%esp
40000c40:	89 45 f8             	mov    %eax,-0x8(%ebp)
40000c43:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
40000c47:	75 0a                	jne    40000c53 <strtoknc+0x2b>
40000c49:	b8 00 00 00 00       	mov    $0x0,%eax
40000c4e:	e9 e0 00 00 00       	jmp    40000d33 <strtoknc+0x10b>
40000c53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000c57:	75 13                	jne    40000c6c <strtoknc+0x44>
40000c59:	a1 00 40 00 40       	mov    0x40004000,%eax
40000c5e:	85 c0                	test   %eax,%eax
40000c60:	75 0a                	jne    40000c6c <strtoknc+0x44>
40000c62:	b8 00 00 00 00       	mov    $0x0,%eax
40000c67:	e9 c7 00 00 00       	jmp    40000d33 <strtoknc+0x10b>
40000c6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000c70:	74 08                	je     40000c7a <strtoknc+0x52>
40000c72:	8b 45 08             	mov    0x8(%ebp),%eax
40000c75:	a3 00 40 00 40       	mov    %eax,0x40004000
40000c7a:	a1 00 40 00 40       	mov    0x40004000,%eax
40000c7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
40000c82:	eb 01                	jmp    40000c85 <strtoknc+0x5d>
40000c84:	90                   	nop    
40000c85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000c8c:	eb 19                	jmp    40000ca7 <strtoknc+0x7f>
40000c8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000c91:	8a 10                	mov    (%eax),%dl
40000c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000c96:	03 45 0c             	add    0xc(%ebp),%eax
40000c99:	8a 00                	mov    (%eax),%al
40000c9b:	38 c2                	cmp    %al,%dl
40000c9d:	75 05                	jne    40000ca4 <strtoknc+0x7c>
40000c9f:	ff 45 fc             	incl   -0x4(%ebp)
40000ca2:	eb 0b                	jmp    40000caf <strtoknc+0x87>
40000ca4:	ff 45 f4             	incl   -0xc(%ebp)
40000ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000caa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000cad:	7c df                	jl     40000c8e <strtoknc+0x66>
40000caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000cb2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000cb5:	75 cd                	jne    40000c84 <strtoknc+0x5c>
40000cb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000cba:	a3 00 40 00 40       	mov    %eax,0x40004000
40000cbf:	a1 00 40 00 40       	mov    0x40004000,%eax
40000cc4:	8a 00                	mov    (%eax),%al
40000cc6:	84 c0                	test   %al,%al
40000cc8:	75 57                	jne    40000d21 <strtoknc+0xf9>
40000cca:	c7 05 00 40 00 40 00 	movl   $0x0,0x40004000
40000cd1:	00 00 00 
40000cd4:	a1 00 40 00 40       	mov    0x40004000,%eax
40000cd9:	eb 58                	jmp    40000d33 <strtoknc+0x10b>
40000cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000ce2:	eb 20                	jmp    40000d04 <strtoknc+0xdc>
40000ce4:	a1 00 40 00 40       	mov    0x40004000,%eax
40000ce9:	8a 10                	mov    (%eax),%dl
40000ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000cee:	03 45 0c             	add    0xc(%ebp),%eax
40000cf1:	8a 00                	mov    (%eax),%al
40000cf3:	38 c2                	cmp    %al,%dl
40000cf5:	75 0a                	jne    40000d01 <strtoknc+0xd9>
40000cf7:	a1 00 40 00 40       	mov    0x40004000,%eax
40000cfc:	c6 00 00             	movb   $0x0,(%eax)
40000cff:	eb 0b                	jmp    40000d0c <strtoknc+0xe4>
40000d01:	ff 45 f4             	incl   -0xc(%ebp)
40000d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d07:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000d0a:	7c d8                	jl     40000ce4 <strtoknc+0xbc>
40000d0c:	a1 00 40 00 40       	mov    0x40004000,%eax
40000d11:	40                   	inc    %eax
40000d12:	a3 00 40 00 40       	mov    %eax,0x40004000
40000d17:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d1a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
40000d1d:	7c 10                	jl     40000d2f <strtoknc+0x107>
40000d1f:	eb 01                	jmp    40000d22 <strtoknc+0xfa>
40000d21:	90                   	nop    
40000d22:	a1 00 40 00 40       	mov    0x40004000,%eax
40000d27:	8a 00                	mov    (%eax),%al
40000d29:	84 c0                	test   %al,%al
40000d2b:	75 ae                	jne    40000cdb <strtoknc+0xb3>
40000d2d:	eb 01                	jmp    40000d30 <strtoknc+0x108>
40000d2f:	90                   	nop    
40000d30:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d33:	c9                   	leave  
40000d34:	c3                   	ret    
40000d35:	00 00                	add    %al,(%eax)
	...

40000d38 <remove_from_list>:
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;
40000d38:	55                   	push   %ebp
40000d39:	89 e5                	mov    %esp,%ebp
40000d3b:	83 ec 10             	sub    $0x10,%esp

40000d3e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
static uint32_t get_next()
40000d45:	8b 45 08             	mov    0x8(%ebp),%eax
40000d48:	8b 00                	mov    (%eax),%eax
40000d4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000d4d:	eb 38                	jmp    40000d87 <remove_from_list+0x4f>
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000d4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d52:	3b 45 0c             	cmp    0xc(%ebp),%eax
40000d55:	75 21                	jne    40000d78 <remove_from_list+0x40>
    return (m_z << 16) + m_w;
40000d57:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
40000d5b:	75 0d                	jne    40000d6a <remove_from_list+0x32>
}
40000d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d60:	8b 50 08             	mov    0x8(%eax),%edx
40000d63:	8b 45 08             	mov    0x8(%ebp),%eax
40000d66:	89 10                	mov    %edx,(%eax)

40000d68:	eb 23                	jmp    40000d8d <remove_from_list+0x55>
int main(int argc, char* args[])
{
40000d6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d6d:	8b 50 08             	mov    0x8(%eax),%edx
40000d70:	8b 45 f8             	mov    -0x8(%ebp),%eax
40000d73:	89 50 08             	mov    %edx,0x8(%eax)
    HANDLE out = fmkfifo("/dev/urandom");
40000d76:	eb 15                	jmp    40000d8d <remove_from_list+0x55>

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40000d78:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d7b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    fclose(initCtrl);
40000d7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000d81:	8b 40 08             	mov    0x8(%eax),%eax
40000d84:	89 45 fc             	mov    %eax,-0x4(%ebp)
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000d87:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40000d8b:	75 c2                	jne    40000d4f <remove_from_list+0x17>

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40000d8d:	c9                   	leave  
40000d8e:	c3                   	ret    

40000d8f <append_to_list>:

    while(1) {
        for(int i = 0; i < 128; i++) {
40000d8f:	55                   	push   %ebp
40000d90:	89 e5                	mov    %esp,%ebp
            rnd[i] = get_next();
40000d92:	8b 45 08             	mov    0x8(%ebp),%eax
40000d95:	8b 10                	mov    (%eax),%edx
40000d97:	8b 45 0c             	mov    0xc(%ebp),%eax
40000d9a:	89 50 08             	mov    %edx,0x8(%eax)
        }
40000d9d:	8b 45 08             	mov    0x8(%ebp),%eax
40000da0:	8b 55 0c             	mov    0xc(%ebp),%edx
40000da3:	89 10                	mov    %edx,(%eax)

40000da5:	5d                   	pop    %ebp
40000da6:	c3                   	ret    

40000da7 <pop_from_list>:
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }
40000da7:	55                   	push   %ebp
40000da8:	89 e5                	mov    %esp,%ebp
40000daa:	83 ec 10             	sub    $0x10,%esp

40000dad:	8b 45 08             	mov    0x8(%ebp),%eax
40000db0:	8b 00                	mov    (%eax),%eax
40000db2:	85 c0                	test   %eax,%eax
40000db4:	75 07                	jne    40000dbd <pop_from_list+0x16>
    return 0;
40000db6:	b8 00 00 00 00       	mov    $0x0,%eax
40000dbb:	eb 19                	jmp    40000dd6 <pop_from_list+0x2f>
}
40000dbd:	8b 45 08             	mov    0x8(%ebp),%eax
40000dc0:	8b 00                	mov    (%eax),%eax
40000dc2:	89 45 fc             	mov    %eax,-0x4(%ebp)
40000dc5:	ff 75 fc             	pushl  -0x4(%ebp)
40000dc8:	ff 75 08             	pushl  0x8(%ebp)
40000dcb:	e8 68 ff ff ff       	call   40000d38 <remove_from_list>
40000dd0:	83 c4 08             	add    $0x8,%esp
40000dd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000dd6:	c9                   	leave  
40000dd7:	c3                   	ret    

40000dd8 <allocate_unused_nodes>:
40000dd8:	55                   	push   %ebp
40000dd9:	89 e5                	mov    %esp,%ebp
40000ddb:	83 ec 18             	sub    $0x18,%esp
40000dde:	83 ec 0c             	sub    $0xc,%esp
40000de1:	6a 01                	push   $0x1
40000de3:	e8 e0 03 00 00       	call   400011c8 <vmm_alloc_cont>
40000de8:	83 c4 10             	add    $0x10,%esp
40000deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
40000dee:	83 ec 04             	sub    $0x4,%esp
40000df1:	68 00 10 00 00       	push   $0x1000
40000df6:	6a 00                	push   $0x0
40000df8:	ff 75 f0             	pushl  -0x10(%ebp)
40000dfb:	e8 e0 fb ff ff       	call   400009e0 <memset>
40000e00:	83 c4 10             	add    $0x10,%esp
40000e03:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
40000e0a:	eb 23                	jmp    40000e2f <allocate_unused_nodes+0x57>
40000e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000e0f:	89 d0                	mov    %edx,%eax
40000e11:	01 c0                	add    %eax,%eax
40000e13:	01 d0                	add    %edx,%eax
40000e15:	c1 e0 02             	shl    $0x2,%eax
40000e18:	03 45 f0             	add    -0x10(%ebp),%eax
40000e1b:	83 ec 08             	sub    $0x8,%esp
40000e1e:	50                   	push   %eax
40000e1f:	68 08 40 00 40       	push   $0x40004008
40000e24:	e8 66 ff ff ff       	call   40000d8f <append_to_list>
40000e29:	83 c4 10             	add    $0x10,%esp
40000e2c:	ff 45 f4             	incl   -0xc(%ebp)
40000e2f:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
40000e36:	76 d4                	jbe    40000e0c <allocate_unused_nodes+0x34>
40000e38:	c9                   	leave  
40000e39:	c3                   	ret    

40000e3a <pop_unused_node>:
40000e3a:	55                   	push   %ebp
40000e3b:	89 e5                	mov    %esp,%ebp
40000e3d:	83 ec 18             	sub    $0x18,%esp
40000e40:	68 08 40 00 40       	push   $0x40004008
40000e45:	e8 5d ff ff ff       	call   40000da7 <pop_from_list>
40000e4a:	83 c4 04             	add    $0x4,%esp
40000e4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000e50:	eb 18                	jmp    40000e6a <pop_unused_node+0x30>
40000e52:	e8 81 ff ff ff       	call   40000dd8 <allocate_unused_nodes>
40000e57:	83 ec 0c             	sub    $0xc,%esp
40000e5a:	68 08 40 00 40       	push   $0x40004008
40000e5f:	e8 43 ff ff ff       	call   40000da7 <pop_from_list>
40000e64:	83 c4 10             	add    $0x10,%esp
40000e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
40000e6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000e6e:	74 e2                	je     40000e52 <pop_unused_node+0x18>
40000e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000e73:	c9                   	leave  
40000e74:	c3                   	ret    

40000e75 <merge_into_frees>:
40000e75:	55                   	push   %ebp
40000e76:	89 e5                	mov    %esp,%ebp
40000e78:	83 ec 10             	sub    $0x10,%esp
40000e7b:	ff 75 08             	pushl  0x8(%ebp)
40000e7e:	68 0c 40 00 40       	push   $0x4000400c
40000e83:	e8 b0 fe ff ff       	call   40000d38 <remove_from_list>
40000e88:	83 c4 08             	add    $0x8,%esp
40000e8b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
40000e92:	a1 10 40 00 40       	mov    0x40004010,%eax
40000e97:	89 45 fc             	mov    %eax,-0x4(%ebp)
40000e9a:	e9 82 00 00 00       	jmp    40000f21 <merge_into_frees+0xac>
40000e9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ea2:	8b 50 04             	mov    0x4(%eax),%edx
40000ea5:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ea8:	8b 00                	mov    (%eax),%eax
40000eaa:	01 c2                	add    %eax,%edx
40000eac:	8b 45 08             	mov    0x8(%ebp),%eax
40000eaf:	8b 40 04             	mov    0x4(%eax),%eax
40000eb2:	39 c2                	cmp    %eax,%edx
40000eb4:	75 1e                	jne    40000ed4 <merge_into_frees+0x5f>
40000eb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000eb9:	8b 50 04             	mov    0x4(%eax),%edx
40000ebc:	8b 45 08             	mov    0x8(%ebp),%eax
40000ebf:	89 50 04             	mov    %edx,0x4(%eax)
40000ec2:	ff 75 fc             	pushl  -0x4(%ebp)
40000ec5:	68 10 40 00 40       	push   $0x40004010
40000eca:	e8 69 fe ff ff       	call   40000d38 <remove_from_list>
40000ecf:	83 c4 08             	add    $0x8,%esp
40000ed2:	eb b7                	jmp    40000e8b <merge_into_frees+0x16>
40000ed4:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ed7:	8b 50 04             	mov    0x4(%eax),%edx
40000eda:	8b 45 08             	mov    0x8(%ebp),%eax
40000edd:	8b 48 04             	mov    0x4(%eax),%ecx
40000ee0:	8b 45 08             	mov    0x8(%ebp),%eax
40000ee3:	8b 00                	mov    (%eax),%eax
40000ee5:	8d 04 01             	lea    (%ecx,%eax,1),%eax
40000ee8:	39 c2                	cmp    %eax,%edx
40000eea:	75 26                	jne    40000f12 <merge_into_frees+0x9d>
40000eec:	8b 45 08             	mov    0x8(%ebp),%eax
40000eef:	8b 10                	mov    (%eax),%edx
40000ef1:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ef4:	8b 00                	mov    (%eax),%eax
40000ef6:	01 c2                	add    %eax,%edx
40000ef8:	8b 45 08             	mov    0x8(%ebp),%eax
40000efb:	89 10                	mov    %edx,(%eax)
40000efd:	ff 75 fc             	pushl  -0x4(%ebp)
40000f00:	68 10 40 00 40       	push   $0x40004010
40000f05:	e8 2e fe ff ff       	call   40000d38 <remove_from_list>
40000f0a:	83 c4 08             	add    $0x8,%esp
40000f0d:	e9 79 ff ff ff       	jmp    40000e8b <merge_into_frees+0x16>
40000f12:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f15:	89 45 f8             	mov    %eax,-0x8(%ebp)
40000f18:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f1b:	8b 40 08             	mov    0x8(%eax),%eax
40000f1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
40000f21:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40000f25:	0f 85 74 ff ff ff    	jne    40000e9f <merge_into_frees+0x2a>
40000f2b:	ff 75 08             	pushl  0x8(%ebp)
40000f2e:	68 10 40 00 40       	push   $0x40004010
40000f33:	e8 57 fe ff ff       	call   40000d8f <append_to_list>
40000f38:	83 c4 08             	add    $0x8,%esp
40000f3b:	c9                   	leave  
40000f3c:	c3                   	ret    

40000f3d <malloc>:
40000f3d:	55                   	push   %ebp
40000f3e:	89 e5                	mov    %esp,%ebp
40000f40:	83 ec 28             	sub    $0x28,%esp
40000f43:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
40000f4a:	a1 10 40 00 40       	mov    0x40004010,%eax
40000f4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000f52:	eb 19                	jmp    40000f6d <malloc+0x30>
40000f54:	8b 45 dc             	mov    -0x24(%ebp),%eax
40000f57:	8b 00                	mov    (%eax),%eax
40000f59:	3b 45 08             	cmp    0x8(%ebp),%eax
40000f5c:	73 17                	jae    40000f75 <malloc+0x38>
40000f5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
40000f61:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000f64:	8b 45 dc             	mov    -0x24(%ebp),%eax
40000f67:	8b 40 08             	mov    0x8(%eax),%eax
40000f6a:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000f6d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40000f71:	75 e1                	jne    40000f54 <malloc+0x17>
40000f73:	eb 01                	jmp    40000f76 <malloc+0x39>
40000f75:	90                   	nop    
40000f76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40000f7a:	0f 85 a6 00 00 00    	jne    40001026 <malloc+0xe9>
40000f80:	8b 45 08             	mov    0x8(%ebp),%eax
40000f83:	c1 e8 0c             	shr    $0xc,%eax
40000f86:	89 45 e0             	mov    %eax,-0x20(%ebp)
40000f89:	8b 45 08             	mov    0x8(%ebp),%eax
40000f8c:	25 ff 0f 00 00       	and    $0xfff,%eax
40000f91:	85 c0                	test   %eax,%eax
40000f93:	74 03                	je     40000f98 <malloc+0x5b>
40000f95:	ff 45 e0             	incl   -0x20(%ebp)
40000f98:	83 ec 0c             	sub    $0xc,%esp
40000f9b:	ff 75 e0             	pushl  -0x20(%ebp)
40000f9e:	e8 25 02 00 00       	call   400011c8 <vmm_alloc_cont>
40000fa3:	83 c4 10             	add    $0x10,%esp
40000fa6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000fa9:	e8 8c fe ff ff       	call   40000e3a <pop_unused_node>
40000fae:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000fb1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40000fb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
40000fb7:	89 50 04             	mov    %edx,0x4(%eax)
40000fba:	8b 45 e8             	mov    -0x18(%ebp),%eax
40000fbd:	8b 55 08             	mov    0x8(%ebp),%edx
40000fc0:	89 10                	mov    %edx,(%eax)
40000fc2:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000fc5:	c1 e0 0c             	shl    $0xc,%eax
40000fc8:	3b 45 08             	cmp    0x8(%ebp),%eax
40000fcb:	76 3e                	jbe    4000100b <malloc+0xce>
40000fcd:	e8 68 fe ff ff       	call   40000e3a <pop_unused_node>
40000fd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000fd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
40000fd8:	8b 50 04             	mov    0x4(%eax),%edx
40000fdb:	8b 45 e8             	mov    -0x18(%ebp),%eax
40000fde:	8b 00                	mov    (%eax),%eax
40000fe0:	01 c2                	add    %eax,%edx
40000fe2:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000fe5:	89 50 04             	mov    %edx,0x4(%eax)
40000fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000feb:	c1 e0 0c             	shl    $0xc,%eax
40000fee:	89 c2                	mov    %eax,%edx
40000ff0:	2b 55 08             	sub    0x8(%ebp),%edx
40000ff3:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000ff6:	89 10                	mov    %edx,(%eax)
40000ff8:	83 ec 08             	sub    $0x8,%esp
40000ffb:	ff 75 ec             	pushl  -0x14(%ebp)
40000ffe:	68 10 40 00 40       	push   $0x40004010
40001003:	e8 87 fd ff ff       	call   40000d8f <append_to_list>
40001008:	83 c4 10             	add    $0x10,%esp
4000100b:	83 ec 08             	sub    $0x8,%esp
4000100e:	ff 75 e8             	pushl  -0x18(%ebp)
40001011:	68 0c 40 00 40       	push   $0x4000400c
40001016:	e8 74 fd ff ff       	call   40000d8f <append_to_list>
4000101b:	83 c4 10             	add    $0x10,%esp
4000101e:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001021:	8b 40 04             	mov    0x4(%eax),%eax
40001024:	eb 7b                	jmp    400010a1 <malloc+0x164>
40001026:	8b 45 dc             	mov    -0x24(%ebp),%eax
40001029:	8b 00                	mov    (%eax),%eax
4000102b:	2b 45 08             	sub    0x8(%ebp),%eax
4000102e:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001031:	8b 45 dc             	mov    -0x24(%ebp),%eax
40001034:	8b 55 08             	mov    0x8(%ebp),%edx
40001037:	89 10                	mov    %edx,(%eax)
40001039:	83 ec 08             	sub    $0x8,%esp
4000103c:	ff 75 dc             	pushl  -0x24(%ebp)
4000103f:	68 10 40 00 40       	push   $0x40004010
40001044:	e8 ef fc ff ff       	call   40000d38 <remove_from_list>
40001049:	83 c4 10             	add    $0x10,%esp
4000104c:	83 ec 08             	sub    $0x8,%esp
4000104f:	ff 75 dc             	pushl  -0x24(%ebp)
40001052:	68 0c 40 00 40       	push   $0x4000400c
40001057:	e8 33 fd ff ff       	call   40000d8f <append_to_list>
4000105c:	83 c4 10             	add    $0x10,%esp
4000105f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40001063:	74 36                	je     4000109b <malloc+0x15e>
40001065:	e8 d0 fd ff ff       	call   40000e3a <pop_unused_node>
4000106a:	89 45 f4             	mov    %eax,-0xc(%ebp)
4000106d:	8b 45 dc             	mov    -0x24(%ebp),%eax
40001070:	8b 50 04             	mov    0x4(%eax),%edx
40001073:	8b 45 dc             	mov    -0x24(%ebp),%eax
40001076:	8b 00                	mov    (%eax),%eax
40001078:	01 c2                	add    %eax,%edx
4000107a:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000107d:	89 50 04             	mov    %edx,0x4(%eax)
40001080:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001083:	8b 55 f0             	mov    -0x10(%ebp),%edx
40001086:	89 10                	mov    %edx,(%eax)
40001088:	83 ec 08             	sub    $0x8,%esp
4000108b:	ff 75 f4             	pushl  -0xc(%ebp)
4000108e:	68 10 40 00 40       	push   $0x40004010
40001093:	e8 f7 fc ff ff       	call   40000d8f <append_to_list>
40001098:	83 c4 10             	add    $0x10,%esp
4000109b:	8b 45 dc             	mov    -0x24(%ebp),%eax
4000109e:	8b 40 04             	mov    0x4(%eax),%eax
400010a1:	c9                   	leave  
400010a2:	c3                   	ret    

400010a3 <calloc>:
400010a3:	55                   	push   %ebp
400010a4:	89 e5                	mov    %esp,%ebp
400010a6:	83 ec 18             	sub    $0x18,%esp
400010a9:	8b 45 08             	mov    0x8(%ebp),%eax
400010ac:	0f af 45 0c          	imul   0xc(%ebp),%eax
400010b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
400010b3:	83 ec 0c             	sub    $0xc,%esp
400010b6:	ff 75 f0             	pushl  -0x10(%ebp)
400010b9:	e8 7f fe ff ff       	call   40000f3d <malloc>
400010be:	83 c4 10             	add    $0x10,%esp
400010c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
400010c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
400010c8:	74 13                	je     400010dd <calloc+0x3a>
400010ca:	83 ec 04             	sub    $0x4,%esp
400010cd:	ff 75 f0             	pushl  -0x10(%ebp)
400010d0:	6a 00                	push   $0x0
400010d2:	ff 75 f4             	pushl  -0xc(%ebp)
400010d5:	e8 06 f9 ff ff       	call   400009e0 <memset>
400010da:	83 c4 10             	add    $0x10,%esp
400010dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
400010e0:	c9                   	leave  
400010e1:	c3                   	ret    

400010e2 <realloc>:
400010e2:	55                   	push   %ebp
400010e3:	89 e5                	mov    %esp,%ebp
400010e5:	83 ec 18             	sub    $0x18,%esp
400010e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400010ef:	a1 0c 40 00 40       	mov    0x4000400c,%eax
400010f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
400010f7:	eb 7a                	jmp    40001173 <realloc+0x91>
400010f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
400010fc:	8b 50 04             	mov    0x4(%eax),%edx
400010ff:	8b 45 08             	mov    0x8(%ebp),%eax
40001102:	39 c2                	cmp    %eax,%edx
40001104:	75 5e                	jne    40001164 <realloc+0x82>
40001106:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
4000110a:	75 15                	jne    40001121 <realloc+0x3f>
4000110c:	83 ec 0c             	sub    $0xc,%esp
4000110f:	ff 75 08             	pushl  0x8(%ebp)
40001112:	e8 69 00 00 00       	call   40001180 <free>
40001117:	83 c4 10             	add    $0x10,%esp
4000111a:	b8 00 00 00 00       	mov    $0x0,%eax
4000111f:	eb 5d                	jmp    4000117e <realloc+0x9c>
40001121:	83 ec 0c             	sub    $0xc,%esp
40001124:	ff 75 0c             	pushl  0xc(%ebp)
40001127:	e8 11 fe ff ff       	call   40000f3d <malloc>
4000112c:	83 c4 10             	add    $0x10,%esp
4000112f:	89 45 f4             	mov    %eax,-0xc(%ebp)
40001132:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001135:	8b 10                	mov    (%eax),%edx
40001137:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000113a:	8b 40 04             	mov    0x4(%eax),%eax
4000113d:	83 ec 04             	sub    $0x4,%esp
40001140:	52                   	push   %edx
40001141:	50                   	push   %eax
40001142:	ff 75 f4             	pushl  -0xc(%ebp)
40001145:	e8 c4 f8 ff ff       	call   40000a0e <memcpy>
4000114a:	83 c4 10             	add    $0x10,%esp
4000114d:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001150:	8b 40 04             	mov    0x4(%eax),%eax
40001153:	83 ec 0c             	sub    $0xc,%esp
40001156:	50                   	push   %eax
40001157:	e8 24 00 00 00       	call   40001180 <free>
4000115c:	83 c4 10             	add    $0x10,%esp
4000115f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001162:	eb 1a                	jmp    4000117e <realloc+0x9c>
40001164:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001167:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000116a:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000116d:	8b 40 08             	mov    0x8(%eax),%eax
40001170:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001173:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
40001177:	75 80                	jne    400010f9 <realloc+0x17>
40001179:	b8 00 00 00 00       	mov    $0x0,%eax
4000117e:	c9                   	leave  
4000117f:	c3                   	ret    

40001180 <free>:
40001180:	55                   	push   %ebp
40001181:	89 e5                	mov    %esp,%ebp
40001183:	83 ec 10             	sub    $0x10,%esp
40001186:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
4000118d:	a1 0c 40 00 40       	mov    0x4000400c,%eax
40001192:	89 45 fc             	mov    %eax,-0x4(%ebp)
40001195:	eb 29                	jmp    400011c0 <free+0x40>
40001197:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000119a:	8b 50 04             	mov    0x4(%eax),%edx
4000119d:	8b 45 08             	mov    0x8(%ebp),%eax
400011a0:	39 c2                	cmp    %eax,%edx
400011a2:	75 0d                	jne    400011b1 <free+0x31>
400011a4:	ff 75 fc             	pushl  -0x4(%ebp)
400011a7:	e8 c9 fc ff ff       	call   40000e75 <merge_into_frees>
400011ac:	83 c4 04             	add    $0x4,%esp
400011af:	eb 15                	jmp    400011c6 <free+0x46>
400011b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011b4:	89 45 f8             	mov    %eax,-0x8(%ebp)
400011b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011ba:	8b 40 08             	mov    0x8(%eax),%eax
400011bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
400011c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
400011c4:	75 d1                	jne    40001197 <free+0x17>
400011c6:	c9                   	leave  
400011c7:	c3                   	ret    

400011c8 <vmm_alloc_cont>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
400011c8:	55                   	push   %ebp
400011c9:	89 e5                	mov    %esp,%ebp
400011cb:	83 ec 28             	sub    $0x28,%esp
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
400011ce:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400011d5:	8b 45 08             	mov    0x8(%ebp),%eax
400011d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400011db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400011f7:	83 ec 0c             	sub    $0xc,%esp
400011fa:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011fd:	50                   	push   %eax
400011fe:	e8 89 00 00 00       	call   4000128c <syscall>
40001203:	83 c4 10             	add    $0x10,%esp
    return (m_z << 16) + m_w;
}
40001206:	8b 45 e0             	mov    -0x20(%ebp),%eax

40001209:	c9                   	leave  
4000120a:	c3                   	ret    

4000120b <vmm_free>:
int main(int argc, char* args[])
{
4000120b:	55                   	push   %ebp
4000120c:	89 e5                	mov    %esp,%ebp
4000120e:	83 ec 28             	sub    $0x28,%esp
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40001211:	8b 45 08             	mov    0x8(%ebp),%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

40001214:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
4000121b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000121e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001225:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000122c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001233:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
4000123a:	83 ec 0c             	sub    $0xc,%esp
4000123d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001240:	50                   	push   %eax
40001241:	e8 46 00 00 00       	call   4000128c <syscall>
40001246:	83 c4 10             	add    $0x10,%esp
            rnd[i] = get_next();
40001249:	c9                   	leave  
4000124a:	c3                   	ret    

4000124b <print_memstat>:
        }

4000124b:	55                   	push   %ebp
4000124c:	89 e5                	mov    %esp,%ebp
4000124e:	83 ec 28             	sub    $0x28,%esp

    return 0;
}
40001251:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
40001258:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000125f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001266:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000126d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000127b:	83 ec 0c             	sub    $0xc,%esp
4000127e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001281:	50                   	push   %eax
40001282:	e8 05 00 00 00       	call   4000128c <syscall>
40001287:	83 c4 10             	add    $0x10,%esp
4000128a:	c9                   	leave  
4000128b:	c3                   	ret    

4000128c <syscall>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
4000128c:	55                   	push   %ebp
4000128d:	89 e5                	mov    %esp,%ebp
4000128f:	57                   	push   %edi
40001290:	56                   	push   %esi
40001291:	53                   	push   %ebx
40001292:	83 ec 0c             	sub    $0xc,%esp
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001295:	8b 45 08             	mov    0x8(%ebp),%eax
40001298:	8b 00                	mov    (%eax),%eax
4000129a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return (m_z << 16) + m_w;
4000129d:	8b 55 08             	mov    0x8(%ebp),%edx
400012a0:	8b 5a 04             	mov    0x4(%edx),%ebx
}
400012a3:	8b 55 08             	mov    0x8(%ebp),%edx
400012a6:	8b 4a 08             	mov    0x8(%edx),%ecx

400012a9:	8b 55 08             	mov    0x8(%ebp),%edx
400012ac:	8b 52 0c             	mov    0xc(%edx),%edx
400012af:	89 55 e8             	mov    %edx,-0x18(%ebp)
int main(int argc, char* args[])
400012b2:	8b 75 08             	mov    0x8(%ebp),%esi
400012b5:	8b 76 10             	mov    0x10(%esi),%esi
{
400012b8:	8b 7d 08             	mov    0x8(%ebp),%edi
400012bb:	8b 7f 14             	mov    0x14(%edi),%edi
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
400012be:	8b 45 ec             	mov    -0x14(%ebp),%eax
400012c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
400012c4:	cd 30                	int    $0x30
400012c6:	89 55 e8             	mov    %edx,-0x18(%ebp)
400012c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
400012cc:	8b 45 08             	mov    0x8(%ebp),%eax
400012cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
400012d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
400012d8:	89 02                	mov    %eax,(%edx)
400012da:	8b 45 08             	mov    0x8(%ebp),%eax
400012dd:	89 58 04             	mov    %ebx,0x4(%eax)
400012e0:	8b 45 08             	mov    0x8(%ebp),%eax
400012e3:	89 48 08             	mov    %ecx,0x8(%eax)
400012e6:	8b 45 08             	mov    0x8(%ebp),%eax
400012e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
400012ec:	89 50 0c             	mov    %edx,0xc(%eax)
400012ef:	8b 45 08             	mov    0x8(%ebp),%eax
400012f2:	89 70 10             	mov    %esi,0x10(%eax)
400012f5:	8b 45 08             	mov    0x8(%ebp),%eax
400012f8:	89 78 14             	mov    %edi,0x14(%eax)
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");
400012fb:	83 c4 0c             	add    $0xc,%esp
400012fe:	5b                   	pop    %ebx
400012ff:	5e                   	pop    %esi
40001300:	5f                   	pop    %edi
40001301:	5d                   	pop    %ebp
40001302:	c3                   	ret    
	...

40001304 <return_rpc>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
40001304:	55                   	push   %ebp
40001305:	89 e5                	mov    %esp,%ebp
40001307:	83 ec 28             	sub    $0x28,%esp
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;
4000130a:	8b 45 08             	mov    0x8(%ebp),%eax

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000130d:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
40001314:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001317:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000131e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001325:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000132c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
40001333:	83 ec 0c             	sub    $0xc,%esp
40001336:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001339:	50                   	push   %eax
4000133a:	e8 4d ff ff ff       	call   4000128c <syscall>
4000133f:	83 c4 10             	add    $0x10,%esp

int main(int argc, char* args[])
40001342:	eb fe                	jmp    40001342 <return_rpc+0x3e>

40001344 <call_rpc>:
{
    HANDLE out = fmkfifo("/dev/urandom");

40001344:	55                   	push   %ebp
40001345:	89 e5                	mov    %esp,%ebp
40001347:	83 ec 28             	sub    $0x28,%esp
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
4000134a:	8b 55 08             	mov    0x8(%ebp),%edx

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

4000134d:	8b 45 14             	mov    0x14(%ebp),%eax
    while(1) {
        for(int i = 0; i < 128; i++) {
40001350:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40001357:	89 55 e4             	mov    %edx,-0x1c(%ebp)
4000135a:	8b 55 0c             	mov    0xc(%ebp),%edx
4000135d:	89 55 e8             	mov    %edx,-0x18(%ebp)
40001360:	8b 55 10             	mov    0x10(%ebp),%edx
40001363:	89 55 ec             	mov    %edx,-0x14(%ebp)
40001366:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001369:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
40001370:	83 ec 0c             	sub    $0xc,%esp
40001373:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001376:	50                   	push   %eax
40001377:	e8 10 ff ff ff       	call   4000128c <syscall>
4000137c:	83 c4 10             	add    $0x10,%esp

        fwrite(out, rnd, 128 * sizeof(uint32_t));
4000137f:	8b 45 e0             	mov    -0x20(%ebp),%eax
    }
40001382:	c9                   	leave  
40001383:	c3                   	ret    

40001384 <fetch_rpc_data>:

    return 0;
40001384:	55                   	push   %ebp
40001385:	89 e5                	mov    %esp,%ebp
40001387:	83 ec 28             	sub    $0x28,%esp
}
4000138a:	8b 45 08             	mov    0x8(%ebp),%eax
4000138d:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
40001394:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001397:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000139e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400013a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400013ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400013b3:	83 ec 0c             	sub    $0xc,%esp
400013b6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400013b9:	50                   	push   %eax
400013ba:	e8 cd fe ff ff       	call   4000128c <syscall>
400013bf:	83 c4 10             	add    $0x10,%esp
400013c2:	c9                   	leave  
400013c3:	c3                   	ret    

400013c4 <register_irq_rpc_syscall>:
400013c4:	55                   	push   %ebp
400013c5:	89 e5                	mov    %esp,%ebp
400013c7:	83 ec 28             	sub    $0x28,%esp
400013ca:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400013d1:	8b 45 08             	mov    0x8(%ebp),%eax
400013d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400013d7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400013de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400013e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400013ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400013f3:	83 ec 0c             	sub    $0xc,%esp
400013f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400013f9:	50                   	push   %eax
400013fa:	e8 8d fe ff ff       	call   4000128c <syscall>
400013ff:	83 c4 10             	add    $0x10,%esp
40001402:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001405:	c9                   	leave  
40001406:	c3                   	ret    

40001407 <register_irq_handler>:
40001407:	55                   	push   %ebp
40001408:	89 e5                	mov    %esp,%ebp
4000140a:	83 ec 08             	sub    $0x8,%esp
4000140d:	83 ec 0c             	sub    $0xc,%esp
40001410:	ff 75 08             	pushl  0x8(%ebp)
40001413:	e8 ac ff ff ff       	call   400013c4 <register_irq_rpc_syscall>
40001418:	83 c4 10             	add    $0x10,%esp
4000141b:	85 c0                	test   %eax,%eax
4000141d:	74 14                	je     40001433 <register_irq_handler+0x2c>
4000141f:	8b 45 08             	mov    0x8(%ebp),%eax
40001422:	8b 55 0c             	mov    0xc(%ebp),%edx
40001425:	89 14 85 20 40 00 40 	mov    %edx,0x40004020(,%eax,4)
4000142c:	b8 01 00 00 00       	mov    $0x1,%eax
40001431:	eb 05                	jmp    40001438 <register_irq_handler+0x31>
40001433:	b8 00 00 00 00       	mov    $0x0,%eax
40001438:	c9                   	leave  
40001439:	c3                   	ret    

4000143a <_handle_rpc>:
4000143a:	55                   	push   %ebp
4000143b:	89 e5                	mov    %esp,%ebp
4000143d:	83 ec 18             	sub    $0x18,%esp
40001440:	83 ec 0c             	sub    $0xc,%esp
40001443:	ff 75 10             	pushl  0x10(%ebp)
40001446:	e8 f2 fa ff ff       	call   40000f3d <malloc>
4000144b:	83 c4 10             	add    $0x10,%esp
4000144e:	89 45 f4             	mov    %eax,-0xc(%ebp)
40001451:	83 ec 0c             	sub    $0xc,%esp
40001454:	ff 75 f4             	pushl  -0xc(%ebp)
40001457:	e8 28 ff ff ff       	call   40001384 <fetch_rpc_data>
4000145c:	83 c4 10             	add    $0x10,%esp
4000145f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001463:	75 30                	jne    40001495 <_handle_rpc+0x5b>
40001465:	8b 45 0c             	mov    0xc(%ebp),%eax
40001468:	8b 04 85 20 40 00 40 	mov    0x40004020(,%eax,4),%eax
4000146f:	85 c0                	test   %eax,%eax
40001471:	74 22                	je     40001495 <_handle_rpc+0x5b>
40001473:	8b 45 0c             	mov    0xc(%ebp),%eax
40001476:	8b 04 85 20 40 00 40 	mov    0x40004020(,%eax,4),%eax
4000147d:	83 ec 0c             	sub    $0xc,%esp
40001480:	ff 75 0c             	pushl  0xc(%ebp)
40001483:	ff d0                	call   *%eax
40001485:	83 c4 10             	add    $0x10,%esp
40001488:	83 ec 0c             	sub    $0xc,%esp
4000148b:	6a 00                	push   $0x0
4000148d:	e8 72 fe ff ff       	call   40001304 <return_rpc>
40001492:	83 c4 10             	add    $0x10,%esp
40001495:	83 ec 0c             	sub    $0xc,%esp
40001498:	68 d4 30 00 40       	push   $0x400030d4
4000149d:	e8 c1 f3 ff ff       	call   40000863 <printf>
400014a2:	83 c4 10             	add    $0x10,%esp
400014a5:	83 ec 0c             	sub    $0xc,%esp
400014a8:	ff 75 f4             	pushl  -0xc(%ebp)
400014ab:	e8 d0 fc ff ff       	call   40001180 <free>
400014b0:	83 c4 10             	add    $0x10,%esp
400014b3:	83 ec 0c             	sub    $0xc,%esp
400014b6:	6a 00                	push   $0x0
400014b8:	e8 47 fe ff ff       	call   40001304 <return_rpc>
400014bd:	83 c4 10             	add    $0x10,%esp
400014c0:	c9                   	leave  
400014c1:	c3                   	ret    

400014c2 <set_rpc_handler>:
400014c2:	55                   	push   %ebp
400014c3:	89 e5                	mov    %esp,%ebp
400014c5:	57                   	push   %edi
400014c6:	56                   	push   %esi
400014c7:	53                   	push   %ebx
400014c8:	83 ec 2c             	sub    $0x2c,%esp
400014cb:	83 ec 04             	sub    $0x4,%esp
400014ce:	68 00 02 00 00       	push   $0x200
400014d3:	6a 00                	push   $0x0
400014d5:	68 20 40 00 40       	push   $0x40004020
400014da:	e8 01 f5 ff ff       	call   400009e0 <memset>
400014df:	83 c4 10             	add    $0x10,%esp
400014e2:	8d 55 d0             	lea    -0x30(%ebp),%edx
400014e5:	bb d0 31 00 40       	mov    $0x400031d0,%ebx
400014ea:	b8 06 00 00 00       	mov    $0x6,%eax
400014ef:	89 d7                	mov    %edx,%edi
400014f1:	89 de                	mov    %ebx,%esi
400014f3:	89 c1                	mov    %eax,%ecx
400014f5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
400014f7:	83 ec 0c             	sub    $0xc,%esp
400014fa:	8d 45 d0             	lea    -0x30(%ebp),%eax
400014fd:	50                   	push   %eax
400014fe:	e8 89 fd ff ff       	call   4000128c <syscall>
40001503:	83 c4 10             	add    $0x10,%esp
40001506:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001509:	83 c4 00             	add    $0x0,%esp
4000150c:	5b                   	pop    %ebx
4000150d:	5e                   	pop    %esi
4000150e:	5f                   	pop    %edi
4000150f:	5d                   	pop    %ebp
40001510:	c3                   	ret    

40001511 <getargs>:
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
40001511:	55                   	push   %ebp
40001512:	89 e5                	mov    %esp,%ebp
40001514:	83 ec 28             	sub    $0x28,%esp
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40001517:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000151e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001525:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000152c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001533:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000153a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

int main(int argc, char* args[])
40001541:	83 ec 0c             	sub    $0xc,%esp
40001544:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001547:	50                   	push   %eax
40001548:	e8 3f fd ff ff       	call   4000128c <syscall>
4000154d:	83 c4 10             	add    $0x10,%esp
{
    HANDLE out = fmkfifo("/dev/urandom");
40001550:	8b 45 e0             	mov    -0x20(%ebp),%eax

40001553:	c9                   	leave  
40001554:	c3                   	ret    

40001555 <_start>:
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40001555:	55                   	push   %ebp
40001556:	89 e5                	mov    %esp,%ebp
40001558:	83 ec 18             	sub    $0x18,%esp
    fclose(initCtrl);
4000155b:	e8 b1 ff ff ff       	call   40001511 <getargs>
40001560:	89 45 ec             	mov    %eax,-0x14(%ebp)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40001563:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    while(1) {
4000156a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
4000156e:	74 14                	je     40001584 <_start+0x2f>
        for(int i = 0; i < 128; i++) {
40001570:	eb 03                	jmp    40001575 <_start+0x20>
            rnd[i] = get_next();
40001572:	ff 45 f0             	incl   -0x10(%ebp)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40001575:	8b 45 f0             	mov    -0x10(%ebp),%eax
40001578:	c1 e0 02             	shl    $0x2,%eax
4000157b:	03 45 ec             	add    -0x14(%ebp),%eax
4000157e:	8b 00                	mov    (%eax),%eax
40001580:	85 c0                	test   %eax,%eax
40001582:	75 ee                	jne    40001572 <_start+0x1d>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }
40001584:	e8 39 ff ff ff       	call   400014c2 <set_rpc_handler>

    return 0;
40001589:	83 ec 08             	sub    $0x8,%esp
4000158c:	ff 75 ec             	pushl  -0x14(%ebp)
4000158f:	ff 75 f0             	pushl  -0x10(%ebp)
40001592:	e8 e3 ea ff ff       	call   4000007a <main>
40001597:	83 c4 10             	add    $0x10,%esp
4000159a:	89 45 f4             	mov    %eax,-0xc(%ebp)
}
4000159d:	83 ec 0c             	sub    $0xc,%esp
400015a0:	ff 75 f4             	pushl  -0xc(%ebp)
400015a3:	e8 46 00 00 00       	call   400015ee <exit>
400015a8:	83 c4 10             	add    $0x10,%esp
400015ab:	c9                   	leave  
400015ac:	c3                   	ret    

400015ad <yield>:
400015ad:	55                   	push   %ebp
400015ae:	89 e5                	mov    %esp,%ebp
400015b0:	83 ec 28             	sub    $0x28,%esp
400015b3:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
400015ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400015c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400015c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400015cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400015d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400015dd:	83 ec 0c             	sub    $0xc,%esp
400015e0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400015e3:	50                   	push   %eax
400015e4:	e8 a3 fc ff ff       	call   4000128c <syscall>
400015e9:	83 c4 10             	add    $0x10,%esp
400015ec:	c9                   	leave  
400015ed:	c3                   	ret    

400015ee <exit>:
400015ee:	55                   	push   %ebp
400015ef:	89 e5                	mov    %esp,%ebp
400015f1:	83 ec 28             	sub    $0x28,%esp
400015f4:	8b 45 08             	mov    0x8(%ebp),%eax
400015f7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400015fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001601:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001608:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000160f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001616:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000161d:	83 ec 0c             	sub    $0xc,%esp
40001620:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001623:	50                   	push   %eax
40001624:	e8 63 fc ff ff       	call   4000128c <syscall>
40001629:	83 c4 10             	add    $0x10,%esp
4000162c:	83 ec 0c             	sub    $0xc,%esp
4000162f:	68 e4 30 00 40       	push   $0x400030e4
40001634:	e8 2a f2 ff ff       	call   40000863 <printf>
40001639:	83 c4 10             	add    $0x10,%esp
4000163c:	eb ee                	jmp    4000162c <exit+0x3e>

4000163e <getExecPath>:
4000163e:	55                   	push   %ebp
4000163f:	89 e5                	mov    %esp,%ebp
40001641:	83 ec 28             	sub    $0x28,%esp
40001644:	8b 45 08             	mov    0x8(%ebp),%eax
40001647:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
4000164e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001651:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001658:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000165f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001666:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000166d:	83 ec 0c             	sub    $0xc,%esp
40001670:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001673:	50                   	push   %eax
40001674:	e8 13 fc ff ff       	call   4000128c <syscall>
40001679:	83 c4 10             	add    $0x10,%esp
4000167c:	c9                   	leave  
4000167d:	c3                   	ret    

4000167e <changeExecPath>:
4000167e:	55                   	push   %ebp
4000167f:	89 e5                	mov    %esp,%ebp
40001681:	83 ec 28             	sub    $0x28,%esp
40001684:	8b 45 08             	mov    0x8(%ebp),%eax
40001687:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
4000168e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40001691:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001698:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000169f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400016a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400016ad:	83 ec 0c             	sub    $0xc,%esp
400016b0:	8d 45 e0             	lea    -0x20(%ebp),%eax
400016b3:	50                   	push   %eax
400016b4:	e8 d3 fb ff ff       	call   4000128c <syscall>
400016b9:	83 c4 10             	add    $0x10,%esp
400016bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
400016bf:	c9                   	leave  
400016c0:	c3                   	ret    

400016c1 <cd>:
400016c1:	55                   	push   %ebp
400016c2:	89 e5                	mov    %esp,%ebp
400016c4:	83 ec 08             	sub    $0x8,%esp
400016c7:	83 ec 0c             	sub    $0xc,%esp
400016ca:	ff 75 08             	pushl  0x8(%ebp)
400016cd:	e8 ac ff ff ff       	call   4000167e <changeExecPath>
400016d2:	83 c4 10             	add    $0x10,%esp
400016d5:	85 c0                	test   %eax,%eax
400016d7:	75 14                	jne    400016ed <cd+0x2c>
400016d9:	e8 4e ea ff ff       	call   4000012c <getLastVFSErr>
400016de:	83 ec 08             	sub    $0x8,%esp
400016e1:	50                   	push   %eax
400016e2:	ff 75 08             	pushl  0x8(%ebp)
400016e5:	e8 80 00 00 00       	call   4000176a <printFilesystemError>
400016ea:	83 c4 10             	add    $0x10,%esp
400016ed:	c9                   	leave  
400016ee:	c3                   	ret    

400016ef <exec>:
400016ef:	55                   	push   %ebp
400016f0:	89 e5                	mov    %esp,%ebp
400016f2:	83 ec 28             	sub    $0x28,%esp
400016f5:	8b 55 08             	mov    0x8(%ebp),%edx
400016f8:	8b 45 0c             	mov    0xc(%ebp),%eax
400016fb:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
40001702:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40001705:	89 45 e8             	mov    %eax,-0x18(%ebp)
40001708:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000170f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001716:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000171d:	83 ec 0c             	sub    $0xc,%esp
40001720:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001723:	50                   	push   %eax
40001724:	e8 63 fb ff ff       	call   4000128c <syscall>
40001729:	83 c4 10             	add    $0x10,%esp
4000172c:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000172f:	c9                   	leave  
40001730:	c3                   	ret    

40001731 <texec>:
40001731:	55                   	push   %ebp
40001732:	89 e5                	mov    %esp,%ebp
40001734:	83 ec 18             	sub    $0x18,%esp
40001737:	83 ec 08             	sub    $0x8,%esp
4000173a:	ff 75 0c             	pushl  0xc(%ebp)
4000173d:	ff 75 08             	pushl  0x8(%ebp)
40001740:	e8 aa ff ff ff       	call   400016ef <exec>
40001745:	83 c4 10             	add    $0x10,%esp
40001748:	89 45 f4             	mov    %eax,-0xc(%ebp)
4000174b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000174f:	75 14                	jne    40001765 <texec+0x34>
40001751:	e8 d6 e9 ff ff       	call   4000012c <getLastVFSErr>
40001756:	83 ec 08             	sub    $0x8,%esp
40001759:	50                   	push   %eax
4000175a:	ff 75 08             	pushl  0x8(%ebp)
4000175d:	e8 08 00 00 00       	call   4000176a <printFilesystemError>
40001762:	83 c4 10             	add    $0x10,%esp
40001765:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001768:	c9                   	leave  
40001769:	c3                   	ret    

4000176a <printFilesystemError>:
4000176a:	55                   	push   %ebp
4000176b:	89 e5                	mov    %esp,%ebp
4000176d:	83 ec 08             	sub    $0x8,%esp
40001770:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
40001774:	0f 87 8c 00 00 00    	ja     40001806 <printFilesystemError+0x9c>
4000177a:	8b 45 0c             	mov    0xc(%ebp),%eax
4000177d:	c1 e0 02             	shl    $0x2,%eax
40001780:	8b 80 b8 31 00 40    	mov    0x400031b8(%eax),%eax
40001786:	ff e0                	jmp    *%eax
40001788:	83 ec 08             	sub    $0x8,%esp
4000178b:	ff 75 08             	pushl  0x8(%ebp)
4000178e:	68 eb 30 00 40       	push   $0x400030eb
40001793:	e8 cb f0 ff ff       	call   40000863 <printf>
40001798:	83 c4 10             	add    $0x10,%esp
4000179b:	eb 7c                	jmp    40001819 <printFilesystemError+0xaf>
4000179d:	83 ec 08             	sub    $0x8,%esp
400017a0:	ff 75 08             	pushl  0x8(%ebp)
400017a3:	68 00 31 00 40       	push   $0x40003100
400017a8:	e8 b6 f0 ff ff       	call   40000863 <printf>
400017ad:	83 c4 10             	add    $0x10,%esp
400017b0:	eb 67                	jmp    40001819 <printFilesystemError+0xaf>
400017b2:	83 ec 08             	sub    $0x8,%esp
400017b5:	ff 75 08             	pushl  0x8(%ebp)
400017b8:	68 20 31 00 40       	push   $0x40003120
400017bd:	e8 a1 f0 ff ff       	call   40000863 <printf>
400017c2:	83 c4 10             	add    $0x10,%esp
400017c5:	eb 52                	jmp    40001819 <printFilesystemError+0xaf>
400017c7:	83 ec 08             	sub    $0x8,%esp
400017ca:	ff 75 08             	pushl  0x8(%ebp)
400017cd:	68 4a 31 00 40       	push   $0x4000314a
400017d2:	e8 8c f0 ff ff       	call   40000863 <printf>
400017d7:	83 c4 10             	add    $0x10,%esp
400017da:	eb 3d                	jmp    40001819 <printFilesystemError+0xaf>
400017dc:	83 ec 08             	sub    $0x8,%esp
400017df:	ff 75 08             	pushl  0x8(%ebp)
400017e2:	68 60 31 00 40       	push   $0x40003160
400017e7:	e8 77 f0 ff ff       	call   40000863 <printf>
400017ec:	83 c4 10             	add    $0x10,%esp
400017ef:	eb 28                	jmp    40001819 <printFilesystemError+0xaf>
400017f1:	83 ec 08             	sub    $0x8,%esp
400017f4:	ff 75 08             	pushl  0x8(%ebp)
400017f7:	68 9b 31 00 40       	push   $0x4000319b
400017fc:	e8 62 f0 ff ff       	call   40000863 <printf>
40001801:	83 c4 10             	add    $0x10,%esp
40001804:	eb 13                	jmp    40001819 <printFilesystemError+0xaf>
40001806:	83 ec 08             	sub    $0x8,%esp
40001809:	ff 75 08             	pushl  0x8(%ebp)
4000180c:	68 ae 31 00 40       	push   $0x400031ae
40001811:	e8 4d f0 ff ff       	call   40000863 <printf>
40001816:	83 c4 10             	add    $0x10,%esp
40001819:	83 ec 0c             	sub    $0xc,%esp
4000181c:	68 b6 31 00 40       	push   $0x400031b6
40001821:	e8 3d f0 ff ff       	call   40000863 <printf>
40001826:	83 c4 10             	add    $0x10,%esp
40001829:	c9                   	leave  
4000182a:	c3                   	ret    
