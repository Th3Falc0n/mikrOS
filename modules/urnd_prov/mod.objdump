
../../initrfs/ibin/urnd_prov:     file format elf32-i386
../../initrfs/ibin/urnd_prov
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40000483

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x0000125c memsz 0x0000125c flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x000011da memsz 0x00002214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000125c  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       00000050  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  40003050  40003050  00004050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000214  40004000  40004000  000041da  2**2
                  ALLOC
  5 .stab         00004890  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008a6c  2**0
                  CONTENTS, READONLY
  7 .stabstr      000018ac  00000000  00000000  00008aea  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
40003050 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 urnd_prov.c
40000000 l     F .text	0000007a get_next
00000000 l    df *ABS*	00000000 process.c
40004000 l     O .bss	00000200 irq_handlers
40003038 l     O .rodata	00000018 C.7.1012
400004f5 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
400005b8 l     F .text	00000047 resolveHandle
40000a68 l     F .text	0000004a printrwerror
400008b5 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000f5c l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
40000279 g     F .text	0000003d getExecPath
4000096c g     F .text	00000014 putchar
40000d19 g     F .text	00000033 strcpy
400002fc g     F .text	0000003e yield
40000980 g     F .text	000000e8 printf
4000120c g     F .text	00000050 syscall
40000b7d g     F .text	00000042 fgets
40000b71 g     F .text	0000000c getc
40000c48 g     F .text	00000026 memcpy
400008a3 g     F .text	00000012 puts
4000033a g     F .text	0000003d pexists
40000fc5 g     F .text	000000f8 malloc
400003cf g     F .text	0000003d fetch_rpc_data
40000d4c g     F .text	000000a5 strtoknc
4000020f g     F .text	0000003d changeExecPath
40004210 g     O .bss	00000004 first_free
40000752 g     F .text	00000012 setstdout
40002000 g     O .data	00000004 m_z
4000111d g     F .text	00000034 calloc
400011cf g     F .text	0000003d vmm_alloc_cont
4000019d g     F .text	0000003c exec
40000483 g     F .text	00000072 _start
400010bd g     F .text	00000060 realloc
40000446 g     F .text	0000003d set_rpc_handler
40000e2a g     F .text	00000052 strtok
40000c6e g     F .text	00000047 memcmp
40002004 g     O .data	00000004 m_w
40000ab2 g     F .text	00000085 fread
40004208 g     O .bss	00000004 first_unused
400006b6 g     F .text	0000003c fopen
40000c2c g     F .text	0000001c memset
4000007a g     F .text	000000af main
40000679 g     F .text	0000003d fclose
40000b62 g     F .text	0000000f getchar
40000bbf g     F .text	0000006c getln
40004204 g     O .bss	00000004 fr
4000063c g     F .text	0000003d favailable
40000959 g     F .text	00000013 putc
40000cb5 g     F .text	00000049 strcmp
40000b37 g     F .text	0000002b fgetc
40004200 g     O .bss	00000004 sp
4000024c g     F .text	0000002d cd
4000420c g     O .bss	00000004 first_used
400008f4 g     F .text	00000065 fputc
400007a2 g     F .text	00000093 fwrite
40000740 g     F .text	00000012 setstdin
400001d9 g     F .text	00000036 texec
40000df1 g     F .text	00000039 strclone
400002b6 g     F .text	00000046 exit
40000377 g     F .text	00000058 register_irq_handler
400006f2 g     F .text	0000003c fopenpmhandle
40001192 g     F .text	0000003d vmm_free
4000012c g     F .text	00000071 printFilesystemError
40000cfe g     F .text	0000001b strlen
40000764 g     F .text	0000003e getLastVFSErr
40000835 g     F .text	0000006e fputs
400005ff g     F .text	0000003d fmkfifo
4000040c g     F .text	0000003a call_rpc
4000072e g     F .text	00000012 setstderr
40001154 g     F .text	0000003e print_memstat
40000e7c g     F .text	000000e0 free



Disassembly of section .text:

40000000 <get_next>:
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000003:	a1 00 20 00 40       	mov    0x40002000,%eax
40000008:	0f b7 d0             	movzwl %ax,%edx
4000000b:	89 d0                	mov    %edx,%eax
4000000d:	c1 e0 03             	shl    $0x3,%eax
40000010:	01 d0                	add    %edx,%eax
40000012:	c1 e0 06             	shl    $0x6,%eax
40000015:	01 d0                	add    %edx,%eax
40000017:	01 c0                	add    %eax,%eax
40000019:	01 d0                	add    %edx,%eax
4000001b:	c1 e0 02             	shl    $0x2,%eax
4000001e:	01 d0                	add    %edx,%eax
40000020:	c1 e0 03             	shl    $0x3,%eax
40000023:	8d 14 10             	lea    (%eax,%edx,1),%edx
40000026:	a1 00 20 00 40       	mov    0x40002000,%eax
4000002b:	c1 e8 10             	shr    $0x10,%eax
4000002e:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000031:	a3 00 20 00 40       	mov    %eax,0x40002000
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000036:	a1 04 20 00 40       	mov    0x40002004,%eax
4000003b:	0f b7 d0             	movzwl %ax,%edx
4000003e:	89 d0                	mov    %edx,%eax
40000040:	c1 e0 02             	shl    $0x2,%eax
40000043:	01 d0                	add    %edx,%eax
40000045:	89 c2                	mov    %eax,%edx
40000047:	c1 e2 04             	shl    $0x4,%edx
4000004a:	29 c2                	sub    %eax,%edx
4000004c:	89 d0                	mov    %edx,%eax
4000004e:	c1 e0 04             	shl    $0x4,%eax
40000051:	29 d0                	sub    %edx,%eax
40000053:	c1 e0 04             	shl    $0x4,%eax
40000056:	8b 15 04 20 00 40    	mov    0x40002004,%edx
4000005c:	c1 ea 10             	shr    $0x10,%edx
4000005f:	01 d0                	add    %edx,%eax
40000061:	a3 04 20 00 40       	mov    %eax,0x40002004
    return (m_z << 16) + m_w;
40000066:	a1 00 20 00 40       	mov    0x40002000,%eax
4000006b:	89 c2                	mov    %eax,%edx
4000006d:	c1 e2 10             	shl    $0x10,%edx
40000070:	a1 04 20 00 40       	mov    0x40002004,%eax
40000075:	8d 04 02             	lea    (%edx,%eax,1),%eax
}
40000078:	5d                   	pop    %ebp
40000079:	c3                   	ret    

4000007a <main>:

int main(int argc, char* args[])
{
4000007a:	8d 4c 24 04          	lea    0x4(%esp),%ecx
4000007e:	83 e4 f0             	and    $0xfffffff0,%esp
40000081:	ff 71 fc             	pushl  -0x4(%ecx)
40000084:	55                   	push   %ebp
40000085:	89 e5                	mov    %esp,%ebp
40000087:	53                   	push   %ebx
40000088:	51                   	push   %ecx
40000089:	83 ec 20             	sub    $0x20,%esp
    HANDLE out = fmkfifo("/dev/urandom");
4000008c:	83 ec 0c             	sub    $0xc,%esp
4000008f:	68 00 30 00 40       	push   $0x40003000
40000094:	e8 66 05 00 00       	call   400005ff <fmkfifo>
40000099:	83 c4 10             	add    $0x10,%esp
4000009c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
4000009f:	83 ec 08             	sub    $0x8,%esp
400000a2:	6a 02                	push   $0x2
400000a4:	68 0d 30 00 40       	push   $0x4000300d
400000a9:	e8 08 06 00 00       	call   400006b6 <fopen>
400000ae:	83 c4 10             	add    $0x10,%esp
400000b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400000b4:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
400000b8:	83 ec 04             	sub    $0x4,%esp
400000bb:	6a 01                	push   $0x1
400000bd:	8d 45 e7             	lea    -0x19(%ebp),%eax
400000c0:	50                   	push   %eax
400000c1:	ff 75 ec             	pushl  -0x14(%ebp)
400000c4:	e8 d9 06 00 00       	call   400007a2 <fwrite>
400000c9:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
400000cc:	83 ec 0c             	sub    $0xc,%esp
400000cf:	ff 75 ec             	pushl  -0x14(%ebp)
400000d2:	e8 a2 05 00 00       	call   40000679 <fclose>
400000d7:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
400000da:	83 ec 0c             	sub    $0xc,%esp
400000dd:	68 00 02 00 00       	push   $0x200
400000e2:	e8 de 0e 00 00       	call   40000fc5 <malloc>
400000e7:	83 c4 10             	add    $0x10,%esp
400000ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(1) {
        for(int i = 0; i < 128; i++) {
400000ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400000f4:	eb 15                	jmp    4000010b <main+0x91>
            rnd[i] = get_next();
400000f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400000f9:	c1 e0 02             	shl    $0x2,%eax
400000fc:	89 c3                	mov    %eax,%ebx
400000fe:	03 5d f0             	add    -0x10(%ebp),%ebx
40000101:	e8 fa fe ff ff       	call   40000000 <get_next>
40000106:	89 03                	mov    %eax,(%ebx)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000108:	ff 45 f4             	incl   -0xc(%ebp)
4000010b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
4000010f:	7e e5                	jle    400000f6 <main+0x7c>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000111:	83 ec 04             	sub    $0x4,%esp
40000114:	68 00 02 00 00       	push   $0x200
40000119:	ff 75 f0             	pushl  -0x10(%ebp)
4000011c:	ff 75 e8             	pushl  -0x18(%ebp)
4000011f:	e8 7e 06 00 00       	call   400007a2 <fwrite>
40000124:	83 c4 10             	add    $0x10,%esp
    }
40000127:	eb c4                	jmp    400000ed <main+0x73>
40000129:	00 00                	add    %al,(%eax)
	...

4000012c <printFilesystemError>:
4000012c:	55                   	push   %ebp
4000012d:	89 e5                	mov    %esp,%ebp
4000012f:	83 ec 08             	sub    $0x8,%esp
40000132:	8b 55 0c             	mov    0xc(%ebp),%edx
40000135:	8b 45 08             	mov    0x8(%ebp),%eax
40000138:	83 fa 05             	cmp    $0x5,%edx
4000013b:	77 43                	ja     40000180 <printFilesystemError+0x54>
4000013d:	ff 24 95 20 30 00 40 	jmp    *0x40003020(,%edx,4)
40000144:	52                   	push   %edx
40000145:	52                   	push   %edx
40000146:	50                   	push   %eax
40000147:	68 50 30 00 40       	push   $0x40003050
4000014c:	eb 3a                	jmp    40000188 <printFilesystemError+0x5c>
4000014e:	51                   	push   %ecx
4000014f:	51                   	push   %ecx
40000150:	50                   	push   %eax
40000151:	68 62 30 00 40       	push   $0x40003062
40000156:	eb 30                	jmp    40000188 <printFilesystemError+0x5c>
40000158:	52                   	push   %edx
40000159:	52                   	push   %edx
4000015a:	50                   	push   %eax
4000015b:	68 81 30 00 40       	push   $0x40003081
40000160:	eb 26                	jmp    40000188 <printFilesystemError+0x5c>
40000162:	51                   	push   %ecx
40000163:	51                   	push   %ecx
40000164:	50                   	push   %eax
40000165:	68 ab 30 00 40       	push   $0x400030ab
4000016a:	eb 1c                	jmp    40000188 <printFilesystemError+0x5c>
4000016c:	52                   	push   %edx
4000016d:	52                   	push   %edx
4000016e:	50                   	push   %eax
4000016f:	68 c0 30 00 40       	push   $0x400030c0
40000174:	eb 12                	jmp    40000188 <printFilesystemError+0x5c>
40000176:	51                   	push   %ecx
40000177:	51                   	push   %ecx
40000178:	50                   	push   %eax
40000179:	68 fb 30 00 40       	push   $0x400030fb
4000017e:	eb 08                	jmp    40000188 <printFilesystemError+0x5c>
40000180:	52                   	push   %edx
40000181:	52                   	push   %edx
40000182:	50                   	push   %eax
40000183:	68 0e 31 00 40       	push   $0x4000310e
40000188:	e8 f3 07 00 00       	call   40000980 <printf>
4000018d:	c7 45 08 2b 31 00 40 	movl   $0x4000312b,0x8(%ebp)
40000194:	83 c4 10             	add    $0x10,%esp
40000197:	c9                   	leave  
40000198:	e9 e3 07 00 00       	jmp    40000980 <printf>

4000019d <exec>:
4000019d:	55                   	push   %ebp
4000019e:	89 e5                	mov    %esp,%ebp
400001a0:	83 ec 34             	sub    $0x34,%esp
400001a3:	8b 45 08             	mov    0x8(%ebp),%eax
400001a6:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
400001ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001b0:	8b 45 0c             	mov    0xc(%ebp),%eax
400001b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
400001b6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001b9:	50                   	push   %eax
400001ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400001cf:	e8 38 10 00 00       	call   4000120c <syscall>
400001d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
400001d7:	c9                   	leave  
400001d8:	c3                   	ret    

400001d9 <texec>:
400001d9:	55                   	push   %ebp
400001da:	89 e5                	mov    %esp,%ebp
400001dc:	56                   	push   %esi
400001dd:	53                   	push   %ebx
400001de:	53                   	push   %ebx
400001df:	53                   	push   %ebx
400001e0:	8b 75 08             	mov    0x8(%ebp),%esi
400001e3:	ff 75 0c             	pushl  0xc(%ebp)
400001e6:	56                   	push   %esi
400001e7:	e8 b1 ff ff ff       	call   4000019d <exec>
400001ec:	83 c4 10             	add    $0x10,%esp
400001ef:	89 c3                	mov    %eax,%ebx
400001f1:	85 c0                	test   %eax,%eax
400001f3:	75 11                	jne    40000206 <texec+0x2d>
400001f5:	e8 6a 05 00 00       	call   40000764 <getLastVFSErr>
400001fa:	51                   	push   %ecx
400001fb:	51                   	push   %ecx
400001fc:	50                   	push   %eax
400001fd:	56                   	push   %esi
400001fe:	e8 29 ff ff ff       	call   4000012c <printFilesystemError>
40000203:	83 c4 10             	add    $0x10,%esp
40000206:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000209:	89 d8                	mov    %ebx,%eax
4000020b:	5b                   	pop    %ebx
4000020c:	5e                   	pop    %esi
4000020d:	5d                   	pop    %ebp
4000020e:	c3                   	ret    

4000020f <changeExecPath>:
4000020f:	55                   	push   %ebp
40000210:	89 e5                	mov    %esp,%ebp
40000212:	83 ec 34             	sub    $0x34,%esp
40000215:	8b 45 08             	mov    0x8(%ebp),%eax
40000218:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
4000021f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000222:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000225:	50                   	push   %eax
40000226:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000022d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000234:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000023b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000242:	e8 c5 0f 00 00       	call   4000120c <syscall>
40000247:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000024a:	c9                   	leave  
4000024b:	c3                   	ret    

4000024c <cd>:
4000024c:	55                   	push   %ebp
4000024d:	89 e5                	mov    %esp,%ebp
4000024f:	53                   	push   %ebx
40000250:	83 ec 10             	sub    $0x10,%esp
40000253:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000256:	53                   	push   %ebx
40000257:	e8 b3 ff ff ff       	call   4000020f <changeExecPath>
4000025c:	83 c4 10             	add    $0x10,%esp
4000025f:	85 c0                	test   %eax,%eax
40000261:	75 11                	jne    40000274 <cd+0x28>
40000263:	e8 fc 04 00 00       	call   40000764 <getLastVFSErr>
40000268:	52                   	push   %edx
40000269:	52                   	push   %edx
4000026a:	50                   	push   %eax
4000026b:	53                   	push   %ebx
4000026c:	e8 bb fe ff ff       	call   4000012c <printFilesystemError>
40000271:	83 c4 10             	add    $0x10,%esp
40000274:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000277:	c9                   	leave  
40000278:	c3                   	ret    

40000279 <getExecPath>:
40000279:	55                   	push   %ebp
4000027a:	89 e5                	mov    %esp,%ebp
4000027c:	83 ec 34             	sub    $0x34,%esp
4000027f:	8b 45 08             	mov    0x8(%ebp),%eax
40000282:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
40000289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000028c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000028f:	50                   	push   %eax
40000290:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000297:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000029e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002ac:	e8 5b 0f 00 00       	call   4000120c <syscall>
400002b1:	83 c4 10             	add    $0x10,%esp
400002b4:	c9                   	leave  
400002b5:	c3                   	ret    

400002b6 <exit>:
400002b6:	55                   	push   %ebp
400002b7:	89 e5                	mov    %esp,%ebp
400002b9:	83 ec 34             	sub    $0x34,%esp
400002bc:	8b 45 08             	mov    0x8(%ebp),%eax
400002bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400002c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002e8:	50                   	push   %eax
400002e9:	e8 1e 0f 00 00       	call   4000120c <syscall>
400002ee:	c7 04 24 16 31 00 40 	movl   $0x40003116,(%esp)
400002f5:	e8 86 06 00 00       	call   40000980 <printf>
400002fa:	eb f2                	jmp    400002ee <exit+0x38>

400002fc <yield>:
400002fc:	55                   	push   %ebp
400002fd:	89 e5                	mov    %esp,%ebp
400002ff:	83 ec 34             	sub    $0x34,%esp
40000302:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000305:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
4000030c:	50                   	push   %eax
4000030d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000314:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000031b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000322:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000329:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000330:	e8 d7 0e 00 00       	call   4000120c <syscall>
40000335:	83 c4 10             	add    $0x10,%esp
40000338:	c9                   	leave  
40000339:	c3                   	ret    

4000033a <pexists>:
int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
4000033a:	55                   	push   %ebp
4000033b:	89 e5                	mov    %esp,%ebp
4000033d:	83 ec 34             	sub    $0x34,%esp
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
40000340:	8b 45 08             	mov    0x8(%ebp),%eax
40000343:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
4000034a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
4000034d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000350:	50                   	push   %eax
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
40000351:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000358:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000035f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000366:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
4000036d:	e8 9a 0e 00 00       	call   4000120c <syscall>
    }

    return 0;
40000372:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000375:	c9                   	leave  
40000376:	c3                   	ret    

40000377 <register_irq_handler>:
40000377:	55                   	push   %ebp
40000378:	89 e5                	mov    %esp,%ebp
4000037a:	53                   	push   %ebx
4000037b:	83 ec 30             	sub    $0x30,%esp
4000037e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000381:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000384:	50                   	push   %eax
40000385:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
4000038c:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
4000038f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000396:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000039d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003ab:	e8 5c 0e 00 00       	call   4000120c <syscall>
400003b0:	83 c4 10             	add    $0x10,%esp
400003b3:	31 c0                	xor    %eax,%eax
400003b5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
400003b9:	74 0f                	je     400003ca <register_irq_handler+0x53>
400003bb:	8b 45 0c             	mov    0xc(%ebp),%eax
400003be:	89 04 9d 00 40 00 40 	mov    %eax,0x40004000(,%ebx,4)
400003c5:	b8 01 00 00 00       	mov    $0x1,%eax
400003ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400003cd:	c9                   	leave  
400003ce:	c3                   	ret    

400003cf <fetch_rpc_data>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
400003cf:	55                   	push   %ebp
400003d0:	89 e5                	mov    %esp,%ebp
400003d2:	83 ec 34             	sub    $0x34,%esp
400003d5:	8b 45 08             	mov    0x8(%ebp),%eax
400003d8:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
400003df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003e2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003e5:	50                   	push   %eax
400003e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000402:	e8 05 0e 00 00       	call   4000120c <syscall>
40000407:	83 c4 10             	add    $0x10,%esp
4000040a:	c9                   	leave  
4000040b:	c3                   	ret    

4000040c <call_rpc>:
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

4000040c:	55                   	push   %ebp
4000040d:	89 e5                	mov    %esp,%ebp
4000040f:	83 ec 34             	sub    $0x34,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000412:	8b 45 08             	mov    0x8(%ebp),%eax
40000415:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
4000041c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000041f:	8b 45 0c             	mov    0xc(%ebp),%eax
40000422:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000425:	8b 45 10             	mov    0x10(%ebp),%eax
40000428:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000042b:	8b 45 14             	mov    0x14(%ebp),%eax
4000042e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            rnd[i] = get_next();
        }
40000431:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000434:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000435:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
4000043c:	e8 cb 0d 00 00       	call   4000120c <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }
40000441:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000444:	c9                   	leave  
40000445:	c3                   	ret    

40000446 <set_rpc_handler>:
40000446:	55                   	push   %ebp
40000447:	89 e5                	mov    %esp,%ebp
40000449:	57                   	push   %edi
4000044a:	56                   	push   %esi
4000044b:	be 38 30 00 40       	mov    $0x40003038,%esi
40000450:	83 ec 24             	sub    $0x24,%esp
40000453:	8d 7d e0             	lea    -0x20(%ebp),%edi
40000456:	68 00 02 00 00       	push   $0x200
4000045b:	6a 00                	push   $0x0
4000045d:	68 00 40 00 40       	push   $0x40004000
40000462:	e8 c5 07 00 00       	call   40000c2c <memset>
40000467:	b9 06 00 00 00       	mov    $0x6,%ecx
4000046c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000046f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
40000471:	89 04 24             	mov    %eax,(%esp)
40000474:	e8 93 0d 00 00       	call   4000120c <syscall>
40000479:	83 c4 10             	add    $0x10,%esp
4000047c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000047f:	5e                   	pop    %esi
40000480:	5f                   	pop    %edi
40000481:	5d                   	pop    %ebp
40000482:	c3                   	ret    

40000483 <_start>:
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
40000483:	55                   	push   %ebp
40000484:	89 e5                	mov    %esp,%ebp
40000486:	56                   	push   %esi
40000487:	53                   	push   %ebx
40000488:	31 db                	xor    %ebx,%ebx
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
4000048a:	83 ec 2c             	sub    $0x2c,%esp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
4000048d:	8d 45 e0             	lea    -0x20(%ebp),%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000490:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
40000497:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

int main(int argc, char* args[])
4000049e:	50                   	push   %eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
4000049f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

int main(int argc, char* args[])
400004bb:	e8 4c 0d 00 00       	call   4000120c <syscall>
{
    HANDLE out = fmkfifo("/dev/urandom");
400004c0:	8b 75 e0             	mov    -0x20(%ebp),%esi
400004c3:	83 c4 10             	add    $0x10,%esp
400004c6:	85 f6                	test   %esi,%esi
400004c8:	75 05                	jne    400004cf <_start+0x4c>
400004ca:	89 f3                	mov    %esi,%ebx
400004cc:	eb 07                	jmp    400004d5 <_start+0x52>
400004ce:	43                   	inc    %ebx
400004cf:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
400004d3:	75 f9                	jne    400004ce <_start+0x4b>
400004d5:	e8 6c ff ff ff       	call   40000446 <set_rpc_handler>
400004da:	51                   	push   %ecx
400004db:	51                   	push   %ecx
400004dc:	56                   	push   %esi
400004dd:	53                   	push   %ebx
400004de:	e8 97 fb ff ff       	call   4000007a <main>
400004e3:	89 04 24             	mov    %eax,(%esp)
400004e6:	e8 cb fd ff ff       	call   400002b6 <exit>
400004eb:	83 c4 10             	add    $0x10,%esp
400004ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
400004f1:	5b                   	pop    %ebx
400004f2:	5e                   	pop    %esi
400004f3:	5d                   	pop    %ebp
400004f4:	c3                   	ret    

400004f5 <_handle_rpc>:
400004f5:	55                   	push   %ebp
400004f6:	89 e5                	mov    %esp,%ebp
400004f8:	56                   	push   %esi
400004f9:	53                   	push   %ebx
400004fa:	83 ec 2c             	sub    $0x2c,%esp
400004fd:	ff 75 10             	pushl  0x10(%ebp)
40000500:	8b 75 0c             	mov    0xc(%ebp),%esi
40000503:	e8 bd 0a 00 00       	call   40000fc5 <malloc>
40000508:	89 04 24             	mov    %eax,(%esp)
4000050b:	89 c3                	mov    %eax,%ebx
4000050d:	e8 bd fe ff ff       	call   400003cf <fetch_rpc_data>
40000512:	83 c4 10             	add    $0x10,%esp
40000515:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000519:	75 4b                	jne    40000566 <_handle_rpc+0x71>
4000051b:	8b 04 b5 00 40 00 40 	mov    0x40004000(,%esi,4),%eax
40000522:	85 c0                	test   %eax,%eax
40000524:	74 40                	je     40000566 <_handle_rpc+0x71>
40000526:	83 ec 0c             	sub    $0xc,%esp
40000529:	56                   	push   %esi
4000052a:	ff d0                	call   *%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
4000052c:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000052f:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
40000536:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000539:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000540:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000547:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000054e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
4000055c:	e8 ab 0c 00 00       	call   4000120c <syscall>
40000561:	83 c4 10             	add    $0x10,%esp
40000564:	eb fe                	jmp    40000564 <_handle_rpc+0x6f>
40000566:	83 ec 0c             	sub    $0xc,%esp
40000569:	68 1d 31 00 40       	push   $0x4000311d
4000056e:	e8 0d 04 00 00       	call   40000980 <printf>
40000573:	89 1c 24             	mov    %ebx,(%esp)
40000576:	e8 01 09 00 00       	call   40000e7c <free>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
4000057b:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000057e:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
40000585:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000588:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000058f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000596:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000059d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
400005ab:	e8 5c 0c 00 00       	call   4000120c <syscall>
400005b0:	83 c4 10             	add    $0x10,%esp
400005b3:	eb fe                	jmp    400005b3 <_handle_rpc+0xbe>
400005b5:	00 00                	add    %al,(%eax)
	...

400005b8 <resolveHandle>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
400005b8:	55                   	push   %ebp
400005b9:	89 e5                	mov    %esp,%ebp
400005bb:	83 ec 28             	sub    $0x28,%esp
}
400005be:	3d fe 0f 00 00       	cmp    $0xffe,%eax
400005c3:	77 38                	ja     400005fd <resolveHandle+0x45>
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
400005c5:	83 ec 0c             	sub    $0xc,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
400005c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            rnd[i] = get_next();
        }
400005cb:	8d 45 e0             	lea    -0x20(%ebp),%eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
400005ce:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
            rnd[i] = get_next();
        }
400005d5:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
400005d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
400005f2:	e8 15 0c 00 00       	call   4000120c <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400005f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
400005fa:	83 c4 10             	add    $0x10,%esp
    return 0;
}
400005fd:	c9                   	leave  
400005fe:	c3                   	ret    

400005ff <fmkfifo>:
400005ff:	55                   	push   %ebp
40000600:	89 e5                	mov    %esp,%ebp
40000602:	83 ec 34             	sub    $0x34,%esp
40000605:	8b 45 08             	mov    0x8(%ebp),%eax
40000608:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
4000060f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000612:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000615:	50                   	push   %eax
40000616:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000061d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000624:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000062b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000632:	e8 d5 0b 00 00       	call   4000120c <syscall>
40000637:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000063a:	c9                   	leave  
4000063b:	c3                   	ret    

4000063c <favailable>:
4000063c:	55                   	push   %ebp
4000063d:	89 e5                	mov    %esp,%ebp
4000063f:	83 ec 34             	sub    $0x34,%esp
40000642:	8b 45 08             	mov    0x8(%ebp),%eax
40000645:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
4000064c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000064f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000652:	50                   	push   %eax
40000653:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000065a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000661:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000668:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000066f:	e8 98 0b 00 00       	call   4000120c <syscall>
40000674:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000677:	c9                   	leave  
40000678:	c3                   	ret    

40000679 <fclose>:
40000679:	55                   	push   %ebp
4000067a:	89 e5                	mov    %esp,%ebp
4000067c:	83 ec 34             	sub    $0x34,%esp
4000067f:	8b 45 08             	mov    0x8(%ebp),%eax
40000682:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000689:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000068c:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000068f:	50                   	push   %eax
40000690:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000697:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000069e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006ac:	e8 5b 0b 00 00       	call   4000120c <syscall>
400006b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006b4:	c9                   	leave  
400006b5:	c3                   	ret    

400006b6 <fopen>:
400006b6:	55                   	push   %ebp
400006b7:	89 e5                	mov    %esp,%ebp
400006b9:	83 ec 34             	sub    $0x34,%esp
400006bc:	8b 45 08             	mov    0x8(%ebp),%eax
400006bf:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
400006c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006c9:	8b 45 0c             	mov    0xc(%ebp),%eax
400006cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
400006cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006d2:	50                   	push   %eax
400006d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006e8:	e8 1f 0b 00 00       	call   4000120c <syscall>
400006ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006f0:	c9                   	leave  
400006f1:	c3                   	ret    

400006f2 <fopenpmhandle>:
400006f2:	55                   	push   %ebp
400006f3:	89 e5                	mov    %esp,%ebp
400006f5:	83 ec 34             	sub    $0x34,%esp
400006f8:	8b 45 08             	mov    0x8(%ebp),%eax
400006fb:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
40000702:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000705:	8b 45 0c             	mov    0xc(%ebp),%eax
40000708:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000070b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000070e:	50                   	push   %eax
4000070f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000716:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000071d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000724:	e8 e3 0a 00 00       	call   4000120c <syscall>
40000729:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000072c:	c9                   	leave  
4000072d:	c3                   	ret    

4000072e <setstderr>:
4000072e:	55                   	push   %ebp
4000072f:	89 e5                	mov    %esp,%ebp
40000731:	83 ec 10             	sub    $0x10,%esp
40000734:	ff 75 08             	pushl  0x8(%ebp)
40000737:	6a 03                	push   $0x3
40000739:	e8 b4 ff ff ff       	call   400006f2 <fopenpmhandle>
4000073e:	c9                   	leave  
4000073f:	c3                   	ret    

40000740 <setstdin>:
40000740:	55                   	push   %ebp
40000741:	89 e5                	mov    %esp,%ebp
40000743:	83 ec 10             	sub    $0x10,%esp
40000746:	ff 75 08             	pushl  0x8(%ebp)
40000749:	6a 02                	push   $0x2
4000074b:	e8 a2 ff ff ff       	call   400006f2 <fopenpmhandle>
40000750:	c9                   	leave  
40000751:	c3                   	ret    

40000752 <setstdout>:
40000752:	55                   	push   %ebp
40000753:	89 e5                	mov    %esp,%ebp
40000755:	83 ec 10             	sub    $0x10,%esp
40000758:	ff 75 08             	pushl  0x8(%ebp)
4000075b:	6a 01                	push   $0x1
4000075d:	e8 90 ff ff ff       	call   400006f2 <fopenpmhandle>
40000762:	c9                   	leave  
40000763:	c3                   	ret    

40000764 <getLastVFSErr>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
40000764:	55                   	push   %ebp
40000765:	89 e5                	mov    %esp,%ebp
40000767:	83 ec 34             	sub    $0x34,%esp
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
4000076a:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000076d:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
40000774:	50                   	push   %eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000775:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000077c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000783:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000078a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000791:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
40000798:	e8 6f 0a 00 00       	call   4000120c <syscall>

int main(int argc, char* args[])
{
4000079d:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007a0:	c9                   	leave  
400007a1:	c3                   	ret    

400007a2 <fwrite>:
400007a2:	55                   	push   %ebp
400007a3:	89 e5                	mov    %esp,%ebp
400007a5:	57                   	push   %edi
400007a6:	56                   	push   %esi
400007a7:	53                   	push   %ebx
400007a8:	83 ec 3c             	sub    $0x3c,%esp
400007ab:	8b 45 08             	mov    0x8(%ebp),%eax
400007ae:	8b 7d 10             	mov    0x10(%ebp),%edi
400007b1:	e8 02 fe ff ff       	call   400005b8 <resolveHandle>
400007b6:	83 ec 0c             	sub    $0xc,%esp
400007b9:	89 c6                	mov    %eax,%esi
400007bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
400007be:	8b 45 0c             	mov    0xc(%ebp),%eax
400007c1:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400007c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
400007cb:	8d 45 d0             	lea    -0x30(%ebp),%eax
400007ce:	89 7d dc             	mov    %edi,-0x24(%ebp)
400007d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
400007d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400007df:	50                   	push   %eax
400007e0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
400007e3:	eb 2d                	jmp    40000812 <fwrite+0x70>
400007e5:	e8 12 fb ff ff       	call   400002fc <yield>
400007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
400007ed:	83 ec 0c             	sub    $0xc,%esp
400007f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
400007f3:	8d 45 d0             	lea    -0x30(%ebp),%eax
400007f6:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
400007fd:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000800:	89 7d dc             	mov    %edi,-0x24(%ebp)
40000803:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
4000080a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000811:	50                   	push   %eax
40000812:	e8 f5 09 00 00       	call   4000120c <syscall>
40000817:	8b 5d d0             	mov    -0x30(%ebp),%ebx
4000081a:	83 c4 10             	add    $0x10,%esp
4000081d:	83 fb 01             	cmp    $0x1,%ebx
40000820:	74 c3                	je     400007e5 <fwrite+0x43>
40000822:	89 f0                	mov    %esi,%eax
40000824:	89 da                	mov    %ebx,%edx
40000826:	e8 3d 02 00 00       	call   40000a68 <printrwerror>
4000082b:	8d 65 f4             	lea    -0xc(%ebp),%esp
4000082e:	89 d8                	mov    %ebx,%eax
40000830:	5b                   	pop    %ebx
40000831:	5e                   	pop    %esi
40000832:	5f                   	pop    %edi
40000833:	5d                   	pop    %ebp
40000834:	c3                   	ret    

40000835 <fputs>:
40000835:	55                   	push   %ebp
40000836:	89 e5                	mov    %esp,%ebp
40000838:	56                   	push   %esi
40000839:	53                   	push   %ebx
4000083a:	83 ec 20             	sub    $0x20,%esp
4000083d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000840:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000843:	e8 70 fd ff ff       	call   400005b8 <resolveHandle>
40000848:	89 c6                	mov    %eax,%esi
4000084a:	85 c0                	test   %eax,%eax
4000084c:	74 16                	je     40000864 <fputs+0x2f>
4000084e:	83 ec 0c             	sub    $0xc,%esp
40000851:	53                   	push   %ebx
40000852:	e8 a7 04 00 00       	call   40000cfe <strlen>
40000857:	83 c4 0c             	add    $0xc,%esp
4000085a:	50                   	push   %eax
4000085b:	53                   	push   %ebx
4000085c:	56                   	push   %esi
4000085d:	e8 40 ff ff ff       	call   400007a2 <fwrite>
40000862:	eb 35                	jmp    40000899 <fputs+0x64>
40000864:	83 ec 0c             	sub    $0xc,%esp
40000867:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000086a:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
40000871:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
40000874:	50                   	push   %eax
40000875:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000087c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000883:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000088a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000891:	e8 76 09 00 00       	call   4000120c <syscall>
40000896:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000899:	83 c4 10             	add    $0x10,%esp
4000089c:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000089f:	5b                   	pop    %ebx
400008a0:	5e                   	pop    %esi
400008a1:	5d                   	pop    %ebp
400008a2:	c3                   	ret    

400008a3 <puts>:
400008a3:	55                   	push   %ebp
400008a4:	89 e5                	mov    %esp,%ebp
400008a6:	83 ec 10             	sub    $0x10,%esp
400008a9:	6a 01                	push   $0x1
400008ab:	ff 75 08             	pushl  0x8(%ebp)
400008ae:	e8 82 ff ff ff       	call   40000835 <fputs>
400008b3:	c9                   	leave  
400008b4:	c3                   	ret    

400008b5 <putn>:
400008b5:	55                   	push   %ebp
400008b6:	89 e5                	mov    %esp,%ebp
400008b8:	56                   	push   %esi
400008b9:	53                   	push   %ebx
400008ba:	31 f6                	xor    %esi,%esi
400008bc:	83 ec 50             	sub    $0x50,%esp
400008bf:	89 d3                	mov    %edx,%ebx
400008c1:	83 fa 24             	cmp    $0x24,%edx
400008c4:	7f 25                	jg     400008eb <putn+0x36>
400008c6:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
400008ca:	8d 4d f7             	lea    -0x9(%ebp),%ecx
400008cd:	31 d2                	xor    %edx,%edx
400008cf:	49                   	dec    %ecx
400008d0:	f7 f3                	div    %ebx
400008d2:	46                   	inc    %esi
400008d3:	85 c0                	test   %eax,%eax
400008d5:	8a 92 2d 31 00 40    	mov    0x4000312d(%edx),%dl
400008db:	88 11                	mov    %dl,(%ecx)
400008dd:	75 ee                	jne    400008cd <putn+0x18>
400008df:	83 ec 0c             	sub    $0xc,%esp
400008e2:	51                   	push   %ecx
400008e3:	e8 bb ff ff ff       	call   400008a3 <puts>
400008e8:	83 c4 10             	add    $0x10,%esp
400008eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
400008ee:	89 f0                	mov    %esi,%eax
400008f0:	5b                   	pop    %ebx
400008f1:	5e                   	pop    %esi
400008f2:	5d                   	pop    %ebp
400008f3:	c3                   	ret    

400008f4 <fputc>:
400008f4:	55                   	push   %ebp
400008f5:	89 e5                	mov    %esp,%ebp
400008f7:	83 ec 38             	sub    $0x38,%esp
400008fa:	8b 45 08             	mov    0x8(%ebp),%eax
400008fd:	88 45 d4             	mov    %al,-0x2c(%ebp)
40000900:	8b 45 0c             	mov    0xc(%ebp),%eax
40000903:	e8 b0 fc ff ff       	call   400005b8 <resolveHandle>
40000908:	85 c0                	test   %eax,%eax
4000090a:	74 0f                	je     4000091b <fputc+0x27>
4000090c:	52                   	push   %edx
4000090d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
40000910:	6a 01                	push   $0x1
40000912:	52                   	push   %edx
40000913:	50                   	push   %eax
40000914:	e8 89 fe ff ff       	call   400007a2 <fwrite>
40000919:	eb 39                	jmp    40000954 <fputc+0x60>
4000091b:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
4000091f:	83 ec 0c             	sub    $0xc,%esp
40000922:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000925:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000928:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
4000092f:	50                   	push   %eax
40000930:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000937:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000093e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000945:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000094c:	e8 bb 08 00 00       	call   4000120c <syscall>
40000951:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000954:	83 c4 10             	add    $0x10,%esp
40000957:	c9                   	leave  
40000958:	c3                   	ret    

40000959 <putc>:
40000959:	55                   	push   %ebp
4000095a:	89 e5                	mov    %esp,%ebp
4000095c:	83 ec 08             	sub    $0x8,%esp
4000095f:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000963:	89 45 08             	mov    %eax,0x8(%ebp)
40000966:	c9                   	leave  
40000967:	e9 88 ff ff ff       	jmp    400008f4 <fputc>

4000096c <putchar>:
4000096c:	55                   	push   %ebp
4000096d:	89 e5                	mov    %esp,%ebp
4000096f:	83 ec 10             	sub    $0x10,%esp
40000972:	0f be 45 08          	movsbl 0x8(%ebp),%eax
40000976:	6a 01                	push   $0x1
40000978:	50                   	push   %eax
40000979:	e8 76 ff ff ff       	call   400008f4 <fputc>
4000097e:	c9                   	leave  
4000097f:	c3                   	ret    

40000980 <printf>:
40000980:	55                   	push   %ebp
40000981:	89 e5                	mov    %esp,%ebp
40000983:	57                   	push   %edi
40000984:	56                   	push   %esi
40000985:	53                   	push   %ebx
40000986:	83 ec 1c             	sub    $0x1c,%esp
40000989:	8d 75 0c             	lea    0xc(%ebp),%esi
4000098c:	8b 7d 08             	mov    0x8(%ebp),%edi
4000098f:	31 db                	xor    %ebx,%ebx
40000991:	e9 be 00 00 00       	jmp    40000a54 <printf+0xd4>
40000996:	3c 25                	cmp    $0x25,%al
40000998:	0f 85 a4 00 00 00    	jne    40000a42 <printf+0xc2>
4000099e:	47                   	inc    %edi
4000099f:	8a 07                	mov    (%edi),%al
400009a1:	3c 70                	cmp    $0x70,%al
400009a3:	74 47                	je     400009ec <printf+0x6c>
400009a5:	7f 1a                	jg     400009c1 <printf+0x41>
400009a7:	3c 63                	cmp    $0x63,%al
400009a9:	74 5a                	je     40000a05 <printf+0x85>
400009ab:	7f 0e                	jg     400009bb <printf+0x3b>
400009ad:	84 c0                	test   %al,%al
400009af:	0f 84 a9 00 00 00    	je     40000a5e <printf+0xde>
400009b5:	3c 25                	cmp    $0x25,%al
400009b7:	75 6c                	jne    40000a25 <printf+0xa5>
400009b9:	eb 63                	jmp    40000a1e <printf+0x9e>
400009bb:	3c 64                	cmp    $0x64,%al
400009bd:	75 66                	jne    40000a25 <printf+0xa5>
400009bf:	eb 1e                	jmp    400009df <printf+0x5f>
400009c1:	3c 75                	cmp    $0x75,%al
400009c3:	74 1a                	je     400009df <printf+0x5f>
400009c5:	3c 78                	cmp    $0x78,%al
400009c7:	74 23                	je     400009ec <printf+0x6c>
400009c9:	3c 73                	cmp    $0x73,%al
400009cb:	75 58                	jne    40000a25 <printf+0xa5>
400009cd:	83 ec 0c             	sub    $0xc,%esp
400009d0:	8d 46 04             	lea    0x4(%esi),%eax
400009d3:	ff 36                	pushl  (%esi)
400009d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009d8:	e8 c6 fe ff ff       	call   400008a3 <puts>
400009dd:	eb 38                	jmp    40000a17 <printf+0x97>
400009df:	8d 46 04             	lea    0x4(%esi),%eax
400009e2:	ba 0a 00 00 00       	mov    $0xa,%edx
400009e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009ea:	eb 0b                	jmp    400009f7 <printf+0x77>
400009ec:	8d 46 04             	lea    0x4(%esi),%eax
400009ef:	ba 10 00 00 00       	mov    $0x10,%edx
400009f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400009f7:	8b 06                	mov    (%esi),%eax
400009f9:	e8 b7 fe ff ff       	call   400008b5 <putn>
400009fe:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a01:	01 c3                	add    %eax,%ebx
40000a03:	eb 4e                	jmp    40000a53 <printf+0xd3>
40000a05:	8d 46 04             	lea    0x4(%esi),%eax
40000a08:	83 ec 0c             	sub    $0xc,%esp
40000a0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a0e:	0f be 06             	movsbl (%esi),%eax
40000a11:	50                   	push   %eax
40000a12:	e8 55 ff ff ff       	call   4000096c <putchar>
40000a17:	01 c3                	add    %eax,%ebx
40000a19:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a1c:	eb 32                	jmp    40000a50 <printf+0xd0>
40000a1e:	83 ec 0c             	sub    $0xc,%esp
40000a21:	6a 25                	push   $0x25
40000a23:	eb 24                	jmp    40000a49 <printf+0xc9>
40000a25:	83 ec 0c             	sub    $0xc,%esp
40000a28:	6a 25                	push   $0x25
40000a2a:	e8 3d ff ff ff       	call   4000096c <putchar>
40000a2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a32:	0f be 07             	movsbl (%edi),%eax
40000a35:	89 04 24             	mov    %eax,(%esp)
40000a38:	e8 2f ff ff ff       	call   4000096c <putchar>
40000a3d:	03 45 e4             	add    -0x1c(%ebp),%eax
40000a40:	eb 0c                	jmp    40000a4e <printf+0xce>
40000a42:	83 ec 0c             	sub    $0xc,%esp
40000a45:	0f be c0             	movsbl %al,%eax
40000a48:	50                   	push   %eax
40000a49:	e8 1e ff ff ff       	call   4000096c <putchar>
40000a4e:	01 c3                	add    %eax,%ebx
40000a50:	83 c4 10             	add    $0x10,%esp
40000a53:	47                   	inc    %edi
40000a54:	8a 07                	mov    (%edi),%al
40000a56:	84 c0                	test   %al,%al
40000a58:	0f 85 38 ff ff ff    	jne    40000996 <printf+0x16>
40000a5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000a61:	89 d8                	mov    %ebx,%eax
40000a63:	5b                   	pop    %ebx
40000a64:	5e                   	pop    %esi
40000a65:	5f                   	pop    %edi
40000a66:	5d                   	pop    %ebp
40000a67:	c3                   	ret    

40000a68 <printrwerror>:
40000a68:	55                   	push   %ebp
40000a69:	89 e5                	mov    %esp,%ebp
40000a6b:	83 ec 08             	sub    $0x8,%esp
40000a6e:	83 fa 02             	cmp    $0x2,%edx
40000a71:	75 0a                	jne    40000a7d <printrwerror+0x15>
40000a73:	52                   	push   %edx
40000a74:	52                   	push   %edx
40000a75:	50                   	push   %eax
40000a76:	68 52 31 00 40       	push   $0x40003152
40000a7b:	eb 2b                	jmp    40000aa8 <printrwerror+0x40>
40000a7d:	83 fa 03             	cmp    $0x3,%edx
40000a80:	75 0a                	jne    40000a8c <printrwerror+0x24>
40000a82:	51                   	push   %ecx
40000a83:	51                   	push   %ecx
40000a84:	50                   	push   %eax
40000a85:	68 6a 31 00 40       	push   $0x4000316a
40000a8a:	eb 1c                	jmp    40000aa8 <printrwerror+0x40>
40000a8c:	83 fa 04             	cmp    $0x4,%edx
40000a8f:	75 0a                	jne    40000a9b <printrwerror+0x33>
40000a91:	52                   	push   %edx
40000a92:	52                   	push   %edx
40000a93:	50                   	push   %eax
40000a94:	68 85 31 00 40       	push   $0x40003185
40000a99:	eb 0d                	jmp    40000aa8 <printrwerror+0x40>
40000a9b:	83 fa 05             	cmp    $0x5,%edx
40000a9e:	75 10                	jne    40000ab0 <printrwerror+0x48>
40000aa0:	51                   	push   %ecx
40000aa1:	51                   	push   %ecx
40000aa2:	50                   	push   %eax
40000aa3:	68 af 31 00 40       	push   $0x400031af
40000aa8:	e8 d3 fe ff ff       	call   40000980 <printf>
40000aad:	83 c4 10             	add    $0x10,%esp
40000ab0:	c9                   	leave  
40000ab1:	c3                   	ret    

40000ab2 <fread>:
40000ab2:	55                   	push   %ebp
40000ab3:	89 e5                	mov    %esp,%ebp
40000ab5:	57                   	push   %edi
40000ab6:	56                   	push   %esi
40000ab7:	53                   	push   %ebx
40000ab8:	83 ec 38             	sub    $0x38,%esp
40000abb:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000abe:	8b 45 0c             	mov    0xc(%ebp),%eax
40000ac1:	8b 75 08             	mov    0x8(%ebp),%esi
40000ac4:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000ac7:	8b 45 10             	mov    0x10(%ebp),%eax
40000aca:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000ad1:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000ad4:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000ad7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000ade:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000ae5:	eb 2c                	jmp    40000b13 <fread+0x61>
40000ae7:	e8 10 f8 ff ff       	call   400002fc <yield>
40000aec:	8b 45 0c             	mov    0xc(%ebp),%eax
40000aef:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000af2:	8b 45 10             	mov    0x10(%ebp),%eax
40000af5:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000afc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000aff:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b09:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b10:	83 ec 0c             	sub    $0xc,%esp
40000b13:	57                   	push   %edi
40000b14:	e8 f3 06 00 00       	call   4000120c <syscall>
40000b19:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000b1c:	83 c4 10             	add    $0x10,%esp
40000b1f:	83 fb 01             	cmp    $0x1,%ebx
40000b22:	74 c3                	je     40000ae7 <fread+0x35>
40000b24:	89 f0                	mov    %esi,%eax
40000b26:	89 da                	mov    %ebx,%edx
40000b28:	e8 3b ff ff ff       	call   40000a68 <printrwerror>
40000b2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b30:	89 d8                	mov    %ebx,%eax
40000b32:	5b                   	pop    %ebx
40000b33:	5e                   	pop    %esi
40000b34:	5f                   	pop    %edi
40000b35:	5d                   	pop    %ebp
40000b36:	c3                   	ret    

40000b37 <fgetc>:
40000b37:	55                   	push   %ebp
40000b38:	89 e5                	mov    %esp,%ebp
40000b3a:	83 ec 18             	sub    $0x18,%esp
40000b3d:	8b 45 08             	mov    0x8(%ebp),%eax
40000b40:	e8 73 fa ff ff       	call   400005b8 <resolveHandle>
40000b45:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000b49:	85 c0                	test   %eax,%eax
40000b4b:	74 10                	je     40000b5d <fgetc+0x26>
40000b4d:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000b50:	51                   	push   %ecx
40000b51:	6a 01                	push   $0x1
40000b53:	52                   	push   %edx
40000b54:	50                   	push   %eax
40000b55:	e8 58 ff ff ff       	call   40000ab2 <fread>
40000b5a:	83 c4 10             	add    $0x10,%esp
40000b5d:	8a 45 f7             	mov    -0x9(%ebp),%al
40000b60:	c9                   	leave  
40000b61:	c3                   	ret    

40000b62 <getchar>:
40000b62:	55                   	push   %ebp
40000b63:	89 e5                	mov    %esp,%ebp
40000b65:	83 ec 14             	sub    $0x14,%esp
40000b68:	6a 02                	push   $0x2
40000b6a:	e8 c8 ff ff ff       	call   40000b37 <fgetc>
40000b6f:	c9                   	leave  
40000b70:	c3                   	ret    

40000b71 <getc>:
40000b71:	55                   	push   %ebp
40000b72:	89 e5                	mov    %esp,%ebp
40000b74:	83 ec 08             	sub    $0x8,%esp
40000b77:	c9                   	leave  
40000b78:	e9 ba ff ff ff       	jmp    40000b37 <fgetc>

40000b7d <fgets>:
40000b7d:	55                   	push   %ebp
40000b7e:	89 e5                	mov    %esp,%ebp
40000b80:	57                   	push   %edi
40000b81:	56                   	push   %esi
40000b82:	53                   	push   %ebx
40000b83:	83 ec 1c             	sub    $0x1c,%esp
40000b86:	31 db                	xor    %ebx,%ebx
40000b88:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000b8b:	8b 75 08             	mov    0x8(%ebp),%esi
40000b8e:	8d 47 ff             	lea    -0x1(%edi),%eax
40000b91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b94:	eb 16                	jmp    40000bac <fgets+0x2f>
40000b96:	83 ec 0c             	sub    $0xc,%esp
40000b99:	ff 75 10             	pushl  0x10(%ebp)
40000b9c:	e8 96 ff ff ff       	call   40000b37 <fgetc>
40000ba1:	83 c4 10             	add    $0x10,%esp
40000ba4:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000ba7:	84 c0                	test   %al,%al
40000ba9:	74 0a                	je     40000bb5 <fgets+0x38>
40000bab:	43                   	inc    %ebx
40000bac:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000baf:	7c e5                	jl     40000b96 <fgets+0x19>
40000bb1:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000bb5:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bb8:	89 f0                	mov    %esi,%eax
40000bba:	5b                   	pop    %ebx
40000bbb:	5e                   	pop    %esi
40000bbc:	5f                   	pop    %edi
40000bbd:	5d                   	pop    %ebp
40000bbe:	c3                   	ret    

40000bbf <getln>:
40000bbf:	55                   	push   %ebp
40000bc0:	89 e5                	mov    %esp,%ebp
40000bc2:	56                   	push   %esi
40000bc3:	53                   	push   %ebx
40000bc4:	31 db                	xor    %ebx,%ebx
40000bc6:	8b 75 08             	mov    0x8(%ebp),%esi
40000bc9:	eb 42                	jmp    40000c0d <getln+0x4e>
40000bcb:	3c 0a                	cmp    $0xa,%al
40000bcd:	75 0f                	jne    40000bde <getln+0x1f>
40000bcf:	83 ec 0c             	sub    $0xc,%esp
40000bd2:	6a 0a                	push   $0xa
40000bd4:	e8 93 fd ff ff       	call   4000096c <putchar>
40000bd9:	83 c4 10             	add    $0x10,%esp
40000bdc:	eb 40                	jmp    40000c1e <getln+0x5f>
40000bde:	3c 08                	cmp    $0x8,%al
40000be0:	75 18                	jne    40000bfa <getln+0x3b>
40000be2:	85 db                	test   %ebx,%ebx
40000be4:	74 0e                	je     40000bf4 <getln+0x35>
40000be6:	83 ec 0c             	sub    $0xc,%esp
40000be9:	4b                   	dec    %ebx
40000bea:	6a 08                	push   $0x8
40000bec:	e8 7b fd ff ff       	call   4000096c <putchar>
40000bf1:	83 c4 10             	add    $0x10,%esp
40000bf4:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000bf8:	eb 13                	jmp    40000c0d <getln+0x4e>
40000bfa:	83 ec 0c             	sub    $0xc,%esp
40000bfd:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000c00:	0f be c0             	movsbl %al,%eax
40000c03:	50                   	push   %eax
40000c04:	43                   	inc    %ebx
40000c05:	e8 62 fd ff ff       	call   4000096c <putchar>
40000c0a:	83 c4 10             	add    $0x10,%esp
40000c0d:	83 ec 0c             	sub    $0xc,%esp
40000c10:	6a 02                	push   $0x2
40000c12:	e8 20 ff ff ff       	call   40000b37 <fgetc>
40000c17:	83 c4 10             	add    $0x10,%esp
40000c1a:	84 c0                	test   %al,%al
40000c1c:	75 ad                	jne    40000bcb <getln+0xc>
40000c1e:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c22:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000c25:	89 f0                	mov    %esi,%eax
40000c27:	5b                   	pop    %ebx
40000c28:	5e                   	pop    %esi
40000c29:	5d                   	pop    %ebp
40000c2a:	c3                   	ret    
	...

40000c2c <memset>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
40000c2c:	55                   	push   %ebp
40000c2d:	89 e5                	mov    %esp,%ebp
40000c2f:	53                   	push   %ebx
40000c30:	8b 45 08             	mov    0x8(%ebp),%eax
40000c33:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c36:	8b 4d 10             	mov    0x10(%ebp),%ecx
#include "vmmcall.h"
40000c39:	89 c2                	mov    %eax,%edx
#include "process.h"
 
40000c3b:	eb 04                	jmp    40000c41 <memset+0x15>
uint32_t m_z = 1, m_w = 2;
40000c3d:	88 1a                	mov    %bl,(%edx)
40000c3f:	49                   	dec    %ecx
40000c40:	42                   	inc    %edx
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
40000c41:	85 c9                	test   %ecx,%ecx
40000c43:	75 f8                	jne    40000c3d <memset+0x11>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000c45:	5b                   	pop    %ebx
40000c46:	5d                   	pop    %ebp
40000c47:	c3                   	ret    

40000c48 <memcpy>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000c48:	55                   	push   %ebp
}

int main(int argc, char* args[])
{
40000c49:	31 c9                	xor    %ecx,%ecx

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000c4b:	89 e5                	mov    %esp,%ebp
40000c4d:	56                   	push   %esi
40000c4e:	53                   	push   %ebx
40000c4f:	8b 75 10             	mov    0x10(%ebp),%esi
40000c52:	8b 45 08             	mov    0x8(%ebp),%eax
40000c55:	8b 5d 0c             	mov    0xc(%ebp),%ebx
}

int main(int argc, char* args[])
{
40000c58:	85 f6                	test   %esi,%esi
40000c5a:	75 04                	jne    40000c60 <memcpy+0x18>
40000c5c:	31 c0                	xor    %eax,%eax
40000c5e:	eb 0a                	jmp    40000c6a <memcpy+0x22>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000c60:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000c63:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000c66:	41                   	inc    %ecx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000c67:	4e                   	dec    %esi
40000c68:	75 f6                	jne    40000c60 <memcpy+0x18>
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40000c6a:	5b                   	pop    %ebx
40000c6b:	5e                   	pop    %esi
40000c6c:	5d                   	pop    %ebp
40000c6d:	c3                   	ret    

40000c6e <memcmp>:

    while(1) {
40000c6e:	55                   	push   %ebp
        for(int i = 0; i < 128; i++) {
40000c6f:	83 c8 ff             	or     $0xffffffff,%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
40000c72:	89 e5                	mov    %esp,%ebp
40000c74:	57                   	push   %edi
40000c75:	56                   	push   %esi
40000c76:	53                   	push   %ebx
40000c77:	8b 75 08             	mov    0x8(%ebp),%esi
40000c7a:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000c7d:	8b 5d 10             	mov    0x10(%ebp),%ebx
        for(int i = 0; i < 128; i++) {
40000c80:	85 f6                	test   %esi,%esi
40000c82:	74 2c                	je     40000cb0 <memcmp+0x42>
            rnd[i] = get_next();
        }
40000c84:	b8 01 00 00 00       	mov    $0x1,%eax
40000c89:	85 ff                	test   %edi,%edi
40000c8b:	74 23                	je     40000cb0 <memcmp+0x42>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000c8d:	31 d2                	xor    %edx,%edx
40000c8f:	85 db                	test   %ebx,%ebx
40000c91:	75 17                	jne    40000caa <memcmp+0x3c>
40000c93:	eb 19                	jmp    40000cae <memcmp+0x40>

    return 0;
}
40000c95:	8a 04 16             	mov    (%esi,%edx,1),%al
40000c98:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000c9b:	38 c8                	cmp    %cl,%al
40000c9d:	74 0a                	je     40000ca9 <memcmp+0x3b>
40000c9f:	0f b6 c0             	movzbl %al,%eax
40000ca2:	0f b6 c9             	movzbl %cl,%ecx
40000ca5:	29 c8                	sub    %ecx,%eax
40000ca7:	eb 07                	jmp    40000cb0 <memcmp+0x42>
    }

    return 0;
}
40000ca9:	42                   	inc    %edx
40000caa:	39 da                	cmp    %ebx,%edx
40000cac:	72 e7                	jb     40000c95 <memcmp+0x27>
40000cae:	31 c0                	xor    %eax,%eax
40000cb0:	5b                   	pop    %ebx
40000cb1:	5e                   	pop    %esi
40000cb2:	5f                   	pop    %edi
40000cb3:	5d                   	pop    %ebp
40000cb4:	c3                   	ret    

40000cb5 <strcmp>:
40000cb5:	55                   	push   %ebp
40000cb6:	31 c0                	xor    %eax,%eax
40000cb8:	89 e5                	mov    %esp,%ebp
40000cba:	56                   	push   %esi
40000cbb:	53                   	push   %ebx
40000cbc:	31 db                	xor    %ebx,%ebx
40000cbe:	8b 55 08             	mov    0x8(%ebp),%edx
40000cc1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000cc4:	85 d2                	test   %edx,%edx
40000cc6:	75 03                	jne    40000ccb <strcmp+0x16>
40000cc8:	eb 09                	jmp    40000cd3 <strcmp+0x1e>
40000cca:	40                   	inc    %eax
40000ccb:	89 c3                	mov    %eax,%ebx
40000ccd:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000cd1:	75 f7                	jne    40000cca <strcmp+0x15>
40000cd3:	31 c0                	xor    %eax,%eax
40000cd5:	31 f6                	xor    %esi,%esi
40000cd7:	85 c9                	test   %ecx,%ecx
40000cd9:	75 03                	jne    40000cde <strcmp+0x29>
40000cdb:	eb 09                	jmp    40000ce6 <strcmp+0x31>
40000cdd:	40                   	inc    %eax
40000cde:	89 c6                	mov    %eax,%esi
40000ce0:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000ce4:	75 f7                	jne    40000cdd <strcmp+0x28>
40000ce6:	89 f0                	mov    %esi,%eax
40000ce8:	39 de                	cmp    %ebx,%esi
40000cea:	7e 02                	jle    40000cee <strcmp+0x39>
40000cec:	89 d8                	mov    %ebx,%eax
40000cee:	40                   	inc    %eax
40000cef:	50                   	push   %eax
40000cf0:	51                   	push   %ecx
40000cf1:	52                   	push   %edx
40000cf2:	e8 77 ff ff ff       	call   40000c6e <memcmp>
40000cf7:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000cfa:	5b                   	pop    %ebx
40000cfb:	5e                   	pop    %esi
40000cfc:	5d                   	pop    %ebp
40000cfd:	c3                   	ret    

40000cfe <strlen>:
40000cfe:	55                   	push   %ebp
40000cff:	31 d2                	xor    %edx,%edx
40000d01:	89 e5                	mov    %esp,%ebp
40000d03:	31 c0                	xor    %eax,%eax
40000d05:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d08:	85 c9                	test   %ecx,%ecx
40000d0a:	75 03                	jne    40000d0f <strlen+0x11>
40000d0c:	eb 09                	jmp    40000d17 <strlen+0x19>
40000d0e:	42                   	inc    %edx
40000d0f:	89 d0                	mov    %edx,%eax
40000d11:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000d15:	75 f7                	jne    40000d0e <strlen+0x10>
40000d17:	5d                   	pop    %ebp
40000d18:	c3                   	ret    

40000d19 <strcpy>:
40000d19:	55                   	push   %ebp
40000d1a:	31 d2                	xor    %edx,%edx
40000d1c:	89 e5                	mov    %esp,%ebp
40000d1e:	56                   	push   %esi
40000d1f:	53                   	push   %ebx
40000d20:	31 c9                	xor    %ecx,%ecx
40000d22:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d25:	8b 45 08             	mov    0x8(%ebp),%eax
40000d28:	85 db                	test   %ebx,%ebx
40000d2a:	75 03                	jne    40000d2f <strcpy+0x16>
40000d2c:	eb 09                	jmp    40000d37 <strcpy+0x1e>
40000d2e:	42                   	inc    %edx
40000d2f:	89 d1                	mov    %edx,%ecx
40000d31:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000d35:	75 f7                	jne    40000d2e <strcpy+0x15>
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
40000d37:	89 ce                	mov    %ecx,%esi
40000d39:	46                   	inc    %esi
40000d3a:	74 0c                	je     40000d48 <strcpy+0x2f>
40000d3c:	31 d2                	xor    %edx,%edx
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000d3e:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000d41:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000d44:	42                   	inc    %edx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000d45:	4e                   	dec    %esi
40000d46:	75 f6                	jne    40000d3e <strcpy+0x25>
40000d48:	5b                   	pop    %ebx
40000d49:	5e                   	pop    %esi
40000d4a:	5d                   	pop    %ebp
40000d4b:	c3                   	ret    

40000d4c <strtoknc>:
40000d4c:	55                   	push   %ebp
40000d4d:	31 c0                	xor    %eax,%eax
40000d4f:	89 e5                	mov    %esp,%ebp
40000d51:	57                   	push   %edi
40000d52:	56                   	push   %esi
40000d53:	53                   	push   %ebx
40000d54:	83 ec 04             	sub    $0x4,%esp
40000d57:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d5d:	85 db                	test   %ebx,%ebx
40000d5f:	75 06                	jne    40000d67 <strtoknc+0x1b>
40000d61:	e9 83 00 00 00       	jmp    40000de9 <strtoknc+0x9d>
40000d66:	40                   	inc    %eax
40000d67:	89 c7                	mov    %eax,%edi
40000d69:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000d6d:	75 f7                	jne    40000d66 <strtoknc+0x1a>
40000d6f:	85 c0                	test   %eax,%eax
40000d71:	74 76                	je     40000de9 <strtoknc+0x9d>
40000d73:	85 c9                	test   %ecx,%ecx
40000d75:	75 0b                	jne    40000d82 <strtoknc+0x36>
40000d77:	83 3d 00 42 00 40 00 	cmpl   $0x0,0x40004200
40000d7e:	75 08                	jne    40000d88 <strtoknc+0x3c>
40000d80:	eb 67                	jmp    40000de9 <strtoknc+0x9d>
40000d82:	89 0d 00 42 00 40    	mov    %ecx,0x40004200
40000d88:	a1 00 42 00 40       	mov    0x40004200,%eax
40000d8d:	31 c9                	xor    %ecx,%ecx
40000d8f:	eb 0b                	jmp    40000d9c <strtoknc+0x50>
40000d91:	8a 10                	mov    (%eax),%dl
40000d93:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000d96:	75 03                	jne    40000d9b <strtoknc+0x4f>
40000d98:	40                   	inc    %eax
40000d99:	eb 05                	jmp    40000da0 <strtoknc+0x54>
40000d9b:	41                   	inc    %ecx
40000d9c:	39 f9                	cmp    %edi,%ecx
40000d9e:	7c f1                	jl     40000d91 <strtoknc+0x45>
40000da0:	39 f9                	cmp    %edi,%ecx
40000da2:	75 e9                	jne    40000d8d <strtoknc+0x41>
40000da4:	a3 00 42 00 40       	mov    %eax,0x40004200
40000da9:	80 38 00             	cmpb   $0x0,(%eax)
40000dac:	75 28                	jne    40000dd6 <strtoknc+0x8a>
40000dae:	c7 05 00 42 00 40 00 	movl   $0x0,0x40004200
40000db5:	00 00 00 
40000db8:	eb 2f                	jmp    40000de9 <strtoknc+0x9d>
40000dba:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000dbd:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000dc0:	75 05                	jne    40000dc7 <strtoknc+0x7b>
40000dc2:	c6 06 00             	movb   $0x0,(%esi)
40000dc5:	eb 05                	jmp    40000dcc <strtoknc+0x80>
40000dc7:	41                   	inc    %ecx
40000dc8:	39 f9                	cmp    %edi,%ecx
40000dca:	7c ee                	jl     40000dba <strtoknc+0x6e>
40000dcc:	ff 05 00 42 00 40    	incl   0x40004200
40000dd2:	39 f9                	cmp    %edi,%ecx
40000dd4:	7c 15                	jl     40000deb <strtoknc+0x9f>
40000dd6:	8b 35 00 42 00 40    	mov    0x40004200,%esi
40000ddc:	8a 16                	mov    (%esi),%dl
40000dde:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000de1:	84 d2                	test   %dl,%dl
40000de3:	74 06                	je     40000deb <strtoknc+0x9f>
40000de5:	31 c9                	xor    %ecx,%ecx
40000de7:	eb df                	jmp    40000dc8 <strtoknc+0x7c>
40000de9:	31 c0                	xor    %eax,%eax
40000deb:	5a                   	pop    %edx
40000dec:	5b                   	pop    %ebx
40000ded:	5e                   	pop    %esi
40000dee:	5f                   	pop    %edi
40000def:	5d                   	pop    %ebp
40000df0:	c3                   	ret    

40000df1 <strclone>:
40000df1:	55                   	push   %ebp
40000df2:	31 c0                	xor    %eax,%eax
40000df4:	89 e5                	mov    %esp,%ebp
40000df6:	56                   	push   %esi
40000df7:	53                   	push   %ebx
40000df8:	31 d2                	xor    %edx,%edx
40000dfa:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000dfd:	85 db                	test   %ebx,%ebx
40000dff:	75 03                	jne    40000e04 <strclone+0x13>
40000e01:	eb 09                	jmp    40000e0c <strclone+0x1b>
40000e03:	40                   	inc    %eax
40000e04:	89 c2                	mov    %eax,%edx
40000e06:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e0a:	75 f7                	jne    40000e03 <strclone+0x12>
40000e0c:	83 ec 0c             	sub    $0xc,%esp
40000e0f:	42                   	inc    %edx
40000e10:	52                   	push   %edx
40000e11:	e8 af 01 00 00       	call   40000fc5 <malloc>
40000e16:	59                   	pop    %ecx
40000e17:	89 c6                	mov    %eax,%esi
40000e19:	58                   	pop    %eax
40000e1a:	53                   	push   %ebx
40000e1b:	56                   	push   %esi
40000e1c:	e8 f8 fe ff ff       	call   40000d19 <strcpy>
40000e21:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e24:	89 f0                	mov    %esi,%eax
40000e26:	5b                   	pop    %ebx
40000e27:	5e                   	pop    %esi
40000e28:	5d                   	pop    %ebp
40000e29:	c3                   	ret    

40000e2a <strtok>:
40000e2a:	55                   	push   %ebp
40000e2b:	89 e5                	mov    %esp,%ebp
40000e2d:	56                   	push   %esi
40000e2e:	53                   	push   %ebx
40000e2f:	8b 75 08             	mov    0x8(%ebp),%esi
40000e32:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e35:	85 f6                	test   %esi,%esi
40000e37:	74 2e                	je     40000e67 <strtok+0x3d>
40000e39:	a1 04 42 00 40       	mov    0x40004204,%eax
40000e3e:	85 c0                	test   %eax,%eax
40000e40:	74 0c                	je     40000e4e <strtok+0x24>
40000e42:	83 ec 0c             	sub    $0xc,%esp
40000e45:	50                   	push   %eax
40000e46:	e8 31 00 00 00       	call   40000e7c <free>
40000e4b:	83 c4 10             	add    $0x10,%esp
40000e4e:	83 ec 0c             	sub    $0xc,%esp
40000e51:	56                   	push   %esi
40000e52:	e8 9a ff ff ff       	call   40000df1 <strclone>
40000e57:	83 c4 10             	add    $0x10,%esp
40000e5a:	a3 04 42 00 40       	mov    %eax,0x40004204
40000e5f:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000e62:	89 45 08             	mov    %eax,0x8(%ebp)
40000e65:	eb 0a                	jmp    40000e71 <strtok+0x47>
40000e67:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000e6a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000e71:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e74:	5b                   	pop    %ebx
40000e75:	5e                   	pop    %esi
40000e76:	5d                   	pop    %ebp
40000e77:	e9 d0 fe ff ff       	jmp    40000d4c <strtoknc>

40000e7c <free>:
40000e7c:	55                   	push   %ebp
40000e7d:	89 e5                	mov    %esp,%ebp
40000e7f:	57                   	push   %edi
40000e80:	56                   	push   %esi
40000e81:	53                   	push   %ebx
40000e82:	83 ec 08             	sub    $0x8,%esp
40000e85:	8b 15 0c 42 00 40    	mov    0x4000420c,%edx
40000e8b:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000e8e:	89 d0                	mov    %edx,%eax
40000e90:	e9 b8 00 00 00       	jmp    40000f4d <free+0xd1>
40000e95:	3b 48 04             	cmp    0x4(%eax),%ecx
40000e98:	0f 85 ac 00 00 00    	jne    40000f4a <free+0xce>
40000e9e:	31 c9                	xor    %ecx,%ecx
40000ea0:	eb 23                	jmp    40000ec5 <free+0x49>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000ea2:	39 c2                	cmp    %eax,%edx
40000ea4:	75 1a                	jne    40000ec0 <free+0x44>
    return (m_z << 16) + m_w;
40000ea6:	85 c9                	test   %ecx,%ecx
40000ea8:	8b 50 08             	mov    0x8(%eax),%edx
40000eab:	75 0e                	jne    40000ebb <free+0x3f>
}
40000ead:	89 15 0c 42 00 40    	mov    %edx,0x4000420c
40000eb3:	8b 0d 10 42 00 40    	mov    0x40004210,%ecx
40000eb9:	eb 10                	jmp    40000ecb <free+0x4f>

int main(int argc, char* args[])
{
40000ebb:	89 51 08             	mov    %edx,0x8(%ecx)
40000ebe:	eb f3                	jmp    40000eb3 <free+0x37>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000ec0:	89 d1                	mov    %edx,%ecx
40000ec2:	8b 52 08             	mov    0x8(%edx),%edx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000ec5:	85 d2                	test   %edx,%edx
40000ec7:	75 d9                	jne    40000ea2 <free+0x26>
40000ec9:	eb e8                	jmp    40000eb3 <free+0x37>
40000ecb:	89 ca                	mov    %ecx,%edx
40000ecd:	eb 6d                	jmp    40000f3c <free+0xc0>
40000ecf:	8b 5a 04             	mov    0x4(%edx),%ebx
40000ed2:	8b 32                	mov    (%edx),%esi
40000ed4:	8b 78 04             	mov    0x4(%eax),%edi
40000ed7:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000eda:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000edd:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000ee0:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000ee3:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000ee6:	75 18                	jne    40000f00 <free+0x84>
40000ee8:	89 58 04             	mov    %ebx,0x4(%eax)
40000eeb:	31 f6                	xor    %esi,%esi
40000eed:	89 cb                	mov    %ecx,%ebx
40000eef:	eb 09                	jmp    40000efa <free+0x7e>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000ef1:	39 d3                	cmp    %edx,%ebx
40000ef3:	74 29                	je     40000f1e <free+0xa2>
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000ef5:	89 de                	mov    %ebx,%esi
40000ef7:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000efa:	85 db                	test   %ebx,%ebx
40000efc:	75 f3                	jne    40000ef1 <free+0x75>
40000efe:	eb cb                	jmp    40000ecb <free+0x4f>
40000f00:	8b 38                	mov    (%eax),%edi
40000f02:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f05:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f08:	03 7d f0             	add    -0x10(%ebp),%edi
40000f0b:	39 fb                	cmp    %edi,%ebx
40000f0d:	75 2a                	jne    40000f39 <free+0xbd>
40000f0f:	03 75 f0             	add    -0x10(%ebp),%esi
40000f12:	89 cb                	mov    %ecx,%ebx
40000f14:	89 30                	mov    %esi,(%eax)
40000f16:	31 f6                	xor    %esi,%esi
40000f18:	eb 19                	jmp    40000f33 <free+0xb7>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f1a:	39 d3                	cmp    %edx,%ebx
40000f1c:	75 10                	jne    40000f2e <free+0xb2>
    return (m_z << 16) + m_w;
40000f1e:	85 f6                	test   %esi,%esi
40000f20:	8b 53 08             	mov    0x8(%ebx),%edx
40000f23:	75 04                	jne    40000f29 <free+0xad>
}
40000f25:	89 d1                	mov    %edx,%ecx
40000f27:	eb a2                	jmp    40000ecb <free+0x4f>

int main(int argc, char* args[])
{
40000f29:	89 56 08             	mov    %edx,0x8(%esi)
40000f2c:	eb 9d                	jmp    40000ecb <free+0x4f>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f2e:	89 de                	mov    %ebx,%esi
40000f30:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f33:	85 db                	test   %ebx,%ebx
40000f35:	75 e3                	jne    40000f1a <free+0x9e>
40000f37:	eb 92                	jmp    40000ecb <free+0x4f>
40000f39:	8b 52 08             	mov    0x8(%edx),%edx
40000f3c:	85 d2                	test   %edx,%edx
40000f3e:	75 8f                	jne    40000ecf <free+0x53>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40000f40:	89 48 08             	mov    %ecx,0x8(%eax)
        }
40000f43:	a3 10 42 00 40       	mov    %eax,0x40004210
40000f48:	eb 0b                	jmp    40000f55 <free+0xd9>
40000f4a:	8b 40 08             	mov    0x8(%eax),%eax
40000f4d:	85 c0                	test   %eax,%eax
40000f4f:	0f 85 40 ff ff ff    	jne    40000e95 <free+0x19>
40000f55:	58                   	pop    %eax
40000f56:	5a                   	pop    %edx
40000f57:	5b                   	pop    %ebx
40000f58:	5e                   	pop    %esi
40000f59:	5f                   	pop    %edi
40000f5a:	5d                   	pop    %ebp
40000f5b:	c3                   	ret    

40000f5c <pop_unused_node>:
40000f5c:	55                   	push   %ebp
40000f5d:	89 e5                	mov    %esp,%ebp
40000f5f:	53                   	push   %ebx
40000f60:	83 ec 04             	sub    $0x4,%esp
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

40000f63:	a1 08 42 00 40       	mov    0x40004208,%eax
40000f68:	eb 45                	jmp    40000faf <pop_unused_node+0x53>
40000f6a:	83 ec 0c             	sub    $0xc,%esp
40000f6d:	6a 01                	push   $0x1
40000f6f:	e8 5b 02 00 00       	call   400011cf <vmm_alloc_cont>
40000f74:	83 c4 0c             	add    $0xc,%esp
40000f77:	89 c3                	mov    %eax,%ebx
40000f79:	68 00 10 00 00       	push   $0x1000
40000f7e:	6a 00                	push   $0x0
40000f80:	50                   	push   %eax
40000f81:	e8 a6 fc ff ff       	call   40000c2c <memset>
40000f86:	8b 15 08 42 00 40    	mov    0x40004208,%edx
40000f8c:	8d 43 0c             	lea    0xc(%ebx),%eax
40000f8f:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40000f95:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40000f98:	89 50 08             	mov    %edx,0x8(%eax)
40000f9b:	89 c2                	mov    %eax,%edx
40000f9d:	83 c0 0c             	add    $0xc,%eax
40000fa0:	39 c8                	cmp    %ecx,%eax
40000fa2:	75 f4                	jne    40000f98 <pop_unused_node+0x3c>
40000fa4:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40000faa:	a3 08 42 00 40       	mov    %eax,0x40004208
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

40000faf:	85 c0                	test   %eax,%eax
40000fb1:	74 b7                	je     40000f6a <pop_unused_node+0xe>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000fb3:	8b 50 08             	mov    0x8(%eax),%edx
40000fb6:	85 c0                	test   %eax,%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000fb8:	89 15 08 42 00 40    	mov    %edx,0x40004208
40000fbe:	74 aa                	je     40000f6a <pop_unused_node+0xe>
40000fc0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000fc3:	c9                   	leave  
40000fc4:	c3                   	ret    

40000fc5 <malloc>:
40000fc5:	55                   	push   %ebp
40000fc6:	89 e5                	mov    %esp,%ebp
40000fc8:	57                   	push   %edi
40000fc9:	56                   	push   %esi
40000fca:	53                   	push   %ebx
40000fcb:	83 ec 1c             	sub    $0x1c,%esp
40000fce:	a1 10 42 00 40       	mov    0x40004210,%eax
40000fd3:	8b 75 08             	mov    0x8(%ebp),%esi
40000fd6:	89 c3                	mov    %eax,%ebx
40000fd8:	eb 07                	jmp    40000fe1 <malloc+0x1c>
40000fda:	39 33                	cmp    %esi,(%ebx)
40000fdc:	73 0c                	jae    40000fea <malloc+0x25>
40000fde:	8b 5b 08             	mov    0x8(%ebx),%ebx
40000fe1:	85 db                	test   %ebx,%ebx
40000fe3:	75 f5                	jne    40000fda <malloc+0x15>
40000fe5:	e9 93 00 00 00       	jmp    4000107d <malloc+0xb8>
40000fea:	8b 3b                	mov    (%ebx),%edi
40000fec:	31 d2                	xor    %edx,%edx
40000fee:	29 f7                	sub    %esi,%edi
40000ff0:	89 33                	mov    %esi,(%ebx)
40000ff2:	eb 4b                	jmp    4000103f <malloc+0x7a>
40000ff4:	e8 63 ff ff ff       	call   40000f5c <pop_unused_node>
40000ff9:	8b 13                	mov    (%ebx),%edx
40000ffb:	03 53 04             	add    0x4(%ebx),%edx
40000ffe:	29 f7                	sub    %esi,%edi
40001000:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001003:	8b 15 10 42 00 40    	mov    0x40004210,%edx
40001009:	89 50 08             	mov    %edx,0x8(%eax)
4000100c:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000100e:	a3 10 42 00 40       	mov    %eax,0x40004210

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001013:	a1 0c 42 00 40       	mov    0x4000420c,%eax
40001018:	89 43 08             	mov    %eax,0x8(%ebx)
        }
4000101b:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
40001021:	eb 4f                	jmp    40001072 <malloc+0xad>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001023:	39 d8                	cmp    %ebx,%eax
40001025:	75 13                	jne    4000103a <malloc+0x75>
    return (m_z << 16) + m_w;
40001027:	85 d2                	test   %edx,%edx
40001029:	8b 43 08             	mov    0x8(%ebx),%eax
4000102c:	75 07                	jne    40001035 <malloc+0x70>
}
4000102e:	a3 10 42 00 40       	mov    %eax,0x40004210
40001033:	eb 0e                	jmp    40001043 <malloc+0x7e>

int main(int argc, char* args[])
{
40001035:	89 42 08             	mov    %eax,0x8(%edx)
40001038:	eb 09                	jmp    40001043 <malloc+0x7e>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
4000103a:	89 c2                	mov    %eax,%edx
4000103c:	8b 40 08             	mov    0x8(%eax),%eax
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
4000103f:	85 c0                	test   %eax,%eax
40001041:	75 e0                	jne    40001023 <malloc+0x5e>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001043:	a1 0c 42 00 40       	mov    0x4000420c,%eax
40001048:	85 ff                	test   %edi,%edi

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
4000104a:	89 43 08             	mov    %eax,0x8(%ebx)
        }
4000104d:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
40001053:	74 1d                	je     40001072 <malloc+0xad>
40001055:	e8 02 ff ff ff       	call   40000f5c <pop_unused_node>
4000105a:	8b 13                	mov    (%ebx),%edx
4000105c:	03 53 04             	add    0x4(%ebx),%edx
4000105f:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001062:	8b 15 10 42 00 40    	mov    0x40004210,%edx
40001068:	89 50 08             	mov    %edx,0x8(%eax)
4000106b:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000106d:	a3 10 42 00 40       	mov    %eax,0x40004210
40001072:	8b 43 04             	mov    0x4(%ebx),%eax
40001075:	8d 65 f4             	lea    -0xc(%ebp),%esp
40001078:	5b                   	pop    %ebx
40001079:	5e                   	pop    %esi
4000107a:	5f                   	pop    %edi
4000107b:	5d                   	pop    %ebp
4000107c:	c3                   	ret    
4000107d:	89 f0                	mov    %esi,%eax
4000107f:	89 f7                	mov    %esi,%edi
40001081:	c1 ef 0c             	shr    $0xc,%edi
40001084:	25 ff 0f 00 00       	and    $0xfff,%eax
40001089:	83 f8 01             	cmp    $0x1,%eax
4000108c:	83 df ff             	sbb    $0xffffffff,%edi
4000108f:	83 ec 0c             	sub    $0xc,%esp
40001092:	57                   	push   %edi
40001093:	e8 37 01 00 00       	call   400011cf <vmm_alloc_cont>
40001098:	c1 e7 0c             	shl    $0xc,%edi
4000109b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000109e:	e8 b9 fe ff ff       	call   40000f5c <pop_unused_node>
400010a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400010a6:	83 c4 10             	add    $0x10,%esp
400010a9:	89 c3                	mov    %eax,%ebx
400010ab:	89 50 04             	mov    %edx,0x4(%eax)
400010ae:	89 30                	mov    %esi,(%eax)
400010b0:	39 f7                	cmp    %esi,%edi
400010b2:	0f 86 5b ff ff ff    	jbe    40001013 <malloc+0x4e>
400010b8:	e9 37 ff ff ff       	jmp    40000ff4 <malloc+0x2f>

400010bd <realloc>:
400010bd:	55                   	push   %ebp
400010be:	89 e5                	mov    %esp,%ebp
400010c0:	56                   	push   %esi
400010c1:	53                   	push   %ebx
400010c2:	8b 1d 0c 42 00 40    	mov    0x4000420c,%ebx
400010c8:	8b 55 08             	mov    0x8(%ebp),%edx
400010cb:	8b 45 0c             	mov    0xc(%ebp),%eax
400010ce:	eb 3e                	jmp    4000110e <realloc+0x51>
400010d0:	3b 53 04             	cmp    0x4(%ebx),%edx
400010d3:	75 36                	jne    4000110b <realloc+0x4e>
400010d5:	85 c0                	test   %eax,%eax
400010d7:	75 0b                	jne    400010e4 <realloc+0x27>
400010d9:	52                   	push   %edx
400010da:	31 f6                	xor    %esi,%esi
400010dc:	e8 9b fd ff ff       	call   40000e7c <free>
400010e1:	5b                   	pop    %ebx
400010e2:	eb 30                	jmp    40001114 <realloc+0x57>
400010e4:	83 ec 0c             	sub    $0xc,%esp
400010e7:	50                   	push   %eax
400010e8:	e8 d8 fe ff ff       	call   40000fc5 <malloc>
400010ed:	83 c4 0c             	add    $0xc,%esp
400010f0:	89 c6                	mov    %eax,%esi
400010f2:	ff 33                	pushl  (%ebx)
400010f4:	ff 73 04             	pushl  0x4(%ebx)
400010f7:	50                   	push   %eax
400010f8:	e8 4b fb ff ff       	call   40000c48 <memcpy>
400010fd:	59                   	pop    %ecx
400010fe:	ff 73 04             	pushl  0x4(%ebx)
40001101:	e8 76 fd ff ff       	call   40000e7c <free>
40001106:	83 c4 10             	add    $0x10,%esp
40001109:	eb 09                	jmp    40001114 <realloc+0x57>
4000110b:	8b 5b 08             	mov    0x8(%ebx),%ebx
4000110e:	85 db                	test   %ebx,%ebx
40001110:	75 be                	jne    400010d0 <realloc+0x13>
40001112:	31 f6                	xor    %esi,%esi
40001114:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001117:	89 f0                	mov    %esi,%eax
40001119:	5b                   	pop    %ebx
4000111a:	5e                   	pop    %esi
4000111b:	5d                   	pop    %ebp
4000111c:	c3                   	ret    

4000111d <calloc>:
4000111d:	55                   	push   %ebp
4000111e:	89 e5                	mov    %esp,%ebp
40001120:	56                   	push   %esi
40001121:	53                   	push   %ebx
40001122:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40001125:	83 ec 0c             	sub    $0xc,%esp
40001128:	0f af 5d 08          	imul   0x8(%ebp),%ebx
4000112c:	53                   	push   %ebx
4000112d:	e8 93 fe ff ff       	call   40000fc5 <malloc>
40001132:	83 c4 10             	add    $0x10,%esp
40001135:	89 c6                	mov    %eax,%esi
40001137:	85 c0                	test   %eax,%eax
40001139:	74 0d                	je     40001148 <calloc+0x2b>
4000113b:	50                   	push   %eax
4000113c:	53                   	push   %ebx
4000113d:	6a 00                	push   $0x0
4000113f:	56                   	push   %esi
40001140:	e8 e7 fa ff ff       	call   40000c2c <memset>
40001145:	83 c4 10             	add    $0x10,%esp
40001148:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000114b:	89 f0                	mov    %esi,%eax
4000114d:	5b                   	pop    %ebx
4000114e:	5e                   	pop    %esi
4000114f:	5d                   	pop    %ebp
40001150:	c3                   	ret    
40001151:	00 00                	add    %al,(%eax)
	...

40001154 <print_memstat>:

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }

40001154:	55                   	push   %ebp
40001155:	89 e5                	mov    %esp,%ebp
40001157:	83 ec 34             	sub    $0x34,%esp
}
4000115a:	8d 45 e0             	lea    -0x20(%ebp),%eax

    return 0;
}
4000115d:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
40001164:	50                   	push   %eax

    return 0;
}
40001165:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000116c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001173:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000117a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001181:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40001188:	e8 7f 00 00 00       	call   4000120c <syscall>
4000118d:	83 c4 10             	add    $0x10,%esp
40001190:	c9                   	leave  
40001191:	c3                   	ret    

40001192 <vmm_free>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
40001192:	55                   	push   %ebp
40001193:	89 e5                	mov    %esp,%ebp
40001195:	83 ec 34             	sub    $0x34,%esp
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

40001198:	8b 45 08             	mov    0x8(%ebp),%eax
4000119b:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
400011a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
400011a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011a8:	50                   	push   %eax
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

400011a9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
400011c5:	e8 42 00 00 00       	call   4000120c <syscall>
400011ca:	83 c4 10             	add    $0x10,%esp
            rnd[i] = get_next();
400011cd:	c9                   	leave  
400011ce:	c3                   	ret    

400011cf <vmm_alloc_cont>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
400011cf:	55                   	push   %ebp
400011d0:	89 e5                	mov    %esp,%ebp
400011d2:	83 ec 34             	sub    $0x34,%esp
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
400011d5:	8b 45 08             	mov    0x8(%ebp),%eax
400011d8:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400011df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400011e2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011e5:	50                   	push   %eax
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
400011e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40001202:	e8 05 00 00 00       	call   4000120c <syscall>
    return (m_z << 16) + m_w;
}

40001207:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000120a:	c9                   	leave  
4000120b:	c3                   	ret    

4000120c <syscall>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
4000120c:	55                   	push   %ebp
4000120d:	89 e5                	mov    %esp,%ebp
4000120f:	57                   	push   %edi
40001210:	56                   	push   %esi
40001211:	53                   	push   %ebx
40001212:	83 ec 10             	sub    $0x10,%esp
#include "stdlib.h"
40001215:	8b 55 08             	mov    0x8(%ebp),%edx
40001218:	8b 45 08             	mov    0x8(%ebp),%eax
4000121b:	8b 72 0c             	mov    0xc(%edx),%esi
4000121e:	8b 00                	mov    (%eax),%eax
40001220:	89 75 e4             	mov    %esi,-0x1c(%ebp)
40001223:	8b 5a 04             	mov    0x4(%edx),%ebx
40001226:	8b 4a 08             	mov    0x8(%edx),%ecx
40001229:	8b 72 10             	mov    0x10(%edx),%esi
4000122c:	8b 7a 14             	mov    0x14(%edx),%edi
4000122f:	89 45 ec             	mov    %eax,-0x14(%ebp)
40001232:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001235:	cd 30                	int    $0x30
40001237:	89 55 e8             	mov    %edx,-0x18(%ebp)
4000123a:	8b 55 08             	mov    0x8(%ebp),%edx
4000123d:	89 45 f0             	mov    %eax,-0x10(%ebp)
40001240:	89 02                	mov    %eax,(%edx)
40001242:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001245:	89 5a 04             	mov    %ebx,0x4(%edx)
40001248:	89 4a 08             	mov    %ecx,0x8(%edx)
4000124b:	89 42 0c             	mov    %eax,0xc(%edx)
4000124e:	89 72 10             	mov    %esi,0x10(%edx)
40001251:	89 7a 14             	mov    %edi,0x14(%edx)
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");
40001254:	83 c4 10             	add    $0x10,%esp
40001257:	5b                   	pop    %ebx
40001258:	5e                   	pop    %esi
40001259:	5f                   	pop    %edi
4000125a:	5d                   	pop    %ebp
4000125b:	c3                   	ret    
