
../../initrfs/ibin/urnd_prov:     file format elf32-i386


Disassembly of section .text:

40000000 <get_next>:
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000003:	a1 00 20 00 40       	mov    0x40002000,%eax
40000008:	0f b7 c0             	movzwl %ax,%eax
4000000b:	69 c0 69 90 00 00    	imul   $0x9069,%eax,%eax
40000011:	8b 15 00 20 00 40    	mov    0x40002000,%edx
40000017:	c1 ea 10             	shr    $0x10,%edx
4000001a:	01 d0                	add    %edx,%eax
4000001c:	a3 00 20 00 40       	mov    %eax,0x40002000
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000021:	a1 04 20 00 40       	mov    0x40002004,%eax
40000026:	0f b7 c0             	movzwl %ax,%eax
40000029:	69 c0 50 46 00 00    	imul   $0x4650,%eax,%eax
4000002f:	8b 15 04 20 00 40    	mov    0x40002004,%edx
40000035:	c1 ea 10             	shr    $0x10,%edx
40000038:	01 d0                	add    %edx,%eax
4000003a:	a3 04 20 00 40       	mov    %eax,0x40002004
    return (m_z << 16) + m_w;
4000003f:	a1 00 20 00 40       	mov    0x40002000,%eax
40000044:	c1 e0 10             	shl    $0x10,%eax
40000047:	89 c2                	mov    %eax,%edx
40000049:	a1 04 20 00 40       	mov    0x40002004,%eax
4000004e:	01 d0                	add    %edx,%eax
}
40000050:	5d                   	pop    %ebp
40000051:	c3                   	ret    

40000052 <main>:

int main(int argc, char* args[])
{
40000052:	55                   	push   %ebp
40000053:	89 e5                	mov    %esp,%ebp
40000055:	53                   	push   %ebx
40000056:	83 e4 f0             	and    $0xfffffff0,%esp
40000059:	83 ec 30             	sub    $0x30,%esp
    HANDLE out = fmkfifo("/dev/urandom");
4000005c:	c7 04 24 00 30 00 40 	movl   $0x40003000,(%esp)
40000063:	e8 0a 09 00 00       	call   40000972 <fmkfifo>
40000068:	89 44 24 28          	mov    %eax,0x28(%esp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
4000006c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
40000073:	00 
40000074:	c7 04 24 0d 30 00 40 	movl   $0x4000300d,(%esp)
4000007b:	e8 cb 06 00 00       	call   4000074b <fopen>
40000080:	89 44 24 24          	mov    %eax,0x24(%esp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40000084:	c6 44 24 1f 4b       	movb   $0x4b,0x1f(%esp)
40000089:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000090:	00 
40000091:	8d 44 24 1f          	lea    0x1f(%esp),%eax
40000095:	89 44 24 04          	mov    %eax,0x4(%esp)
40000099:	8b 44 24 24          	mov    0x24(%esp),%eax
4000009d:	89 04 24             	mov    %eax,(%esp)
400000a0:	e8 cc 07 00 00       	call   40000871 <fwrite>
    fclose(initCtrl);
400000a5:	8b 44 24 24          	mov    0x24(%esp),%eax
400000a9:	89 04 24             	mov    %eax,(%esp)
400000ac:	e8 d8 06 00 00       	call   40000789 <fclose>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
400000b1:	c7 04 24 00 02 00 00 	movl   $0x200,(%esp)
400000b8:	e8 61 13 00 00       	call   4000141e <malloc>
400000bd:	89 44 24 20          	mov    %eax,0x20(%esp)

    while(1) {
        for(int i = 0; i < 128; i++) {
400000c1:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
400000c8:	00 
400000c9:	eb 1e                	jmp    400000e9 <main+0x97>
            rnd[i] = get_next();
400000cb:	8b 44 24 2c          	mov    0x2c(%esp),%eax
400000cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
400000d6:	8b 44 24 20          	mov    0x20(%esp),%eax
400000da:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
400000dd:	e8 1e ff ff ff       	call   40000000 <get_next>
400000e2:	89 03                	mov    %eax,(%ebx)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
400000e4:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
400000e9:	83 7c 24 2c 7f       	cmpl   $0x7f,0x2c(%esp)
400000ee:	7e db                	jle    400000cb <main+0x79>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400000f0:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
400000f7:	00 
400000f8:	8b 44 24 20          	mov    0x20(%esp),%eax
400000fc:	89 44 24 04          	mov    %eax,0x4(%esp)
40000100:	8b 44 24 28          	mov    0x28(%esp),%eax
40000104:	89 04 24             	mov    %eax,(%esp)
40000107:	e8 65 07 00 00       	call   40000871 <fwrite>
    }
4000010c:	eb b3                	jmp    400000c1 <main+0x6f>

4000010e <return_rpc>:
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
4000010e:	55                   	push   %ebp
4000010f:	89 e5                	mov    %esp,%ebp
40000111:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000114:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
      .eax = 30,
      .ebx = (uint32_t)code,
4000011b:	8b 45 08             	mov    0x8(%ebp),%eax
#include "process.h"
#include "stdio.h"
#include "stdlib.h"

static void return_rpc(int code) {
    struct regstate state = {
4000011e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000121:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000128:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000012f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000136:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
4000013d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000140:	89 04 24             	mov    %eax,(%esp)
40000143:	e8 13 16 00 00       	call   4000175b <syscall>

    while(1);
40000148:	eb fe                	jmp    40000148 <return_rpc+0x3a>

4000014a <call_rpc>:
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
4000014a:	55                   	push   %ebp
4000014b:	89 e5                	mov    %esp,%ebp
4000014d:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000150:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
40000157:	8b 45 08             	mov    0x8(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000015a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000015d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000160:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000163:	8b 45 10             	mov    0x10(%ebp),%eax
40000166:	89 45 ec             	mov    %eax,-0x14(%ebp)
      .eax = 31,
      .ebx = (uint32_t)pid,
      .ecx = funcID,
      .edx = datasize,
      .esi = (uint32_t)data,
40000169:	8b 45 14             	mov    0x14(%ebp),%eax

    while(1);
}

uint32_t call_rpc(int pid, uint32_t funcID, uint32_t datasize, void* data) {
    struct regstate state = {
4000016c:	89 45 f0             	mov    %eax,-0x10(%ebp)
4000016f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = datasize,
      .esi = (uint32_t)data,
      .edi = 0
    };

    syscall(&state);
40000176:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000179:	89 04 24             	mov    %eax,(%esp)
4000017c:	e8 da 15 00 00       	call   4000175b <syscall>

    return state.eax;
40000181:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000184:	c9                   	leave  
40000185:	c3                   	ret    

40000186 <fetch_rpc_data>:

void fetch_rpc_data(void* dest) {
40000186:	55                   	push   %ebp
40000187:	89 e5                	mov    %esp,%ebp
40000189:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000018c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
      .eax = 33,
      .ebx = (uint32_t)dest,
40000193:	8b 45 08             	mov    0x8(%ebp),%eax

    return state.eax;
}

void fetch_rpc_data(void* dest) {
    struct regstate state = {
40000196:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000199:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400001a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400001b5:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001b8:	89 04 24             	mov    %eax,(%esp)
400001bb:	e8 9b 15 00 00       	call   4000175b <syscall>
}
400001c0:	c9                   	leave  
400001c1:	c3                   	ret    

400001c2 <register_irq_rpc_syscall>:

static uint32_t register_irq_rpc_syscall(uint32_t irq) {
400001c2:	55                   	push   %ebp
400001c3:	89 e5                	mov    %esp,%ebp
400001c5:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400001c8:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400001cf:	8b 45 08             	mov    0x8(%ebp),%eax
400001d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400001dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400001f1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001f4:	89 04 24             	mov    %eax,(%esp)
400001f7:	e8 5f 15 00 00       	call   4000175b <syscall>

    return state.eax;
400001fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400001ff:	c9                   	leave  
40000200:	c3                   	ret    

40000201 <register_irq_handler>:

static void (*irq_handlers[128])(uint32_t);

uint32_t register_irq_handler(uint32_t irq, void(*handler)(uint32_t)) {
40000201:	55                   	push   %ebp
40000202:	89 e5                	mov    %esp,%ebp
40000204:	83 ec 18             	sub    $0x18,%esp
    if(register_irq_rpc_syscall(irq)) {
40000207:	8b 45 08             	mov    0x8(%ebp),%eax
4000020a:	89 04 24             	mov    %eax,(%esp)
4000020d:	e8 b0 ff ff ff       	call   400001c2 <register_irq_rpc_syscall>
40000212:	85 c0                	test   %eax,%eax
40000214:	74 14                	je     4000022a <register_irq_handler+0x29>
        irq_handlers[irq] = handler;
40000216:	8b 45 08             	mov    0x8(%ebp),%eax
40000219:	8b 55 0c             	mov    0xc(%ebp),%edx
4000021c:	89 14 85 00 40 00 40 	mov    %edx,0x40004000(,%eax,4)
        return 1;
40000223:	b8 01 00 00 00       	mov    $0x1,%eax
40000228:	eb 05                	jmp    4000022f <register_irq_handler+0x2e>
    }
    return 0;
4000022a:	b8 00 00 00 00       	mov    $0x0,%eax
}
4000022f:	c9                   	leave  
40000230:	c3                   	ret    

40000231 <_handle_rpc>:

static void _handle_rpc(uint32_t type, uint32_t funcID, uint32_t datasize) {
40000231:	55                   	push   %ebp
40000232:	89 e5                	mov    %esp,%ebp
40000234:	83 ec 28             	sub    $0x28,%esp
    void* localData = malloc(datasize);
40000237:	8b 45 10             	mov    0x10(%ebp),%eax
4000023a:	89 04 24             	mov    %eax,(%esp)
4000023d:	e8 dc 11 00 00       	call   4000141e <malloc>
40000242:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fetch_rpc_data(localData);
40000245:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000248:	89 04 24             	mov    %eax,(%esp)
4000024b:	e8 36 ff ff ff       	call   40000186 <fetch_rpc_data>

    if(type == RPCT_IRQ) {
40000250:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000254:	75 2c                	jne    40000282 <_handle_rpc+0x51>
        if(irq_handlers[funcID]) {
40000256:	8b 45 0c             	mov    0xc(%ebp),%eax
40000259:	8b 04 85 00 40 00 40 	mov    0x40004000(,%eax,4),%eax
40000260:	85 c0                	test   %eax,%eax
40000262:	74 1e                	je     40000282 <_handle_rpc+0x51>
            irq_handlers[funcID](funcID);
40000264:	8b 45 0c             	mov    0xc(%ebp),%eax
40000267:	8b 04 85 00 40 00 40 	mov    0x40004000(,%eax,4),%eax
4000026e:	8b 55 0c             	mov    0xc(%ebp),%edx
40000271:	89 14 24             	mov    %edx,(%esp)
40000274:	ff d0                	call   *%eax
            return_rpc(0);
40000276:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000027d:	e8 8c fe ff ff       	call   4000010e <return_rpc>
        }
    }

    printf("Unhandled RPC!\n");
40000282:	c7 04 24 20 30 00 40 	movl   $0x40003020,(%esp)
40000289:	e8 a0 0a 00 00       	call   40000d2e <printf>

    free(localData);
4000028e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000291:	89 04 24             	mov    %eax,(%esp)
40000294:	e8 c2 13 00 00       	call   4000165b <free>
    return_rpc(0);
40000299:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400002a0:	e8 69 fe ff ff       	call   4000010e <return_rpc>
}
400002a5:	c9                   	leave  
400002a6:	c3                   	ret    

400002a7 <set_rpc_handler>:

void set_rpc_handler() {
400002a7:	55                   	push   %ebp
400002a8:	89 e5                	mov    %esp,%ebp
400002aa:	83 ec 38             	sub    $0x38,%esp
    memset(irq_handlers, 0, sizeof(irq_handlers));
400002ad:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
400002b4:	00 
400002b5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400002bc:	00 
400002bd:	c7 04 24 00 40 00 40 	movl   $0x40004000,(%esp)
400002c4:	e8 d5 0b 00 00       	call   40000e9e <memset>

    struct regstate state = {
400002c9:	c7 45 e0 20 00 00 00 	movl   $0x20,-0x20(%ebp)
      .eax = 32,
      .ebx = (uint32_t)_handle_rpc,
400002d0:	b8 31 02 00 40       	mov    $0x40000231,%eax
}

void set_rpc_handler() {
    memset(irq_handlers, 0, sizeof(irq_handlers));

    struct regstate state = {
400002d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002d8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400002f4:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002f7:	89 04 24             	mov    %eax,(%esp)
400002fa:	e8 5c 14 00 00       	call   4000175b <syscall>
}
400002ff:	c9                   	leave  
40000300:	c3                   	ret    

40000301 <getargs>:
#include "stdio.h"
#include "process_rpc.c"

extern int main(int argc, char* args[]);

static uint32_t getargs() {
40000301:	55                   	push   %ebp
40000302:	89 e5                	mov    %esp,%ebp
40000304:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000307:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
4000030e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000315:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000031c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000323:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000032a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000331:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000334:	89 04 24             	mov    %eax,(%esp)
40000337:	e8 1f 14 00 00       	call   4000175b <syscall>

    return state.eax;
4000033c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000033f:	c9                   	leave  
40000340:	c3                   	ret    

40000341 <_start>:

void _start() {
40000341:	55                   	push   %ebp
40000342:	89 e5                	mov    %esp,%ebp
40000344:	83 ec 28             	sub    $0x28,%esp
  char** args = (char**) getargs();
40000347:	e8 b5 ff ff ff       	call   40000301 <getargs>
4000034c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int argc = 0;
4000034f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if(args != 0) {
40000356:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
4000035a:	74 1b                	je     40000377 <_start+0x36>
      while(args[argc] != 0) {
4000035c:	eb 04                	jmp    40000362 <_start+0x21>
          argc++;
4000035e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  char** args = (char**) getargs();

  int argc = 0;

  if(args != 0) {
      while(args[argc] != 0) {
40000362:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000365:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
4000036c:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000036f:	01 d0                	add    %edx,%eax
40000371:	8b 00                	mov    (%eax),%eax
40000373:	85 c0                	test   %eax,%eax
40000375:	75 e7                	jne    4000035e <_start+0x1d>
          argc++;
      }
  }

  set_rpc_handler();
40000377:	e8 2b ff ff ff       	call   400002a7 <set_rpc_handler>

  int result = main(argc, args);
4000037c:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000037f:	89 44 24 04          	mov    %eax,0x4(%esp)
40000383:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000386:	89 04 24             	mov    %eax,(%esp)
40000389:	e8 c4 fc ff ff       	call   40000052 <main>
4000038e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  exit(result);
40000391:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000394:	89 04 24             	mov    %eax,(%esp)
40000397:	e8 40 00 00 00       	call   400003dc <exit>
}
4000039c:	c9                   	leave  
4000039d:	c3                   	ret    

4000039e <yield>:

void yield() {
4000039e:	55                   	push   %ebp
4000039f:	89 e5                	mov    %esp,%ebp
400003a1:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003a4:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
400003ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400003b2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400003ce:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003d1:	89 04 24             	mov    %eax,(%esp)
400003d4:	e8 82 13 00 00       	call   4000175b <syscall>

    return;
400003d9:	90                   	nop
}
400003da:	c9                   	leave  
400003db:	c3                   	ret    

400003dc <exit>:

void exit(int returncode) {
400003dc:	55                   	push   %ebp
400003dd:	89 e5                	mov    %esp,%ebp
400003df:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400003e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
400003e9:	8b 45 08             	mov    0x8(%ebp),%eax
400003ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400003ef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000404:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000040b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000040e:	89 04 24             	mov    %eax,(%esp)
40000411:	e8 45 13 00 00       	call   4000175b <syscall>

    while(1) {
      printf("error\n");
40000416:	c7 04 24 30 30 00 40 	movl   $0x40003030,(%esp)
4000041d:	e8 0c 09 00 00       	call   40000d2e <printf>
    }
40000422:	eb f2                	jmp    40000416 <exit+0x3a>

40000424 <getExecPath>:
}

void getExecPath(char* dest) {
40000424:	55                   	push   %ebp
40000425:	89 e5                	mov    %esp,%ebp
40000427:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000042a:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
        .eax = 6,
        .ebx = (uint32_t)dest,
40000431:	8b 45 08             	mov    0x8(%ebp),%eax
      printf("error\n");
    }
}

void getExecPath(char* dest) {
    struct regstate state = {
40000434:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000437:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000043e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000445:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000044c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000453:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000456:	89 04 24             	mov    %eax,(%esp)
40000459:	e8 fd 12 00 00       	call   4000175b <syscall>
}
4000045e:	c9                   	leave  
4000045f:	c3                   	ret    

40000460 <changeExecPath>:

int changeExecPath(char* path) {
40000460:	55                   	push   %ebp
40000461:	89 e5                	mov    %esp,%ebp
40000463:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000466:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
        .eax = 7,
        .ebx = (uint32_t)path,
4000046d:	8b 45 08             	mov    0x8(%ebp),%eax

    syscall(&state);
}

int changeExecPath(char* path) {
    struct regstate state = {
40000470:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000473:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000047a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000481:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000488:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
4000048f:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000492:	89 04 24             	mov    %eax,(%esp)
40000495:	e8 c1 12 00 00       	call   4000175b <syscall>

    return state.eax;
4000049a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000049d:	c9                   	leave  
4000049e:	c3                   	ret    

4000049f <cd>:

void cd(char* path) {
4000049f:	55                   	push   %ebp
400004a0:	89 e5                	mov    %esp,%ebp
400004a2:	83 ec 18             	sub    $0x18,%esp
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
400004a5:	8b 45 08             	mov    0x8(%ebp),%eax
400004a8:	89 04 24             	mov    %eax,(%esp)
400004ab:	e8 b0 ff ff ff       	call   40000460 <changeExecPath>
400004b0:	85 c0                	test   %eax,%eax
400004b2:	75 14                	jne    400004c8 <cd+0x29>
400004b4:	e8 48 01 00 00       	call   40000601 <getLastVFSErr>
400004b9:	89 44 24 04          	mov    %eax,0x4(%esp)
400004bd:	8b 45 08             	mov    0x8(%ebp),%eax
400004c0:	89 04 24             	mov    %eax,(%esp)
400004c3:	e8 7a 00 00 00       	call   40000542 <printFilesystemError>
}
400004c8:	c9                   	leave  
400004c9:	c3                   	ret    

400004ca <exec>:

int exec(char* path, char** args) {
400004ca:	55                   	push   %ebp
400004cb:	89 e5                	mov    %esp,%ebp
400004cd:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400004d0:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
400004d7:	8b 45 08             	mov    0x8(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400004da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        .eax = 3,
        .ebx = (uint32_t) path,
        .ecx = (uint32_t) args,
400004dd:	8b 45 0c             	mov    0xc(%ebp),%eax
void cd(char* path) {
    if(!changeExecPath(path)) printFilesystemError(path, getLastVFSErr());
}

int exec(char* path, char** args) {
    struct regstate state = {
400004e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
400004e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
400004f8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004fb:	89 04 24             	mov    %eax,(%esp)
400004fe:	e8 58 12 00 00       	call   4000175b <syscall>

    return state.eax;
40000503:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000506:	c9                   	leave  
40000507:	c3                   	ret    

40000508 <texec>:

int texec(char* path, char** args) {
40000508:	55                   	push   %ebp
40000509:	89 e5                	mov    %esp,%ebp
4000050b:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = exec(path, args);
4000050e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000511:	89 44 24 04          	mov    %eax,0x4(%esp)
40000515:	8b 45 08             	mov    0x8(%ebp),%eax
40000518:	89 04 24             	mov    %eax,(%esp)
4000051b:	e8 aa ff ff ff       	call   400004ca <exec>
40000520:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!res) {
40000523:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000527:	75 14                	jne    4000053d <texec+0x35>
        printFilesystemError(path, getLastVFSErr());
40000529:	e8 d3 00 00 00       	call   40000601 <getLastVFSErr>
4000052e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000532:	8b 45 08             	mov    0x8(%ebp),%eax
40000535:	89 04 24             	mov    %eax,(%esp)
40000538:	e8 05 00 00 00       	call   40000542 <printFilesystemError>
    }

    return res;
4000053d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000540:	c9                   	leave  
40000541:	c3                   	ret    

40000542 <printFilesystemError>:

void printFilesystemError(char* path, uint32_t code) {
40000542:	55                   	push   %ebp
40000543:	89 e5                	mov    %esp,%ebp
40000545:	83 ec 18             	sub    $0x18,%esp
    switch(code) {
40000548:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000054c:	0f 87 8d 00 00 00    	ja     400005df <printFilesystemError+0x9d>
40000552:	8b 45 0c             	mov    0xc(%ebp),%eax
40000555:	c1 e0 02             	shl    $0x2,%eax
40000558:	05 04 31 00 40       	add    $0x40003104,%eax
4000055d:	8b 00                	mov    (%eax),%eax
4000055f:	ff e0                	jmp    *%eax
    case PE_NO_ERROR:
        printf("%s: Unknown error", path);
40000561:	8b 45 08             	mov    0x8(%ebp),%eax
40000564:	89 44 24 04          	mov    %eax,0x4(%esp)
40000568:	c7 04 24 37 30 00 40 	movl   $0x40003037,(%esp)
4000056f:	e8 ba 07 00 00       	call   40000d2e <printf>
        break;
40000574:	eb 7d                	jmp    400005f3 <printFilesystemError+0xb1>
    case PE_INVALID:
        printf("%s: Specified path was invalid", path);
40000576:	8b 45 08             	mov    0x8(%ebp),%eax
40000579:	89 44 24 04          	mov    %eax,0x4(%esp)
4000057d:	c7 04 24 4c 30 00 40 	movl   $0x4000304c,(%esp)
40000584:	e8 a5 07 00 00       	call   40000d2e <printf>
        break;
40000589:	eb 68                	jmp    400005f3 <printFilesystemError+0xb1>
    case PE_CORRUPT_FILE:
        printf("%s: File is not a valid executable binary", path);
4000058b:	8b 45 08             	mov    0x8(%ebp),%eax
4000058e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000592:	c7 04 24 6c 30 00 40 	movl   $0x4000306c,(%esp)
40000599:	e8 90 07 00 00       	call   40000d2e <printf>
        break;
4000059e:	eb 53                	jmp    400005f3 <printFilesystemError+0xb1>
    case PE_FILESYSTEM:
        printf("%s: Filesystem error", path);
400005a0:	8b 45 08             	mov    0x8(%ebp),%eax
400005a3:	89 44 24 04          	mov    %eax,0x4(%esp)
400005a7:	c7 04 24 96 30 00 40 	movl   $0x40003096,(%esp)
400005ae:	e8 7b 07 00 00       	call   40000d2e <printf>
        break;
400005b3:	eb 3e                	jmp    400005f3 <printFilesystemError+0xb1>
    case PE_PERM_DENIED:
        printf("%s: Permission to execute path denied (maybe a directory?)", path);
400005b5:	8b 45 08             	mov    0x8(%ebp),%eax
400005b8:	89 44 24 04          	mov    %eax,0x4(%esp)
400005bc:	c7 04 24 ac 30 00 40 	movl   $0x400030ac,(%esp)
400005c3:	e8 66 07 00 00       	call   40000d2e <printf>
        break;
400005c8:	eb 29                	jmp    400005f3 <printFilesystemError+0xb1>
    case PE_FILE_NOT_FOUND:
        printf("%s: File not found", path);
400005ca:	8b 45 08             	mov    0x8(%ebp),%eax
400005cd:	89 44 24 04          	mov    %eax,0x4(%esp)
400005d1:	c7 04 24 e7 30 00 40 	movl   $0x400030e7,(%esp)
400005d8:	e8 51 07 00 00       	call   40000d2e <printf>
        break;
400005dd:	eb 14                	jmp    400005f3 <printFilesystemError+0xb1>
    default:
        printf("%s: WTF", path);
400005df:	8b 45 08             	mov    0x8(%ebp),%eax
400005e2:	89 44 24 04          	mov    %eax,0x4(%esp)
400005e6:	c7 04 24 fa 30 00 40 	movl   $0x400030fa,(%esp)
400005ed:	e8 3c 07 00 00       	call   40000d2e <printf>
        break;
400005f2:	90                   	nop

    }
    printf("\n");
400005f3:	c7 04 24 02 31 00 40 	movl   $0x40003102,(%esp)
400005fa:	e8 2f 07 00 00       	call   40000d2e <printf>
}
400005ff:	c9                   	leave  
40000600:	c3                   	ret    

40000601 <getLastVFSErr>:
#include "stdio.h"
#include "string.h"
#include "process.h"

uint32_t getLastVFSErr() {
40000601:	55                   	push   %ebp
40000602:	89 e5                	mov    %esp,%ebp
40000604:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000607:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
4000060e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000615:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000061c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000623:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000062a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0
    };

    syscall(&state);
40000631:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000634:	89 04 24             	mov    %eax,(%esp)
40000637:	e8 1f 11 00 00       	call   4000175b <syscall>

    return state.eax;
4000063c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000063f:	c9                   	leave  
40000640:	c3                   	ret    

40000641 <getpmhandle>:

static HANDLE getpmhandle   (uint32_t pmid) {
40000641:	55                   	push   %ebp
40000642:	89 e5                	mov    %esp,%ebp
40000644:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000647:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
4000064e:	8b 45 08             	mov    0x8(%ebp),%eax
40000651:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000654:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000065b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000662:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000669:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000670:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000673:	89 04 24             	mov    %eax,(%esp)
40000676:	e8 e0 10 00 00       	call   4000175b <syscall>

    return (HANDLE)state.eax;
4000067b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000067e:	c9                   	leave  
4000067f:	c3                   	ret    

40000680 <getstdout>:

static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
40000680:	55                   	push   %ebp
40000681:	89 e5                	mov    %esp,%ebp
40000683:	83 ec 18             	sub    $0x18,%esp
40000686:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000068d:	e8 af ff ff ff       	call   40000641 <getpmhandle>
40000692:	c9                   	leave  
40000693:	c3                   	ret    

40000694 <getstdin>:
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
40000694:	55                   	push   %ebp
40000695:	89 e5                	mov    %esp,%ebp
40000697:	83 ec 18             	sub    $0x18,%esp
4000069a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400006a1:	e8 9b ff ff ff       	call   40000641 <getpmhandle>
400006a6:	c9                   	leave  
400006a7:	c3                   	ret    

400006a8 <getstderr>:
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };
400006a8:	55                   	push   %ebp
400006a9:	89 e5                	mov    %esp,%ebp
400006ab:	83 ec 18             	sub    $0x18,%esp
400006ae:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
400006b5:	e8 87 ff ff ff       	call   40000641 <getpmhandle>
400006ba:	c9                   	leave  
400006bb:	c3                   	ret    

400006bc <fopenpmhandle>:

int fopenpmhandle (uint32_t pmid, char* path) {
400006bc:	55                   	push   %ebp
400006bd:	89 e5                	mov    %esp,%ebp
400006bf:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400006c2:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
400006c9:	8b 45 08             	mov    0x8(%ebp),%eax
400006cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 21,
      .ebx = pmid,
      .ecx = (uint32_t)path,
400006cf:	8b 45 0c             	mov    0xc(%ebp),%eax
static HANDLE getstdout() { return getpmhandle(PMID_STDOUT); };
static HANDLE getstdin() { return getpmhandle(PMID_STDIN); };
static HANDLE getstderr() { return getpmhandle(PMID_STDERR); };

int fopenpmhandle (uint32_t pmid, char* path) {
    struct regstate state = {
400006d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
400006d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400006ea:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006ed:	89 04 24             	mov    %eax,(%esp)
400006f0:	e8 66 10 00 00       	call   4000175b <syscall>

    return (HANDLE)state.eax;
400006f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400006f8:	c9                   	leave  
400006f9:	c3                   	ret    

400006fa <setstdout>:

int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
400006fa:	55                   	push   %ebp
400006fb:	89 e5                	mov    %esp,%ebp
400006fd:	83 ec 18             	sub    $0x18,%esp
40000700:	8b 45 08             	mov    0x8(%ebp),%eax
40000703:	89 44 24 04          	mov    %eax,0x4(%esp)
40000707:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
4000070e:	e8 a9 ff ff ff       	call   400006bc <fopenpmhandle>
40000713:	c9                   	leave  
40000714:	c3                   	ret    

40000715 <setstdin>:
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
40000715:	55                   	push   %ebp
40000716:	89 e5                	mov    %esp,%ebp
40000718:	83 ec 18             	sub    $0x18,%esp
4000071b:	8b 45 08             	mov    0x8(%ebp),%eax
4000071e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000722:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000729:	e8 8e ff ff ff       	call   400006bc <fopenpmhandle>
4000072e:	c9                   	leave  
4000072f:	c3                   	ret    

40000730 <setstderr>:
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };
40000730:	55                   	push   %ebp
40000731:	89 e5                	mov    %esp,%ebp
40000733:	83 ec 18             	sub    $0x18,%esp
40000736:	8b 45 08             	mov    0x8(%ebp),%eax
40000739:	89 44 24 04          	mov    %eax,0x4(%esp)
4000073d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
40000744:	e8 73 ff ff ff       	call   400006bc <fopenpmhandle>
40000749:	c9                   	leave  
4000074a:	c3                   	ret    

4000074b <fopen>:

HANDLE fopen(char* path, uint32_t mode) {
4000074b:	55                   	push   %ebp
4000074c:	89 e5                	mov    %esp,%ebp
4000074e:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000751:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
      .eax = 10,
      .ebx = (uint32_t)path,
40000758:	8b 45 08             	mov    0x8(%ebp),%eax
int setstdout(char* path) { return fopenpmhandle(PMID_STDOUT, path); };
int setstdin (char* path) { return fopenpmhandle(PMID_STDIN , path); };
int setstderr(char* path) { return fopenpmhandle(PMID_STDERR, path); };

HANDLE fopen(char* path, uint32_t mode) {
    struct regstate state = {
4000075b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000075e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000761:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000764:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000076b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000779:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000077c:	89 04 24             	mov    %eax,(%esp)
4000077f:	e8 d7 0f 00 00       	call   4000175b <syscall>

    return (HANDLE)state.eax;
40000784:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000787:	c9                   	leave  
40000788:	c3                   	ret    

40000789 <fclose>:

int fclose(uint32_t handle) {
40000789:	55                   	push   %ebp
4000078a:	89 e5                	mov    %esp,%ebp
4000078c:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000078f:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
40000796:	8b 45 08             	mov    0x8(%ebp),%eax
40000799:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000079c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400007b8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400007bb:	89 04 24             	mov    %eax,(%esp)
400007be:	e8 98 0f 00 00       	call   4000175b <syscall>

    return (int)state.eax;
400007c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400007c6:	c9                   	leave  
400007c7:	c3                   	ret    

400007c8 <printrwerror>:

static void printrwerror(HANDLE handle, uint32_t res) {
400007c8:	55                   	push   %ebp
400007c9:	89 e5                	mov    %esp,%ebp
400007cb:	83 ec 18             	sub    $0x18,%esp
    if(res == RW_ERR_VFS) {
400007ce:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
400007d2:	75 13                	jne    400007e7 <printrwerror+0x1f>
        printf("HANDLE[0x%x] VFS_ERROR\n", handle);
400007d4:	8b 45 08             	mov    0x8(%ebp),%eax
400007d7:	89 44 24 04          	mov    %eax,0x4(%esp)
400007db:	c7 04 24 1c 31 00 40 	movl   $0x4000311c,(%esp)
400007e2:	e8 47 05 00 00       	call   40000d2e <printf>
    }

    if(res == RW_ERR_DRIVER) {
400007e7:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
400007eb:	75 13                	jne    40000800 <printrwerror+0x38>
        printf("HANDLE[0x%x] DRIVER_ERROR\n", handle);
400007ed:	8b 45 08             	mov    0x8(%ebp),%eax
400007f0:	89 44 24 04          	mov    %eax,0x4(%esp)
400007f4:	c7 04 24 34 31 00 40 	movl   $0x40003134,(%esp)
400007fb:	e8 2e 05 00 00       	call   40000d2e <printf>
    }

    if(res == RW_NOFM_READ) {
40000800:	83 7d 0c 04          	cmpl   $0x4,0xc(%ebp)
40000804:	75 13                	jne    40000819 <printrwerror+0x51>
        printf("HANDLE[0x%x] FILEMODE doesn't allow read\n", handle);
40000806:	8b 45 08             	mov    0x8(%ebp),%eax
40000809:	89 44 24 04          	mov    %eax,0x4(%esp)
4000080d:	c7 04 24 50 31 00 40 	movl   $0x40003150,(%esp)
40000814:	e8 15 05 00 00       	call   40000d2e <printf>
    }

    if(res == RW_NOFM_WRITE) {
40000819:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
4000081d:	75 13                	jne    40000832 <printrwerror+0x6a>
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
4000081f:	8b 45 08             	mov    0x8(%ebp),%eax
40000822:	89 44 24 04          	mov    %eax,0x4(%esp)
40000826:	c7 04 24 7c 31 00 40 	movl   $0x4000317c,(%esp)
4000082d:	e8 fc 04 00 00       	call   40000d2e <printf>
    }
}
40000832:	c9                   	leave  
40000833:	c3                   	ret    

40000834 <frwrite>:

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
40000834:	55                   	push   %ebp
40000835:	89 e5                	mov    %esp,%ebp
40000837:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
4000083a:	c7 45 e0 0c 00 00 00 	movl   $0xc,-0x20(%ebp)
40000841:	8b 45 08             	mov    0x8(%ebp),%eax
40000844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 12,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)src,
40000847:	8b 45 0c             	mov    0xc(%ebp),%eax
        printf("HANDLE[0x%x] FILEMODE doesn't allow write\n", handle);
    }
}

static uint32_t frwrite(uint32_t handle, const void* src, uint32_t length) {
    struct regstate state = {
4000084a:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000084d:	8b 45 10             	mov    0x10(%ebp),%eax
40000850:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000853:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000085a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000861:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000864:	89 04 24             	mov    %eax,(%esp)
40000867:	e8 ef 0e 00 00       	call   4000175b <syscall>

    return (int)state.eax;
4000086c:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000086f:	c9                   	leave  
40000870:	c3                   	ret    

40000871 <fwrite>:

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
40000871:	55                   	push   %ebp
40000872:	89 e5                	mov    %esp,%ebp
40000874:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frwrite(handle, src, length);
40000877:	8b 45 10             	mov    0x10(%ebp),%eax
4000087a:	89 44 24 08          	mov    %eax,0x8(%esp)
4000087e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000881:	89 44 24 04          	mov    %eax,0x4(%esp)
40000885:	8b 45 08             	mov    0x8(%ebp),%eax
40000888:	89 04 24             	mov    %eax,(%esp)
4000088b:	e8 a4 ff ff ff       	call   40000834 <frwrite>
40000890:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000893:	eb 21                	jmp    400008b6 <fwrite+0x45>
        yield();
40000895:	e8 04 fb ff ff       	call   4000039e <yield>
        res = frwrite(handle, src, length);
4000089a:	8b 45 10             	mov    0x10(%ebp),%eax
4000089d:	89 44 24 08          	mov    %eax,0x8(%esp)
400008a1:	8b 45 0c             	mov    0xc(%ebp),%eax
400008a4:	89 44 24 04          	mov    %eax,0x4(%esp)
400008a8:	8b 45 08             	mov    0x8(%ebp),%eax
400008ab:	89 04 24             	mov    %eax,(%esp)
400008ae:	e8 81 ff ff ff       	call   40000834 <frwrite>
400008b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fwrite(uint32_t handle, const void* src, uint32_t length) {
    uint32_t res = frwrite(handle, src, length);

    while(res == RW_BLOCK) {
400008b6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
400008ba:	74 d9                	je     40000895 <fwrite+0x24>
        yield();
        res = frwrite(handle, src, length);
    }

    printrwerror(handle, res);
400008bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
400008bf:	89 44 24 04          	mov    %eax,0x4(%esp)
400008c3:	8b 45 08             	mov    0x8(%ebp),%eax
400008c6:	89 04 24             	mov    %eax,(%esp)
400008c9:	e8 fa fe ff ff       	call   400007c8 <printrwerror>

    return res;
400008ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
400008d1:	c9                   	leave  
400008d2:	c3                   	ret    

400008d3 <frread>:

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
400008d3:	55                   	push   %ebp
400008d4:	89 e5                	mov    %esp,%ebp
400008d6:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
400008d9:	c7 45 e0 0d 00 00 00 	movl   $0xd,-0x20(%ebp)
400008e0:	8b 45 08             	mov    0x8(%ebp),%eax
400008e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      .eax = 13,
      .ebx = (uint32_t)handle,
      .ecx = (uint32_t)dest,
400008e6:	8b 45 0c             	mov    0xc(%ebp),%eax

    return res;
}

static uint32_t frread(uint32_t handle, void* dest, uint32_t length) {
    struct regstate state = {
400008e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
400008ec:	8b 45 10             	mov    0x10(%ebp),%eax
400008ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
400008f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = length,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
40000900:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000903:	89 04 24             	mov    %eax,(%esp)
40000906:	e8 50 0e 00 00       	call   4000175b <syscall>

    return (int)state.eax;
4000090b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
4000090e:	c9                   	leave  
4000090f:	c3                   	ret    

40000910 <fread>:

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
40000910:	55                   	push   %ebp
40000911:	89 e5                	mov    %esp,%ebp
40000913:	83 ec 28             	sub    $0x28,%esp
    uint32_t res = frread(handle, dest, length);
40000916:	8b 45 10             	mov    0x10(%ebp),%eax
40000919:	89 44 24 08          	mov    %eax,0x8(%esp)
4000091d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000920:	89 44 24 04          	mov    %eax,0x4(%esp)
40000924:	8b 45 08             	mov    0x8(%ebp),%eax
40000927:	89 04 24             	mov    %eax,(%esp)
4000092a:	e8 a4 ff ff ff       	call   400008d3 <frread>
4000092f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(res == RW_BLOCK) {
40000932:	eb 21                	jmp    40000955 <fread+0x45>
        yield();
40000934:	e8 65 fa ff ff       	call   4000039e <yield>
        res = frread(handle, dest, length);
40000939:	8b 45 10             	mov    0x10(%ebp),%eax
4000093c:	89 44 24 08          	mov    %eax,0x8(%esp)
40000940:	8b 45 0c             	mov    0xc(%ebp),%eax
40000943:	89 44 24 04          	mov    %eax,0x4(%esp)
40000947:	8b 45 08             	mov    0x8(%ebp),%eax
4000094a:	89 04 24             	mov    %eax,(%esp)
4000094d:	e8 81 ff ff ff       	call   400008d3 <frread>
40000952:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

uint32_t fread(uint32_t handle, void* dest, uint32_t length) {
    uint32_t res = frread(handle, dest, length);

    while(res == RW_BLOCK) {
40000955:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
40000959:	74 d9                	je     40000934 <fread+0x24>
        yield();
        res = frread(handle, dest, length);
    }

    printrwerror(handle, res);
4000095b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000095e:	89 44 24 04          	mov    %eax,0x4(%esp)
40000962:	8b 45 08             	mov    0x8(%ebp),%eax
40000965:	89 04 24             	mov    %eax,(%esp)
40000968:	e8 5b fe ff ff       	call   400007c8 <printrwerror>

    return res;
4000096d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000970:	c9                   	leave  
40000971:	c3                   	ret    

40000972 <fmkfifo>:

HANDLE fmkfifo(char* path) {
40000972:	55                   	push   %ebp
40000973:	89 e5                	mov    %esp,%ebp
40000975:	83 ec 38             	sub    $0x38,%esp
    struct regstate state = {
40000978:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
      .eax = 14,
      .ebx = (uint32_t)path,
4000097f:	8b 45 08             	mov    0x8(%ebp),%eax

    return res;
}

HANDLE fmkfifo(char* path) {
    struct regstate state = {
40000982:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000985:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000098c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000993:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000099a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
      .edx = 0,
      .esi = 0,
      .edi = 0
    };

    syscall(&state);
400009a1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400009a4:	89 04 24             	mov    %eax,(%esp)
400009a7:	e8 af 0d 00 00       	call   4000175b <syscall>

    return (HANDLE)state.eax;
400009ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400009af:	c9                   	leave  
400009b0:	c3                   	ret    

400009b1 <resolveHandle>:

static HANDLE resolveHandle(HANDLE hdl) {
400009b1:	55                   	push   %ebp
400009b2:	89 e5                	mov    %esp,%ebp
400009b4:	83 ec 18             	sub    $0x18,%esp
    if(hdl < 0xFFF) {
400009b7:	81 7d 08 fe 0f 00 00 	cmpl   $0xffe,0x8(%ebp)
400009be:	77 0e                	ja     400009ce <resolveHandle+0x1d>
        hdl = getpmhandle(hdl);
400009c0:	8b 45 08             	mov    0x8(%ebp),%eax
400009c3:	89 04 24             	mov    %eax,(%esp)
400009c6:	e8 76 fc ff ff       	call   40000641 <getpmhandle>
400009cb:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    return hdl;
400009ce:	8b 45 08             	mov    0x8(%ebp),%eax
}
400009d1:	c9                   	leave  
400009d2:	c3                   	ret    

400009d3 <fgetc>:

char fgetc(HANDLE hdl) {
400009d3:	55                   	push   %ebp
400009d4:	89 e5                	mov    %esp,%ebp
400009d6:	83 ec 28             	sub    $0x28,%esp
    hdl = resolveHandle(hdl);
400009d9:	8b 45 08             	mov    0x8(%ebp),%eax
400009dc:	89 04 24             	mov    %eax,(%esp)
400009df:	e8 cd ff ff ff       	call   400009b1 <resolveHandle>
400009e4:	89 45 08             	mov    %eax,0x8(%ebp)
    char in = 0;
400009e7:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
    if(hdl != 0) {
400009eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
400009ef:	74 1a                	je     40000a0b <fgetc+0x38>
        fread(hdl, &in, sizeof(char));
400009f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
400009f8:	00 
400009f9:	8d 45 f7             	lea    -0x9(%ebp),%eax
400009fc:	89 44 24 04          	mov    %eax,0x4(%esp)
40000a00:	8b 45 08             	mov    0x8(%ebp),%eax
40000a03:	89 04 24             	mov    %eax,(%esp)
40000a06:	e8 05 ff ff ff       	call   40000910 <fread>
    }
    return in;
40000a0b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
40000a0f:	c9                   	leave  
40000a10:	c3                   	ret    

40000a11 <fgets>:

char* fgets(char* str, int num, HANDLE hdl) {
40000a11:	55                   	push   %ebp
40000a12:	89 e5                	mov    %esp,%ebp
40000a14:	53                   	push   %ebx
40000a15:	83 ec 24             	sub    $0x24,%esp
    for(int n = 0; n < (num - 1); n++) {
40000a18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000a1f:	eb 3d                	jmp    40000a5e <fgets+0x4d>
        str[n] = fgetc(hdl);
40000a21:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a24:	8b 45 08             	mov    0x8(%ebp),%eax
40000a27:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
40000a2a:	8b 45 10             	mov    0x10(%ebp),%eax
40000a2d:	89 04 24             	mov    %eax,(%esp)
40000a30:	e8 9e ff ff ff       	call   400009d3 <fgetc>
40000a35:	88 03                	mov    %al,(%ebx)
        if(str[n] == 0 || str[n] == '\0') {
40000a37:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a3a:	8b 45 08             	mov    0x8(%ebp),%eax
40000a3d:	01 d0                	add    %edx,%eax
40000a3f:	0f b6 00             	movzbl (%eax),%eax
40000a42:	84 c0                	test   %al,%al
40000a44:	74 0f                	je     40000a55 <fgets+0x44>
40000a46:	8b 55 f4             	mov    -0xc(%ebp),%edx
40000a49:	8b 45 08             	mov    0x8(%ebp),%eax
40000a4c:	01 d0                	add    %edx,%eax
40000a4e:	0f b6 00             	movzbl (%eax),%eax
40000a51:	84 c0                	test   %al,%al
40000a53:	75 05                	jne    40000a5a <fgets+0x49>
            return str;
40000a55:	8b 45 08             	mov    0x8(%ebp),%eax
40000a58:	eb 1d                	jmp    40000a77 <fgets+0x66>
    }
    return in;
}

char* fgets(char* str, int num, HANDLE hdl) {
    for(int n = 0; n < (num - 1); n++) {
40000a5a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
40000a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
40000a61:	83 e8 01             	sub    $0x1,%eax
40000a64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40000a67:	7f b8                	jg     40000a21 <fgets+0x10>
        if(str[n] == 0 || str[n] == '\0') {
            return str;
        }
    }

    str[num] = '\0';
40000a69:	8b 55 0c             	mov    0xc(%ebp),%edx
40000a6c:	8b 45 08             	mov    0x8(%ebp),%eax
40000a6f:	01 d0                	add    %edx,%eax
40000a71:	c6 00 00             	movb   $0x0,(%eax)
    return str;
40000a74:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000a77:	83 c4 24             	add    $0x24,%esp
40000a7a:	5b                   	pop    %ebx
40000a7b:	5d                   	pop    %ebp
40000a7c:	c3                   	ret    

40000a7d <getc>:

char getc(HANDLE hdl) {
40000a7d:	55                   	push   %ebp
40000a7e:	89 e5                	mov    %esp,%ebp
40000a80:	83 ec 18             	sub    $0x18,%esp
    return fgetc(hdl);
40000a83:	8b 45 08             	mov    0x8(%ebp),%eax
40000a86:	89 04 24             	mov    %eax,(%esp)
40000a89:	e8 45 ff ff ff       	call   400009d3 <fgetc>
}
40000a8e:	c9                   	leave  
40000a8f:	c3                   	ret    

40000a90 <getchar>:

char getchar() {
40000a90:	55                   	push   %ebp
40000a91:	89 e5                	mov    %esp,%ebp
40000a93:	83 ec 18             	sub    $0x18,%esp
    return fgetc(PMID_STDIN);
40000a96:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000a9d:	e8 31 ff ff ff       	call   400009d3 <fgetc>
}
40000aa2:	c9                   	leave  
40000aa3:	c3                   	ret    

40000aa4 <getln>:

char* getln(char* str) {
40000aa4:	55                   	push   %ebp
40000aa5:	89 e5                	mov    %esp,%ebp
40000aa7:	83 ec 28             	sub    $0x28,%esp
    uint32_t index = 0;
40000aaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    char lastChar = 0;
40000ab1:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)

    while((lastChar = fgetc(PMID_STDIN))) {
40000ab5:	eb 5b                	jmp    40000b12 <getln+0x6e>
        if(lastChar == '\n') {
40000ab7:	80 7d f3 0a          	cmpb   $0xa,-0xd(%ebp)
40000abb:	75 0e                	jne    40000acb <getln+0x27>
            putchar('\n');
40000abd:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
40000ac4:	e8 b4 00 00 00       	call   40000b7d <putchar>
            break;
40000ac9:	eb 5c                	jmp    40000b27 <getln+0x83>
        }

        if(lastChar == 8) {
40000acb:	80 7d f3 08          	cmpb   $0x8,-0xd(%ebp)
40000acf:	75 23                	jne    40000af4 <getln+0x50>
            if(index != 0) {
40000ad1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40000ad5:	74 10                	je     40000ae7 <getln+0x43>
                index--;
40000ad7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
                putchar(8);
40000adb:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
40000ae2:	e8 96 00 00 00       	call   40000b7d <putchar>
            }
            str[index] = 0;
40000ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000aea:	8b 55 08             	mov    0x8(%ebp),%edx
40000aed:	01 d0                	add    %edx,%eax
40000aef:	c6 00 00             	movb   $0x0,(%eax)
            continue;
40000af2:	eb 1e                	jmp    40000b12 <getln+0x6e>
        }

        str[index] = lastChar;
40000af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000af7:	8b 55 08             	mov    0x8(%ebp),%edx
40000afa:	01 c2                	add    %eax,%edx
40000afc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
40000b00:	88 02                	mov    %al,(%edx)
        putchar(lastChar);
40000b02:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
40000b06:	89 04 24             	mov    %eax,(%esp)
40000b09:	e8 6f 00 00 00       	call   40000b7d <putchar>

        index++;
40000b0e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

char* getln(char* str) {
    uint32_t index = 0;
    char lastChar = 0;

    while((lastChar = fgetc(PMID_STDIN))) {
40000b12:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
40000b19:	e8 b5 fe ff ff       	call   400009d3 <fgetc>
40000b1e:	88 45 f3             	mov    %al,-0xd(%ebp)
40000b21:	80 7d f3 00          	cmpb   $0x0,-0xd(%ebp)
40000b25:	75 90                	jne    40000ab7 <getln+0x13>
        putchar(lastChar);

        index++;
    }

    str[index] = 0;
40000b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000b2a:	8b 55 08             	mov    0x8(%ebp),%edx
40000b2d:	01 d0                	add    %edx,%eax
40000b2f:	c6 00 00             	movb   $0x0,(%eax)

    return str;
40000b32:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000b35:	c9                   	leave  
40000b36:	c3                   	ret    

40000b37 <kputc>:

static int kputc(char c) {
40000b37:	55                   	push   %ebp
40000b38:	89 e5                	mov    %esp,%ebp
40000b3a:	83 ec 38             	sub    $0x38,%esp
40000b3d:	8b 45 08             	mov    0x8(%ebp),%eax
40000b40:	88 45 d4             	mov    %al,-0x2c(%ebp)
  struct regstate state = {
40000b43:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
    .eax = 201,
    .ebx = (uint32_t)c,
40000b4a:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax

    return str;
}

static int kputc(char c) {
  struct regstate state = {
40000b4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000b51:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000b58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000b5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000b66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000b6d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000b70:	89 04 24             	mov    %eax,(%esp)
40000b73:	e8 e3 0b 00 00       	call   4000175b <syscall>
  
  return state.eax;
40000b78:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000b7b:	c9                   	leave  
40000b7c:	c3                   	ret    

40000b7d <putchar>:

int putchar(char c) {
40000b7d:	55                   	push   %ebp
40000b7e:	89 e5                	mov    %esp,%ebp
40000b80:	83 ec 18             	sub    $0x18,%esp
40000b83:	8b 45 08             	mov    0x8(%ebp),%eax
40000b86:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, PMID_STDOUT);
40000b89:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000b8d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000b94:	00 
40000b95:	89 04 24             	mov    %eax,(%esp)
40000b98:	e8 23 00 00 00       	call   40000bc0 <fputc>
}
40000b9d:	c9                   	leave  
40000b9e:	c3                   	ret    

40000b9f <putc>:

int putc(char c, HANDLE hdl) {
40000b9f:	55                   	push   %ebp
40000ba0:	89 e5                	mov    %esp,%ebp
40000ba2:	83 ec 18             	sub    $0x18,%esp
40000ba5:	8b 45 08             	mov    0x8(%ebp),%eax
40000ba8:	88 45 f4             	mov    %al,-0xc(%ebp)
    return fputc(c, hdl);
40000bab:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
40000baf:	8b 55 0c             	mov    0xc(%ebp),%edx
40000bb2:	89 54 24 04          	mov    %edx,0x4(%esp)
40000bb6:	89 04 24             	mov    %eax,(%esp)
40000bb9:	e8 02 00 00 00       	call   40000bc0 <fputc>
}
40000bbe:	c9                   	leave  
40000bbf:	c3                   	ret    

40000bc0 <fputc>:

int fputc(char c, HANDLE hdl) {
40000bc0:	55                   	push   %ebp
40000bc1:	89 e5                	mov    %esp,%ebp
40000bc3:	83 ec 18             	sub    $0x18,%esp
40000bc6:	8b 45 08             	mov    0x8(%ebp),%eax
40000bc9:	88 45 f4             	mov    %al,-0xc(%ebp)
    hdl = resolveHandle(hdl);
40000bcc:	8b 45 0c             	mov    0xc(%ebp),%eax
40000bcf:	89 04 24             	mov    %eax,(%esp)
40000bd2:	e8 da fd ff ff       	call   400009b1 <resolveHandle>
40000bd7:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000bda:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000bde:	74 1c                	je     40000bfc <fputc+0x3c>
        return fwrite(hdl, &c, sizeof(char));
40000be0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
40000be7:	00 
40000be8:	8d 45 f4             	lea    -0xc(%ebp),%eax
40000beb:	89 44 24 04          	mov    %eax,0x4(%esp)
40000bef:	8b 45 0c             	mov    0xc(%ebp),%eax
40000bf2:	89 04 24             	mov    %eax,(%esp)
40000bf5:	e8 77 fc ff ff       	call   40000871 <fwrite>
40000bfa:	eb 0f                	jmp    40000c0b <fputc+0x4b>
    }
    return kputc(c);
40000bfc:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
40000c00:	0f be c0             	movsbl %al,%eax
40000c03:	89 04 24             	mov    %eax,(%esp)
40000c06:	e8 2c ff ff ff       	call   40000b37 <kputc>
}
40000c0b:	c9                   	leave  
40000c0c:	c3                   	ret    

40000c0d <kputs>:

static int kputs(const char* cp) {
40000c0d:	55                   	push   %ebp
40000c0e:	89 e5                	mov    %esp,%ebp
40000c10:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40000c13:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
    .eax = 202,
    .ebx = (uint32_t)cp,
40000c1a:	8b 45 08             	mov    0x8(%ebp),%eax
    }
    return kputc(c);
}

static int kputs(const char* cp) {
  struct regstate state = {
40000c1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000c20:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000c27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000c2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000c35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);
40000c3c:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000c3f:	89 04 24             	mov    %eax,(%esp)
40000c42:	e8 14 0b 00 00       	call   4000175b <syscall>
  
  return state.eax;
40000c47:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
40000c4a:	c9                   	leave  
40000c4b:	c3                   	ret    

40000c4c <puts>:

int puts(const char* c) {
40000c4c:	55                   	push   %ebp
40000c4d:	89 e5                	mov    %esp,%ebp
40000c4f:	83 ec 18             	sub    $0x18,%esp
    return fputs(c, PMID_STDOUT);
40000c52:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
40000c59:	00 
40000c5a:	8b 45 08             	mov    0x8(%ebp),%eax
40000c5d:	89 04 24             	mov    %eax,(%esp)
40000c60:	e8 02 00 00 00       	call   40000c67 <fputs>
}
40000c65:	c9                   	leave  
40000c66:	c3                   	ret    

40000c67 <fputs>:

int fputs(const char* c, HANDLE hdl) {
40000c67:	55                   	push   %ebp
40000c68:	89 e5                	mov    %esp,%ebp
40000c6a:	83 ec 18             	sub    $0x18,%esp
    hdl = resolveHandle(hdl);
40000c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c70:	89 04 24             	mov    %eax,(%esp)
40000c73:	e8 39 fd ff ff       	call   400009b1 <resolveHandle>
40000c78:	89 45 0c             	mov    %eax,0xc(%ebp)
    if(hdl != 0) {
40000c7b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000c7f:	74 23                	je     40000ca4 <fputs+0x3d>
        return fwrite(hdl, c, strlen(c));
40000c81:	8b 45 08             	mov    0x8(%ebp),%eax
40000c84:	89 04 24             	mov    %eax,(%esp)
40000c87:	e8 68 03 00 00       	call   40000ff4 <strlen>
40000c8c:	89 44 24 08          	mov    %eax,0x8(%esp)
40000c90:	8b 45 08             	mov    0x8(%ebp),%eax
40000c93:	89 44 24 04          	mov    %eax,0x4(%esp)
40000c97:	8b 45 0c             	mov    0xc(%ebp),%eax
40000c9a:	89 04 24             	mov    %eax,(%esp)
40000c9d:	e8 cf fb ff ff       	call   40000871 <fwrite>
40000ca2:	eb 0b                	jmp    40000caf <fputs+0x48>
    }
    return kputs(c);
40000ca4:	8b 45 08             	mov    0x8(%ebp),%eax
40000ca7:	89 04 24             	mov    %eax,(%esp)
40000caa:	e8 5e ff ff ff       	call   40000c0d <kputs>
}
40000caf:	c9                   	leave  
40000cb0:	c3                   	ret    

40000cb1 <putn>:

static int putn(unsigned long x, int base)
{
40000cb1:	55                   	push   %ebp
40000cb2:	89 e5                	mov    %esp,%ebp
40000cb4:	53                   	push   %ebx
40000cb5:	83 ec 64             	sub    $0x64,%esp
  char buf[65];
  const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
40000cb8:	c7 45 ec a8 31 00 40 	movl   $0x400031a8,-0x14(%ebp)
  char* p;
  int wrt = 0;
40000cbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  if (base > 36) {
40000cc6:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
40000cca:	7e 07                	jle    40000cd3 <putn+0x22>
    return 0;
40000ccc:	b8 00 00 00 00       	mov    $0x0,%eax
40000cd1:	eb 55                	jmp    40000d28 <putn+0x77>
  }

  p = buf + 64;
40000cd3:	8d 45 ab             	lea    -0x55(%ebp),%eax
40000cd6:	83 c0 40             	add    $0x40,%eax
40000cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  *p = '\0';
40000cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000cdf:	c6 00 00             	movb   $0x0,(%eax)
  do {
    wrt++;
40000ce2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    *--p = digits[x % base];
40000ce6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
40000cea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000ced:	8b 45 08             	mov    0x8(%ebp),%eax
40000cf0:	ba 00 00 00 00       	mov    $0x0,%edx
40000cf5:	f7 f1                	div    %ecx
40000cf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000cfa:	01 d0                	add    %edx,%eax
40000cfc:	0f b6 10             	movzbl (%eax),%edx
40000cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d02:	88 10                	mov    %dl,(%eax)
    x /= base;
40000d04:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d07:	8b 45 08             	mov    0x8(%ebp),%eax
40000d0a:	ba 00 00 00 00       	mov    $0x0,%edx
40000d0f:	f7 f3                	div    %ebx
40000d11:	89 45 08             	mov    %eax,0x8(%ebp)
  } while (x);
40000d14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000d18:	75 c8                	jne    40000ce2 <putn+0x31>
  puts(p);
40000d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000d1d:	89 04 24             	mov    %eax,(%esp)
40000d20:	e8 27 ff ff ff       	call   40000c4c <puts>
  
  return wrt;
40000d25:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
40000d28:	83 c4 64             	add    $0x64,%esp
40000d2b:	5b                   	pop    %ebx
40000d2c:	5d                   	pop    %ebp
40000d2d:	c3                   	ret    

40000d2e <printf>:

int printf(const char* fmt, ...)
{
40000d2e:	55                   	push   %ebp
40000d2f:	89 e5                	mov    %esp,%ebp
40000d31:	83 ec 38             	sub    $0x38,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;
	int wrt = 0;
40000d34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  va_start(ap, fmt);
40000d3b:	8d 45 0c             	lea    0xc(%ebp),%eax
40000d3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  while (*fmt) {
40000d41:	e9 42 01 00 00       	jmp    40000e88 <printf+0x15a>
    if (*fmt == '%') {
40000d46:	8b 45 08             	mov    0x8(%ebp),%eax
40000d49:	0f b6 00             	movzbl (%eax),%eax
40000d4c:	3c 25                	cmp    $0x25,%al
40000d4e:	0f 85 1c 01 00 00    	jne    40000e70 <printf+0x142>
      fmt++;
40000d54:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
40000d58:	8b 45 08             	mov    0x8(%ebp),%eax
40000d5b:	0f b6 00             	movzbl (%eax),%eax
40000d5e:	0f be c0             	movsbl %al,%eax
40000d61:	83 f8 64             	cmp    $0x64,%eax
40000d64:	74 68                	je     40000dce <printf+0xa0>
40000d66:	83 f8 64             	cmp    $0x64,%eax
40000d69:	7f 1f                	jg     40000d8a <printf+0x5c>
40000d6b:	83 f8 25             	cmp    $0x25,%eax
40000d6e:	0f 84 c5 00 00 00    	je     40000e39 <printf+0x10b>
40000d74:	83 f8 63             	cmp    $0x63,%eax
40000d77:	0f 84 9d 00 00 00    	je     40000e1a <printf+0xec>
40000d7d:	85 c0                	test   %eax,%eax
40000d7f:	0f 84 13 01 00 00    	je     40000e98 <printf+0x16a>
40000d85:	e9 c0 00 00 00       	jmp    40000e4a <printf+0x11c>
40000d8a:	83 f8 73             	cmp    $0x73,%eax
40000d8d:	74 1e                	je     40000dad <printf+0x7f>
40000d8f:	83 f8 73             	cmp    $0x73,%eax
40000d92:	7f 0a                	jg     40000d9e <printf+0x70>
40000d94:	83 f8 70             	cmp    $0x70,%eax
40000d97:	74 5b                	je     40000df4 <printf+0xc6>
40000d99:	e9 ac 00 00 00       	jmp    40000e4a <printf+0x11c>
40000d9e:	83 f8 75             	cmp    $0x75,%eax
40000da1:	74 2b                	je     40000dce <printf+0xa0>
40000da3:	83 f8 78             	cmp    $0x78,%eax
40000da6:	74 4c                	je     40000df4 <printf+0xc6>
40000da8:	e9 9d 00 00 00       	jmp    40000e4a <printf+0x11c>
        case 's':
          s = va_arg(ap, char*);
40000dad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000db0:	8d 50 04             	lea    0x4(%eax),%edx
40000db3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000db6:	8b 00                	mov    (%eax),%eax
40000db8:	89 45 f0             	mov    %eax,-0x10(%ebp)
          wrt += puts(s);
40000dbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
40000dbe:	89 04 24             	mov    %eax,(%esp)
40000dc1:	e8 86 fe ff ff       	call   40000c4c <puts>
40000dc6:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000dc9:	e9 a0 00 00 00       	jmp    40000e6e <printf+0x140>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
40000dce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000dd1:	8d 50 04             	lea    0x4(%eax),%edx
40000dd4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000dd7:	8b 00                	mov    (%eax),%eax
40000dd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 10);
40000ddc:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
40000de3:	00 
40000de4:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000de7:	89 04 24             	mov    %eax,(%esp)
40000dea:	e8 c2 fe ff ff       	call   40000cb1 <putn>
40000def:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000df2:	eb 7a                	jmp    40000e6e <printf+0x140>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
40000df4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000df7:	8d 50 04             	lea    0x4(%eax),%edx
40000dfa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000dfd:	8b 00                	mov    (%eax),%eax
40000dff:	89 45 ec             	mov    %eax,-0x14(%ebp)
          wrt += putn(n, 16);
40000e02:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
40000e09:	00 
40000e0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
40000e0d:	89 04 24             	mov    %eax,(%esp)
40000e10:	e8 9c fe ff ff       	call   40000cb1 <putn>
40000e15:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e18:	eb 54                	jmp    40000e6e <printf+0x140>
        case 'c':
          c = va_arg(ap, int);
40000e1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40000e1d:	8d 50 04             	lea    0x4(%eax),%edx
40000e20:	89 55 e4             	mov    %edx,-0x1c(%ebp)
40000e23:	8b 00                	mov    (%eax),%eax
40000e25:	88 45 eb             	mov    %al,-0x15(%ebp)
          wrt += putchar(c);
40000e28:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
40000e2c:	89 04 24             	mov    %eax,(%esp)
40000e2f:	e8 49 fd ff ff       	call   40000b7d <putchar>
40000e34:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e37:	eb 35                	jmp    40000e6e <printf+0x140>
        case '%':
          wrt += putchar('%');
40000e39:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000e40:	e8 38 fd ff ff       	call   40000b7d <putchar>
40000e45:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e48:	eb 24                	jmp    40000e6e <printf+0x140>
        case '\0':
          goto out;
        default:
          wrt += putchar('%');
40000e4a:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
40000e51:	e8 27 fd ff ff       	call   40000b7d <putchar>
40000e56:	01 45 f4             	add    %eax,-0xc(%ebp)
          wrt += putchar(*fmt);
40000e59:	8b 45 08             	mov    0x8(%ebp),%eax
40000e5c:	0f b6 00             	movzbl (%eax),%eax
40000e5f:	0f be c0             	movsbl %al,%eax
40000e62:	89 04 24             	mov    %eax,(%esp)
40000e65:	e8 13 fd ff ff       	call   40000b7d <putchar>
40000e6a:	01 45 f4             	add    %eax,-0xc(%ebp)
          break;
40000e6d:	90                   	nop
40000e6e:	eb 14                	jmp    40000e84 <printf+0x156>
      }
    } else {
      wrt += putchar(*fmt);
40000e70:	8b 45 08             	mov    0x8(%ebp),%eax
40000e73:	0f b6 00             	movzbl (%eax),%eax
40000e76:	0f be c0             	movsbl %al,%eax
40000e79:	89 04 24             	mov    %eax,(%esp)
40000e7c:	e8 fc fc ff ff       	call   40000b7d <putchar>
40000e81:	01 45 f4             	add    %eax,-0xc(%ebp)
    }

    fmt++;
40000e84:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;
	int wrt = 0;

  va_start(ap, fmt);
  while (*fmt) {
40000e88:	8b 45 08             	mov    0x8(%ebp),%eax
40000e8b:	0f b6 00             	movzbl (%eax),%eax
40000e8e:	84 c0                	test   %al,%al
40000e90:	0f 85 b0 fe ff ff    	jne    40000d46 <printf+0x18>
40000e96:	eb 01                	jmp    40000e99 <printf+0x16b>
          break;
        case '%':
          wrt += putchar('%');
          break;
        case '\0':
          goto out;
40000e98:	90                   	nop
  }

out:
  va_end(ap);

  return wrt;
40000e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40000e9c:	c9                   	leave  
40000e9d:	c3                   	ret    

40000e9e <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
40000e9e:	55                   	push   %ebp
40000e9f:	89 e5                	mov    %esp,%ebp
40000ea1:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
40000ea4:	8b 45 08             	mov    0x8(%ebp),%eax
40000ea7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
40000eaa:	eb 0e                	jmp    40000eba <memset+0x1c>
        *p++ = c;
40000eac:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000eaf:	8d 50 01             	lea    0x1(%eax),%edx
40000eb2:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000eb5:	8b 55 0c             	mov    0xc(%ebp),%edx
40000eb8:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
40000eba:	8b 45 10             	mov    0x10(%ebp),%eax
40000ebd:	8d 50 ff             	lea    -0x1(%eax),%edx
40000ec0:	89 55 10             	mov    %edx,0x10(%ebp)
40000ec3:	85 c0                	test   %eax,%eax
40000ec5:	75 e5                	jne    40000eac <memset+0xe>
        *p++ = c;
    }

    return buf;
40000ec7:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000eca:	c9                   	leave  
40000ecb:	c3                   	ret    

40000ecc <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
40000ecc:	55                   	push   %ebp
40000ecd:	89 e5                	mov    %esp,%ebp
40000ecf:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
40000ed2:	8b 45 08             	mov    0x8(%ebp),%eax
40000ed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
40000ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
40000edb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
40000ede:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000ee2:	75 07                	jne    40000eeb <memcpy+0x1f>
40000ee4:	b8 00 00 00 00       	mov    $0x0,%eax
40000ee9:	eb 29                	jmp    40000f14 <memcpy+0x48>

    while (n--) {
40000eeb:	eb 17                	jmp    40000f04 <memcpy+0x38>
        *(d++) = *(s++);
40000eed:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000ef0:	8d 50 01             	lea    0x1(%eax),%edx
40000ef3:	89 55 fc             	mov    %edx,-0x4(%ebp)
40000ef6:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000ef9:	8d 4a 01             	lea    0x1(%edx),%ecx
40000efc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
40000eff:	0f b6 12             	movzbl (%edx),%edx
40000f02:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
40000f04:	8b 45 10             	mov    0x10(%ebp),%eax
40000f07:	8d 50 ff             	lea    -0x1(%eax),%edx
40000f0a:	89 55 10             	mov    %edx,0x10(%ebp)
40000f0d:	85 c0                	test   %eax,%eax
40000f0f:	75 dc                	jne    40000eed <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
40000f11:	8b 45 08             	mov    0x8(%ebp),%eax
}
40000f14:	c9                   	leave  
40000f15:	c3                   	ret    

40000f16 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
40000f16:	55                   	push   %ebp
40000f17:	89 e5                	mov    %esp,%ebp
40000f19:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
40000f1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000f20:	75 07                	jne    40000f29 <memcmp+0x13>
        return -1;
40000f22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
40000f27:	eb 7c                	jmp    40000fa5 <memcmp+0x8f>
    if (ptr2 == 0)
40000f29:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
40000f2d:	75 07                	jne    40000f36 <memcmp+0x20>
        return 1;
40000f2f:	b8 01 00 00 00       	mov    $0x1,%eax
40000f34:	eb 6f                	jmp    40000fa5 <memcmp+0x8f>
    if (num == 0)
40000f36:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
40000f3a:	75 07                	jne    40000f43 <memcmp+0x2d>
        return 0;
40000f3c:	b8 00 00 00 00       	mov    $0x0,%eax
40000f41:	eb 62                	jmp    40000fa5 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
40000f43:	8b 45 08             	mov    0x8(%ebp),%eax
40000f46:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
40000f49:	8b 45 0c             	mov    0xc(%ebp),%eax
40000f4c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
40000f4f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
40000f56:	eb 40                	jmp    40000f98 <memcmp+0x82>
        if (pa[i] != pb[i]) {
40000f58:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f5b:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000f5e:	01 d0                	add    %edx,%eax
40000f60:	0f b6 10             	movzbl (%eax),%edx
40000f63:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f66:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000f69:	01 c8                	add    %ecx,%eax
40000f6b:	0f b6 00             	movzbl (%eax),%eax
40000f6e:	38 c2                	cmp    %al,%dl
40000f70:	74 22                	je     40000f94 <memcmp+0x7e>
            return pa[i] - pb[i];
40000f72:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f75:	8b 55 f8             	mov    -0x8(%ebp),%edx
40000f78:	01 d0                	add    %edx,%eax
40000f7a:	0f b6 00             	movzbl (%eax),%eax
40000f7d:	0f b6 d0             	movzbl %al,%edx
40000f80:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f83:	8b 4d f4             	mov    -0xc(%ebp),%ecx
40000f86:	01 c8                	add    %ecx,%eax
40000f88:	0f b6 00             	movzbl (%eax),%eax
40000f8b:	0f b6 c0             	movzbl %al,%eax
40000f8e:	29 c2                	sub    %eax,%edx
40000f90:	89 d0                	mov    %edx,%eax
40000f92:	eb 11                	jmp    40000fa5 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
40000f94:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40000f98:	8b 45 fc             	mov    -0x4(%ebp),%eax
40000f9b:	3b 45 10             	cmp    0x10(%ebp),%eax
40000f9e:	72 b8                	jb     40000f58 <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
40000fa0:	b8 00 00 00 00       	mov    $0x0,%eax
}
40000fa5:	c9                   	leave  
40000fa6:	c3                   	ret    

40000fa7 <strcmp>:

int strcmp(const char* str1, const char* str2) {
40000fa7:	55                   	push   %ebp
40000fa8:	89 e5                	mov    %esp,%ebp
40000faa:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
40000fad:	8b 45 08             	mov    0x8(%ebp),%eax
40000fb0:	89 04 24             	mov    %eax,(%esp)
40000fb3:	e8 3c 00 00 00       	call   40000ff4 <strlen>
40000fb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
40000fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
40000fbe:	89 04 24             	mov    %eax,(%esp)
40000fc1:	e8 2e 00 00 00       	call   40000ff4 <strlen>
40000fc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
40000fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000fcc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
40000fcf:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
40000fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
40000fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
40000fd9:	83 c0 01             	add    $0x1,%eax
40000fdc:	89 44 24 08          	mov    %eax,0x8(%esp)
40000fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
40000fe3:	89 44 24 04          	mov    %eax,0x4(%esp)
40000fe7:	8b 45 08             	mov    0x8(%ebp),%eax
40000fea:	89 04 24             	mov    %eax,(%esp)
40000fed:	e8 24 ff ff ff       	call   40000f16 <memcmp>
}
40000ff2:	c9                   	leave  
40000ff3:	c3                   	ret    

40000ff4 <strlen>:

unsigned int strlen(const char* str) {
40000ff4:	55                   	push   %ebp
40000ff5:	89 e5                	mov    %esp,%ebp
40000ff7:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
40000ffa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000ffe:	75 07                	jne    40001007 <strlen+0x13>
        return 0;
40001000:	b8 00 00 00 00       	mov    $0x0,%eax
40001005:	eb 1f                	jmp    40001026 <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
40001007:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000100e:	eb 04                	jmp    40001014 <strlen+0x20>
40001010:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
40001014:	8b 55 fc             	mov    -0x4(%ebp),%edx
40001017:	8b 45 08             	mov    0x8(%ebp),%eax
4000101a:	01 d0                	add    %edx,%eax
4000101c:	0f b6 00             	movzbl (%eax),%eax
4000101f:	84 c0                	test   %al,%al
40001021:	75 ed                	jne    40001010 <strlen+0x1c>
        ;
    return i;
40001023:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
40001026:	c9                   	leave  
40001027:	c3                   	ret    

40001028 <strcpy>:

char* strcpy(char* dest, const char* src) {
40001028:	55                   	push   %ebp
40001029:	89 e5                	mov    %esp,%ebp
4000102b:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
4000102e:	8b 45 0c             	mov    0xc(%ebp),%eax
40001031:	89 04 24             	mov    %eax,(%esp)
40001034:	e8 bb ff ff ff       	call   40000ff4 <strlen>
40001039:	83 c0 01             	add    $0x1,%eax
4000103c:	89 44 24 08          	mov    %eax,0x8(%esp)
40001040:	8b 45 0c             	mov    0xc(%ebp),%eax
40001043:	89 44 24 04          	mov    %eax,0x4(%esp)
40001047:	8b 45 08             	mov    0x8(%ebp),%eax
4000104a:	89 04 24             	mov    %eax,(%esp)
4000104d:	e8 7a fe ff ff       	call   40000ecc <memcpy>
    return dest;
40001052:	8b 45 08             	mov    0x8(%ebp),%eax
}
40001055:	c9                   	leave  
40001056:	c3                   	ret    

40001057 <strclone>:

char* strclone(char* str) {
40001057:	55                   	push   %ebp
40001058:	89 e5                	mov    %esp,%ebp
4000105a:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
4000105d:	8b 45 08             	mov    0x8(%ebp),%eax
40001060:	89 04 24             	mov    %eax,(%esp)
40001063:	e8 8c ff ff ff       	call   40000ff4 <strlen>
40001068:	83 c0 01             	add    $0x1,%eax
4000106b:	89 04 24             	mov    %eax,(%esp)
4000106e:	e8 ab 03 00 00       	call   4000141e <malloc>
40001073:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
40001076:	8b 45 08             	mov    0x8(%ebp),%eax
40001079:	89 44 24 04          	mov    %eax,0x4(%esp)
4000107d:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001080:	89 04 24             	mov    %eax,(%esp)
40001083:	e8 a0 ff ff ff       	call   40001028 <strcpy>

    return ret;
40001088:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
4000108b:	c9                   	leave  
4000108c:	c3                   	ret    

4000108d <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
4000108d:	55                   	push   %ebp
4000108e:	89 e5                	mov    %esp,%ebp
40001090:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
40001093:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001097:	74 3c                	je     400010d5 <strtok+0x48>
        if(fr != 0) {
40001099:	a1 04 42 00 40       	mov    0x40004204,%eax
4000109e:	85 c0                	test   %eax,%eax
400010a0:	74 0d                	je     400010af <strtok+0x22>
            free(fr);
400010a2:	a1 04 42 00 40       	mov    0x40004204,%eax
400010a7:	89 04 24             	mov    %eax,(%esp)
400010aa:	e8 ac 05 00 00       	call   4000165b <free>
        }
        fr = strclone(str);
400010af:	8b 45 08             	mov    0x8(%ebp),%eax
400010b2:	89 04 24             	mov    %eax,(%esp)
400010b5:	e8 9d ff ff ff       	call   40001057 <strclone>
400010ba:	a3 04 42 00 40       	mov    %eax,0x40004204
        return strtoknc(fr, delimiters);
400010bf:	a1 04 42 00 40       	mov    0x40004204,%eax
400010c4:	8b 55 0c             	mov    0xc(%ebp),%edx
400010c7:	89 54 24 04          	mov    %edx,0x4(%esp)
400010cb:	89 04 24             	mov    %eax,(%esp)
400010ce:	e8 17 00 00 00       	call   400010ea <strtoknc>
400010d3:	eb 13                	jmp    400010e8 <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
400010d5:	8b 45 0c             	mov    0xc(%ebp),%eax
400010d8:	89 44 24 04          	mov    %eax,0x4(%esp)
400010dc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
400010e3:	e8 02 00 00 00       	call   400010ea <strtoknc>
}
400010e8:	c9                   	leave  
400010e9:	c3                   	ret    

400010ea <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
400010ea:	55                   	push   %ebp
400010eb:	89 e5                	mov    %esp,%ebp
400010ed:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
400010f0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
400010f7:	8b 45 0c             	mov    0xc(%ebp),%eax
400010fa:	89 04 24             	mov    %eax,(%esp)
400010fd:	e8 f2 fe ff ff       	call   40000ff4 <strlen>
40001102:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
40001105:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001109:	75 0a                	jne    40001115 <strtoknc+0x2b>
        return 0;
4000110b:	b8 00 00 00 00       	mov    $0x0,%eax
40001110:	e9 ef 00 00 00       	jmp    40001204 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
40001115:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001119:	75 13                	jne    4000112e <strtoknc+0x44>
4000111b:	a1 00 42 00 40       	mov    0x40004200,%eax
40001120:	85 c0                	test   %eax,%eax
40001122:	75 0a                	jne    4000112e <strtoknc+0x44>
        return 0;
40001124:	b8 00 00 00 00       	mov    $0x0,%eax
40001129:	e9 d6 00 00 00       	jmp    40001204 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
4000112e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40001132:	74 08                	je     4000113c <strtoknc+0x52>
        sp = str;
40001134:	8b 45 08             	mov    0x8(%ebp),%eax
40001137:	a3 00 42 00 40       	mov    %eax,0x40004200
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
4000113c:	a1 00 42 00 40       	mov    0x40004200,%eax
40001141:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
40001144:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
4000114b:	eb 1f                	jmp    4000116c <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
4000114d:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001150:	0f b6 10             	movzbl (%eax),%edx
40001153:	8b 4d fc             	mov    -0x4(%ebp),%ecx
40001156:	8b 45 0c             	mov    0xc(%ebp),%eax
40001159:	01 c8                	add    %ecx,%eax
4000115b:	0f b6 00             	movzbl (%eax),%eax
4000115e:	38 c2                	cmp    %al,%dl
40001160:	75 06                	jne    40001168 <strtoknc+0x7e>
                p_start++;
40001162:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
40001166:	eb 0c                	jmp    40001174 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
40001168:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
4000116c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000116f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
40001172:	7c d9                	jl     4000114d <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
40001174:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001177:	3b 45 f4             	cmp    -0xc(%ebp),%eax
4000117a:	75 17                	jne    40001193 <strtoknc+0xa9>
            sp = p_start;
4000117c:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000117f:	a3 00 42 00 40       	mov    %eax,0x40004200
            break;
40001184:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
40001185:	a1 00 42 00 40       	mov    0x40004200,%eax
4000118a:	0f b6 00             	movzbl (%eax),%eax
4000118d:	84 c0                	test   %al,%al
4000118f:	75 15                	jne    400011a6 <strtoknc+0xbc>
40001191:	eb 02                	jmp    40001195 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
40001193:	eb af                	jmp    40001144 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
40001195:	c7 05 00 42 00 40 00 	movl   $0x0,0x40004200
4000119c:	00 00 00 
        return sp;
4000119f:	a1 00 42 00 40       	mov    0x40004200,%eax
400011a4:	eb 5e                	jmp    40001204 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400011a6:	eb 4d                	jmp    400011f5 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
400011a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
400011af:	eb 25                	jmp    400011d6 <strtoknc+0xec>
            if (*sp == delimiters[i]) {
400011b1:	a1 00 42 00 40       	mov    0x40004200,%eax
400011b6:	0f b6 10             	movzbl (%eax),%edx
400011b9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
400011bc:	8b 45 0c             	mov    0xc(%ebp),%eax
400011bf:	01 c8                	add    %ecx,%eax
400011c1:	0f b6 00             	movzbl (%eax),%eax
400011c4:	38 c2                	cmp    %al,%dl
400011c6:	75 0a                	jne    400011d2 <strtoknc+0xe8>
                *sp = '\0';
400011c8:	a1 00 42 00 40       	mov    0x40004200,%eax
400011cd:	c6 00 00             	movb   $0x0,(%eax)
                break;
400011d0:	eb 0c                	jmp    400011de <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
400011d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
400011d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400011dc:	7c d3                	jl     400011b1 <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
400011de:	a1 00 42 00 40       	mov    0x40004200,%eax
400011e3:	83 c0 01             	add    $0x1,%eax
400011e6:	a3 00 42 00 40       	mov    %eax,0x40004200
        if (i < len)
400011eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
400011ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
400011f1:	7d 02                	jge    400011f5 <strtoknc+0x10b>
            break;
400011f3:	eb 0c                	jmp    40001201 <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
400011f5:	a1 00 42 00 40       	mov    0x40004200,%eax
400011fa:	0f b6 00             	movzbl (%eax),%eax
400011fd:	84 c0                	test   %al,%al
400011ff:	75 a7                	jne    400011a8 <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
40001201:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
40001204:	c9                   	leave  
40001205:	c3                   	ret    

40001206 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
40001206:	55                   	push   %ebp
40001207:	89 e5                	mov    %esp,%ebp
40001209:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
4000120c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
40001213:	8b 45 08             	mov    0x8(%ebp),%eax
40001216:	8b 00                	mov    (%eax),%eax
40001218:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
4000121b:	eb 38                	jmp    40001255 <remove_from_list+0x4f>
        if (cur == element) {
4000121d:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001220:	3b 45 0c             	cmp    0xc(%ebp),%eax
40001223:	75 21                	jne    40001246 <remove_from_list+0x40>
            if (last == 0) {
40001225:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001229:	75 0d                	jne    40001238 <remove_from_list+0x32>
                *root = cur->next;
4000122b:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000122e:	8b 50 08             	mov    0x8(%eax),%edx
40001231:	8b 45 08             	mov    0x8(%ebp),%eax
40001234:	89 10                	mov    %edx,(%eax)
                return;
40001236:	eb 23                	jmp    4000125b <remove_from_list+0x55>
            } else {
                last->next = cur->next;
40001238:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000123b:	8b 50 08             	mov    0x8(%eax),%edx
4000123e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001241:	89 50 08             	mov    %edx,0x8(%eax)
                return;
40001244:	eb 15                	jmp    4000125b <remove_from_list+0x55>
            }
        }
        last = cur;
40001246:	8b 45 f8             	mov    -0x8(%ebp),%eax
40001249:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
4000124c:	8b 45 f8             	mov    -0x8(%ebp),%eax
4000124f:	8b 40 08             	mov    0x8(%eax),%eax
40001252:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
40001255:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
40001259:	75 c2                	jne    4000121d <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
4000125b:	c9                   	leave  
4000125c:	c3                   	ret    

4000125d <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
4000125d:	55                   	push   %ebp
4000125e:	89 e5                	mov    %esp,%ebp
    element->next = *root;
40001260:	8b 45 08             	mov    0x8(%ebp),%eax
40001263:	8b 10                	mov    (%eax),%edx
40001265:	8b 45 0c             	mov    0xc(%ebp),%eax
40001268:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
4000126b:	8b 45 08             	mov    0x8(%ebp),%eax
4000126e:	8b 55 0c             	mov    0xc(%ebp),%edx
40001271:	89 10                	mov    %edx,(%eax)
}
40001273:	5d                   	pop    %ebp
40001274:	c3                   	ret    

40001275 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
40001275:	55                   	push   %ebp
40001276:	89 e5                	mov    %esp,%ebp
40001278:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
4000127b:	8b 45 08             	mov    0x8(%ebp),%eax
4000127e:	8b 00                	mov    (%eax),%eax
40001280:	85 c0                	test   %eax,%eax
40001282:	75 07                	jne    4000128b <pop_from_list+0x16>
        return 0;
40001284:	b8 00 00 00 00       	mov    $0x0,%eax
40001289:	eb 1d                	jmp    400012a8 <pop_from_list+0x33>
    struct memory_node* pop = *root;
4000128b:	8b 45 08             	mov    0x8(%ebp),%eax
4000128e:	8b 00                	mov    (%eax),%eax
40001290:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
40001293:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001296:	89 44 24 04          	mov    %eax,0x4(%esp)
4000129a:	8b 45 08             	mov    0x8(%ebp),%eax
4000129d:	89 04 24             	mov    %eax,(%esp)
400012a0:	e8 61 ff ff ff       	call   40001206 <remove_from_list>
    return pop;
400012a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
400012a8:	c9                   	leave  
400012a9:	c3                   	ret    

400012aa <allocate_unused_nodes>:

static void allocate_unused_nodes() {
400012aa:	55                   	push   %ebp
400012ab:	89 e5                	mov    %esp,%ebp
400012ad:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
400012b0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
400012b7:	e8 e7 03 00 00       	call   400016a3 <vmm_alloc_cont>
400012bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
400012bf:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
400012c6:	00 
400012c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400012ce:	00 
400012cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012d2:	89 04 24             	mov    %eax,(%esp)
400012d5:	e8 c4 fb ff ff       	call   40000e9e <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
400012da:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
400012e1:	eb 27                	jmp    4000130a <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
400012e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
400012e6:	89 d0                	mov    %edx,%eax
400012e8:	01 c0                	add    %eax,%eax
400012ea:	01 d0                	add    %edx,%eax
400012ec:	c1 e0 02             	shl    $0x2,%eax
400012ef:	89 c2                	mov    %eax,%edx
400012f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
400012f4:	01 d0                	add    %edx,%eax
400012f6:	89 44 24 04          	mov    %eax,0x4(%esp)
400012fa:	c7 04 24 08 42 00 40 	movl   $0x40004208,(%esp)
40001301:	e8 57 ff ff ff       	call   4000125d <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
40001306:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
4000130a:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
40001311:	76 d0                	jbe    400012e3 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
40001313:	c9                   	leave  
40001314:	c3                   	ret    

40001315 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
40001315:	55                   	push   %ebp
40001316:	89 e5                	mov    %esp,%ebp
40001318:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
4000131b:	c7 04 24 08 42 00 40 	movl   $0x40004208,(%esp)
40001322:	e8 4e ff ff ff       	call   40001275 <pop_from_list>
40001327:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
4000132a:	eb 14                	jmp    40001340 <pop_unused_node+0x2b>
        allocate_unused_nodes();
4000132c:	e8 79 ff ff ff       	call   400012aa <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
40001331:	c7 04 24 08 42 00 40 	movl   $0x40004208,(%esp)
40001338:	e8 38 ff ff ff       	call   40001275 <pop_from_list>
4000133d:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
40001340:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001344:	74 e6                	je     4000132c <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
40001346:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
40001349:	c9                   	leave  
4000134a:	c3                   	ret    

4000134b <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
4000134b:	55                   	push   %ebp
4000134c:	89 e5                	mov    %esp,%ebp
4000134e:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
40001351:	8b 45 08             	mov    0x8(%ebp),%eax
40001354:	89 44 24 04          	mov    %eax,0x4(%esp)
40001358:	c7 04 24 0c 42 00 40 	movl   $0x4000420c,(%esp)
4000135f:	e8 a2 fe ff ff       	call   40001206 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
40001364:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    cur = first_free;
4000136b:	a1 10 42 00 40       	mov    0x40004210,%eax
40001370:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001373:	e9 87 00 00 00       	jmp    400013ff <merge_into_frees+0xb4>
        if (cur->address + cur->size == tf->address) {
40001378:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000137b:	8b 50 04             	mov    0x4(%eax),%edx
4000137e:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001381:	8b 00                	mov    (%eax),%eax
40001383:	01 c2                	add    %eax,%edx
40001385:	8b 45 08             	mov    0x8(%ebp),%eax
40001388:	8b 40 04             	mov    0x4(%eax),%eax
4000138b:	39 c2                	cmp    %eax,%edx
4000138d:	75 21                	jne    400013b0 <merge_into_frees+0x65>
            tf->address = cur->address;
4000138f:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001392:	8b 50 04             	mov    0x4(%eax),%edx
40001395:	8b 45 08             	mov    0x8(%ebp),%eax
40001398:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
4000139b:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000139e:	89 44 24 04          	mov    %eax,0x4(%esp)
400013a2:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
400013a9:	e8 58 fe ff ff       	call   40001206 <remove_from_list>
            goto editedList;
400013ae:	eb b4                	jmp    40001364 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
400013b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013b3:	8b 50 04             	mov    0x4(%eax),%edx
400013b6:	8b 45 08             	mov    0x8(%ebp),%eax
400013b9:	8b 48 04             	mov    0x4(%eax),%ecx
400013bc:	8b 45 08             	mov    0x8(%ebp),%eax
400013bf:	8b 00                	mov    (%eax),%eax
400013c1:	01 c8                	add    %ecx,%eax
400013c3:	39 c2                	cmp    %eax,%edx
400013c5:	75 29                	jne    400013f0 <merge_into_frees+0xa5>
            tf->size += cur->size;
400013c7:	8b 45 08             	mov    0x8(%ebp),%eax
400013ca:	8b 10                	mov    (%eax),%edx
400013cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013cf:	8b 00                	mov    (%eax),%eax
400013d1:	01 c2                	add    %eax,%edx
400013d3:	8b 45 08             	mov    0x8(%ebp),%eax
400013d6:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
400013d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013db:	89 44 24 04          	mov    %eax,0x4(%esp)
400013df:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
400013e6:	e8 1b fe ff ff       	call   40001206 <remove_from_list>
            goto editedList;
400013eb:	e9 74 ff ff ff       	jmp    40001364 <merge_into_frees+0x19>
        }

        last = cur;
400013f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
400013f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
400013f9:	8b 40 08             	mov    0x8(%eax),%eax
400013fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList: last = 0;
    cur = first_free;

    while (cur != 0) {
400013ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
40001403:	0f 85 6f ff ff ff    	jne    40001378 <merge_into_frees+0x2d>

        last = cur;
        cur = cur->next;
    }

    append_to_list(&first_free, tf);
40001409:	8b 45 08             	mov    0x8(%ebp),%eax
4000140c:	89 44 24 04          	mov    %eax,0x4(%esp)
40001410:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
40001417:	e8 41 fe ff ff       	call   4000125d <append_to_list>
}
4000141c:	c9                   	leave  
4000141d:	c3                   	ret    

4000141e <malloc>:

void* malloc(size_t size) {
4000141e:	55                   	push   %ebp
4000141f:	89 e5                	mov    %esp,%ebp
40001421:	83 ec 38             	sub    $0x38,%esp
    struct memory_node* last = 0;
40001424:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    struct memory_node* cur = first_free;
4000142b:	a1 10 42 00 40       	mov    0x40004210,%eax
40001430:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
40001433:	eb 1b                	jmp    40001450 <malloc+0x32>
        if (cur->size >= size) {
40001435:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001438:	8b 00                	mov    (%eax),%eax
4000143a:	3b 45 08             	cmp    0x8(%ebp),%eax
4000143d:	72 02                	jb     40001441 <malloc+0x23>
            break;
4000143f:	eb 15                	jmp    40001456 <malloc+0x38>
        }
        last = cur;
40001441:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001444:	89 45 ec             	mov    %eax,-0x14(%ebp)
        cur = cur->next;
40001447:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000144a:	8b 40 08             	mov    0x8(%eax),%eax
4000144d:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* malloc(size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_free;

    while (cur != 0) {
40001450:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001454:	75 df                	jne    40001435 <malloc+0x17>
        }
        last = cur;
        cur = cur->next;
    }

    if (cur == 0) {
40001456:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
4000145a:	0f 85 a4 00 00 00    	jne    40001504 <malloc+0xe6>
        uint32_t pgs = size / PAGESIZE;
40001460:	8b 45 08             	mov    0x8(%ebp),%eax
40001463:	c1 e8 0c             	shr    $0xc,%eax
40001466:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
40001469:	8b 45 08             	mov    0x8(%ebp),%eax
4000146c:	25 ff 0f 00 00       	and    $0xfff,%eax
40001471:	85 c0                	test   %eax,%eax
40001473:	74 04                	je     40001479 <malloc+0x5b>
            pgs++;
40001475:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
40001479:	8b 45 f0             	mov    -0x10(%ebp),%eax
4000147c:	89 04 24             	mov    %eax,(%esp)
4000147f:	e8 1f 02 00 00       	call   400016a3 <vmm_alloc_cont>
40001484:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
40001487:	e8 89 fe ff ff       	call   40001315 <pop_unused_node>
4000148c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
4000148f:	8b 55 e8             	mov    -0x18(%ebp),%edx
40001492:	8b 45 e4             	mov    -0x1c(%ebp),%eax
40001495:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
40001498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
4000149b:	8b 55 08             	mov    0x8(%ebp),%edx
4000149e:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
400014a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014a3:	c1 e0 0c             	shl    $0xc,%eax
400014a6:	3b 45 08             	cmp    0x8(%ebp),%eax
400014a9:	76 3e                	jbe    400014e9 <malloc+0xcb>
            struct memory_node* free = pop_unused_node();
400014ab:	e8 65 fe ff ff       	call   40001315 <pop_unused_node>
400014b0:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
400014b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014b6:	8b 50 04             	mov    0x4(%eax),%edx
400014b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014bc:	8b 00                	mov    (%eax),%eax
400014be:	01 c2                	add    %eax,%edx
400014c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
400014c3:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
400014c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
400014c9:	c1 e0 0c             	shl    $0xc,%eax
400014cc:	2b 45 08             	sub    0x8(%ebp),%eax
400014cf:	89 c2                	mov    %eax,%edx
400014d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
400014d4:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
400014d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
400014d9:	89 44 24 04          	mov    %eax,0x4(%esp)
400014dd:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
400014e4:	e8 74 fd ff ff       	call   4000125d <append_to_list>
        }

        append_to_list(&first_used, fill);
400014e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014ec:	89 44 24 04          	mov    %eax,0x4(%esp)
400014f0:	c7 04 24 0c 42 00 40 	movl   $0x4000420c,(%esp)
400014f7:	e8 61 fd ff ff       	call   4000125d <append_to_list>

        return (void*) fill->address;
400014fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
400014ff:	8b 40 04             	mov    0x4(%eax),%eax
40001502:	eb 7b                	jmp    4000157f <malloc+0x161>
    } else {
        uint32_t freesize = cur->size - size;
40001504:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001507:	8b 00                	mov    (%eax),%eax
40001509:	2b 45 08             	sub    0x8(%ebp),%eax
4000150c:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
4000150f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001512:	8b 55 08             	mov    0x8(%ebp),%edx
40001515:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
40001517:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000151a:	89 44 24 04          	mov    %eax,0x4(%esp)
4000151e:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
40001525:	e8 dc fc ff ff       	call   40001206 <remove_from_list>
        append_to_list(&first_used, cur);
4000152a:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000152d:	89 44 24 04          	mov    %eax,0x4(%esp)
40001531:	c7 04 24 0c 42 00 40 	movl   $0x4000420c,(%esp)
40001538:	e8 20 fd ff ff       	call   4000125d <append_to_list>

        if (freesize > 0) {
4000153d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
40001541:	74 36                	je     40001579 <malloc+0x15b>
            struct memory_node* free = pop_unused_node();
40001543:	e8 cd fd ff ff       	call   40001315 <pop_unused_node>
40001548:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
4000154b:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000154e:	8b 50 04             	mov    0x4(%eax),%edx
40001551:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001554:	8b 00                	mov    (%eax),%eax
40001556:	01 c2                	add    %eax,%edx
40001558:	8b 45 d8             	mov    -0x28(%ebp),%eax
4000155b:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
4000155e:	8b 45 d8             	mov    -0x28(%ebp),%eax
40001561:	8b 55 dc             	mov    -0x24(%ebp),%edx
40001564:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
40001566:	8b 45 d8             	mov    -0x28(%ebp),%eax
40001569:	89 44 24 04          	mov    %eax,0x4(%esp)
4000156d:	c7 04 24 10 42 00 40 	movl   $0x40004210,(%esp)
40001574:	e8 e4 fc ff ff       	call   4000125d <append_to_list>
        }

        return (void*) cur->address;
40001579:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000157c:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
4000157f:	c9                   	leave  
40001580:	c3                   	ret    

40001581 <calloc>:

void* calloc(size_t num, size_t size) {
40001581:	55                   	push   %ebp
40001582:	89 e5                	mov    %esp,%ebp
40001584:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
40001587:	8b 45 08             	mov    0x8(%ebp),%eax
4000158a:	0f af 45 0c          	imul   0xc(%ebp),%eax
4000158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
40001591:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001594:	89 04 24             	mov    %eax,(%esp)
40001597:	e8 82 fe ff ff       	call   4000141e <malloc>
4000159c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
4000159f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
400015a3:	74 1a                	je     400015bf <calloc+0x3e>
        memset(p, 0, gsize);
400015a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
400015a8:	89 44 24 08          	mov    %eax,0x8(%esp)
400015ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
400015b3:	00 
400015b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
400015b7:	89 04 24             	mov    %eax,(%esp)
400015ba:	e8 df f8 ff ff       	call   40000e9e <memset>
    }

    return p;
400015bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
400015c2:	c9                   	leave  
400015c3:	c3                   	ret    

400015c4 <realloc>:

void* realloc(void* ptr, size_t size) {
400015c4:	55                   	push   %ebp
400015c5:	89 e5                	mov    %esp,%ebp
400015c7:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* last = 0;
400015ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
400015d1:	a1 0c 42 00 40       	mov    0x4000420c,%eax
400015d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
400015d9:	eb 73                	jmp    4000164e <realloc+0x8a>
        if (cur->address == (uint32_t) ptr) {
400015db:	8b 45 f4             	mov    -0xc(%ebp),%eax
400015de:	8b 50 04             	mov    0x4(%eax),%edx
400015e1:	8b 45 08             	mov    0x8(%ebp),%eax
400015e4:	39 c2                	cmp    %eax,%edx
400015e6:	75 57                	jne    4000163f <realloc+0x7b>
            if (size == 0) {
400015e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
400015ec:	75 12                	jne    40001600 <realloc+0x3c>
                free(ptr);
400015ee:	8b 45 08             	mov    0x8(%ebp),%eax
400015f1:	89 04 24             	mov    %eax,(%esp)
400015f4:	e8 62 00 00 00       	call   4000165b <free>
                return 0;
400015f9:	b8 00 00 00 00       	mov    $0x0,%eax
400015fe:	eb 59                	jmp    40001659 <realloc+0x95>
            } else {
                void* new = malloc(size);
40001600:	8b 45 0c             	mov    0xc(%ebp),%eax
40001603:	89 04 24             	mov    %eax,(%esp)
40001606:	e8 13 fe ff ff       	call   4000141e <malloc>
4000160b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
4000160e:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001611:	8b 10                	mov    (%eax),%edx
40001613:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001616:	8b 40 04             	mov    0x4(%eax),%eax
40001619:	89 54 24 08          	mov    %edx,0x8(%esp)
4000161d:	89 44 24 04          	mov    %eax,0x4(%esp)
40001621:	8b 45 ec             	mov    -0x14(%ebp),%eax
40001624:	89 04 24             	mov    %eax,(%esp)
40001627:	e8 a0 f8 ff ff       	call   40000ecc <memcpy>
                free((void*) cur->address);
4000162c:	8b 45 f4             	mov    -0xc(%ebp),%eax
4000162f:	8b 40 04             	mov    0x4(%eax),%eax
40001632:	89 04 24             	mov    %eax,(%esp)
40001635:	e8 21 00 00 00       	call   4000165b <free>

                return new;
4000163a:	8b 45 ec             	mov    -0x14(%ebp),%eax
4000163d:	eb 1a                	jmp    40001659 <realloc+0x95>
            }
        }
        last = cur;
4000163f:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001642:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
40001645:	8b 45 f4             	mov    -0xc(%ebp),%eax
40001648:	8b 40 08             	mov    0x8(%eax),%eax
4000164b:	89 45 f4             	mov    %eax,-0xc(%ebp)

void* realloc(void* ptr, size_t size) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000164e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
40001652:	75 87                	jne    400015db <realloc+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
    return 0;
40001654:	b8 00 00 00 00       	mov    $0x0,%eax
}
40001659:	c9                   	leave  
4000165a:	c3                   	ret    

4000165b <free>:

void free(void* ptr) {
4000165b:	55                   	push   %ebp
4000165c:	89 e5                	mov    %esp,%ebp
4000165e:	83 ec 14             	sub    $0x14,%esp
    struct memory_node* last = 0;
40001661:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
40001668:	a1 0c 42 00 40       	mov    0x4000420c,%eax
4000166d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
40001670:	eb 29                	jmp    4000169b <free+0x40>
        if (cur->address == (uint32_t) ptr) {
40001672:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001675:	8b 50 04             	mov    0x4(%eax),%edx
40001678:	8b 45 08             	mov    0x8(%ebp),%eax
4000167b:	39 c2                	cmp    %eax,%edx
4000167d:	75 0d                	jne    4000168c <free+0x31>
            merge_into_frees(cur);
4000167f:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001682:	89 04 24             	mov    %eax,(%esp)
40001685:	e8 c1 fc ff ff       	call   4000134b <merge_into_frees>
            break;
4000168a:	eb 15                	jmp    400016a1 <free+0x46>
        }
        last = cur;
4000168c:	8b 45 fc             	mov    -0x4(%ebp),%eax
4000168f:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
40001692:	8b 45 fc             	mov    -0x4(%ebp),%eax
40001695:	8b 40 08             	mov    0x8(%eax),%eax
40001698:	89 45 fc             	mov    %eax,-0x4(%ebp)

void free(void* ptr) {
    struct memory_node* last = 0;
    struct memory_node* cur = first_used;

    while (cur != 0) {
4000169b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
4000169f:	75 d1                	jne    40001672 <free+0x17>
            break;
        }
        last = cur;
        cur = cur->next;
    }
}
400016a1:	c9                   	leave  
400016a2:	c3                   	ret    

400016a3 <vmm_alloc_cont>:
#include "vmmcall.h"

void* vmm_alloc_cont (uint32_t cont) {
400016a3:	55                   	push   %ebp
400016a4:	89 e5                	mov    %esp,%ebp
400016a6:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400016a9:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
400016b0:	8b 45 08             	mov    0x8(%ebp),%eax
400016b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400016b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400016bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400016c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400016cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
400016d2:	8d 45 e0             	lea    -0x20(%ebp),%eax
400016d5:	89 04 24             	mov    %eax,(%esp)
400016d8:	e8 7e 00 00 00       	call   4000175b <syscall>
  
  return (void*)state.eax;
400016dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
400016e0:	c9                   	leave  
400016e1:	c3                   	ret    

400016e2 <vmm_free>:

void vmm_free (void* vaddr) {
400016e2:	55                   	push   %ebp
400016e3:	89 e5                	mov    %esp,%ebp
400016e5:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
400016e8:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
    .eax = 204,
    .ebx = (uint32_t)vaddr,
400016ef:	8b 45 08             	mov    0x8(%ebp),%eax
  
  return (void*)state.eax;
}

void vmm_free (void* vaddr) {
  struct regstate state = {
400016f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400016f5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400016fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001703:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000170a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
40001711:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001714:	89 04 24             	mov    %eax,(%esp)
40001717:	e8 3f 00 00 00       	call   4000175b <syscall>
}
4000171c:	c9                   	leave  
4000171d:	c3                   	ret    

4000171e <print_memstat>:

void print_memstat() {
4000171e:	55                   	push   %ebp
4000171f:	89 e5                	mov    %esp,%ebp
40001721:	83 ec 38             	sub    $0x38,%esp
  struct regstate state = {
40001724:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
4000172b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40001732:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001739:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001740:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001747:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    .edx = 0,
    .esi = 0,
    .edi = 0
  };
  
  syscall(&state);  
4000174e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001751:	89 04 24             	mov    %eax,(%esp)
40001754:	e8 02 00 00 00       	call   4000175b <syscall>
}
40001759:	c9                   	leave  
4000175a:	c3                   	ret    

4000175b <syscall>:
#include "syscall.h"

void syscall(struct regstate* state) {
4000175b:	55                   	push   %ebp
4000175c:	89 e5                	mov    %esp,%ebp
4000175e:	57                   	push   %edi
4000175f:	56                   	push   %esi
40001760:	53                   	push   %ebx
40001761:	83 ec 08             	sub    $0x8,%esp
			"=c" (state->ecx),
			"=d" (state->edx),
			"=S" (state->esi),
			"=D" (state->edi)

			: "a" (state->eax),
40001764:	8b 45 08             	mov    0x8(%ebp),%eax
40001767:	8b 00                	mov    (%eax),%eax
			"b" (state->ebx),
40001769:	8b 55 08             	mov    0x8(%ebp),%edx
4000176c:	8b 5a 04             	mov    0x4(%edx),%ebx
			"c" (state->ecx),
4000176f:	8b 55 08             	mov    0x8(%ebp),%edx
40001772:	8b 4a 08             	mov    0x8(%edx),%ecx
			"d" (state->edx),
40001775:	8b 55 08             	mov    0x8(%ebp),%edx
40001778:	8b 52 0c             	mov    0xc(%edx),%edx
			"S" (state->esi),
4000177b:	8b 75 08             	mov    0x8(%ebp),%esi
4000177e:	8b 76 10             	mov    0x10(%esi),%esi
			"D" (state->edi));
40001781:	8b 7d 08             	mov    0x8(%ebp),%edi
40001784:	8b 7f 14             	mov    0x14(%edi),%edi
#include "syscall.h"

void syscall(struct regstate* state) {
	asm("int $0x30"
40001787:	cd 30                	int    $0x30
40001789:	89 55 ec             	mov    %edx,-0x14(%ebp)
4000178c:	89 45 f0             	mov    %eax,-0x10(%ebp)
4000178f:	8b 45 08             	mov    0x8(%ebp),%eax
40001792:	8b 55 f0             	mov    -0x10(%ebp),%edx
40001795:	89 10                	mov    %edx,(%eax)
40001797:	8b 45 08             	mov    0x8(%ebp),%eax
4000179a:	89 58 04             	mov    %ebx,0x4(%eax)
4000179d:	8b 45 08             	mov    0x8(%ebp),%eax
400017a0:	89 48 08             	mov    %ecx,0x8(%eax)
400017a3:	8b 45 08             	mov    0x8(%ebp),%eax
400017a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
400017a9:	89 50 0c             	mov    %edx,0xc(%eax)
400017ac:	8b 45 08             	mov    0x8(%ebp),%eax
400017af:	89 70 10             	mov    %esi,0x10(%eax)
400017b2:	8b 45 08             	mov    0x8(%ebp),%eax
400017b5:	89 78 14             	mov    %edi,0x14(%eax)
			"b" (state->ebx),
			"c" (state->ecx),
			"d" (state->edx),
			"S" (state->esi),
			"D" (state->edi));
}
400017b8:	83 c4 08             	add    $0x8,%esp
400017bb:	5b                   	pop    %ebx
400017bc:	5e                   	pop    %esi
400017bd:	5f                   	pop    %edi
400017be:	5d                   	pop    %ebp
400017bf:	c3                   	ret    
