
../../initrfs/ibin/urnd_prov:     file format elf32-i386
../../initrfs/ibin/urnd_prov
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400004bf

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x00001298 memsz 0x00001298 flags r-x
    LOAD off    0x00003000 vaddr 0x40002000 paddr 0x40002000 align 2**12
         filesz 0x000011da memsz 0x00002214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001298  40000000  40000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  40002000  40002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       00000050  40003000  40003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.1 0000018a  40003050  40003050  00004050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000214  40004000  40004000  000041da  2**2
                  ALLOC
  5 .stab         0000495c  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000007e  00000000  00000000  00008b38  2**0
                  CONTENTS, READONLY
  7 .stabstr      000018f0  00000000  00000000  00008bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
40000000 l    d  .text	00000000 .text
40002000 l    d  .data	00000000 .data
40003000 l    d  .rodata	00000000 .rodata
40003050 l    d  .rodata.str1.1	00000000 .rodata.str1.1
40004000 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 urnd_prov.c
40000000 l     F .text	0000007a get_next
00000000 l    df *ABS*	00000000 process.c
40004000 l     O .bss	00000200 irq_handlers
40003038 l     O .rodata	00000018 C.7.1015
40000531 l     F .text	000000c0 _handle_rpc
00000000 l    df *ABS*	00000000 stdio.c
400005f4 l     F .text	00000047 resolveHandle
40000aa4 l     F .text	0000004a printrwerror
400008f1 l     F .text	0000003f putn
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 stdlib.c
40000f98 l     F .text	00000069 pop_unused_node
00000000 l    df *ABS*	00000000 vmmcall.c
00000000 l    df *ABS*	00000000 syscall.c
400002b5 g     F .text	0000003d getExecPath
400009a8 g     F .text	00000014 putchar
40000d55 g     F .text	00000033 strcpy
40000338 g     F .text	0000003e yield
400009bc g     F .text	000000e8 printf
40001248 g     F .text	00000050 syscall
40000bb9 g     F .text	00000042 fgets
40000bad g     F .text	0000000c getc
40000c84 g     F .text	00000026 memcpy
400008df g     F .text	00000012 puts
40000376 g     F .text	0000003d pexists
40001001 g     F .text	000000f8 malloc
4000040b g     F .text	0000003d fetch_rpc_data
40000d88 g     F .text	000000a5 strtoknc
4000024b g     F .text	0000003d changeExecPath
40004210 g     O .bss	00000004 first_free
4000078e g     F .text	00000012 setstdout
40002000 g     O .data	00000004 m_z
40001159 g     F .text	00000034 calloc
4000020f g     F .text	0000003c getExecPathChild
4000120b g     F .text	0000003d vmm_alloc_cont
4000019d g     F .text	0000003c exec
400004bf g     F .text	00000072 _start
400010f9 g     F .text	00000060 realloc
40000482 g     F .text	0000003d set_rpc_handler
40000e66 g     F .text	00000052 strtok
40000caa g     F .text	00000047 memcmp
40002004 g     O .data	00000004 m_w
40000aee g     F .text	00000085 fread
40004208 g     O .bss	00000004 first_unused
400006f2 g     F .text	0000003c fopen
40000c68 g     F .text	0000001c memset
4000007a g     F .text	000000af main
400006b5 g     F .text	0000003d fclose
40000b9e g     F .text	0000000f getchar
40000bfb g     F .text	0000006c getln
40004204 g     O .bss	00000004 fr
40000678 g     F .text	0000003d favailable
40000995 g     F .text	00000013 putc
40000cf1 g     F .text	00000049 strcmp
40000b73 g     F .text	0000002b fgetc
40004200 g     O .bss	00000004 sp
40000288 g     F .text	0000002d cd
4000420c g     O .bss	00000004 first_used
40000930 g     F .text	00000065 fputc
400007de g     F .text	00000093 fwrite
4000077c g     F .text	00000012 setstdin
400001d9 g     F .text	00000036 texec
40000e2d g     F .text	00000039 strclone
400002f2 g     F .text	00000046 exit
400003b3 g     F .text	00000058 register_irq_handler
4000072e g     F .text	0000003c fopenpmhandle
400011ce g     F .text	0000003d vmm_free
4000012c g     F .text	00000071 printFilesystemError
40000d3a g     F .text	0000001b strlen
400007a0 g     F .text	0000003e getLastVFSErr
40000871 g     F .text	0000006e fputs
4000063b g     F .text	0000003d fmkfifo
40000448 g     F .text	0000003a call_rpc
4000076a g     F .text	00000012 setstderr
40001190 g     F .text	0000003e print_memstat
40000eb8 g     F .text	000000e0 free



Disassembly of section .text:

40000000 <get_next>:
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40000000:	55                   	push   %ebp
40000001:	89 e5                	mov    %esp,%ebp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000003:	a1 00 20 00 40       	mov    0x40002000,%eax
40000008:	0f b7 d0             	movzwl %ax,%edx
4000000b:	89 d0                	mov    %edx,%eax
4000000d:	c1 e0 03             	shl    $0x3,%eax
40000010:	01 d0                	add    %edx,%eax
40000012:	c1 e0 06             	shl    $0x6,%eax
40000015:	01 d0                	add    %edx,%eax
40000017:	01 c0                	add    %eax,%eax
40000019:	01 d0                	add    %edx,%eax
4000001b:	c1 e0 02             	shl    $0x2,%eax
4000001e:	01 d0                	add    %edx,%eax
40000020:	c1 e0 03             	shl    $0x3,%eax
40000023:	8d 14 10             	lea    (%eax,%edx,1),%edx
40000026:	a1 00 20 00 40       	mov    0x40002000,%eax
4000002b:	c1 e8 10             	shr    $0x10,%eax
4000002e:	8d 04 02             	lea    (%edx,%eax,1),%eax
40000031:	a3 00 20 00 40       	mov    %eax,0x40002000
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000036:	a1 04 20 00 40       	mov    0x40002004,%eax
4000003b:	0f b7 d0             	movzwl %ax,%edx
4000003e:	89 d0                	mov    %edx,%eax
40000040:	c1 e0 02             	shl    $0x2,%eax
40000043:	01 d0                	add    %edx,%eax
40000045:	89 c2                	mov    %eax,%edx
40000047:	c1 e2 04             	shl    $0x4,%edx
4000004a:	29 c2                	sub    %eax,%edx
4000004c:	89 d0                	mov    %edx,%eax
4000004e:	c1 e0 04             	shl    $0x4,%eax
40000051:	29 d0                	sub    %edx,%eax
40000053:	c1 e0 04             	shl    $0x4,%eax
40000056:	8b 15 04 20 00 40    	mov    0x40002004,%edx
4000005c:	c1 ea 10             	shr    $0x10,%edx
4000005f:	01 d0                	add    %edx,%eax
40000061:	a3 04 20 00 40       	mov    %eax,0x40002004
    return (m_z << 16) + m_w;
40000066:	a1 00 20 00 40       	mov    0x40002000,%eax
4000006b:	89 c2                	mov    %eax,%edx
4000006d:	c1 e2 10             	shl    $0x10,%edx
40000070:	a1 04 20 00 40       	mov    0x40002004,%eax
40000075:	8d 04 02             	lea    (%edx,%eax,1),%eax
}
40000078:	5d                   	pop    %ebp
40000079:	c3                   	ret    

4000007a <main>:

int main(int argc, char* args[])
{
4000007a:	8d 4c 24 04          	lea    0x4(%esp),%ecx
4000007e:	83 e4 f0             	and    $0xfffffff0,%esp
40000081:	ff 71 fc             	pushl  -0x4(%ecx)
40000084:	55                   	push   %ebp
40000085:	89 e5                	mov    %esp,%ebp
40000087:	53                   	push   %ebx
40000088:	51                   	push   %ecx
40000089:	83 ec 20             	sub    $0x20,%esp
    HANDLE out = fmkfifo("/dev/urandom");
4000008c:	83 ec 0c             	sub    $0xc,%esp
4000008f:	68 00 30 00 40       	push   $0x40003000
40000094:	e8 a2 05 00 00       	call   4000063b <fmkfifo>
40000099:	83 c4 10             	add    $0x10,%esp
4000009c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
4000009f:	83 ec 08             	sub    $0x8,%esp
400000a2:	6a 02                	push   $0x2
400000a4:	68 0d 30 00 40       	push   $0x4000300d
400000a9:	e8 44 06 00 00       	call   400006f2 <fopen>
400000ae:	83 c4 10             	add    $0x10,%esp
400000b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
400000b4:	c6 45 e7 4b          	movb   $0x4b,-0x19(%ebp)
400000b8:	83 ec 04             	sub    $0x4,%esp
400000bb:	6a 01                	push   $0x1
400000bd:	8d 45 e7             	lea    -0x19(%ebp),%eax
400000c0:	50                   	push   %eax
400000c1:	ff 75 ec             	pushl  -0x14(%ebp)
400000c4:	e8 15 07 00 00       	call   400007de <fwrite>
400000c9:	83 c4 10             	add    $0x10,%esp
    fclose(initCtrl);
400000cc:	83 ec 0c             	sub    $0xc,%esp
400000cf:	ff 75 ec             	pushl  -0x14(%ebp)
400000d2:	e8 de 05 00 00       	call   400006b5 <fclose>
400000d7:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
400000da:	83 ec 0c             	sub    $0xc,%esp
400000dd:	68 00 02 00 00       	push   $0x200
400000e2:	e8 1a 0f 00 00       	call   40001001 <malloc>
400000e7:	83 c4 10             	add    $0x10,%esp
400000ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(1) {
        for(int i = 0; i < 128; i++) {
400000ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400000f4:	eb 15                	jmp    4000010b <main+0x91>
            rnd[i] = get_next();
400000f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
400000f9:	c1 e0 02             	shl    $0x2,%eax
400000fc:	89 c3                	mov    %eax,%ebx
400000fe:	03 5d f0             	add    -0x10(%ebp),%ebx
40000101:	e8 fa fe ff ff       	call   40000000 <get_next>
40000106:	89 03                	mov    %eax,(%ebx)
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000108:	ff 45 f4             	incl   -0xc(%ebp)
4000010b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
4000010f:	7e e5                	jle    400000f6 <main+0x7c>
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000111:	83 ec 04             	sub    $0x4,%esp
40000114:	68 00 02 00 00       	push   $0x200
40000119:	ff 75 f0             	pushl  -0x10(%ebp)
4000011c:	ff 75 e8             	pushl  -0x18(%ebp)
4000011f:	e8 ba 06 00 00       	call   400007de <fwrite>
40000124:	83 c4 10             	add    $0x10,%esp
    }
40000127:	eb c4                	jmp    400000ed <main+0x73>
40000129:	00 00                	add    %al,(%eax)
	...

4000012c <printFilesystemError>:
4000012c:	55                   	push   %ebp
4000012d:	89 e5                	mov    %esp,%ebp
4000012f:	83 ec 08             	sub    $0x8,%esp
40000132:	8b 55 0c             	mov    0xc(%ebp),%edx
40000135:	8b 45 08             	mov    0x8(%ebp),%eax
40000138:	83 fa 05             	cmp    $0x5,%edx
4000013b:	77 43                	ja     40000180 <printFilesystemError+0x54>
4000013d:	ff 24 95 20 30 00 40 	jmp    *0x40003020(,%edx,4)
40000144:	52                   	push   %edx
40000145:	52                   	push   %edx
40000146:	50                   	push   %eax
40000147:	68 50 30 00 40       	push   $0x40003050
4000014c:	eb 3a                	jmp    40000188 <printFilesystemError+0x5c>
4000014e:	51                   	push   %ecx
4000014f:	51                   	push   %ecx
40000150:	50                   	push   %eax
40000151:	68 62 30 00 40       	push   $0x40003062
40000156:	eb 30                	jmp    40000188 <printFilesystemError+0x5c>
40000158:	52                   	push   %edx
40000159:	52                   	push   %edx
4000015a:	50                   	push   %eax
4000015b:	68 81 30 00 40       	push   $0x40003081
40000160:	eb 26                	jmp    40000188 <printFilesystemError+0x5c>
40000162:	51                   	push   %ecx
40000163:	51                   	push   %ecx
40000164:	50                   	push   %eax
40000165:	68 ab 30 00 40       	push   $0x400030ab
4000016a:	eb 1c                	jmp    40000188 <printFilesystemError+0x5c>
4000016c:	52                   	push   %edx
4000016d:	52                   	push   %edx
4000016e:	50                   	push   %eax
4000016f:	68 c0 30 00 40       	push   $0x400030c0
40000174:	eb 12                	jmp    40000188 <printFilesystemError+0x5c>
40000176:	51                   	push   %ecx
40000177:	51                   	push   %ecx
40000178:	50                   	push   %eax
40000179:	68 fb 30 00 40       	push   $0x400030fb
4000017e:	eb 08                	jmp    40000188 <printFilesystemError+0x5c>
40000180:	52                   	push   %edx
40000181:	52                   	push   %edx
40000182:	50                   	push   %eax
40000183:	68 0e 31 00 40       	push   $0x4000310e
40000188:	e8 2f 08 00 00       	call   400009bc <printf>
4000018d:	c7 45 08 2b 31 00 40 	movl   $0x4000312b,0x8(%ebp)
40000194:	83 c4 10             	add    $0x10,%esp
40000197:	c9                   	leave  
40000198:	e9 1f 08 00 00       	jmp    400009bc <printf>

4000019d <exec>:
4000019d:	55                   	push   %ebp
4000019e:	89 e5                	mov    %esp,%ebp
400001a0:	83 ec 34             	sub    $0x34,%esp
400001a3:	8b 45 08             	mov    0x8(%ebp),%eax
400001a6:	c7 45 e0 03 00 00 00 	movl   $0x3,-0x20(%ebp)
400001ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400001b0:	8b 45 0c             	mov    0xc(%ebp),%eax
400001b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
400001b6:	8d 45 e0             	lea    -0x20(%ebp),%eax
400001b9:	50                   	push   %eax
400001ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400001c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400001c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400001cf:	e8 74 10 00 00       	call   40001248 <syscall>
400001d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
400001d7:	c9                   	leave  
400001d8:	c3                   	ret    

400001d9 <texec>:
400001d9:	55                   	push   %ebp
400001da:	89 e5                	mov    %esp,%ebp
400001dc:	56                   	push   %esi
400001dd:	53                   	push   %ebx
400001de:	53                   	push   %ebx
400001df:	53                   	push   %ebx
400001e0:	8b 75 08             	mov    0x8(%ebp),%esi
400001e3:	ff 75 0c             	pushl  0xc(%ebp)
400001e6:	56                   	push   %esi
400001e7:	e8 b1 ff ff ff       	call   4000019d <exec>
400001ec:	83 c4 10             	add    $0x10,%esp
400001ef:	89 c3                	mov    %eax,%ebx
400001f1:	85 c0                	test   %eax,%eax
400001f3:	75 11                	jne    40000206 <texec+0x2d>
400001f5:	e8 a6 05 00 00       	call   400007a0 <getLastVFSErr>
400001fa:	51                   	push   %ecx
400001fb:	51                   	push   %ecx
400001fc:	50                   	push   %eax
400001fd:	56                   	push   %esi
400001fe:	e8 29 ff ff ff       	call   4000012c <printFilesystemError>
40000203:	83 c4 10             	add    $0x10,%esp
40000206:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000209:	89 d8                	mov    %ebx,%eax
4000020b:	5b                   	pop    %ebx
4000020c:	5e                   	pop    %esi
4000020d:	5d                   	pop    %ebp
4000020e:	c3                   	ret    

4000020f <getExecPathChild>:
4000020f:	55                   	push   %ebp
40000210:	89 e5                	mov    %esp,%ebp
40000212:	83 ec 34             	sub    $0x34,%esp
40000215:	8b 45 08             	mov    0x8(%ebp),%eax
40000218:	c7 45 e0 11 00 00 00 	movl   $0x11,-0x20(%ebp)
4000021f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000222:	8b 45 0c             	mov    0xc(%ebp),%eax
40000225:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000228:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000022b:	50                   	push   %eax
4000022c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000233:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000023a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000241:	e8 02 10 00 00       	call   40001248 <syscall>
40000246:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000249:	c9                   	leave  
4000024a:	c3                   	ret    

4000024b <changeExecPath>:
4000024b:	55                   	push   %ebp
4000024c:	89 e5                	mov    %esp,%ebp
4000024e:	83 ec 34             	sub    $0x34,%esp
40000251:	8b 45 08             	mov    0x8(%ebp),%eax
40000254:	c7 45 e0 07 00 00 00 	movl   $0x7,-0x20(%ebp)
4000025b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000025e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000261:	50                   	push   %eax
40000262:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000269:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000270:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000277:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000027e:	e8 c5 0f 00 00       	call   40001248 <syscall>
40000283:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000286:	c9                   	leave  
40000287:	c3                   	ret    

40000288 <cd>:
40000288:	55                   	push   %ebp
40000289:	89 e5                	mov    %esp,%ebp
4000028b:	53                   	push   %ebx
4000028c:	83 ec 10             	sub    $0x10,%esp
4000028f:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000292:	53                   	push   %ebx
40000293:	e8 b3 ff ff ff       	call   4000024b <changeExecPath>
40000298:	83 c4 10             	add    $0x10,%esp
4000029b:	85 c0                	test   %eax,%eax
4000029d:	75 11                	jne    400002b0 <cd+0x28>
4000029f:	e8 fc 04 00 00       	call   400007a0 <getLastVFSErr>
400002a4:	52                   	push   %edx
400002a5:	52                   	push   %edx
400002a6:	50                   	push   %eax
400002a7:	53                   	push   %ebx
400002a8:	e8 7f fe ff ff       	call   4000012c <printFilesystemError>
400002ad:	83 c4 10             	add    $0x10,%esp
400002b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
400002b3:	c9                   	leave  
400002b4:	c3                   	ret    

400002b5 <getExecPath>:
400002b5:	55                   	push   %ebp
400002b6:	89 e5                	mov    %esp,%ebp
400002b8:	83 ec 34             	sub    $0x34,%esp
400002bb:	8b 45 08             	mov    0x8(%ebp),%eax
400002be:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
400002c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400002c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400002cb:	50                   	push   %eax
400002cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400002d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400002e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400002e8:	e8 5b 0f 00 00       	call   40001248 <syscall>
400002ed:	83 c4 10             	add    $0x10,%esp
400002f0:	c9                   	leave  
400002f1:	c3                   	ret    

400002f2 <exit>:
400002f2:	55                   	push   %ebp
400002f3:	89 e5                	mov    %esp,%ebp
400002f5:	83 ec 34             	sub    $0x34,%esp
400002f8:	8b 45 08             	mov    0x8(%ebp),%eax
400002fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
40000302:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000305:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000308:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
4000030f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000316:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000031d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000324:	50                   	push   %eax
40000325:	e8 1e 0f 00 00       	call   40001248 <syscall>
4000032a:	c7 04 24 16 31 00 40 	movl   $0x40003116,(%esp)
40000331:	e8 86 06 00 00       	call   400009bc <printf>
40000336:	eb f2                	jmp    4000032a <exit+0x38>

40000338 <yield>:
40000338:	55                   	push   %ebp
40000339:	89 e5                	mov    %esp,%ebp
4000033b:	83 ec 34             	sub    $0x34,%esp
4000033e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000341:	c7 45 e0 05 00 00 00 	movl   $0x5,-0x20(%ebp)
40000348:	50                   	push   %eax
40000349:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000350:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000357:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000035e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000365:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000036c:	e8 d7 0e 00 00       	call   40001248 <syscall>
40000371:	83 c4 10             	add    $0x10,%esp
40000374:	c9                   	leave  
40000375:	c3                   	ret    

40000376 <pexists>:
int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
40000376:	55                   	push   %ebp
40000377:	89 e5                	mov    %esp,%ebp
40000379:	83 ec 34             	sub    $0x34,%esp
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000037c:	8b 45 08             	mov    0x8(%ebp),%eax
4000037f:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
40000386:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000389:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000038c:	50                   	push   %eax
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000038d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000394:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000039b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

        fwrite(out, rnd, 128 * sizeof(uint32_t));
400003a9:	e8 9a 0e 00 00       	call   40001248 <syscall>
    }

    return 0;
400003ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
400003b1:	c9                   	leave  
400003b2:	c3                   	ret    

400003b3 <register_irq_handler>:
400003b3:	55                   	push   %ebp
400003b4:	89 e5                	mov    %esp,%ebp
400003b6:	53                   	push   %ebx
400003b7:	83 ec 30             	sub    $0x30,%esp
400003ba:	8d 45 e0             	lea    -0x20(%ebp),%eax
400003bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
400003c0:	50                   	push   %eax
400003c1:	c7 45 e0 28 00 00 00 	movl   $0x28,-0x20(%ebp)
400003c8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400003cb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400003d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400003d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400003e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400003e7:	e8 5c 0e 00 00       	call   40001248 <syscall>
400003ec:	83 c4 10             	add    $0x10,%esp
400003ef:	31 c0                	xor    %eax,%eax
400003f1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
400003f5:	74 0f                	je     40000406 <register_irq_handler+0x53>
400003f7:	8b 45 0c             	mov    0xc(%ebp),%eax
400003fa:	89 04 9d 00 40 00 40 	mov    %eax,0x40004000(,%ebx,4)
40000401:	b8 01 00 00 00       	mov    $0x1,%eax
40000406:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000409:	c9                   	leave  
4000040a:	c3                   	ret    

4000040b <fetch_rpc_data>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
4000040b:	55                   	push   %ebp
4000040c:	89 e5                	mov    %esp,%ebp
4000040e:	83 ec 34             	sub    $0x34,%esp
40000411:	8b 45 08             	mov    0x8(%ebp),%eax
40000414:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
4000041b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000041e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000421:	50                   	push   %eax
40000422:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000429:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000430:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000437:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000043e:	e8 05 0e 00 00       	call   40001248 <syscall>
40000443:	83 c4 10             	add    $0x10,%esp
40000446:	c9                   	leave  
40000447:	c3                   	ret    

40000448 <call_rpc>:
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000448:	55                   	push   %ebp
40000449:	89 e5                	mov    %esp,%ebp
4000044b:	83 ec 34             	sub    $0x34,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
4000044e:	8b 45 08             	mov    0x8(%ebp),%eax
40000451:	c7 45 e0 1f 00 00 00 	movl   $0x1f,-0x20(%ebp)
40000458:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000045b:	8b 45 0c             	mov    0xc(%ebp),%eax
4000045e:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000461:	8b 45 10             	mov    0x10(%ebp),%eax
40000464:	89 45 ec             	mov    %eax,-0x14(%ebp)
40000467:	8b 45 14             	mov    0x14(%ebp),%eax
4000046a:	89 45 f0             	mov    %eax,-0x10(%ebp)
            rnd[i] = get_next();
        }
4000046d:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000470:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
40000478:	e8 cb 0d 00 00       	call   40001248 <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }
4000047d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000480:	c9                   	leave  
40000481:	c3                   	ret    

40000482 <set_rpc_handler>:
40000482:	55                   	push   %ebp
40000483:	89 e5                	mov    %esp,%ebp
40000485:	57                   	push   %edi
40000486:	56                   	push   %esi
40000487:	be 38 30 00 40       	mov    $0x40003038,%esi
4000048c:	83 ec 24             	sub    $0x24,%esp
4000048f:	8d 7d e0             	lea    -0x20(%ebp),%edi
40000492:	68 00 02 00 00       	push   $0x200
40000497:	6a 00                	push   $0x0
40000499:	68 00 40 00 40       	push   $0x40004000
4000049e:	e8 c5 07 00 00       	call   40000c68 <memset>
400004a3:	b9 06 00 00 00       	mov    $0x6,%ecx
400004a8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400004ab:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
400004ad:	89 04 24             	mov    %eax,(%esp)
400004b0:	e8 93 0d 00 00       	call   40001248 <syscall>
400004b5:	83 c4 10             	add    $0x10,%esp
400004b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
400004bb:	5e                   	pop    %esi
400004bc:	5f                   	pop    %edi
400004bd:	5d                   	pop    %ebp
400004be:	c3                   	ret    

400004bf <_start>:
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
400004bf:	55                   	push   %ebp
400004c0:	89 e5                	mov    %esp,%ebp
400004c2:	56                   	push   %esi
400004c3:	53                   	push   %ebx
400004c4:	31 db                	xor    %ebx,%ebx
        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
}
400004c6:	83 ec 2c             	sub    $0x2c,%esp
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
400004c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400004cc:	c7 45 e0 04 00 00 00 	movl   $0x4,-0x20(%ebp)
400004d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

int main(int argc, char* args[])
400004da:	50                   	push   %eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400004db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400004e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400004e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400004f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

int main(int argc, char* args[])
400004f7:	e8 4c 0d 00 00       	call   40001248 <syscall>
{
    HANDLE out = fmkfifo("/dev/urandom");
400004fc:	8b 75 e0             	mov    -0x20(%ebp),%esi
400004ff:	83 c4 10             	add    $0x10,%esp
40000502:	85 f6                	test   %esi,%esi
40000504:	75 05                	jne    4000050b <_start+0x4c>
40000506:	89 f3                	mov    %esi,%ebx
40000508:	eb 07                	jmp    40000511 <_start+0x52>
4000050a:	43                   	inc    %ebx
4000050b:	83 3c 9e 00          	cmpl   $0x0,(%esi,%ebx,4)
4000050f:	75 f9                	jne    4000050a <_start+0x4b>
40000511:	e8 6c ff ff ff       	call   40000482 <set_rpc_handler>
40000516:	51                   	push   %ecx
40000517:	51                   	push   %ecx
40000518:	56                   	push   %esi
40000519:	53                   	push   %ebx
4000051a:	e8 5b fb ff ff       	call   4000007a <main>
4000051f:	89 04 24             	mov    %eax,(%esp)
40000522:	e8 cb fd ff ff       	call   400002f2 <exit>
40000527:	83 c4 10             	add    $0x10,%esp
4000052a:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000052d:	5b                   	pop    %ebx
4000052e:	5e                   	pop    %esi
4000052f:	5d                   	pop    %ebp
40000530:	c3                   	ret    

40000531 <_handle_rpc>:
40000531:	55                   	push   %ebp
40000532:	89 e5                	mov    %esp,%ebp
40000534:	56                   	push   %esi
40000535:	53                   	push   %ebx
40000536:	83 ec 2c             	sub    $0x2c,%esp
40000539:	ff 75 10             	pushl  0x10(%ebp)
4000053c:	8b 75 0c             	mov    0xc(%ebp),%esi
4000053f:	e8 bd 0a 00 00       	call   40001001 <malloc>
40000544:	89 04 24             	mov    %eax,(%esp)
40000547:	89 c3                	mov    %eax,%ebx
40000549:	e8 bd fe ff ff       	call   4000040b <fetch_rpc_data>
4000054e:	83 c4 10             	add    $0x10,%esp
40000551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
40000555:	75 4b                	jne    400005a2 <_handle_rpc+0x71>
40000557:	8b 04 b5 00 40 00 40 	mov    0x40004000(,%esi,4),%eax
4000055e:	85 c0                	test   %eax,%eax
40000560:	74 40                	je     400005a2 <_handle_rpc+0x71>
40000562:	83 ec 0c             	sub    $0xc,%esp
40000565:	56                   	push   %esi
40000566:	ff d0                	call   *%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000568:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000056b:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
40000572:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000575:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000057c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000583:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000058a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000591:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
40000598:	e8 ab 0c 00 00       	call   40001248 <syscall>
4000059d:	83 c4 10             	add    $0x10,%esp
400005a0:	eb fe                	jmp    400005a0 <_handle_rpc+0x6f>
400005a2:	83 ec 0c             	sub    $0xc,%esp
400005a5:	68 1d 31 00 40       	push   $0x4000311d
400005aa:	e8 0d 04 00 00       	call   400009bc <printf>
400005af:	89 1c 24             	mov    %ebx,(%esp)
400005b2:	e8 01 09 00 00       	call   40000eb8 <free>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400005b7:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005ba:	c7 45 e0 1e 00 00 00 	movl   $0x1e,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
400005c1:	89 04 24             	mov    %eax,(%esp)
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400005c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400005cb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400005d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400005d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400005e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
400005e7:	e8 5c 0c 00 00       	call   40001248 <syscall>
400005ec:	83 c4 10             	add    $0x10,%esp
400005ef:	eb fe                	jmp    400005ef <_handle_rpc+0xbe>
400005f1:	00 00                	add    %al,(%eax)
	...

400005f4 <resolveHandle>:
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

    return 0;
400005f4:	55                   	push   %ebp
400005f5:	89 e5                	mov    %esp,%ebp
400005f7:	83 ec 28             	sub    $0x28,%esp
}
400005fa:	3d fe 0f 00 00       	cmp    $0xffe,%eax
400005ff:	77 38                	ja     40000639 <resolveHandle+0x45>
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
40000601:	83 ec 0c             	sub    $0xc,%esp
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000604:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            rnd[i] = get_next();
        }
40000607:	8d 45 e0             	lea    -0x20(%ebp),%eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
4000060a:	c7 45 e0 14 00 00 00 	movl   $0x14,-0x20(%ebp)
            rnd[i] = get_next();
        }
40000611:	50                   	push   %eax
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
40000612:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000619:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000620:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000627:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            rnd[i] = get_next();
        }
4000062e:	e8 15 0c 00 00       	call   40001248 <syscall>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000633:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000636:	83 c4 10             	add    $0x10,%esp
    return 0;
}
40000639:	c9                   	leave  
4000063a:	c3                   	ret    

4000063b <fmkfifo>:
4000063b:	55                   	push   %ebp
4000063c:	89 e5                	mov    %esp,%ebp
4000063e:	83 ec 34             	sub    $0x34,%esp
40000641:	8b 45 08             	mov    0x8(%ebp),%eax
40000644:	c7 45 e0 0e 00 00 00 	movl   $0xe,-0x20(%ebp)
4000064b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000064e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000651:	50                   	push   %eax
40000652:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000659:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000660:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000667:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
4000066e:	e8 d5 0b 00 00       	call   40001248 <syscall>
40000673:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000676:	c9                   	leave  
40000677:	c3                   	ret    

40000678 <favailable>:
40000678:	55                   	push   %ebp
40000679:	89 e5                	mov    %esp,%ebp
4000067b:	83 ec 34             	sub    $0x34,%esp
4000067e:	8b 45 08             	mov    0x8(%ebp),%eax
40000681:	c7 45 e0 10 00 00 00 	movl   $0x10,-0x20(%ebp)
40000688:	89 45 e4             	mov    %eax,-0x1c(%ebp)
4000068b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000068e:	50                   	push   %eax
4000068f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000696:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000069d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006ab:	e8 98 0b 00 00       	call   40001248 <syscall>
400006b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006b3:	c9                   	leave  
400006b4:	c3                   	ret    

400006b5 <fclose>:
400006b5:	55                   	push   %ebp
400006b6:	89 e5                	mov    %esp,%ebp
400006b8:	83 ec 34             	sub    $0x34,%esp
400006bb:	8b 45 08             	mov    0x8(%ebp),%eax
400006be:	c7 45 e0 0b 00 00 00 	movl   $0xb,-0x20(%ebp)
400006c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400006c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
400006cb:	50                   	push   %eax
400006cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400006d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400006da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400006e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400006e8:	e8 5b 0b 00 00       	call   40001248 <syscall>
400006ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
400006f0:	c9                   	leave  
400006f1:	c3                   	ret    

400006f2 <fopen>:
400006f2:	55                   	push   %ebp
400006f3:	89 e5                	mov    %esp,%ebp
400006f5:	83 ec 34             	sub    $0x34,%esp
400006f8:	8b 45 08             	mov    0x8(%ebp),%eax
400006fb:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
40000702:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000705:	8b 45 0c             	mov    0xc(%ebp),%eax
40000708:	89 45 e8             	mov    %eax,-0x18(%ebp)
4000070b:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000070e:	50                   	push   %eax
4000070f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000716:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
4000071d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000724:	e8 1f 0b 00 00       	call   40001248 <syscall>
40000729:	8b 45 e0             	mov    -0x20(%ebp),%eax
4000072c:	c9                   	leave  
4000072d:	c3                   	ret    

4000072e <fopenpmhandle>:
4000072e:	55                   	push   %ebp
4000072f:	89 e5                	mov    %esp,%ebp
40000731:	83 ec 34             	sub    $0x34,%esp
40000734:	8b 45 08             	mov    0x8(%ebp),%eax
40000737:	c7 45 e0 15 00 00 00 	movl   $0x15,-0x20(%ebp)
4000073e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000741:	8b 45 0c             	mov    0xc(%ebp),%eax
40000744:	89 45 e8             	mov    %eax,-0x18(%ebp)
40000747:	8d 45 e0             	lea    -0x20(%ebp),%eax
4000074a:	50                   	push   %eax
4000074b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40000752:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000760:	e8 e3 0a 00 00       	call   40001248 <syscall>
40000765:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000768:	c9                   	leave  
40000769:	c3                   	ret    

4000076a <setstderr>:
4000076a:	55                   	push   %ebp
4000076b:	89 e5                	mov    %esp,%ebp
4000076d:	83 ec 10             	sub    $0x10,%esp
40000770:	ff 75 08             	pushl  0x8(%ebp)
40000773:	6a 03                	push   $0x3
40000775:	e8 b4 ff ff ff       	call   4000072e <fopenpmhandle>
4000077a:	c9                   	leave  
4000077b:	c3                   	ret    

4000077c <setstdin>:
4000077c:	55                   	push   %ebp
4000077d:	89 e5                	mov    %esp,%ebp
4000077f:	83 ec 10             	sub    $0x10,%esp
40000782:	ff 75 08             	pushl  0x8(%ebp)
40000785:	6a 02                	push   $0x2
40000787:	e8 a2 ff ff ff       	call   4000072e <fopenpmhandle>
4000078c:	c9                   	leave  
4000078d:	c3                   	ret    

4000078e <setstdout>:
4000078e:	55                   	push   %ebp
4000078f:	89 e5                	mov    %esp,%ebp
40000791:	83 ec 10             	sub    $0x10,%esp
40000794:	ff 75 08             	pushl  0x8(%ebp)
40000797:	6a 01                	push   $0x1
40000799:	e8 90 ff ff ff       	call   4000072e <fopenpmhandle>
4000079e:	c9                   	leave  
4000079f:	c3                   	ret    

400007a0 <getLastVFSErr>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
400007a0:	55                   	push   %ebp
400007a1:	89 e5                	mov    %esp,%ebp
400007a3:	83 ec 34             	sub    $0x34,%esp
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
400007a6:	8d 45 e0             	lea    -0x20(%ebp),%eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400007a9:	c7 45 e0 0f 00 00 00 	movl   $0xf,-0x20(%ebp)
    return (m_z << 16) + m_w;
}
400007b0:	50                   	push   %eax
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
400007b1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400007b8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400007bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400007c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400007cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    return (m_z << 16) + m_w;
}
400007d4:	e8 6f 0a 00 00       	call   40001248 <syscall>

int main(int argc, char* args[])
{
400007d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
400007dc:	c9                   	leave  
400007dd:	c3                   	ret    

400007de <fwrite>:
400007de:	55                   	push   %ebp
400007df:	89 e5                	mov    %esp,%ebp
400007e1:	57                   	push   %edi
400007e2:	56                   	push   %esi
400007e3:	53                   	push   %ebx
400007e4:	83 ec 3c             	sub    $0x3c,%esp
400007e7:	8b 45 08             	mov    0x8(%ebp),%eax
400007ea:	8b 7d 10             	mov    0x10(%ebp),%edi
400007ed:	e8 02 fe ff ff       	call   400005f4 <resolveHandle>
400007f2:	83 ec 0c             	sub    $0xc,%esp
400007f5:	89 c6                	mov    %eax,%esi
400007f7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
400007fa:	8b 45 0c             	mov    0xc(%ebp),%eax
400007fd:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000804:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000807:	8d 45 d0             	lea    -0x30(%ebp),%eax
4000080a:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000080d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000814:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000081b:	50                   	push   %eax
4000081c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
4000081f:	eb 2d                	jmp    4000084e <fwrite+0x70>
40000821:	e8 12 fb ff ff       	call   40000338 <yield>
40000826:	8b 45 0c             	mov    0xc(%ebp),%eax
40000829:	83 ec 0c             	sub    $0xc,%esp
4000082c:	89 45 d8             	mov    %eax,-0x28(%ebp)
4000082f:	8d 45 d0             	lea    -0x30(%ebp),%eax
40000832:	c7 45 d0 0c 00 00 00 	movl   $0xc,-0x30(%ebp)
40000839:	89 75 d4             	mov    %esi,-0x2c(%ebp)
4000083c:	89 7d dc             	mov    %edi,-0x24(%ebp)
4000083f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000846:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
4000084d:	50                   	push   %eax
4000084e:	e8 f5 09 00 00       	call   40001248 <syscall>
40000853:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000856:	83 c4 10             	add    $0x10,%esp
40000859:	83 fb 01             	cmp    $0x1,%ebx
4000085c:	74 c3                	je     40000821 <fwrite+0x43>
4000085e:	89 f0                	mov    %esi,%eax
40000860:	89 da                	mov    %ebx,%edx
40000862:	e8 3d 02 00 00       	call   40000aa4 <printrwerror>
40000867:	8d 65 f4             	lea    -0xc(%ebp),%esp
4000086a:	89 d8                	mov    %ebx,%eax
4000086c:	5b                   	pop    %ebx
4000086d:	5e                   	pop    %esi
4000086e:	5f                   	pop    %edi
4000086f:	5d                   	pop    %ebp
40000870:	c3                   	ret    

40000871 <fputs>:
40000871:	55                   	push   %ebp
40000872:	89 e5                	mov    %esp,%ebp
40000874:	56                   	push   %esi
40000875:	53                   	push   %ebx
40000876:	83 ec 20             	sub    $0x20,%esp
40000879:	8b 45 0c             	mov    0xc(%ebp),%eax
4000087c:	8b 5d 08             	mov    0x8(%ebp),%ebx
4000087f:	e8 70 fd ff ff       	call   400005f4 <resolveHandle>
40000884:	89 c6                	mov    %eax,%esi
40000886:	85 c0                	test   %eax,%eax
40000888:	74 16                	je     400008a0 <fputs+0x2f>
4000088a:	83 ec 0c             	sub    $0xc,%esp
4000088d:	53                   	push   %ebx
4000088e:	e8 a7 04 00 00       	call   40000d3a <strlen>
40000893:	83 c4 0c             	add    $0xc,%esp
40000896:	50                   	push   %eax
40000897:	53                   	push   %ebx
40000898:	56                   	push   %esi
40000899:	e8 40 ff ff ff       	call   400007de <fwrite>
4000089e:	eb 35                	jmp    400008d5 <fputs+0x64>
400008a0:	83 ec 0c             	sub    $0xc,%esp
400008a3:	8d 45 e0             	lea    -0x20(%ebp),%eax
400008a6:	c7 45 e0 ca 00 00 00 	movl   $0xca,-0x20(%ebp)
400008ad:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
400008b0:	50                   	push   %eax
400008b1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400008b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400008bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400008c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400008cd:	e8 76 09 00 00       	call   40001248 <syscall>
400008d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
400008d5:	83 c4 10             	add    $0x10,%esp
400008d8:	8d 65 f8             	lea    -0x8(%ebp),%esp
400008db:	5b                   	pop    %ebx
400008dc:	5e                   	pop    %esi
400008dd:	5d                   	pop    %ebp
400008de:	c3                   	ret    

400008df <puts>:
400008df:	55                   	push   %ebp
400008e0:	89 e5                	mov    %esp,%ebp
400008e2:	83 ec 10             	sub    $0x10,%esp
400008e5:	6a 01                	push   $0x1
400008e7:	ff 75 08             	pushl  0x8(%ebp)
400008ea:	e8 82 ff ff ff       	call   40000871 <fputs>
400008ef:	c9                   	leave  
400008f0:	c3                   	ret    

400008f1 <putn>:
400008f1:	55                   	push   %ebp
400008f2:	89 e5                	mov    %esp,%ebp
400008f4:	56                   	push   %esi
400008f5:	53                   	push   %ebx
400008f6:	31 f6                	xor    %esi,%esi
400008f8:	83 ec 50             	sub    $0x50,%esp
400008fb:	89 d3                	mov    %edx,%ebx
400008fd:	83 fa 24             	cmp    $0x24,%edx
40000900:	7f 25                	jg     40000927 <putn+0x36>
40000902:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000906:	8d 4d f7             	lea    -0x9(%ebp),%ecx
40000909:	31 d2                	xor    %edx,%edx
4000090b:	49                   	dec    %ecx
4000090c:	f7 f3                	div    %ebx
4000090e:	46                   	inc    %esi
4000090f:	85 c0                	test   %eax,%eax
40000911:	8a 92 2d 31 00 40    	mov    0x4000312d(%edx),%dl
40000917:	88 11                	mov    %dl,(%ecx)
40000919:	75 ee                	jne    40000909 <putn+0x18>
4000091b:	83 ec 0c             	sub    $0xc,%esp
4000091e:	51                   	push   %ecx
4000091f:	e8 bb ff ff ff       	call   400008df <puts>
40000924:	83 c4 10             	add    $0x10,%esp
40000927:	8d 65 f8             	lea    -0x8(%ebp),%esp
4000092a:	89 f0                	mov    %esi,%eax
4000092c:	5b                   	pop    %ebx
4000092d:	5e                   	pop    %esi
4000092e:	5d                   	pop    %ebp
4000092f:	c3                   	ret    

40000930 <fputc>:
40000930:	55                   	push   %ebp
40000931:	89 e5                	mov    %esp,%ebp
40000933:	83 ec 38             	sub    $0x38,%esp
40000936:	8b 45 08             	mov    0x8(%ebp),%eax
40000939:	88 45 d4             	mov    %al,-0x2c(%ebp)
4000093c:	8b 45 0c             	mov    0xc(%ebp),%eax
4000093f:	e8 b0 fc ff ff       	call   400005f4 <resolveHandle>
40000944:	85 c0                	test   %eax,%eax
40000946:	74 0f                	je     40000957 <fputc+0x27>
40000948:	52                   	push   %edx
40000949:	8d 55 d4             	lea    -0x2c(%ebp),%edx
4000094c:	6a 01                	push   $0x1
4000094e:	52                   	push   %edx
4000094f:	50                   	push   %eax
40000950:	e8 89 fe ff ff       	call   400007de <fwrite>
40000955:	eb 39                	jmp    40000990 <fputc+0x60>
40000957:	0f be 45 d4          	movsbl -0x2c(%ebp),%eax
4000095b:	83 ec 0c             	sub    $0xc,%esp
4000095e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000961:	8d 45 e0             	lea    -0x20(%ebp),%eax
40000964:	c7 45 e0 c9 00 00 00 	movl   $0xc9,-0x20(%ebp)
4000096b:	50                   	push   %eax
4000096c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40000973:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
4000097a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40000981:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
40000988:	e8 bb 08 00 00       	call   40001248 <syscall>
4000098d:	8b 45 e0             	mov    -0x20(%ebp),%eax
40000990:	83 c4 10             	add    $0x10,%esp
40000993:	c9                   	leave  
40000994:	c3                   	ret    

40000995 <putc>:
40000995:	55                   	push   %ebp
40000996:	89 e5                	mov    %esp,%ebp
40000998:	83 ec 08             	sub    $0x8,%esp
4000099b:	0f be 45 08          	movsbl 0x8(%ebp),%eax
4000099f:	89 45 08             	mov    %eax,0x8(%ebp)
400009a2:	c9                   	leave  
400009a3:	e9 88 ff ff ff       	jmp    40000930 <fputc>

400009a8 <putchar>:
400009a8:	55                   	push   %ebp
400009a9:	89 e5                	mov    %esp,%ebp
400009ab:	83 ec 10             	sub    $0x10,%esp
400009ae:	0f be 45 08          	movsbl 0x8(%ebp),%eax
400009b2:	6a 01                	push   $0x1
400009b4:	50                   	push   %eax
400009b5:	e8 76 ff ff ff       	call   40000930 <fputc>
400009ba:	c9                   	leave  
400009bb:	c3                   	ret    

400009bc <printf>:
400009bc:	55                   	push   %ebp
400009bd:	89 e5                	mov    %esp,%ebp
400009bf:	57                   	push   %edi
400009c0:	56                   	push   %esi
400009c1:	53                   	push   %ebx
400009c2:	83 ec 1c             	sub    $0x1c,%esp
400009c5:	8d 75 0c             	lea    0xc(%ebp),%esi
400009c8:	8b 7d 08             	mov    0x8(%ebp),%edi
400009cb:	31 db                	xor    %ebx,%ebx
400009cd:	e9 be 00 00 00       	jmp    40000a90 <printf+0xd4>
400009d2:	3c 25                	cmp    $0x25,%al
400009d4:	0f 85 a4 00 00 00    	jne    40000a7e <printf+0xc2>
400009da:	47                   	inc    %edi
400009db:	8a 07                	mov    (%edi),%al
400009dd:	3c 70                	cmp    $0x70,%al
400009df:	74 47                	je     40000a28 <printf+0x6c>
400009e1:	7f 1a                	jg     400009fd <printf+0x41>
400009e3:	3c 63                	cmp    $0x63,%al
400009e5:	74 5a                	je     40000a41 <printf+0x85>
400009e7:	7f 0e                	jg     400009f7 <printf+0x3b>
400009e9:	84 c0                	test   %al,%al
400009eb:	0f 84 a9 00 00 00    	je     40000a9a <printf+0xde>
400009f1:	3c 25                	cmp    $0x25,%al
400009f3:	75 6c                	jne    40000a61 <printf+0xa5>
400009f5:	eb 63                	jmp    40000a5a <printf+0x9e>
400009f7:	3c 64                	cmp    $0x64,%al
400009f9:	75 66                	jne    40000a61 <printf+0xa5>
400009fb:	eb 1e                	jmp    40000a1b <printf+0x5f>
400009fd:	3c 75                	cmp    $0x75,%al
400009ff:	74 1a                	je     40000a1b <printf+0x5f>
40000a01:	3c 78                	cmp    $0x78,%al
40000a03:	74 23                	je     40000a28 <printf+0x6c>
40000a05:	3c 73                	cmp    $0x73,%al
40000a07:	75 58                	jne    40000a61 <printf+0xa5>
40000a09:	83 ec 0c             	sub    $0xc,%esp
40000a0c:	8d 46 04             	lea    0x4(%esi),%eax
40000a0f:	ff 36                	pushl  (%esi)
40000a11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a14:	e8 c6 fe ff ff       	call   400008df <puts>
40000a19:	eb 38                	jmp    40000a53 <printf+0x97>
40000a1b:	8d 46 04             	lea    0x4(%esi),%eax
40000a1e:	ba 0a 00 00 00       	mov    $0xa,%edx
40000a23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a26:	eb 0b                	jmp    40000a33 <printf+0x77>
40000a28:	8d 46 04             	lea    0x4(%esi),%eax
40000a2b:	ba 10 00 00 00       	mov    $0x10,%edx
40000a30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a33:	8b 06                	mov    (%esi),%eax
40000a35:	e8 b7 fe ff ff       	call   400008f1 <putn>
40000a3a:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a3d:	01 c3                	add    %eax,%ebx
40000a3f:	eb 4e                	jmp    40000a8f <printf+0xd3>
40000a41:	8d 46 04             	lea    0x4(%esi),%eax
40000a44:	83 ec 0c             	sub    $0xc,%esp
40000a47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a4a:	0f be 06             	movsbl (%esi),%eax
40000a4d:	50                   	push   %eax
40000a4e:	e8 55 ff ff ff       	call   400009a8 <putchar>
40000a53:	01 c3                	add    %eax,%ebx
40000a55:	8b 75 e4             	mov    -0x1c(%ebp),%esi
40000a58:	eb 32                	jmp    40000a8c <printf+0xd0>
40000a5a:	83 ec 0c             	sub    $0xc,%esp
40000a5d:	6a 25                	push   $0x25
40000a5f:	eb 24                	jmp    40000a85 <printf+0xc9>
40000a61:	83 ec 0c             	sub    $0xc,%esp
40000a64:	6a 25                	push   $0x25
40000a66:	e8 3d ff ff ff       	call   400009a8 <putchar>
40000a6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000a6e:	0f be 07             	movsbl (%edi),%eax
40000a71:	89 04 24             	mov    %eax,(%esp)
40000a74:	e8 2f ff ff ff       	call   400009a8 <putchar>
40000a79:	03 45 e4             	add    -0x1c(%ebp),%eax
40000a7c:	eb 0c                	jmp    40000a8a <printf+0xce>
40000a7e:	83 ec 0c             	sub    $0xc,%esp
40000a81:	0f be c0             	movsbl %al,%eax
40000a84:	50                   	push   %eax
40000a85:	e8 1e ff ff ff       	call   400009a8 <putchar>
40000a8a:	01 c3                	add    %eax,%ebx
40000a8c:	83 c4 10             	add    $0x10,%esp
40000a8f:	47                   	inc    %edi
40000a90:	8a 07                	mov    (%edi),%al
40000a92:	84 c0                	test   %al,%al
40000a94:	0f 85 38 ff ff ff    	jne    400009d2 <printf+0x16>
40000a9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000a9d:	89 d8                	mov    %ebx,%eax
40000a9f:	5b                   	pop    %ebx
40000aa0:	5e                   	pop    %esi
40000aa1:	5f                   	pop    %edi
40000aa2:	5d                   	pop    %ebp
40000aa3:	c3                   	ret    

40000aa4 <printrwerror>:
40000aa4:	55                   	push   %ebp
40000aa5:	89 e5                	mov    %esp,%ebp
40000aa7:	83 ec 08             	sub    $0x8,%esp
40000aaa:	83 fa 02             	cmp    $0x2,%edx
40000aad:	75 0a                	jne    40000ab9 <printrwerror+0x15>
40000aaf:	52                   	push   %edx
40000ab0:	52                   	push   %edx
40000ab1:	50                   	push   %eax
40000ab2:	68 52 31 00 40       	push   $0x40003152
40000ab7:	eb 2b                	jmp    40000ae4 <printrwerror+0x40>
40000ab9:	83 fa 03             	cmp    $0x3,%edx
40000abc:	75 0a                	jne    40000ac8 <printrwerror+0x24>
40000abe:	51                   	push   %ecx
40000abf:	51                   	push   %ecx
40000ac0:	50                   	push   %eax
40000ac1:	68 6a 31 00 40       	push   $0x4000316a
40000ac6:	eb 1c                	jmp    40000ae4 <printrwerror+0x40>
40000ac8:	83 fa 04             	cmp    $0x4,%edx
40000acb:	75 0a                	jne    40000ad7 <printrwerror+0x33>
40000acd:	52                   	push   %edx
40000ace:	52                   	push   %edx
40000acf:	50                   	push   %eax
40000ad0:	68 85 31 00 40       	push   $0x40003185
40000ad5:	eb 0d                	jmp    40000ae4 <printrwerror+0x40>
40000ad7:	83 fa 05             	cmp    $0x5,%edx
40000ada:	75 10                	jne    40000aec <printrwerror+0x48>
40000adc:	51                   	push   %ecx
40000add:	51                   	push   %ecx
40000ade:	50                   	push   %eax
40000adf:	68 af 31 00 40       	push   $0x400031af
40000ae4:	e8 d3 fe ff ff       	call   400009bc <printf>
40000ae9:	83 c4 10             	add    $0x10,%esp
40000aec:	c9                   	leave  
40000aed:	c3                   	ret    

40000aee <fread>:
40000aee:	55                   	push   %ebp
40000aef:	89 e5                	mov    %esp,%ebp
40000af1:	57                   	push   %edi
40000af2:	56                   	push   %esi
40000af3:	53                   	push   %ebx
40000af4:	83 ec 38             	sub    $0x38,%esp
40000af7:	8d 7d d0             	lea    -0x30(%ebp),%edi
40000afa:	8b 45 0c             	mov    0xc(%ebp),%eax
40000afd:	8b 75 08             	mov    0x8(%ebp),%esi
40000b00:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b03:	8b 45 10             	mov    0x10(%ebp),%eax
40000b06:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b0d:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b10:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b13:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b21:	eb 2c                	jmp    40000b4f <fread+0x61>
40000b23:	e8 10 f8 ff ff       	call   40000338 <yield>
40000b28:	8b 45 0c             	mov    0xc(%ebp),%eax
40000b2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
40000b2e:	8b 45 10             	mov    0x10(%ebp),%eax
40000b31:	c7 45 d0 0d 00 00 00 	movl   $0xd,-0x30(%ebp)
40000b38:	89 75 d4             	mov    %esi,-0x2c(%ebp)
40000b3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
40000b3e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
40000b45:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
40000b4c:	83 ec 0c             	sub    $0xc,%esp
40000b4f:	57                   	push   %edi
40000b50:	e8 f3 06 00 00       	call   40001248 <syscall>
40000b55:	8b 5d d0             	mov    -0x30(%ebp),%ebx
40000b58:	83 c4 10             	add    $0x10,%esp
40000b5b:	83 fb 01             	cmp    $0x1,%ebx
40000b5e:	74 c3                	je     40000b23 <fread+0x35>
40000b60:	89 f0                	mov    %esi,%eax
40000b62:	89 da                	mov    %ebx,%edx
40000b64:	e8 3b ff ff ff       	call   40000aa4 <printrwerror>
40000b69:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000b6c:	89 d8                	mov    %ebx,%eax
40000b6e:	5b                   	pop    %ebx
40000b6f:	5e                   	pop    %esi
40000b70:	5f                   	pop    %edi
40000b71:	5d                   	pop    %ebp
40000b72:	c3                   	ret    

40000b73 <fgetc>:
40000b73:	55                   	push   %ebp
40000b74:	89 e5                	mov    %esp,%ebp
40000b76:	83 ec 18             	sub    $0x18,%esp
40000b79:	8b 45 08             	mov    0x8(%ebp),%eax
40000b7c:	e8 73 fa ff ff       	call   400005f4 <resolveHandle>
40000b81:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
40000b85:	85 c0                	test   %eax,%eax
40000b87:	74 10                	je     40000b99 <fgetc+0x26>
40000b89:	8d 55 f7             	lea    -0x9(%ebp),%edx
40000b8c:	51                   	push   %ecx
40000b8d:	6a 01                	push   $0x1
40000b8f:	52                   	push   %edx
40000b90:	50                   	push   %eax
40000b91:	e8 58 ff ff ff       	call   40000aee <fread>
40000b96:	83 c4 10             	add    $0x10,%esp
40000b99:	8a 45 f7             	mov    -0x9(%ebp),%al
40000b9c:	c9                   	leave  
40000b9d:	c3                   	ret    

40000b9e <getchar>:
40000b9e:	55                   	push   %ebp
40000b9f:	89 e5                	mov    %esp,%ebp
40000ba1:	83 ec 14             	sub    $0x14,%esp
40000ba4:	6a 02                	push   $0x2
40000ba6:	e8 c8 ff ff ff       	call   40000b73 <fgetc>
40000bab:	c9                   	leave  
40000bac:	c3                   	ret    

40000bad <getc>:
40000bad:	55                   	push   %ebp
40000bae:	89 e5                	mov    %esp,%ebp
40000bb0:	83 ec 08             	sub    $0x8,%esp
40000bb3:	c9                   	leave  
40000bb4:	e9 ba ff ff ff       	jmp    40000b73 <fgetc>

40000bb9 <fgets>:
40000bb9:	55                   	push   %ebp
40000bba:	89 e5                	mov    %esp,%ebp
40000bbc:	57                   	push   %edi
40000bbd:	56                   	push   %esi
40000bbe:	53                   	push   %ebx
40000bbf:	83 ec 1c             	sub    $0x1c,%esp
40000bc2:	31 db                	xor    %ebx,%ebx
40000bc4:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000bc7:	8b 75 08             	mov    0x8(%ebp),%esi
40000bca:	8d 47 ff             	lea    -0x1(%edi),%eax
40000bcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
40000bd0:	eb 16                	jmp    40000be8 <fgets+0x2f>
40000bd2:	83 ec 0c             	sub    $0xc,%esp
40000bd5:	ff 75 10             	pushl  0x10(%ebp)
40000bd8:	e8 96 ff ff ff       	call   40000b73 <fgetc>
40000bdd:	83 c4 10             	add    $0x10,%esp
40000be0:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000be3:	84 c0                	test   %al,%al
40000be5:	74 0a                	je     40000bf1 <fgets+0x38>
40000be7:	43                   	inc    %ebx
40000be8:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
40000beb:	7c e5                	jl     40000bd2 <fgets+0x19>
40000bed:	c6 04 3e 00          	movb   $0x0,(%esi,%edi,1)
40000bf1:	8d 65 f4             	lea    -0xc(%ebp),%esp
40000bf4:	89 f0                	mov    %esi,%eax
40000bf6:	5b                   	pop    %ebx
40000bf7:	5e                   	pop    %esi
40000bf8:	5f                   	pop    %edi
40000bf9:	5d                   	pop    %ebp
40000bfa:	c3                   	ret    

40000bfb <getln>:
40000bfb:	55                   	push   %ebp
40000bfc:	89 e5                	mov    %esp,%ebp
40000bfe:	56                   	push   %esi
40000bff:	53                   	push   %ebx
40000c00:	31 db                	xor    %ebx,%ebx
40000c02:	8b 75 08             	mov    0x8(%ebp),%esi
40000c05:	eb 42                	jmp    40000c49 <getln+0x4e>
40000c07:	3c 0a                	cmp    $0xa,%al
40000c09:	75 0f                	jne    40000c1a <getln+0x1f>
40000c0b:	83 ec 0c             	sub    $0xc,%esp
40000c0e:	6a 0a                	push   $0xa
40000c10:	e8 93 fd ff ff       	call   400009a8 <putchar>
40000c15:	83 c4 10             	add    $0x10,%esp
40000c18:	eb 40                	jmp    40000c5a <getln+0x5f>
40000c1a:	3c 08                	cmp    $0x8,%al
40000c1c:	75 18                	jne    40000c36 <getln+0x3b>
40000c1e:	85 db                	test   %ebx,%ebx
40000c20:	74 0e                	je     40000c30 <getln+0x35>
40000c22:	83 ec 0c             	sub    $0xc,%esp
40000c25:	4b                   	dec    %ebx
40000c26:	6a 08                	push   $0x8
40000c28:	e8 7b fd ff ff       	call   400009a8 <putchar>
40000c2d:	83 c4 10             	add    $0x10,%esp
40000c30:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c34:	eb 13                	jmp    40000c49 <getln+0x4e>
40000c36:	83 ec 0c             	sub    $0xc,%esp
40000c39:	88 04 1e             	mov    %al,(%esi,%ebx,1)
40000c3c:	0f be c0             	movsbl %al,%eax
40000c3f:	50                   	push   %eax
40000c40:	43                   	inc    %ebx
40000c41:	e8 62 fd ff ff       	call   400009a8 <putchar>
40000c46:	83 c4 10             	add    $0x10,%esp
40000c49:	83 ec 0c             	sub    $0xc,%esp
40000c4c:	6a 02                	push   $0x2
40000c4e:	e8 20 ff ff ff       	call   40000b73 <fgetc>
40000c53:	83 c4 10             	add    $0x10,%esp
40000c56:	84 c0                	test   %al,%al
40000c58:	75 ad                	jne    40000c07 <getln+0xc>
40000c5a:	c6 04 1e 00          	movb   $0x0,(%esi,%ebx,1)
40000c5e:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000c61:	89 f0                	mov    %esi,%eax
40000c63:	5b                   	pop    %ebx
40000c64:	5e                   	pop    %esi
40000c65:	5d                   	pop    %ebp
40000c66:	c3                   	ret    
	...

40000c68 <memset>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
40000c68:	55                   	push   %ebp
40000c69:	89 e5                	mov    %esp,%ebp
40000c6b:	53                   	push   %ebx
40000c6c:	8b 45 08             	mov    0x8(%ebp),%eax
40000c6f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000c72:	8b 4d 10             	mov    0x10(%ebp),%ecx
#include "vmmcall.h"
40000c75:	89 c2                	mov    %eax,%edx
#include "process.h"
 
40000c77:	eb 04                	jmp    40000c7d <memset+0x15>
uint32_t m_z = 1, m_w = 2;
40000c79:	88 1a                	mov    %bl,(%edx)
40000c7b:	49                   	dec    %ecx
40000c7c:	42                   	inc    %edx
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "vmmcall.h"
#include "process.h"
 
40000c7d:	85 c9                	test   %ecx,%ecx
40000c7f:	75 f8                	jne    40000c79 <memset+0x11>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000c81:	5b                   	pop    %ebx
40000c82:	5d                   	pop    %ebp
40000c83:	c3                   	ret    

40000c84 <memcpy>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000c84:	55                   	push   %ebp
}

int main(int argc, char* args[])
{
40000c85:	31 c9                	xor    %ecx,%ecx

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
40000c87:	89 e5                	mov    %esp,%ebp
40000c89:	56                   	push   %esi
40000c8a:	53                   	push   %ebx
40000c8b:	8b 75 10             	mov    0x10(%ebp),%esi
40000c8e:	8b 45 08             	mov    0x8(%ebp),%eax
40000c91:	8b 5d 0c             	mov    0xc(%ebp),%ebx
}

int main(int argc, char* args[])
{
40000c94:	85 f6                	test   %esi,%esi
40000c96:	75 04                	jne    40000c9c <memcpy+0x18>
40000c98:	31 c0                	xor    %eax,%eax
40000c9a:	eb 0a                	jmp    40000ca6 <memcpy+0x22>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000c9c:	8a 14 0b             	mov    (%ebx,%ecx,1),%dl
40000c9f:	88 14 08             	mov    %dl,(%eax,%ecx,1)
40000ca2:	41                   	inc    %ecx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000ca3:	4e                   	dec    %esi
40000ca4:	75 f6                	jne    40000c9c <memcpy+0x18>
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));
40000ca6:	5b                   	pop    %ebx
40000ca7:	5e                   	pop    %esi
40000ca8:	5d                   	pop    %ebp
40000ca9:	c3                   	ret    

40000caa <memcmp>:

    while(1) {
40000caa:	55                   	push   %ebp
        for(int i = 0; i < 128; i++) {
40000cab:	83 c8 ff             	or     $0xffffffff,%eax
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
40000cae:	89 e5                	mov    %esp,%ebp
40000cb0:	57                   	push   %edi
40000cb1:	56                   	push   %esi
40000cb2:	53                   	push   %ebx
40000cb3:	8b 75 08             	mov    0x8(%ebp),%esi
40000cb6:	8b 7d 0c             	mov    0xc(%ebp),%edi
40000cb9:	8b 5d 10             	mov    0x10(%ebp),%ebx
        for(int i = 0; i < 128; i++) {
40000cbc:	85 f6                	test   %esi,%esi
40000cbe:	74 2c                	je     40000cec <memcmp+0x42>
            rnd[i] = get_next();
        }
40000cc0:	b8 01 00 00 00       	mov    $0x1,%eax
40000cc5:	85 ff                	test   %edi,%edi
40000cc7:	74 23                	je     40000cec <memcmp+0x42>

        fwrite(out, rnd, 128 * sizeof(uint32_t));
40000cc9:	31 d2                	xor    %edx,%edx
40000ccb:	85 db                	test   %ebx,%ebx
40000ccd:	75 17                	jne    40000ce6 <memcmp+0x3c>
40000ccf:	eb 19                	jmp    40000cea <memcmp+0x40>

    return 0;
}
40000cd1:	8a 04 16             	mov    (%esi,%edx,1),%al
40000cd4:	8a 0c 17             	mov    (%edi,%edx,1),%cl
40000cd7:	38 c8                	cmp    %cl,%al
40000cd9:	74 0a                	je     40000ce5 <memcmp+0x3b>
40000cdb:	0f b6 c0             	movzbl %al,%eax
40000cde:	0f b6 c9             	movzbl %cl,%ecx
40000ce1:	29 c8                	sub    %ecx,%eax
40000ce3:	eb 07                	jmp    40000cec <memcmp+0x42>
    }

    return 0;
}
40000ce5:	42                   	inc    %edx
40000ce6:	39 da                	cmp    %ebx,%edx
40000ce8:	72 e7                	jb     40000cd1 <memcmp+0x27>
40000cea:	31 c0                	xor    %eax,%eax
40000cec:	5b                   	pop    %ebx
40000ced:	5e                   	pop    %esi
40000cee:	5f                   	pop    %edi
40000cef:	5d                   	pop    %ebp
40000cf0:	c3                   	ret    

40000cf1 <strcmp>:
40000cf1:	55                   	push   %ebp
40000cf2:	31 c0                	xor    %eax,%eax
40000cf4:	89 e5                	mov    %esp,%ebp
40000cf6:	56                   	push   %esi
40000cf7:	53                   	push   %ebx
40000cf8:	31 db                	xor    %ebx,%ebx
40000cfa:	8b 55 08             	mov    0x8(%ebp),%edx
40000cfd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
40000d00:	85 d2                	test   %edx,%edx
40000d02:	75 03                	jne    40000d07 <strcmp+0x16>
40000d04:	eb 09                	jmp    40000d0f <strcmp+0x1e>
40000d06:	40                   	inc    %eax
40000d07:	89 c3                	mov    %eax,%ebx
40000d09:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
40000d0d:	75 f7                	jne    40000d06 <strcmp+0x15>
40000d0f:	31 c0                	xor    %eax,%eax
40000d11:	31 f6                	xor    %esi,%esi
40000d13:	85 c9                	test   %ecx,%ecx
40000d15:	75 03                	jne    40000d1a <strcmp+0x29>
40000d17:	eb 09                	jmp    40000d22 <strcmp+0x31>
40000d19:	40                   	inc    %eax
40000d1a:	89 c6                	mov    %eax,%esi
40000d1c:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
40000d20:	75 f7                	jne    40000d19 <strcmp+0x28>
40000d22:	89 f0                	mov    %esi,%eax
40000d24:	39 de                	cmp    %ebx,%esi
40000d26:	7e 02                	jle    40000d2a <strcmp+0x39>
40000d28:	89 d8                	mov    %ebx,%eax
40000d2a:	40                   	inc    %eax
40000d2b:	50                   	push   %eax
40000d2c:	51                   	push   %ecx
40000d2d:	52                   	push   %edx
40000d2e:	e8 77 ff ff ff       	call   40000caa <memcmp>
40000d33:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000d36:	5b                   	pop    %ebx
40000d37:	5e                   	pop    %esi
40000d38:	5d                   	pop    %ebp
40000d39:	c3                   	ret    

40000d3a <strlen>:
40000d3a:	55                   	push   %ebp
40000d3b:	31 d2                	xor    %edx,%edx
40000d3d:	89 e5                	mov    %esp,%ebp
40000d3f:	31 c0                	xor    %eax,%eax
40000d41:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d44:	85 c9                	test   %ecx,%ecx
40000d46:	75 03                	jne    40000d4b <strlen+0x11>
40000d48:	eb 09                	jmp    40000d53 <strlen+0x19>
40000d4a:	42                   	inc    %edx
40000d4b:	89 d0                	mov    %edx,%eax
40000d4d:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
40000d51:	75 f7                	jne    40000d4a <strlen+0x10>
40000d53:	5d                   	pop    %ebp
40000d54:	c3                   	ret    

40000d55 <strcpy>:
40000d55:	55                   	push   %ebp
40000d56:	31 d2                	xor    %edx,%edx
40000d58:	89 e5                	mov    %esp,%ebp
40000d5a:	56                   	push   %esi
40000d5b:	53                   	push   %ebx
40000d5c:	31 c9                	xor    %ecx,%ecx
40000d5e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d61:	8b 45 08             	mov    0x8(%ebp),%eax
40000d64:	85 db                	test   %ebx,%ebx
40000d66:	75 03                	jne    40000d6b <strcpy+0x16>
40000d68:	eb 09                	jmp    40000d73 <strcpy+0x1e>
40000d6a:	42                   	inc    %edx
40000d6b:	89 d1                	mov    %edx,%ecx
40000d6d:	80 3c 13 00          	cmpb   $0x0,(%ebx,%edx,1)
40000d71:	75 f7                	jne    40000d6a <strcpy+0x15>
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
40000d73:	89 ce                	mov    %ecx,%esi
40000d75:	46                   	inc    %esi
40000d76:	74 0c                	je     40000d84 <strcpy+0x2f>
40000d78:	31 d2                	xor    %edx,%edx
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
40000d7a:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
40000d7d:	88 0c 10             	mov    %cl,(%eax,%edx,1)
40000d80:	42                   	inc    %edx
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");

40000d81:	4e                   	dec    %esi
40000d82:	75 f6                	jne    40000d7a <strcpy+0x25>
40000d84:	5b                   	pop    %ebx
40000d85:	5e                   	pop    %esi
40000d86:	5d                   	pop    %ebp
40000d87:	c3                   	ret    

40000d88 <strtoknc>:
40000d88:	55                   	push   %ebp
40000d89:	31 c0                	xor    %eax,%eax
40000d8b:	89 e5                	mov    %esp,%ebp
40000d8d:	57                   	push   %edi
40000d8e:	56                   	push   %esi
40000d8f:	53                   	push   %ebx
40000d90:	83 ec 04             	sub    $0x4,%esp
40000d93:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000d96:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000d99:	85 db                	test   %ebx,%ebx
40000d9b:	75 06                	jne    40000da3 <strtoknc+0x1b>
40000d9d:	e9 83 00 00 00       	jmp    40000e25 <strtoknc+0x9d>
40000da2:	40                   	inc    %eax
40000da3:	89 c7                	mov    %eax,%edi
40000da5:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000da9:	75 f7                	jne    40000da2 <strtoknc+0x1a>
40000dab:	85 c0                	test   %eax,%eax
40000dad:	74 76                	je     40000e25 <strtoknc+0x9d>
40000daf:	85 c9                	test   %ecx,%ecx
40000db1:	75 0b                	jne    40000dbe <strtoknc+0x36>
40000db3:	83 3d 00 42 00 40 00 	cmpl   $0x0,0x40004200
40000dba:	75 08                	jne    40000dc4 <strtoknc+0x3c>
40000dbc:	eb 67                	jmp    40000e25 <strtoknc+0x9d>
40000dbe:	89 0d 00 42 00 40    	mov    %ecx,0x40004200
40000dc4:	a1 00 42 00 40       	mov    0x40004200,%eax
40000dc9:	31 c9                	xor    %ecx,%ecx
40000dcb:	eb 0b                	jmp    40000dd8 <strtoknc+0x50>
40000dcd:	8a 10                	mov    (%eax),%dl
40000dcf:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000dd2:	75 03                	jne    40000dd7 <strtoknc+0x4f>
40000dd4:	40                   	inc    %eax
40000dd5:	eb 05                	jmp    40000ddc <strtoknc+0x54>
40000dd7:	41                   	inc    %ecx
40000dd8:	39 f9                	cmp    %edi,%ecx
40000dda:	7c f1                	jl     40000dcd <strtoknc+0x45>
40000ddc:	39 f9                	cmp    %edi,%ecx
40000dde:	75 e9                	jne    40000dc9 <strtoknc+0x41>
40000de0:	a3 00 42 00 40       	mov    %eax,0x40004200
40000de5:	80 38 00             	cmpb   $0x0,(%eax)
40000de8:	75 28                	jne    40000e12 <strtoknc+0x8a>
40000dea:	c7 05 00 42 00 40 00 	movl   $0x0,0x40004200
40000df1:	00 00 00 
40000df4:	eb 2f                	jmp    40000e25 <strtoknc+0x9d>
40000df6:	8a 55 f3             	mov    -0xd(%ebp),%dl
40000df9:	3a 14 0b             	cmp    (%ebx,%ecx,1),%dl
40000dfc:	75 05                	jne    40000e03 <strtoknc+0x7b>
40000dfe:	c6 06 00             	movb   $0x0,(%esi)
40000e01:	eb 05                	jmp    40000e08 <strtoknc+0x80>
40000e03:	41                   	inc    %ecx
40000e04:	39 f9                	cmp    %edi,%ecx
40000e06:	7c ee                	jl     40000df6 <strtoknc+0x6e>
40000e08:	ff 05 00 42 00 40    	incl   0x40004200
40000e0e:	39 f9                	cmp    %edi,%ecx
40000e10:	7c 15                	jl     40000e27 <strtoknc+0x9f>
40000e12:	8b 35 00 42 00 40    	mov    0x40004200,%esi
40000e18:	8a 16                	mov    (%esi),%dl
40000e1a:	88 55 f3             	mov    %dl,-0xd(%ebp)
40000e1d:	84 d2                	test   %dl,%dl
40000e1f:	74 06                	je     40000e27 <strtoknc+0x9f>
40000e21:	31 c9                	xor    %ecx,%ecx
40000e23:	eb df                	jmp    40000e04 <strtoknc+0x7c>
40000e25:	31 c0                	xor    %eax,%eax
40000e27:	5a                   	pop    %edx
40000e28:	5b                   	pop    %ebx
40000e29:	5e                   	pop    %esi
40000e2a:	5f                   	pop    %edi
40000e2b:	5d                   	pop    %ebp
40000e2c:	c3                   	ret    

40000e2d <strclone>:
40000e2d:	55                   	push   %ebp
40000e2e:	31 c0                	xor    %eax,%eax
40000e30:	89 e5                	mov    %esp,%ebp
40000e32:	56                   	push   %esi
40000e33:	53                   	push   %ebx
40000e34:	31 d2                	xor    %edx,%edx
40000e36:	8b 5d 08             	mov    0x8(%ebp),%ebx
40000e39:	85 db                	test   %ebx,%ebx
40000e3b:	75 03                	jne    40000e40 <strclone+0x13>
40000e3d:	eb 09                	jmp    40000e48 <strclone+0x1b>
40000e3f:	40                   	inc    %eax
40000e40:	89 c2                	mov    %eax,%edx
40000e42:	80 3c 03 00          	cmpb   $0x0,(%ebx,%eax,1)
40000e46:	75 f7                	jne    40000e3f <strclone+0x12>
40000e48:	83 ec 0c             	sub    $0xc,%esp
40000e4b:	42                   	inc    %edx
40000e4c:	52                   	push   %edx
40000e4d:	e8 af 01 00 00       	call   40001001 <malloc>
40000e52:	59                   	pop    %ecx
40000e53:	89 c6                	mov    %eax,%esi
40000e55:	58                   	pop    %eax
40000e56:	53                   	push   %ebx
40000e57:	56                   	push   %esi
40000e58:	e8 f8 fe ff ff       	call   40000d55 <strcpy>
40000e5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000e60:	89 f0                	mov    %esi,%eax
40000e62:	5b                   	pop    %ebx
40000e63:	5e                   	pop    %esi
40000e64:	5d                   	pop    %ebp
40000e65:	c3                   	ret    

40000e66 <strtok>:
40000e66:	55                   	push   %ebp
40000e67:	89 e5                	mov    %esp,%ebp
40000e69:	56                   	push   %esi
40000e6a:	53                   	push   %ebx
40000e6b:	8b 75 08             	mov    0x8(%ebp),%esi
40000e6e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40000e71:	85 f6                	test   %esi,%esi
40000e73:	74 2e                	je     40000ea3 <strtok+0x3d>
40000e75:	a1 04 42 00 40       	mov    0x40004204,%eax
40000e7a:	85 c0                	test   %eax,%eax
40000e7c:	74 0c                	je     40000e8a <strtok+0x24>
40000e7e:	83 ec 0c             	sub    $0xc,%esp
40000e81:	50                   	push   %eax
40000e82:	e8 31 00 00 00       	call   40000eb8 <free>
40000e87:	83 c4 10             	add    $0x10,%esp
40000e8a:	83 ec 0c             	sub    $0xc,%esp
40000e8d:	56                   	push   %esi
40000e8e:	e8 9a ff ff ff       	call   40000e2d <strclone>
40000e93:	83 c4 10             	add    $0x10,%esp
40000e96:	a3 04 42 00 40       	mov    %eax,0x40004204
40000e9b:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000e9e:	89 45 08             	mov    %eax,0x8(%ebp)
40000ea1:	eb 0a                	jmp    40000ead <strtok+0x47>
40000ea3:	89 5d 0c             	mov    %ebx,0xc(%ebp)
40000ea6:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
40000ead:	8d 65 f8             	lea    -0x8(%ebp),%esp
40000eb0:	5b                   	pop    %ebx
40000eb1:	5e                   	pop    %esi
40000eb2:	5d                   	pop    %ebp
40000eb3:	e9 d0 fe ff ff       	jmp    40000d88 <strtoknc>

40000eb8 <free>:
40000eb8:	55                   	push   %ebp
40000eb9:	89 e5                	mov    %esp,%ebp
40000ebb:	57                   	push   %edi
40000ebc:	56                   	push   %esi
40000ebd:	53                   	push   %ebx
40000ebe:	83 ec 08             	sub    $0x8,%esp
40000ec1:	8b 15 0c 42 00 40    	mov    0x4000420c,%edx
40000ec7:	8b 4d 08             	mov    0x8(%ebp),%ecx
40000eca:	89 d0                	mov    %edx,%eax
40000ecc:	e9 b8 00 00 00       	jmp    40000f89 <free+0xd1>
40000ed1:	3b 48 04             	cmp    0x4(%eax),%ecx
40000ed4:	0f 85 ac 00 00 00    	jne    40000f86 <free+0xce>
40000eda:	31 c9                	xor    %ecx,%ecx
40000edc:	eb 23                	jmp    40000f01 <free+0x49>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000ede:	39 c2                	cmp    %eax,%edx
40000ee0:	75 1a                	jne    40000efc <free+0x44>
    return (m_z << 16) + m_w;
40000ee2:	85 c9                	test   %ecx,%ecx
40000ee4:	8b 50 08             	mov    0x8(%eax),%edx
40000ee7:	75 0e                	jne    40000ef7 <free+0x3f>
}
40000ee9:	89 15 0c 42 00 40    	mov    %edx,0x4000420c
40000eef:	8b 0d 10 42 00 40    	mov    0x40004210,%ecx
40000ef5:	eb 10                	jmp    40000f07 <free+0x4f>

int main(int argc, char* args[])
{
40000ef7:	89 51 08             	mov    %edx,0x8(%ecx)
40000efa:	eb f3                	jmp    40000eef <free+0x37>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000efc:	89 d1                	mov    %edx,%ecx
40000efe:	8b 52 08             	mov    0x8(%edx),%edx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f01:	85 d2                	test   %edx,%edx
40000f03:	75 d9                	jne    40000ede <free+0x26>
40000f05:	eb e8                	jmp    40000eef <free+0x37>
40000f07:	89 ca                	mov    %ecx,%edx
40000f09:	eb 6d                	jmp    40000f78 <free+0xc0>
40000f0b:	8b 5a 04             	mov    0x4(%edx),%ebx
40000f0e:	8b 32                	mov    (%edx),%esi
40000f10:	8b 78 04             	mov    0x4(%eax),%edi
40000f13:	89 7d ec             	mov    %edi,-0x14(%ebp)
40000f16:	8d 3c 1e             	lea    (%esi,%ebx,1),%edi
40000f19:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f1c:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f1f:	39 7d f0             	cmp    %edi,-0x10(%ebp)
40000f22:	75 18                	jne    40000f3c <free+0x84>
40000f24:	89 58 04             	mov    %ebx,0x4(%eax)
40000f27:	31 f6                	xor    %esi,%esi
40000f29:	89 cb                	mov    %ecx,%ebx
40000f2b:	eb 09                	jmp    40000f36 <free+0x7e>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f2d:	39 d3                	cmp    %edx,%ebx
40000f2f:	74 29                	je     40000f5a <free+0xa2>
{
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f31:	89 de                	mov    %ebx,%esi
40000f33:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f36:	85 db                	test   %ebx,%ebx
40000f38:	75 f3                	jne    40000f2d <free+0x75>
40000f3a:	eb cb                	jmp    40000f07 <free+0x4f>
40000f3c:	8b 38                	mov    (%eax),%edi
40000f3e:	89 7d f0             	mov    %edi,-0x10(%ebp)
40000f41:	8b 7d ec             	mov    -0x14(%ebp),%edi
40000f44:	03 7d f0             	add    -0x10(%ebp),%edi
40000f47:	39 fb                	cmp    %edi,%ebx
40000f49:	75 2a                	jne    40000f75 <free+0xbd>
40000f4b:	03 75 f0             	add    -0x10(%ebp),%esi
40000f4e:	89 cb                	mov    %ecx,%ebx
40000f50:	89 30                	mov    %esi,(%eax)
40000f52:	31 f6                	xor    %esi,%esi
40000f54:	eb 19                	jmp    40000f6f <free+0xb7>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
40000f56:	39 d3                	cmp    %edx,%ebx
40000f58:	75 10                	jne    40000f6a <free+0xb2>
    return (m_z << 16) + m_w;
40000f5a:	85 f6                	test   %esi,%esi
40000f5c:	8b 53 08             	mov    0x8(%ebx),%edx
40000f5f:	75 04                	jne    40000f65 <free+0xad>
}
40000f61:	89 d1                	mov    %edx,%ecx
40000f63:	eb a2                	jmp    40000f07 <free+0x4f>

int main(int argc, char* args[])
{
40000f65:	89 56 08             	mov    %edx,0x8(%esi)
40000f68:	eb 9d                	jmp    40000f07 <free+0x4f>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40000f6a:	89 de                	mov    %ebx,%esi
40000f6c:	8b 5b 08             	mov    0x8(%ebx),%ebx
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
40000f6f:	85 db                	test   %ebx,%ebx
40000f71:	75 e3                	jne    40000f56 <free+0x9e>
40000f73:	eb 92                	jmp    40000f07 <free+0x4f>
40000f75:	8b 52 08             	mov    0x8(%edx),%edx
40000f78:	85 d2                	test   %edx,%edx
40000f7a:	75 8f                	jne    40000f0b <free+0x53>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40000f7c:	89 48 08             	mov    %ecx,0x8(%eax)
        }
40000f7f:	a3 10 42 00 40       	mov    %eax,0x40004210
40000f84:	eb 0b                	jmp    40000f91 <free+0xd9>
40000f86:	8b 40 08             	mov    0x8(%eax),%eax
40000f89:	85 c0                	test   %eax,%eax
40000f8b:	0f 85 40 ff ff ff    	jne    40000ed1 <free+0x19>
40000f91:	58                   	pop    %eax
40000f92:	5a                   	pop    %edx
40000f93:	5b                   	pop    %ebx
40000f94:	5e                   	pop    %esi
40000f95:	5f                   	pop    %edi
40000f96:	5d                   	pop    %ebp
40000f97:	c3                   	ret    

40000f98 <pop_unused_node>:
40000f98:	55                   	push   %ebp
40000f99:	89 e5                	mov    %esp,%ebp
40000f9b:	53                   	push   %ebx
40000f9c:	83 ec 04             	sub    $0x4,%esp
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

40000f9f:	a1 08 42 00 40       	mov    0x40004208,%eax
40000fa4:	eb 45                	jmp    40000feb <pop_unused_node+0x53>
40000fa6:	83 ec 0c             	sub    $0xc,%esp
40000fa9:	6a 01                	push   $0x1
40000fab:	e8 5b 02 00 00       	call   4000120b <vmm_alloc_cont>
40000fb0:	83 c4 0c             	add    $0xc,%esp
40000fb3:	89 c3                	mov    %eax,%ebx
40000fb5:	68 00 10 00 00       	push   $0x1000
40000fba:	6a 00                	push   $0x0
40000fbc:	50                   	push   %eax
40000fbd:	e8 a6 fc ff ff       	call   40000c68 <memset>
40000fc2:	8b 15 08 42 00 40    	mov    0x40004208,%edx
40000fc8:	8d 43 0c             	lea    0xc(%ebx),%eax
40000fcb:	8d 8b fc 0f 00 00    	lea    0xffc(%ebx),%ecx
40000fd1:	83 c4 10             	add    $0x10,%esp

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40000fd4:	89 50 08             	mov    %edx,0x8(%eax)
40000fd7:	89 c2                	mov    %eax,%edx
40000fd9:	83 c0 0c             	add    $0xc,%eax
40000fdc:	39 c8                	cmp    %ecx,%eax
40000fde:	75 f4                	jne    40000fd4 <pop_unused_node+0x3c>
40000fe0:	8d 83 f0 0f 00 00    	lea    0xff0(%ebx),%eax
40000fe6:	a3 08 42 00 40       	mov    %eax,0x40004208
            rnd[i] = get_next();
        }

        fwrite(out, rnd, 128 * sizeof(uint32_t));
    }

40000feb:	85 c0                	test   %eax,%eax
40000fed:	74 b7                	je     40000fa6 <pop_unused_node+0xe>
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000fef:	8b 50 08             	mov    0x8(%eax),%edx
40000ff2:	85 c0                	test   %eax,%eax
static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}
40000ff4:	89 15 08 42 00 40    	mov    %edx,0x40004208
40000ffa:	74 aa                	je     40000fa6 <pop_unused_node+0xe>
40000ffc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
40000fff:	c9                   	leave  
40001000:	c3                   	ret    

40001001 <malloc>:
40001001:	55                   	push   %ebp
40001002:	89 e5                	mov    %esp,%ebp
40001004:	57                   	push   %edi
40001005:	56                   	push   %esi
40001006:	53                   	push   %ebx
40001007:	83 ec 1c             	sub    $0x1c,%esp
4000100a:	a1 10 42 00 40       	mov    0x40004210,%eax
4000100f:	8b 75 08             	mov    0x8(%ebp),%esi
40001012:	89 c3                	mov    %eax,%ebx
40001014:	eb 07                	jmp    4000101d <malloc+0x1c>
40001016:	39 33                	cmp    %esi,(%ebx)
40001018:	73 0c                	jae    40001026 <malloc+0x25>
4000101a:	8b 5b 08             	mov    0x8(%ebx),%ebx
4000101d:	85 db                	test   %ebx,%ebx
4000101f:	75 f5                	jne    40001016 <malloc+0x15>
40001021:	e9 93 00 00 00       	jmp    400010b9 <malloc+0xb8>
40001026:	8b 3b                	mov    (%ebx),%edi
40001028:	31 d2                	xor    %edx,%edx
4000102a:	29 f7                	sub    %esi,%edi
4000102c:	89 33                	mov    %esi,(%ebx)
4000102e:	eb 4b                	jmp    4000107b <malloc+0x7a>
40001030:	e8 63 ff ff ff       	call   40000f98 <pop_unused_node>
40001035:	8b 13                	mov    (%ebx),%edx
40001037:	03 53 04             	add    0x4(%ebx),%edx
4000103a:	29 f7                	sub    %esi,%edi
4000103c:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
4000103f:	8b 15 10 42 00 40    	mov    0x40004210,%edx
40001045:	89 50 08             	mov    %edx,0x8(%eax)
40001048:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
4000104a:	a3 10 42 00 40       	mov    %eax,0x40004210

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
4000104f:	a1 0c 42 00 40       	mov    0x4000420c,%eax
40001054:	89 43 08             	mov    %eax,0x8(%ebx)
        }
40001057:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
4000105d:	eb 4f                	jmp    400010ae <malloc+0xad>
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000105f:	39 d8                	cmp    %ebx,%eax
40001061:	75 13                	jne    40001076 <malloc+0x75>
    return (m_z << 16) + m_w;
40001063:	85 d2                	test   %edx,%edx
40001065:	8b 43 08             	mov    0x8(%ebx),%eax
40001068:	75 07                	jne    40001071 <malloc+0x70>
}
4000106a:	a3 10 42 00 40       	mov    %eax,0x40004210
4000106f:	eb 0e                	jmp    4000107f <malloc+0x7e>

int main(int argc, char* args[])
{
40001071:	89 42 08             	mov    %eax,0x8(%edx)
40001074:	eb 09                	jmp    4000107f <malloc+0x7e>
    HANDLE out = fmkfifo("/dev/urandom");

    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);
40001076:	89 c2                	mov    %eax,%edx
40001078:	8b 40 08             	mov    0x8(%eax),%eax
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
4000107b:	85 c0                	test   %eax,%eax
4000107d:	75 e0                	jne    4000105f <malloc+0x5e>

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
4000107f:	a1 0c 42 00 40       	mov    0x4000420c,%eax
40001084:	85 ff                	test   %edi,%edi

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
40001086:	89 43 08             	mov    %eax,0x8(%ebx)
        }
40001089:	89 1d 0c 42 00 40    	mov    %ebx,0x4000420c
4000108f:	74 1d                	je     400010ae <malloc+0xad>
40001091:	e8 02 ff ff ff       	call   40000f98 <pop_unused_node>
40001096:	8b 13                	mov    (%ebx),%edx
40001098:	03 53 04             	add    0x4(%ebx),%edx
4000109b:	89 50 04             	mov    %edx,0x4(%eax)

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
4000109e:	8b 15 10 42 00 40    	mov    0x40004210,%edx
400010a4:	89 50 08             	mov    %edx,0x8(%eax)
400010a7:	89 38                	mov    %edi,(%eax)
    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }
400010a9:	a3 10 42 00 40       	mov    %eax,0x40004210
400010ae:	8b 43 04             	mov    0x4(%ebx),%eax
400010b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
400010b4:	5b                   	pop    %ebx
400010b5:	5e                   	pop    %esi
400010b6:	5f                   	pop    %edi
400010b7:	5d                   	pop    %ebp
400010b8:	c3                   	ret    
400010b9:	89 f0                	mov    %esi,%eax
400010bb:	89 f7                	mov    %esi,%edi
400010bd:	c1 ef 0c             	shr    $0xc,%edi
400010c0:	25 ff 0f 00 00       	and    $0xfff,%eax
400010c5:	83 f8 01             	cmp    $0x1,%eax
400010c8:	83 df ff             	sbb    $0xffffffff,%edi
400010cb:	83 ec 0c             	sub    $0xc,%esp
400010ce:	57                   	push   %edi
400010cf:	e8 37 01 00 00       	call   4000120b <vmm_alloc_cont>
400010d4:	c1 e7 0c             	shl    $0xc,%edi
400010d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
400010da:	e8 b9 fe ff ff       	call   40000f98 <pop_unused_node>
400010df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
400010e2:	83 c4 10             	add    $0x10,%esp
400010e5:	89 c3                	mov    %eax,%ebx
400010e7:	89 50 04             	mov    %edx,0x4(%eax)
400010ea:	89 30                	mov    %esi,(%eax)
400010ec:	39 f7                	cmp    %esi,%edi
400010ee:	0f 86 5b ff ff ff    	jbe    4000104f <malloc+0x4e>
400010f4:	e9 37 ff ff ff       	jmp    40001030 <malloc+0x2f>

400010f9 <realloc>:
400010f9:	55                   	push   %ebp
400010fa:	89 e5                	mov    %esp,%ebp
400010fc:	56                   	push   %esi
400010fd:	53                   	push   %ebx
400010fe:	8b 1d 0c 42 00 40    	mov    0x4000420c,%ebx
40001104:	8b 55 08             	mov    0x8(%ebp),%edx
40001107:	8b 45 0c             	mov    0xc(%ebp),%eax
4000110a:	eb 3e                	jmp    4000114a <realloc+0x51>
4000110c:	3b 53 04             	cmp    0x4(%ebx),%edx
4000110f:	75 36                	jne    40001147 <realloc+0x4e>
40001111:	85 c0                	test   %eax,%eax
40001113:	75 0b                	jne    40001120 <realloc+0x27>
40001115:	52                   	push   %edx
40001116:	31 f6                	xor    %esi,%esi
40001118:	e8 9b fd ff ff       	call   40000eb8 <free>
4000111d:	5b                   	pop    %ebx
4000111e:	eb 30                	jmp    40001150 <realloc+0x57>
40001120:	83 ec 0c             	sub    $0xc,%esp
40001123:	50                   	push   %eax
40001124:	e8 d8 fe ff ff       	call   40001001 <malloc>
40001129:	83 c4 0c             	add    $0xc,%esp
4000112c:	89 c6                	mov    %eax,%esi
4000112e:	ff 33                	pushl  (%ebx)
40001130:	ff 73 04             	pushl  0x4(%ebx)
40001133:	50                   	push   %eax
40001134:	e8 4b fb ff ff       	call   40000c84 <memcpy>
40001139:	59                   	pop    %ecx
4000113a:	ff 73 04             	pushl  0x4(%ebx)
4000113d:	e8 76 fd ff ff       	call   40000eb8 <free>
40001142:	83 c4 10             	add    $0x10,%esp
40001145:	eb 09                	jmp    40001150 <realloc+0x57>
40001147:	8b 5b 08             	mov    0x8(%ebx),%ebx
4000114a:	85 db                	test   %ebx,%ebx
4000114c:	75 be                	jne    4000110c <realloc+0x13>
4000114e:	31 f6                	xor    %esi,%esi
40001150:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001153:	89 f0                	mov    %esi,%eax
40001155:	5b                   	pop    %ebx
40001156:	5e                   	pop    %esi
40001157:	5d                   	pop    %ebp
40001158:	c3                   	ret    

40001159 <calloc>:
40001159:	55                   	push   %ebp
4000115a:	89 e5                	mov    %esp,%ebp
4000115c:	56                   	push   %esi
4000115d:	53                   	push   %ebx
4000115e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
40001161:	83 ec 0c             	sub    $0xc,%esp
40001164:	0f af 5d 08          	imul   0x8(%ebp),%ebx
40001168:	53                   	push   %ebx
40001169:	e8 93 fe ff ff       	call   40001001 <malloc>
4000116e:	83 c4 10             	add    $0x10,%esp
40001171:	89 c6                	mov    %eax,%esi
40001173:	85 c0                	test   %eax,%eax
40001175:	74 0d                	je     40001184 <calloc+0x2b>
40001177:	50                   	push   %eax
40001178:	53                   	push   %ebx
40001179:	6a 00                	push   $0x0
4000117b:	56                   	push   %esi
4000117c:	e8 e7 fa ff ff       	call   40000c68 <memset>
40001181:	83 c4 10             	add    $0x10,%esp
40001184:	8d 65 f8             	lea    -0x8(%ebp),%esp
40001187:	89 f0                	mov    %esi,%eax
40001189:	5b                   	pop    %ebx
4000118a:	5e                   	pop    %esi
4000118b:	5d                   	pop    %ebp
4000118c:	c3                   	ret    
4000118d:	00 00                	add    %al,(%eax)
	...

40001190 <print_memstat>:

    while(1) {
        for(int i = 0; i < 128; i++) {
            rnd[i] = get_next();
        }

40001190:	55                   	push   %ebp
40001191:	89 e5                	mov    %esp,%ebp
40001193:	83 ec 34             	sub    $0x34,%esp
}
40001196:	8d 45 e0             	lea    -0x20(%ebp),%eax

    return 0;
}
40001199:	c7 45 e0 cd 00 00 00 	movl   $0xcd,-0x20(%ebp)
400011a0:	50                   	push   %eax

    return 0;
}
400011a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
400011a8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
400011c4:	e8 7f 00 00 00       	call   40001248 <syscall>
400011c9:	83 c4 10             	add    $0x10,%esp
400011cc:	c9                   	leave  
400011cd:	c3                   	ret    

400011ce <vmm_free>:
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
400011ce:	55                   	push   %ebp
400011cf:	89 e5                	mov    %esp,%ebp
400011d1:	83 ec 34             	sub    $0x34,%esp
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

400011d4:	8b 45 08             	mov    0x8(%ebp),%eax
400011d7:	c7 45 e0 cc 00 00 00 	movl   $0xcc,-0x20(%ebp)
400011de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
400011e1:	8d 45 e0             	lea    -0x20(%ebp),%eax
400011e4:	50                   	push   %eax
    HANDLE initCtrl = fopen("/var/cntrl/init", FM_WRITE);
    fwrite(initCtrl, &(char){'K'}, sizeof(char));
    fclose(initCtrl);

    uint32_t* rnd = malloc(128 * sizeof(uint32_t));

400011e5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
400011ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
400011f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
400011fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(1) {
        for(int i = 0; i < 128; i++) {
40001201:	e8 42 00 00 00       	call   40001248 <syscall>
40001206:	83 c4 10             	add    $0x10,%esp
            rnd[i] = get_next();
40001209:	c9                   	leave  
4000120a:	c3                   	ret    

4000120b <vmm_alloc_cont>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
4000120b:	55                   	push   %ebp
4000120c:	89 e5                	mov    %esp,%ebp
4000120e:	83 ec 34             	sub    $0x34,%esp
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40001211:	8b 45 08             	mov    0x8(%ebp),%eax
40001214:	c7 45 e0 cb 00 00 00 	movl   $0xcb,-0x20(%ebp)
4000121b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000121e:	8d 45 e0             	lea    -0x20(%ebp),%eax
40001221:	50                   	push   %eax
#include "process.h"
 
uint32_t m_z = 1, m_w = 2;

static uint32_t get_next()
{
40001222:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
40001229:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
40001230:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
40001237:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
4000123e:	e8 05 00 00 00       	call   40001248 <syscall>
    return (m_z << 16) + m_w;
}

40001243:	8b 45 e0             	mov    -0x20(%ebp),%eax
40001246:	c9                   	leave  
40001247:	c3                   	ret    

40001248 <syscall>:
#include "stdint.h"
#include "string.h"
#include "stdio.h"
40001248:	55                   	push   %ebp
40001249:	89 e5                	mov    %esp,%ebp
4000124b:	57                   	push   %edi
4000124c:	56                   	push   %esi
4000124d:	53                   	push   %ebx
4000124e:	83 ec 10             	sub    $0x10,%esp
#include "stdlib.h"
40001251:	8b 55 08             	mov    0x8(%ebp),%edx
40001254:	8b 45 08             	mov    0x8(%ebp),%eax
40001257:	8b 72 0c             	mov    0xc(%edx),%esi
4000125a:	8b 00                	mov    (%eax),%eax
4000125c:	89 75 e4             	mov    %esi,-0x1c(%ebp)
4000125f:	8b 5a 04             	mov    0x4(%edx),%ebx
40001262:	8b 4a 08             	mov    0x8(%edx),%ecx
40001265:	8b 72 10             	mov    0x10(%edx),%esi
40001268:	8b 7a 14             	mov    0x14(%edx),%edi
4000126b:	89 45 ec             	mov    %eax,-0x14(%ebp)
4000126e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
40001271:	cd 30                	int    $0x30
40001273:	89 55 e8             	mov    %edx,-0x18(%ebp)
40001276:	8b 55 08             	mov    0x8(%ebp),%edx
40001279:	89 45 f0             	mov    %eax,-0x10(%ebp)
4000127c:	89 02                	mov    %eax,(%edx)
4000127e:	8b 45 e8             	mov    -0x18(%ebp),%eax
40001281:	89 5a 04             	mov    %ebx,0x4(%edx)
40001284:	89 4a 08             	mov    %ecx,0x8(%edx)
40001287:	89 42 0c             	mov    %eax,0xc(%edx)
4000128a:	89 72 10             	mov    %esi,0x10(%edx)
4000128d:	89 7a 14             	mov    %edi,0x14(%edx)
    return (m_z << 16) + m_w;
}

int main(int argc, char* args[])
{
    HANDLE out = fmkfifo("/dev/urandom");
40001290:	83 c4 10             	add    $0x10,%esp
40001293:	5b                   	pop    %ebx
40001294:	5e                   	pop    %esi
40001295:	5f                   	pop    %edi
40001296:	5d                   	pop    %ebp
40001297:	c3                   	ret    
