
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 0f 02 00 00       	call   100230 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 44 30 00 00       	call   103070 <pmm_init>
  10002c:	8d 05 c8 90 10 00    	lea    0x1090c8,%eax
  100032:	8d 0d eb 90 10 00    	lea    0x1090eb,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 6c 02 00 00       	call   1002b0 <kprintf>
  100044:	8d 0d ff 90 10 00    	lea    0x1090ff,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 5b 02 00 00       	call   1002b0 <kprintf>
  100055:	8d 0d 3e 91 10 00    	lea    0x10913e,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 4a 02 00 00       	call   1002b0 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 b2 0f 00 00       	call   101020 <init_gdt>
  10006e:	8d 05 53 91 10 00    	lea    0x109153,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 34 02 00 00       	call   1002b0 <kprintf>
  10007c:	8d 0d 68 91 10 00    	lea    0x109168,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 b3 11 00 00       	call   101240 <init_idt>

	kprintf("Initializing Kernel...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 18 02 00 00       	call   1002b0 <kprintf>

	pmm_print_stats();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 e0 2d 00 00       	call   102e80 <pmm_print_stats>

	kernel_main(mb_info);
  1000a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000a3:	89 04 24             	mov    %eax,(%esp)
  1000a6:	e8 15 2a 00 00       	call   102ac0 <kernel_main>

	return;
  1000ab:	83 c4 28             	add    $0x28,%esp
  1000ae:	5d                   	pop    %ebp
  1000af:	c3                   	ret    

001000b0 <in_cod>:
#include "catofdeath.h"

static uint32_t icod = 0;

uint32_t in_cod() {
  1000b0:	55                   	push   %ebp
  1000b1:	89 e5                	mov    %esp,%ebp
    return icod;
  1000b3:	a1 00 a0 10 00       	mov    0x10a000,%eax
  1000b8:	5d                   	pop    %ebp
  1000b9:	c3                   	ret    
  1000ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001000c0 <show_cod>:
}

void show_cod(struct cpu_state* cpu, char* fstr) {
  1000c0:	55                   	push   %ebp
  1000c1:	89 e5                	mov    %esp,%ebp
  1000c3:	56                   	push   %esi
  1000c4:	83 ec 24             	sub    $0x24,%esp
  1000c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1000cd:	ba 04 00 00 00       	mov    $0x4,%edx
  1000d2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1000d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    icod = 1;
  1000d8:	c7 05 00 a0 10 00 01 	movl   $0x1,0x10a000
  1000df:	00 00 00 
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  1000e2:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1000e9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1000ec:	e8 9f 01 00 00       	call   100290 <setclr>
    kprintf(fstr);
  1000f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000f4:	89 04 24             	mov    %eax,(%esp)
  1000f7:	e8 b4 01 00 00       	call   1002b0 <kprintf>
  1000fc:	8d 0d 80 91 10 00    	lea    0x109180,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  100102:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100105:	8b 52 1c             	mov    0x1c(%edx),%edx
  100108:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10010b:	8b 76 20             	mov    0x20(%esi),%esi
  10010e:	89 0c 24             	mov    %ecx,(%esp)
  100111:	89 54 24 04          	mov    %edx,0x4(%esp)
  100115:	89 74 24 08          	mov    %esi,0x8(%esp)
  100119:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011c:	e8 8f 01 00 00       	call   1002b0 <kprintf>
    show_dump(cpu);
  100121:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100124:	89 0c 24             	mov    %ecx,(%esp)
  100127:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10012a:	e8 11 00 00 00       	call   100140 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  10012f:	fa                   	cli    
  100130:	f4                   	hlt    
    }
  100131:	e9 f9 ff ff ff       	jmp    10012f <show_cod+0x6f>
  100136:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10013d:	00 00 00 

00100140 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  100140:	55                   	push   %ebp
  100141:	89 e5                	mov    %esp,%ebp
  100143:	53                   	push   %ebx
  100144:	57                   	push   %edi
  100145:	56                   	push   %esi
  100146:	83 ec 2c             	sub    $0x2c,%esp
  100149:	8b 45 08             	mov    0x8(%ebp),%eax
  10014c:	8d 0d a5 91 10 00    	lea    0x1091a5,%ecx
  100152:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  100155:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100158:	8b 00                	mov    (%eax),%eax
  10015a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10015d:	8b 52 04             	mov    0x4(%edx),%edx
  100160:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100163:	8b 76 08             	mov    0x8(%esi),%esi
  100166:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100169:	8b 7f 0c             	mov    0xc(%edi),%edi
  10016c:	89 0c 24             	mov    %ecx,(%esp)
  10016f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100173:	89 54 24 08          	mov    %edx,0x8(%esp)
  100177:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10017b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10017f:	e8 2c 01 00 00       	call   1002b0 <kprintf>
  100184:	8d 0d c6 91 10 00    	lea    0x1091c6,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10018a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10018d:	8b 52 10             	mov    0x10(%edx),%edx
  100190:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100193:	8b 76 14             	mov    0x14(%esi),%esi
  100196:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100199:	8b 7f 18             	mov    0x18(%edi),%edi
  10019c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10019f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  1001a2:	89 0c 24             	mov    %ecx,(%esp)
  1001a5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001a9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001ad:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001b1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1001b8:	e8 f3 00 00 00       	call   1002b0 <kprintf>
  1001bd:	8d 0d e7 91 10 00    	lea    0x1091e7,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  1001c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1001c6:	8b 52 28             	mov    0x28(%edx),%edx
  1001c9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1001cc:	8b 76 2c             	mov    0x2c(%esi),%esi
  1001cf:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1001d2:	8b 7f 30             	mov    0x30(%edi),%edi
  1001d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1001d8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1001db:	89 0c 24             	mov    %ecx,(%esp)
  1001de:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001e2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001e6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001ea:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1001f1:	e8 ba 00 00 00       	call   1002b0 <kprintf>
  1001f6:	8d 0d 09 92 10 00    	lea    0x109209,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  1001fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  100203:	0f 20 d2             	mov    %cr2,%edx
  100206:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  100209:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10020c:	89 0c 24             	mov    %ecx,(%esp)
  10020f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100213:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100216:	e8 95 00 00 00       	call   1002b0 <kprintf>
}
  10021b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10021e:	83 c4 2c             	add    $0x2c,%esp
  100221:	5e                   	pop    %esi
  100222:	5f                   	pop    %edi
  100223:	5b                   	pop    %ebx
  100224:	5d                   	pop    %ebp
  100225:	c3                   	ret    
  100226:	66 90                	xchg   %ax,%ax
  100228:	66 90                	xchg   %ax,%ax
  10022a:	66 90                	xchg   %ax,%ax
  10022c:	66 90                	xchg   %ax,%ax
  10022e:	66 90                	xchg   %ax,%ax

00100230 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100233:	50                   	push   %eax
  100234:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10023b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  100242:	0f 8d 1d 00 00 00    	jge    100265 <clrscr+0x35>
        video[i] = 0;
  100248:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10024b:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  100251:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100255:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100258:	05 01 00 00 00       	add    $0x1,%eax
  10025d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100260:	e9 d6 ff ff ff       	jmp    10023b <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100265:	c6 05 04 80 10 00 07 	movb   $0x7,0x108004

    x = y = 0;
  10026c:	c7 05 04 a0 10 00 00 	movl   $0x0,0x10a004
  100273:	00 00 00 
  100276:	c7 05 08 a0 10 00 00 	movl   $0x0,0x10a008
  10027d:	00 00 00 
}
  100280:	83 c4 04             	add    $0x4,%esp
  100283:	5d                   	pop    %ebp
  100284:	c3                   	ret    
  100285:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10028c:	00 00 00 00 

00100290 <setclr>:

void setclr(char clr) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	8a 45 08             	mov    0x8(%ebp),%al
  100297:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10029a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10029d:	a2 04 80 10 00       	mov    %al,0x108004
}
  1002a2:	83 c4 04             	add    $0x4,%esp
  1002a5:	5d                   	pop    %ebp
  1002a6:	c3                   	ret    
  1002a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1002ae:	00 00 

001002b0 <kprintf>:

int kprintf(const char* fmt, ...) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	83 ec 58             	sub    $0x58,%esp
  1002b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1002b9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1002bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002bf:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  1002c2:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  1002c4:	c7 05 0c a0 10 00 00 	movl   $0x0,0x10a00c
  1002cb:	00 00 00 
    while (*fmt) {
  1002ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002d1:	80 38 00             	cmpb   $0x0,(%eax)
  1002d4:	0f 84 dd 01 00 00    	je     1004b7 <kprintf+0x207>
        if (*fmt == '%') {
  1002da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002dd:	0f be 00             	movsbl (%eax),%eax
  1002e0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1002e5:	0f 85 ae 01 00 00    	jne    100499 <kprintf+0x1e9>
            fmt++;
  1002eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ee:	89 c1                	mov    %eax,%ecx
  1002f0:	41                   	inc    %ecx
  1002f1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  1002f4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1002f8:	89 c1                	mov    %eax,%ecx
  1002fa:	83 e9 24             	sub    $0x24,%ecx
  1002fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100300:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100303:	0f 8f 15 00 00 00    	jg     10031e <kprintf+0x6e>
  100309:	e9 00 00 00 00       	jmp    10030e <kprintf+0x5e>
  10030e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100311:	85 c0                	test   %eax,%eax
  100313:	0f 84 54 01 00 00    	je     10046d <kprintf+0x1bd>
  100319:	e9 54 01 00 00       	jmp    100472 <kprintf+0x1c2>
  10031e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100321:	83 e8 62             	sub    $0x62,%eax
  100324:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100327:	0f 8f 19 00 00 00    	jg     100346 <kprintf+0x96>
  10032d:	e9 00 00 00 00       	jmp    100332 <kprintf+0x82>
  100332:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100335:	83 e8 25             	sub    $0x25,%eax
  100338:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10033b:	0f 84 13 01 00 00    	je     100454 <kprintf+0x1a4>
  100341:	e9 2c 01 00 00       	jmp    100472 <kprintf+0x1c2>
  100346:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100349:	83 e8 6f             	sub    $0x6f,%eax
  10034c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10034f:	0f 8f 2d 00 00 00    	jg     100382 <kprintf+0xd2>
  100355:	e9 00 00 00 00       	jmp    10035a <kprintf+0xaa>
  10035a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10035d:	83 e8 63             	sub    $0x63,%eax
  100360:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100363:	0f 84 c5 00 00 00    	je     10042e <kprintf+0x17e>
  100369:	e9 00 00 00 00       	jmp    10036e <kprintf+0xbe>
  10036e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100371:	83 e8 64             	sub    $0x64,%eax
  100374:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100377:	0f 84 4b 00 00 00    	je     1003c8 <kprintf+0x118>
  10037d:	e9 f0 00 00 00       	jmp    100472 <kprintf+0x1c2>
  100382:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100385:	83 c0 90             	add    $0xffffff90,%eax
  100388:	89 c1                	mov    %eax,%ecx
  10038a:	83 e9 08             	sub    $0x8,%ecx
  10038d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100390:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100393:	0f 87 d9 00 00 00    	ja     100472 <kprintf+0x1c2>
  100399:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10039c:	8b 0c 85 00 90 10 00 	mov    0x109000(,%eax,4),%ecx
  1003a3:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  1003a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1003a8:	89 c1                	mov    %eax,%ecx
  1003aa:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1003b0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1003b3:	8b 00                	mov    (%eax),%eax
  1003b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  1003b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003bb:	89 04 24             	mov    %eax,(%esp)
  1003be:	e8 0d 01 00 00       	call   1004d0 <kputs>
                break;
  1003c3:	e9 cc 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003c8:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  1003cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003d0:	89 ca                	mov    %ecx,%edx
  1003d2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1003d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1003db:	8b 09                	mov    (%ecx),%ecx
  1003dd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  1003e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003e3:	89 0c 24             	mov    %ecx,(%esp)
  1003e6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1003ed:	00 
  1003ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1003f1:	e8 1a 01 00 00       	call   100510 <kputn>
                break;
  1003f6:	e9 99 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003fb:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  100400:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100403:	89 ca                	mov    %ecx,%edx
  100405:	81 c2 04 00 00 00    	add    $0x4,%edx
  10040b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10040e:	8b 09                	mov    (%ecx),%ecx
  100410:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  100413:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100416:	89 0c 24             	mov    %ecx,(%esp)
  100419:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100420:	00 
  100421:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100424:	e8 e7 00 00 00       	call   100510 <kputn>
                break;
  100429:	e9 66 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  10042e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100431:	89 c1                	mov    %eax,%ecx
  100433:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100439:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10043c:	8b 00                	mov    (%eax),%eax
  10043e:	88 c2                	mov    %al,%dl
  100440:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  100443:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100447:	89 04 24             	mov    %eax,(%esp)
  10044a:	e8 61 01 00 00       	call   1005b0 <kputc>
                break;
  10044f:	e9 40 00 00 00       	jmp    100494 <kprintf+0x1e4>
  100454:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  100459:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100460:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100463:	e8 48 01 00 00       	call   1005b0 <kputc>
                break;
  100468:	e9 27 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case '\0':
                goto out;
  10046d:	e9 4a 00 00 00       	jmp    1004bc <kprintf+0x20c>
  100472:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100477:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10047e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100481:	e8 2a 01 00 00       	call   1005b0 <kputc>
                kputc(*fmt);
  100486:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100489:	0f be 00             	movsbl (%eax),%eax
  10048c:	89 04 24             	mov    %eax,(%esp)
  10048f:	e8 1c 01 00 00       	call   1005b0 <kputc>
                break;
            }
        } else {
  100494:	e9 0e 00 00 00       	jmp    1004a7 <kprintf+0x1f7>
            kputc(*fmt);
  100499:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10049c:	0f be 00             	movsbl (%eax),%eax
  10049f:	89 04 24             	mov    %eax,(%esp)
  1004a2:	e8 09 01 00 00       	call   1005b0 <kputc>
        }

        fmt++;
  1004a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004aa:	05 01 00 00 00       	add    $0x1,%eax
  1004af:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  1004b2:	e9 17 fe ff ff       	jmp    1002ce <kprintf+0x1e>
  1004b7:	e9 00 00 00 00       	jmp    1004bc <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  1004bc:	a1 0c a0 10 00       	mov    0x10a00c,%eax
  1004c1:	83 c4 58             	add    $0x58,%esp
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1004cd:	00 00 00 

001004d0 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	83 ec 08             	sub    $0x8,%esp
  1004d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1004dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004df:	80 38 00             	cmpb   $0x0,(%eax)
  1004e2:	0f 84 1e 00 00 00    	je     100506 <kputs+0x36>
        kputc(*s++);
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	89 c1                	mov    %eax,%ecx
  1004ed:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1004f3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1004f6:	0f be 00             	movsbl (%eax),%eax
  1004f9:	89 04 24             	mov    %eax,(%esp)
  1004fc:	e8 af 00 00 00       	call   1005b0 <kputc>
    }
  100501:	e9 d6 ff ff ff       	jmp    1004dc <kputs+0xc>
}
  100506:	83 c4 08             	add    $0x8,%esp
  100509:	5d                   	pop    %ebp
  10050a:	c3                   	ret    
  10050b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100510 <kputn>:

static void kputn(unsigned long x, int base) {
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	56                   	push   %esi
  100514:	83 ec 64             	sub    $0x64,%esp
  100517:	8b 45 0c             	mov    0xc(%ebp),%eax
  10051a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10051d:	8d 15 13 92 10 00    	lea    0x109213,%edx
  100523:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100526:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  100529:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10052c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  100533:	0f 8e 05 00 00 00    	jle    10053e <kputn+0x2e>
        return;
  100539:	e9 5d 00 00 00       	jmp    10059b <kputn+0x8b>
  10053e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  100541:	05 40 00 00 00       	add    $0x40,%eax
  100546:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  100549:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10054c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10054f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100552:	31 d2                	xor    %edx,%edx
  100554:	f7 75 f4             	divl   -0xc(%ebp)
  100557:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10055a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10055d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100560:	89 c2                	mov    %eax,%edx
  100562:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100568:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10056b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10056e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100571:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100574:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100577:	89 d0                	mov    %edx,%eax
  100579:	31 d2                	xor    %edx,%edx
  10057b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10057e:	f7 f6                	div    %esi
  100580:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100583:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10058a:	0f 85 bf ff ff ff    	jne    10054f <kputn+0x3f>
    kputs(p);
  100590:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100593:	89 04 24             	mov    %eax,(%esp)
  100596:	e8 35 ff ff ff       	call   1004d0 <kputs>
}
  10059b:	83 c4 64             	add    $0x64,%esp
  10059e:	5e                   	pop    %esi
  10059f:	5d                   	pop    %ebp
  1005a0:	c3                   	ret    
  1005a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1005a8:	0f 1f 84 00 00 00 00 
  1005af:	00 

001005b0 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1005b0:	55                   	push   %ebp
  1005b1:	89 e5                	mov    %esp,%ebp
  1005b3:	83 ec 38             	sub    $0x38,%esp
  1005b6:	8a 45 08             	mov    0x8(%ebp),%al
  1005b9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if(in_cod()) {
  1005bc:	e8 ef fa ff ff       	call   1000b0 <in_cod>
  1005c1:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005c6:	0f 84 05 00 00 00    	je     1005d1 <kputc+0x21>
        goto doKPutc;
  1005cc:	e9 e3 00 00 00       	jmp    1006b4 <kputc+0x104>
    }

    if(get_current_task() != 0) {
  1005d1:	e8 5a 3c 00 00       	call   104230 <get_current_task>
  1005d6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005db:	0f 84 b9 00 00 00    	je     10069a <kputc+0xea>
        if(get_current_task()->stdout != 0) {
  1005e1:	e8 4a 3c 00 00       	call   104230 <get_current_task>
  1005e6:	81 78 30 00 00 00 00 	cmpl   $0x0,0x30(%eax)
  1005ed:	0f 84 a2 00 00 00    	je     100695 <kputc+0xe5>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1005f3:	e8 38 3c 00 00       	call   104230 <get_current_task>
  1005f8:	8d 4d fe             	lea    -0x2(%ebp),%ecx
  1005fb:	ba 01 00 00 00       	mov    $0x1,%edx
  100600:	8b 40 30             	mov    0x30(%eax),%eax
  100603:	c6 45 fe 11          	movb   $0x11,-0x2(%ebp)
  100607:	89 04 24             	mov    %eax,(%esp)
  10060a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10060e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100615:	00 
  100616:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10061d:	00 
  10061e:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100621:	e8 ea 58 00 00       	call   105f10 <vfs_write>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  100626:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100629:	e8 02 3c 00 00       	call   104230 <get_current_task>
  10062e:	8d 0d 04 80 10 00    	lea    0x108004,%ecx
  100634:	ba 01 00 00 00       	mov    $0x1,%edx
  100639:	8b 40 30             	mov    0x30(%eax),%eax
  10063c:	89 04 24             	mov    %eax,(%esp)
  10063f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100643:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10064a:	00 
  10064b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100652:	00 
  100653:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100656:	e8 b5 58 00 00       	call   105f10 <vfs_write>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10065b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10065e:	e8 cd 3b 00 00       	call   104230 <get_current_task>
  100663:	8d 4d ff             	lea    -0x1(%ebp),%ecx
  100666:	ba 01 00 00 00       	mov    $0x1,%edx
  10066b:	8b 40 30             	mov    0x30(%eax),%eax
  10066e:	89 04 24             	mov    %eax,(%esp)
  100671:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100675:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10067c:	00 
  10067d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100684:	00 
  100685:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100688:	e8 83 58 00 00       	call   105f10 <vfs_write>

            return;
  10068d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100690:	e9 5e 01 00 00       	jmp    1007f3 <kputc+0x243>
        }
    }
  100695:	e9 00 00 00 00       	jmp    10069a <kputc+0xea>

    if(ramfs_vga_writers()) {
  10069a:	e8 61 3b 00 00       	call   104200 <ramfs_vga_writers>
  10069f:	3d 00 00 00 00       	cmp    $0x0,%eax
  1006a4:	0f 84 05 00 00 00    	je     1006af <kputc+0xff>
        return;
  1006aa:	e9 44 01 00 00       	jmp    1007f3 <kputc+0x243>
    }
  1006af:	e9 00 00 00 00       	jmp    1006b4 <kputc+0x104>

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  1006b4:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006b8:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006bd:	0f 84 10 00 00 00    	je     1006d3 <kputc+0x123>
  1006c3:	81 3d 08 a0 10 00 4f 	cmpl   $0x4f,0x10a008
  1006ca:	00 00 00 
  1006cd:	0f 8e 19 00 00 00    	jle    1006ec <kputc+0x13c>
        x = 0;
  1006d3:	c7 05 08 a0 10 00 00 	movl   $0x0,0x10a008
  1006da:	00 00 00 
        y++;
  1006dd:	a1 04 a0 10 00       	mov    0x10a004,%eax
  1006e2:	05 01 00 00 00       	add    $0x1,%eax
  1006e7:	a3 04 a0 10 00       	mov    %eax,0x10a004
    }

    if (c == '\n') {
  1006ec:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006f0:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006f5:	0f 85 05 00 00 00    	jne    100700 <kputc+0x150>
        return;
  1006fb:	e9 f3 00 00 00       	jmp    1007f3 <kputc+0x243>
    }

    if (y > 24) {
  100700:	81 3d 04 a0 10 00 18 	cmpl   $0x18,0x10a004
  100707:	00 00 00 
  10070a:	0f 8e 7e 00 00 00    	jle    10078e <kputc+0x1de>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100710:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100717:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  10071e:	0f 8d 2c 00 00 00    	jge    100750 <kputc+0x1a0>
            video[i] = video[i + 160];
  100724:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100727:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10072d:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  100734:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100737:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10073d:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100740:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100743:	05 01 00 00 00       	add    $0x1,%eax
  100748:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10074b:	e9 c7 ff ff ff       	jmp    100717 <kputc+0x167>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100750:	e9 00 00 00 00       	jmp    100755 <kputc+0x1a5>
  100755:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  10075c:	0f 8d 1d 00 00 00    	jge    10077f <kputc+0x1cf>
            video[i] = 0;
  100762:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100765:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10076b:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10076f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100772:	05 01 00 00 00       	add    $0x1,%eax
  100777:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10077a:	e9 d6 ff ff ff       	jmp    100755 <kputc+0x1a5>
            video[i] = 0;
        }
        y--;
  10077f:	a1 04 a0 10 00       	mov    0x10a004,%eax
  100784:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100789:	a3 04 a0 10 00       	mov    %eax,0x10a004
    }

    video[2 * (y * 80 + x)] = c;
  10078e:	8a 45 ff             	mov    -0x1(%ebp),%al
  100791:	69 0d 04 a0 10 00 50 	imul   $0x50,0x10a004,%ecx
  100798:	00 00 00 
  10079b:	03 0d 08 a0 10 00    	add    0x10a008,%ecx
  1007a1:	c1 e1 01             	shl    $0x1,%ecx
  1007a4:	8b 15 00 80 10 00    	mov    0x108000,%edx
  1007aa:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  1007ad:	a0 04 80 10 00       	mov    0x108004,%al
  1007b2:	69 0d 04 a0 10 00 50 	imul   $0x50,0x10a004,%ecx
  1007b9:	00 00 00 
  1007bc:	03 0d 08 a0 10 00    	add    0x10a008,%ecx
  1007c2:	c1 e1 01             	shl    $0x1,%ecx
  1007c5:	8b 15 00 80 10 00    	mov    0x108000,%edx
  1007cb:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1007cf:	8b 0d 08 a0 10 00    	mov    0x10a008,%ecx
  1007d5:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007db:	89 0d 08 a0 10 00    	mov    %ecx,0x10a008
    kprintf_res++;
  1007e1:	8b 0d 0c a0 10 00    	mov    0x10a00c,%ecx
  1007e7:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007ed:	89 0d 0c a0 10 00    	mov    %ecx,0x10a00c
}
  1007f3:	83 c4 38             	add    $0x38,%esp
  1007f6:	5d                   	pop    %ebp
  1007f7:	c3                   	ret    
  1007f8:	66 90                	xchg   %ax,%ax
  1007fa:	66 90                	xchg   %ax,%ax
  1007fc:	66 90                	xchg   %ax,%ax
  1007fe:	66 90                	xchg   %ax,%ax

00100800 <irq_handler>:
        while ((inb(0x64) & 0x1) == 0) {
        }
    } while (inb(0x60) == 0xfe);
}

void irq_handler() {
  100800:	55                   	push   %ebp
  100801:	89 e5                	mov    %esp,%ebp
    uint8_t scancode;
    uint8_t keycode = 0;
  100803:	57                   	push   %edi
  100804:	56                   	push   %esi
  100805:	83 ec 40             	sub    $0x40,%esp
  100808:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
    int break_code = 0;
  10080c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    static int      e0_code = 0;
    static int      e1_code = 0;
    static uint16_t e1_prev = 0;

    if(!init_done) return;
  100813:	81 3d 10 a0 10 00 00 	cmpl   $0x0,0x10a010
  10081a:	00 00 00 
  10081d:	0f 85 05 00 00 00    	jne    100828 <irq_handler+0x28>
  100823:	e9 bf 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  100828:	b8 60 00 00 00       	mov    $0x60,%eax

    scancode = inb(0x60);
  10082d:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100834:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100837:	e8 b4 02 00 00       	call   100af0 <inb>
  10083c:	88 45 f7             	mov    %al,-0x9(%ebp)

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
  10083f:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
  100843:	81 e1 80 00 00 00    	and    $0x80,%ecx
  100849:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10084f:	0f 84 53 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100855:	81 3d 1c a0 10 00 00 	cmpl   $0x0,0x10a01c
  10085c:	00 00 00 
  10085f:	0f 85 0f 00 00 00    	jne    100874 <irq_handler+0x74>
  100865:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100869:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10086e:	0f 84 34 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100874:	81 3d 18 a0 10 00 00 	cmpl   $0x0,0x10a018
  10087b:	00 00 00 
  10087e:	0f 85 0f 00 00 00    	jne    100893 <irq_handler+0x93>
  100884:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100888:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10088d:	0f 84 15 00 00 00    	je     1008a8 <irq_handler+0xa8>
        (e1_code || (scancode != 0xE1)) &&
        (e0_code || (scancode != 0xE0)))
    {
        break_code = 1;
  100893:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
        scancode &= ~0x80;
  10089a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10089e:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  1008a3:	88 c1                	mov    %al,%cl
  1008a5:	88 4d f7             	mov    %cl,-0x9(%ebp)
    }

    if (e0_code) {
  1008a8:	81 3d 18 a0 10 00 00 	cmpl   $0x0,0x10a018
  1008af:	00 00 00 
  1008b2:	0f 84 63 00 00 00    	je     10091b <irq_handler+0x11b>
        // Fake shift abfangen und ignorieren
        if ((scancode == 0x2A) || (scancode == 0x36)) {
  1008b8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008bc:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  1008c1:	0f 84 0f 00 00 00    	je     1008d6 <irq_handler+0xd6>
  1008c7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008cb:	3d 36 00 00 00       	cmp    $0x36,%eax
  1008d0:	0f 85 0f 00 00 00    	jne    1008e5 <irq_handler+0xe5>
            e0_code = 0;
  1008d6:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  1008dd:	00 00 00 
            return;
  1008e0:	e9 02 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  1008e5:	b8 01 00 00 00       	mov    $0x1,%eax
        }

        keycode = translate_scancode(1, scancode);
  1008ea:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1008ed:	0f b6 d1             	movzbl %cl,%edx
  1008f0:	66 89 d6             	mov    %dx,%si
  1008f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1008fa:	0f b7 d6             	movzwl %si,%edx
  1008fd:	89 54 24 04          	mov    %edx,0x4(%esp)
  100901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100904:	e8 07 02 00 00       	call   100b10 <translate_scancode>
  100909:	88 45 f6             	mov    %al,-0xa(%ebp)
        e0_code = 0;
  10090c:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  100913:	00 00 00 
    } else if (e1_code == 2) {
  100916:	e9 11 01 00 00       	jmp    100a2c <irq_handler+0x22c>
  10091b:	81 3d 1c a0 10 00 02 	cmpl   $0x2,0x10a01c
  100922:	00 00 00 
  100925:	0f 85 53 00 00 00    	jne    10097e <irq_handler+0x17e>
  10092b:	b8 02 00 00 00       	mov    $0x2,%eax
        // Fertiger e1-Scancode
        // Zweiten Scancode in hoeherwertiges Byte packen
        e1_prev |= ((uint16_t) scancode << 8);
  100930:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100933:	0f b6 d1             	movzbl %cl,%edx
  100936:	66 89 d6             	mov    %dx,%si
  100939:	0f b7 d6             	movzwl %si,%edx
  10093c:	c1 e2 08             	shl    $0x8,%edx
  10093f:	0f b7 3d 20 a0 10 00 	movzwl 0x10a020,%edi
  100946:	09 d7                	or     %edx,%edi
  100948:	66 89 fe             	mov    %di,%si
  10094b:	66 89 35 20 a0 10 00 	mov    %si,0x10a020
        keycode = translate_scancode(2, e1_prev);
  100952:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100959:	0f b7 15 20 a0 10 00 	movzwl 0x10a020,%edx
  100960:	89 54 24 04          	mov    %edx,0x4(%esp)
  100964:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100967:	e8 a4 01 00 00       	call   100b10 <translate_scancode>
  10096c:	88 45 f6             	mov    %al,-0xa(%ebp)
        e1_code = 0;
  10096f:	c7 05 1c a0 10 00 00 	movl   $0x0,0x10a01c
  100976:	00 00 00 
    } else if (e1_code == 1) {
  100979:	e9 a9 00 00 00       	jmp    100a27 <irq_handler+0x227>
  10097e:	81 3d 1c a0 10 00 01 	cmpl   $0x1,0x10a01c
  100985:	00 00 00 
  100988:	0f 85 27 00 00 00    	jne    1009b5 <irq_handler+0x1b5>
        // Erstes Byte fuer e1-Scancode
        e1_prev = scancode;
  10098e:	8a 45 f7             	mov    -0x9(%ebp),%al
  100991:	0f b6 c8             	movzbl %al,%ecx
  100994:	66 89 ca             	mov    %cx,%dx
  100997:	66 89 15 20 a0 10 00 	mov    %dx,0x10a020
        e1_code++;
  10099e:	8b 0d 1c a0 10 00    	mov    0x10a01c,%ecx
  1009a4:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1009aa:	89 0d 1c a0 10 00    	mov    %ecx,0x10a01c
    } else if (scancode == 0xE0) {
  1009b0:	e9 6d 00 00 00       	jmp    100a22 <irq_handler+0x222>
  1009b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009b9:	3d e0 00 00 00       	cmp    $0xe0,%eax
  1009be:	0f 85 0f 00 00 00    	jne    1009d3 <irq_handler+0x1d3>
        // Anfang eines e0-Codes
        e0_code = 1;
  1009c4:	c7 05 18 a0 10 00 01 	movl   $0x1,0x10a018
  1009cb:	00 00 00 
    } else if (scancode == 0xE1) {
  1009ce:	e9 4a 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  1009d3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009d7:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1009dc:	0f 85 0f 00 00 00    	jne    1009f1 <irq_handler+0x1f1>
        // Anfang eines e1-Codes
        e1_code = 1;
  1009e2:	c7 05 1c a0 10 00 01 	movl   $0x1,0x10a01c
  1009e9:	00 00 00 
    } else {
  1009ec:	e9 27 00 00 00       	jmp    100a18 <irq_handler+0x218>
  1009f1:	b8 00 00 00 00       	mov    $0x0,%eax
        // Normaler Scancode
        keycode = translate_scancode(0, scancode);
  1009f6:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1009f9:	0f b6 d1             	movzbl %cl,%edx
  1009fc:	66 89 d6             	mov    %dx,%si
  1009ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100a06:	0f b7 d6             	movzwl %si,%edx
  100a09:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a10:	e8 fb 00 00 00       	call   100b10 <translate_scancode>
  100a15:	88 45 f6             	mov    %al,-0xa(%ebp)
  100a18:	e9 00 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  100a1d:	e9 00 00 00 00       	jmp    100a22 <irq_handler+0x222>
  100a22:	e9 00 00 00 00       	jmp    100a27 <irq_handler+0x227>
  100a27:	e9 00 00 00 00       	jmp    100a2c <irq_handler+0x22c>
    }

    if(break_code) {
  100a2c:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a33:	0f 84 1d 00 00 00    	je     100a56 <irq_handler+0x256>
        key_flags[keycode] &= ~KF_PRESSED;
  100a39:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a3d:	8b 0c 85 68 a4 12 00 	mov    0x12a468(,%eax,4),%ecx
  100a44:	81 e1 fe ff ff ff    	and    $0xfffffffe,%ecx
  100a4a:	89 0c 85 68 a4 12 00 	mov    %ecx,0x12a468(,%eax,4)
    }
  100a51:	e9 18 00 00 00       	jmp    100a6e <irq_handler+0x26e>
    else
    {
        key_flags[keycode] |= KF_PRESSED;
  100a56:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a5a:	8b 0c 85 68 a4 12 00 	mov    0x12a468(,%eax,4),%ecx
  100a61:	81 c9 01 00 00 00    	or     $0x1,%ecx
  100a67:	89 0c 85 68 a4 12 00 	mov    %ecx,0x12a468(,%eax,4)
    }

    char chr = getchar(keycode);
  100a6e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a72:	89 04 24             	mov    %eax,(%esp)
  100a75:	e8 76 01 00 00       	call   100bf0 <getchar>
  100a7a:	88 45 ef             	mov    %al,-0x11(%ebp)

    if(!break_code && chr) {
  100a7d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a84:	0f 85 5d 00 00 00    	jne    100ae7 <irq_handler+0x2e7>
  100a8a:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100a8e:	3d 00 00 00 00       	cmp    $0x0,%eax
  100a93:	0f 84 4e 00 00 00    	je     100ae7 <irq_handler+0x2e7>
  100a99:	8d 45 ef             	lea    -0x11(%ebp),%eax
  100a9c:	b9 01 00 00 00       	mov    $0x1,%ecx
        if(vfs_write(charout, &chr, sizeof(char), 1)) {
  100aa1:	8b 15 14 a0 10 00    	mov    0x10a014,%edx
  100aa7:	89 14 24             	mov    %edx,(%esp)
  100aaa:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100ab5:	00 
  100ab6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100abd:	00 
  100abe:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  100ac1:	e8 4a 54 00 00       	call   105f10 <vfs_write>
  100ac6:	3d 00 00 00 00       	cmp    $0x0,%eax
  100acb:	0f 84 11 00 00 00    	je     100ae2 <irq_handler+0x2e2>
  100ad1:	8d 05 38 92 10 00    	lea    0x109238,%eax
            kprintf("[keyboard] BUFFER OVERFLOW! \n");
  100ad7:	89 04 24             	mov    %eax,(%esp)
  100ada:	e8 d1 f7 ff ff       	call   1002b0 <kprintf>
  100adf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        }
    }
  100ae2:	e9 00 00 00 00       	jmp    100ae7 <irq_handler+0x2e7>
}
  100ae7:	83 c4 40             	add    $0x40,%esp
  100aea:	5e                   	pop    %esi
  100aeb:	5f                   	pop    %edi
  100aec:	5d                   	pop    %ebp
  100aed:	c3                   	ret    
  100aee:	66 90                	xchg   %ax,%ax

00100af0 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100af0:	55                   	push   %ebp
  100af1:	89 e5                	mov    %esp,%ebp
  100af3:	50                   	push   %eax
  100af4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100af8:	66 89 c1             	mov    %ax,%cx
  100afb:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100aff:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100b03:	ec                   	in     (%dx),%al
  100b04:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  100b07:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  100b0b:	83 c4 04             	add    $0x4,%esp
  100b0e:	5d                   	pop    %ebp
  100b0f:	c3                   	ret    

00100b10 <translate_scancode>:
uint32_t key_flags[256];

struct res_handle* charout = 0;

static uint8_t translate_scancode(int set, uint16_t scancode)
{
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	83 ec 28             	sub    $0x28,%esp
  100b16:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  100b1a:	66 89 c1             	mov    %ax,%cx
  100b1d:	8b 45 08             	mov    0x8(%ebp),%eax
  100b20:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100b23:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
    uint8_t keycode = 0;
  100b27:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

    switch (set) {
  100b2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b2e:	89 c2                	mov    %eax,%edx
  100b30:	83 ea 02             	sub    $0x2,%edx
  100b33:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b36:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100b39:	0f 84 4f 00 00 00    	je     100b8e <translate_scancode+0x7e>
  100b3f:	e9 00 00 00 00       	jmp    100b44 <translate_scancode+0x34>
  100b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b47:	83 e8 01             	sub    $0x1,%eax
  100b4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100b4d:	0f 84 28 00 00 00    	je     100b7b <translate_scancode+0x6b>
  100b53:	e9 00 00 00 00       	jmp    100b58 <translate_scancode+0x48>
  100b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b5b:	85 c0                	test   %eax,%eax
  100b5d:	0f 85 54 00 00 00    	jne    100bb7 <translate_scancode+0xa7>
  100b63:	e9 00 00 00 00       	jmp    100b68 <translate_scancode+0x58>
        // Normal scancodes
        case 0:
            keycode = sc_to_kc[0][scancode];
  100b68:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b6c:	8a 0c 05 08 81 10 00 	mov    0x108108(,%eax,1),%cl
  100b73:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b76:	e9 3c 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e0-Scancodes
        case 1:
            keycode = sc_to_kc[1][scancode];
  100b7b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b7f:	8a 0c 05 88 81 10 00 	mov    0x108188(,%eax,1),%cl
  100b86:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b89:	e9 29 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e1-Scancodes
        case 2:
            switch (scancode) {
  100b8e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b92:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100b97:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100b9a:	0f 85 0e 00 00 00    	jne    100bae <translate_scancode+0x9e>
  100ba0:	e9 00 00 00 00       	jmp    100ba5 <translate_scancode+0x95>
                // Pause
                case 0x451D:
                    keycode = 119;
  100ba5:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
                    break;
  100ba9:	e9 04 00 00 00       	jmp    100bb2 <translate_scancode+0xa2>

                default:
                    keycode = 0x0;
  100bae:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
            };
            break;
  100bb2:	e9 00 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>
    }

    if (keycode == 0) {
  100bb7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bbb:	3d 00 00 00 00       	cmp    $0x0,%eax
  100bc0:	0f 85 20 00 00 00    	jne    100be6 <translate_scancode+0xd6>
  100bc6:	8d 05 64 92 10 00    	lea    0x109264,%eax
        kprintf("kbc: Unknown Scancode: 0x%x (%d)\n", scancode, set);
  100bcc:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  100bd0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100bd3:	89 04 24             	mov    %eax,(%esp)
  100bd6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100bda:	89 54 24 08          	mov    %edx,0x8(%esp)
  100bde:	e8 cd f6 ff ff       	call   1002b0 <kprintf>
  100be3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    return keycode;
  100be6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bea:	83 c4 28             	add    $0x28,%esp
  100bed:	5d                   	pop    %ebp
  100bee:	c3                   	ret    
  100bef:	90                   	nop

00100bf0 <getchar>:
}

static char getchar(uint8_t keycode) {
  100bf0:	55                   	push   %ebp
  100bf1:	89 e5                	mov    %esp,%ebp
  100bf3:	83 ec 08             	sub    $0x8,%esp
  100bf6:	8a 45 08             	mov    0x8(%ebp),%al
  100bf9:	88 45 ff             	mov    %al,-0x1(%ebp)
    uint32_t index = 0;
  100bfc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    if(key_flags[0x2A] & KF_PRESSED) index = 1; //LSHIFT
  100c03:	8b 0d 10 a5 12 00    	mov    0x12a510,%ecx
  100c09:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100c0f:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100c15:	0f 84 07 00 00 00    	je     100c22 <getchar+0x32>
  100c1b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    if(key_flags[0x36] & KF_PRESSED) index = 1; //RSHIFT
  100c22:	a1 40 a5 12 00       	mov    0x12a540,%eax
  100c27:	25 01 00 00 00       	and    $0x1,%eax
  100c2c:	3d 00 00 00 00       	cmp    $0x0,%eax
  100c31:	0f 84 07 00 00 00    	je     100c3e <getchar+0x4e>
  100c37:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  100c3e:	8d 05 08 80 10 00    	lea    0x108008,%eax

    return kc_to_char[index][keycode];
  100c44:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100c48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100c4b:	c1 e2 07             	shl    $0x7,%edx
  100c4e:	01 d0                	add    %edx,%eax
  100c50:	0f be 04 08          	movsbl (%eax,%ecx,1),%eax
  100c54:	83 c4 08             	add    $0x8,%esp
  100c57:	5d                   	pop    %ebp
  100c58:	c3                   	ret    
  100c59:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100c60 <driver_keyboard_init>:
        }
    }
}

void driver_keyboard_init(void)
{
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	56                   	push   %esi
  100c64:	83 ec 54             	sub    $0x54,%esp
  100c67:	b8 21 00 00 00       	mov    $0x21,%eax
  100c6c:	8d 0d 00 08 10 00    	lea    0x100800,%ecx
    register_intr_handler(0x21, &irq_handler);
  100c72:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100c79:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100c80:	e8 eb 11 00 00       	call   101e70 <register_intr_handler>
  100c85:	b8 64 00 00 00       	mov    $0x64,%eax

    while (inb(0x64) & 0x1) {
  100c8a:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100c94:	e8 57 fe ff ff       	call   100af0 <inb>
  100c99:	0f b6 c8             	movzbl %al,%ecx
  100c9c:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100ca2:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100ca8:	0f 84 1c 00 00 00    	je     100cca <driver_keyboard_init+0x6a>
  100cae:	b8 60 00 00 00       	mov    $0x60,%eax
        inb(0x60);
  100cb3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100cba:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100cbd:	e8 2e fe ff ff       	call   100af0 <inb>
    }
  100cc2:	88 45 eb             	mov    %al,-0x15(%ebp)
  100cc5:	e9 bb ff ff ff       	jmp    100c85 <driver_keyboard_init+0x25>
  100cca:	b8 ed 00 00 00       	mov    $0xed,%eax
  100ccf:	8d 0d 68 a4 12 00    	lea    0x12a468,%ecx
  100cd5:	ba 00 00 00 00       	mov    $0x0,%edx
  100cda:	be 00 04 00 00       	mov    $0x400,%esi

    memset(key_flags, 0, 256 * sizeof(uint32_t));
  100cdf:	89 0c 24             	mov    %ecx,(%esp)
  100ce2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ce9:	00 
  100cea:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
  100cf1:	00 
  100cf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100cf5:	89 75 e0             	mov    %esi,-0x20(%ebp)
  100cf8:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100cfb:	e8 f0 47 00 00       	call   1054f0 <memset>

    // Leds alle ausloeschen
    send_command(0xED);
  100d00:	c7 04 24 ed 00 00 00 	movl   $0xed,(%esp)
  100d07:	e8 c4 00 00 00       	call   100dd0 <send_command>
  100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d11:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d18:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100d1b:	e8 b0 00 00 00       	call   100dd0 <send_command>
  100d20:	b8 f3 00 00 00       	mov    $0xf3,%eax

    // Schnellste Wiederholrate
    send_command(0xF3);
  100d25:	c7 04 24 f3 00 00 00 	movl   $0xf3,(%esp)
  100d2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100d2f:	e8 9c 00 00 00       	call   100dd0 <send_command>
  100d34:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d39:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d40:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100d43:	e8 88 00 00 00       	call   100dd0 <send_command>
  100d48:	b8 f4 00 00 00       	mov    $0xf4,%eax

    send_command(0xF4);
  100d4d:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100d54:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100d57:	e8 74 00 00 00       	call   100dd0 <send_command>
  100d5c:	8d 05 56 92 10 00    	lea    0x109256,%eax
  100d62:	8d 4d f8             	lea    -0x8(%ebp),%ecx

    vfs_create_kfile("/dev/keyboard", ramfs_fifo_driver_struct(), &(uint32_t){512});
  100d65:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100d68:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100d6b:	e8 10 2f 00 00       	call   103c80 <ramfs_fifo_driver_struct>
  100d70:	c7 45 f8 00 02 00 00 	movl   $0x200,-0x8(%ebp)
  100d77:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  100d7a:	89 0c 24             	mov    %ecx,(%esp)
  100d7d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100d81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100d84:	89 44 24 08          	mov    %eax,0x8(%esp)
  100d88:	e8 d3 4e 00 00       	call   105c60 <vfs_create_kfile>
  100d8d:	8d 0d 56 92 10 00    	lea    0x109256,%ecx
  100d93:	ba 02 00 00 00       	mov    $0x2,%edx
    charout = vfs_open("/dev/keyboard", FM_WRITE);
  100d98:	89 0c 24             	mov    %ecx,(%esp)
  100d9b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100da2:	00 
  100da3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100da6:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100da9:	e8 92 4f 00 00       	call   105d40 <vfs_open>
  100dae:	a3 14 a0 10 00       	mov    %eax,0x10a014

    init_done = 1;
  100db3:	c7 05 10 a0 10 00 01 	movl   $0x1,0x10a010
  100dba:	00 00 00 
}
  100dbd:	83 c4 54             	add    $0x54,%esp
  100dc0:	5e                   	pop    %esi
  100dc1:	5d                   	pop    %ebp
  100dc2:	c3                   	ret    
  100dc3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100dca:	84 00 00 00 00 00 

00100dd0 <send_command>:

    return kc_to_char[index][keycode];
}

static void send_command(uint8_t command)
{
  100dd0:	55                   	push   %ebp
  100dd1:	89 e5                	mov    %esp,%ebp
  100dd3:	83 ec 28             	sub    $0x28,%esp
  100dd6:	8a 45 08             	mov    0x8(%ebp),%al
  100dd9:	88 45 ff             	mov    %al,-0x1(%ebp)
    do {
        while (inb(0x64) & 0x2) {
  100ddc:	e9 00 00 00 00       	jmp    100de1 <send_command+0x11>
  100de1:	b8 64 00 00 00       	mov    $0x64,%eax
  100de6:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100ded:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100df0:	e8 fb fc ff ff       	call   100af0 <inb>
  100df5:	0f b6 c8             	movzbl %al,%ecx
  100df8:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100dfe:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e04:	0f 84 05 00 00 00    	je     100e0f <send_command+0x3f>
        }
  100e0a:	e9 d2 ff ff ff       	jmp    100de1 <send_command+0x11>
  100e0f:	b8 60 00 00 00       	mov    $0x60,%eax

        outb(0x60, command);
  100e14:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e1b:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100e1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100e23:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100e26:	e8 65 00 00 00       	call   100e90 <outb>
  100e2b:	b8 64 00 00 00       	mov    $0x64,%eax

        while ((inb(0x64) & 0x1) == 0) {
  100e30:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100e3a:	e8 b1 fc ff ff       	call   100af0 <inb>
  100e3f:	0f b6 c8             	movzbl %al,%ecx
  100e42:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100e48:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e4e:	0f 85 05 00 00 00    	jne    100e59 <send_command+0x89>
        }
  100e54:	e9 d2 ff ff ff       	jmp    100e2b <send_command+0x5b>
    } while (inb(0x60) == 0xfe);
  100e59:	e9 00 00 00 00       	jmp    100e5e <send_command+0x8e>
  100e5e:	b8 60 00 00 00       	mov    $0x60,%eax
  100e63:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100e6d:	e8 7e fc ff ff       	call   100af0 <inb>
  100e72:	0f b6 c8             	movzbl %al,%ecx
  100e75:	81 f9 fe 00 00 00    	cmp    $0xfe,%ecx
  100e7b:	0f 84 5b ff ff ff    	je     100ddc <send_command+0xc>
}
  100e81:	83 c4 28             	add    $0x28,%esp
  100e84:	5d                   	pop    %ebp
  100e85:	c3                   	ret    
  100e86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100e8d:	00 00 00 

00100e90 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  100e90:	55                   	push   %ebp
  100e91:	89 e5                	mov    %esp,%ebp
  100e93:	50                   	push   %eax
  100e94:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100e98:	66 89 c1             	mov    %ax,%cx
  100e9b:	8a 55 0c             	mov    0xc(%ebp),%dl
  100e9e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  100ea2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100ea5:	8a 45 fd             	mov    -0x3(%ebp),%al
  100ea8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100eac:	ee                   	out    %al,(%dx)
}
  100ead:	83 c4 04             	add    $0x4,%esp
  100eb0:	5d                   	pop    %ebp
  100eb1:	c3                   	ret    
  100eb2:	66 90                	xchg   %ax,%ax
  100eb4:	66 90                	xchg   %ax,%ax
  100eb6:	66 90                	xchg   %ax,%ax
  100eb8:	66 90                	xchg   %ax,%ax
  100eba:	66 90                	xchg   %ax,%ax
  100ebc:	66 90                	xchg   %ax,%ax
  100ebe:	66 90                	xchg   %ax,%ax

00100ec0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  100ec0:	55                   	push   %ebp
  100ec1:	89 e5                	mov    %esp,%ebp
	struct {
  100ec3:	83 ec 08             	sub    $0x8,%esp
  100ec6:	a1 24 90 10 00       	mov    0x109024,%eax
  100ecb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100ece:	66 8b 0d 28 90 10 00 	mov    0x109028,%cx
  100ed5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  100ed9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  100edd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100ee1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  100ee4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  100ee7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  100eea:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  100eed:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  100ef0:	83 c4 08             	add    $0x8,%esp
  100ef3:	5d                   	pop    %ebp
  100ef4:	c3                   	ret    
  100ef5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100efc:	00 00 00 00 

00100f00 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100f00:	55                   	push   %ebp
  100f01:	89 e5                	mov    %esp,%ebp
  100f03:	56                   	push   %esi
  100f04:	83 ec 10             	sub    $0x10,%esp
  100f07:	8b 45 14             	mov    0x14(%ebp),%eax
  100f0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100f0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100f10:	8b 75 08             	mov    0x8(%ebp),%esi
  100f13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100f16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100f19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100f1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100f1f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100f23:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f26:	89 04 cd 68 a8 12 00 	mov    %eax,0x12a868(,%ecx,8)
  100f2d:	c7 04 cd 6c a8 12 00 	movl   $0x0,0x12a86c(,%ecx,8)
  100f34:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f3b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100f40:	89 c1                	mov    %eax,%ecx
  100f42:	c1 e1 10             	shl    $0x10,%ecx
  100f45:	c1 e8 10             	shr    $0x10,%eax
  100f48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100f4b:	8b 34 d5 6c a8 12 00 	mov    0x12a86c(,%edx,8),%esi
  100f52:	09 f0                	or     %esi,%eax
  100f54:	8b 34 d5 68 a8 12 00 	mov    0x12a868(,%edx,8),%esi
  100f5b:	09 ce                	or     %ecx,%esi
  100f5d:	89 04 d5 6c a8 12 00 	mov    %eax,0x12a86c(,%edx,8)
  100f64:	89 34 d5 68 a8 12 00 	mov    %esi,0x12a868(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100f6b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100f6f:	c1 e0 08             	shl    $0x8,%eax
  100f72:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f75:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100f7c:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100f83:	09 c6                	or     %eax,%esi
  100f85:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100f8c:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100f93:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100f97:	83 e0 0f             	and    $0xf,%eax
  100f9a:	c1 e0 10             	shl    $0x10,%eax
  100f9d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fa0:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100fa7:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100fae:	09 c6                	or     %eax,%esi
  100fb0:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100fb7:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100fc1:	c1 e0 0c             	shl    $0xc,%eax
  100fc4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100fc9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fcc:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100fd3:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100fda:	09 c6                	or     %eax,%esi
  100fdc:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100fe3:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100fea:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100fee:	c1 e0 18             	shl    $0x18,%eax
  100ff1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100ff4:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100ffb:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  101002:	09 c6                	or     %eax,%esi
  101004:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  10100b:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
}
  101012:	83 c4 10             	add    $0x10,%esp
  101015:	5e                   	pop    %esi
  101016:	5d                   	pop    %ebp
  101017:	c3                   	ret    
  101018:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10101f:	00 

00101020 <init_gdt>:

void init_gdt(void) {
  101020:	55                   	push   %ebp
  101021:	89 e5                	mov    %esp,%ebp
  101023:	56                   	push   %esi
  101024:	83 ec 54             	sub    $0x54,%esp
  101027:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  10102c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101033:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10103a:	00 
  10103b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101042:	00 
  101043:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10104a:	00 
  10104b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10104e:	e8 ad fe ff ff       	call   100f00 <set_gdt_entry>
  101053:	b8 01 00 00 00       	mov    $0x1,%eax
  101058:	b9 00 00 00 00       	mov    $0x0,%ecx
  10105d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  101062:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101067:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10106e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101075:	00 
  101076:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10107d:	00 
  10107e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  101085:	00 
  101086:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101089:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10108c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10108f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  101092:	e8 69 fe ff ff       	call   100f00 <set_gdt_entry>
  101097:	b8 02 00 00 00       	mov    $0x2,%eax
  10109c:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010a1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010a6:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1010b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010b9:	00 
  1010ba:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1010c1:	00 
  1010c2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  1010c9:	00 
  1010ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1010cd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1010d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  1010d3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  1010d6:	e8 25 fe ff ff       	call   100f00 <set_gdt_entry>
  1010db:	b8 03 00 00 00       	mov    $0x3,%eax
  1010e0:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010e5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010ea:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ef:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1010f6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010fd:	00 
  1010fe:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101105:	00 
  101106:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10110d:	00 
  10110e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101111:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  101114:	89 55 cc             	mov    %edx,-0x34(%ebp)
  101117:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10111a:	e8 e1 fd ff ff       	call   100f00 <set_gdt_entry>
  10111f:	b8 04 00 00 00       	mov    $0x4,%eax
  101124:	b9 00 00 00 00       	mov    $0x0,%ecx
  101129:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10112e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101133:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10113a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101141:	00 
  101142:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101149:	00 
  10114a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  101151:	00 
  101152:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101155:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  101158:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10115b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10115e:	e8 9d fd ff ff       	call   100f00 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  101163:	e8 58 fd ff ff       	call   100ec0 <load_gdt>
}
  101168:	83 c4 54             	add    $0x54,%esp
  10116b:	5e                   	pop    %esi
  10116c:	5d                   	pop    %ebp
  10116d:	c3                   	ret    
  10116e:	66 90                	xchg   %ax,%ax

00101170 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101170:	55                   	push   %ebp
  101171:	89 e5                	mov    %esp,%ebp
  101173:	53                   	push   %ebx
  101174:	57                   	push   %edi
  101175:	56                   	push   %esi
  101176:	83 ec 10             	sub    $0x10,%esp
  101179:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10117d:	66 89 c1             	mov    %ax,%cx
  101180:	8a 55 14             	mov    0x14(%ebp),%dl
  101183:	8b 45 0c             	mov    0xc(%ebp),%eax
  101186:	8b 75 08             	mov    0x8(%ebp),%esi
  101189:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10118c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10118f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101193:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101196:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10119c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1011a0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011a3:	89 04 f5 28 a0 10 00 	mov    %eax,0x10a028(,%esi,8)
  1011aa:	c7 04 f5 2c a0 10 00 	movl   $0x0,0x10a02c(,%esi,8)
  1011b1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  1011b5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  1011b9:	c1 e0 10             	shl    $0x10,%eax
  1011bc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011bf:	8b 3c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%edi
  1011c6:	8b 1c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%ebx
  1011cd:	09 c3                	or     %eax,%ebx
  1011cf:	89 3c f5 2c a0 10 00 	mov    %edi,0x10a02c(,%esi,8)
  1011d6:	89 1c f5 28 a0 10 00 	mov    %ebx,0x10a028(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1011dd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  1011e1:	c1 e0 08             	shl    $0x8,%eax
  1011e4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011e7:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  1011ee:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  1011f5:	09 c3                	or     %eax,%ebx
  1011f7:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  1011fe:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  101205:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101209:	c1 e0 10             	shl    $0x10,%eax
  10120c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10120f:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  101216:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  10121d:	09 c3                	or     %eax,%ebx
  10121f:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  101226:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
}
  10122d:	83 c4 10             	add    $0x10,%esp
  101230:	5e                   	pop    %esi
  101231:	5f                   	pop    %edi
  101232:	5b                   	pop    %ebx
  101233:	5d                   	pop    %ebp
  101234:	c3                   	ret    
  101235:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10123c:	00 00 00 00 

00101240 <init_idt>:

void init_idt() {
  101240:	55                   	push   %ebp
  101241:	89 e5                	mov    %esp,%ebp
	struct {
  101243:	56                   	push   %esi
  101244:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10124a:	a1 2a 90 10 00       	mov    0x10902a,%eax
  10124f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101252:	66 8b 0d 2e 90 10 00 	mov    0x10902e,%cx
  101259:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  10125d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  101264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10126b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101272:	0f 8d 1e 00 00 00    	jge    101296 <init_idt+0x56>
		handler_set[i] = 0;
  101278:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10127b:	c7 04 85 28 a2 10 00 	movl   $0x0,0x10a228(,%eax,4)
  101282:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  101286:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101289:	05 01 00 00 00       	add    $0x1,%eax
  10128e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101291:	e9 d5 ff ff ff       	jmp    10126b <init_idt+0x2b>
  101296:	b8 20 00 00 00       	mov    $0x20,%eax
  10129b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1012a0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1012a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1012ae:	00 
  1012af:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1012b2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1012b5:	e8 86 0b 00 00       	call   101e40 <outb>
  1012ba:	b8 21 00 00 00       	mov    $0x21,%eax
  1012bf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1012c4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012cb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1012d2:	00 
  1012d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1012d6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1012d9:	e8 62 0b 00 00       	call   101e40 <outb>
  1012de:	b8 21 00 00 00       	mov    $0x21,%eax
  1012e3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1012e8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012ef:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1012f6:	00 
  1012f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1012fa:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1012fd:	e8 3e 0b 00 00       	call   101e40 <outb>
  101302:	b8 21 00 00 00       	mov    $0x21,%eax
  101307:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  10130c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101313:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10131a:	00 
  10131b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10131e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101321:	e8 1a 0b 00 00       	call   101e40 <outb>
  101326:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10132b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101330:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101337:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10133e:	00 
  10133f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101342:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101345:	e8 f6 0a 00 00       	call   101e40 <outb>
  10134a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10134f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101354:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10135b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101362:	00 
  101363:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101366:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101369:	e8 d2 0a 00 00       	call   101e40 <outb>
  10136e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101373:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101378:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10137f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101386:	00 
  101387:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10138a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10138d:	e8 ae 0a 00 00       	call   101e40 <outb>
  101392:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101397:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  10139c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1013aa:	00 
  1013ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1013ae:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1013b1:	e8 8a 0a 00 00       	call   101e40 <outb>
  1013b6:	b8 20 00 00 00       	mov    $0x20,%eax
  1013bb:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  1013c0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1013c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013ce:	00 
  1013cf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1013d2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1013d5:	e8 66 0a 00 00       	call   101e40 <outb>
  1013da:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1013df:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  1013e4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1013eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013f2:	00 
  1013f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1013f6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1013f9:	e8 42 0a 00 00       	call   101e40 <outb>
  1013fe:	b8 00 00 00 00       	mov    $0x0,%eax
  101403:	8d 0d 1c 20 10 00    	lea    0x10201c,%ecx
  101409:	ba 08 00 00 00       	mov    $0x8,%edx
  10140e:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  101413:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10141a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10141e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101425:	00 
  101426:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10142d:	00 
  10142e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101431:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101434:	89 55 90             	mov    %edx,-0x70(%ebp)
  101437:	e8 34 fd ff ff       	call   101170 <idt_set_entry>
  10143c:	b8 01 00 00 00       	mov    $0x1,%eax
  101441:	8d 0d 25 20 10 00    	lea    0x102025,%ecx
  101447:	ba 08 00 00 00       	mov    $0x8,%edx
  10144c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  101451:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101458:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10145c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101463:	00 
  101464:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10146b:	00 
  10146c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10146f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101472:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101475:	e8 f6 fc ff ff       	call   101170 <idt_set_entry>
  10147a:	b8 02 00 00 00       	mov    $0x2,%eax
  10147f:	8d 0d 2e 20 10 00    	lea    0x10202e,%ecx
  101485:	ba 08 00 00 00       	mov    $0x8,%edx
  10148a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  10148f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101496:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10149a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014a1:	00 
  1014a2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014a9:	00 
  1014aa:	89 45 80             	mov    %eax,-0x80(%ebp)
  1014ad:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1014b3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1014b9:	e8 b2 fc ff ff       	call   101170 <idt_set_entry>
  1014be:	b8 03 00 00 00       	mov    $0x3,%eax
  1014c3:	8d 0d 37 20 10 00    	lea    0x102037,%ecx
  1014c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1014ce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  1014d3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1014da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014e5:	00 
  1014e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014ed:	00 
  1014ee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1014f4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1014fa:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101500:	e8 6b fc ff ff       	call   101170 <idt_set_entry>
  101505:	b8 04 00 00 00       	mov    $0x4,%eax
  10150a:	8d 0d 40 20 10 00    	lea    0x102040,%ecx
  101510:	ba 08 00 00 00       	mov    $0x8,%edx
  101515:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10151a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101521:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101525:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10152c:	00 
  10152d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101534:	00 
  101535:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10153b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101541:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101547:	e8 24 fc ff ff       	call   101170 <idt_set_entry>
  10154c:	b8 05 00 00 00       	mov    $0x5,%eax
  101551:	8d 0d 49 20 10 00    	lea    0x102049,%ecx
  101557:	ba 08 00 00 00       	mov    $0x8,%edx
  10155c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101561:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101568:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10156c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101573:	00 
  101574:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10157b:	00 
  10157c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101582:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101588:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10158e:	e8 dd fb ff ff       	call   101170 <idt_set_entry>
  101593:	b8 06 00 00 00       	mov    $0x6,%eax
  101598:	8d 0d 52 20 10 00    	lea    0x102052,%ecx
  10159e:	ba 08 00 00 00       	mov    $0x8,%edx
  1015a3:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  1015a8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1015af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015ba:	00 
  1015bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015c2:	00 
  1015c3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1015c9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1015cf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1015d5:	e8 96 fb ff ff       	call   101170 <idt_set_entry>
  1015da:	b8 07 00 00 00       	mov    $0x7,%eax
  1015df:	8d 0d 5b 20 10 00    	lea    0x10205b,%ecx
  1015e5:	ba 08 00 00 00       	mov    $0x8,%edx
  1015ea:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1015ef:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1015f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101601:	00 
  101602:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101609:	00 
  10160a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101610:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101616:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10161c:	e8 4f fb ff ff       	call   101170 <idt_set_entry>
  101621:	b8 08 00 00 00       	mov    $0x8,%eax
  101626:	8d 0d 64 20 10 00    	lea    0x102064,%ecx
  10162c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101631:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101638:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10163c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101643:	00 
  101644:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10164b:	00 
  10164c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101652:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101658:	e8 13 fb ff ff       	call   101170 <idt_set_entry>
  10165d:	b8 09 00 00 00       	mov    $0x9,%eax
  101662:	8d 0d 6b 20 10 00    	lea    0x10206b,%ecx
  101668:	ba 08 00 00 00       	mov    $0x8,%edx
  10166d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101672:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101679:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10167d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101684:	00 
  101685:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10168c:	00 
  10168d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101693:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101699:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10169f:	e8 cc fa ff ff       	call   101170 <idt_set_entry>
  1016a4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1016a9:	8d 0d 74 20 10 00    	lea    0x102074,%ecx
  1016af:	ba 08 00 00 00       	mov    $0x8,%edx
  1016b4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1016b9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1016c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016c4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016cb:	00 
  1016cc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016d3:	00 
  1016d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1016da:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1016e0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1016e6:	e8 85 fa ff ff       	call   101170 <idt_set_entry>
  1016eb:	b8 0b 00 00 00       	mov    $0xb,%eax
  1016f0:	8d 0d 7b 20 10 00    	lea    0x10207b,%ecx
  1016f6:	ba 08 00 00 00       	mov    $0x8,%edx
  1016fb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  101700:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101707:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10170b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101712:	00 
  101713:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10171a:	00 
  10171b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101721:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101727:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10172d:	e8 3e fa ff ff       	call   101170 <idt_set_entry>
  101732:	b8 0c 00 00 00       	mov    $0xc,%eax
  101737:	8d 0d 82 20 10 00    	lea    0x102082,%ecx
  10173d:	ba 08 00 00 00       	mov    $0x8,%edx
  101742:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101747:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10174e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101752:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101759:	00 
  10175a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101761:	00 
  101762:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101768:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10176e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101774:	e8 f7 f9 ff ff       	call   101170 <idt_set_entry>
  101779:	b8 0d 00 00 00       	mov    $0xd,%eax
  10177e:	8d 0d 89 20 10 00    	lea    0x102089,%ecx
  101784:	ba 08 00 00 00       	mov    $0x8,%edx
  101789:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10178e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101795:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101799:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a0:	00 
  1017a1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017a8:	00 
  1017a9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1017af:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1017b5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1017bb:	e8 b0 f9 ff ff       	call   101170 <idt_set_entry>
  1017c0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1017c5:	8d 0d 90 20 10 00    	lea    0x102090,%ecx
  1017cb:	ba 08 00 00 00       	mov    $0x8,%edx
  1017d0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1017d5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1017dc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017e0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017e7:	00 
  1017e8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017ef:	00 
  1017f0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1017f6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1017fc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101802:	e8 69 f9 ff ff       	call   101170 <idt_set_entry>
  101807:	b8 0f 00 00 00       	mov    $0xf,%eax
  10180c:	8d 0d 94 20 10 00    	lea    0x102094,%ecx
  101812:	ba 08 00 00 00       	mov    $0x8,%edx
  101817:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10181c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101823:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101827:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10182e:	00 
  10182f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101836:	00 
  101837:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10183d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101843:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101849:	e8 22 f9 ff ff       	call   101170 <idt_set_entry>
  10184e:	b8 10 00 00 00       	mov    $0x10,%eax
  101853:	8d 0d 9a 20 10 00    	lea    0x10209a,%ecx
  101859:	ba 08 00 00 00       	mov    $0x8,%edx
  10185e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101863:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10186a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10186e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101875:	00 
  101876:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187d:	00 
  10187e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101884:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10188a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101890:	e8 db f8 ff ff       	call   101170 <idt_set_entry>
  101895:	b8 11 00 00 00       	mov    $0x11,%eax
  10189a:	8d 0d a0 20 10 00    	lea    0x1020a0,%ecx
  1018a0:	ba 08 00 00 00       	mov    $0x8,%edx
  1018a5:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  1018aa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1018b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018b5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018bc:	00 
  1018bd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c4:	00 
  1018c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1018cb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1018d1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1018d7:	e8 94 f8 ff ff       	call   101170 <idt_set_entry>
  1018dc:	b8 12 00 00 00       	mov    $0x12,%eax
  1018e1:	8d 0d a4 20 10 00    	lea    0x1020a4,%ecx
  1018e7:	ba 08 00 00 00       	mov    $0x8,%edx
  1018ec:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1018f1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1018f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018fc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101903:	00 
  101904:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190b:	00 
  10190c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101912:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101918:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10191e:	e8 4d f8 ff ff       	call   101170 <idt_set_entry>
  101923:	b8 20 00 00 00       	mov    $0x20,%eax
  101928:	8d 0d aa 20 10 00    	lea    0x1020aa,%ecx
  10192e:	ba 08 00 00 00       	mov    $0x8,%edx
  101933:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101938:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10193f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101943:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10194a:	00 
  10194b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101952:	00 
  101953:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101959:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10195f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101965:	e8 06 f8 ff ff       	call   101170 <idt_set_entry>
  10196a:	b8 21 00 00 00       	mov    $0x21,%eax
  10196f:	8d 0d b0 20 10 00    	lea    0x1020b0,%ecx
  101975:	ba 08 00 00 00       	mov    $0x8,%edx
  10197a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10197f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101986:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10198a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101991:	00 
  101992:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101999:	00 
  10199a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1019a0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  1019a6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  1019ac:	e8 bf f7 ff ff       	call   101170 <idt_set_entry>
  1019b1:	b8 22 00 00 00       	mov    $0x22,%eax
  1019b6:	8d 0d b6 20 10 00    	lea    0x1020b6,%ecx
  1019bc:	ba 08 00 00 00       	mov    $0x8,%edx
  1019c1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1019c6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1019cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019d1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019d8:	00 
  1019d9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019e0:	00 
  1019e1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1019e7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1019ed:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1019f3:	e8 78 f7 ff ff       	call   101170 <idt_set_entry>
  1019f8:	b8 23 00 00 00       	mov    $0x23,%eax
  1019fd:	8d 0d bc 20 10 00    	lea    0x1020bc,%ecx
  101a03:	ba 08 00 00 00       	mov    $0x8,%edx
  101a08:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  101a0d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101a14:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a18:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a1f:	00 
  101a20:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a27:	00 
  101a28:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101a2e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101a34:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101a3a:	e8 31 f7 ff ff       	call   101170 <idt_set_entry>
  101a3f:	b8 24 00 00 00       	mov    $0x24,%eax
  101a44:	8d 0d c2 20 10 00    	lea    0x1020c2,%ecx
  101a4a:	ba 08 00 00 00       	mov    $0x8,%edx
  101a4f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101a54:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101a5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a5f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a66:	00 
  101a67:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a6e:	00 
  101a6f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101a75:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101a7b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101a81:	e8 ea f6 ff ff       	call   101170 <idt_set_entry>
  101a86:	b8 25 00 00 00       	mov    $0x25,%eax
  101a8b:	8d 0d c8 20 10 00    	lea    0x1020c8,%ecx
  101a91:	ba 08 00 00 00       	mov    $0x8,%edx
  101a96:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  101a9b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101aa2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aa6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aad:	00 
  101aae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab5:	00 
  101ab6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101abc:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101ac2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101ac8:	e8 a3 f6 ff ff       	call   101170 <idt_set_entry>
  101acd:	b8 26 00 00 00       	mov    $0x26,%eax
  101ad2:	8d 0d ce 20 10 00    	lea    0x1020ce,%ecx
  101ad8:	ba 08 00 00 00       	mov    $0x8,%edx
  101add:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  101ae2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101ae9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af4:	00 
  101af5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101afc:	00 
  101afd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101b03:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101b09:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101b0f:	e8 5c f6 ff ff       	call   101170 <idt_set_entry>
  101b14:	b8 27 00 00 00       	mov    $0x27,%eax
  101b19:	8d 0d d4 20 10 00    	lea    0x1020d4,%ecx
  101b1f:	ba 08 00 00 00       	mov    $0x8,%edx
  101b24:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101b29:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101b30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b34:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b3b:	00 
  101b3c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b43:	00 
  101b44:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101b4a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101b50:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101b56:	e8 15 f6 ff ff       	call   101170 <idt_set_entry>
  101b5b:	b8 28 00 00 00       	mov    $0x28,%eax
  101b60:	8d 0d da 20 10 00    	lea    0x1020da,%ecx
  101b66:	ba 08 00 00 00       	mov    $0x8,%edx
  101b6b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101b70:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101b77:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b7b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b82:	00 
  101b83:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b8a:	00 
  101b8b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101b91:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101b97:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101b9d:	e8 ce f5 ff ff       	call   101170 <idt_set_entry>
  101ba2:	b8 29 00 00 00       	mov    $0x29,%eax
  101ba7:	8d 0d e0 20 10 00    	lea    0x1020e0,%ecx
  101bad:	ba 08 00 00 00       	mov    $0x8,%edx
  101bb2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  101bb7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101bbe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bc2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bc9:	00 
  101bca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bd1:	00 
  101bd2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101bd8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101bde:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101be4:	e8 87 f5 ff ff       	call   101170 <idt_set_entry>
  101be9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101bee:	8d 0d e6 20 10 00    	lea    0x1020e6,%ecx
  101bf4:	ba 08 00 00 00       	mov    $0x8,%edx
  101bf9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  101bfe:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101c05:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c09:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c10:	00 
  101c11:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c18:	00 
  101c19:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101c1f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101c25:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101c2b:	e8 40 f5 ff ff       	call   101170 <idt_set_entry>
  101c30:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101c35:	8d 0d ec 20 10 00    	lea    0x1020ec,%ecx
  101c3b:	ba 08 00 00 00       	mov    $0x8,%edx
  101c40:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101c45:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101c4c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c50:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c57:	00 
  101c58:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c5f:	00 
  101c60:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101c66:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101c6c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101c72:	e8 f9 f4 ff ff       	call   101170 <idt_set_entry>
  101c77:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101c7c:	8d 0d f2 20 10 00    	lea    0x1020f2,%ecx
  101c82:	ba 08 00 00 00       	mov    $0x8,%edx
  101c87:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  101c8c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101c93:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c97:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c9e:	00 
  101c9f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ca6:	00 
  101ca7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101cad:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101cb3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101cb9:	e8 b2 f4 ff ff       	call   101170 <idt_set_entry>
  101cbe:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101cc3:	8d 0d f8 20 10 00    	lea    0x1020f8,%ecx
  101cc9:	ba 08 00 00 00       	mov    $0x8,%edx
  101cce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  101cd3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101cda:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cde:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ce5:	00 
  101ce6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ced:	00 
  101cee:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101cf4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101cfa:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101d00:	e8 6b f4 ff ff       	call   101170 <idt_set_entry>
  101d05:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101d0a:	8d 0d fe 20 10 00    	lea    0x1020fe,%ecx
  101d10:	ba 08 00 00 00       	mov    $0x8,%edx
  101d15:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  101d1a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101d21:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d25:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d2c:	00 
  101d2d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d34:	00 
  101d35:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101d3b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101d41:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101d47:	e8 24 f4 ff ff       	call   101170 <idt_set_entry>
  101d4c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101d51:	8d 0d 04 21 10 00    	lea    0x102104,%ecx
  101d57:	ba 08 00 00 00       	mov    $0x8,%edx
  101d5c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101d61:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101d68:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d6c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d73:	00 
  101d74:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d7b:	00 
  101d7c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101d82:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101d88:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101d8e:	e8 dd f3 ff ff       	call   101170 <idt_set_entry>
  101d93:	b8 30 00 00 00       	mov    $0x30,%eax
  101d98:	8d 0d 0a 21 10 00    	lea    0x10210a,%ecx
  101d9e:	ba 08 00 00 00       	mov    $0x8,%edx
  101da3:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101da8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101daf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101db3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dba:	00 
  101dbb:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101dc2:	00 
  101dc3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101dc9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101dcf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101dd5:	e8 96 f3 ff ff       	call   101170 <idt_set_entry>
  101dda:	b8 05 00 00 00       	mov    $0x5,%eax
  101ddf:	8d 0d 08 82 10 00    	lea    0x108208,%ecx
  101de5:	ba 80 00 00 00       	mov    $0x80,%edx
  101dea:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  101def:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101df6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dfa:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101e01:	00 
  101e02:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101e09:	00 
  101e0a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101e10:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101e16:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101e1c:	e8 df f0 ff ff       	call   100f00 <set_gdt_entry>
  101e21:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101e26:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101e29:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101e2d:	fb                   	sti    
}
  101e2e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101e34:	5e                   	pop    %esi
  101e35:	5d                   	pop    %ebp
  101e36:	c3                   	ret    
  101e37:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101e3e:	00 00 

00101e40 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101e40:	55                   	push   %ebp
  101e41:	89 e5                	mov    %esp,%ebp
  101e43:	50                   	push   %eax
  101e44:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101e48:	66 89 c1             	mov    %ax,%cx
  101e4b:	8a 55 0c             	mov    0xc(%ebp),%dl
  101e4e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101e52:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101e55:	8a 45 fd             	mov    -0x3(%ebp),%al
  101e58:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101e5c:	ee                   	out    %al,(%dx)
}
  101e5d:	83 c4 04             	add    $0x4,%esp
  101e60:	5d                   	pop    %ebp
  101e61:	c3                   	ret    
  101e62:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101e69:	1f 84 00 00 00 00 00 

00101e70 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101e70:	55                   	push   %ebp
  101e71:	89 e5                	mov    %esp,%ebp
  101e73:	83 ec 08             	sub    $0x8,%esp
  101e76:	8b 45 0c             	mov    0xc(%ebp),%eax
  101e79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101e7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101e7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101e82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e85:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101e88:	89 04 8d 28 a3 10 00 	mov    %eax,0x10a328(,%ecx,4)
	handler_set[i] = 1;
  101e8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101e92:	c7 04 85 28 a2 10 00 	movl   $0x1,0x10a228(,%eax,4)
  101e99:	01 00 00 00 
}
  101e9d:	83 c4 08             	add    $0x8,%esp
  101ea0:	5d                   	pop    %ebp
  101ea1:	c3                   	ret    
  101ea2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101ea9:	1f 84 00 00 00 00 00 

00101eb0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  101eb0:	55                   	push   %ebp
  101eb1:	89 e5                	mov    %esp,%ebp
  101eb3:	83 ec 28             	sub    $0x28,%esp
  101eb6:	8b 45 08             	mov    0x8(%ebp),%eax
  101eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  101ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ebf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  101ec2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ec5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  101ecc:	0f 87 3d 00 00 00    	ja     101f0f <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  101ed2:	e8 49 23 00 00       	call   104220 <isSchedulingEnabled>
  101ed7:	3d 00 00 00 00       	cmp    $0x0,%eax
  101edc:	0f 85 1a 00 00 00    	jne    101efc <handle_interrupt+0x4c>
  101ee2:	8d 05 86 92 10 00    	lea    0x109286,%eax
			show_cod(cpu, "Kernel PANIC!");
  101ee8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101eeb:	89 0c 24             	mov    %ecx,(%esp)
  101eee:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ef2:	e8 c9 e1 ff ff       	call   1000c0 <show_cod>
		} else {
  101ef7:	e9 0e 00 00 00       	jmp    101f0a <handle_interrupt+0x5a>
			new_cpu = schedule_exception(cpu);
  101efc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101eff:	89 04 24             	mov    %eax,(%esp)
  101f02:	e8 e9 24 00 00       	call   1043f0 <schedule_exception>
  101f07:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101f0a:	e9 03 01 00 00       	jmp    102012 <handle_interrupt+0x162>
  101f0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f12:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f19:	0f 82 b1 00 00 00    	jb     101fd0 <handle_interrupt+0x120>
  101f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f22:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101f29:	0f 87 a1 00 00 00    	ja     101fd0 <handle_interrupt+0x120>
		if (cpu->intr >= 0x28) {
  101f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f32:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101f39:	0f 82 24 00 00 00    	jb     101f63 <handle_interrupt+0xb3>
  101f3f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101f44:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101f49:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101f50:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101f57:	00 
  101f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f5b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101f5e:	e8 dd fe ff ff       	call   101e40 <outb>
		}

		if (cpu->intr == 0x20) {
  101f63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f66:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f6d:	0f 85 13 00 00 00    	jne    101f86 <handle_interrupt+0xd6>
			new_cpu = schedule(cpu);
  101f73:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f76:	89 04 24             	mov    %eax,(%esp)
  101f79:	e8 f2 29 00 00       	call   104970 <schedule>
  101f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  101f81:	e9 29 00 00 00       	jmp    101faf <handle_interrupt+0xff>
		else
		{
            if (handler_set[cpu->intr]) {
  101f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f89:	8b 40 1c             	mov    0x1c(%eax),%eax
  101f8c:	81 3c 85 28 a2 10 00 	cmpl   $0x0,0x10a228(,%eax,4)
  101f93:	00 00 00 00 
  101f97:	0f 84 0d 00 00 00    	je     101faa <handle_interrupt+0xfa>
                handlers[cpu->intr]();
  101f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fa0:	8b 40 1c             	mov    0x1c(%eax),%eax
  101fa3:	ff 14 85 28 a3 10 00 	call   *0x10a328(,%eax,4)
  101faa:	e9 00 00 00 00       	jmp    101faf <handle_interrupt+0xff>
  101faf:	b8 20 00 00 00       	mov    $0x20,%eax
            }
		}

        outb(0x20, 0x20);
  101fb4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101fbb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101fc2:	00 
  101fc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101fc6:	e8 75 fe ff ff       	call   101e40 <outb>
	} else if (cpu->intr == 0x30) {
  101fcb:	e9 3d 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  101fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fd3:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101fda:	0f 85 13 00 00 00    	jne    101ff3 <handle_interrupt+0x143>
		new_cpu = syscall(new_cpu);
  101fe0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fe3:	89 04 24             	mov    %eax,(%esp)
  101fe6:	e8 55 01 00 00       	call   102140 <syscall>
  101feb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101fee:	e9 15 00 00 00       	jmp    102008 <handle_interrupt+0x158>
  101ff3:	8d 05 94 92 10 00    	lea    0x109294,%eax
		show_cod(cpu, "Unknown Interrupt!");
  101ff9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101ffc:	89 0c 24             	mov    %ecx,(%esp)
  101fff:	89 44 24 04          	mov    %eax,0x4(%esp)
  102003:	e8 b8 e0 ff ff       	call   1000c0 <show_cod>
  102008:	e9 00 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  10200d:	e9 00 00 00 00       	jmp    102012 <handle_interrupt+0x162>
	}

	return new_cpu;
  102012:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102015:	83 c4 28             	add    $0x28,%esp
  102018:	5d                   	pop    %ebp
  102019:	c3                   	ret    
  10201a:	66 90                	xchg   %ax,%ax

0010201c <intr_stub_0>:
  10201c:	6a 00                	push   $0x0
  10201e:	6a 00                	push   $0x0
  102020:	e9 eb 00 00 00       	jmp    102110 <intr_common_handler>

00102025 <intr_stub_1>:
  102025:	6a 00                	push   $0x0
  102027:	6a 01                	push   $0x1
  102029:	e9 e2 00 00 00       	jmp    102110 <intr_common_handler>

0010202e <intr_stub_2>:
  10202e:	6a 00                	push   $0x0
  102030:	6a 02                	push   $0x2
  102032:	e9 d9 00 00 00       	jmp    102110 <intr_common_handler>

00102037 <intr_stub_3>:
  102037:	6a 00                	push   $0x0
  102039:	6a 03                	push   $0x3
  10203b:	e9 d0 00 00 00       	jmp    102110 <intr_common_handler>

00102040 <intr_stub_4>:
  102040:	6a 00                	push   $0x0
  102042:	6a 04                	push   $0x4
  102044:	e9 c7 00 00 00       	jmp    102110 <intr_common_handler>

00102049 <intr_stub_5>:
  102049:	6a 00                	push   $0x0
  10204b:	6a 05                	push   $0x5
  10204d:	e9 be 00 00 00       	jmp    102110 <intr_common_handler>

00102052 <intr_stub_6>:
  102052:	6a 00                	push   $0x0
  102054:	6a 06                	push   $0x6
  102056:	e9 b5 00 00 00       	jmp    102110 <intr_common_handler>

0010205b <intr_stub_7>:
  10205b:	6a 00                	push   $0x0
  10205d:	6a 07                	push   $0x7
  10205f:	e9 ac 00 00 00       	jmp    102110 <intr_common_handler>

00102064 <intr_stub_8>:
  102064:	6a 08                	push   $0x8
  102066:	e9 a5 00 00 00       	jmp    102110 <intr_common_handler>

0010206b <intr_stub_9>:
  10206b:	6a 00                	push   $0x0
  10206d:	6a 09                	push   $0x9
  10206f:	e9 9c 00 00 00       	jmp    102110 <intr_common_handler>

00102074 <intr_stub_10>:
  102074:	6a 0a                	push   $0xa
  102076:	e9 95 00 00 00       	jmp    102110 <intr_common_handler>

0010207b <intr_stub_11>:
  10207b:	6a 0b                	push   $0xb
  10207d:	e9 8e 00 00 00       	jmp    102110 <intr_common_handler>

00102082 <intr_stub_12>:
  102082:	6a 0c                	push   $0xc
  102084:	e9 87 00 00 00       	jmp    102110 <intr_common_handler>

00102089 <intr_stub_13>:
  102089:	6a 0d                	push   $0xd
  10208b:	e9 80 00 00 00       	jmp    102110 <intr_common_handler>

00102090 <intr_stub_14>:
  102090:	6a 0e                	push   $0xe
  102092:	eb 7c                	jmp    102110 <intr_common_handler>

00102094 <intr_stub_15>:
  102094:	6a 00                	push   $0x0
  102096:	6a 0f                	push   $0xf
  102098:	eb 76                	jmp    102110 <intr_common_handler>

0010209a <intr_stub_16>:
  10209a:	6a 00                	push   $0x0
  10209c:	6a 10                	push   $0x10
  10209e:	eb 70                	jmp    102110 <intr_common_handler>

001020a0 <intr_stub_17>:
  1020a0:	6a 11                	push   $0x11
  1020a2:	eb 6c                	jmp    102110 <intr_common_handler>

001020a4 <intr_stub_18>:
  1020a4:	6a 00                	push   $0x0
  1020a6:	6a 12                	push   $0x12
  1020a8:	eb 66                	jmp    102110 <intr_common_handler>

001020aa <intr_stub_32>:
  1020aa:	6a 00                	push   $0x0
  1020ac:	6a 20                	push   $0x20
  1020ae:	eb 60                	jmp    102110 <intr_common_handler>

001020b0 <intr_stub_33>:
  1020b0:	6a 00                	push   $0x0
  1020b2:	6a 21                	push   $0x21
  1020b4:	eb 5a                	jmp    102110 <intr_common_handler>

001020b6 <intr_stub_34>:
  1020b6:	6a 00                	push   $0x0
  1020b8:	6a 22                	push   $0x22
  1020ba:	eb 54                	jmp    102110 <intr_common_handler>

001020bc <intr_stub_35>:
  1020bc:	6a 00                	push   $0x0
  1020be:	6a 23                	push   $0x23
  1020c0:	eb 4e                	jmp    102110 <intr_common_handler>

001020c2 <intr_stub_36>:
  1020c2:	6a 00                	push   $0x0
  1020c4:	6a 24                	push   $0x24
  1020c6:	eb 48                	jmp    102110 <intr_common_handler>

001020c8 <intr_stub_37>:
  1020c8:	6a 00                	push   $0x0
  1020ca:	6a 25                	push   $0x25
  1020cc:	eb 42                	jmp    102110 <intr_common_handler>

001020ce <intr_stub_38>:
  1020ce:	6a 00                	push   $0x0
  1020d0:	6a 26                	push   $0x26
  1020d2:	eb 3c                	jmp    102110 <intr_common_handler>

001020d4 <intr_stub_39>:
  1020d4:	6a 00                	push   $0x0
  1020d6:	6a 27                	push   $0x27
  1020d8:	eb 36                	jmp    102110 <intr_common_handler>

001020da <intr_stub_40>:
  1020da:	6a 00                	push   $0x0
  1020dc:	6a 28                	push   $0x28
  1020de:	eb 30                	jmp    102110 <intr_common_handler>

001020e0 <intr_stub_41>:
  1020e0:	6a 00                	push   $0x0
  1020e2:	6a 29                	push   $0x29
  1020e4:	eb 2a                	jmp    102110 <intr_common_handler>

001020e6 <intr_stub_42>:
  1020e6:	6a 00                	push   $0x0
  1020e8:	6a 2a                	push   $0x2a
  1020ea:	eb 24                	jmp    102110 <intr_common_handler>

001020ec <intr_stub_43>:
  1020ec:	6a 00                	push   $0x0
  1020ee:	6a 2b                	push   $0x2b
  1020f0:	eb 1e                	jmp    102110 <intr_common_handler>

001020f2 <intr_stub_44>:
  1020f2:	6a 00                	push   $0x0
  1020f4:	6a 2c                	push   $0x2c
  1020f6:	eb 18                	jmp    102110 <intr_common_handler>

001020f8 <intr_stub_45>:
  1020f8:	6a 00                	push   $0x0
  1020fa:	6a 2d                	push   $0x2d
  1020fc:	eb 12                	jmp    102110 <intr_common_handler>

001020fe <intr_stub_46>:
  1020fe:	6a 00                	push   $0x0
  102100:	6a 2e                	push   $0x2e
  102102:	eb 0c                	jmp    102110 <intr_common_handler>

00102104 <intr_stub_47>:
  102104:	6a 00                	push   $0x0
  102106:	6a 2f                	push   $0x2f
  102108:	eb 06                	jmp    102110 <intr_common_handler>

0010210a <intr_stub_48>:
  10210a:	6a 00                	push   $0x0
  10210c:	6a 30                	push   $0x30
  10210e:	eb 00                	jmp    102110 <intr_common_handler>

00102110 <intr_common_handler>:
  102110:	55                   	push   %ebp
  102111:	57                   	push   %edi
  102112:	56                   	push   %esi
  102113:	52                   	push   %edx
  102114:	51                   	push   %ecx
  102115:	53                   	push   %ebx
  102116:	50                   	push   %eax
  102117:	54                   	push   %esp
  102118:	66 b8 10 00          	mov    $0x10,%ax
  10211c:	66 8e d8             	mov    %ax,%ds
  10211f:	66 8e c0             	mov    %ax,%es
  102122:	e8 89 fd ff ff       	call   101eb0 <handle_interrupt>
  102127:	89 c4                	mov    %eax,%esp
  102129:	66 b8 23 00          	mov    $0x23,%ax
  10212d:	66 8e d8             	mov    %ax,%ds
  102130:	66 8e c0             	mov    %ax,%es
  102133:	58                   	pop    %eax
  102134:	5b                   	pop    %ebx
  102135:	59                   	pop    %ecx
  102136:	5a                   	pop    %edx
  102137:	5e                   	pop    %esi
  102138:	5f                   	pop    %edi
  102139:	5d                   	pop    %ebp
  10213a:	83 c4 08             	add    $0x8,%esp
  10213d:	cf                   	iret   
  10213e:	66 90                	xchg   %ax,%ax

00102140 <syscall>:
    char* stdin;
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  102140:	55                   	push   %ebp
  102141:	89 e5                	mov    %esp,%ebp
  102143:	53                   	push   %ebx
  102144:	57                   	push   %edi
  102145:	56                   	push   %esi
  102146:	81 ec 3c 01 00 00    	sub    $0x13c,%esp
  10214c:	8b 45 08             	mov    0x8(%ebp),%eax
  10214f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    cpu = save_cpu_state(cpu);
  102152:	89 e1                	mov    %esp,%ecx
  102154:	89 01                	mov    %eax,(%ecx)
  102156:	e8 b5 26 00 00       	call   104810 <save_cpu_state>
  10215b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	switch (cpu->eax) {
  10215e:	8b 00                	mov    (%eax),%eax
  102160:	89 c1                	mov    %eax,%ecx
  102162:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  102168:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10216e:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  102174:	0f 8f 32 00 00 00    	jg     1021ac <syscall+0x6c>
  10217a:	e9 00 00 00 00       	jmp    10217f <syscall+0x3f>
  10217f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  102185:	48                   	dec    %eax
  102186:	89 c1                	mov    %eax,%ecx
  102188:	83 e9 20             	sub    $0x20,%ecx
  10218b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  102191:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  102197:	0f 87 e6 08 00 00    	ja     102a83 <syscall+0x943>
  10219d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1021a3:	8b 0c 85 44 90 10 00 	mov    0x109044(,%eax,4),%ecx
  1021aa:	ff e1                	jmp    *%ecx
  1021ac:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  1021b2:	05 37 ff ff ff       	add    $0xffffff37,%eax
  1021b7:	89 c1                	mov    %eax,%ecx
  1021b9:	83 e9 04             	sub    $0x4,%ecx
  1021bc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  1021c2:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  1021c8:	0f 87 b5 08 00 00    	ja     102a83 <syscall+0x943>
  1021ce:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
  1021d4:	8b 0c 85 30 90 10 00 	mov    0x109030(,%eax,4),%ecx
  1021db:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		return terminate_current(cpu);
  1021dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1021e0:	89 04 24             	mov    %eax,(%esp)
  1021e3:	e8 48 23 00 00       	call   104530 <terminate_current>
  1021e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1021eb:	e9 b6 08 00 00       	jmp    102aa6 <syscall+0x966>

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  1021f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1021f3:	8b 40 04             	mov    0x4(%eax),%eax
  1021f6:	89 04 24             	mov    %eax,(%esp)
  1021f9:	e8 12 36 00 00       	call   105810 <strclone>
  1021fe:	b9 00 00 00 00       	mov    $0x0,%ecx
  102203:	ba 10 00 00 00       	mov    $0x10,%edx
  102208:	8d 75 d0             	lea    -0x30(%ebp),%esi
  10220b:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct exec_info* einp = (void*) cpu->edx;
  10220e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102211:	8b 40 0c             	mov    0xc(%eax),%eax
  102214:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        struct exec_info ein = {
  102217:	89 34 24             	mov    %esi,(%esp)
  10221a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102221:	00 
  102222:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  102229:	00 
  10222a:	89 95 64 ff ff ff    	mov    %edx,-0x9c(%ebp)
  102230:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  102236:	e8 b5 32 00 00       	call   1054f0 <memset>
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };

        if(einp != 0) {
  10223b:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  102242:	0f 84 43 00 00 00    	je     10228b <syscall+0x14b>
            ein.execPath = strclone(einp->execPath);
  102248:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10224b:	8b 00                	mov    (%eax),%eax
  10224d:	89 04 24             	mov    %eax,(%esp)
  102250:	e8 bb 35 00 00       	call   105810 <strclone>
  102255:	89 45 d0             	mov    %eax,-0x30(%ebp)
            ein.stdin = strclone(einp->stdin);
  102258:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10225b:	8b 40 04             	mov    0x4(%eax),%eax
  10225e:	89 04 24             	mov    %eax,(%esp)
  102261:	e8 aa 35 00 00       	call   105810 <strclone>
  102266:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            ein.stdout = strclone(einp->stdout);
  102269:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10226c:	8b 40 08             	mov    0x8(%eax),%eax
  10226f:	89 04 24             	mov    %eax,(%esp)
  102272:	e8 99 35 00 00       	call   105810 <strclone>
  102277:	89 45 d8             	mov    %eax,-0x28(%ebp)
            ein.stderr = strclone(einp->stderr);
  10227a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10227d:	8b 40 0c             	mov    0xc(%eax),%eax
  102280:	89 04 24             	mov    %eax,(%esp)
  102283:	e8 88 35 00 00       	call   105810 <strclone>
  102288:	89 45 dc             	mov    %eax,-0x24(%ebp)
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  10228b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10228e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102291:	8b 49 08             	mov    0x8(%ecx),%ecx
  102294:	8b 55 d0             	mov    -0x30(%ebp),%edx
  102297:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  10229a:	8b 7d d8             	mov    -0x28(%ebp),%edi
  10229d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  1022a0:	89 04 24             	mov    %eax,(%esp)
  1022a3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1022a7:	89 54 24 08          	mov    %edx,0x8(%esp)
  1022ab:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1022af:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1022b3:	89 5c 24 14          	mov    %ebx,0x14(%esp)
  1022b7:	e8 54 3e 00 00       	call   106110 <vfs_exec>
  1022bc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1022bf:	89 01                	mov    %eax,(%ecx)

        if(einp != 0) {
  1022c1:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  1022c8:	0f 84 2c 00 00 00    	je     1022fa <syscall+0x1ba>
            free(ein.execPath);
  1022ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1022d1:	89 04 24             	mov    %eax,(%esp)
  1022d4:	e8 77 2f 00 00       	call   105250 <free>
            free(ein.stdin);
  1022d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1022dc:	89 04 24             	mov    %eax,(%esp)
  1022df:	e8 6c 2f 00 00       	call   105250 <free>
            free(ein.stdout);
  1022e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1022e7:	89 04 24             	mov    %eax,(%esp)
  1022ea:	e8 61 2f 00 00       	call   105250 <free>
            free(ein.stderr);
  1022ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1022f2:	89 04 24             	mov    %eax,(%esp)
  1022f5:	e8 56 2f 00 00       	call   105250 <free>
        }

        free(path);
  1022fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1022fd:	89 04 24             	mov    %eax,(%esp)
  102300:	e8 4b 2f 00 00       	call   105250 <free>
    }
        break;
  102305:	e9 96 07 00 00       	jmp    102aa0 <syscall+0x960>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  10230a:	e8 21 1f 00 00       	call   104230 <get_current_task>
  10230f:	8b 40 20             	mov    0x20(%eax),%eax
  102312:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102315:	89 01                	mov    %eax,(%ecx)
    }
        break;
  102317:	e9 84 07 00 00       	jmp    102aa0 <syscall+0x960>

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  10231c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10231f:	89 04 24             	mov    %eax,(%esp)
  102322:	e8 49 26 00 00       	call   104970 <schedule>
  102327:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
        break;
  10232a:	e9 71 07 00 00       	jmp    102aa0 <syscall+0x960>

    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
  10232f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102332:	8b 40 04             	mov    0x4(%eax),%eax
  102335:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  102338:	e8 f3 1e 00 00       	call   104230 <get_current_task>
  10233d:	81 78 28 00 00 00 00 	cmpl   $0x0,0x28(%eax)
  102344:	0f 84 29 00 00 00    	je     102373 <syscall+0x233>
  10234a:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10234d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  102353:	e8 d8 1e 00 00       	call   104230 <get_current_task>
  102358:	8b 40 28             	mov    0x28(%eax),%eax
  10235b:	89 e1                	mov    %esp,%ecx
  10235d:	89 41 04             	mov    %eax,0x4(%ecx)
  102360:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
  102366:	89 01                	mov    %eax,(%ecx)
  102368:	e8 43 34 00 00       	call   1057b0 <strcpy>
  10236d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
    }
        break;
  102373:	e9 28 07 00 00       	jmp    102aa0 <syscall+0x960>

    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  102378:	e8 13 37 00 00       	call   105a90 <vfs_reset_error>
        char* path = strclone((char*) cpu->ebx);
  10237d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102380:	8b 40 04             	mov    0x4(%eax),%eax
  102383:	89 04 24             	mov    %eax,(%esp)
  102386:	e8 85 34 00 00       	call   105810 <strclone>
  10238b:	89 45 c8             	mov    %eax,-0x38(%ebp)

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  10238e:	e8 9d 1e 00 00       	call   104230 <get_current_task>
  102393:	81 78 28 00 00 00 00 	cmpl   $0x0,0x28(%eax)
  10239a:	0f 84 10 00 00 00    	je     1023b0 <syscall+0x270>
  1023a0:	e8 8b 1e 00 00       	call   104230 <get_current_task>
  1023a5:	8b 40 28             	mov    0x28(%eax),%eax
  1023a8:	89 04 24             	mov    %eax,(%esp)
  1023ab:	e8 a0 2e 00 00       	call   105250 <free>

        char* new = vfs_resolve_path(path);
  1023b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1023b3:	89 04 24             	mov    %eax,(%esp)
  1023b6:	e8 b5 43 00 00       	call   106770 <vfs_resolve_path>
  1023bb:	89 45 c4             	mov    %eax,-0x3c(%ebp)

        cpu->eax = 0;
  1023be:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1023c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        if(new) {
  1023c7:	81 7d c4 00 00 00 00 	cmpl   $0x0,-0x3c(%ebp)
  1023ce:	0f 84 20 00 00 00    	je     1023f4 <syscall+0x2b4>
            get_current_task()->execPath = new;
  1023d4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1023d7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  1023dd:	e8 4e 1e 00 00       	call   104230 <get_current_task>
  1023e2:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
  1023e8:	89 48 28             	mov    %ecx,0x28(%eax)
            cpu->eax = 1;
  1023eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1023ee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        }

        free(path);
  1023f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1023f7:	89 04 24             	mov    %eax,(%esp)
  1023fa:	e8 51 2e 00 00       	call   105250 <free>
    }
        break;
  1023ff:	e9 9c 06 00 00       	jmp    102aa0 <syscall+0x960>

	case 10: /* fopen */
	{
        vfs_reset_error();
  102404:	e8 87 36 00 00       	call   105a90 <vfs_reset_error>
	    char* name = strclone((char*) cpu->ebx);
  102409:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10240c:	8b 40 04             	mov    0x4(%eax),%eax
  10240f:	89 04 24             	mov    %eax,(%esp)
  102412:	e8 f9 33 00 00       	call   105810 <strclone>
  102417:	89 45 c0             	mov    %eax,-0x40(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  10241a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10241d:	8b 40 08             	mov    0x8(%eax),%eax
  102420:	89 45 bc             	mov    %eax,-0x44(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  102423:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102426:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  102429:	89 04 24             	mov    %eax,(%esp)
  10242c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102430:	e8 0b 39 00 00       	call   105d40 <vfs_open>
  102435:	89 45 b8             	mov    %eax,-0x48(%ebp)
	    if(handle) {
  102438:	81 7d b8 00 00 00 00 	cmpl   $0x0,-0x48(%ebp)
  10243f:	0f 84 1e 00 00 00    	je     102463 <syscall+0x323>
	        register_handle(handle);
  102445:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102448:	89 04 24             	mov    %eax,(%esp)
  10244b:	e8 50 1e 00 00       	call   1042a0 <register_handle>
	        cpu->eax = (uint32_t) handle;
  102450:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102453:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102456:	89 0a                	mov    %ecx,(%edx)
	    }
  102458:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  10245e:	e9 09 00 00 00       	jmp    10246c <syscall+0x32c>
	    else
	    {
	        cpu->eax = 0;
  102463:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102466:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  10246c:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10246f:	89 04 24             	mov    %eax,(%esp)
  102472:	e8 d9 2d 00 00       	call   105250 <free>
	}
	    break;
  102477:	e9 24 06 00 00       	jmp    102aa0 <syscall+0x960>

	case 11: /* fclose */
	{
        vfs_reset_error();
  10247c:	e8 0f 36 00 00       	call   105a90 <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  102481:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102484:	8b 40 04             	mov    0x4(%eax),%eax
  102487:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	    if(!unregister_handle(handle)) {
  10248a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10248d:	89 04 24             	mov    %eax,(%esp)
  102490:	e8 6b 1e 00 00       	call   104300 <unregister_handle>
  102495:	3d 00 00 00 00       	cmp    $0x0,%eax
  10249a:	0f 85 1f 00 00 00    	jne    1024bf <syscall+0x37f>
	        vfs_close(handle);
  1024a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  1024a3:	89 04 24             	mov    %eax,(%esp)
  1024a6:	e8 15 39 00 00       	call   105dc0 <vfs_close>

	        cpu->eax = 0;
  1024ab:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1024ae:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  1024b4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
  1024ba:	e9 09 00 00 00       	jmp    1024c8 <syscall+0x388>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  1024bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1024c2:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  1024c8:	e9 d3 05 00 00       	jmp    102aa0 <syscall+0x960>

	case 12: /* fwrite */
	{
        vfs_reset_error();
  1024cd:	e8 be 35 00 00       	call   105a90 <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  1024d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1024d5:	8b 40 04             	mov    0x4(%eax),%eax
  1024d8:	89 45 b0             	mov    %eax,-0x50(%ebp)
	    if(handle != 0) {
  1024db:	81 7d b0 00 00 00 00 	cmpl   $0x0,-0x50(%ebp)
  1024e2:	0f 84 3c 00 00 00    	je     102524 <syscall+0x3e4>
  1024e8:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  1024ed:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  1024f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1024f3:	8b 52 08             	mov    0x8(%edx),%edx
  1024f6:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1024f9:	8b 76 0c             	mov    0xc(%esi),%esi
  1024fc:	89 0c 24             	mov    %ecx,(%esp)
  1024ff:	89 54 24 04          	mov    %edx,0x4(%esp)
  102503:	89 74 24 08          	mov    %esi,0x8(%esp)
  102507:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10250e:	00 
  10250f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  102515:	e8 f6 39 00 00       	call   105f10 <vfs_write>
  10251a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10251d:	89 01                	mov    %eax,(%ecx)
	    }
  10251f:	e9 09 00 00 00       	jmp    10252d <syscall+0x3ed>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  102524:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102527:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  10252d:	e9 6e 05 00 00       	jmp    102aa0 <syscall+0x960>

	case 13: /* fread */
	{
        vfs_reset_error();
  102532:	e8 59 35 00 00       	call   105a90 <vfs_reset_error>
        struct res_handle* handle = (void*) cpu->ebx;
  102537:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10253a:	8b 40 04             	mov    0x4(%eax),%eax
  10253d:	89 45 ac             	mov    %eax,-0x54(%ebp)
        if(handle != 0) {
  102540:	81 7d ac 00 00 00 00 	cmpl   $0x0,-0x54(%ebp)
  102547:	0f 84 3c 00 00 00    	je     102589 <syscall+0x449>
  10254d:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  102552:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  102555:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102558:	8b 52 08             	mov    0x8(%edx),%edx
  10255b:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10255e:	8b 76 0c             	mov    0xc(%esi),%esi
  102561:	89 0c 24             	mov    %ecx,(%esp)
  102564:	89 54 24 04          	mov    %edx,0x4(%esp)
  102568:	89 74 24 08          	mov    %esi,0x8(%esp)
  10256c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102573:	00 
  102574:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  10257a:	e8 91 38 00 00       	call   105e10 <vfs_read>
  10257f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102582:	89 01                	mov    %eax,(%ecx)
        }
  102584:	e9 09 00 00 00       	jmp    102592 <syscall+0x452>
        else
        {
            cpu->eax = RW_ERR_VFS;
  102589:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10258c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  102592:	e9 09 05 00 00       	jmp    102aa0 <syscall+0x960>

	case 14: /* fmkfifo */
	{
        vfs_reset_error();
  102597:	e8 f4 34 00 00       	call   105a90 <vfs_reset_error>
        char* name = strclone((char*) cpu->ebx);
  10259c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10259f:	8b 40 04             	mov    0x4(%eax),%eax
  1025a2:	89 04 24             	mov    %eax,(%esp)
  1025a5:	e8 66 32 00 00       	call   105810 <strclone>
  1025aa:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
  1025ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  1025b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1025b3:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
  1025b9:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  1025bf:	e8 bc 16 00 00       	call   103c80 <ramfs_fifo_driver_struct>
  1025c4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
  1025cb:	8b 8d 3c ff ff ff    	mov    -0xc4(%ebp),%ecx
  1025d1:	89 0c 24             	mov    %ecx,(%esp)
  1025d4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1025d8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
  1025de:	89 44 24 08          	mov    %eax,0x8(%esp)
  1025e2:	e8 79 36 00 00       	call   105c60 <vfs_create_kfile>
  1025e7:	b9 03 00 00 00       	mov    $0x3,%ecx

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  1025ec:	8b 55 a8             	mov    -0x58(%ebp),%edx
  1025ef:	89 14 24             	mov    %edx,(%esp)
  1025f2:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  1025f9:	00 
  1025fa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  102600:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
  102606:	e8 35 37 00 00       	call   105d40 <vfs_open>
  10260b:	89 45 a0             	mov    %eax,-0x60(%ebp)
        if(handle) {
  10260e:	81 7d a0 00 00 00 00 	cmpl   $0x0,-0x60(%ebp)
  102615:	0f 84 1e 00 00 00    	je     102639 <syscall+0x4f9>
            register_handle(handle);
  10261b:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10261e:	89 04 24             	mov    %eax,(%esp)
  102621:	e8 7a 1c 00 00       	call   1042a0 <register_handle>
            cpu->eax = (uint32_t) handle;
  102626:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  102629:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10262c:	89 0a                	mov    %ecx,(%edx)
        }
  10262e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  102634:	e9 09 00 00 00       	jmp    102642 <syscall+0x502>
        else
        {
            cpu->eax = 0;
  102639:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10263c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  102642:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102645:	89 04 24             	mov    %eax,(%esp)
  102648:	e8 03 2c 00 00       	call   105250 <free>
	}
	    break;
  10264d:	e9 4e 04 00 00       	jmp    102aa0 <syscall+0x960>

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
  102652:	e8 d9 1b 00 00       	call   104230 <get_current_task>
  102657:	8b 40 2c             	mov    0x2c(%eax),%eax
  10265a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10265d:	89 01                	mov    %eax,(%ecx)
        vfs_reset_error();
  10265f:	e8 2c 34 00 00       	call   105a90 <vfs_reset_error>
	}
	    break;
  102664:	e9 37 04 00 00       	jmp    102aa0 <syscall+0x960>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  102669:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)

	    switch(cpu->ebx) {
  102670:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102673:	8b 40 04             	mov    0x4(%eax),%eax
  102676:	89 c1                	mov    %eax,%ecx
  102678:	83 e9 02             	sub    $0x2,%ecx
  10267b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  102681:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
  102687:	0f 84 52 00 00 00    	je     1026df <syscall+0x59f>
  10268d:	e9 00 00 00 00       	jmp    102692 <syscall+0x552>
  102692:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  102698:	83 e8 01             	sub    $0x1,%eax
  10269b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1026a1:	0f 84 28 00 00 00    	je     1026cf <syscall+0x58f>
  1026a7:	e9 00 00 00 00       	jmp    1026ac <syscall+0x56c>
  1026ac:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  1026b2:	85 c0                	test   %eax,%eax
  1026b4:	0f 85 35 00 00 00    	jne    1026ef <syscall+0x5af>
  1026ba:	e9 00 00 00 00       	jmp    1026bf <syscall+0x57f>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  1026bf:	e8 6c 1b 00 00       	call   104230 <get_current_task>
  1026c4:	8b 40 30             	mov    0x30(%eax),%eax
  1026c7:	89 45 9c             	mov    %eax,-0x64(%ebp)
	        break;
  1026ca:	e9 2b 00 00 00       	jmp    1026fa <syscall+0x5ba>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  1026cf:	e8 5c 1b 00 00       	call   104230 <get_current_task>
  1026d4:	8b 40 38             	mov    0x38(%eax),%eax
  1026d7:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
  1026da:	e9 1b 00 00 00       	jmp    1026fa <syscall+0x5ba>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  1026df:	e8 4c 1b 00 00       	call   104230 <get_current_task>
  1026e4:	8b 40 34             	mov    0x34(%eax),%eax
  1026e7:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
  1026ea:	e9 0b 00 00 00       	jmp    1026fa <syscall+0x5ba>
        default:
            handle = get_current_task()->stdout;
  1026ef:	e8 3c 1b 00 00       	call   104230 <get_current_task>
  1026f4:	8b 40 30             	mov    0x30(%eax),%eax
  1026f7:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
	    }

	    cpu->eax = (uint32_t) handle;
  1026fa:	8b 45 9c             	mov    -0x64(%ebp),%eax
  1026fd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102700:	89 01                	mov    %eax,(%ecx)
	}
	    break;
  102702:	e9 99 03 00 00       	jmp    102aa0 <syscall+0x960>

	case 21: /* fopenpmhandle */
	{
	    vfs_reset_error();
  102707:	e8 84 33 00 00       	call   105a90 <vfs_reset_error>
	    char* path = strclone((char*)cpu->ecx);
  10270c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10270f:	8b 40 08             	mov    0x8(%eax),%eax
  102712:	89 04 24             	mov    %eax,(%esp)
  102715:	e8 f6 30 00 00       	call   105810 <strclone>
  10271a:	89 45 98             	mov    %eax,-0x68(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  10271d:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  102724:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102727:	81 78 04 01 00 00 00 	cmpl   $0x1,0x4(%eax)
  10272e:	0f 85 07 00 00 00    	jne    10273b <syscall+0x5fb>
	        fm = FM_READ;
  102734:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%ebp)
	    }

	    open = vfs_open(path, fm);
  10273b:	8b 45 98             	mov    -0x68(%ebp),%eax
  10273e:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  102741:	89 04 24             	mov    %eax,(%esp)
  102744:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102748:	e8 f3 35 00 00       	call   105d40 <vfs_open>
  10274d:	89 45 94             	mov    %eax,-0x6c(%ebp)

	    free(path);
  102750:	8b 45 98             	mov    -0x68(%ebp),%eax
  102753:	89 04 24             	mov    %eax,(%esp)
  102756:	e8 f5 2a 00 00       	call   105250 <free>

	    if(!open) {
  10275b:	81 7d 94 00 00 00 00 	cmpl   $0x0,-0x6c(%ebp)
  102762:	0f 85 0e 00 00 00    	jne    102776 <syscall+0x636>
	        cpu->eax = (uint32_t) -1;
  102768:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10276b:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  102771:	e9 2a 03 00 00       	jmp    102aa0 <syscall+0x960>
	    }

	    struct res_handle* oldhandle = 0;
  102776:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)

        switch(cpu->ebx) {
  10277d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102780:	8b 40 04             	mov    0x4(%eax),%eax
  102783:	89 c1                	mov    %eax,%ecx
  102785:	83 e9 02             	sub    $0x2,%ecx
  102788:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
  10278e:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%ebp)
  102794:	0f 84 80 00 00 00    	je     10281a <syscall+0x6da>
  10279a:	e9 00 00 00 00       	jmp    10279f <syscall+0x65f>
  10279f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
  1027a5:	83 e8 01             	sub    $0x1,%eax
  1027a8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  1027ae:	0f 84 3f 00 00 00    	je     1027f3 <syscall+0x6b3>
  1027b4:	e9 00 00 00 00       	jmp    1027b9 <syscall+0x679>
  1027b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
  1027bf:	85 c0                	test   %eax,%eax
  1027c1:	0f 85 7a 00 00 00    	jne    102841 <syscall+0x701>
  1027c7:	e9 00 00 00 00       	jmp    1027cc <syscall+0x68c>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  1027cc:	e8 5f 1a 00 00       	call   104230 <get_current_task>
  1027d1:	8b 40 30             	mov    0x30(%eax),%eax
  1027d4:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdout = open;
  1027d7:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1027da:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
  1027e0:	e8 4b 1a 00 00       	call   104230 <get_current_task>
  1027e5:	8b 8d 14 ff ff ff    	mov    -0xec(%ebp),%ecx
  1027eb:	89 48 30             	mov    %ecx,0x30(%eax)
            break;
  1027ee:	e9 70 00 00 00       	jmp    102863 <syscall+0x723>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  1027f3:	e8 38 1a 00 00       	call   104230 <get_current_task>
  1027f8:	8b 40 38             	mov    0x38(%eax),%eax
  1027fb:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdin = open;
  1027fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
  102801:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
  102807:	e8 24 1a 00 00       	call   104230 <get_current_task>
  10280c:	8b 8d 10 ff ff ff    	mov    -0xf0(%ebp),%ecx
  102812:	89 48 38             	mov    %ecx,0x38(%eax)
            break;
  102815:	e9 49 00 00 00       	jmp    102863 <syscall+0x723>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  10281a:	e8 11 1a 00 00       	call   104230 <get_current_task>
  10281f:	8b 40 34             	mov    0x34(%eax),%eax
  102822:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stderr = open;
  102825:	8b 45 94             	mov    -0x6c(%ebp),%eax
  102828:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  10282e:	e8 fd 19 00 00       	call   104230 <get_current_task>
  102833:	8b 8d 0c ff ff ff    	mov    -0xf4(%ebp),%ecx
  102839:	89 48 34             	mov    %ecx,0x34(%eax)
            break;
  10283c:	e9 22 00 00 00       	jmp    102863 <syscall+0x723>
        default:
            oldhandle = get_current_task()->stdout;
  102841:	e8 ea 19 00 00       	call   104230 <get_current_task>
  102846:	8b 40 30             	mov    0x30(%eax),%eax
  102849:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdout = open;
  10284c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10284f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
  102855:	e8 d6 19 00 00       	call   104230 <get_current_task>
  10285a:	8b 8d 08 ff ff ff    	mov    -0xf8(%ebp),%ecx
  102860:	89 48 30             	mov    %ecx,0x30(%eax)
            break;
        }

        if(oldhandle != 0) {
  102863:	81 7d 8c 00 00 00 00 	cmpl   $0x0,-0x74(%ebp)
  10286a:	0f 84 11 00 00 00    	je     102881 <syscall+0x741>
            vfs_close(oldhandle);
  102870:	8b 45 8c             	mov    -0x74(%ebp),%eax
  102873:	89 04 24             	mov    %eax,(%esp)
  102876:	e8 45 35 00 00       	call   105dc0 <vfs_close>
  10287b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
        }

        cpu->eax = 0;
  102881:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102884:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  10288a:	e9 11 02 00 00       	jmp    102aa0 <syscall+0x960>
  10288f:	8d 05 a7 92 10 00    	lea    0x1092a7,%eax

	case 30: /* return_rpc */
	{
	    kprintf("RPC_RET\n");
  102895:	89 04 24             	mov    %eax,(%esp)
  102898:	e8 13 da ff ff       	call   1002b0 <kprintf>
	    cpu = return_rpc_call(cpu);
  10289d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028a0:	89 0c 24             	mov    %ecx,(%esp)
  1028a3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1028a9:	e8 a2 24 00 00       	call   104d50 <return_rpc_call>
  1028ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
	    break;
  1028b1:	e9 ea 01 00 00       	jmp    102aa0 <syscall+0x960>

	case 31: /* call_rpc */
	{
	    int PID = cpu->ebx;
  1028b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028b9:	8b 40 04             	mov    0x4(%eax),%eax
  1028bc:	89 45 88             	mov    %eax,-0x78(%ebp)

	    //TODO create RPC for U2U
	}
	    break;
  1028bf:	e9 dc 01 00 00       	jmp    102aa0 <syscall+0x960>

	case 32: /* set_rpc_handler */
	{
	    uint32_t handlerAddr = cpu->ebx;
  1028c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028c7:	8b 40 04             	mov    0x4(%eax),%eax
  1028ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
	    if(get_current_task()->rpc_handler_addr == 0) {
  1028cd:	e8 5e 19 00 00       	call   104230 <get_current_task>
  1028d2:	81 78 1c 00 00 00 00 	cmpl   $0x0,0x1c(%eax)
  1028d9:	0f 85 35 00 00 00    	jne    102914 <syscall+0x7d4>
  1028df:	8d 05 b0 92 10 00    	lea    0x1092b0,%eax
	        kprintf("RPC_SET to %x\n", cpu->ebx);
  1028e5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028e8:	8b 49 04             	mov    0x4(%ecx),%ecx
  1028eb:	89 04 24             	mov    %eax,(%esp)
  1028ee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1028f2:	e8 b9 d9 ff ff       	call   1002b0 <kprintf>
	        get_current_task()->rpc_handler_addr = handlerAddr;
  1028f7:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  1028fa:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
  102900:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
  102906:	e8 25 19 00 00       	call   104230 <get_current_task>
  10290b:	8b 8d f8 fe ff ff    	mov    -0x108(%ebp),%ecx
  102911:	89 48 1c             	mov    %ecx,0x1c(%eax)
	    }
	}
	    break;
  102914:	e9 87 01 00 00       	jmp    102aa0 <syscall+0x960>
  102919:	8d 05 bf 92 10 00    	lea    0x1092bf,%eax

	case 33: /* fetch_rpc_data */
	{
        kprintf("RPC_FETCH\n");
  10291f:	89 04 24             	mov    %eax,(%esp)
  102922:	e8 89 d9 ff ff       	call   1002b0 <kprintf>
	    cpu->eax = 0;
  102927:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10292a:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    void* dest = (void*) cpu->ebx;
  102930:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102933:	8b 49 04             	mov    0x4(%ecx),%ecx
  102936:	89 4d 80             	mov    %ecx,-0x80(%ebp)
	    if(get_current_task()->rpc != 0) {
  102939:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  10293f:	e8 ec 18 00 00       	call   104230 <get_current_task>
  102944:	81 78 18 00 00 00 00 	cmpl   $0x0,0x18(%eax)
  10294b:	0f 84 51 00 00 00    	je     1029a2 <syscall+0x862>
	        memcpy(dest, get_current_task()->rpc->data, get_current_task()->rpc->dataSize);
  102951:	8b 45 80             	mov    -0x80(%ebp),%eax
  102954:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
  10295a:	e8 d1 18 00 00       	call   104230 <get_current_task>
  10295f:	8b 40 18             	mov    0x18(%eax),%eax
  102962:	8b 40 0c             	mov    0xc(%eax),%eax
  102965:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
  10296b:	e8 c0 18 00 00       	call   104230 <get_current_task>
  102970:	8b 40 18             	mov    0x18(%eax),%eax
  102973:	8b 40 10             	mov    0x10(%eax),%eax
  102976:	8b 8d f0 fe ff ff    	mov    -0x110(%ebp),%ecx
  10297c:	89 0c 24             	mov    %ecx,(%esp)
  10297f:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
  102985:	89 54 24 04          	mov    %edx,0x4(%esp)
  102989:	89 44 24 08          	mov    %eax,0x8(%esp)
  10298d:	e8 be 2b 00 00       	call   105550 <memcpy>
	        cpu->eax = get_current_task()->rpc->dataSize;
  102992:	e8 99 18 00 00       	call   104230 <get_current_task>
  102997:	8b 40 18             	mov    0x18(%eax),%eax
  10299a:	8b 40 10             	mov    0x10(%eax),%eax
  10299d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029a0:	89 01                	mov    %eax,(%ecx)
	    }
	}
	    break;
  1029a2:	e9 f9 00 00 00       	jmp    102aa0 <syscall+0x960>
  1029a7:	8d 05 ca 92 10 00    	lea    0x1092ca,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  1029ad:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029b0:	8b 49 04             	mov    0x4(%ecx),%ecx
  1029b3:	89 04 24             	mov    %eax,(%esp)
  1029b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029ba:	e8 f1 d8 ff ff       	call   1002b0 <kprintf>
  1029bf:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029c2:	89 01                	mov    %eax,(%ecx)
		break;
  1029c4:	e9 d7 00 00 00       	jmp    102aa0 <syscall+0x960>
  1029c9:	8d 05 cd 92 10 00    	lea    0x1092cd,%eax

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  1029cf:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029d2:	8b 49 04             	mov    0x4(%ecx),%ecx
  1029d5:	89 04 24             	mov    %eax,(%esp)
  1029d8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029dc:	e8 cf d8 ff ff       	call   1002b0 <kprintf>
  1029e1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029e4:	89 01                	mov    %eax,(%ecx)
		break;
  1029e6:	e9 b5 00 00 00       	jmp    102aa0 <syscall+0x960>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  1029eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1029ee:	8b 40 04             	mov    0x4(%eax),%eax
  1029f1:	89 04 24             	mov    %eax,(%esp)
  1029f4:	e8 87 4c 00 00       	call   107680 <vmm_alloc_ucont>
  1029f9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1029fc:	89 01                	mov    %eax,(%ecx)
		break;
  1029fe:	e9 9d 00 00 00       	jmp    102aa0 <syscall+0x960>

	case 204: /* vmm_free */
		cpu->eax = 0;
  102a03:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a06:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  102a0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a0f:	81 78 04 00 10 40 01 	cmpl   $0x1401000,0x4(%eax)
  102a16:	0f 82 0e 00 00 00    	jb     102a2a <syscall+0x8ea>
			vmm_free((void*) cpu->ebx);
  102a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a1f:	8b 40 04             	mov    0x4(%eax),%eax
  102a22:	89 04 24             	mov    %eax,(%esp)
  102a25:	e8 d6 48 00 00       	call   107300 <vmm_free>
		}
		break;
  102a2a:	e9 71 00 00 00       	jmp    102aa0 <syscall+0x960>
  102a2f:	b8 01 00 00 00       	mov    $0x1,%eax
  102a34:	b9 00 00 00 00       	mov    $0x0,%ecx

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  102a39:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  102a3f:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%ebp)
  102a45:	e8 36 04 00 00       	call   102e80 <pmm_print_stats>
        create_rpc_call(1, RPCT_IRQ, cpu->intr, 0, 0);
  102a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a4d:	8b 40 1c             	mov    0x1c(%eax),%eax
  102a50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102a57:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102a5e:	00 
  102a5f:	89 44 24 08          	mov    %eax,0x8(%esp)
  102a63:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102a6a:	00 
  102a6b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  102a72:	00 
  102a73:	e8 b8 20 00 00       	call   104b30 <create_rpc_call>
		break;
  102a78:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
  102a7e:	e9 1d 00 00 00       	jmp    102aa0 <syscall+0x960>
  102a83:	8d 05 d0 92 10 00    	lea    0x1092d0,%eax

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  102a89:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102a8c:	8b 09                	mov    (%ecx),%ecx
  102a8e:	89 04 24             	mov    %eax,(%esp)
  102a91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a95:	e8 16 d8 ff ff       	call   1002b0 <kprintf>
  102a9a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		break;
	}

	return cpu;
  102aa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102aa3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  102aa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102aa9:	81 c4 3c 01 00 00    	add    $0x13c,%esp
  102aaf:	5e                   	pop    %esi
  102ab0:	5f                   	pop    %edi
  102ab1:	5b                   	pop    %ebx
  102ab2:	5d                   	pop    %ebp
  102ab3:	c3                   	ret    
  102ab4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102abb:	00 00 00 00 00 

00102ac0 <kernel_main>:

void kernel_main(struct multiboot_info* mb_info) {
  102ac0:	55                   	push   %ebp
  102ac1:	89 e5                	mov    %esp,%ebp
  102ac3:	57                   	push   %edi
  102ac4:	56                   	push   %esi
  102ac5:	83 ec 70             	sub    $0x70,%esp
  102ac8:	8b 45 08             	mov    0x8(%ebp),%eax
  102acb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  102ace:	e8 fd 4e 00 00       	call   1079d0 <vmm_init>
  102ad3:	8d 0d e6 92 10 00    	lea    0x1092e6,%ecx
  102ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kprintf("Setting PIT interval...\n");
  102adc:	89 0c 24             	mov    %ecx,(%esp)
  102adf:	e8 cc d7 ff ff       	call   1002b0 <kprintf>
  102ae4:	b9 43 00 00 00       	mov    $0x43,%ecx
  102ae9:	ba 36 00 00 00       	mov    $0x36,%edx

	outb(0x43, 0x36);
  102aee:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  102af5:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
  102afc:	00 
  102afd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102b00:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102b03:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  102b06:	e8 25 02 00 00       	call   102d30 <outb>
  102b0b:	b8 40 00 00 00       	mov    $0x40,%eax
  102b10:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
	outw(0x40, 1000);
  102b15:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  102b1c:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  102b23:	00 
  102b24:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102b27:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  102b2a:	e8 31 02 00 00       	call   102d60 <outw>
  102b2f:	8d 05 ff 92 10 00    	lea    0x1092ff,%eax

    kprintf("Initializing vfs...\n");
  102b35:	89 04 24             	mov    %eax,(%esp)
  102b38:	e8 73 d7 ff ff       	call   1002b0 <kprintf>

    vfs_init_root();
  102b3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102b40:	e8 1b 3d 00 00       	call   106860 <vfs_init_root>
    ramfs_fifo_init();
  102b45:	e8 c6 0b 00 00       	call   103710 <ramfs_fifo_init>
    ramfs_block_init();
  102b4a:	e8 11 07 00 00       	call   103260 <ramfs_block_init>

    driver_keyboard_init();
  102b4f:	e8 0c e1 ff ff       	call   100c60 <driver_keyboard_init>
  102b54:	b8 00 00 00 00       	mov    $0x0,%eax


    map_address_active((uint32_t) mb_info,
  102b59:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102b5f:	89 0c 24             	mov    %ecx,(%esp)
  102b62:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b66:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102b6d:	00 
  102b6e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102b71:	e8 0a 48 00 00       	call   107380 <map_address_active>
  102b76:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  102b7b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b7e:	8b 49 18             	mov    0x18(%ecx),%ecx
  102b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102b84:	8b 52 18             	mov    0x18(%edx),%edx
  102b87:	89 0c 24             	mov    %ecx,(%esp)
  102b8a:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b8e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102b95:	00 
  102b96:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102b99:	e8 e2 47 00 00       	call   107380 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102b9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ba1:	8b 00                	mov    (%eax),%eax
  102ba3:	25 08 00 00 00       	and    $0x8,%eax
  102ba8:	3d 00 00 00 00       	cmp    $0x0,%eax
  102bad:	0f 84 aa 00 00 00    	je     102c5d <kernel_main+0x19d>
  102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  102bb8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102bbb:	8b 49 18             	mov    0x18(%ecx),%ecx
  102bbe:	8b 09                	mov    (%ecx),%ecx
  102bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102bc3:	8b 52 18             	mov    0x18(%edx),%edx
  102bc6:	8b 12                	mov    (%edx),%edx
  102bc8:	8b 75 f4             	mov    -0xc(%ebp),%esi
  102bcb:	8b 76 18             	mov    0x18(%esi),%esi
  102bce:	8b 76 04             	mov    0x4(%esi),%esi
  102bd1:	8b 7d f4             	mov    -0xc(%ebp),%edi
  102bd4:	8b 7f 18             	mov    0x18(%edi),%edi
  102bd7:	8b 3f                	mov    (%edi),%edi
  102bd9:	29 fe                	sub    %edi,%esi
  102bdb:	89 0c 24             	mov    %ecx,(%esp)
  102bde:	89 54 24 04          	mov    %edx,0x4(%esp)
  102be2:	89 74 24 08          	mov    %esi,0x8(%esp)
  102be6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102bed:	00 
  102bee:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102bf1:	e8 ea 48 00 00       	call   1074e0 <vmm_map_range>
  102bf6:	8d 05 14 93 10 00    	lea    0x109314,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  102bfc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102bff:	8b 49 18             	mov    0x18(%ecx),%ecx
  102c02:	8b 49 04             	mov    0x4(%ecx),%ecx
  102c05:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102c08:	8b 52 18             	mov    0x18(%edx),%edx
  102c0b:	8b 12                	mov    (%edx),%edx
  102c0d:	29 d1                	sub    %edx,%ecx
  102c0f:	89 04 24             	mov    %eax,(%esp)
  102c12:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c16:	e8 95 d6 ff ff       	call   1002b0 <kprintf>
  102c1b:	8d 0d 54 93 10 00    	lea    0x109354,%ecx
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  102c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102c24:	8b 52 18             	mov    0x18(%edx),%edx
  102c27:	8b 12                	mov    (%edx),%edx
  102c29:	8b 75 f4             	mov    -0xc(%ebp),%esi
  102c2c:	8b 76 18             	mov    0x18(%esi),%esi
  102c2f:	8b 76 04             	mov    0x4(%esi),%esi
  102c32:	89 0c 24             	mov    %ecx,(%esp)
  102c35:	89 54 24 04          	mov    %edx,0x4(%esp)
  102c39:	89 74 24 08          	mov    %esi,0x8(%esp)
  102c3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102c40:	e8 6b d6 ff ff       	call   1002b0 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  102c45:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102c48:	8b 49 18             	mov    0x18(%ecx),%ecx
  102c4b:	8b 09                	mov    (%ecx),%ecx
  102c4d:	89 0c 24             	mov    %ecx,(%esp)
  102c50:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102c53:	e8 38 10 00 00       	call   103c90 <tar_load_ramfs>
    } else {
  102c58:	e9 11 00 00 00       	jmp    102c6e <kernel_main+0x1ae>
  102c5d:	8d 05 6e 93 10 00    	lea    0x10936e,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  102c63:	89 04 24             	mov    %eax,(%esp)
  102c66:	e8 45 d6 ff ff       	call   1002b0 <kprintf>
  102c6b:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102c6e:	8d 05 a0 93 10 00    	lea    0x1093a0,%eax
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  102c74:	89 04 24             	mov    %eax,(%esp)
  102c77:	e8 34 d6 ff ff       	call   1002b0 <kprintf>
  102c7c:	8d 0d c0 93 10 00    	lea    0x1093c0,%ecx
  102c82:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  102c87:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102c8a:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  102c8d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  102c90:	e8 5b 15 00 00       	call   1041f0 <ramfs_vga_driver_struct>
  102c95:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102c98:	89 0c 24             	mov    %ecx,(%esp)
  102c9b:	89 44 24 04          	mov    %eax,0x4(%esp)
  102c9f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102ca6:	00 
  102ca7:	e8 b4 2f 00 00       	call   105c60 <vfs_create_kfile>
  102cac:	8d 0d c9 93 10 00    	lea    0x1093c9,%ecx

    if(vfs_exists("/ibin/init")) {
  102cb2:	89 0c 24             	mov    %ecx,(%esp)
  102cb5:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102cb8:	e8 c3 33 00 00       	call   106080 <vfs_exists>
  102cbd:	3d 00 00 00 00       	cmp    $0x0,%eax
  102cc2:	0f 84 57 00 00 00    	je     102d1f <kernel_main+0x25f>
  102cc8:	8d 05 d4 93 10 00    	lea    0x1093d4,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  102cce:	89 04 24             	mov    %eax,(%esp)
  102cd1:	e8 da d5 ff ff       	call   1002b0 <kprintf>
  102cd6:	8d 0d c9 93 10 00    	lea    0x1093c9,%ecx
  102cdc:	ba 00 00 00 00       	mov    $0x0,%edx

        vfs_exec("/ibin/init", 0, 0, 0, 0, 0);
  102ce1:	89 0c 24             	mov    %ecx,(%esp)
  102ce4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ceb:	00 
  102cec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102cf3:	00 
  102cf4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102cfb:	00 
  102cfc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  102d03:	00 
  102d04:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  102d0b:	00 
  102d0c:	89 45 ac             	mov    %eax,-0x54(%ebp)
  102d0f:	89 55 a8             	mov    %edx,-0x58(%ebp)
  102d12:	e8 f9 33 00 00       	call   106110 <vfs_exec>
        enableScheduling();
  102d17:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102d1a:	e8 f1 14 00 00       	call   104210 <enableScheduling>
    }

	while(1);
  102d1f:	e9 00 00 00 00       	jmp    102d24 <kernel_main+0x264>
  102d24:	e9 fb ff ff ff       	jmp    102d24 <kernel_main+0x264>
  102d29:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102d30 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  102d30:	55                   	push   %ebp
  102d31:	89 e5                	mov    %esp,%ebp
  102d33:	50                   	push   %eax
  102d34:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102d38:	66 89 c1             	mov    %ax,%cx
  102d3b:	8a 55 0c             	mov    0xc(%ebp),%dl
  102d3e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102d42:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102d45:	8a 45 fd             	mov    -0x3(%ebp),%al
  102d48:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  102d4c:	ee                   	out    %al,(%dx)
}
  102d4d:	83 c4 04             	add    $0x4,%esp
  102d50:	5d                   	pop    %ebp
  102d51:	c3                   	ret    
  102d52:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102d59:	1f 84 00 00 00 00 00 

00102d60 <outw>:
    uint32_t result;
    asm volatile ("inl %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline void outw(uint16_t _port, uint16_t _data) {
  102d60:	55                   	push   %ebp
  102d61:	89 e5                	mov    %esp,%ebp
  102d63:	50                   	push   %eax
  102d64:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  102d68:	66 89 c1             	mov    %ax,%cx
  102d6b:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102d6f:	66 89 c2             	mov    %ax,%dx
  102d72:	66 89 55 fe          	mov    %dx,-0x2(%ebp)
  102d76:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
  102d7a:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
  102d7e:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  102d82:	66 ef                	out    %ax,(%dx)
}
  102d84:	83 c4 04             	add    $0x4,%esp
  102d87:	5d                   	pop    %ebp
  102d88:	c3                   	ret    
  102d89:	66 90                	xchg   %ax,%ax
  102d8b:	66 90                	xchg   %ax,%ax
  102d8d:	66 90                	xchg   %ax,%ax
  102d8f:	90                   	nop

00102d90 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  102d90:	55                   	push   %ebp
  102d91:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102d93:	56                   	push   %esi
  102d94:	83 ec 10             	sub    $0x10,%esp
  102d97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102d9e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102da5:	0f 8d b7 00 00 00    	jge    102e62 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  102dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102dae:	81 3c 85 98 a8 12 00 	cmpl   $0x0,0x12a898(,%eax,4)
  102db5:	00 00 00 00 
  102db9:	0f 84 8e 00 00 00    	je     102e4d <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  102dbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102dc6:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102dcd:	0f 8d 75 00 00 00    	jge    102e48 <pmm_alloc+0xb8>
  102dd3:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102dd8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102ddb:	8b 0c 8d 98 a8 12 00 	mov    0x12a898(,%ecx,4),%ecx
  102de2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102de5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102de8:	89 d1                	mov    %edx,%ecx
  102dea:	d3 e0                	shl    %cl,%eax
  102dec:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102def:	21 c2                	and    %eax,%edx
  102df1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102df7:	0f 84 36 00 00 00    	je     102e33 <pmm_alloc+0xa3>
  102dfd:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  102e02:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102e05:	d3 e0                	shl    %cl,%eax
  102e07:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102e0f:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  102e16:	21 c6                	and    %eax,%esi
  102e18:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  102e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e22:	c1 e0 05             	shl    $0x5,%eax
  102e25:	03 45 f0             	add    -0x10(%ebp),%eax
  102e28:	c1 e0 0c             	shl    $0xc,%eax
  102e2b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102e2e:	e9 36 00 00 00       	jmp    102e69 <pmm_alloc+0xd9>
				}
			}
  102e33:	e9 00 00 00 00       	jmp    102e38 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  102e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e3b:	05 01 00 00 00       	add    $0x1,%eax
  102e40:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102e43:	e9 7e ff ff ff       	jmp    102dc6 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  102e48:	e9 00 00 00 00       	jmp    102e4d <pmm_alloc+0xbd>
	}
  102e4d:	e9 00 00 00 00       	jmp    102e52 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e55:	05 01 00 00 00       	add    $0x1,%eax
  102e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102e5d:	e9 3c ff ff ff       	jmp    102d9e <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  102e62:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  102e69:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e6c:	83 c4 10             	add    $0x10,%esp
  102e6f:	5e                   	pop    %esi
  102e70:	5d                   	pop    %ebp
  102e71:	c3                   	ret    
  102e72:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102e79:	1f 84 00 00 00 00 00 

00102e80 <pmm_print_stats>:

void pmm_print_stats() {
  102e80:	55                   	push   %ebp
  102e81:	89 e5                	mov    %esp,%ebp
  102e83:	56                   	push   %esi
  102e84:	83 ec 34             	sub    $0x34,%esp
  102e87:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  102e8c:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  102e93:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102e96:	e8 65 00 00 00       	call   102f00 <pmm_get_free_space>
  102e9b:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102ea0:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  102ea6:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102ea9:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102eb3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102eb6:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102eb9:	e8 42 00 00 00       	call   102f00 <pmm_get_free_space>
  102ebe:	8d 0d fb 93 10 00    	lea    0x1093fb,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102ec4:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  102eca:	c1 ea 0a             	shr    $0xa,%edx
  102ecd:	89 0c 24             	mov    %ecx,(%esp)
  102ed0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102ed3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102ed7:	8b 75 ec             	mov    -0x14(%ebp),%esi
  102eda:	89 74 24 08          	mov    %esi,0x8(%esp)
  102ede:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102ee2:	89 54 24 10          	mov    %edx,0x10(%esp)
  102ee6:	e8 c5 d3 ff ff       	call   1002b0 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  102eeb:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102eee:	83 c4 34             	add    $0x34,%esp
  102ef1:	5e                   	pop    %esi
  102ef2:	5d                   	pop    %ebp
  102ef3:	c3                   	ret    
  102ef4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102efb:	00 00 00 00 00 

00102f00 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102f00:	55                   	push   %ebp
  102f01:	89 e5                	mov    %esp,%ebp
  102f03:	83 ec 14             	sub    $0x14,%esp
  102f06:	8b 45 08             	mov    0x8(%ebp),%eax
  102f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  102f0c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102f13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102f1a:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102f21:	0f 83 73 00 00 00    	jae    102f9a <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  102f27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102f2e:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102f35:	0f 83 4a 00 00 00    	jae    102f85 <pmm_get_free_space+0x85>
  102f3b:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  102f40:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102f43:	8b 0c 8d 98 a8 12 00 	mov    0x12a898(,%ecx,4),%ecx
  102f4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102f4d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102f50:	89 d1                	mov    %edx,%ecx
  102f52:	d3 e0                	shl    %cl,%eax
  102f54:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102f57:	21 c2                	and    %eax,%edx
  102f59:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102f5f:	0f 84 0b 00 00 00    	je     102f70 <pmm_get_free_space+0x70>
				free += 0x1000;
  102f65:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f68:	05 00 10 00 00       	add    $0x1000,%eax
  102f6d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  102f70:	e9 00 00 00 00       	jmp    102f75 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  102f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f78:	05 01 00 00 00       	add    $0x1,%eax
  102f7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102f80:	e9 a9 ff ff ff       	jmp    102f2e <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  102f85:	e9 00 00 00 00       	jmp    102f8a <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102f8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f8d:	05 01 00 00 00       	add    $0x1,%eax
  102f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102f95:	e9 80 ff ff ff       	jmp    102f1a <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  102f9a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f9d:	31 d2                	xor    %edx,%edx
  102f9f:	f7 75 fc             	divl   -0x4(%ebp)
  102fa2:	83 c4 14             	add    $0x14,%esp
  102fa5:	5d                   	pop    %ebp
  102fa6:	c3                   	ret    
  102fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102fae:	00 00 

00102fb0 <pmm_free>:
}

void pmm_free(void* addr) {
  102fb0:	55                   	push   %ebp
  102fb1:	89 e5                	mov    %esp,%ebp
  102fb3:	56                   	push   %esi
  102fb4:	83 ec 14             	sub    $0x14,%esp
  102fb7:	8b 45 08             	mov    0x8(%ebp),%eax
  102fba:	b9 01 00 00 00       	mov    $0x1,%ecx
  102fbf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102fc2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102fc5:	c1 e8 0c             	shr    $0xc,%eax
  102fc8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  102fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fce:	25 1f 00 00 00       	and    $0x1f,%eax
  102fd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fd9:	c1 e8 05             	shr    $0x5,%eax
  102fdc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  102fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fe2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102fe5:	89 c1                	mov    %eax,%ecx
  102fe7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102fea:	d3 e0                	shl    %cl,%eax
  102fec:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102fef:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  102ff6:	09 c6                	or     %eax,%esi
  102ff8:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
}
  102fff:	83 c4 14             	add    $0x14,%esp
  103002:	5e                   	pop    %esi
  103003:	5d                   	pop    %ebp
  103004:	c3                   	ret    
  103005:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10300c:	00 00 00 00 

00103010 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  103010:	55                   	push   %ebp
  103011:	89 e5                	mov    %esp,%ebp
  103013:	56                   	push   %esi
  103014:	83 ec 14             	sub    $0x14,%esp
  103017:	8b 45 08             	mov    0x8(%ebp),%eax
  10301a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10301f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  103022:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103025:	c1 e8 0c             	shr    $0xc,%eax
  103028:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10302b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10302e:	25 1f 00 00 00       	and    $0x1f,%eax
  103033:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  103036:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103039:	c1 e8 05             	shr    $0x5,%eax
  10303c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  10303f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103042:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  103045:	89 c1                	mov    %eax,%ecx
  103047:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10304a:	d3 e0                	shl    %cl,%eax
  10304c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  103051:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103054:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  10305b:	21 c6                	and    %eax,%esi
  10305d:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
}
  103064:	83 c4 14             	add    $0x14,%esp
  103067:	5e                   	pop    %esi
  103068:	5d                   	pop    %ebp
  103069:	c3                   	ret    
  10306a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103070 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  103070:	55                   	push   %ebp
  103071:	89 e5                	mov    %esp,%ebp
  103073:	53                   	push   %ebx
  103074:	57                   	push   %edi
  103075:	56                   	push   %esi
  103076:	83 ec 5c             	sub    $0x5c,%esp
  103079:	8b 45 08             	mov    0x8(%ebp),%eax
  10307c:	8d 0d 38 94 10 00    	lea    0x109438,%ecx
  103082:	8d 15 98 a8 12 00    	lea    0x12a898,%edx
  103088:	89 d6                	mov    %edx,%esi
  10308a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  103090:	89 d7                	mov    %edx,%edi
  103092:	bb 00 00 00 00       	mov    $0x0,%ebx
  103097:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10309a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10309f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1030a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1030a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1030a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030ab:	8b 40 30             	mov    0x30(%eax),%eax
  1030ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  1030b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030b4:	8b 40 30             	mov    0x30(%eax),%eax
  1030b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1030ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030bd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1030c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1030c3:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1030c6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1030c9:	03 41 2c             	add    0x2c(%ecx),%eax
  1030cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  1030cf:	89 3c 24             	mov    %edi,(%esp)
  1030d2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1030d9:	00 
  1030da:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1030e1:	00 
  1030e2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1030e5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1030e8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1030eb:	e8 00 24 00 00       	call   1054f0 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1030f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1030f3:	89 04 24             	mov    %eax,(%esp)
  1030f6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1030f9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1030fd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  103100:	89 54 24 08          	mov    %edx,0x8(%esp)
  103104:	e8 a7 d1 ff ff       	call   1002b0 <kprintf>
  103109:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  10310c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10310f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  103112:	0f 83 77 00 00 00    	jae    10318f <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  103118:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10311b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  103122:	0f 85 57 00 00 00    	jne    10317f <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  103128:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10312b:	8b 40 04             	mov    0x4(%eax),%eax
  10312e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  103131:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103134:	8b 49 0c             	mov    0xc(%ecx),%ecx
  103137:	01 c8                	add    %ecx,%eax
  103139:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  10313c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10313f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  103142:	0f 83 32 00 00 00    	jae    10317a <pmm_init+0x10a>
				pmm_free((void*) addr);
  103148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10314b:	89 04 24             	mov    %eax,(%esp)
  10314e:	e8 5d fe ff ff       	call   102fb0 <pmm_free>
				if (addr > upper_limit)
  103153:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103156:	3b 05 28 a4 10 00    	cmp    0x10a428,%eax
  10315c:	0f 86 08 00 00 00    	jbe    10316a <pmm_init+0xfa>
					upper_limit = addr;
  103162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103165:	a3 28 a4 10 00       	mov    %eax,0x10a428
				addr += 0x1000;
  10316a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10316d:	05 00 10 00 00       	add    $0x1000,%eax
  103172:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  103175:	e9 c2 ff ff ff       	jmp    10313c <pmm_init+0xcc>
		}
  10317a:	e9 00 00 00 00       	jmp    10317f <pmm_init+0x10f>
		mmap++;
  10317f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103182:	05 18 00 00 00       	add    $0x18,%eax
  103187:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  10318a:	e9 7d ff ff ff       	jmp    10310c <pmm_init+0x9c>
  10318f:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  103195:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103198:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  10319e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  1031a1:	0f 83 1b 00 00 00    	jae    1031c2 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  1031a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1031aa:	89 04 24             	mov    %eax,(%esp)
  1031ad:	e8 5e fe ff ff       	call   103010 <pmm_mark_used>
		addr += 0x1000;
  1031b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1031b5:	05 00 10 00 00       	add    $0x1000,%eax
  1031ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  1031bd:	e9 d6 ff ff ff       	jmp    103198 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  1031c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1031c5:	8b 40 18             	mov    0x18(%eax),%eax
  1031c8:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  1031cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1031ce:	89 04 24             	mov    %eax,(%esp)
  1031d1:	e8 3a fe ff ff       	call   103010 <pmm_mark_used>
	pmm_mark_used(modules);
  1031d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1031d9:	89 04 24             	mov    %eax,(%esp)
  1031dc:	e8 2f fe ff ff       	call   103010 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1031e1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  1031e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1031eb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1031ee:	3b 41 14             	cmp    0x14(%ecx),%eax
  1031f1:	0f 83 59 00 00 00    	jae    103250 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  1031f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1031fa:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1031fd:	c1 e0 04             	shl    $0x4,%eax
  103200:	01 c1                	add    %eax,%ecx
  103202:	8b 01                	mov    (%ecx),%eax
  103204:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  103207:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10320a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10320d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103210:	c1 e1 04             	shl    $0x4,%ecx
  103213:	01 ca                	add    %ecx,%edx
  103215:	8b 4a 04             	mov    0x4(%edx),%ecx
  103218:	39 c8                	cmp    %ecx,%eax
  10321a:	0f 83 1b 00 00 00    	jae    10323b <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  103220:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103223:	89 04 24             	mov    %eax,(%esp)
  103226:	e8 e5 fd ff ff       	call   103010 <pmm_mark_used>
			addr += 0x1000;
  10322b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10322e:	05 00 10 00 00       	add    $0x1000,%eax
  103233:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  103236:	e9 cc ff ff ff       	jmp    103207 <pmm_init+0x197>
	}
  10323b:	e9 00 00 00 00       	jmp    103240 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  103240:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  103243:	05 01 00 00 00       	add    $0x1,%eax
  103248:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10324b:	e9 98 ff ff ff       	jmp    1031e8 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  103250:	83 c4 5c             	add    $0x5c,%esp
  103253:	5e                   	pop    %esi
  103254:	5f                   	pop    %edi
  103255:	5b                   	pop    %ebx
  103256:	5d                   	pop    %ebp
  103257:	c3                   	ret    
  103258:	66 90                	xchg   %ax,%ax
  10325a:	66 90                	xchg   %ax,%ax
  10325c:	66 90                	xchg   %ax,%ax
  10325e:	66 90                	xchg   %ax,%ax

00103260 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  103260:	55                   	push   %ebp
  103261:	89 e5                	mov    %esp,%ebp
  103263:	83 ec 18             	sub    $0x18,%esp
  103266:	8d 05 98 a8 14 00    	lea    0x14a898,%eax
  10326c:	b9 00 00 00 00       	mov    $0x0,%ecx
  103271:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  103276:	89 04 24             	mov    %eax,(%esp)
  103279:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103280:	00 
  103281:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  103288:	00 
  103289:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10328c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10328f:	e8 5c 22 00 00       	call   1054f0 <memset>
}
  103294:	83 c4 18             	add    $0x18,%esp
  103297:	5d                   	pop    %ebp
  103298:	c3                   	ret    
  103299:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

001032a0 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  1032a0:	55                   	push   %ebp
  1032a1:	89 e5                	mov    %esp,%ebp
  1032a3:	83 ec 28             	sub    $0x28,%esp
  1032a6:	8b 45 10             	mov    0x10(%ebp),%eax
  1032a9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1032ac:	8b 55 08             	mov    0x8(%ebp),%edx
  1032af:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1032b2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1032b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1032b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032bb:	8b 40 04             	mov    0x4(%eax),%eax
  1032be:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  1032c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032c4:	8b 00                	mov    (%eax),%eax
  1032c6:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1032cd:	00 00 00 00 
  1032d1:	0f 84 70 00 00 00    	je     103347 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  1032d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032da:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1032dd:	8b 09                	mov    (%ecx),%ecx
  1032df:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1032e6:	8b 49 04             	mov    0x4(%ecx),%ecx
  1032e9:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1032ec:	2b 4a 08             	sub    0x8(%edx),%ecx
  1032ef:	39 c8                	cmp    %ecx,%eax
  1032f1:	0f 86 0c 00 00 00    	jbe    103303 <ramfs_block_read+0x63>
  1032f7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1032fe:	e9 4b 00 00 00       	jmp    10334e <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103306:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103309:	8b 09                	mov    (%ecx),%ecx
  10330b:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103312:	8b 09                	mov    (%ecx),%ecx
  103314:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103317:	03 4a 08             	add    0x8(%edx),%ecx
  10331a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10331d:	89 04 24             	mov    %eax,(%esp)
  103320:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103324:	89 54 24 08          	mov    %edx,0x8(%esp)
  103328:	e8 23 22 00 00       	call   105550 <memcpy>
        handle->position += length;
  10332d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103330:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103333:	8b 51 08             	mov    0x8(%ecx),%edx
  103336:	01 c2                	add    %eax,%edx
  103338:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10333b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103342:	e9 07 00 00 00       	jmp    10334e <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103347:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10334e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103351:	83 c4 28             	add    $0x28,%esp
  103354:	5d                   	pop    %ebp
  103355:	c3                   	ret    
  103356:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10335d:	00 00 00 

00103360 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  103360:	55                   	push   %ebp
  103361:	89 e5                	mov    %esp,%ebp
  103363:	83 ec 28             	sub    $0x28,%esp
  103366:	8b 45 10             	mov    0x10(%ebp),%eax
  103369:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10336c:	8b 55 08             	mov    0x8(%ebp),%edx
  10336f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103372:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103375:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103378:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10337b:	8b 40 04             	mov    0x4(%eax),%eax
  10337e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103381:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103384:	8b 00                	mov    (%eax),%eax
  103386:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10338d:	00 00 00 00 
  103391:	0f 84 70 00 00 00    	je     103407 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  103397:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10339a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10339d:	8b 09                	mov    (%ecx),%ecx
  10339f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1033a6:	8b 49 04             	mov    0x4(%ecx),%ecx
  1033a9:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1033ac:	2b 4a 08             	sub    0x8(%edx),%ecx
  1033af:	39 c8                	cmp    %ecx,%eax
  1033b1:	0f 86 0c 00 00 00    	jbe    1033c3 <ramfs_block_write+0x63>
  1033b7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1033be:	e9 4b 00 00 00       	jmp    10340e <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  1033c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033c6:	8b 00                	mov    (%eax),%eax
  1033c8:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1033cf:	8b 00                	mov    (%eax),%eax
  1033d1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1033d4:	03 41 08             	add    0x8(%ecx),%eax
  1033d7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1033da:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1033dd:	89 04 24             	mov    %eax,(%esp)
  1033e0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1033e4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1033e8:	e8 63 21 00 00       	call   105550 <memcpy>
        handle->position += length;
  1033ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033f0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1033f3:	8b 51 08             	mov    0x8(%ecx),%edx
  1033f6:	01 c2                	add    %eax,%edx
  1033f8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1033fb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103402:	e9 07 00 00 00       	jmp    10340e <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103407:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10340e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103411:	83 c4 28             	add    $0x28,%esp
  103414:	5d                   	pop    %ebp
  103415:	c3                   	ret    
  103416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10341d:	00 00 00 

00103420 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  103420:	55                   	push   %ebp
  103421:	89 e5                	mov    %esp,%ebp
  103423:	83 ec 18             	sub    $0x18,%esp
  103426:	8b 45 0c             	mov    0xc(%ebp),%eax
  103429:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10342c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10342f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  103432:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103435:	8b 00                	mov    (%eax),%eax
  103437:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10343e:	00 00 00 00 
  103442:	0f 84 9d 00 00 00    	je     1034e5 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  103448:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10344b:	25 01 00 00 00       	and    $0x1,%eax
  103450:	3d 00 00 00 00       	cmp    $0x0,%eax
  103455:	0f 84 18 00 00 00    	je     103473 <ramfs_block_open+0x53>
  10345b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10345e:	8b 00                	mov    (%eax),%eax
  103460:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103467:	8b 48 08             	mov    0x8(%eax),%ecx
  10346a:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103470:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  103473:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103476:	25 02 00 00 00       	and    $0x2,%eax
  10347b:	3d 00 00 00 00       	cmp    $0x0,%eax
  103480:	0f 84 18 00 00 00    	je     10349e <ramfs_block_open+0x7e>
  103486:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103489:	8b 00                	mov    (%eax),%eax
  10348b:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103492:	8b 48 0c             	mov    0xc(%eax),%ecx
  103495:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10349b:	89 48 0c             	mov    %ecx,0xc(%eax)
  10349e:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1034a3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1034aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1034ad:	e8 ce 19 00 00       	call   104e80 <malloc>
  1034b2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  1034b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034b8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034bb:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  1034be:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034c1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  1034c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034cb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  1034d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1034d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034d7:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  1034da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1034e0:	e9 08 00 00 00       	jmp    1034ed <ramfs_block_open+0xcd>
  1034e5:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  1034ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1034ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034f0:	83 c4 18             	add    $0x18,%esp
  1034f3:	5d                   	pop    %ebp
  1034f4:	c3                   	ret    
  1034f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1034fc:	00 00 00 00 

00103500 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  103500:	55                   	push   %ebp
  103501:	89 e5                	mov    %esp,%ebp
  103503:	83 ec 18             	sub    $0x18,%esp
  103506:	8b 45 08             	mov    0x8(%ebp),%eax
  103509:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10350c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10350f:	8b 40 04             	mov    0x4(%eax),%eax
  103512:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  103515:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103518:	8b 00                	mov    (%eax),%eax
  10351a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103521:	00 00 00 00 
  103525:	0f 84 61 00 00 00    	je     10358c <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  10352b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10352e:	8b 40 0c             	mov    0xc(%eax),%eax
  103531:	25 01 00 00 00       	and    $0x1,%eax
  103536:	3d 00 00 00 00       	cmp    $0x0,%eax
  10353b:	0f 84 18 00 00 00    	je     103559 <ramfs_block_close+0x59>
  103541:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103544:	8b 00                	mov    (%eax),%eax
  103546:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10354d:	8b 48 08             	mov    0x8(%eax),%ecx
  103550:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103556:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  103559:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10355c:	8b 40 0c             	mov    0xc(%eax),%eax
  10355f:	25 02 00 00 00       	and    $0x2,%eax
  103564:	3d 00 00 00 00       	cmp    $0x0,%eax
  103569:	0f 84 18 00 00 00    	je     103587 <ramfs_block_close+0x87>
  10356f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103572:	8b 00                	mov    (%eax),%eax
  103574:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10357b:	8b 48 0c             	mov    0xc(%eax),%ecx
  10357e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103584:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  103587:	e9 00 00 00 00       	jmp    10358c <ramfs_block_close+0x8c>

    free(handle);
  10358c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10358f:	89 04 24             	mov    %eax,(%esp)
  103592:	e8 b9 1c 00 00       	call   105250 <free>
  103597:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  10359c:	83 c4 18             	add    $0x18,%esp
  10359f:	5d                   	pop    %ebp
  1035a0:	c3                   	ret    
  1035a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1035a8:	0f 1f 84 00 00 00 00 
  1035af:	00 

001035b0 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  1035b0:	55                   	push   %ebp
  1035b1:	89 e5                	mov    %esp,%ebp
  1035b3:	83 ec 0c             	sub    $0xc,%esp
  1035b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1035b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1035bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035bf:	8b 40 04             	mov    0x4(%eax),%eax
  1035c2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  1035c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035c8:	8b 00                	mov    (%eax),%eax
  1035ca:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1035d1:	00 00 00 00 
  1035d5:	0f 84 1d 00 00 00    	je     1035f8 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  1035db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035de:	8b 00                	mov    (%eax),%eax
  1035e0:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1035e7:	8b 40 04             	mov    0x4(%eax),%eax
  1035ea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1035ed:	2b 41 08             	sub    0x8(%ecx),%eax
  1035f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1035f3:	e9 07 00 00 00       	jmp    1035ff <ramfs_block_available+0x4f>
    }

    return 0;
  1035f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1035ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103602:	83 c4 0c             	add    $0xc,%esp
  103605:	5d                   	pop    %ebp
  103606:	c3                   	ret    
  103607:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10360e:	00 00 

00103610 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  103610:	55                   	push   %ebp
  103611:	89 e5                	mov    %esp,%ebp
  103613:	83 ec 28             	sub    $0x28,%esp
  103616:	8b 45 08             	mov    0x8(%ebp),%eax
  103619:	b9 08 00 00 00       	mov    $0x8,%ecx
  10361e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103621:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103628:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10362b:	e8 50 18 00 00       	call   104e80 <malloc>
  103630:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103633:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10363a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103641:	0f 8d a7 00 00 00    	jge    1036ee <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  103647:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10364a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103651:	00 00 00 00 
  103655:	0f 85 7e 00 00 00    	jne    1036d9 <ramfs_block_create+0xc9>
  10365b:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  103660:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103667:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10366a:	e8 11 18 00 00       	call   104e80 <malloc>
  10366f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103672:	89 04 8d 98 a8 14 00 	mov    %eax,0x14a898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103679:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10367c:	8b 00                	mov    (%eax),%eax
  10367e:	89 04 24             	mov    %eax,(%esp)
  103681:	e8 fa 17 00 00       	call   104e80 <malloc>
  103686:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103689:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103690:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  103692:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103695:	8b 00                	mov    (%eax),%eax
  103697:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10369a:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1036a1:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  1036a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1036a7:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1036ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  1036b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1036b8:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1036bf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  1036c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1036c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1036cc:	89 01                	mov    %eax,(%ecx)

            return kfret;
  1036ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1036d4:	e9 1c 00 00 00       	jmp    1036f5 <ramfs_block_create+0xe5>
        }
    }
  1036d9:	e9 00 00 00 00       	jmp    1036de <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  1036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1036e1:	05 01 00 00 00       	add    $0x1,%eax
  1036e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1036e9:	e9 4c ff ff ff       	jmp    10363a <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  1036ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1036f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036f8:	83 c4 28             	add    $0x28,%esp
  1036fb:	5d                   	pop    %ebp
  1036fc:	c3                   	ret    
  1036fd:	0f 1f 00             	nopl   (%eax)

00103700 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  103700:	55                   	push   %ebp
  103701:	89 e5                	mov    %esp,%ebp
  103703:	8d 05 88 82 10 00    	lea    0x108288,%eax
    return &block_driver;
  103709:	5d                   	pop    %ebp
  10370a:	c3                   	ret    
  10370b:	66 90                	xchg   %ax,%ax
  10370d:	66 90                	xchg   %ax,%ax
  10370f:	90                   	nop

00103710 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  103710:	55                   	push   %ebp
  103711:	89 e5                	mov    %esp,%ebp
  103713:	83 ec 18             	sub    $0x18,%esp
  103716:	8d 05 98 a8 14 00    	lea    0x14a898,%eax
  10371c:	b9 00 00 00 00       	mov    $0x0,%ecx
  103721:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  103726:	89 04 24             	mov    %eax,(%esp)
  103729:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103730:	00 
  103731:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  103738:	00 
  103739:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10373c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10373f:	e8 ac 1d 00 00       	call   1054f0 <memset>
}
  103744:	83 c4 18             	add    $0x18,%esp
  103747:	5d                   	pop    %ebp
  103748:	c3                   	ret    
  103749:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103750 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  103750:	55                   	push   %ebp
  103751:	89 e5                	mov    %esp,%ebp
  103753:	83 ec 28             	sub    $0x28,%esp
  103756:	8b 45 10             	mov    0x10(%ebp),%eax
  103759:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10375c:	8b 55 08             	mov    0x8(%ebp),%edx
  10375f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103762:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103765:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103768:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10376b:	8b 40 04             	mov    0x4(%eax),%eax
  10376e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103771:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103774:	8b 00                	mov    (%eax),%eax
  103776:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10377d:	00 00 00 00 
  103781:	0f 84 d0 00 00 00    	je     103857 <ramfs_fifo_read+0x107>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  103787:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10378a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10378d:	8b 09                	mov    (%ecx),%ecx
  10378f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103796:	3b 41 04             	cmp    0x4(%ecx),%eax
  103799:	0f 86 0c 00 00 00    	jbe    1037ab <ramfs_fifo_read+0x5b>
  10379f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1037a6:	e9 b3 00 00 00       	jmp    10385e <ramfs_fifo_read+0x10e>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  1037ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037ae:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1037b1:	8b 09                	mov    (%ecx),%ecx
  1037b3:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1037ba:	3b 41 08             	cmp    0x8(%ecx),%eax
  1037bd:	0f 86 0c 00 00 00    	jbe    1037cf <ramfs_fifo_read+0x7f>
  1037c3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1037ca:	e9 8f 00 00 00       	jmp    10385e <ramfs_fifo_read+0x10e>

        memcpy(dest, buffer[kf->id]->buffer, length);
  1037cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037d2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1037d5:	8b 09                	mov    (%ecx),%ecx
  1037d7:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1037de:	8b 09                	mov    (%ecx),%ecx
  1037e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1037e3:	89 04 24             	mov    %eax,(%esp)
  1037e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1037ea:	89 54 24 08          	mov    %edx,0x8(%esp)
  1037ee:	e8 5d 1d 00 00       	call   105550 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  1037f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037f6:	8b 00                	mov    (%eax),%eax
  1037f8:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1037ff:	8b 00                	mov    (%eax),%eax
  103801:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103804:	8b 09                	mov    (%ecx),%ecx
  103806:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10380d:	8b 09                	mov    (%ecx),%ecx
  10380f:	03 4d f0             	add    -0x10(%ebp),%ecx
  103812:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103815:	8b 12                	mov    (%edx),%edx
  103817:	8b 14 95 98 a8 14 00 	mov    0x14a898(,%edx,4),%edx
  10381e:	8b 52 08             	mov    0x8(%edx),%edx
  103821:	2b 55 f0             	sub    -0x10(%ebp),%edx
  103824:	89 04 24             	mov    %eax,(%esp)
  103827:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10382b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10382f:	e8 1c 1d 00 00       	call   105550 <memcpy>
        buffer[kf->id]->pos -= length;
  103834:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103837:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10383a:	8b 09                	mov    (%ecx),%ecx
  10383c:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103843:	8b 51 08             	mov    0x8(%ecx),%edx
  103846:	29 c2                	sub    %eax,%edx
  103848:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10384b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103852:	e9 07 00 00 00       	jmp    10385e <ramfs_fifo_read+0x10e>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103857:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10385e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103861:	83 c4 28             	add    $0x28,%esp
  103864:	5d                   	pop    %ebp
  103865:	c3                   	ret    
  103866:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10386d:	00 00 00 

00103870 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  103870:	55                   	push   %ebp
  103871:	89 e5                	mov    %esp,%ebp
  103873:	83 ec 28             	sub    $0x28,%esp
  103876:	8b 45 10             	mov    0x10(%ebp),%eax
  103879:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10387c:	8b 55 08             	mov    0x8(%ebp),%edx
  10387f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103882:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103885:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103888:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10388b:	8b 40 04             	mov    0x4(%eax),%eax
  10388e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103891:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103894:	8b 00                	mov    (%eax),%eax
  103896:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10389d:	00 00 00 00 
  1038a1:	0f 84 af 00 00 00    	je     103956 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  1038a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038aa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1038ad:	8b 09                	mov    (%ecx),%ecx
  1038af:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1038b6:	3b 41 04             	cmp    0x4(%ecx),%eax
  1038b9:	0f 86 0c 00 00 00    	jbe    1038cb <ramfs_fifo_write+0x5b>
  1038bf:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1038c6:	e9 92 00 00 00       	jmp    10395d <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  1038cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038ce:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1038d1:	8b 09                	mov    (%ecx),%ecx
  1038d3:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1038da:	8b 49 04             	mov    0x4(%ecx),%ecx
  1038dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1038e0:	8b 12                	mov    (%edx),%edx
  1038e2:	8b 14 95 98 a8 14 00 	mov    0x14a898(,%edx,4),%edx
  1038e9:	2b 4a 08             	sub    0x8(%edx),%ecx
  1038ec:	39 c8                	cmp    %ecx,%eax
  1038ee:	0f 86 0c 00 00 00    	jbe    103900 <ramfs_fifo_write+0x90>
  1038f4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1038fb:	e9 5d 00 00 00       	jmp    10395d <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  103900:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103903:	8b 00                	mov    (%eax),%eax
  103905:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10390c:	8b 00                	mov    (%eax),%eax
  10390e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103911:	8b 09                	mov    (%ecx),%ecx
  103913:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10391a:	03 41 08             	add    0x8(%ecx),%eax
  10391d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103920:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103923:	89 04 24             	mov    %eax,(%esp)
  103926:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10392a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10392e:	e8 1d 1c 00 00       	call   105550 <memcpy>
        buffer[kf->id]->pos += length;
  103933:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103936:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103939:	8b 09                	mov    (%ecx),%ecx
  10393b:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103942:	8b 51 08             	mov    0x8(%ecx),%edx
  103945:	01 c2                	add    %eax,%edx
  103947:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10394a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103951:	e9 07 00 00 00       	jmp    10395d <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103956:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10395d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103960:	83 c4 28             	add    $0x28,%esp
  103963:	5d                   	pop    %ebp
  103964:	c3                   	ret    
  103965:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10396c:	00 00 00 00 

00103970 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  103970:	55                   	push   %ebp
  103971:	89 e5                	mov    %esp,%ebp
  103973:	83 ec 18             	sub    $0x18,%esp
  103976:	8b 45 0c             	mov    0xc(%ebp),%eax
  103979:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10397c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10397f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  103982:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103985:	8b 00                	mov    (%eax),%eax
  103987:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10398e:	00 00 00 00 
  103992:	0f 84 bc 00 00 00    	je     103a54 <ramfs_fifo_open+0xe4>
        if(filemode & FM_EXEC) return 0;
  103998:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10399b:	25 04 00 00 00       	and    $0x4,%eax
  1039a0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1039a5:	0f 84 0c 00 00 00    	je     1039b7 <ramfs_fifo_open+0x47>
  1039ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1039b2:	e9 a4 00 00 00       	jmp    103a5b <ramfs_fifo_open+0xeb>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  1039b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1039ba:	25 01 00 00 00       	and    $0x1,%eax
  1039bf:	3d 00 00 00 00       	cmp    $0x0,%eax
  1039c4:	0f 84 18 00 00 00    	je     1039e2 <ramfs_fifo_open+0x72>
  1039ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039cd:	8b 00                	mov    (%eax),%eax
  1039cf:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1039d6:	8b 48 0c             	mov    0xc(%eax),%ecx
  1039d9:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1039df:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  1039e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1039e5:	25 02 00 00 00       	and    $0x2,%eax
  1039ea:	3d 00 00 00 00       	cmp    $0x0,%eax
  1039ef:	0f 84 18 00 00 00    	je     103a0d <ramfs_fifo_open+0x9d>
  1039f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039f8:	8b 00                	mov    (%eax),%eax
  1039fa:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103a01:	8b 48 10             	mov    0x10(%eax),%ecx
  103a04:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103a0a:	89 48 10             	mov    %ecx,0x10(%eax)
  103a0d:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  103a12:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103a19:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103a1c:	e8 5f 14 00 00       	call   104e80 <malloc>
  103a21:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  103a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a27:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a2a:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  103a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a30:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  103a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a3a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  103a40:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a43:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a46:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  103a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103a4f:	e9 07 00 00 00       	jmp    103a5b <ramfs_fifo_open+0xeb>
    }

    return 0;
  103a54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103a5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a5e:	83 c4 18             	add    $0x18,%esp
  103a61:	5d                   	pop    %ebp
  103a62:	c3                   	ret    
  103a63:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103a6a:	84 00 00 00 00 00 

00103a70 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  103a70:	55                   	push   %ebp
  103a71:	89 e5                	mov    %esp,%ebp
  103a73:	83 ec 18             	sub    $0x18,%esp
  103a76:	8b 45 08             	mov    0x8(%ebp),%eax
  103a79:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103a7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a7f:	8b 40 04             	mov    0x4(%eax),%eax
  103a82:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  103a85:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a88:	8b 00                	mov    (%eax),%eax
  103a8a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103a91:	00 00 00 00 
  103a95:	0f 84 61 00 00 00    	je     103afc <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  103a9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a9e:	8b 40 0c             	mov    0xc(%eax),%eax
  103aa1:	25 01 00 00 00       	and    $0x1,%eax
  103aa6:	3d 00 00 00 00       	cmp    $0x0,%eax
  103aab:	0f 84 18 00 00 00    	je     103ac9 <ramfs_fifo_close+0x59>
  103ab1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ab4:	8b 00                	mov    (%eax),%eax
  103ab6:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103abd:	8b 48 0c             	mov    0xc(%eax),%ecx
  103ac0:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103ac6:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  103ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103acc:	8b 40 0c             	mov    0xc(%eax),%eax
  103acf:	25 02 00 00 00       	and    $0x2,%eax
  103ad4:	3d 00 00 00 00       	cmp    $0x0,%eax
  103ad9:	0f 84 18 00 00 00    	je     103af7 <ramfs_fifo_close+0x87>
  103adf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ae2:	8b 00                	mov    (%eax),%eax
  103ae4:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103aeb:	8b 48 10             	mov    0x10(%eax),%ecx
  103aee:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103af4:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  103af7:	e9 00 00 00 00       	jmp    103afc <ramfs_fifo_close+0x8c>

    free(handle);
  103afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103aff:	89 04 24             	mov    %eax,(%esp)
  103b02:	e8 49 17 00 00       	call   105250 <free>
  103b07:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  103b0c:	83 c4 18             	add    $0x18,%esp
  103b0f:	5d                   	pop    %ebp
  103b10:	c3                   	ret    
  103b11:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103b18:	0f 1f 84 00 00 00 00 
  103b1f:	00 

00103b20 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  103b20:	55                   	push   %ebp
  103b21:	89 e5                	mov    %esp,%ebp
  103b23:	83 ec 0c             	sub    $0xc,%esp
  103b26:	8b 45 08             	mov    0x8(%ebp),%eax
  103b29:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103b2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103b2f:	8b 40 04             	mov    0x4(%eax),%eax
  103b32:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  103b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b38:	8b 00                	mov    (%eax),%eax
  103b3a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103b41:	00 00 00 00 
  103b45:	0f 84 17 00 00 00    	je     103b62 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  103b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b4e:	8b 00                	mov    (%eax),%eax
  103b50:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103b57:	8b 40 08             	mov    0x8(%eax),%eax
  103b5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103b5d:	e9 07 00 00 00       	jmp    103b69 <ramfs_fifo_available+0x49>
    }

    return 0;
  103b62:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103b69:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103b6c:	83 c4 0c             	add    $0xc,%esp
  103b6f:	5d                   	pop    %ebp
  103b70:	c3                   	ret    
  103b71:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103b78:	0f 1f 84 00 00 00 00 
  103b7f:	00 

00103b80 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  103b80:	55                   	push   %ebp
  103b81:	89 e5                	mov    %esp,%ebp
  103b83:	83 ec 28             	sub    $0x28,%esp
  103b86:	8b 45 08             	mov    0x8(%ebp),%eax
  103b89:	b9 08 00 00 00       	mov    $0x8,%ecx
  103b8e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103b91:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103b98:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  103b9b:	e8 e0 12 00 00       	call   104e80 <malloc>
  103ba0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103ba3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  103baa:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103bb1:	0f 8d b8 00 00 00    	jge    103c6f <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  103bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103bba:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103bc1:	00 00 00 00 
  103bc5:	0f 85 8f 00 00 00    	jne    103c5a <ramfs_fifo_create+0xda>
  103bcb:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  103bd0:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  103bd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103bda:	e8 a1 12 00 00       	call   104e80 <malloc>
  103bdf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103be2:	89 04 8d 98 a8 14 00 	mov    %eax,0x14a898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103be9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103bec:	8b 00                	mov    (%eax),%eax
  103bee:	89 04 24             	mov    %eax,(%esp)
  103bf1:	e8 8a 12 00 00       	call   104e80 <malloc>
  103bf6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103bf9:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103c00:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  103c02:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c05:	8b 00                	mov    (%eax),%eax
  103c07:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103c0a:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103c11:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  103c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c17:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103c1e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  103c25:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c28:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103c2f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  103c36:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c39:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103c40:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  103c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103c4d:	89 01                	mov    %eax,(%ecx)

            return kfret;
  103c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c52:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103c55:	e9 1c 00 00 00       	jmp    103c76 <ramfs_fifo_create+0xf6>
        }
    }
  103c5a:	e9 00 00 00 00       	jmp    103c5f <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  103c5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c62:	05 01 00 00 00       	add    $0x1,%eax
  103c67:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103c6a:	e9 3b ff ff ff       	jmp    103baa <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  103c6f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103c76:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103c79:	83 c4 28             	add    $0x28,%esp
  103c7c:	5d                   	pop    %ebp
  103c7d:	c3                   	ret    
  103c7e:	66 90                	xchg   %ax,%ax

00103c80 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  103c80:	55                   	push   %ebp
  103c81:	89 e5                	mov    %esp,%ebp
  103c83:	8d 05 a4 82 10 00    	lea    0x1082a4,%eax
    return &fifo_driver;
  103c89:	5d                   	pop    %ebp
  103c8a:	c3                   	ret    
  103c8b:	90                   	nop
  103c8c:	66 90                	xchg   %ax,%ax
  103c8e:	66 90                	xchg   %ax,%ax

00103c90 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  103c90:	55                   	push   %ebp
  103c91:	89 e5                	mov    %esp,%ebp
  103c93:	56                   	push   %esi
  103c94:	83 ec 64             	sub    $0x64,%esp
  103c97:	8b 45 08             	mov    0x8(%ebp),%eax
  103c9a:	8d 0d 5b 94 10 00    	lea    0x10945b,%ecx
  103ca0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  103ca3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  103ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cac:	89 0c 24             	mov    %ecx,(%esp)
  103caf:	89 44 24 04          	mov    %eax,0x4(%esp)
  103cb3:	e8 f8 c5 ff ff       	call   1002b0 <kprintf>

    for (i = 0; ; i++)
  103cb8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  103cbf:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  103cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cc5:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  103cc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ccb:	0f be 00             	movsbl (%eax),%eax
  103cce:	3d 00 00 00 00       	cmp    $0x0,%eax
  103cd3:	0f 85 05 00 00 00    	jne    103cde <tar_load_ramfs+0x4e>
            break;
  103cd9:	e9 67 01 00 00       	jmp    103e45 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  103cde:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ce1:	05 7c 00 00 00       	add    $0x7c,%eax
  103ce6:	89 04 24             	mov    %eax,(%esp)
  103ce9:	e8 72 01 00 00       	call   103e60 <tar_parse_number>
  103cee:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  103cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cf4:	05 00 02 00 00       	add    $0x200,%eax
  103cf9:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  103cfc:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  103d03:	0f 84 cb 00 00 00    	je     103dd4 <tar_load_ramfs+0x144>
  103d09:	8d 05 87 94 10 00    	lea    0x109487,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  103d0f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103d12:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103d15:	89 04 24             	mov    %eax,(%esp)
  103d18:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103d1c:	89 54 24 08          	mov    %edx,0x8(%esp)
  103d20:	e8 8b c5 ff ff       	call   1002b0 <kprintf>
  103d25:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  103d28:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103d2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103d2e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  103d31:	89 55 d0             	mov    %edx,-0x30(%ebp)
  103d34:	e8 c7 f9 ff ff       	call   103700 <ramfs_block_driver_struct>
  103d39:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  103d3c:	89 0c 24             	mov    %ecx,(%esp)
  103d3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103d43:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  103d46:	89 44 24 08          	mov    %eax,0x8(%esp)
  103d4a:	e8 11 1f 00 00       	call   105c60 <vfs_create_kfile>
  103d4f:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  103d54:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103d57:	89 14 24             	mov    %edx,(%esp)
  103d5a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  103d61:	00 
  103d62:	89 45 cc             	mov    %eax,-0x34(%ebp)
  103d65:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  103d68:	e8 d3 1f 00 00       	call   105d40 <vfs_open>
  103d6d:	b9 01 00 00 00       	mov    $0x1,%ecx
  103d72:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  103d75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103d78:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103d7b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  103d7e:	89 04 24             	mov    %eax,(%esp)
  103d81:	89 54 24 04          	mov    %edx,0x4(%esp)
  103d85:	89 74 24 08          	mov    %esi,0x8(%esp)
  103d89:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103d90:	00 
  103d91:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  103d94:	e8 77 21 00 00       	call   105f10 <vfs_write>
  103d99:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  103d9c:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  103da3:	0f 84 18 00 00 00    	je     103dc1 <tar_load_ramfs+0x131>
  103da9:	8d 05 ab 94 10 00    	lea    0x1094ab,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  103daf:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103db2:	89 04 24             	mov    %eax,(%esp)
  103db5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103db9:	e8 f2 c4 ff ff       	call   1002b0 <kprintf>
  103dbe:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  103dc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103dc4:	89 04 24             	mov    %eax,(%esp)
  103dc7:	e8 f4 1f 00 00       	call   105dc0 <vfs_close>
        }
  103dcc:	89 45 bc             	mov    %eax,-0x44(%ebp)
  103dcf:	e9 2d 00 00 00       	jmp    103e01 <tar_load_ramfs+0x171>
  103dd4:	8d 05 c4 94 10 00    	lea    0x1094c4,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  103dda:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103ddd:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103de0:	89 04 24             	mov    %eax,(%esp)
  103de3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103de7:	89 54 24 08          	mov    %edx,0x8(%esp)
  103deb:	e8 c0 c4 ff ff       	call   1002b0 <kprintf>
            vfs_create_dir(header->name);
  103df0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103df3:	89 0c 24             	mov    %ecx,(%esp)
  103df6:	89 45 b8             	mov    %eax,-0x48(%ebp)
  103df9:	e8 c2 1c 00 00       	call   105ac0 <vfs_create_dir>
  103dfe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  103e01:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103e04:	c1 e8 09             	shr    $0x9,%eax
  103e07:	c1 e0 09             	shl    $0x9,%eax
  103e0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103e0d:	01 c1                	add    %eax,%ecx
  103e0f:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  103e12:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103e15:	25 ff 01 00 00       	and    $0x1ff,%eax
  103e1a:	3d 00 00 00 00       	cmp    $0x0,%eax
  103e1f:	0f 84 0b 00 00 00    	je     103e30 <tar_load_ramfs+0x1a0>
            address += 512;
  103e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e28:	05 00 02 00 00       	add    $0x200,%eax
  103e2d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  103e30:	e9 00 00 00 00       	jmp    103e35 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  103e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103e38:	05 01 00 00 00       	add    $0x1,%eax
  103e3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103e40:	e9 7d fe ff ff       	jmp    103cc2 <tar_load_ramfs+0x32>
  103e45:	8d 05 ea 94 10 00    	lea    0x1094ea,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  103e4b:	89 04 24             	mov    %eax,(%esp)
  103e4e:	e8 5d c4 ff ff       	call   1002b0 <kprintf>
}
  103e53:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103e56:	83 c4 64             	add    $0x64,%esp
  103e59:	5e                   	pop    %esi
  103e5a:	5d                   	pop    %ebp
  103e5b:	c3                   	ret    
  103e5c:	0f 1f 40 00          	nopl   0x0(%eax)

00103e60 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  103e60:	55                   	push   %ebp
  103e61:	89 e5                	mov    %esp,%ebp
  103e63:	83 ec 10             	sub    $0x10,%esp
  103e66:	8b 45 08             	mov    0x8(%ebp),%eax
  103e69:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  103e6c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  103e73:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  103e7a:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103e81:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103e88:	0f 86 39 00 00 00    	jbe    103ec7 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  103e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e91:	2d 01 00 00 00       	sub    $0x1,%eax
  103e96:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103e99:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  103e9d:	2d 30 00 00 00       	sub    $0x30,%eax
  103ea2:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103ea6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103ea9:	01 c1                	add    %eax,%ecx
  103eab:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  103eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103eb1:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ebc:	c1 e0 03             	shl    $0x3,%eax
  103ebf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103ec2:	e9 ba ff ff ff       	jmp    103e81 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  103ec7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103eca:	83 c4 10             	add    $0x10,%esp
  103ecd:	5d                   	pop    %ebp
  103ece:	c3                   	ret    
  103ecf:	90                   	nop

00103ed0 <ramfs_vga_read>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
    return malloc(sizeof(struct res_kfile));
}

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  103ed0:	55                   	push   %ebp
  103ed1:	89 e5                	mov    %esp,%ebp
  103ed3:	56                   	push   %esi
  103ed4:	83 ec 0c             	sub    $0xc,%esp
  103ed7:	8b 45 10             	mov    0x10(%ebp),%eax
  103eda:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103edd:	8b 55 08             	mov    0x8(%ebp),%edx
  103ee0:	be 03 00 00 00       	mov    $0x3,%esi
  103ee5:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103ee8:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103eeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103eee:	89 f0                	mov    %esi,%eax
  103ef0:	83 c4 0c             	add    $0xc,%esp
  103ef3:	5e                   	pop    %esi
  103ef4:	5d                   	pop    %ebp
  103ef5:	c3                   	ret    
  103ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103efd:	00 00 00 

00103f00 <ramfs_vga_write>:
}

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  103f00:	55                   	push   %ebp
  103f01:	89 e5                	mov    %esp,%ebp
  103f03:	83 ec 1c             	sub    $0x1c,%esp
  103f06:	8b 45 10             	mov    0x10(%ebp),%eax
  103f09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103f0c:	8b 55 08             	mov    0x8(%ebp),%edx
  103f0f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103f12:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103f15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  103f18:	81 7d f0 06 00 00 00 	cmpl   $0x6,-0x10(%ebp)
  103f1f:	0f 84 0c 00 00 00    	je     103f31 <ramfs_vga_write+0x31>
  103f25:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103f2c:	e9 1f 01 00 00       	jmp    104050 <ramfs_vga_write+0x150>

    struct vga_command* vgac = src;
  103f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(vgac->command == CMD_SET) {
  103f37:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103f3a:	0f b7 00             	movzwl (%eax),%eax
  103f3d:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f42:	0f 85 2f 00 00 00    	jne    103f77 <ramfs_vga_write+0x77>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  103f48:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103f4b:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103f4f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  103f54:	0f 8d 18 00 00 00    	jge    103f72 <ramfs_vga_write+0x72>
  103f5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103f5d:	66 8b 48 04          	mov    0x4(%eax),%cx
  103f61:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103f64:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103f68:	8b 15 c0 82 10 00    	mov    0x1082c0,%edx
  103f6e:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    }
  103f72:	e9 00 00 00 00       	jmp    103f77 <ramfs_vga_write+0x77>

    if(vgac->command == CMD_CLEAR) {
  103f77:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103f7a:	0f b7 00             	movzwl (%eax),%eax
  103f7d:	3d 01 00 00 00       	cmp    $0x1,%eax
  103f82:	0f 85 38 00 00 00    	jne    103fc0 <ramfs_vga_write+0xc0>
        for(int i = 0; i < (80 * 25); i++) {
  103f88:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  103f8f:	81 7d e8 d0 07 00 00 	cmpl   $0x7d0,-0x18(%ebp)
  103f96:	0f 8d 1f 00 00 00    	jge    103fbb <ramfs_vga_write+0xbb>
            vga_buffer[i] = 0;
  103f9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103f9f:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103fa5:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  103fab:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103fae:	05 01 00 00 00       	add    $0x1,%eax
  103fb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103fb6:	e9 d4 ff ff ff       	jmp    103f8f <ramfs_vga_write+0x8f>
            vga_buffer[i] = 0;
        }
    }
  103fbb:	e9 00 00 00 00       	jmp    103fc0 <ramfs_vga_write+0xc0>

    if(vgac->command == CMD_SCROLL) {
  103fc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103fc3:	0f b7 00             	movzwl (%eax),%eax
  103fc6:	3d 02 00 00 00       	cmp    $0x2,%eax
  103fcb:	0f 85 78 00 00 00    	jne    104049 <ramfs_vga_write+0x149>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103fd1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103fd8:	81 7d e4 80 07 00 00 	cmpl   $0x780,-0x1c(%ebp)
  103fdf:	0f 8d 2e 00 00 00    	jge    104013 <ramfs_vga_write+0x113>
            vga_buffer[i] = vga_buffer[i + 80];
  103fe5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103fe8:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103fee:	66 8b 94 41 a0 00 00 	mov    0xa0(%ecx,%eax,2),%dx
  103ff5:	00 
  103ff6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103ff9:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103fff:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  104003:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104006:	05 01 00 00 00       	add    $0x1,%eax
  10400b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10400e:	e9 c5 ff ff ff       	jmp    103fd8 <ramfs_vga_write+0xd8>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  104013:	e9 00 00 00 00       	jmp    104018 <ramfs_vga_write+0x118>
  104018:	81 7d e4 d0 07 00 00 	cmpl   $0x7d0,-0x1c(%ebp)
  10401f:	0f 8d 1f 00 00 00    	jge    104044 <ramfs_vga_write+0x144>
            vga_buffer[i] = 0;
  104025:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104028:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  10402e:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  104034:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104037:	05 01 00 00 00       	add    $0x1,%eax
  10403c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10403f:	e9 d4 ff ff ff       	jmp    104018 <ramfs_vga_write+0x118>
            vga_buffer[i] = 0;
        }
    }
  104044:	e9 00 00 00 00       	jmp    104049 <ramfs_vga_write+0x149>

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  104049:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104050:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104053:	83 c4 1c             	add    $0x1c,%esp
  104056:	5d                   	pop    %ebp
  104057:	c3                   	ret    
  104058:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10405f:	00 

00104060 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  104060:	55                   	push   %ebp
  104061:	89 e5                	mov    %esp,%ebp
  104063:	83 ec 18             	sub    $0x18,%esp
  104066:	8b 45 0c             	mov    0xc(%ebp),%eax
  104069:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10406c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10406f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(filemode & FM_EXEC) return 0;
  104072:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104075:	25 04 00 00 00       	and    $0x4,%eax
  10407a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10407f:	0f 84 0c 00 00 00    	je     104091 <ramfs_vga_open+0x31>
  104085:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10408c:	e9 b2 00 00 00       	jmp    104143 <ramfs_vga_open+0xe3>
    if(filemode & FM_READ) return 0;
  104091:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104094:	25 01 00 00 00       	and    $0x1,%eax
  104099:	3d 00 00 00 00       	cmp    $0x0,%eax
  10409e:	0f 84 0c 00 00 00    	je     1040b0 <ramfs_vga_open+0x50>
  1040a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1040ab:	e9 93 00 00 00       	jmp    104143 <ramfs_vga_open+0xe3>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  1040b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040b3:	25 02 00 00 00       	and    $0x2,%eax
  1040b8:	3d 00 00 00 00       	cmp    $0x0,%eax
  1040bd:	0f 84 1c 00 00 00    	je     1040df <ramfs_vga_open+0x7f>
  1040c3:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  1040ca:	00 00 00 
  1040cd:	0f 84 0c 00 00 00    	je     1040df <ramfs_vga_open+0x7f>
  1040d3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1040da:	e9 64 00 00 00       	jmp    104143 <ramfs_vga_open+0xe3>
    if((filemode & FM_WRITE)) vga_writers++;
  1040df:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040e2:	25 02 00 00 00       	and    $0x2,%eax
  1040e7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1040ec:	0f 84 0f 00 00 00    	je     104101 <ramfs_vga_open+0xa1>
  1040f2:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  1040f7:	05 01 00 00 00       	add    $0x1,%eax
  1040fc:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  104101:	b8 10 00 00 00       	mov    $0x10,%eax

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  104106:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10410d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104110:	e8 6b 0d 00 00       	call   104e80 <malloc>
  104115:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rethandle->filemode = filemode;
  104118:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10411b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10411e:	89 41 0c             	mov    %eax,0xc(%ecx)
    rethandle->position = 0;
  104121:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104124:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  10412b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10412e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  104134:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104137:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10413a:	89 41 04             	mov    %eax,0x4(%ecx)

    return rethandle;
  10413d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104140:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104143:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104146:	83 c4 18             	add    $0x18,%esp
  104149:	5d                   	pop    %ebp
  10414a:	c3                   	ret    
  10414b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104150 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  104150:	55                   	push   %ebp
  104151:	89 e5                	mov    %esp,%ebp
  104153:	83 ec 08             	sub    $0x8,%esp
  104156:	8b 45 08             	mov    0x8(%ebp),%eax
  104159:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(handle->filemode & FM_WRITE) vga_writers--;
  10415c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10415f:	8b 40 0c             	mov    0xc(%eax),%eax
  104162:	25 02 00 00 00       	and    $0x2,%eax
  104167:	3d 00 00 00 00       	cmp    $0x0,%eax
  10416c:	0f 84 0f 00 00 00    	je     104181 <ramfs_vga_close+0x31>
  104172:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  104177:	05 ff ff ff ff       	add    $0xffffffff,%eax
  10417c:	a3 2c a4 10 00       	mov    %eax,0x10a42c

    free(handle);
  104181:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104184:	89 04 24             	mov    %eax,(%esp)
  104187:	e8 c4 10 00 00       	call   105250 <free>
  10418c:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  104191:	83 c4 08             	add    $0x8,%esp
  104194:	5d                   	pop    %ebp
  104195:	c3                   	ret    
  104196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10419d:	00 00 00 

001041a0 <ramfs_vga_available>:

uint32_t ramfs_vga_writers() {
    return vga_writers;
}

uint32_t ramfs_vga_available(struct res_handle* handle) {
  1041a0:	55                   	push   %ebp
  1041a1:	89 e5                	mov    %esp,%ebp
  1041a3:	50                   	push   %eax
  1041a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1041a7:	b9 06 00 00 00       	mov    $0x6,%ecx
  1041ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sizeof(struct vga_command);
  1041af:	89 c8                	mov    %ecx,%eax
  1041b1:	83 c4 04             	add    $0x4,%esp
  1041b4:	5d                   	pop    %ebp
  1041b5:	c3                   	ret    
  1041b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1041bd:	00 00 00 

001041c0 <ramfs_vga_create>:
}

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  1041c0:	55                   	push   %ebp
  1041c1:	89 e5                	mov    %esp,%ebp
  1041c3:	83 ec 18             	sub    $0x18,%esp
  1041c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1041c9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1041ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return malloc(sizeof(struct res_kfile));
  1041d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1041d8:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1041db:	e8 a0 0c 00 00       	call   104e80 <malloc>
  1041e0:	83 c4 18             	add    $0x18,%esp
  1041e3:	5d                   	pop    %ebp
  1041e4:	c3                   	ret    
  1041e5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1041ec:	00 00 00 00 

001041f0 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  1041f0:	55                   	push   %ebp
  1041f1:	89 e5                	mov    %esp,%ebp
  1041f3:	8d 05 c4 82 10 00    	lea    0x1082c4,%eax
    return &vga_driver;
  1041f9:	5d                   	pop    %ebp
  1041fa:	c3                   	ret    
  1041fb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104200 <ramfs_vga_writers>:
}

uint32_t ramfs_vga_writers() {
  104200:	55                   	push   %ebp
  104201:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  104203:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  104208:	5d                   	pop    %ebp
  104209:	c3                   	ret    
  10420a:	66 90                	xchg   %ax,%ax
  10420c:	66 90                	xchg   %ax,%ax
  10420e:	66 90                	xchg   %ax,%ax

00104210 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1; //FIXME int.max_value overflow

void enableScheduling(void) {
  104210:	55                   	push   %ebp
  104211:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  104213:	c7 05 30 a4 10 00 01 	movl   $0x1,0x10a430
  10421a:	00 00 00 
}
  10421d:	5d                   	pop    %ebp
  10421e:	c3                   	ret    
  10421f:	90                   	nop

00104220 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  104220:	55                   	push   %ebp
  104221:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  104223:	a1 30 a4 10 00       	mov    0x10a430,%eax
  104228:	5d                   	pop    %ebp
  104229:	c3                   	ret    
  10422a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104230 <get_current_task>:
}

struct task* get_current_task(void) {
  104230:	55                   	push   %ebp
  104231:	89 e5                	mov    %esp,%ebp
    return current_task;
  104233:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104238:	5d                   	pop    %ebp
  104239:	c3                   	ret    
  10423a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104240 <get_task_by_pid>:
}

struct task* get_task_by_pid(int pid) {
  104240:	55                   	push   %ebp
  104241:	89 e5                	mov    %esp,%ebp
  104243:	83 ec 0c             	sub    $0xc,%esp
  104246:	8b 45 08             	mov    0x8(%ebp),%eax
  104249:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* cur = first_task;
  10424c:	a1 34 a4 10 00       	mov    0x10a434,%eax
  104251:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104254:	b0 00                	mov    $0x0,%al

    while(cur != 0 && cur->PID != pid) {
  104256:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10425d:	88 45 f7             	mov    %al,-0x9(%ebp)
  104260:	0f 84 0e 00 00 00    	je     104274 <get_task_by_pid+0x34>
  104266:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104269:	8b 00                	mov    (%eax),%eax
  10426b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  10426e:	0f 95 c1             	setne  %cl
  104271:	88 4d f7             	mov    %cl,-0x9(%ebp)
  104274:	8a 45 f7             	mov    -0x9(%ebp),%al
  104277:	a8 01                	test   $0x1,%al
  104279:	0f 85 05 00 00 00    	jne    104284 <get_task_by_pid+0x44>
  10427f:	e9 0e 00 00 00       	jmp    104292 <get_task_by_pid+0x52>
        cur = cur->next;
  104284:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104287:	8b 40 08             	mov    0x8(%eax),%eax
  10428a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  10428d:	e9 c2 ff ff ff       	jmp    104254 <get_task_by_pid+0x14>

    return cur;
  104292:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104295:	83 c4 0c             	add    $0xc,%esp
  104298:	5d                   	pop    %ebp
  104299:	c3                   	ret    
  10429a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001042a0 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  1042a0:	55                   	push   %ebp
  1042a1:	89 e5                	mov    %esp,%ebp
  1042a3:	83 ec 18             	sub    $0x18,%esp
  1042a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1042a9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1042ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  1042b1:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1042b6:	8b 40 3c             	mov    0x3c(%eax),%eax
  1042b9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  1042bc:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1042c3:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1042c6:	e8 b5 0b 00 00       	call   104e80 <malloc>
  1042cb:	b9 00 00 00 00       	mov    $0x0,%ecx
  1042d0:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  1042d6:	89 42 3c             	mov    %eax,0x3c(%edx)
    current_task->handle_list->next = old;
  1042d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1042dc:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  1042e2:	8b 52 3c             	mov    0x3c(%edx),%edx
  1042e5:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  1042e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1042eb:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  1042f1:	8b 52 3c             	mov    0x3c(%edx),%edx
  1042f4:	89 02                	mov    %eax,(%edx)

    return 0;
  1042f6:	89 c8                	mov    %ecx,%eax
  1042f8:	83 c4 18             	add    $0x18,%esp
  1042fb:	5d                   	pop    %ebp
  1042fc:	c3                   	ret    
  1042fd:	0f 1f 00             	nopl   (%eax)

00104300 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  104300:	55                   	push   %ebp
  104301:	89 e5                	mov    %esp,%ebp
  104303:	83 ec 18             	sub    $0x18,%esp
  104306:	8b 45 08             	mov    0x8(%ebp),%eax
  104309:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  10430c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104311:	8b 40 3c             	mov    0x3c(%eax),%eax
  104314:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  104317:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10431e:	0f 85 0c 00 00 00    	jne    104330 <unregister_handle+0x30>
  104324:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  10432b:	e9 b4 00 00 00       	jmp    1043e4 <unregister_handle+0xe4>
    if(cur == 0) return 1;
  104330:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104337:	0f 85 0c 00 00 00    	jne    104349 <unregister_handle+0x49>
  10433d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104344:	e9 9b 00 00 00       	jmp    1043e4 <unregister_handle+0xe4>

    if(cur->handle == h) {
  104349:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10434c:	8b 00                	mov    (%eax),%eax
  10434e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104351:	0f 85 26 00 00 00    	jne    10437d <unregister_handle+0x7d>
        current_task->handle_list = cur->next;
  104357:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10435a:	8b 40 04             	mov    0x4(%eax),%eax
  10435d:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  104363:	89 41 3c             	mov    %eax,0x3c(%ecx)
        free(cur);
  104366:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104369:	89 04 24             	mov    %eax,(%esp)
  10436c:	e8 df 0e 00 00       	call   105250 <free>

        return 0;
  104371:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104378:	e9 67 00 00 00       	jmp    1043e4 <unregister_handle+0xe4>
    }

    while(cur != 0) {
  10437d:	e9 00 00 00 00       	jmp    104382 <unregister_handle+0x82>
  104382:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104389:	0f 84 4e 00 00 00    	je     1043dd <unregister_handle+0xdd>
        if(cur->next->handle == h) {
  10438f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104392:	8b 40 04             	mov    0x4(%eax),%eax
  104395:	8b 00                	mov    (%eax),%eax
  104397:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10439a:	0f 85 2f 00 00 00    	jne    1043cf <unregister_handle+0xcf>
            void* next = cur->next;
  1043a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043a3:	8b 40 04             	mov    0x4(%eax),%eax
  1043a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  1043a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043ac:	8b 40 04             	mov    0x4(%eax),%eax
  1043af:	8b 40 04             	mov    0x4(%eax),%eax
  1043b2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1043b5:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  1043b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043bb:	89 04 24             	mov    %eax,(%esp)
  1043be:	e8 8d 0e 00 00       	call   105250 <free>

            return 0;
  1043c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1043ca:	e9 15 00 00 00       	jmp    1043e4 <unregister_handle+0xe4>
        }

        cur = cur->next;
  1043cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043d2:	8b 40 04             	mov    0x4(%eax),%eax
  1043d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  1043d8:	e9 a5 ff ff ff       	jmp    104382 <unregister_handle+0x82>

    return 3;
  1043dd:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1043e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1043e7:	83 c4 18             	add    $0x18,%esp
  1043ea:	5d                   	pop    %ebp
  1043eb:	c3                   	ret    
  1043ec:	0f 1f 40 00          	nopl   0x0(%eax)

001043f0 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1043f0:	55                   	push   %ebp
  1043f1:	89 e5                	mov    %esp,%ebp
  1043f3:	57                   	push   %edi
  1043f4:	56                   	push   %esi
  1043f5:	83 ec 40             	sub    $0x40,%esp
  1043f8:	8b 45 08             	mov    0x8(%ebp),%eax
  1043fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  1043fe:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104403:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  104409:	0f 85 85 00 00 00    	jne    104494 <schedule_exception+0xa4>
  10440f:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104414:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  10441b:	0f 85 73 00 00 00    	jne    104494 <schedule_exception+0xa4>
  104421:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  104426:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10442d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104430:	e8 5b be ff ff       	call   100290 <setclr>
  104435:	8d 05 1c 95 10 00    	lea    0x10951c,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  10443b:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  104441:	8b 09                	mov    (%ecx),%ecx
  104443:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  104449:	8b 52 24             	mov    0x24(%edx),%edx
  10444c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10444f:	8b 76 1c             	mov    0x1c(%esi),%esi
  104452:	8b 7d f0             	mov    -0x10(%ebp),%edi
  104455:	8b 7f 20             	mov    0x20(%edi),%edi
  104458:	89 04 24             	mov    %eax,(%esp)
  10445b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10445f:	89 54 24 08          	mov    %edx,0x8(%esp)
  104463:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104467:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10446b:	e8 40 be ff ff       	call   1002b0 <kprintf>
  104470:	8d 0d 5b 95 10 00    	lea    0x10955b,%ecx
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  104476:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104479:	89 14 24             	mov    %edx,(%esp)
  10447c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104480:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104483:	e8 38 bc ff ff       	call   1000c0 <show_cod>

        //will never occur cause COD terminates execution
        return 0;
  104488:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10448f:	e9 90 00 00 00       	jmp    104524 <schedule_exception+0x134>
  104494:	b8 04 00 00 00       	mov    $0x4,%eax
    } else {
        //Potential security leaks available in following code.
        setclr(0x04);
  104499:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1044a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1044a3:	e8 e8 bd ff ff       	call   100290 <setclr>
  1044a8:	8d 05 1c 95 10 00    	lea    0x10951c,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  1044ae:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  1044b4:	8b 09                	mov    (%ecx),%ecx
  1044b6:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  1044bc:	8b 52 24             	mov    0x24(%edx),%edx
  1044bf:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1044c2:	8b 76 1c             	mov    0x1c(%esi),%esi
  1044c5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1044c8:	8b 7f 20             	mov    0x20(%edi),%edi
  1044cb:	89 04 24             	mov    %eax,(%esp)
  1044ce:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1044d2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1044d6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1044da:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1044de:	e8 cd bd ff ff       	call   1002b0 <kprintf>
  1044e3:	8d 0d 54 92 10 00    	lea    0x109254,%ecx
        kprintf("\n");
  1044e9:	89 0c 24             	mov    %ecx,(%esp)
  1044ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1044ef:	e8 bc bd ff ff       	call   1002b0 <kprintf>
        show_dump(cpu);
  1044f4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1044f7:	89 0c 24             	mov    %ecx,(%esp)
  1044fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1044fd:	e8 3e bc ff ff       	call   100140 <show_dump>
  104502:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  104507:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10450e:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104511:	e8 7a bd ff ff       	call   100290 <setclr>

        return terminate_current(cpu);
  104516:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104519:	89 04 24             	mov    %eax,(%esp)
  10451c:	e8 0f 00 00 00       	call   104530 <terminate_current>
  104521:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
}
  104524:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104527:	83 c4 40             	add    $0x40,%esp
  10452a:	5e                   	pop    %esi
  10452b:	5f                   	pop    %edi
  10452c:	5d                   	pop    %ebp
  10452d:	c3                   	ret    
  10452e:	66 90                	xchg   %ax,%ax

00104530 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  104530:	55                   	push   %ebp
  104531:	89 e5                	mov    %esp,%ebp
  104533:	83 ec 18             	sub    $0x18,%esp
  104536:	8b 45 08             	mov    0x8(%ebp),%eax
  104539:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  10453c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104541:	8b 40 08             	mov    0x8(%eax),%eax
  104544:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  104547:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10454c:	8b 40 0c             	mov    0xc(%eax),%eax
  10454f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* old = current_task;
  104552:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104557:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vmm_free_current_pagetables();
  10455a:	e8 e1 2b 00 00       	call   107140 <vmm_free_current_pagetables>

    if (current_task == first_task) {
  10455f:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104564:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  10456a:	0f 85 0d 00 00 00    	jne    10457d <terminate_current+0x4d>
        first_task = current_task->next;
  104570:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104575:	8b 40 08             	mov    0x8(%eax),%eax
  104578:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    if (next != 0) {
  10457d:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104584:	0f 84 09 00 00 00    	je     104593 <terminate_current+0x63>
        next->prev = prev;
  10458a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10458d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104590:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  104593:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10459a:	0f 84 09 00 00 00    	je     1045a9 <terminate_current+0x79>
        prev->next = next;
  1045a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1045a6:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if (next == 0)
  1045a9:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1045b0:	0f 85 08 00 00 00    	jne    1045be <terminate_current+0x8e>
        next = first_task;
  1045b6:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1045bb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  1045be:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045c1:	a3 38 a4 10 00       	mov    %eax,0x10a438

    free(old->cpuState);
  1045c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045c9:	8b 40 04             	mov    0x4(%eax),%eax
  1045cc:	89 04 24             	mov    %eax,(%esp)
  1045cf:	e8 7c 0c 00 00       	call   105250 <free>
    free(old);
  1045d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045d7:	89 04 24             	mov    %eax,(%esp)
  1045da:	e8 71 0c 00 00       	call   105250 <free>

    if(current_task == 0) {
  1045df:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  1045e6:	00 00 00 
  1045e9:	0f 85 15 00 00 00    	jne    104604 <terminate_current+0xd4>
  1045ef:	8d 05 84 95 10 00    	lea    0x109584,%eax
        show_cod(cpu, "Last task terminated.");
  1045f5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1045f8:	89 0c 24             	mov    %ecx,(%esp)
  1045fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1045ff:	e8 bc ba ff ff       	call   1000c0 <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  104604:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104609:	8b 40 14             	mov    0x14(%eax),%eax
  10460c:	89 04 24             	mov    %eax,(%esp)
  10460f:	e8 9c 33 00 00       	call   1079b0 <vmm_activate_pagedir>
    return current_task->cpuState;
  104614:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104619:	8b 40 04             	mov    0x4(%eax),%eax
  10461c:	83 c4 18             	add    $0x18,%esp
  10461f:	5d                   	pop    %ebp
  104620:	c3                   	ret    
  104621:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104628:	0f 1f 84 00 00 00 00 
  10462f:	00 

00104630 <init_task>:
}

struct task* init_task(uint32_t task_pagedir, void* entry) {
  104630:	55                   	push   %ebp
  104631:	89 e5                	mov    %esp,%ebp
  104633:	56                   	push   %esi
  104634:	83 ec 74             	sub    $0x74,%esp
  104637:	8b 45 0c             	mov    0xc(%ebp),%eax
  10463a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10463d:	ba 01 00 00 00       	mov    $0x1,%edx
  104642:	be 40 00 00 00       	mov    $0x40,%esi
  104647:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10464a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* ntask = calloc(1, sizeof(struct task));
  10464d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104654:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
  10465b:	00 
  10465c:	89 55 ac             	mov    %edx,-0x54(%ebp)
  10465f:	89 75 a8             	mov    %esi,-0x58(%ebp)
  104662:	e8 a9 0a 00 00       	call   105110 <calloc>
  104667:	b9 01 00 00 00       	mov    $0x1,%ecx
  10466c:	ba 38 00 00 00       	mov    $0x38,%edx
  104671:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ntask->cpuState = calloc(1, sizeof(struct cpu_state));
  104674:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10467b:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  104682:	00 
  104683:	89 55 a4             	mov    %edx,-0x5c(%ebp)
  104686:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  104689:	e8 82 0a 00 00       	call   105110 <calloc>
  10468e:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  104693:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104696:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  104699:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10469c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10469f:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  1046a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046a5:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  1046a8:	a1 e0 82 10 00       	mov    0x1082e0,%eax
  1046ad:	89 c1                	mov    %eax,%ecx
  1046af:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1046b5:	89 0d e0 82 10 00    	mov    %ecx,0x1082e0
  1046bb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1046be:	89 01                	mov    %eax,(%ecx)

    ntask->stdin  = 0;
  1046c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046c3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    ntask->stdout = 0;
  1046ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046cd:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    ntask->stderr = 0;
  1046d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046d7:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)

    ntask->next = (void*) 0;
  1046de:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046e1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  1046e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  1046f2:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  1046f9:	00 00 00 
  1046fc:	0f 85 0d 00 00 00    	jne    10470f <init_task+0xdf>
        first_task = ntask;
  104702:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104705:	a3 34 a4 10 00       	mov    %eax,0x10a434
    } else {
  10470a:	e9 1f 00 00 00       	jmp    10472e <init_task+0xfe>
        ntask->next = first_task;
  10470f:	a1 34 a4 10 00       	mov    0x10a434,%eax
  104714:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104717:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  10471a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10471d:	8b 0d 34 a4 10 00    	mov    0x10a434,%ecx
  104723:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  104726:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104729:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  10472e:	e8 ad 26 00 00       	call   106de0 <vmm_get_current_pagedir>
  104733:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vmm_activate_pagedir(task_pagedir);
  104736:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104739:	89 04 24             	mov    %eax,(%esp)
  10473c:	e8 6f 32 00 00       	call   1079b0 <vmm_activate_pagedir>
  104741:	b8 00 00 00 00       	mov    $0x0,%eax

    vmm_alloc_addr(ntask->user_stack_bottom, 0);
  104746:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104749:	8b 49 10             	mov    0x10(%ecx),%ecx
  10474c:	89 0c 24             	mov    %ecx,(%esp)
  10474f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104756:	00 
  104757:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10475a:	e8 51 31 00 00       	call   1078b0 <vmm_alloc_addr>
  10475f:	b9 38 00 00 00       	mov    $0x38,%ecx
  104764:	8d 55 b0             	lea    -0x50(%ebp),%edx

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  104767:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10476e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  104775:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10477c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  104783:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10478a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  104791:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  104798:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  10479f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  1047a6:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1047a9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  1047ac:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  1047b3:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
  1047ba:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1047bd:	8b 76 10             	mov    0x10(%esi),%esi
  1047c0:	81 c6 00 10 00 00    	add    $0x1000,%esi
  1047c6:	89 75 e0             	mov    %esi,-0x20(%ebp)
  1047c9:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  1047d0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1047d3:	8b 76 04             	mov    0x4(%esi),%esi
  1047d6:	89 34 24             	mov    %esi,(%esp)
  1047d9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1047dd:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1047e4:	00 
  1047e5:	89 45 98             	mov    %eax,-0x68(%ebp)
  1047e8:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  1047eb:	e8 60 0d 00 00       	call   105550 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  1047f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047f3:	89 04 24             	mov    %eax,(%esp)
  1047f6:	e8 b5 31 00 00       	call   1079b0 <vmm_activate_pagedir>

    return ntask;
  1047fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1047fe:	83 c4 74             	add    $0x74,%esp
  104801:	5e                   	pop    %esi
  104802:	5d                   	pop    %ebp
  104803:	c3                   	ret    
  104804:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10480b:	00 00 00 00 00 

00104810 <save_cpu_state>:
}

struct cpu_state* save_cpu_state(struct cpu_state* cpu) {
  104810:	55                   	push   %ebp
  104811:	89 e5                	mov    %esp,%ebp
  104813:	83 ec 28             	sub    $0x28,%esp
  104816:	8b 45 08             	mov    0x8(%ebp),%eax
  104819:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(current_task->rpc && current_task->rpc->executing) {
  10481c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104821:	81 78 18 00 00 00 00 	cmpl   $0x0,0x18(%eax)
  104828:	0f 84 55 00 00 00    	je     104883 <save_cpu_state+0x73>
  10482e:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104833:	8b 40 18             	mov    0x18(%eax),%eax
  104836:	0f b6 40 14          	movzbl 0x14(%eax),%eax
  10483a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10483f:	0f 84 3e 00 00 00    	je     104883 <save_cpu_state+0x73>
  104845:	b8 38 00 00 00       	mov    $0x38,%eax
        memcpy(current_task->rpc->state, cpu, sizeof(struct cpu_state));
  10484a:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  104850:	8b 49 18             	mov    0x18(%ecx),%ecx
  104853:	8b 49 18             	mov    0x18(%ecx),%ecx
  104856:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104859:	89 0c 24             	mov    %ecx,(%esp)
  10485c:	89 54 24 04          	mov    %edx,0x4(%esp)
  104860:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  104867:	00 
  104868:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10486b:	e8 e0 0c 00 00       	call   105550 <memcpy>
        return current_task->rpc->state;
  104870:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104875:	8b 40 18             	mov    0x18(%eax),%eax
  104878:	8b 40 18             	mov    0x18(%eax),%eax
  10487b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10487e:	e9 33 00 00 00       	jmp    1048b6 <save_cpu_state+0xa6>
  104883:	b8 38 00 00 00       	mov    $0x38,%eax
    }
    else
    {
        memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  104888:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  10488e:	8b 49 04             	mov    0x4(%ecx),%ecx
  104891:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104894:	89 0c 24             	mov    %ecx,(%esp)
  104897:	89 54 24 04          	mov    %edx,0x4(%esp)
  10489b:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1048a2:	00 
  1048a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1048a6:	e8 a5 0c 00 00       	call   105550 <memcpy>
        return current_task->cpuState;
  1048ab:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1048b0:	8b 40 04             	mov    0x4(%eax),%eax
  1048b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  1048b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1048b9:	83 c4 28             	add    $0x28,%esp
  1048bc:	5d                   	pop    %ebp
  1048bd:	c3                   	ret    
  1048be:	66 90                	xchg   %ax,%ax

001048c0 <schedule_to_task>:

struct cpu_state* schedule_to_task(struct task* dest) {
  1048c0:	55                   	push   %ebp
  1048c1:	89 e5                	mov    %esp,%ebp
  1048c3:	83 ec 18             	sub    $0x18,%esp
  1048c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1048c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    current_task = dest;
  1048cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1048cf:	a3 38 a4 10 00       	mov    %eax,0x10a438

    vmm_activate_pagedir(dest->phys_pdir);
  1048d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1048d7:	8b 40 14             	mov    0x14(%eax),%eax
  1048da:	89 04 24             	mov    %eax,(%esp)
  1048dd:	e8 ce 30 00 00       	call   1079b0 <vmm_activate_pagedir>

    if(!dest->rpc) {
  1048e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1048e5:	81 78 18 00 00 00 00 	cmpl   $0x0,0x18(%eax)
  1048ec:	0f 85 0e 00 00 00    	jne    104900 <schedule_to_task+0x40>
        return dest->cpuState;
  1048f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1048f5:	8b 40 04             	mov    0x4(%eax),%eax
  1048f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1048fb:	e9 59 00 00 00       	jmp    104959 <schedule_to_task+0x99>
    }
    else
    {
        if(!dest->rpc->executing) {
  104900:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104903:	8b 40 18             	mov    0x18(%eax),%eax
  104906:	80 78 14 00          	cmpb   $0x0,0x14(%eax)
  10490a:	0f 85 1c 00 00 00    	jne    10492c <schedule_to_task+0x6c>
  104910:	8d 05 9a 95 10 00    	lea    0x10959a,%eax
            kprintf("RPC_INIT\n");
  104916:	89 04 24             	mov    %eax,(%esp)
  104919:	e8 92 b9 ff ff       	call   1002b0 <kprintf>
            init_rpc_call(dest);
  10491e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104921:	89 0c 24             	mov    %ecx,(%esp)
  104924:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104927:	e8 04 01 00 00       	call   104a30 <init_rpc_call>
  10492c:	8d 05 a4 95 10 00    	lea    0x1095a4,%eax
        }
        kprintf("RPC_SCHED at %x\n", dest->rpc->state->eip);
  104932:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104935:	8b 49 18             	mov    0x18(%ecx),%ecx
  104938:	8b 49 18             	mov    0x18(%ecx),%ecx
  10493b:	8b 49 24             	mov    0x24(%ecx),%ecx
  10493e:	89 04 24             	mov    %eax,(%esp)
  104941:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104945:	e8 66 b9 ff ff       	call   1002b0 <kprintf>
        return dest->rpc->state;
  10494a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10494d:	8b 49 18             	mov    0x18(%ecx),%ecx
  104950:	8b 49 18             	mov    0x18(%ecx),%ecx
  104953:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  104956:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
}
  104959:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10495c:	83 c4 18             	add    $0x18,%esp
  10495f:	5d                   	pop    %ebp
  104960:	c3                   	ret    
  104961:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104968:	0f 1f 84 00 00 00 00 
  10496f:	00 

00104970 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  104970:	55                   	push   %ebp
  104971:	89 e5                	mov    %esp,%ebp
  104973:	83 ec 18             	sub    $0x18,%esp
  104976:	8b 45 08             	mov    0x8(%ebp),%eax
  104979:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  10497c:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  104983:	00 00 00 
  104986:	0f 84 8b 00 00 00    	je     104a17 <schedule+0xa7>
  10498c:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  104993:	00 00 00 
  104996:	0f 84 7b 00 00 00    	je     104a17 <schedule+0xa7>
        if (current_task == 0) {
  10499c:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  1049a3:	00 00 00 
  1049a6:	0f 85 2a 00 00 00    	jne    1049d6 <schedule+0x66>
            current_task = first_task;
  1049ac:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1049b1:	a3 38 a4 10 00       	mov    %eax,0x10a438
            vmm_activate_pagedir(current_task->phys_pdir);
  1049b6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1049bb:	8b 40 14             	mov    0x14(%eax),%eax
  1049be:	89 04 24             	mov    %eax,(%esp)
  1049c1:	e8 ea 2f 00 00       	call   1079b0 <vmm_activate_pagedir>
            return current_task->cpuState;
  1049c6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1049cb:	8b 40 04             	mov    0x4(%eax),%eax
  1049ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1049d1:	e9 47 00 00 00       	jmp    104a1d <schedule+0xad>
        }

        struct task* next = current_task->next;
  1049d6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1049db:	8b 40 08             	mov    0x8(%eax),%eax
  1049de:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  1049e1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1049e8:	0f 85 08 00 00 00    	jne    1049f6 <schedule+0x86>
            next = first_task;
  1049ee:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1049f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  1049f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1049f9:	89 04 24             	mov    %eax,(%esp)
  1049fc:	e8 0f fe ff ff       	call   104810 <save_cpu_state>

        return schedule_to_task(next);
  104a01:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104a04:	89 0c 24             	mov    %ecx,(%esp)
  104a07:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104a0a:	e8 b1 fe ff ff       	call   1048c0 <schedule_to_task>
  104a0f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104a12:	e9 06 00 00 00       	jmp    104a1d <schedule+0xad>
    }
    return cpu;
  104a17:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a1a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104a1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104a20:	83 c4 18             	add    $0x18,%esp
  104a23:	5d                   	pop    %ebp
  104a24:	c3                   	ret    
  104a25:	66 90                	xchg   %ax,%ax
  104a27:	66 90                	xchg   %ax,%ax
  104a29:	66 90                	xchg   %ax,%ax
  104a2b:	66 90                	xchg   %ax,%ax
  104a2d:	66 90                	xchg   %ax,%ax
  104a2f:	90                   	nop

00104a30 <init_rpc_call>:
#include "console.h"
#include "pmm.h"
#include "vmm.h"
#include "catofdeath.h"

void init_rpc_call(struct task* task) {
  104a30:	55                   	push   %ebp
  104a31:	89 e5                	mov    %esp,%ebp
  104a33:	56                   	push   %esi
  104a34:	83 ec 34             	sub    $0x34,%esp
  104a37:	8b 45 08             	mov    0x8(%ebp),%eax
  104a3a:	b9 01 00 00 00       	mov    $0x1,%ecx
  104a3f:	ba 38 00 00 00       	mov    $0x38,%edx
  104a44:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct rpc* rpc = task->rpc;
  104a47:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a4a:	8b 40 18             	mov    0x18(%eax),%eax
  104a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    rpc->state = calloc(1, sizeof(struct cpu_state));
  104a50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104a57:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  104a5e:	00 
  104a5f:	89 55 ec             	mov    %edx,-0x14(%ebp)
  104a62:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104a65:	e8 a6 06 00 00       	call   105110 <calloc>
  104a6a:	8d 0d b5 95 10 00    	lea    0x1095b5,%ecx
  104a70:	ba 38 00 00 00       	mov    $0x38,%edx
  104a75:	8b 75 f4             	mov    -0xc(%ebp),%esi
  104a78:	89 46 18             	mov    %eax,0x18(%esi)
    memcpy(rpc->state, task->cpuState, sizeof(struct cpu_state));
  104a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104a7e:	8b 40 18             	mov    0x18(%eax),%eax
  104a81:	8b 75 f8             	mov    -0x8(%ebp),%esi
  104a84:	8b 76 04             	mov    0x4(%esi),%esi
  104a87:	89 04 24             	mov    %eax,(%esp)
  104a8a:	89 74 24 04          	mov    %esi,0x4(%esp)
  104a8e:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  104a95:	00 
  104a96:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  104a99:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  104a9c:	e8 af 0a 00 00       	call   105550 <memcpy>

    kprintf("RPC_INIT to %x", task->rpc_handler_addr);
  104aa1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104aa4:	8b 40 1c             	mov    0x1c(%eax),%eax
  104aa7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  104aaa:	89 0c 24             	mov    %ecx,(%esp)
  104aad:	89 44 24 04          	mov    %eax,0x4(%esp)
  104ab1:	e8 fa b7 ff ff       	call   1002b0 <kprintf>

    rpc->state->eip = task->rpc_handler_addr;
  104ab6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104ab9:	8b 49 1c             	mov    0x1c(%ecx),%ecx
  104abc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104abf:	8b 52 18             	mov    0x18(%edx),%edx
  104ac2:	89 4a 24             	mov    %ecx,0x24(%edx)
    rpc->state->esp -= 4 * sizeof(uint32_t);
  104ac5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ac8:	8b 49 18             	mov    0x18(%ecx),%ecx
  104acb:	8b 51 30             	mov    0x30(%ecx),%edx
  104ace:	81 ea 10 00 00 00    	sub    $0x10,%edx
  104ad4:	89 51 30             	mov    %edx,0x30(%ecx)
    rpc->state->ebp = rpc->state->esp;
  104ad7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ada:	8b 49 18             	mov    0x18(%ecx),%ecx
  104add:	8b 49 30             	mov    0x30(%ecx),%ecx
  104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104ae3:	8b 52 18             	mov    0x18(%edx),%edx
  104ae6:	89 4a 18             	mov    %ecx,0x18(%edx)

    uint32_t* rpch_args = (void*) rpc->state->esp;
  104ae9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104aec:	8b 49 18             	mov    0x18(%ecx),%ecx
  104aef:	8b 49 30             	mov    0x30(%ecx),%ecx
  104af2:	89 4d f0             	mov    %ecx,-0x10(%ebp)

    rpch_args[0] = rpc->type;
  104af5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104af8:	8b 49 04             	mov    0x4(%ecx),%ecx
  104afb:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104afe:	89 0a                	mov    %ecx,(%edx)
    rpch_args[1] = rpc->funcID;
  104b00:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104b03:	8b 49 08             	mov    0x8(%ecx),%ecx
  104b06:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104b09:	89 4a 04             	mov    %ecx,0x4(%edx)
    rpch_args[2] = rpc->dataSize;
  104b0c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104b0f:	8b 49 10             	mov    0x10(%ecx),%ecx
  104b12:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104b15:	89 4a 08             	mov    %ecx,0x8(%edx)

    rpc->executing = 1;
  104b18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104b1b:	c6 41 14 01          	movb   $0x1,0x14(%ecx)
}
  104b1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104b22:	83 c4 34             	add    $0x34,%esp
  104b25:	5e                   	pop    %esi
  104b26:	5d                   	pop    %ebp
  104b27:	c3                   	ret    
  104b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  104b2f:	00 

00104b30 <create_rpc_call>:

uint32_t create_rpc_call(int dPID, uint32_t type, uint32_t funcID, uint32_t dsize, void* data) {
  104b30:	55                   	push   %ebp
  104b31:	89 e5                	mov    %esp,%ebp
  104b33:	53                   	push   %ebx
  104b34:	57                   	push   %edi
  104b35:	56                   	push   %esi
  104b36:	83 ec 5c             	sub    $0x5c,%esp
  104b39:	8b 45 18             	mov    0x18(%ebp),%eax
  104b3c:	8b 4d 14             	mov    0x14(%ebp),%ecx
  104b3f:	8b 55 10             	mov    0x10(%ebp),%edx
  104b42:	8b 75 0c             	mov    0xc(%ebp),%esi
  104b45:	8b 7d 08             	mov    0x8(%ebp),%edi
  104b48:	bb 01 00 00 00       	mov    $0x1,%ebx
  104b4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  104b50:	b8 20 00 00 00       	mov    $0x20,%eax
  104b55:	89 7d ec             	mov    %edi,-0x14(%ebp)
  104b58:	89 75 e8             	mov    %esi,-0x18(%ebp)
  104b5b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  104b5e:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  104b61:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  104b64:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    struct rpc* nrpc = calloc(1, sizeof(struct rpc));
  104b67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104b6e:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  104b75:	00 
  104b76:	89 45 c8             	mov    %eax,-0x38(%ebp)
  104b79:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
  104b7c:	e8 8f 05 00 00       	call   105110 <calloc>
  104b81:	89 45 d8             	mov    %eax,-0x28(%ebp)
    struct task* destTask = get_task_by_pid(dPID);
  104b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b87:	89 04 24             	mov    %eax,(%esp)
  104b8a:	e8 b1 f6 ff ff       	call   104240 <get_task_by_pid>
  104b8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    if(destTask == 0) {
  104b92:	81 7d d4 00 00 00 00 	cmpl   $0x0,-0x2c(%ebp)
  104b99:	0f 85 45 00 00 00    	jne    104be4 <create_rpc_call+0xb4>
  104b9f:	b8 0a 00 00 00       	mov    $0xa,%eax
        setclr(0x0A);
  104ba4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  104bab:	89 45 c0             	mov    %eax,-0x40(%ebp)
  104bae:	e8 dd b6 ff ff       	call   100290 <setclr>
  104bb3:	8d 05 c4 95 10 00    	lea    0x1095c4,%eax
        kprintf("Tried to execute RPC in non-existing task.\n");
  104bb9:	89 04 24             	mov    %eax,(%esp)
  104bbc:	e8 ef b6 ff ff       	call   1002b0 <kprintf>
  104bc1:	b9 07 00 00 00       	mov    $0x7,%ecx
        setclr(0x07);
  104bc6:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  104bcd:	89 45 bc             	mov    %eax,-0x44(%ebp)
  104bd0:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  104bd3:	e8 b8 b6 ff ff       	call   100290 <setclr>
        return RPCE_NODEST;
  104bd8:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
  104bdf:	e9 5c 01 00 00       	jmp    104d40 <create_rpc_call+0x210>
    }

    if(destTask->rpc_handler_addr == 0) {
  104be4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104be7:	81 78 1c 00 00 00 00 	cmpl   $0x0,0x1c(%eax)
  104bee:	0f 85 45 00 00 00    	jne    104c39 <create_rpc_call+0x109>
  104bf4:	b8 0a 00 00 00       	mov    $0xa,%eax
        setclr(0x0A);
  104bf9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  104c00:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  104c03:	e8 88 b6 ff ff       	call   100290 <setclr>
  104c08:	8d 05 f0 95 10 00    	lea    0x1095f0,%eax
        kprintf("Tried to execute RPC in non RPC enabled task.\n");
  104c0e:	89 04 24             	mov    %eax,(%esp)
  104c11:	e8 9a b6 ff ff       	call   1002b0 <kprintf>
  104c16:	b9 07 00 00 00       	mov    $0x7,%ecx
        setclr(0x07);
  104c1b:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  104c22:	89 45 b0             	mov    %eax,-0x50(%ebp)
  104c25:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  104c28:	e8 63 b6 ff ff       	call   100290 <setclr>
        return RPCE_NOFUNC;
  104c2d:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
  104c34:	e9 07 01 00 00       	jmp    104d40 <create_rpc_call+0x210>
    }

    nrpc->type = type;
  104c39:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104c3c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104c3f:	89 41 04             	mov    %eax,0x4(%ecx)
    nrpc->funcID = funcID;
  104c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104c45:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104c48:	89 41 08             	mov    %eax,0x8(%ecx)
    nrpc->returnPID = get_current_task() ? get_current_task()->PID : 0;
  104c4b:	e8 e0 f5 ff ff       	call   104230 <get_current_task>
  104c50:	3d 00 00 00 00       	cmp    $0x0,%eax
  104c55:	0f 84 0f 00 00 00    	je     104c6a <create_rpc_call+0x13a>
  104c5b:	e8 d0 f5 ff ff       	call   104230 <get_current_task>
  104c60:	8b 00                	mov    (%eax),%eax
  104c62:	89 45 a8             	mov    %eax,-0x58(%ebp)
  104c65:	e9 0d 00 00 00       	jmp    104c77 <create_rpc_call+0x147>
  104c6a:	b8 00 00 00 00       	mov    $0x0,%eax
  104c6f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  104c72:	e9 00 00 00 00       	jmp    104c77 <create_rpc_call+0x147>
  104c77:	8b 45 a8             	mov    -0x58(%ebp),%eax
  104c7a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104c7d:	89 01                	mov    %eax,(%ecx)

    nrpc->data = malloc(dsize);
  104c7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104c82:	89 04 24             	mov    %eax,(%esp)
  104c85:	e8 f6 01 00 00       	call   104e80 <malloc>
  104c8a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104c8d:	89 41 0c             	mov    %eax,0xc(%ecx)
    memcpy(nrpc->data, data, dsize);
  104c90:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104c93:	8b 40 0c             	mov    0xc(%eax),%eax
  104c96:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104c99:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104c9c:	89 04 24             	mov    %eax,(%esp)
  104c9f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104ca3:	89 54 24 08          	mov    %edx,0x8(%esp)
  104ca7:	e8 a4 08 00 00       	call   105550 <memcpy>
    nrpc->dataSize = dsize;
  104cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104caf:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104cb2:	89 41 10             	mov    %eax,0x10(%ecx)

    if(destTask->rpc == 0) {
  104cb5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104cb8:	81 78 18 00 00 00 00 	cmpl   $0x0,0x18(%eax)
  104cbf:	0f 85 15 00 00 00    	jne    104cda <create_rpc_call+0x1aa>
        destTask->rpc = nrpc;
  104cc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104cc8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  104ccb:	89 41 18             	mov    %eax,0x18(%ecx)
        return RPCE_OK;
  104cce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104cd5:	e9 66 00 00 00       	jmp    104d40 <create_rpc_call+0x210>
    }
    else
    {
        struct rpc* ptr = destTask->rpc;
  104cda:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104cdd:	8b 40 18             	mov    0x18(%eax),%eax
  104ce0:	89 45 d0             	mov    %eax,-0x30(%ebp)

        while(ptr != 0) {
  104ce3:	81 7d d0 00 00 00 00 	cmpl   $0x0,-0x30(%ebp)
  104cea:	0f 84 44 00 00 00    	je     104d34 <create_rpc_call+0x204>
            if(ptr->next == 0) {
  104cf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104cf3:	81 78 1c 00 00 00 00 	cmpl   $0x0,0x1c(%eax)
  104cfa:	0f 85 26 00 00 00    	jne    104d26 <create_rpc_call+0x1f6>
  104d00:	8d 05 1f 96 10 00    	lea    0x10961f,%eax
                kprintf("Chained RPC occured\n");
  104d06:	89 04 24             	mov    %eax,(%esp)
  104d09:	e8 a2 b5 ff ff       	call   1002b0 <kprintf>

                ptr->next = nrpc;
  104d0e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104d11:	8b 55 d0             	mov    -0x30(%ebp),%edx
  104d14:	89 4a 1c             	mov    %ecx,0x1c(%edx)
                return RPCE_OK;
  104d17:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104d1e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  104d21:	e9 1a 00 00 00       	jmp    104d40 <create_rpc_call+0x210>
            }
            ptr = ptr->next;
  104d26:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104d29:	8b 40 1c             	mov    0x1c(%eax),%eax
  104d2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
        }
  104d2f:	e9 af ff ff ff       	jmp    104ce3 <create_rpc_call+0x1b3>
  104d34:	e9 00 00 00 00       	jmp    104d39 <create_rpc_call+0x209>
    }

    return RPCE_UNKNOWN;
  104d39:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
}
  104d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d43:	83 c4 5c             	add    $0x5c,%esp
  104d46:	5e                   	pop    %esi
  104d47:	5f                   	pop    %edi
  104d48:	5b                   	pop    %ebx
  104d49:	5d                   	pop    %ebp
  104d4a:	c3                   	ret    
  104d4b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104d50 <return_rpc_call>:

struct cpu_state* return_rpc_call(struct cpu_state* cpu) {
  104d50:	55                   	push   %ebp
  104d51:	89 e5                	mov    %esp,%ebp
  104d53:	83 ec 38             	sub    $0x38,%esp
  104d56:	8b 45 08             	mov    0x8(%ebp),%eax
  104d59:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* task = get_current_task();
  104d5c:	e8 cf f4 ff ff       	call   104230 <get_current_task>
  104d61:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!task->rpc) {
  104d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d67:	81 78 18 00 00 00 00 	cmpl   $0x0,0x18(%eax)
  104d6e:	0f 85 7b 00 00 00    	jne    104def <return_rpc_call+0x9f>
  104d74:	b8 04 00 00 00       	mov    $0x4,%eax
        setclr(0x04);
  104d79:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  104d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104d83:	e8 08 b5 ff ff       	call   100290 <setclr>
  104d88:	8d 05 34 96 10 00    	lea    0x109634,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s). RPC_RET_WITHOUT_CALL \n", task->PID, task->filePath);
  104d8e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104d91:	8b 09                	mov    (%ecx),%ecx
  104d93:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104d96:	8b 52 24             	mov    0x24(%edx),%edx
  104d99:	89 04 24             	mov    %eax,(%esp)
  104d9c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104da0:	89 54 24 08          	mov    %edx,0x8(%esp)
  104da4:	e8 07 b5 ff ff       	call   1002b0 <kprintf>
  104da9:	8d 0d 54 92 10 00    	lea    0x109254,%ecx
        kprintf("\n");
  104daf:	89 0c 24             	mov    %ecx,(%esp)
  104db2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104db5:	e8 f6 b4 ff ff       	call   1002b0 <kprintf>
        show_dump(cpu);
  104dba:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104dbd:	89 0c 24             	mov    %ecx,(%esp)
  104dc0:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104dc3:	e8 78 b3 ff ff       	call   100140 <show_dump>
  104dc8:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  104dcd:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  104dd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104dd7:	e8 b4 b4 ff ff       	call   100290 <setclr>

        return terminate_current(cpu);
  104ddc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ddf:	89 04 24             	mov    %eax,(%esp)
  104de2:	e8 49 f7 ff ff       	call   104530 <terminate_current>
  104de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104dea:	e9 87 00 00 00       	jmp    104e76 <return_rpc_call+0x126>
    }

    struct rpc* rpc = task->rpc;
  104def:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104df2:	8b 40 18             	mov    0x18(%eax),%eax
  104df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->rpc = task->rpc->next;
  104df8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104dfb:	8b 40 18             	mov    0x18(%eax),%eax
  104dfe:	8b 40 1c             	mov    0x1c(%eax),%eax
  104e01:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104e04:	89 41 18             	mov    %eax,0x18(%ecx)

    if(task->rpc->returnPID) {
  104e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e0a:	8b 40 18             	mov    0x18(%eax),%eax
  104e0d:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  104e13:	0f 84 4f 00 00 00    	je     104e68 <return_rpc_call+0x118>
        struct task* rTask = get_task_by_pid(rpc->returnPID);
  104e19:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e1c:	8b 00                	mov    (%eax),%eax
  104e1e:	89 04 24             	mov    %eax,(%esp)
  104e21:	e8 1a f4 ff ff       	call   104240 <get_task_by_pid>
  104e26:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if(rTask == 0) {
  104e29:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104e30:	0f 85 13 00 00 00    	jne    104e49 <return_rpc_call+0xf9>
            return schedule_to_task(task);
  104e36:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e39:	89 04 24             	mov    %eax,(%esp)
  104e3c:	e8 7f fa ff ff       	call   1048c0 <schedule_to_task>
  104e41:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104e44:	e9 2d 00 00 00       	jmp    104e76 <return_rpc_call+0x126>
        }

        rTask->cpuState->eax = RPCE_OK;
  104e49:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e4c:	8b 40 04             	mov    0x4(%eax),%eax
  104e4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

        return schedule_to_task(rTask);
  104e55:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e58:	89 04 24             	mov    %eax,(%esp)
  104e5b:	e8 60 fa ff ff       	call   1048c0 <schedule_to_task>
  104e60:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104e63:	e9 0e 00 00 00       	jmp    104e76 <return_rpc_call+0x126>
    }
    else
    {
        return schedule_to_task(task);
  104e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e6b:	89 04 24             	mov    %eax,(%esp)
  104e6e:	e8 4d fa ff ff       	call   1048c0 <schedule_to_task>
  104e73:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  104e76:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e79:	83 c4 38             	add    $0x38,%esp
  104e7c:	5d                   	pop    %ebp
  104e7d:	c3                   	ret    
  104e7e:	66 90                	xchg   %ax,%ax

00104e80 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  104e80:	55                   	push   %ebp
  104e81:	89 e5                	mov    %esp,%ebp
  104e83:	83 ec 38             	sub    $0x38,%esp
  104e86:	8b 45 08             	mov    0x8(%ebp),%eax
  104e89:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  104e8c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104e93:	0f 85 0c 00 00 00    	jne    104ea5 <malloc+0x25>
  104e99:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104ea0:	e9 95 01 00 00       	jmp    10503a <malloc+0x1ba>

    struct memory_node* last = 0;
  104ea5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  104eac:	a1 44 a4 10 00       	mov    0x10a444,%eax
  104eb1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104eb4:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104ebb:	0f 84 27 00 00 00    	je     104ee8 <malloc+0x68>
        if (cur->size >= size) {
  104ec1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ec4:	8b 00                	mov    (%eax),%eax
  104ec6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104ec9:	0f 82 05 00 00 00    	jb     104ed4 <malloc+0x54>
            break;
  104ecf:	e9 14 00 00 00       	jmp    104ee8 <malloc+0x68>
        }
        last = cur;
  104ed4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  104eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104edd:	8b 40 08             	mov    0x8(%eax),%eax
  104ee0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104ee3:	e9 cc ff ff ff       	jmp    104eb4 <malloc+0x34>

    if (cur == 0) {
  104ee8:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104eef:	0f 85 bc 00 00 00    	jne    104fb1 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  104ef5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ef8:	c1 e8 0c             	shr    $0xc,%eax
  104efb:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  104efe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f01:	25 ff 0f 00 00       	and    $0xfff,%eax
  104f06:	3d 00 00 00 00       	cmp    $0x0,%eax
  104f0b:	0f 84 0b 00 00 00    	je     104f1c <malloc+0x9c>
            pgs++;
  104f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f14:	05 01 00 00 00       	add    $0x1,%eax
  104f19:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  104f1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f1f:	89 04 24             	mov    %eax,(%esp)
  104f22:	e8 39 29 00 00       	call   107860 <vmm_alloc_cont>
  104f27:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  104f2a:	e8 81 04 00 00       	call   1053b0 <pop_unused_node>
  104f2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  104f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104f35:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104f38:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  104f3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f3e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104f41:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  104f43:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f46:	c1 e0 0c             	shl    $0xc,%eax
  104f49:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104f4c:	0f 86 3c 00 00 00    	jbe    104f8e <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  104f52:	e8 59 04 00 00       	call   1053b0 <pop_unused_node>
  104f57:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  104f5d:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  104f60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104f63:	8b 40 04             	mov    0x4(%eax),%eax
  104f66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  104f69:	03 02                	add    (%edx),%eax
  104f6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104f6e:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  104f71:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f74:	c1 e0 0c             	shl    $0xc,%eax
  104f77:	2b 45 f8             	sub    -0x8(%ebp),%eax
  104f7a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104f7d:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  104f7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104f82:	89 0c 24             	mov    %ecx,(%esp)
  104f85:	89 44 24 04          	mov    %eax,0x4(%esp)
  104f89:	e8 c2 00 00 00       	call   105050 <append_to_list>
  104f8e:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        }

        append_to_list(&first_used, fill);
  104f94:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104f97:	89 04 24             	mov    %eax,(%esp)
  104f9a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f9e:	e8 ad 00 00 00       	call   105050 <append_to_list>

        return (void*) fill->address;
  104fa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104fa6:	8b 40 04             	mov    0x4(%eax),%eax
  104fa9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104fac:	e9 89 00 00 00       	jmp    10503a <malloc+0x1ba>
  104fb1:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
    } else {
        uint32_t freesize = cur->size - size;
  104fb7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104fba:	8b 09                	mov    (%ecx),%ecx
  104fbc:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  104fbf:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  104fc2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104fc8:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  104fca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104fcd:	89 04 24             	mov    %eax,(%esp)
  104fd0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104fd4:	e8 a7 00 00 00       	call   105080 <remove_from_list>
  104fd9:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        append_to_list(&first_used, cur);
  104fdf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104fe2:	89 04 24             	mov    %eax,(%esp)
  104fe5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104fe9:	e8 62 00 00 00       	call   105050 <append_to_list>

        if (freesize > 0) {
  104fee:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  104ff5:	0f 86 36 00 00 00    	jbe    105031 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  104ffb:	e8 b0 03 00 00       	call   1053b0 <pop_unused_node>
  105000:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  105006:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  105009:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10500c:	8b 40 04             	mov    0x4(%eax),%eax
  10500f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105012:	03 02                	add    (%edx),%eax
  105014:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105017:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  10501a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10501d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105020:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  105022:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105025:	89 0c 24             	mov    %ecx,(%esp)
  105028:	89 44 24 04          	mov    %eax,0x4(%esp)
  10502c:	e8 1f 00 00 00       	call   105050 <append_to_list>
        }

        return (void*) cur->address;
  105031:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105034:	8b 40 04             	mov    0x4(%eax),%eax
  105037:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  10503a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10503d:	83 c4 38             	add    $0x38,%esp
  105040:	5d                   	pop    %ebp
  105041:	c3                   	ret    
  105042:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105049:	1f 84 00 00 00 00 00 

00105050 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  105050:	55                   	push   %ebp
  105051:	89 e5                	mov    %esp,%ebp
  105053:	83 ec 08             	sub    $0x8,%esp
  105056:	8b 45 0c             	mov    0xc(%ebp),%eax
  105059:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10505c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10505f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  105062:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105065:	8b 00                	mov    (%eax),%eax
  105067:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10506a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  10506d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105070:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105073:	89 01                	mov    %eax,(%ecx)
}
  105075:	83 c4 08             	add    $0x8,%esp
  105078:	5d                   	pop    %ebp
  105079:	c3                   	ret    
  10507a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105080 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  105080:	55                   	push   %ebp
  105081:	89 e5                	mov    %esp,%ebp
  105083:	83 ec 10             	sub    $0x10,%esp
  105086:	8b 45 0c             	mov    0xc(%ebp),%eax
  105089:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10508c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10508f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  105092:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  105099:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10509c:	8b 00                	mov    (%eax),%eax
  10509e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1050a1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1050a8:	0f 84 4e 00 00 00    	je     1050fc <remove_from_list+0x7c>
        if (cur == element) {
  1050ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050b1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1050b4:	0f 85 2e 00 00 00    	jne    1050e8 <remove_from_list+0x68>
            if (last == 0) {
  1050ba:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1050c1:	0f 85 10 00 00 00    	jne    1050d7 <remove_from_list+0x57>
                *root = cur->next;
  1050c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050ca:	8b 40 08             	mov    0x8(%eax),%eax
  1050cd:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1050d0:	89 01                	mov    %eax,(%ecx)
                return;
  1050d2:	e9 25 00 00 00       	jmp    1050fc <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  1050d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050da:	8b 40 08             	mov    0x8(%eax),%eax
  1050dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1050e0:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  1050e3:	e9 14 00 00 00       	jmp    1050fc <remove_from_list+0x7c>
            }
        }
        last = cur;
  1050e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  1050ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050f1:	8b 40 08             	mov    0x8(%eax),%eax
  1050f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  1050f7:	e9 a5 ff ff ff       	jmp    1050a1 <remove_from_list+0x21>
}
  1050fc:	83 c4 10             	add    $0x10,%esp
  1050ff:	5d                   	pop    %ebp
  105100:	c3                   	ret    
  105101:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105108:	0f 1f 84 00 00 00 00 
  10510f:	00 

00105110 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  105110:	55                   	push   %ebp
  105111:	89 e5                	mov    %esp,%ebp
  105113:	83 ec 28             	sub    $0x28,%esp
  105116:	8b 45 0c             	mov    0xc(%ebp),%eax
  105119:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10511c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10511f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  105122:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105125:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  105129:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  10512c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10512f:	89 04 24             	mov    %eax,(%esp)
  105132:	e8 49 fd ff ff       	call   104e80 <malloc>
  105137:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  10513a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105141:	0f 84 22 00 00 00    	je     105169 <calloc+0x59>
  105147:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  10514c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10514f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105152:	89 0c 24             	mov    %ecx,(%esp)
  105155:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10515c:	00 
  10515d:	89 54 24 08          	mov    %edx,0x8(%esp)
  105161:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105164:	e8 87 03 00 00       	call   1054f0 <memset>
    }

    return p;
  105169:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10516c:	83 c4 28             	add    $0x28,%esp
  10516f:	5d                   	pop    %ebp
  105170:	c3                   	ret    
  105171:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105178:	0f 1f 84 00 00 00 00 
  10517f:	00 

00105180 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  105180:	55                   	push   %ebp
  105181:	89 e5                	mov    %esp,%ebp
  105183:	83 ec 28             	sub    $0x28,%esp
  105186:	8b 45 0c             	mov    0xc(%ebp),%eax
  105189:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10518c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10518f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  105192:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  105199:	a1 40 a4 10 00       	mov    0x10a440,%eax
  10519e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  1051a1:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  1051a8:	0f 84 8e 00 00 00    	je     10523c <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  1051ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1051b1:	8b 40 04             	mov    0x4(%eax),%eax
  1051b4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1051b7:	39 c8                	cmp    %ecx,%eax
  1051b9:	0f 85 69 00 00 00    	jne    105228 <realloc+0xa8>
            if (size == 0) {
  1051bf:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1051c6:	0f 85 17 00 00 00    	jne    1051e3 <realloc+0x63>
                free(ptr);
  1051cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1051cf:	89 04 24             	mov    %eax,(%esp)
  1051d2:	e8 79 00 00 00       	call   105250 <free>
                return 0;
  1051d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1051de:	e9 60 00 00 00       	jmp    105243 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  1051e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1051e6:	89 04 24             	mov    %eax,(%esp)
  1051e9:	e8 92 fc ff ff       	call   104e80 <malloc>
  1051ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  1051f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051f4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1051f7:	8b 49 04             	mov    0x4(%ecx),%ecx
  1051fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1051fd:	8b 12                	mov    (%edx),%edx
  1051ff:	89 04 24             	mov    %eax,(%esp)
  105202:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105206:	89 54 24 08          	mov    %edx,0x8(%esp)
  10520a:	e8 41 03 00 00       	call   105550 <memcpy>
                free((void*) cur->address);
  10520f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105212:	8b 40 04             	mov    0x4(%eax),%eax
  105215:	89 04 24             	mov    %eax,(%esp)
  105218:	e8 33 00 00 00       	call   105250 <free>

                return new;
  10521d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105220:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105223:	e9 1b 00 00 00       	jmp    105243 <realloc+0xc3>
            }
        }
        last = cur;
  105228:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10522b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  10522e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105231:	8b 40 08             	mov    0x8(%eax),%eax
  105234:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  105237:	e9 65 ff ff ff       	jmp    1051a1 <realloc+0x21>
    return 0;
  10523c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105243:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105246:	83 c4 28             	add    $0x28,%esp
  105249:	5d                   	pop    %ebp
  10524a:	c3                   	ret    
  10524b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105250 <free>:

void free(void* ptr) {
  105250:	55                   	push   %ebp
  105251:	89 e5                	mov    %esp,%ebp
  105253:	83 ec 18             	sub    $0x18,%esp
  105256:	8b 45 08             	mov    0x8(%ebp),%eax
  105259:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  10525c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  105263:	a1 40 a4 10 00       	mov    0x10a440,%eax
  105268:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  10526b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105272:	0f 84 35 00 00 00    	je     1052ad <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10527b:	8b 40 04             	mov    0x4(%eax),%eax
  10527e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105281:	39 c8                	cmp    %ecx,%eax
  105283:	0f 85 10 00 00 00    	jne    105299 <free+0x49>
            merge_into_frees(cur);
  105289:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10528c:	89 04 24             	mov    %eax,(%esp)
  10528f:	e8 2c 00 00 00       	call   1052c0 <merge_into_frees>
            break;
  105294:	e9 14 00 00 00       	jmp    1052ad <free+0x5d>
        }
        last = cur;
  105299:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10529c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  10529f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1052a2:	8b 40 08             	mov    0x8(%eax),%eax
  1052a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  1052a8:	e9 be ff ff ff       	jmp    10526b <free+0x1b>
}
  1052ad:	83 c4 18             	add    $0x18,%esp
  1052b0:	5d                   	pop    %ebp
  1052b1:	c3                   	ret    
  1052b2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1052b9:	1f 84 00 00 00 00 00 

001052c0 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  1052c0:	55                   	push   %ebp
  1052c1:	89 e5                	mov    %esp,%ebp
  1052c3:	56                   	push   %esi
  1052c4:	83 ec 14             	sub    $0x14,%esp
  1052c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1052ca:	8d 0d 40 a4 10 00    	lea    0x10a440,%ecx
  1052d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  1052d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1052d6:	89 0c 24             	mov    %ecx,(%esp)
  1052d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1052dd:	e8 9e fd ff ff       	call   105080 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  1052e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  1052e9:	a1 44 a4 10 00       	mov    0x10a444,%eax
  1052ee:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1052f1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1052f8:	0f 84 92 00 00 00    	je     105390 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  1052fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105301:	8b 40 04             	mov    0x4(%eax),%eax
  105304:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105307:	03 01                	add    (%ecx),%eax
  105309:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10530c:	3b 41 04             	cmp    0x4(%ecx),%eax
  10530f:	0f 85 26 00 00 00    	jne    10533b <merge_into_frees+0x7b>
  105315:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->address = cur->address;
  10531b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10531e:	8b 49 04             	mov    0x4(%ecx),%ecx
  105321:	8b 55 f8             	mov    -0x8(%ebp),%edx
  105324:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  105327:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10532a:	89 04 24             	mov    %eax,(%esp)
  10532d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105331:	e8 4a fd ff ff       	call   105080 <remove_from_list>
            goto editedList;
  105336:	e9 a7 ff ff ff       	jmp    1052e2 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  10533b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10533e:	8b 40 04             	mov    0x4(%eax),%eax
  105341:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105344:	8b 49 04             	mov    0x4(%ecx),%ecx
  105347:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10534a:	03 0a                	add    (%edx),%ecx
  10534c:	39 c8                	cmp    %ecx,%eax
  10534e:	0f 85 28 00 00 00    	jne    10537c <merge_into_frees+0xbc>
  105354:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->size += cur->size;
  10535a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10535d:	8b 09                	mov    (%ecx),%ecx
  10535f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  105362:	8b 32                	mov    (%edx),%esi
  105364:	01 ce                	add    %ecx,%esi
  105366:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  105368:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10536b:	89 04 24             	mov    %eax,(%esp)
  10536e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105372:	e8 09 fd ff ff       	call   105080 <remove_from_list>
            goto editedList;
  105377:	e9 66 ff ff ff       	jmp    1052e2 <merge_into_frees+0x22>
        }

        last = cur;
  10537c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10537f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  105382:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105385:	8b 40 08             	mov    0x8(%eax),%eax
  105388:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  10538b:	e9 61 ff ff ff       	jmp    1052f1 <merge_into_frees+0x31>
  105390:	8d 05 44 a4 10 00    	lea    0x10a444,%eax

    append_to_list(&first_free, tf);
  105396:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105399:	89 04 24             	mov    %eax,(%esp)
  10539c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053a0:	e8 ab fc ff ff       	call   105050 <append_to_list>
}
  1053a5:	83 c4 14             	add    $0x14,%esp
  1053a8:	5e                   	pop    %esi
  1053a9:	5d                   	pop    %ebp
  1053aa:	c3                   	ret    
  1053ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001053b0 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  1053b0:	55                   	push   %ebp
  1053b1:	89 e5                	mov    %esp,%ebp
  1053b3:	83 ec 08             	sub    $0x8,%esp
  1053b6:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  1053bc:	89 04 24             	mov    %eax,(%esp)
  1053bf:	e8 3c 00 00 00       	call   105400 <pop_from_list>
  1053c4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  1053c7:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  1053ce:	0f 85 1b 00 00 00    	jne    1053ef <pop_unused_node+0x3f>
        allocate_unused_nodes();
  1053d4:	e8 77 00 00 00       	call   105450 <allocate_unused_nodes>
  1053d9:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        ret = pop_from_list(&first_unused);
  1053df:	89 04 24             	mov    %eax,(%esp)
  1053e2:	e8 19 00 00 00       	call   105400 <pop_from_list>
  1053e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  1053ea:	e9 d8 ff ff ff       	jmp    1053c7 <pop_unused_node+0x17>

    return ret;
  1053ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1053f2:	83 c4 08             	add    $0x8,%esp
  1053f5:	5d                   	pop    %ebp
  1053f6:	c3                   	ret    
  1053f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1053fe:	00 00 

00105400 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  105400:	55                   	push   %ebp
  105401:	89 e5                	mov    %esp,%ebp
  105403:	83 ec 18             	sub    $0x18,%esp
  105406:	8b 45 08             	mov    0x8(%ebp),%eax
  105409:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  10540c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10540f:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  105415:	0f 85 0c 00 00 00    	jne    105427 <pop_from_list+0x27>
        return 0;
  10541b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105422:	e9 20 00 00 00       	jmp    105447 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  105427:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10542a:	8b 00                	mov    (%eax),%eax
  10542c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  10542f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105432:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105435:	89 04 24             	mov    %eax,(%esp)
  105438:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10543c:	e8 3f fc ff ff       	call   105080 <remove_from_list>
    return pop;
  105441:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105444:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  105447:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10544a:	83 c4 18             	add    $0x18,%esp
  10544d:	5d                   	pop    %ebp
  10544e:	c3                   	ret    
  10544f:	90                   	nop

00105450 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  105450:	55                   	push   %ebp
  105451:	89 e5                	mov    %esp,%ebp
  105453:	83 ec 28             	sub    $0x28,%esp
  105456:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  10545b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105462:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105465:	e8 f6 23 00 00       	call   107860 <vmm_alloc_cont>
  10546a:	b9 00 00 00 00       	mov    $0x0,%ecx
  10546f:	ba 00 10 00 00       	mov    $0x1000,%edx
  105474:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  105477:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10547a:	89 04 24             	mov    %eax,(%esp)
  10547d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  105484:	00 
  105485:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  10548c:	00 
  10548d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105490:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105493:	e8 58 00 00 00       	call   1054f0 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  105498:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  10549f:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  1054a6:	0f 83 30 00 00 00    	jae    1054dc <allocate_unused_nodes+0x8c>
  1054ac:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  1054b2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1054b5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1054b8:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  1054be:	01 ca                	add    %ecx,%edx
  1054c0:	89 04 24             	mov    %eax,(%esp)
  1054c3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1054c7:	e8 84 fb ff ff       	call   105050 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1054cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054cf:	05 01 00 00 00       	add    $0x1,%eax
  1054d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1054d7:	e9 c3 ff ff ff       	jmp    10549f <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  1054dc:	83 c4 28             	add    $0x28,%esp
  1054df:	5d                   	pop    %ebp
  1054e0:	c3                   	ret    
  1054e1:	66 90                	xchg   %ax,%ax
  1054e3:	66 90                	xchg   %ax,%ax
  1054e5:	66 90                	xchg   %ax,%ax
  1054e7:	66 90                	xchg   %ax,%ax
  1054e9:	66 90                	xchg   %ax,%ax
  1054eb:	66 90                	xchg   %ax,%ax
  1054ed:	66 90                	xchg   %ax,%ax
  1054ef:	90                   	nop

001054f0 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  1054f0:	55                   	push   %ebp
  1054f1:	89 e5                	mov    %esp,%ebp
  1054f3:	83 ec 10             	sub    $0x10,%esp
  1054f6:	8b 45 10             	mov    0x10(%ebp),%eax
  1054f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1054fc:	8b 55 08             	mov    0x8(%ebp),%edx
  1054ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105502:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105505:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  105508:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10550b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  10550e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105511:	89 c1                	mov    %eax,%ecx
  105513:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  105519:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10551c:	3d 00 00 00 00       	cmp    $0x0,%eax
  105521:	0f 84 1a 00 00 00    	je     105541 <memset+0x51>
        *p++ = c;
  105527:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10552a:	88 c1                	mov    %al,%cl
  10552c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10552f:	89 c2                	mov    %eax,%edx
  105531:	81 c2 01 00 00 00    	add    $0x1,%edx
  105537:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10553a:	88 08                	mov    %cl,(%eax)
    }
  10553c:	e9 cd ff ff ff       	jmp    10550e <memset+0x1e>

    return buf;
  105541:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105544:	83 c4 10             	add    $0x10,%esp
  105547:	5d                   	pop    %ebp
  105548:	c3                   	ret    
  105549:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00105550 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  105550:	55                   	push   %ebp
  105551:	89 e5                	mov    %esp,%ebp
  105553:	83 ec 18             	sub    $0x18,%esp
  105556:	8b 45 10             	mov    0x10(%ebp),%eax
  105559:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10555c:	8b 55 08             	mov    0x8(%ebp),%edx
  10555f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  105562:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105565:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char* d = dest;
  105568:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10556b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const unsigned char* s = src;
  10556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105571:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(n == 0) return 0;
  105574:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10557b:	0f 85 0c 00 00 00    	jne    10558d <memcpy+0x3d>
  105581:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105588:	e9 49 00 00 00       	jmp    1055d6 <memcpy+0x86>

    while (n--) {
  10558d:	e9 00 00 00 00       	jmp    105592 <memcpy+0x42>
  105592:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105595:	89 c1                	mov    %eax,%ecx
  105597:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10559d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1055a0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1055a5:	0f 84 25 00 00 00    	je     1055d0 <memcpy+0x80>
        *(d++) = *(s++);
  1055ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1055ae:	89 c1                	mov    %eax,%ecx
  1055b0:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1055b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1055b9:	8a 10                	mov    (%eax),%dl
  1055bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1055be:	89 c1                	mov    %eax,%ecx
  1055c0:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1055c6:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1055c9:	88 10                	mov    %dl,(%eax)
    }
  1055cb:	e9 c2 ff ff ff       	jmp    105592 <memcpy+0x42>

    return dest;
  1055d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1055d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1055d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1055d9:	83 c4 18             	add    $0x18,%esp
  1055dc:	5d                   	pop    %ebp
  1055dd:	c3                   	ret    
  1055de:	66 90                	xchg   %ax,%ax

001055e0 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  1055e0:	55                   	push   %ebp
  1055e1:	89 e5                	mov    %esp,%ebp
  1055e3:	83 ec 1c             	sub    $0x1c,%esp
  1055e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1055e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1055ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1055ef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1055f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1055f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  1055f8:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1055ff:	0f 85 0c 00 00 00    	jne    105611 <memcmp+0x31>
        return -1;
  105605:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  10560c:	e9 a7 00 00 00       	jmp    1056b8 <memcmp+0xd8>
    if (ptr2 == 0)
  105611:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105618:	0f 85 0c 00 00 00    	jne    10562a <memcmp+0x4a>
        return 1;
  10561e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  105625:	e9 8e 00 00 00       	jmp    1056b8 <memcmp+0xd8>
    if (num == 0)
  10562a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105631:	0f 85 0c 00 00 00    	jne    105643 <memcmp+0x63>
        return 0;
  105637:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10563e:	e9 75 00 00 00       	jmp    1056b8 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  105643:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105646:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  105649:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10564c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  10564f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  105656:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105659:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10565c:	0f 83 4f 00 00 00    	jae    1056b1 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  105662:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105665:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105668:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  10566c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10566f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105672:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  105676:	39 c8                	cmp    %ecx,%eax
  105678:	0f 84 1e 00 00 00    	je     10569c <memcmp+0xbc>
            return pa[i] - pb[i];
  10567e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105681:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105684:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  105688:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10568b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10568e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  105692:	29 c8                	sub    %ecx,%eax
  105694:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105697:	e9 1c 00 00 00       	jmp    1056b8 <memcmp+0xd8>
        }
    }
  10569c:	e9 00 00 00 00       	jmp    1056a1 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  1056a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1056a4:	05 01 00 00 00       	add    $0x1,%eax
  1056a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1056ac:	e9 a5 ff ff ff       	jmp    105656 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  1056b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1056b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1056bb:	83 c4 1c             	add    $0x1c,%esp
  1056be:	5d                   	pop    %ebp
  1056bf:	c3                   	ret    

001056c0 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  1056c0:	55                   	push   %ebp
  1056c1:	89 e5                	mov    %esp,%ebp
  1056c3:	56                   	push   %esi
  1056c4:	83 ec 24             	sub    $0x24,%esp
  1056c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1056cd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1056d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  1056d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1056d6:	89 e1                	mov    %esp,%ecx
  1056d8:	89 01                	mov    %eax,(%ecx)
  1056da:	e8 61 00 00 00       	call   105740 <strlen>
  1056df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  1056e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1056e5:	89 e1                	mov    %esp,%ecx
  1056e7:	89 01                	mov    %eax,(%ecx)
  1056e9:	e8 52 00 00 00       	call   105740 <strlen>
  1056ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  1056f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1056f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1056f7:	0f 8d 0b 00 00 00    	jge    105708 <strcmp+0x48>
  1056fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105700:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105703:	e9 06 00 00 00       	jmp    10570e <strcmp+0x4e>
  105708:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10570b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10570e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105711:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
  105714:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105717:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10571a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10571d:	81 c2 01 00 00 00    	add    $0x1,%edx
  105723:	c1 e2 00             	shl    $0x0,%edx
  105726:	89 e6                	mov    %esp,%esi
  105728:	89 56 08             	mov    %edx,0x8(%esi)
  10572b:	89 4e 04             	mov    %ecx,0x4(%esi)
  10572e:	89 06                	mov    %eax,(%esi)
  105730:	e8 ab fe ff ff       	call   1055e0 <memcmp>
  105735:	83 c4 24             	add    $0x24,%esp
  105738:	5e                   	pop    %esi
  105739:	5d                   	pop    %ebp
  10573a:	c3                   	ret    
  10573b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105740 <strlen>:
}

unsigned int strlen(const char* str) {
  105740:	55                   	push   %ebp
  105741:	89 e5                	mov    %esp,%ebp
  105743:	83 ec 0c             	sub    $0xc,%esp
  105746:	8b 45 08             	mov    0x8(%ebp),%eax
  105749:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  10574c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105753:	0f 85 0c 00 00 00    	jne    105765 <strlen+0x25>
        return 0;
  105759:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105760:	e9 37 00 00 00       	jmp    10579c <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  105765:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10576c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10576f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105772:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  105776:	3d 00 00 00 00       	cmp    $0x0,%eax
  10577b:	0f 84 15 00 00 00    	je     105796 <strlen+0x56>
  105781:	e9 00 00 00 00       	jmp    105786 <strlen+0x46>
  105786:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105789:	05 01 00 00 00       	add    $0x1,%eax
  10578e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105791:	e9 d6 ff ff ff       	jmp    10576c <strlen+0x2c>
        ;
    return i;
  105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105799:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10579c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10579f:	83 c4 0c             	add    $0xc,%esp
  1057a2:	5d                   	pop    %ebp
  1057a3:	c3                   	ret    
  1057a4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1057ab:	00 00 00 00 00 

001057b0 <strcpy>:

char* strcpy(char* dest, const char* src) {
  1057b0:	55                   	push   %ebp
  1057b1:	89 e5                	mov    %esp,%ebp
  1057b3:	56                   	push   %esi
  1057b4:	83 ec 24             	sub    $0x24,%esp
  1057b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1057ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1057bd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1057c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  1057c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1057c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1057c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1057cc:	89 e6                	mov    %esp,%esi
  1057ce:	89 16                	mov    %edx,(%esi)
  1057d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1057d3:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1057d6:	e8 65 ff ff ff       	call   105740 <strlen>
  1057db:	c1 e0 00             	shl    $0x0,%eax
  1057de:	05 01 00 00 00       	add    $0x1,%eax
  1057e3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1057e6:	89 0c 24             	mov    %ecx,(%esp)
  1057e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1057ec:	89 54 24 04          	mov    %edx,0x4(%esp)
  1057f0:	89 44 24 08          	mov    %eax,0x8(%esp)
  1057f4:	e8 57 fd ff ff       	call   105550 <memcpy>
    return dest;
  1057f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1057fc:	83 c4 24             	add    $0x24,%esp
  1057ff:	5e                   	pop    %esi
  105800:	5d                   	pop    %ebp
  105801:	c3                   	ret    
  105802:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105809:	1f 84 00 00 00 00 00 

00105810 <strclone>:
}

char* strclone(char* str) {
  105810:	55                   	push   %ebp
  105811:	89 e5                	mov    %esp,%ebp
  105813:	83 ec 18             	sub    $0x18,%esp
  105816:	8b 45 08             	mov    0x8(%ebp),%eax
  105819:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  10581c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10581f:	89 e1                	mov    %esp,%ecx
  105821:	89 01                	mov    %eax,(%ecx)
  105823:	e8 18 ff ff ff       	call   105740 <strlen>
  105828:	c1 e0 00             	shl    $0x0,%eax
  10582b:	05 01 00 00 00       	add    $0x1,%eax
  105830:	89 04 24             	mov    %eax,(%esp)
  105833:	e8 48 f6 ff ff       	call   104e80 <malloc>
  105838:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  10583b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10583e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105841:	89 e2                	mov    %esp,%edx
  105843:	89 4a 04             	mov    %ecx,0x4(%edx)
  105846:	89 02                	mov    %eax,(%edx)
  105848:	e8 63 ff ff ff       	call   1057b0 <strcpy>

    return ret;
  10584d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105850:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105853:	89 c8                	mov    %ecx,%eax
  105855:	83 c4 18             	add    $0x18,%esp
  105858:	5d                   	pop    %ebp
  105859:	c3                   	ret    
  10585a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105860 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  105860:	55                   	push   %ebp
  105861:	89 e5                	mov    %esp,%ebp
  105863:	83 ec 18             	sub    $0x18,%esp
  105866:	8b 45 0c             	mov    0xc(%ebp),%eax
  105869:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10586c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10586f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) { //TODO no way to free the cloned string :|
  105872:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105879:	0f 84 22 00 00 00    	je     1058a1 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  10587f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105882:	89 04 24             	mov    %eax,(%esp)
  105885:	e8 86 ff ff ff       	call   105810 <strclone>
  10588a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10588d:	89 04 24             	mov    %eax,(%esp)
  105890:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105894:	e8 37 00 00 00       	call   1058d0 <strtoknc>
  105899:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10589c:	e9 1e 00 00 00       	jmp    1058bf <strtok+0x5f>
  1058a1:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  1058a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1058a9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1058b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1058b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1058b7:	e8 14 00 00 00       	call   1058d0 <strtoknc>
  1058bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1058bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1058c2:	83 c4 18             	add    $0x18,%esp
  1058c5:	5d                   	pop    %ebp
  1058c6:	c3                   	ret    
  1058c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1058ce:	00 00 

001058d0 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  1058d0:	55                   	push   %ebp
  1058d1:	89 e5                	mov    %esp,%ebp
  1058d3:	83 ec 28             	sub    $0x28,%esp
  1058d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1058d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1058dc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1058df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  1058e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  1058e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1058ec:	89 e1                	mov    %esp,%ecx
  1058ee:	89 01                	mov    %eax,(%ecx)
  1058f0:	e8 4b fe ff ff       	call   105740 <strlen>
  1058f5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  1058f8:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  1058ff:	0f 85 0c 00 00 00    	jne    105911 <strtoknc+0x41>
        return 0;
  105905:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10590c:	e9 70 01 00 00       	jmp    105a81 <strtoknc+0x1b1>

    /* if the original string has nothing left */
    if (!str && !sp)
  105911:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105918:	0f 85 1c 00 00 00    	jne    10593a <strtoknc+0x6a>
  10591e:	81 3d 48 a4 10 00 00 	cmpl   $0x0,0x10a448
  105925:	00 00 00 
  105928:	0f 85 0c 00 00 00    	jne    10593a <strtoknc+0x6a>
        return 0;
  10592e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105935:	e9 47 01 00 00       	jmp    105a81 <strtoknc+0x1b1>

    /* initialize the sp during the first call */
    if (str)
  10593a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105941:	0f 84 08 00 00 00    	je     10594f <strtoknc+0x7f>
        sp = str;
  105947:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10594a:	a3 48 a4 10 00       	mov    %eax,0x10a448

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  10594f:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105954:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  105957:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10595e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105961:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105964:	0f 8d 3d 00 00 00    	jge    1059a7 <strtoknc+0xd7>
            if (*p_start == delimiters[i]) {
  10596a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10596d:	0f be 00             	movsbl (%eax),%eax
  105970:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105973:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105976:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10597a:	39 c8                	cmp    %ecx,%eax
  10597c:	0f 85 10 00 00 00    	jne    105992 <strtoknc+0xc2>
                p_start++;
  105982:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105985:	05 01 00 00 00       	add    $0x1,%eax
  10598a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  10598d:	e9 15 00 00 00       	jmp    1059a7 <strtoknc+0xd7>
            }
        }
  105992:	e9 00 00 00 00       	jmp    105997 <strtoknc+0xc7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  105997:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10599a:	05 01 00 00 00       	add    $0x1,%eax
  10599f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1059a2:	e9 b7 ff ff ff       	jmp    10595e <strtoknc+0x8e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  1059a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1059aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1059ad:	0f 85 0d 00 00 00    	jne    1059c0 <strtoknc+0xf0>
            sp = p_start;
  1059b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1059b6:	a3 48 a4 10 00       	mov    %eax,0x10a448
            break;
  1059bb:	e9 05 00 00 00       	jmp    1059c5 <strtoknc+0xf5>
        }
    }
  1059c0:	e9 92 ff ff ff       	jmp    105957 <strtoknc+0x87>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  1059c5:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1059ca:	0f be 00             	movsbl (%eax),%eax
  1059cd:	3d 00 00 00 00       	cmp    $0x0,%eax
  1059d2:	0f 85 17 00 00 00    	jne    1059ef <strtoknc+0x11f>
        sp = NULL;
  1059d8:	c7 05 48 a4 10 00 00 	movl   $0x0,0x10a448
  1059df:	00 00 00 
        return sp;
  1059e2:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1059e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1059ea:	e9 92 00 00 00       	jmp    105a81 <strtoknc+0x1b1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  1059ef:	e9 00 00 00 00       	jmp    1059f4 <strtoknc+0x124>
  1059f4:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1059f9:	0f be 00             	movsbl (%eax),%eax
  1059fc:	3d 00 00 00 00       	cmp    $0x0,%eax
  105a01:	0f 84 74 00 00 00    	je     105a7b <strtoknc+0x1ab>
        for (i = 0; i < len; i++) {
  105a07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105a0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a11:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105a14:	0f 8d 3c 00 00 00    	jge    105a56 <strtoknc+0x186>
            if (*sp == delimiters[i]) {
  105a1a:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105a1f:	0f be 00             	movsbl (%eax),%eax
  105a22:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105a25:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105a28:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  105a2c:	39 c8                	cmp    %ecx,%eax
  105a2e:	0f 85 0d 00 00 00    	jne    105a41 <strtoknc+0x171>
                *sp = '\0';
  105a34:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105a39:	c6 00 00             	movb   $0x0,(%eax)
                break;
  105a3c:	e9 15 00 00 00       	jmp    105a56 <strtoknc+0x186>
            }
        }
  105a41:	e9 00 00 00 00       	jmp    105a46 <strtoknc+0x176>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  105a46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a49:	05 01 00 00 00       	add    $0x1,%eax
  105a4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105a51:	e9 b8 ff ff ff       	jmp    105a0e <strtoknc+0x13e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  105a56:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105a5b:	05 01 00 00 00       	add    $0x1,%eax
  105a60:	a3 48 a4 10 00       	mov    %eax,0x10a448
        if (i < len)
  105a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105a6b:	0f 8d 05 00 00 00    	jge    105a76 <strtoknc+0x1a6>
            break;
  105a71:	e9 05 00 00 00       	jmp    105a7b <strtoknc+0x1ab>
    }
  105a76:	e9 79 ff ff ff       	jmp    1059f4 <strtoknc+0x124>

    return p_start;
  105a7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105a7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  105a81:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105a84:	83 c4 28             	add    $0x28,%esp
  105a87:	5d                   	pop    %ebp
  105a88:	c3                   	ret    
  105a89:	66 90                	xchg   %ax,%ax
  105a8b:	66 90                	xchg   %ax,%ax
  105a8d:	66 90                	xchg   %ax,%ax
  105a8f:	90                   	nop

00105a90 <vfs_reset_error>:
            get_current_task()->vfserr = code;
        }
    }
}

void vfs_reset_error() {
  105a90:	55                   	push   %ebp
  105a91:	89 e5                	mov    %esp,%ebp
    if(get_current_task()) {
  105a93:	83 ec 08             	sub    $0x8,%esp
  105a96:	e8 95 e7 ff ff       	call   104230 <get_current_task>
  105a9b:	3d 00 00 00 00       	cmp    $0x0,%eax
  105aa0:	0f 84 0c 00 00 00    	je     105ab2 <vfs_reset_error+0x22>
        get_current_task()->vfserr = PE_NO_ERROR;
  105aa6:	e8 85 e7 ff ff       	call   104230 <get_current_task>
  105aab:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    }
}
  105ab2:	83 c4 08             	add    $0x8,%esp
  105ab5:	5d                   	pop    %ebp
  105ab6:	c3                   	ret    
  105ab7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105abe:	00 00 

00105ac0 <vfs_create_dir>:
    }

    return created;
}

uint32_t vfs_create_dir(char* path) {
  105ac0:	55                   	push   %ebp
  105ac1:	89 e5                	mov    %esp,%ebp
  105ac3:	83 ec 08             	sub    $0x8,%esp
  105ac6:	8b 45 08             	mov    0x8(%ebp),%eax
  105ac9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  105acc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105acf:	89 04 24             	mov    %eax,(%esp)
  105ad2:	e8 09 00 00 00       	call   105ae0 <vfs_create_path>
  105ad7:	83 c4 08             	add    $0x8,%esp
  105ada:	5d                   	pop    %ebp
  105adb:	c3                   	ret    
  105adc:	0f 1f 40 00          	nopl   0x0(%eax)

00105ae0 <vfs_create_path>:

static struct res_node* vfs_get_node(char* path) {
    return vfs_get_relative_node(vfs_get_current_task_root_node_for_path(path), path);
}

static int vfs_create_path(char* path) {
  105ae0:	55                   	push   %ebp
  105ae1:	89 e5                	mov    %esp,%ebp
  105ae3:	83 ec 38             	sub    $0x38,%esp
  105ae6:	8b 45 08             	mov    0x8(%ebp),%eax
  105ae9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = vfs_get_current_task_root_node_for_path(path);
  105aec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105aef:	89 04 24             	mov    %eax,(%esp)
  105af2:	e8 49 10 00 00       	call   106b40 <vfs_get_current_task_root_node_for_path>
  105af7:	8d 0d 8c 96 10 00    	lea    0x10968c,%ecx
  105afd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  105b00:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  105b07:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  105b0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105b11:	89 04 24             	mov    %eax,(%esp)
  105b14:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105b18:	e8 43 fd ff ff       	call   105860 <strtok>
  105b1d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  105b20:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105b23:	0f be 00             	movsbl (%eax),%eax
  105b26:	3d 00 00 00 00       	cmp    $0x0,%eax
  105b2b:	0f 85 21 00 00 00    	jne    105b52 <vfs_create_path+0x72>
  105b31:	b8 00 00 00 00       	mov    $0x0,%eax
  105b36:	8d 0d 8c 96 10 00    	lea    0x10968c,%ecx
  105b3c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105b43:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105b47:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105b4a:	e8 11 fd ff ff       	call   105860 <strtok>
  105b4f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  105b52:	e9 00 00 00 00       	jmp    105b57 <vfs_create_path+0x77>
  105b57:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105b5e:	0f 84 e8 00 00 00    	je     105c4c <vfs_create_path+0x16c>
    {
        child = vfs_find_node(parent, sub);
  105b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105b67:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105b6a:	89 04 24             	mov    %eax,(%esp)
  105b6d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105b71:	e8 9a 10 00 00       	call   106c10 <vfs_find_node>
  105b76:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  105b79:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105b80:	0f 85 9a 00 00 00    	jne    105c20 <vfs_create_path+0x140>
  105b86:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  105b8b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  105b92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105b95:	e8 e6 f2 ff ff       	call   104e80 <malloc>
  105b9a:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  105b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105ba0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105ba3:	89 e2                	mov    %esp,%edx
  105ba5:	89 4a 04             	mov    %ecx,0x4(%edx)
  105ba8:	89 02                	mov    %eax,(%edx)
  105baa:	e8 01 fc ff ff       	call   1057b0 <strcpy>
            child->res_type = RES_SUBDIR;
  105baf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105bb2:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  105bb9:	00 00 00 
            child->res_ptr = 0;
  105bbc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105bbf:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  105bc6:	00 00 00 

            created++;
  105bc9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105bcc:	81 c1 01 00 00 00    	add    $0x1,%ecx
  105bd2:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  105bd5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105bd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105bdb:	89 0c 24             	mov    %ecx,(%esp)
  105bde:	89 54 24 04          	mov    %edx,0x4(%esp)
  105be2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105be5:	e8 66 11 00 00       	call   106d50 <vfs_insert_node>
  105bea:	3d 00 00 00 00       	cmp    $0x0,%eax
  105bef:	0f 84 26 00 00 00    	je     105c1b <vfs_create_path+0x13b>
  105bf5:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  105bfa:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  105c01:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105c04:	e8 77 f2 ff ff       	call   104e80 <malloc>
  105c09:	8d 0d 8e 96 10 00    	lea    0x10968e,%ecx
  105c0f:	89 04 24             	mov    %eax,(%esp)
  105c12:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105c16:	e8 a5 a4 ff ff       	call   1000c0 <show_cod>
            }
        }
  105c1b:	e9 00 00 00 00       	jmp    105c20 <vfs_create_path+0x140>
  105c20:	b8 00 00 00 00       	mov    $0x0,%eax
  105c25:	8d 0d 8c 96 10 00    	lea    0x10968c,%ecx

        parent = child;
  105c2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105c2e:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  105c31:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105c38:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105c3c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105c3f:	e8 1c fc ff ff       	call   105860 <strtok>
  105c44:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  105c47:	e9 0b ff ff ff       	jmp    105b57 <vfs_create_path+0x77>

    return created;
  105c4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105c4f:	83 c4 38             	add    $0x38,%esp
  105c52:	5d                   	pop    %ebp
  105c53:	c3                   	ret    
  105c54:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105c5b:	00 00 00 00 00 

00105c60 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  105c60:	55                   	push   %ebp
  105c61:	89 e5                	mov    %esp,%ebp
  105c63:	83 ec 28             	sub    $0x28,%esp
  105c66:	8b 45 10             	mov    0x10(%ebp),%eax
  105c69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  105c6c:	8b 55 08             	mov    0x8(%ebp),%edx
  105c6f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105c72:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  105c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105c7b:	89 e1                	mov    %esp,%ecx
  105c7d:	89 01                	mov    %eax,(%ecx)
  105c7f:	e8 bc fa ff ff       	call   105740 <strlen>
  105c84:	05 01 00 00 00       	add    $0x1,%eax
  105c89:	89 04 24             	mov    %eax,(%esp)
  105c8c:	e8 ef f1 ff ff       	call   104e80 <malloc>
  105c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  105c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105c97:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105c9a:	89 e2                	mov    %esp,%edx
  105c9c:	89 4a 04             	mov    %ecx,0x4(%edx)
  105c9f:	89 02                	mov    %eax,(%edx)
  105ca1:	e8 0a fb ff ff       	call   1057b0 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  105ca6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105ca9:	89 0c 24             	mov    %ecx,(%esp)
  105cac:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105caf:	e8 2c fe ff ff       	call   105ae0 <vfs_create_path>
  105cb4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  105cb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105cba:	89 04 24             	mov    %eax,(%esp)
  105cbd:	e8 4e 00 00 00       	call   105d10 <vfs_get_node>
  105cc2:	a3 58 a4 10 00       	mov    %eax,0x10a458

    node->res_type = RES_KERNDRV;
  105cc7:	a1 58 a4 10 00       	mov    0x10a458,%eax
  105ccc:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  105cd3:	00 00 00 
    node->res_ptr = driver->create(params);
  105cd6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cd9:	8b 40 14             	mov    0x14(%eax),%eax
  105cdc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105cdf:	89 0c 24             	mov    %ecx,(%esp)
  105ce2:	ff d0                	call   *%eax
  105ce4:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  105cea:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  105cf0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cf3:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  105cf9:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  105cff:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  105d02:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105d05:	83 c4 28             	add    $0x28,%esp
  105d08:	5d                   	pop    %ebp
  105d09:	c3                   	ret    
  105d0a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105d10 <vfs_get_node>:

    return vfs_get_relative_node(root, get_current_task()->execPath);

}

static struct res_node* vfs_get_node(char* path) {
  105d10:	55                   	push   %ebp
  105d11:	89 e5                	mov    %esp,%ebp
  105d13:	83 ec 18             	sub    $0x18,%esp
  105d16:	8b 45 08             	mov    0x8(%ebp),%eax
  105d19:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_get_relative_node(vfs_get_current_task_root_node_for_path(path), path);
  105d1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105d1f:	89 04 24             	mov    %eax,(%esp)
  105d22:	e8 19 0e 00 00       	call   106b40 <vfs_get_current_task_root_node_for_path>
  105d27:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105d2a:	89 04 24             	mov    %eax,(%esp)
  105d2d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105d31:	e8 9a 0c 00 00       	call   1069d0 <vfs_get_relative_node>
  105d36:	83 c4 18             	add    $0x18,%esp
  105d39:	5d                   	pop    %ebp
  105d3a:	c3                   	ret    
  105d3b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105d40 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  105d40:	55                   	push   %ebp
  105d41:	89 e5                	mov    %esp,%ebp
  105d43:	83 ec 28             	sub    $0x28,%esp
  105d46:	8b 45 0c             	mov    0xc(%ebp),%eax
  105d49:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105d4c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105d4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  105d52:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d55:	89 04 24             	mov    %eax,(%esp)
  105d58:	e8 b3 ff ff ff       	call   105d10 <vfs_get_node>
  105d5d:	a3 5c a4 10 00       	mov    %eax,0x10a45c

    if(node->res_type == RES_KERNDRV) {
  105d62:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  105d67:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  105d6e:	00 00 00 
  105d71:	0f 85 34 00 00 00    	jne    105dab <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  105d77:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  105d7c:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105d82:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  105d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105d88:	8b 40 04             	mov    0x4(%eax),%eax
  105d8b:	8b 40 08             	mov    0x8(%eax),%eax
  105d8e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105d91:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105d94:	89 0c 24             	mov    %ecx,(%esp)
  105d97:	89 54 24 04          	mov    %edx,0x4(%esp)
  105d9b:	ff d0                	call   *%eax
  105d9d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  105da0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105da3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105da6:	e9 07 00 00 00       	jmp    105db2 <vfs_open+0x72>
    }

    return 0;
  105dab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105db2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105db5:	83 c4 28             	add    $0x28,%esp
  105db8:	5d                   	pop    %ebp
  105db9:	c3                   	ret    
  105dba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105dc0 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  105dc0:	55                   	push   %ebp
  105dc1:	89 e5                	mov    %esp,%ebp
  105dc3:	83 ec 18             	sub    $0x18,%esp
  105dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  105dc9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  105dcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105dcf:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105dd5:	0f 85 22 00 00 00    	jne    105dfd <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105ddb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105dde:	8b 40 04             	mov    0x4(%eax),%eax
  105de1:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  105de4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105de7:	8b 40 04             	mov    0x4(%eax),%eax
  105dea:	8b 40 0c             	mov    0xc(%eax),%eax
  105ded:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105df0:	89 0c 24             	mov    %ecx,(%esp)
  105df3:	ff d0                	call   *%eax
  105df5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105df8:	e9 07 00 00 00       	jmp    105e04 <vfs_close+0x44>
    }

    return 0;
  105dfd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105e04:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105e07:	83 c4 18             	add    $0x18,%esp
  105e0a:	5d                   	pop    %ebp
  105e0b:	c3                   	ret    
  105e0c:	0f 1f 40 00          	nopl   0x0(%eax)

00105e10 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  105e10:	55                   	push   %ebp
  105e11:	89 e5                	mov    %esp,%ebp
  105e13:	56                   	push   %esi
  105e14:	83 ec 34             	sub    $0x34,%esp
  105e17:	8b 45 14             	mov    0x14(%ebp),%eax
  105e1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105e1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105e20:	8b 75 08             	mov    0x8(%ebp),%esi
  105e23:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105e26:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105e29:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105e2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  105e2f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105e36:	0f 85 0c 00 00 00    	jne    105e48 <vfs_read+0x38>
  105e3c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105e43:	e9 b6 00 00 00       	jmp    105efe <vfs_read+0xee>

    if(!(handle->filemode & FM_READ)) return RW_NOFM_READ;
  105e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105e4b:	8b 40 0c             	mov    0xc(%eax),%eax
  105e4e:	25 01 00 00 00       	and    $0x1,%eax
  105e53:	3d 00 00 00 00       	cmp    $0x0,%eax
  105e58:	0f 85 0c 00 00 00    	jne    105e6a <vfs_read+0x5a>
  105e5e:	c7 45 f8 04 00 00 00 	movl   $0x4,-0x8(%ebp)
  105e65:	e9 94 00 00 00       	jmp    105efe <vfs_read+0xee>

    if(handle->res_type == RES_KERNDRV) {
  105e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105e6d:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105e73:	0f 85 7e 00 00 00    	jne    105ef7 <vfs_read+0xe7>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105e7c:	8b 40 04             	mov    0x4(%eax),%eax
  105e7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105e82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105e85:	8b 40 04             	mov    0x4(%eax),%eax
  105e88:	8b 00                	mov    (%eax),%eax
  105e8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105e8d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105e90:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105e93:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105e97:	89 0c 24             	mov    %ecx,(%esp)
  105e9a:	89 54 24 04          	mov    %edx,0x4(%esp)
  105e9e:	89 74 24 08          	mov    %esi,0x8(%esp)
  105ea2:	ff d0                	call   *%eax
  105ea4:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105ea7:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  105eae:	0f 85 1e 00 00 00    	jne    105ed2 <vfs_read+0xc2>
           handle->position += size * count;
  105eb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105eb7:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  105ebb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105ebe:	8b 51 08             	mov    0x8(%ecx),%edx
  105ec1:	01 c2                	add    %eax,%edx
  105ec3:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  105ec6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105ecd:	e9 2c 00 00 00       	jmp    105efe <vfs_read+0xee>
       }

       if(res == RW_BLOCK) {
  105ed2:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  105ed9:	0f 85 0c 00 00 00    	jne    105eeb <vfs_read+0xdb>
           return RW_BLOCK;
  105edf:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105ee6:	e9 13 00 00 00       	jmp    105efe <vfs_read+0xee>
       }

       return RW_ERR_DRIVER;
  105eeb:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105ef2:	e9 07 00 00 00       	jmp    105efe <vfs_read+0xee>
    }

    return RW_ERR_VFS;
  105ef7:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  105efe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105f01:	83 c4 34             	add    $0x34,%esp
  105f04:	5e                   	pop    %esi
  105f05:	5d                   	pop    %ebp
  105f06:	c3                   	ret    
  105f07:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105f0e:	00 00 

00105f10 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  105f10:	55                   	push   %ebp
  105f11:	89 e5                	mov    %esp,%ebp
  105f13:	56                   	push   %esi
  105f14:	83 ec 34             	sub    $0x34,%esp
  105f17:	8b 45 14             	mov    0x14(%ebp),%eax
  105f1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105f1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105f20:	8b 75 08             	mov    0x8(%ebp),%esi
  105f23:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105f26:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105f29:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105f2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  105f2f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105f36:	0f 85 0c 00 00 00    	jne    105f48 <vfs_write+0x38>
  105f3c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105f43:	e9 b7 00 00 00       	jmp    105fff <vfs_write+0xef>

    if(!(handle->filemode & FM_WRITE)) return RW_NOFM_WRITE;
  105f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105f4b:	8b 40 0c             	mov    0xc(%eax),%eax
  105f4e:	25 02 00 00 00       	and    $0x2,%eax
  105f53:	3d 00 00 00 00       	cmp    $0x0,%eax
  105f58:	0f 85 0c 00 00 00    	jne    105f6a <vfs_write+0x5a>
  105f5e:	c7 45 f8 05 00 00 00 	movl   $0x5,-0x8(%ebp)
  105f65:	e9 95 00 00 00       	jmp    105fff <vfs_write+0xef>

    if(handle->res_type == RES_KERNDRV) {
  105f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105f6d:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105f73:	0f 85 7f 00 00 00    	jne    105ff8 <vfs_write+0xe8>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105f7c:	8b 40 04             	mov    0x4(%eax),%eax
  105f7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105f82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105f85:	8b 40 04             	mov    0x4(%eax),%eax
  105f88:	8b 40 04             	mov    0x4(%eax),%eax
  105f8b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105f8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105f91:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105f94:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105f98:	89 0c 24             	mov    %ecx,(%esp)
  105f9b:	89 54 24 04          	mov    %edx,0x4(%esp)
  105f9f:	89 74 24 08          	mov    %esi,0x8(%esp)
  105fa3:	ff d0                	call   *%eax
  105fa5:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105fa8:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  105faf:	0f 85 1e 00 00 00    	jne    105fd3 <vfs_write+0xc3>
           handle->position += size * count;
  105fb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105fb8:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  105fbc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105fbf:	8b 51 08             	mov    0x8(%ecx),%edx
  105fc2:	01 c2                	add    %eax,%edx
  105fc4:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  105fc7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105fce:	e9 2c 00 00 00       	jmp    105fff <vfs_write+0xef>
       }

       if(res == RW_BLOCK) {
  105fd3:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  105fda:	0f 85 0c 00 00 00    	jne    105fec <vfs_write+0xdc>
           return RW_BLOCK;
  105fe0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105fe7:	e9 13 00 00 00       	jmp    105fff <vfs_write+0xef>
       }

       return RW_ERR_DRIVER;
  105fec:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105ff3:	e9 07 00 00 00       	jmp    105fff <vfs_write+0xef>
    }

    return RW_ERR_VFS;
  105ff8:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  105fff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106002:	83 c4 34             	add    $0x34,%esp
  106005:	5e                   	pop    %esi
  106006:	5d                   	pop    %ebp
  106007:	c3                   	ret    
  106008:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10600f:	00 

00106010 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  106010:	55                   	push   %ebp
  106011:	89 e5                	mov    %esp,%ebp
  106013:	83 ec 18             	sub    $0x18,%esp
  106016:	8b 45 08             	mov    0x8(%ebp),%eax
  106019:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  10601c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  106023:	0f 85 0c 00 00 00    	jne    106035 <vfs_available+0x25>
  106029:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106030:	e9 38 00 00 00       	jmp    10606d <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  106035:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106038:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  10603e:	0f 85 22 00 00 00    	jne    106066 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  106044:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106047:	8b 40 04             	mov    0x4(%eax),%eax
  10604a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  10604d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106050:	8b 40 04             	mov    0x4(%eax),%eax
  106053:	8b 40 10             	mov    0x10(%eax),%eax
  106056:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106059:	89 0c 24             	mov    %ecx,(%esp)
  10605c:	ff d0                	call   *%eax
  10605e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106061:	e9 07 00 00 00       	jmp    10606d <vfs_available+0x5d>
    }

    return 0;
  106066:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10606d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106070:	83 c4 18             	add    $0x18,%esp
  106073:	5d                   	pop    %ebp
  106074:	c3                   	ret    
  106075:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10607c:	00 00 00 00 

00106080 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  106080:	55                   	push   %ebp
  106081:	89 e5                	mov    %esp,%ebp
  106083:	83 ec 18             	sub    $0x18,%esp
  106086:	8b 45 08             	mov    0x8(%ebp),%eax
  106089:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  10608c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10608f:	89 04 24             	mov    %eax,(%esp)
  106092:	e8 79 fc ff ff       	call   105d10 <vfs_get_node>
  106097:	3d 00 00 00 00       	cmp    $0x0,%eax
  10609c:	0f 84 0c 00 00 00    	je     1060ae <vfs_exists+0x2e>
  1060a2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1060a9:	e9 07 00 00 00       	jmp    1060b5 <vfs_exists+0x35>
    return 0;
  1060ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1060b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1060b8:	83 c4 18             	add    $0x18,%esp
  1060bb:	5d                   	pop    %ebp
  1060bc:	c3                   	ret    
  1060bd:	0f 1f 00             	nopl   (%eax)

001060c0 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  1060c0:	55                   	push   %ebp
  1060c1:	89 e5                	mov    %esp,%ebp
  1060c3:	83 ec 0c             	sub    $0xc,%esp
  1060c6:	8b 45 10             	mov    0x10(%ebp),%eax
  1060c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1060cc:	8b 55 08             	mov    0x8(%ebp),%edx
  1060cf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1060d2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1060d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  1060d8:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1060df:	0f 85 09 00 00 00    	jne    1060ee <vfs_seek+0x2e>
        handle->position = offset;
  1060e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1060e8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1060eb:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  1060ee:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  1060f5:	0f 85 0e 00 00 00    	jne    106109 <vfs_seek+0x49>
        handle->position += offset;
  1060fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1060fe:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106101:	8b 51 08             	mov    0x8(%ecx),%edx
  106104:	01 c2                	add    %eax,%edx
  106106:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  106109:	83 c4 0c             	add    $0xc,%esp
  10610c:	5d                   	pop    %ebp
  10610d:	c3                   	ret    
  10610e:	66 90                	xchg   %ax,%ax

00106110 <vfs_exec>:

uint32_t vfs_exec(char* path, char* args[], char* execPath, char* stdin, char* stdout, char* stderr) {
  106110:	55                   	push   %ebp
  106111:	89 e5                	mov    %esp,%ebp
  106113:	53                   	push   %ebx
  106114:	57                   	push   %edi
  106115:	56                   	push   %esi
  106116:	81 ec cc 00 00 00    	sub    $0xcc,%esp
  10611c:	8b 45 1c             	mov    0x1c(%ebp),%eax
  10611f:	8b 4d 18             	mov    0x18(%ebp),%ecx
  106122:	8b 55 14             	mov    0x14(%ebp),%edx
  106125:	8b 75 10             	mov    0x10(%ebp),%esi
  106128:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10612b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10612e:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  106131:	89 7d e8             	mov    %edi,-0x18(%ebp)
  106134:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  106137:	89 55 e0             	mov    %edx,-0x20(%ebp)
  10613a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  10613d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    path = strclone(path);
  106140:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106143:	89 04 24             	mov    %eax,(%esp)
  106146:	e8 c5 f6 ff ff       	call   105810 <strclone>
  10614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(!vfs_exists(path)) {
  10614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106151:	89 04 24             	mov    %eax,(%esp)
  106154:	e8 27 ff ff ff       	call   106080 <vfs_exists>
  106159:	3d 00 00 00 00       	cmp    $0x0,%eax
  10615e:	0f 85 23 00 00 00    	jne    106187 <vfs_exec+0x77>
  106164:	b8 01 00 00 00       	mov    $0x1,%eax
        vfs_set_error(PE_FILE_NOT_FOUND);
  106169:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  106170:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  106176:	e8 a5 05 00 00       	call   106720 <vfs_set_error>
        return 0;
  10617b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  106182:	e9 7e 05 00 00       	jmp    106705 <vfs_exec+0x5f5>
    }

    uint32_t elf_mod_pdir;

    elf_mod_pdir = vmm_create_pagedir();
  106187:	e8 64 0c 00 00       	call   106df0 <vmm_create_pagedir>
  10618c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    //Copy args into kernel memory
    uint32_t argc = 0;
  10618f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)

    if(args != 0) {
  106196:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  10619d:	0f 84 2d 00 00 00    	je     1061d0 <vfs_exec+0xc0>
        while(args[argc] != 0) {
  1061a3:	e9 00 00 00 00       	jmp    1061a8 <vfs_exec+0x98>
  1061a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1061ab:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1061ae:	81 3c 81 00 00 00 00 	cmpl   $0x0,(%ecx,%eax,4)
  1061b5:	0f 84 10 00 00 00    	je     1061cb <vfs_exec+0xbb>
            argc++;
  1061bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1061be:	05 01 00 00 00       	add    $0x1,%eax
  1061c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
        }
  1061c6:	e9 dd ff ff ff       	jmp    1061a8 <vfs_exec+0x98>
    }
  1061cb:	e9 00 00 00 00       	jmp    1061d0 <vfs_exec+0xc0>

    char** kargs = malloc((sizeof(char*)) * (argc + 1));
  1061d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1061d3:	05 01 00 00 00       	add    $0x1,%eax
  1061d8:	c1 e0 02             	shl    $0x2,%eax
  1061db:	89 04 24             	mov    %eax,(%esp)
  1061de:	e8 9d ec ff ff       	call   104e80 <malloc>
  1061e3:	89 45 cc             	mov    %eax,-0x34(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  1061e6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  1061ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1061f0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  1061f3:	0f 83 5c 00 00 00    	jae    106255 <vfs_exec+0x145>
        kargs[i] = malloc(strlen(args[i]) + 1);
  1061f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1061fc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1061ff:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106202:	89 e1                	mov    %esp,%ecx
  106204:	89 01                	mov    %eax,(%ecx)
  106206:	e8 35 f5 ff ff       	call   105740 <strlen>
  10620b:	05 01 00 00 00       	add    $0x1,%eax
  106210:	89 04 24             	mov    %eax,(%esp)
  106213:	e8 68 ec ff ff       	call   104e80 <malloc>
  106218:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10621b:	8b 55 cc             	mov    -0x34(%ebp),%edx
  10621e:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(kargs[i], args[i]);
  106221:	8b 45 c8             	mov    -0x38(%ebp),%eax
  106224:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  106227:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10622a:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10622d:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106230:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106233:	89 e2                	mov    %esp,%edx
  106235:	89 4a 04             	mov    %ecx,0x4(%edx)
  106238:	89 02                	mov    %eax,(%edx)
  10623a:	e8 71 f5 ff ff       	call   1057b0 <strcpy>
  10623f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
        }
    }

    char** kargs = malloc((sizeof(char*)) * (argc + 1));

    for(uint32_t i = 0; i < argc; i++) {
  106245:	8b 45 c8             	mov    -0x38(%ebp),%eax
  106248:	05 01 00 00 00       	add    $0x1,%eax
  10624d:	89 45 c8             	mov    %eax,-0x38(%ebp)
  106250:	e9 98 ff ff ff       	jmp    1061ed <vfs_exec+0xdd>
  106255:	b8 05 00 00 00       	mov    $0x5,%eax
        kargs[i] = malloc(strlen(args[i]) + 1);
        strcpy(kargs[i], args[i]);
    }

    kargs[argc] = 0;
  10625a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10625d:	8b 55 cc             	mov    -0x34(%ebp),%edx
  106260:	c7 04 8a 00 00 00 00 	movl   $0x0,(%edx,%ecx,4)

    //Execute file
    struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  106267:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10626a:	89 0c 24             	mov    %ecx,(%esp)
  10626d:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  106274:	00 
  106275:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10627b:	e8 c0 fa ff ff       	call   105d40 <vfs_open>
  106280:	89 45 c4             	mov    %eax,-0x3c(%ebp)

    if(!handle) {
  106283:	81 7d c4 00 00 00 00 	cmpl   $0x0,-0x3c(%ebp)
  10628a:	0f 85 23 00 00 00    	jne    1062b3 <vfs_exec+0x1a3>
  106290:	b8 02 00 00 00       	mov    $0x2,%eax
        vfs_set_error(PE_PERM_DENIED);
  106295:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  10629c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  1062a2:	e8 79 04 00 00       	call   106720 <vfs_set_error>
        return 0;
  1062a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1062ae:	e9 52 04 00 00       	jmp    106705 <vfs_exec+0x5f5>
    }

    uint32_t size = vfs_available(handle);
  1062b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1062b6:	89 04 24             	mov    %eax,(%esp)
  1062b9:	e8 52 fd ff ff       	call   106010 <vfs_available>
  1062be:	89 45 c0             	mov    %eax,-0x40(%ebp)
    if(size == 0) {
  1062c1:	81 7d c0 00 00 00 00 	cmpl   $0x0,-0x40(%ebp)
  1062c8:	0f 85 23 00 00 00    	jne    1062f1 <vfs_exec+0x1e1>
  1062ce:	b8 03 00 00 00       	mov    $0x3,%eax
        vfs_set_error(PE_CORRUPT_FILE);
  1062d3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1062da:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  1062e0:	e8 3b 04 00 00       	call   106720 <vfs_set_error>
        return 0;
  1062e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1062ec:	e9 14 04 00 00       	jmp    106705 <vfs_exec+0x5f5>
    }

    void* modsrc = malloc(size);
  1062f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1062f4:	89 04 24             	mov    %eax,(%esp)
  1062f7:	e8 84 eb ff ff       	call   104e80 <malloc>
  1062fc:	b9 01 00 00 00       	mov    $0x1,%ecx
  106301:	89 45 bc             	mov    %eax,-0x44(%ebp)

    uint32_t res = vfs_read(handle, modsrc, size, 1);
  106304:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  106307:	8b 55 bc             	mov    -0x44(%ebp),%edx
  10630a:	8b 75 c0             	mov    -0x40(%ebp),%esi
  10630d:	89 04 24             	mov    %eax,(%esp)
  106310:	89 54 24 04          	mov    %edx,0x4(%esp)
  106314:	89 74 24 08          	mov    %esi,0x8(%esp)
  106318:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10631f:	00 
  106320:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  106326:	e8 e5 fa ff ff       	call   105e10 <vfs_read>
  10632b:	89 45 b8             	mov    %eax,-0x48(%ebp)

    if(res != RW_OK) {
  10632e:	81 7d b8 00 00 00 00 	cmpl   $0x0,-0x48(%ebp)
  106335:	0f 84 2e 00 00 00    	je     106369 <vfs_exec+0x259>
        free(modsrc);
  10633b:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10633e:	89 04 24             	mov    %eax,(%esp)
  106341:	e8 0a ef ff ff       	call   105250 <free>
  106346:	b8 04 00 00 00       	mov    $0x4,%eax
        vfs_set_error(PE_FILESYSTEM);
  10634b:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  106352:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  106358:	e8 c3 03 00 00       	call   106720 <vfs_set_error>
        return 0;
  10635d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  106364:	e9 9c 03 00 00       	jmp    106705 <vfs_exec+0x5f5>
    }

    uint32_t old_pdir = vmm_get_current_pagedir();
  106369:	e8 72 0a 00 00       	call   106de0 <vmm_get_current_pagedir>
  10636e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

    //**********************************************************************************************************
    vmm_activate_pagedir(elf_mod_pdir);
  106371:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106374:	89 04 24             	mov    %eax,(%esp)
  106377:	e8 34 16 00 00       	call   1079b0 <vmm_activate_pagedir>

    struct elf_header* header = modsrc;
  10637c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10637f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    struct elf_program_header* ph;

    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  106382:	8b 45 b0             	mov    -0x50(%ebp),%eax
  106385:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  10638b:	0f 84 2e 00 00 00    	je     1063bf <vfs_exec+0x2af>
        free(modsrc);
  106391:	8b 45 bc             	mov    -0x44(%ebp),%eax
  106394:	89 04 24             	mov    %eax,(%esp)
  106397:	e8 b4 ee ff ff       	call   105250 <free>
  10639c:	b8 03 00 00 00       	mov    $0x3,%eax
        vfs_set_error(PE_CORRUPT_FILE);
  1063a1:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1063a8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1063ae:	e8 6d 03 00 00       	call   106720 <vfs_set_error>
        return 0;
  1063b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1063ba:	e9 46 03 00 00       	jmp    106705 <vfs_exec+0x5f5>
    }

    void* elf_mod_entry = (void*) (header->entry);
  1063bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1063c2:	8b 40 18             	mov    0x18(%eax),%eax
  1063c5:	89 45 a8             	mov    %eax,-0x58(%ebp)

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  1063c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1063cb:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  1063ce:	03 41 1c             	add    0x1c(%ecx),%eax
  1063d1:	89 45 ac             	mov    %eax,-0x54(%ebp)

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  1063d4:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  1063db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1063de:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  1063e1:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  1063e5:	39 c8                	cmp    %ecx,%eax
  1063e7:	0f 83 bb 00 00 00    	jae    1064a8 <vfs_exec+0x398>
        void* dest = (void*) ph->virt_addr;
  1063ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1063f0:	8b 40 08             	mov    0x8(%eax),%eax
  1063f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
        void* src = ((char*) header) + ph->offset;
  1063f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1063f9:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1063fc:	03 41 04             	add    0x4(%ecx),%eax
  1063ff:	89 45 9c             	mov    %eax,-0x64(%ebp)

        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  106402:	8b 45 ac             	mov    -0x54(%ebp),%eax
  106405:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  10640b:	0f 84 05 00 00 00    	je     106416 <vfs_exec+0x306>
            continue;
  106411:	e9 77 00 00 00       	jmp    10648d <vfs_exec+0x37d>
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  106416:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
  10641d:	8b 45 98             	mov    -0x68(%ebp),%eax
  106420:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  106423:	3b 41 14             	cmp    0x14(%ecx),%eax
  106426:	0f 83 45 00 00 00    	jae    106471 <vfs_exec+0x361>
            vmm_free(dest + offset);
  10642c:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10642f:	03 45 98             	add    -0x68(%ebp),%eax
  106432:	89 04 24             	mov    %eax,(%esp)
  106435:	e8 c6 0e 00 00       	call   107300 <vmm_free>
  10643a:	b8 00 00 00 00       	mov    $0x0,%eax
            vmm_alloc_addr(dest + offset, 0);
  10643f:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  106442:	03 4d 98             	add    -0x68(%ebp),%ecx
  106445:	89 0c 24             	mov    %ecx,(%esp)
  106448:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10644f:	00 
  106450:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  106456:	e8 55 14 00 00       	call   1078b0 <vmm_alloc_addr>
  10645b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  106461:	8b 45 98             	mov    -0x68(%ebp),%eax
  106464:	05 00 10 00 00       	add    $0x1000,%eax
  106469:	89 45 98             	mov    %eax,-0x68(%ebp)
  10646c:	e9 ac ff ff ff       	jmp    10641d <vfs_exec+0x30d>
            vmm_free(dest + offset);
            vmm_alloc_addr(dest + offset, 0);
        }

        memcpy(dest, src, ph->file_size);
  106471:	8b 45 a0             	mov    -0x60(%ebp),%eax
  106474:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  106477:	8b 55 ac             	mov    -0x54(%ebp),%edx
  10647a:	8b 52 10             	mov    0x10(%edx),%edx
  10647d:	89 04 24             	mov    %eax,(%esp)
  106480:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106484:	89 54 24 08          	mov    %edx,0x8(%esp)
  106488:	e8 c3 f0 ff ff       	call   105550 <memcpy>

    void* elf_mod_entry = (void*) (header->entry);

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  10648d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  106490:	05 01 00 00 00       	add    $0x1,%eax
  106495:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  106498:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10649b:	05 20 00 00 00       	add    $0x20,%eax
  1064a0:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1064a3:	e9 33 ff ff ff       	jmp    1063db <vfs_exec+0x2cb>
  1064a8:	b8 01 00 00 00       	mov    $0x1,%eax

        memcpy(dest, src, ph->file_size);
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);
  1064ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1064b4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  1064ba:	e8 c1 11 00 00       	call   107680 <vmm_alloc_ucont>
  1064bf:	89 45 94             	mov    %eax,-0x6c(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  1064c2:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  1064c9:	8b 45 90             	mov    -0x70(%ebp),%eax
  1064cc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  1064cf:	0f 83 54 00 00 00    	jae    106529 <vfs_exec+0x419>
  1064d5:	b8 01 00 00 00       	mov    $0x1,%eax
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
  1064da:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1064e1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1064e7:	e8 94 11 00 00       	call   107680 <vmm_alloc_ucont>
  1064ec:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  1064ef:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1064f2:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(usargs[i], kargs[i]);
  1064f5:	8b 45 90             	mov    -0x70(%ebp),%eax
  1064f8:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1064fb:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1064fe:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  106501:	8b 55 cc             	mov    -0x34(%ebp),%edx
  106504:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106507:	89 e2                	mov    %esp,%edx
  106509:	89 4a 04             	mov    %ecx,0x4(%edx)
  10650c:	89 02                	mov    %eax,(%edx)
  10650e:	e8 9d f2 ff ff       	call   1057b0 <strcpy>
  106513:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);

    for(uint32_t i = 0; i < argc; i++) {
  106519:	8b 45 90             	mov    -0x70(%ebp),%eax
  10651c:	05 01 00 00 00       	add    $0x1,%eax
  106521:	89 45 90             	mov    %eax,-0x70(%ebp)
  106524:	e9 a0 ff ff ff       	jmp    1064c9 <vfs_exec+0x3b9>
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
        strcpy(usargs[i], kargs[i]);
    }

    usargs[argc] = 0;
  106529:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10652c:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10652f:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)

    struct task* task = init_task(elf_mod_pdir, elf_mod_entry);
  106536:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106539:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10653c:	89 04 24             	mov    %eax,(%esp)
  10653f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106543:	e8 e8 e0 ff ff       	call   104630 <init_task>
  106548:	89 45 8c             	mov    %eax,-0x74(%ebp)
    if(get_current_task() != 0) {
  10654b:	e8 e0 dc ff ff       	call   104230 <get_current_task>
  106550:	3d 00 00 00 00       	cmp    $0x0,%eax
  106555:	0f 84 38 00 00 00    	je     106593 <vfs_exec+0x483>
        task->stdin = get_current_task()->stdin;
  10655b:	e8 d0 dc ff ff       	call   104230 <get_current_task>
  106560:	8b 40 38             	mov    0x38(%eax),%eax
  106563:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106566:	89 41 38             	mov    %eax,0x38(%ecx)
        task->stdout = get_current_task()->stdout;
  106569:	e8 c2 dc ff ff       	call   104230 <get_current_task>
  10656e:	8b 40 30             	mov    0x30(%eax),%eax
  106571:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106574:	89 41 30             	mov    %eax,0x30(%ecx)
        task->stderr = get_current_task()->stderr;
  106577:	e8 b4 dc ff ff       	call   104230 <get_current_task>
  10657c:	8b 40 34             	mov    0x34(%eax),%eax
  10657f:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106582:	89 41 34             	mov    %eax,0x34(%ecx)
        task->execPath = get_current_task()->execPath;
  106585:	e8 a6 dc ff ff       	call   104230 <get_current_task>
  10658a:	8b 40 28             	mov    0x28(%eax),%eax
  10658d:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106590:	89 41 28             	mov    %eax,0x28(%ecx)
    }

    if(execPath != 0) {
  106593:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  10659a:	0f 84 09 00 00 00    	je     1065a9 <vfs_exec+0x499>
        task->execPath = execPath;
  1065a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1065a3:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1065a6:	89 41 28             	mov    %eax,0x28(%ecx)
    }

    if(stdin != 0) {
  1065a9:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1065b0:	0f 84 57 00 00 00    	je     10660d <vfs_exec+0x4fd>
        if(vfs_exists(stdin)) {
  1065b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1065b9:	89 04 24             	mov    %eax,(%esp)
  1065bc:	e8 bf fa ff ff       	call   106080 <vfs_exists>
  1065c1:	3d 00 00 00 00       	cmp    $0x0,%eax
  1065c6:	0f 84 3c 00 00 00    	je     106608 <vfs_exec+0x4f8>
  1065cc:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stdin, FM_READ);
  1065d1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1065d4:	89 0c 24             	mov    %ecx,(%esp)
  1065d7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1065de:	00 
  1065df:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  1065e5:	e8 56 f7 ff ff       	call   105d40 <vfs_open>
  1065ea:	89 45 88             	mov    %eax,-0x78(%ebp)
            if(f) task->stdin = f;
  1065ed:	81 7d 88 00 00 00 00 	cmpl   $0x0,-0x78(%ebp)
  1065f4:	0f 84 09 00 00 00    	je     106603 <vfs_exec+0x4f3>
  1065fa:	8b 45 88             	mov    -0x78(%ebp),%eax
  1065fd:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106600:	89 41 38             	mov    %eax,0x38(%ecx)
        }
  106603:	e9 00 00 00 00       	jmp    106608 <vfs_exec+0x4f8>
    }
  106608:	e9 00 00 00 00       	jmp    10660d <vfs_exec+0x4fd>

    if(stdout != 0) {
  10660d:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  106614:	0f 84 57 00 00 00    	je     106671 <vfs_exec+0x561>
        if(vfs_exists(stdout)) {
  10661a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10661d:	89 04 24             	mov    %eax,(%esp)
  106620:	e8 5b fa ff ff       	call   106080 <vfs_exists>
  106625:	3d 00 00 00 00       	cmp    $0x0,%eax
  10662a:	0f 84 3c 00 00 00    	je     10666c <vfs_exec+0x55c>
  106630:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stdout, FM_READ);
  106635:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  106638:	89 0c 24             	mov    %ecx,(%esp)
  10663b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  106642:	00 
  106643:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  106649:	e8 f2 f6 ff ff       	call   105d40 <vfs_open>
  10664e:	89 45 84             	mov    %eax,-0x7c(%ebp)
            if(f) task->stdout = f;
  106651:	81 7d 84 00 00 00 00 	cmpl   $0x0,-0x7c(%ebp)
  106658:	0f 84 09 00 00 00    	je     106667 <vfs_exec+0x557>
  10665e:	8b 45 84             	mov    -0x7c(%ebp),%eax
  106661:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  106664:	89 41 30             	mov    %eax,0x30(%ecx)
        }
  106667:	e9 00 00 00 00       	jmp    10666c <vfs_exec+0x55c>
    }
  10666c:	e9 00 00 00 00       	jmp    106671 <vfs_exec+0x561>

    if(stderr != 0) {
  106671:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  106678:	0f 84 57 00 00 00    	je     1066d5 <vfs_exec+0x5c5>
        if(vfs_exists(stderr)) {
  10667e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106681:	89 04 24             	mov    %eax,(%esp)
  106684:	e8 f7 f9 ff ff       	call   106080 <vfs_exists>
  106689:	3d 00 00 00 00       	cmp    $0x0,%eax
  10668e:	0f 84 3c 00 00 00    	je     1066d0 <vfs_exec+0x5c0>
  106694:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stderr, FM_READ);
  106699:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10669c:	89 0c 24             	mov    %ecx,(%esp)
  10669f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1066a6:	00 
  1066a7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  1066ad:	e8 8e f6 ff ff       	call   105d40 <vfs_open>
  1066b2:	89 45 80             	mov    %eax,-0x80(%ebp)
            if(f) task->stderr = f;
  1066b5:	81 7d 80 00 00 00 00 	cmpl   $0x0,-0x80(%ebp)
  1066bc:	0f 84 09 00 00 00    	je     1066cb <vfs_exec+0x5bb>
  1066c2:	8b 45 80             	mov    -0x80(%ebp),%eax
  1066c5:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1066c8:	89 41 34             	mov    %eax,0x34(%ecx)
        }
  1066cb:	e9 00 00 00 00       	jmp    1066d0 <vfs_exec+0x5c0>
    }
  1066d0:	e9 00 00 00 00       	jmp    1066d5 <vfs_exec+0x5c5>


    //TODO change stdio if requested and free kargs

    task->args = usargs;
  1066d5:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1066d8:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1066db:	89 41 20             	mov    %eax,0x20(%ecx)
    task->filePath = path;
  1066de:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1066e1:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1066e4:	89 41 24             	mov    %eax,0x24(%ecx)

    vmm_activate_pagedir(old_pdir);
  1066e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  1066ea:	89 04 24             	mov    %eax,(%esp)
  1066ed:	e8 be 12 00 00       	call   1079b0 <vmm_activate_pagedir>

    free(modsrc);
  1066f2:	8b 45 bc             	mov    -0x44(%ebp),%eax
  1066f5:	89 04 24             	mov    %eax,(%esp)
  1066f8:	e8 53 eb ff ff       	call   105250 <free>

    return task->PID;
  1066fd:	8b 45 8c             	mov    -0x74(%ebp),%eax
  106700:	8b 00                	mov    (%eax),%eax
  106702:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  106705:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106708:	81 c4 cc 00 00 00    	add    $0xcc,%esp
  10670e:	5e                   	pop    %esi
  10670f:	5f                   	pop    %edi
  106710:	5b                   	pop    %ebx
  106711:	5d                   	pop    %ebp
  106712:	c3                   	ret    
  106713:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10671a:	84 00 00 00 00 00 

00106720 <vfs_set_error>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static void vfs_set_error(uint32_t code) {
  106720:	55                   	push   %ebp
  106721:	89 e5                	mov    %esp,%ebp
  106723:	83 ec 08             	sub    $0x8,%esp
  106726:	8b 45 08             	mov    0x8(%ebp),%eax
  106729:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(get_current_task()) {
  10672c:	e8 ff da ff ff       	call   104230 <get_current_task>
  106731:	3d 00 00 00 00       	cmp    $0x0,%eax
  106736:	0f 84 28 00 00 00    	je     106764 <vfs_set_error+0x44>
        if(get_current_task()->vfserr == PE_NO_ERROR) {
  10673c:	e8 ef da ff ff       	call   104230 <get_current_task>
  106741:	81 78 2c 00 00 00 00 	cmpl   $0x0,0x2c(%eax)
  106748:	0f 85 11 00 00 00    	jne    10675f <vfs_set_error+0x3f>
            get_current_task()->vfserr = code;
  10674e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106751:	89 45 f8             	mov    %eax,-0x8(%ebp)
  106754:	e8 d7 da ff ff       	call   104230 <get_current_task>
  106759:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10675c:	89 48 2c             	mov    %ecx,0x2c(%eax)
        }
    }
  10675f:	e9 00 00 00 00       	jmp    106764 <vfs_set_error+0x44>
}
  106764:	83 c4 08             	add    $0x8,%esp
  106767:	5d                   	pop    %ebp
  106768:	c3                   	ret    
  106769:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00106770 <vfs_resolve_path>:
    free(modsrc);

    return task->PID;
}

char* vfs_resolve_path(char* path) {
  106770:	55                   	push   %ebp
  106771:	89 e5                	mov    %esp,%ebp
  106773:	83 ec 18             	sub    $0x18,%esp
  106776:	8b 45 08             	mov    0x8(%ebp),%eax
  106779:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_node* node = vfs_get_node(path);
  10677c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10677f:	89 04 24             	mov    %eax,(%esp)
  106782:	e8 89 f5 ff ff       	call   105d10 <vfs_get_node>
  106787:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(node == 0) return 0;
  10678a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  106791:	0f 85 0c 00 00 00    	jne    1067a3 <vfs_resolve_path+0x33>
  106797:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10679e:	e9 0e 00 00 00       	jmp    1067b1 <vfs_resolve_path+0x41>
    return vfs_construct_absolute_path_for_node(node);
  1067a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1067a6:	89 04 24             	mov    %eax,(%esp)
  1067a9:	e8 12 00 00 00       	call   1067c0 <vfs_construct_absolute_path_for_node>
  1067ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1067b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1067b4:	83 c4 18             	add    $0x18,%esp
  1067b7:	5d                   	pop    %ebp
  1067b8:	c3                   	ret    
  1067b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

001067c0 <vfs_construct_absolute_path_for_node>:
    }
}

char capfn_buf[513];

static char* vfs_construct_absolute_path_for_node(struct res_node* node) {
  1067c0:	55                   	push   %ebp
  1067c1:	89 e5                	mov    %esp,%ebp
  1067c3:	83 ec 18             	sub    $0x18,%esp
  1067c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1067c9:	8d 0d 98 a8 18 00    	lea    0x18a898,%ecx
  1067cf:	81 c1 ff 01 00 00    	add    $0x1ff,%ecx
  1067d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    capfn_buf[512] = '\0';
  1067d8:	c6 05 98 aa 18 00 00 	movb   $0x0,0x18aa98
    char* out =  &(capfn_buf[511]);
  1067df:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    *out = '/';
  1067e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1067e5:	c6 00 2f             	movb   $0x2f,(%eax)

    while(node != root) {
  1067e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1067eb:	3b 05 4c a4 10 00    	cmp    0x10a44c,%eax
  1067f1:	0f 84 59 00 00 00    	je     106850 <vfs_construct_absolute_path_for_node+0x90>
  1067f7:	b8 00 00 00 00       	mov    $0x0,%eax
        out -= strlen(node->name);
  1067fc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1067ff:	89 e2                	mov    %esp,%edx
  106801:	89 0a                	mov    %ecx,(%edx)
  106803:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106806:	e8 35 ef ff ff       	call   105740 <strlen>
  10680b:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10680e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  106811:	29 c2                	sub    %eax,%edx
  106813:	01 d1                	add    %edx,%ecx
  106815:	89 4d f8             	mov    %ecx,-0x8(%ebp)
        strcpy(out, node->name);
  106818:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10681b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10681e:	89 e2                	mov    %esp,%edx
  106820:	89 4a 04             	mov    %ecx,0x4(%edx)
  106823:	89 02                	mov    %eax,(%edx)
  106825:	e8 86 ef ff ff       	call   1057b0 <strcpy>
        *--out = '/';
  10682a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10682d:	89 ca                	mov    %ecx,%edx
  10682f:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  106835:	89 55 f8             	mov    %edx,-0x8(%ebp)
  106838:	c6 41 ff 2f          	movb   $0x2f,-0x1(%ecx)

        node = node->parent;
  10683c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10683f:	8b 89 0c 01 00 00    	mov    0x10c(%ecx),%ecx
  106845:	89 4d fc             	mov    %ecx,-0x4(%ebp)
    }
  106848:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10684b:	e9 98 ff ff ff       	jmp    1067e8 <vfs_construct_absolute_path_for_node+0x28>

    return strclone(out);
  106850:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106853:	89 04 24             	mov    %eax,(%esp)
  106856:	e8 b5 ef ff ff       	call   105810 <strclone>
  10685b:	83 c4 18             	add    $0x18,%esp
  10685e:	5d                   	pop    %ebp
  10685f:	c3                   	ret    

00106860 <vfs_init_root>:
    struct res_node* node = vfs_get_node(path);
    if(node == 0) return 0;
    return vfs_construct_absolute_path_for_node(node);
}

void vfs_init_root() {
  106860:	55                   	push   %ebp
  106861:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  106863:	83 ec 18             	sub    $0x18,%esp
  106866:	81 3d 4c a4 10 00 00 	cmpl   $0x0,0x10a44c
  10686d:	00 00 00 
  106870:	0f 85 6f 00 00 00    	jne    1068e5 <vfs_init_root+0x85>
  106876:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  10687b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  106882:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106885:	e8 f6 e5 ff ff       	call   104e80 <malloc>
  10688a:	a3 4c a4 10 00       	mov    %eax,0x10a44c
        root->next = 0;
  10688f:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106894:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  10689b:	00 00 00 
        root->parent = 0;
  10689e:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  1068a3:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  1068aa:	00 00 00 
        strcpy(root->name, "$");
  1068ad:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  1068b2:	89 e1                	mov    %esp,%ecx
  1068b4:	89 01                	mov    %eax,(%ecx)
  1068b6:	c7 41 04 72 96 10 00 	movl   $0x109672,0x4(%ecx)
  1068bd:	e8 ee ee ff ff       	call   1057b0 <strcpy>
        root->res_ptr = 0;
  1068c2:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  1068c8:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  1068cf:	00 00 00 
        root->res_type = RES_SUBDIR;
  1068d2:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  1068d8:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  1068df:	00 00 00 
  1068e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  1068e5:	83 c4 18             	add    $0x18,%esp
  1068e8:	5d                   	pop    %ebp
  1068e9:	c3                   	ret    
  1068ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001068f0 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  1068f0:	55                   	push   %ebp
  1068f1:	89 e5                	mov    %esp,%ebp
  1068f3:	56                   	push   %esi
  1068f4:	83 ec 24             	sub    $0x24,%esp
  1068f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1068fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  1068fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106900:	89 04 24             	mov    %eax,(%esp)
  106903:	e8 08 f4 ff ff       	call   105d10 <vfs_get_node>
  106908:	a3 60 a4 10 00       	mov    %eax,0x10a460
    node = node->res_ptr;
  10690d:	a1 60 a4 10 00       	mov    0x10a460,%eax
  106912:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106918:	a3 60 a4 10 00       	mov    %eax,0x10a460

    while(node != 0) {
  10691d:	81 3d 60 a4 10 00 00 	cmpl   $0x0,0x10a460
  106924:	00 00 00 
  106927:	0f 84 90 00 00 00    	je     1069bd <vfs_debug_ls+0xcd>
  10692d:	8d 05 74 96 10 00    	lea    0x109674,%eax
        char* type = "N/A";
  106933:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  106936:	a1 60 a4 10 00       	mov    0x10a460,%eax
  10693b:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  106942:	00 00 00 
  106945:	0f 85 09 00 00 00    	jne    106954 <vfs_debug_ls+0x64>
  10694b:	8d 05 78 96 10 00    	lea    0x109678,%eax
            type = "DIR";
  106951:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  106954:	a1 60 a4 10 00       	mov    0x10a460,%eax
  106959:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  106960:	00 00 00 
  106963:	0f 85 14 00 00 00    	jne    10697d <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  106969:	a1 60 a4 10 00       	mov    0x10a460,%eax
  10696e:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106974:	8b 40 04             	mov    0x4(%eax),%eax
  106977:	8b 40 18             	mov    0x18(%eax),%eax
  10697a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10697d:	8d 05 7c 96 10 00    	lea    0x10967c,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  106983:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106986:	8b 15 60 a4 10 00    	mov    0x10a460,%edx
  10698c:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10698f:	89 04 24             	mov    %eax,(%esp)
  106992:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106996:	89 54 24 08          	mov    %edx,0x8(%esp)
  10699a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10699e:	e8 0d 99 ff ff       	call   1002b0 <kprintf>

        node = node->next;
  1069a3:	8b 0d 60 a4 10 00    	mov    0x10a460,%ecx
  1069a9:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  1069af:	89 0d 60 a4 10 00    	mov    %ecx,0x10a460
    }
  1069b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1069b8:	e9 60 ff ff ff       	jmp    10691d <vfs_debug_ls+0x2d>
}
  1069bd:	83 c4 24             	add    $0x24,%esp
  1069c0:	5e                   	pop    %esi
  1069c1:	5d                   	pop    %ebp
  1069c2:	c3                   	ret    
  1069c3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1069ca:	84 00 00 00 00 00 

001069d0 <vfs_get_relative_node>:

    return 1;
}


static struct res_node* vfs_get_relative_node(struct res_node* parent, char* path) {
  1069d0:	55                   	push   %ebp
  1069d1:	89 e5                	mov    %esp,%ebp
  1069d3:	83 ec 38             	sub    $0x38,%esp
  1069d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1069d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1069dc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1069df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* sub;
    struct res_node* child = 0;
  1069e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    if(path == 0) {
  1069e9:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1069f0:	0f 85 20 00 00 00    	jne    106a16 <vfs_get_relative_node+0x46>
  1069f6:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  1069fb:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  106a02:	89 45 e8             	mov    %eax,-0x18(%ebp)
  106a05:	e8 16 fd ff ff       	call   106720 <vfs_set_error>
        return 0;
  106a0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106a11:	e9 1d 01 00 00       	jmp    106b33 <vfs_get_relative_node+0x163>
    }

    if(path[0] == 0) {
  106a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106a19:	0f be 00             	movsbl (%eax),%eax
  106a1c:	3d 00 00 00 00       	cmp    $0x0,%eax
  106a21:	0f 85 20 00 00 00    	jne    106a47 <vfs_get_relative_node+0x77>
  106a27:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  106a2c:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  106a33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  106a36:	e8 e5 fc ff ff       	call   106720 <vfs_set_error>
        return 0;
  106a3b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106a42:	e9 ec 00 00 00       	jmp    106b33 <vfs_get_relative_node+0x163>
  106a47:	8d 05 8c 96 10 00    	lea    0x10968c,%eax
    }

    sub = strtok(path, "/");
  106a4d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106a50:	89 0c 24             	mov    %ecx,(%esp)
  106a53:	89 44 24 04          	mov    %eax,0x4(%esp)
  106a57:	e8 04 ee ff ff       	call   105860 <strtok>
  106a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(sub == NULL) {
  106a5f:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106a66:	0f 85 0b 00 00 00    	jne    106a77 <vfs_get_relative_node+0xa7>
        return parent;
  106a6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106a6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106a72:	e9 bc 00 00 00       	jmp    106b33 <vfs_get_relative_node+0x163>
    }

    if(sub[0] == 0) sub = strtok(0, "/");
  106a77:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106a7a:	0f be 00             	movsbl (%eax),%eax
  106a7d:	3d 00 00 00 00       	cmp    $0x0,%eax
  106a82:	0f 85 21 00 00 00    	jne    106aa9 <vfs_get_relative_node+0xd9>
  106a88:	b8 00 00 00 00       	mov    $0x0,%eax
  106a8d:	8d 0d 8c 96 10 00    	lea    0x10968c,%ecx
  106a93:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  106a9a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106a9e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  106aa1:	e8 ba ed ff ff       	call   105860 <strtok>
  106aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(sub == NULL) {
  106aa9:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106ab0:	0f 85 0b 00 00 00    	jne    106ac1 <vfs_get_relative_node+0xf1>
        return parent;
  106ab6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106ab9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106abc:	e9 72 00 00 00       	jmp    106b33 <vfs_get_relative_node+0x163>
    }

    while (sub != NULL)
  106ac1:	e9 00 00 00 00       	jmp    106ac6 <vfs_get_relative_node+0xf6>
  106ac6:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106acd:	0f 84 5a 00 00 00    	je     106b2d <vfs_get_relative_node+0x15d>
    {
        if(parent == 0) return 0;
  106ad3:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  106ada:	0f 85 0c 00 00 00    	jne    106aec <vfs_get_relative_node+0x11c>
  106ae0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106ae7:	e9 47 00 00 00       	jmp    106b33 <vfs_get_relative_node+0x163>

        child = vfs_find_node(parent, sub);
  106aec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106aef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106af2:	89 04 24             	mov    %eax,(%esp)
  106af5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106af9:	e8 12 01 00 00       	call   106c10 <vfs_find_node>
  106afe:	b9 00 00 00 00       	mov    $0x0,%ecx
  106b03:	8d 15 8c 96 10 00    	lea    0x10968c,%edx
  106b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
        parent = child;
  106b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106b0f:	89 45 f8             	mov    %eax,-0x8(%ebp)

        sub = strtok(0, "/");
  106b12:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  106b19:	89 54 24 04          	mov    %edx,0x4(%esp)
  106b1d:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  106b20:	e8 3b ed ff ff       	call   105860 <strtok>
  106b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  106b28:	e9 99 ff ff ff       	jmp    106ac6 <vfs_get_relative_node+0xf6>

    return child;
  106b2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106b30:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  106b33:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106b36:	83 c4 38             	add    $0x38,%esp
  106b39:	5d                   	pop    %ebp
  106b3a:	c3                   	ret    
  106b3b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00106b40 <vfs_get_current_task_root_node_for_path>:

static struct res_node* vfs_get_current_task_root_node_for_path(char* path) {
  106b40:	55                   	push   %ebp
  106b41:	89 e5                	mov    %esp,%ebp
  106b43:	83 ec 18             	sub    $0x18,%esp
  106b46:	8b 45 08             	mov    0x8(%ebp),%eax
  106b49:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(path == 0 || path[0] == '\0') {
  106b4c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  106b53:	0f 84 11 00 00 00    	je     106b6a <vfs_get_current_task_root_node_for_path+0x2a>
  106b59:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106b5c:	0f be 00             	movsbl (%eax),%eax
  106b5f:	3d 00 00 00 00       	cmp    $0x0,%eax
  106b64:	0f 85 20 00 00 00    	jne    106b8a <vfs_get_current_task_root_node_for_path+0x4a>
  106b6a:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  106b6f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  106b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106b79:	e8 a2 fb ff ff       	call   106720 <vfs_set_error>
        return 0;
  106b7e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106b85:	e9 7c 00 00 00       	jmp    106c06 <vfs_get_current_task_root_node_for_path+0xc6>
    }

    if(path[0] == '/') return root;
  106b8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106b8d:	0f be 00             	movsbl (%eax),%eax
  106b90:	3d 2f 00 00 00       	cmp    $0x2f,%eax
  106b95:	0f 85 0d 00 00 00    	jne    106ba8 <vfs_get_current_task_root_node_for_path+0x68>
  106b9b:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106ba0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106ba3:	e9 5e 00 00 00       	jmp    106c06 <vfs_get_current_task_root_node_for_path+0xc6>
    if(get_current_task() == 0) return root;
  106ba8:	e8 83 d6 ff ff       	call   104230 <get_current_task>
  106bad:	3d 00 00 00 00       	cmp    $0x0,%eax
  106bb2:	0f 85 0d 00 00 00    	jne    106bc5 <vfs_get_current_task_root_node_for_path+0x85>
  106bb8:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106bbd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106bc0:	e9 41 00 00 00       	jmp    106c06 <vfs_get_current_task_root_node_for_path+0xc6>
    if(get_current_task()->execPath == 0) return root;
  106bc5:	e8 66 d6 ff ff       	call   104230 <get_current_task>
  106bca:	81 78 28 00 00 00 00 	cmpl   $0x0,0x28(%eax)
  106bd1:	0f 85 0d 00 00 00    	jne    106be4 <vfs_get_current_task_root_node_for_path+0xa4>
  106bd7:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106bdc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106bdf:	e9 22 00 00 00       	jmp    106c06 <vfs_get_current_task_root_node_for_path+0xc6>

    return vfs_get_relative_node(root, get_current_task()->execPath);
  106be4:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106be9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106bec:	e8 3f d6 ff ff       	call   104230 <get_current_task>
  106bf1:	8b 40 28             	mov    0x28(%eax),%eax
  106bf4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106bf7:	89 0c 24             	mov    %ecx,(%esp)
  106bfa:	89 44 24 04          	mov    %eax,0x4(%esp)
  106bfe:	e8 cd fd ff ff       	call   1069d0 <vfs_get_relative_node>
  106c03:	89 45 fc             	mov    %eax,-0x4(%ebp)

}
  106c06:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106c09:	83 c4 18             	add    $0x18,%esp
  106c0c:	5d                   	pop    %ebp
  106c0d:	c3                   	ret    
  106c0e:	66 90                	xchg   %ax,%ax

00106c10 <vfs_find_node>:
    }

    return strclone(out);
}

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  106c10:	55                   	push   %ebp
  106c11:	89 e5                	mov    %esp,%ebp
  106c13:	83 ec 18             	sub    $0x18,%esp
  106c16:	8b 45 0c             	mov    0xc(%ebp),%eax
  106c19:	8b 4d 08             	mov    0x8(%ebp),%ecx
  106c1c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106c1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(name == 0) return parent;
  106c22:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  106c29:	0f 85 0b 00 00 00    	jne    106c3a <vfs_find_node+0x2a>
  106c2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106c32:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106c35:	e9 ff 00 00 00       	jmp    106d39 <vfs_find_node+0x129>
    if(name[0] == '\0') return parent;
  106c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106c3d:	0f be 00             	movsbl (%eax),%eax
  106c40:	3d 00 00 00 00       	cmp    $0x0,%eax
  106c45:	0f 85 0b 00 00 00    	jne    106c56 <vfs_find_node+0x46>
  106c4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106c4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106c51:	e9 e3 00 00 00       	jmp    106d39 <vfs_find_node+0x129>

    if(!strcmp(name, ".")) return parent;
  106c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106c59:	89 e1                	mov    %esp,%ecx
  106c5b:	89 01                	mov    %eax,(%ecx)
  106c5d:	c7 41 04 e4 92 10 00 	movl   $0x1092e4,0x4(%ecx)
  106c64:	e8 57 ea ff ff       	call   1056c0 <strcmp>
  106c69:	3d 00 00 00 00       	cmp    $0x0,%eax
  106c6e:	0f 85 0b 00 00 00    	jne    106c7f <vfs_find_node+0x6f>
  106c74:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106c77:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106c7a:	e9 ba 00 00 00       	jmp    106d39 <vfs_find_node+0x129>
    if(!strcmp(name, "..")) {
  106c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106c82:	89 e1                	mov    %esp,%ecx
  106c84:	89 01                	mov    %eax,(%ecx)
  106c86:	c7 41 04 e3 92 10 00 	movl   $0x1092e3,0x4(%ecx)
  106c8d:	e8 2e ea ff ff       	call   1056c0 <strcmp>
  106c92:	3d 00 00 00 00       	cmp    $0x0,%eax
  106c97:	0f 85 2b 00 00 00    	jne    106cc8 <vfs_find_node+0xb8>
        if(parent == root) return parent;
  106c9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106ca0:	3b 05 4c a4 10 00    	cmp    0x10a44c,%eax
  106ca6:	0f 85 0b 00 00 00    	jne    106cb7 <vfs_find_node+0xa7>
  106cac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106caf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106cb2:	e9 82 00 00 00       	jmp    106d39 <vfs_find_node+0x129>
        return parent->parent;
  106cb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106cba:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  106cc0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106cc3:	e9 71 00 00 00       	jmp    106d39 <vfs_find_node+0x129>
    }

    if(parent->res_type == RES_SUBDIR) {
  106cc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106ccb:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  106cd2:	00 00 00 
  106cd5:	0f 85 57 00 00 00    	jne    106d32 <vfs_find_node+0x122>
        struct res_node* ptr = parent->res_ptr;
  106cdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106cde:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106ce4:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  106ce7:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106cee:	0f 84 39 00 00 00    	je     106d2d <vfs_find_node+0x11d>
            if(strcmp(name, ptr->name) == 0) {
  106cf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106cf7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106cfa:	89 e2                	mov    %esp,%edx
  106cfc:	89 4a 04             	mov    %ecx,0x4(%edx)
  106cff:	89 02                	mov    %eax,(%edx)
  106d01:	e8 ba e9 ff ff       	call   1056c0 <strcmp>
  106d06:	3d 00 00 00 00       	cmp    $0x0,%eax
  106d0b:	0f 85 0b 00 00 00    	jne    106d1c <vfs_find_node+0x10c>
                return ptr;
  106d11:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106d14:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106d17:	e9 1d 00 00 00       	jmp    106d39 <vfs_find_node+0x129>
            }

            ptr = ptr->next;
  106d1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106d1f:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  106d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  106d28:	e9 ba ff ff ff       	jmp    106ce7 <vfs_find_node+0xd7>
    }
  106d2d:	e9 00 00 00 00       	jmp    106d32 <vfs_find_node+0x122>

    return 0;
  106d32:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  106d39:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106d3c:	83 c4 18             	add    $0x18,%esp
  106d3f:	5d                   	pop    %ebp
  106d40:	c3                   	ret    
  106d41:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  106d48:	0f 1f 84 00 00 00 00 
  106d4f:	00 

00106d50 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  106d50:	55                   	push   %ebp
  106d51:	89 e5                	mov    %esp,%ebp
  106d53:	83 ec 0c             	sub    $0xc,%esp
  106d56:	8b 45 0c             	mov    0xc(%ebp),%eax
  106d59:	8b 4d 08             	mov    0x8(%ebp),%ecx
  106d5c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106d5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  106d62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106d65:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  106d6c:	00 00 00 
  106d6f:	0f 85 0d 00 00 00    	jne    106d82 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  106d75:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106d78:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  106d7f:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  106d82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106d85:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  106d8c:	00 00 00 
  106d8f:	0f 85 36 00 00 00    	jne    106dcb <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  106d95:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106d98:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106d9e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106da1:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  106da7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106daa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106dad:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  106db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106db6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106db9:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  106dbf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106dc6:	e9 07 00 00 00       	jmp    106dd2 <vfs_insert_node+0x82>
    }

    return 1;
  106dcb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  106dd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106dd5:	83 c4 0c             	add    $0xc,%esp
  106dd8:	5d                   	pop    %ebp
  106dd9:	c3                   	ret    
  106dda:	66 90                	xchg   %ax,%ax
  106ddc:	66 90                	xchg   %ax,%ax
  106dde:	66 90                	xchg   %ax,%ax

00106de0 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  106de0:	55                   	push   %ebp
  106de1:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  106de3:	a1 64 a4 10 00       	mov    0x10a464,%eax
  106de8:	5d                   	pop    %ebp
  106de9:	c3                   	ret    
  106dea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00106df0 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir() {
  106df0:	55                   	push   %ebp
  106df1:	89 e5                	mov    %esp,%ebp
  106df3:	83 ec 18             	sub    $0x18,%esp
  106df6:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  106df9:	89 04 24             	mov    %eax,(%esp)
  106dfc:	e8 1f 00 00 00       	call   106e20 <vmm_create_vpdraw>
  106e01:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  106e04:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106e07:	89 04 24             	mov    %eax,(%esp)
  106e0a:	e8 d1 02 00 00       	call   1070e0 <vmm_free_pdptr>

	return phys_pagedir;
  106e0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106e12:	83 c4 18             	add    $0x18,%esp
  106e15:	5d                   	pop    %ebp
  106e16:	c3                   	ret    
  106e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  106e1e:	00 00 

00106e20 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  106e20:	55                   	push   %ebp
  106e21:	89 e5                	mov    %esp,%ebp
  106e23:	53                   	push   %ebx
  106e24:	57                   	push   %edi
  106e25:	56                   	push   %esi
  106e26:	83 ec 4c             	sub    $0x4c,%esp
  106e29:	8b 45 08             	mov    0x8(%ebp),%eax
  106e2c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  106e2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  106e32:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  106e39:	89 0c 24             	mov    %ecx,(%esp)
  106e3c:	e8 6f 04 00 00       	call   1072b0 <vmm_alloc>
  106e41:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  106e44:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  106e47:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  106e4e:	89 0c 24             	mov    %ecx,(%esp)
  106e51:	e8 5a 04 00 00       	call   1072b0 <vmm_alloc>
  106e56:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  106e59:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  106e5b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106e62:	0f 84 08 00 00 00    	je     106e70 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  106e68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106e6b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106e6e:	89 01                	mov    %eax,(%ecx)
  106e70:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  106e75:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  106e7c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  106e7f:	e8 2c 04 00 00       	call   1072b0 <vmm_alloc>
  106e84:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  106e87:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  106e8e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  106e95:	0f 83 25 01 00 00    	jae    106fc0 <vmm_create_vpdraw+0x1a0>
  106e9b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  106e9e:	89 04 24             	mov    %eax,(%esp)
  106ea1:	e8 0a 04 00 00       	call   1072b0 <vmm_alloc>
  106ea6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106ea9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106eac:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  106eaf:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  106eb6:	0f 83 4d 00 00 00    	jae    106f09 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  106ebc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106ebf:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106ec2:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106ec5:	89 04 24             	mov    %eax,(%esp)
  106ec8:	e8 33 04 00 00       	call   107300 <vmm_free>
  106ecd:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  106ed2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106ed5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106ed8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106edb:	8b 55 d8             	mov    -0x28(%ebp),%edx
  106ede:	8b 14 95 9c aa 18 00 	mov    0x18aa9c(,%edx,4),%edx
  106ee5:	89 0c 24             	mov    %ecx,(%esp)
  106ee8:	89 54 24 04          	mov    %edx,0x4(%esp)
  106eec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106ef3:	00 
  106ef4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  106ef7:	e8 84 04 00 00       	call   107380 <map_address_active>
			paddr = kernel_pagetables[i];
  106efc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106eff:	8b 04 85 9c aa 18 00 	mov    0x18aa9c(,%eax,4),%eax
  106f06:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  106f09:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106f0c:	0d 01 00 00 00       	or     $0x1,%eax
  106f11:	0d 02 00 00 00       	or     $0x2,%eax
  106f16:	0d 04 00 00 00       	or     $0x4,%eax
  106f1b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106f1e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106f21:	8b 12                	mov    (%edx),%edx
  106f23:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  106f26:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  106f2d:	0f 82 78 00 00 00    	jb     106fab <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  106f33:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  106f3a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  106f41:	0f 83 5f 00 00 00    	jae    106fa6 <vmm_create_vpdraw+0x186>
  106f47:	b8 04 00 00 00       	mov    $0x4,%eax
  106f4c:	b9 00 00 00 00       	mov    $0x0,%ecx
  106f51:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  106f56:	8b 75 d8             	mov    -0x28(%ebp),%esi
  106f59:	c1 e6 16             	shl    $0x16,%esi
  106f5c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  106f5f:	c1 e7 0c             	shl    $0xc,%edi
  106f62:	01 fe                	add    %edi,%esi
  106f64:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  106f67:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  106f6e:	0f 97 c3             	seta   %bl
  106f71:	84 db                	test   %bl,%bl
  106f73:	0f 44 d1             	cmove  %ecx,%edx
  106f76:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  106f7d:	0f 97 c3             	seta   %bl
  106f80:	84 db                	test   %bl,%bl
  106f82:	0f 44 c1             	cmove  %ecx,%eax
  106f85:	09 c2                	or     %eax,%edx
  106f87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106f8a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106f8d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  106f90:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106f93:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  106f96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106f99:	05 01 00 00 00       	add    $0x1,%eax
  106f9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  106fa1:	e9 94 ff ff ff       	jmp    106f3a <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  106fa6:	e9 00 00 00 00       	jmp    106fab <vmm_create_vpdraw+0x18b>
	}
  106fab:	e9 00 00 00 00       	jmp    106fb0 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  106fb0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106fb3:	05 01 00 00 00       	add    $0x1,%eax
  106fb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106fbb:	e9 ce fe ff ff       	jmp    106e8e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  106fc0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  106fc7:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  106fce:	0f 83 58 00 00 00    	jae    10702c <vmm_create_vpdraw+0x20c>
  106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  106fd9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106fdc:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106fdf:	8b 12                	mov    (%edx),%edx
  106fe1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106fe4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  106fea:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  106fed:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106ff0:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106ff6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  106ff9:	c1 e6 0c             	shl    $0xc,%esi
  106ffc:	01 f2                	add    %esi,%edx
  106ffe:	8b 75 dc             	mov    -0x24(%ebp),%esi
  107001:	89 0c 24             	mov    %ecx,(%esp)
  107004:	89 54 24 04          	mov    %edx,0x4(%esp)
  107008:	89 74 24 08          	mov    %esi,0x8(%esp)
  10700c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  107013:	00 
  107014:	89 45 c0             	mov    %eax,-0x40(%ebp)
  107017:	e8 64 05 00 00       	call   107580 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  10701c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10701f:	05 01 00 00 00       	add    $0x1,%eax
  107024:	89 45 d8             	mov    %eax,-0x28(%ebp)
  107027:	e9 9b ff ff ff       	jmp    106fc7 <vmm_create_vpdraw+0x1a7>
  10702c:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  107031:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  107034:	8b 15 e8 82 10 00    	mov    0x1082e8,%edx
  10703a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10703d:	89 0c 24             	mov    %ecx,(%esp)
  107040:	89 54 24 04          	mov    %edx,0x4(%esp)
  107044:	89 74 24 08          	mov    %esi,0x8(%esp)
  107048:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10704f:	00 
  107050:	89 45 bc             	mov    %eax,-0x44(%ebp)
  107053:	e8 28 05 00 00       	call   107580 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107058:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  10705f:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  107065:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  107068:	0f 83 39 00 00 00    	jae    1070a7 <vmm_create_vpdraw+0x287>
  10706e:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  107073:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  107076:	8b 55 d8             	mov    -0x28(%ebp),%edx
  107079:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10707c:	89 0c 24             	mov    %ecx,(%esp)
  10707f:	89 54 24 04          	mov    %edx,0x4(%esp)
  107083:	89 74 24 08          	mov    %esi,0x8(%esp)
  107087:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10708e:	00 
  10708f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  107092:	e8 e9 04 00 00       	call   107580 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107097:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10709a:	05 00 10 00 00       	add    $0x1000,%eax
  10709f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1070a2:	e9 b8 ff ff ff       	jmp    10705f <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  1070a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1070aa:	8b 00                	mov    (%eax),%eax
  1070ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  1070af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1070b2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1070b5:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  1070b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1070ba:	89 04 24             	mov    %eax,(%esp)
  1070bd:	e8 4e 05 00 00       	call   107610 <vmm_unmap>
	vmm_unmap(context);
  1070c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1070c5:	89 04 24             	mov    %eax,(%esp)
  1070c8:	e8 43 05 00 00       	call   107610 <vmm_unmap>

	return pagedir_ptr;
  1070cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1070d0:	83 c4 4c             	add    $0x4c,%esp
  1070d3:	5e                   	pop    %esi
  1070d4:	5f                   	pop    %edi
  1070d5:	5b                   	pop    %ebx
  1070d6:	5d                   	pop    %ebp
  1070d7:	c3                   	ret    
  1070d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1070df:	00 

001070e0 <vmm_free_pdptr>:
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  1070e0:	55                   	push   %ebp
  1070e1:	89 e5                	mov    %esp,%ebp
  1070e3:	83 ec 18             	sub    $0x18,%esp
  1070e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1070e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  1070ec:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1070f3:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  1070fa:	0f 83 21 00 00 00    	jae    107121 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  107100:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107103:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  107106:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107109:	89 04 24             	mov    %eax,(%esp)
  10710c:	e8 ff 04 00 00       	call   107610 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  107111:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107114:	05 01 00 00 00       	add    $0x1,%eax
  107119:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10711c:	e9 d2 ff ff ff       	jmp    1070f3 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  107121:	8b 45 fc             	mov    -0x4(%ebp),%eax
  107124:	89 04 24             	mov    %eax,(%esp)
  107127:	e8 e4 04 00 00       	call   107610 <vmm_unmap>
}
  10712c:	83 c4 18             	add    $0x18,%esp
  10712f:	5d                   	pop    %ebp
  107130:	c3                   	ret    
  107131:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  107138:	0f 1f 84 00 00 00 00 
  10713f:	00 

00107140 <vmm_free_current_pagetables>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

void vmm_free_current_pagetables() {
  107140:	55                   	push   %ebp
  107141:	89 e5                	mov    %esp,%ebp
  107143:	56                   	push   %esi
  107144:	83 ec 34             	sub    $0x34,%esp
  107147:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t* ppd = vmm_alloc(0);
  10714c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  107153:	89 45 e8             	mov    %eax,-0x18(%ebp)
  107156:	e8 55 01 00 00       	call   1072b0 <vmm_alloc>
  10715b:	b9 00 00 00 00       	mov    $0x0,%ecx
  107160:	89 45 f8             	mov    %eax,-0x8(%ebp)
    uint32_t* ppt = vmm_alloc(0);
  107163:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10716a:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10716d:	e8 3e 01 00 00       	call   1072b0 <vmm_alloc>
  107172:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vmm_free(ppd);
  107175:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107178:	89 04 24             	mov    %eax,(%esp)
  10717b:	e8 80 01 00 00       	call   107300 <vmm_free>
    vmm_free(ppt);
  107180:	8b 45 f4             	mov    -0xc(%ebp),%eax
  107183:	89 04 24             	mov    %eax,(%esp)
  107186:	e8 75 01 00 00       	call   107300 <vmm_free>

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);
  10718b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10718e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  107191:	e8 9a d0 ff ff       	call   104230 <get_current_task>
  107196:	b9 00 00 00 00       	mov    $0x0,%ecx
  10719b:	8b 40 14             	mov    0x14(%eax),%eax
  10719e:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1071a1:	89 14 24             	mov    %edx,(%esp)
  1071a4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1071a8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1071af:	00 
  1071b0:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1071b3:	e8 c8 01 00 00       	call   107380 <map_address_active>

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  1071b8:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
  1071bf:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  1071c6:	0f 83 ca 00 00 00    	jae    107296 <vmm_free_current_pagetables+0x156>
  1071cc:	b8 00 00 00 00       	mov    $0x0,%eax
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);
  1071d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1071d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1071d7:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1071da:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1071dd:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1071e3:	89 0c 24             	mov    %ecx,(%esp)
  1071e6:	89 54 24 04          	mov    %edx,0x4(%esp)
  1071ea:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1071f1:	00 
  1071f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1071f5:	e8 86 01 00 00       	call   107380 <map_address_active>

        for(uint32_t n = 0; n < 1024; n++) {
  1071fa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  107201:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  107208:	0f 83 44 00 00 00    	jae    107252 <vmm_free_current_pagetables+0x112>
            if(ppt[n] & PT_PRESENT) {
  10720e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107211:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  107214:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107217:	25 01 00 00 00       	and    $0x1,%eax
  10721c:	3d 00 00 00 00       	cmp    $0x0,%eax
  107221:	0f 84 16 00 00 00    	je     10723d <vmm_free_current_pagetables+0xfd>

                //kprintf("[exit] should free %x:%d->%x:%d->%x\n", vmm_resolve(ppd), i, ppd[i], n, ppt[n]);

                pmm_free((void*)(ppt[n] & 0xFFFF000));
  107227:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10722a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10722d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107230:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  107235:	89 04 24             	mov    %eax,(%esp)
  107238:	e8 73 bd ff ff       	call   102fb0 <pmm_free>
            }
        }
  10723d:	e9 00 00 00 00       	jmp    107242 <vmm_free_current_pagetables+0x102>
    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);

        for(uint32_t n = 0; n < 1024; n++) {
  107242:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107245:	05 01 00 00 00       	add    $0x1,%eax
  10724a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10724d:	e9 af ff ff ff       	jmp    107201 <vmm_free_current_pagetables+0xc1>

                pmm_free((void*)(ppt[n] & 0xFFFF000));
            }
        }

        if(ppd[i] & PD_PRESENT) {
  107252:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107255:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  107258:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10725b:	25 01 00 00 00       	and    $0x1,%eax
  107260:	3d 00 00 00 00       	cmp    $0x0,%eax
  107265:	0f 84 16 00 00 00    	je     107281 <vmm_free_current_pagetables+0x141>
            pmm_free((void*)(ppd[i] & (~0xFFF)));
  10726b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10726e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  107271:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107274:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  107279:	89 04 24             	mov    %eax,(%esp)
  10727c:	e8 2f bd ff ff       	call   102fb0 <pmm_free>
        }
    }
  107281:	e9 00 00 00 00       	jmp    107286 <vmm_free_current_pagetables+0x146>
    vmm_free(ppd);
    vmm_free(ppt);

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  107286:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107289:	05 01 00 00 00       	add    $0x1,%eax
  10728e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  107291:	e9 29 ff ff ff       	jmp    1071bf <vmm_free_current_pagetables+0x7f>

        if(ppd[i] & PD_PRESENT) {
            pmm_free((void*)(ppd[i] & (~0xFFF)));
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
  107296:	e8 95 cf ff ff       	call   104230 <get_current_task>
  10729b:	8b 40 14             	mov    0x14(%eax),%eax
  10729e:	89 04 24             	mov    %eax,(%esp)
  1072a1:	e8 0a bd ff ff       	call   102fb0 <pmm_free>
}
  1072a6:	83 c4 34             	add    $0x34,%esp
  1072a9:	5e                   	pop    %esi
  1072aa:	5d                   	pop    %ebp
  1072ab:	c3                   	ret    
  1072ac:	0f 1f 40 00          	nopl   0x0(%eax)

001072b0 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  1072b0:	55                   	push   %ebp
  1072b1:	89 e5                	mov    %esp,%ebp
  1072b3:	56                   	push   %esi
  1072b4:	83 ec 24             	sub    $0x24,%esp
  1072b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1072ba:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  1072bf:	ba 00 00 00 20       	mov    $0x20000000,%edx
  1072c4:	be 01 00 00 00       	mov    $0x1,%esi
  1072c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  1072cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1072cf:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1072d6:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  1072dd:	20 
  1072de:	89 44 24 08          	mov    %eax,0x8(%esp)
  1072e2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1072e9:	00 
  1072ea:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1072ed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1072f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1072f3:	e8 d8 03 00 00       	call   1076d0 <vmm_alloc_in_range>
  1072f8:	83 c4 24             	add    $0x24,%esp
  1072fb:	5e                   	pop    %esi
  1072fc:	5d                   	pop    %ebp
  1072fd:	c3                   	ret    
  1072fe:	66 90                	xchg   %ax,%ax

00107300 <vmm_free>:
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  107300:	55                   	push   %ebp
  107301:	89 e5                	mov    %esp,%ebp
  107303:	83 ec 18             	sub    $0x18,%esp
  107306:	8b 45 08             	mov    0x8(%ebp),%eax
  107309:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  10730c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10730f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  107312:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107315:	c1 e8 0c             	shr    $0xc,%eax
  107318:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  10731e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107321:	25 01 02 00 00       	and    $0x201,%eax
  107326:	3d 01 02 00 00       	cmp    $0x201,%eax
  10732b:	0f 85 4a 00 00 00    	jne    10737b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  107331:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107334:	c1 e8 0c             	shr    $0xc,%eax
  107337:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  10733d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107340:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  107345:	89 04 24             	mov    %eax,(%esp)
  107348:	e8 63 bc ff ff       	call   102fb0 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  10734d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107350:	c1 e8 0c             	shr    $0xc,%eax
  107353:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  107359:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10735c:	25 04 00 00 00       	and    $0x4,%eax
  107361:	0d 00 02 00 00       	or     $0x200,%eax
  107366:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  107369:	c1 e9 0c             	shr    $0xc,%ecx
  10736c:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  107372:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  107375:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107378:	0f 01 38             	invlpg (%eax)
	}
}
  10737b:	83 c4 18             	add    $0x18,%esp
  10737e:	5d                   	pop    %ebp
  10737f:	c3                   	ret    

00107380 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  107380:	55                   	push   %ebp
  107381:	89 e5                	mov    %esp,%ebp
  107383:	83 ec 0c             	sub    $0xc,%esp
  107386:	8b 45 10             	mov    0x10(%ebp),%eax
  107389:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10738c:	8b 55 08             	mov    0x8(%ebp),%edx
  10738f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  107392:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  107395:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  107398:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10739b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1073a0:	0d 01 00 00 00       	or     $0x1,%eax
  1073a5:	0d 02 00 00 00       	or     $0x2,%eax
  1073aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1073ad:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  1073b3:	09 c8                	or     %ecx,%eax
  1073b5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1073b8:	c1 e9 0c             	shr    $0xc,%ecx
  1073bb:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  1073c1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1073c4:	81 e1 04 02 00 00    	and    $0x204,%ecx
  1073ca:	09 c8                	or     %ecx,%eax
  1073cc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1073cf:	c1 e9 0c             	shr    $0xc,%ecx
  1073d2:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  1073d8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  1073db:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1073de:	0f 01 38             	invlpg (%eax)
}
  1073e1:	83 c4 0c             	add    $0xc,%esp
  1073e4:	5d                   	pop    %ebp
  1073e5:	c3                   	ret    
  1073e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1073ed:	00 00 00 

001073f0 <vmm_resolve>:
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
}

uint32_t vmm_resolve(void* vaddr) {
  1073f0:	55                   	push   %ebp
  1073f1:	89 e5                	mov    %esp,%ebp
  1073f3:	50                   	push   %eax
  1073f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1073f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  1073fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1073fd:	c1 e8 0c             	shr    $0xc,%eax
  107400:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  107406:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107409:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10740e:	83 c4 04             	add    $0x4,%esp
  107411:	5d                   	pop    %ebp
  107412:	c3                   	ret    
  107413:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10741a:	84 00 00 00 00 00 

00107420 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  107420:	55                   	push   %ebp
  107421:	89 e5                	mov    %esp,%ebp
  107423:	83 ec 38             	sub    $0x38,%esp
  107426:	8b 45 0c             	mov    0xc(%ebp),%eax
  107429:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10742c:	ba 00 00 00 00       	mov    $0x0,%edx
  107431:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  107434:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  107437:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10743a:	c1 e8 16             	shr    $0x16,%eax
  10743d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  107440:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107443:	c1 e8 0c             	shr    $0xc,%eax
  107446:	25 ff 03 00 00       	and    $0x3ff,%eax
  10744b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  10744e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  107455:	89 55 e0             	mov    %edx,-0x20(%ebp)
  107458:	e8 53 fe ff ff       	call   1072b0 <vmm_alloc>
  10745d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  107460:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107463:	89 04 24             	mov    %eax,(%esp)
  107466:	e8 95 fe ff ff       	call   107300 <vmm_free>
  10746b:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  107470:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107473:	8b 55 fc             	mov    -0x4(%ebp),%edx
  107476:	89 0c 24             	mov    %ecx,(%esp)
  107479:	89 54 24 04          	mov    %edx,0x4(%esp)
  10747d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  107484:	00 
  107485:	89 45 dc             	mov    %eax,-0x24(%ebp)
  107488:	e8 f3 fe ff ff       	call   107380 <map_address_active>
  10748d:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  107492:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  107495:	8b 55 ec             	mov    -0x14(%ebp),%edx
  107498:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10749b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1074a1:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  1074a4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1074a7:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1074aa:	89 0c 24             	mov    %ecx,(%esp)
  1074ad:	89 54 24 04          	mov    %edx,0x4(%esp)
  1074b1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1074b8:	00 
  1074b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1074bc:	e8 bf fe ff ff       	call   107380 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  1074c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1074c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1074c7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1074ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1074cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  1074d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1074d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1074da:	83 c4 38             	add    $0x38,%esp
  1074dd:	5d                   	pop    %ebp
  1074de:	c3                   	ret    
  1074df:	90                   	nop

001074e0 <vmm_map_range>:
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  1074e0:	55                   	push   %ebp
  1074e1:	89 e5                	mov    %esp,%ebp
  1074e3:	56                   	push   %esi
  1074e4:	83 ec 24             	sub    $0x24,%esp
  1074e7:	8b 45 14             	mov    0x14(%ebp),%eax
  1074ea:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1074ed:	8b 55 0c             	mov    0xc(%ebp),%edx
  1074f0:	8b 75 08             	mov    0x8(%ebp),%esi
  1074f3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1074f6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1074f9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1074fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  1074ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107502:	25 ff 0f 00 00       	and    $0xfff,%eax
  107507:	3d 00 00 00 00       	cmp    $0x0,%eax
  10750c:	0f 84 05 00 00 00    	je     107517 <vmm_map_range+0x37>
		return;
  107512:	e9 5a 00 00 00       	jmp    107571 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  107517:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10751a:	25 ff 0f 00 00       	and    $0xfff,%eax
  10751f:	3d 00 00 00 00       	cmp    $0x0,%eax
  107524:	0f 84 05 00 00 00    	je     10752f <vmm_map_range+0x4f>
		return;
  10752a:	e9 42 00 00 00       	jmp    107571 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  10752f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  107536:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107539:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10753c:	0f 83 2f 00 00 00    	jae    107571 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  107542:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107545:	03 45 e8             	add    -0x18(%ebp),%eax
  107548:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10754b:	03 4d e8             	add    -0x18(%ebp),%ecx
  10754e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  107551:	89 04 24             	mov    %eax,(%esp)
  107554:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  107558:	89 54 24 08          	mov    %edx,0x8(%esp)
  10755c:	e8 1f fe ff ff       	call   107380 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  107561:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107564:	05 00 10 00 00       	add    $0x1000,%eax
  107569:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10756c:	e9 c5 ff ff ff       	jmp    107536 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  107571:	83 c4 24             	add    $0x24,%esp
  107574:	5e                   	pop    %esi
  107575:	5d                   	pop    %ebp
  107576:	c3                   	ret    
  107577:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10757e:	00 00 

00107580 <map_address_context>:

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  107580:	55                   	push   %ebp
  107581:	89 e5                	mov    %esp,%ebp
  107583:	56                   	push   %esi
  107584:	83 ec 18             	sub    $0x18,%esp
  107587:	8b 45 14             	mov    0x14(%ebp),%eax
  10758a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10758d:	8b 55 0c             	mov    0xc(%ebp),%edx
  107590:	8b 75 08             	mov    0x8(%ebp),%esi
  107593:	89 75 f8             	mov    %esi,-0x8(%ebp)
  107596:	89 55 f4             	mov    %edx,-0xc(%ebp)
  107599:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10759c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  10759f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1075a2:	c1 e8 16             	shr    $0x16,%eax
  1075a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  1075a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1075ab:	c1 e8 0c             	shr    $0xc,%eax
  1075ae:	25 ff 03 00 00       	and    $0x3ff,%eax
  1075b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  1075b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1075b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1075be:	0d 01 00 00 00       	or     $0x1,%eax
  1075c3:	0d 02 00 00 00       	or     $0x2,%eax
  1075c8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1075cb:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  1075d1:	09 c8                	or     %ecx,%eax
  1075d3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1075d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1075d9:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1075dc:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1075df:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1075e5:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1075e8:	81 e1 04 02 00 00    	and    $0x204,%ecx
  1075ee:	09 c8                	or     %ecx,%eax
  1075f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1075f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1075f6:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1075f9:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1075fc:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  107602:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  107605:	83 c4 18             	add    $0x18,%esp
  107608:	5e                   	pop    %esi
  107609:	5d                   	pop    %ebp
  10760a:	c3                   	ret    
  10760b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00107610 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  107610:	55                   	push   %ebp
  107611:	89 e5                	mov    %esp,%ebp
  107613:	83 ec 08             	sub    $0x8,%esp
  107616:	8b 45 08             	mov    0x8(%ebp),%eax
  107619:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  10761c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10761f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  107622:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107625:	c1 e8 0c             	shr    $0xc,%eax
  107628:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  10762e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107631:	25 01 02 00 00       	and    $0x201,%eax
  107636:	3d 01 02 00 00       	cmp    $0x201,%eax
  10763b:	0f 85 2e 00 00 00    	jne    10766f <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  107641:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107644:	c1 e8 0c             	shr    $0xc,%eax
  107647:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  10764d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107650:	25 04 00 00 00       	and    $0x4,%eax
  107655:	0d 00 02 00 00       	or     $0x200,%eax
  10765a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10765d:	c1 e9 0c             	shr    $0xc,%ecx
  107660:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  107666:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  107669:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10766c:	0f 01 38             	invlpg (%eax)
	}
}
  10766f:	83 c4 08             	add    $0x8,%esp
  107672:	5d                   	pop    %ebp
  107673:	c3                   	ret    
  107674:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10767b:	00 00 00 00 00 

00107680 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  107680:	55                   	push   %ebp
  107681:	89 e5                	mov    %esp,%ebp
  107683:	56                   	push   %esi
  107684:	83 ec 24             	sub    $0x24,%esp
  107687:	8b 45 08             	mov    0x8(%ebp),%eax
  10768a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10768f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  107694:	be 00 00 00 00       	mov    $0x0,%esi
  107699:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  10769c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10769f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1076a6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1076ad:	ff 
  1076ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1076b5:	00 
  1076b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1076ba:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1076bd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1076c0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1076c3:	e8 08 00 00 00       	call   1076d0 <vmm_alloc_in_range>
  1076c8:	83 c4 24             	add    $0x24,%esp
  1076cb:	5e                   	pop    %esi
  1076cc:	5d                   	pop    %ebp
  1076cd:	c3                   	ret    
  1076ce:	66 90                	xchg   %ax,%ax

001076d0 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  1076d0:	55                   	push   %ebp
  1076d1:	89 e5                	mov    %esp,%ebp
  1076d3:	56                   	push   %esi
  1076d4:	83 ec 34             	sub    $0x34,%esp
  1076d7:	8b 45 14             	mov    0x14(%ebp),%eax
  1076da:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1076dd:	8b 55 0c             	mov    0xc(%ebp),%edx
  1076e0:	8b 75 08             	mov    0x8(%ebp),%esi
  1076e3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1076e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1076e9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1076ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  1076ef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  1076f6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  1076fd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  107704:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107707:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10770c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10770f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  107712:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  107715:	0f 83 6f 00 00 00    	jae    10778a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  10771b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10771e:	c1 e8 0c             	shr    $0xc,%eax
  107721:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  107727:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10772a:	25 01 02 00 00       	and    $0x201,%eax
  10772f:	3d 00 02 00 00       	cmp    $0x200,%eax
  107734:	0f 85 34 00 00 00    	jne    10776e <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  10773a:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  107741:	0f 85 06 00 00 00    	jne    10774d <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  107747:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10774a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  10774d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  107750:	05 01 00 00 00       	add    $0x1,%eax
  107755:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  107758:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10775b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10775e:	0f 82 05 00 00 00    	jb     107769 <vmm_alloc_in_range+0x99>
				break;
  107764:	e9 21 00 00 00       	jmp    10778a <vmm_alloc_in_range+0xba>
		} else {
  107769:	e9 07 00 00 00       	jmp    107775 <vmm_alloc_in_range+0xa5>
			c = 0;
  10776e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  107775:	e9 00 00 00 00       	jmp    10777a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10777a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10777d:	05 00 10 00 00       	add    $0x1000,%eax
  107782:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  107785:	e9 85 ff ff ff       	jmp    10770f <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  10778a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  107791:	8b 45 e0             	mov    -0x20(%ebp),%eax
  107794:	89 c1                	mov    %eax,%ecx
  107796:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10779c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10779f:	3d 00 00 00 00       	cmp    $0x0,%eax
  1077a4:	0f 84 59 00 00 00    	je     107803 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  1077aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1077ad:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1077b0:	c1 e1 0c             	shl    $0xc,%ecx
  1077b3:	01 c8                	add    %ecx,%eax
  1077b5:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  1077bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1077bf:	0f 85 0b 00 00 00    	jne    1077d0 <vmm_alloc_in_range+0x100>
  1077c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1077c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1077cb:	e9 0d 00 00 00       	jmp    1077dd <vmm_alloc_in_range+0x10d>
  1077d0:	b8 00 00 00 00       	mov    $0x0,%eax
  1077d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1077d8:	e9 00 00 00 00       	jmp    1077dd <vmm_alloc_in_range+0x10d>
  1077dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1077e0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1077e3:	89 0c 24             	mov    %ecx,(%esp)
  1077e6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1077ea:	e8 c1 00 00 00       	call   1078b0 <vmm_alloc_addr>
		off++;
  1077ef:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1077f2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1077f8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  1077fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1077fe:	e9 8e ff ff ff       	jmp    107791 <vmm_alloc_in_range+0xc1>

	return vaddr;
  107803:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107806:	83 c4 34             	add    $0x34,%esp
  107809:	5e                   	pop    %esi
  10780a:	5d                   	pop    %ebp
  10780b:	c3                   	ret    
  10780c:	0f 1f 40 00          	nopl   0x0(%eax)

00107810 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  107810:	55                   	push   %ebp
  107811:	89 e5                	mov    %esp,%ebp
  107813:	56                   	push   %esi
  107814:	83 ec 24             	sub    $0x24,%esp
  107817:	8b 45 08             	mov    0x8(%ebp),%eax
  10781a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10781f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  107824:	be 01 00 00 00       	mov    $0x1,%esi
  107829:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  10782c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10782f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  107836:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10783d:	ff 
  10783e:	89 44 24 08          	mov    %eax,0x8(%esp)
  107842:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  107849:	00 
  10784a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10784d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  107850:	89 55 ec             	mov    %edx,-0x14(%ebp)
  107853:	e8 78 fe ff ff       	call   1076d0 <vmm_alloc_in_range>
  107858:	83 c4 24             	add    $0x24,%esp
  10785b:	5e                   	pop    %esi
  10785c:	5d                   	pop    %ebp
  10785d:	c3                   	ret    
  10785e:	66 90                	xchg   %ax,%ax

00107860 <vmm_alloc_cont>:
}

void* vmm_alloc_cont(uint32_t cont) {
  107860:	55                   	push   %ebp
  107861:	89 e5                	mov    %esp,%ebp
  107863:	56                   	push   %esi
  107864:	83 ec 24             	sub    $0x24,%esp
  107867:	8b 45 08             	mov    0x8(%ebp),%eax
  10786a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10786f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  107874:	be 00 00 00 00       	mov    $0x0,%esi
  107879:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10787c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10787f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  107886:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10788d:	20 
  10788e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  107895:	00 
  107896:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10789a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10789d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1078a0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1078a3:	e8 28 fe ff ff       	call   1076d0 <vmm_alloc_in_range>
  1078a8:	83 c4 24             	add    $0x24,%esp
  1078ab:	5e                   	pop    %esi
  1078ac:	5d                   	pop    %ebp
  1078ad:	c3                   	ret    
  1078ae:	66 90                	xchg   %ax,%ax

001078b0 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  1078b0:	55                   	push   %ebp
  1078b1:	89 e5                	mov    %esp,%ebp
  1078b3:	56                   	push   %esi
  1078b4:	83 ec 34             	sub    $0x34,%esp
  1078b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1078ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1078bd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1078c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  1078c3:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1078ca:	0f 85 34 00 00 00    	jne    107904 <vmm_alloc_addr+0x54>
  1078d0:	8d 05 c0 96 10 00    	lea    0x1096c0,%eax
  1078d6:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  1078db:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1078de:	89 04 24             	mov    %eax,(%esp)
  1078e1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1078e5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1078ec:	00 
  1078ed:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1078f0:	e8 bb 89 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  1078f5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1078fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1078ff:	e9 9b 00 00 00       	jmp    10799f <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  107904:	8b 45 f4             	mov    -0xc(%ebp),%eax
  107907:	c1 e8 0c             	shr    $0xc,%eax
  10790a:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  107910:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107913:	25 01 02 00 00       	and    $0x201,%eax
  107918:	3d 00 02 00 00       	cmp    $0x200,%eax
  10791d:	0f 84 37 00 00 00    	je     10795a <vmm_alloc_addr+0xaa>
  107923:	8d 05 c0 96 10 00    	lea    0x1096c0,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  107929:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10792c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10792f:	c1 ea 0c             	shr    $0xc,%edx
  107932:	8b 35 e4 82 10 00    	mov    0x1082e4,%esi
  107938:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10793b:	89 04 24             	mov    %eax,(%esp)
  10793e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  107942:	89 54 24 08          	mov    %edx,0x8(%esp)
  107946:	e8 65 89 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  10794b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  107952:	89 45 e0             	mov    %eax,-0x20(%ebp)
  107955:	e9 45 00 00 00       	jmp    10799f <vmm_alloc_addr+0xef>
  10795a:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  10795f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  107962:	e8 29 b4 ff ff       	call   102d90 <pmm_alloc>
  107967:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  10796a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10796d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107970:	89 04 24             	mov    %eax,(%esp)
  107973:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  107977:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10797e:	00 
  10797f:	e8 fc f9 ff ff       	call   107380 <map_address_active>

	if (retpaddr != 0)
  107984:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10798b:	0f 84 08 00 00 00    	je     107999 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  107991:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107994:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107997:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  107999:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10799c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10799f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1079a2:	83 c4 34             	add    $0x34,%esp
  1079a5:	5e                   	pop    %esi
  1079a6:	5d                   	pop    %ebp
  1079a7:	c3                   	ret    
  1079a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1079af:	00 

001079b0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1079b0:	55                   	push   %ebp
  1079b1:	89 e5                	mov    %esp,%ebp
  1079b3:	50                   	push   %eax
  1079b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1079b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  1079ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1079bd:	a3 64 a4 10 00       	mov    %eax,0x10a464
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  1079c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1079c5:	0f 22 d8             	mov    %eax,%cr3
}
  1079c8:	83 c4 04             	add    $0x4,%esp
  1079cb:	5d                   	pop    %ebp
  1079cc:	c3                   	ret    
  1079cd:	0f 1f 00             	nopl   (%eax)

001079d0 <vmm_init>:

uint32_t vmm_init(void) {
  1079d0:	55                   	push   %ebp
  1079d1:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  1079d3:	53                   	push   %ebx
  1079d4:	57                   	push   %edi
  1079d5:	56                   	push   %esi
  1079d6:	83 ec 3c             	sub    $0x3c,%esp
  1079d9:	e8 b2 b3 ff ff       	call   102d90 <pmm_alloc>
  1079de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  1079e1:	e8 aa b3 ff ff       	call   102d90 <pmm_alloc>
  1079e6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1079e9:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  1079eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1079f2:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  1079f9:	0f 83 d6 00 00 00    	jae    107ad5 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  1079ff:	e8 8c b3 ff ff       	call   102d90 <pmm_alloc>
  107a04:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107a07:	8b 55 f0             	mov    -0x10(%ebp),%edx
  107a0a:	8b 12                	mov    (%edx),%edx
  107a0c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  107a0f:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  107a16:	0f 83 15 00 00 00    	jae    107a31 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  107a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107a1f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107a22:	8b 09                	mov    (%ecx),%ecx
  107a24:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  107a27:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107a2a:	89 04 8d 9c aa 18 00 	mov    %eax,0x18aa9c(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  107a31:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107a34:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107a37:	8b 09                	mov    (%ecx),%ecx
  107a39:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  107a3c:	81 ca 07 00 00 00    	or     $0x7,%edx
  107a42:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  107a45:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  107a4c:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  107a53:	0f 83 67 00 00 00    	jae    107ac0 <vmm_init+0xf0>
  107a59:	b8 04 00 00 00       	mov    $0x4,%eax
  107a5e:	b9 00 00 00 00       	mov    $0x0,%ecx
  107a63:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  107a68:	8b 75 ec             	mov    -0x14(%ebp),%esi
  107a6b:	c1 e6 16             	shl    $0x16,%esi
  107a6e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  107a71:	c1 e7 0c             	shl    $0xc,%edi
  107a74:	01 fe                	add    %edi,%esi
  107a76:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  107a79:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  107a80:	0f 97 c3             	seta   %bl
  107a83:	84 db                	test   %bl,%bl
  107a85:	0f 44 d1             	cmove  %ecx,%edx
  107a88:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  107a8f:	0f 97 c3             	seta   %bl
  107a92:	84 db                	test   %bl,%bl
  107a94:	0f 44 c1             	cmove  %ecx,%eax
  107a97:	09 c2                	or     %eax,%edx
  107a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107a9c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107a9f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  107aa2:	8b 36                	mov    (%esi),%esi
  107aa4:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  107aa7:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  107aad:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  107ab0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107ab3:	05 01 00 00 00       	add    $0x1,%eax
  107ab8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  107abb:	e9 8c ff ff ff       	jmp    107a4c <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  107ac0:	e9 00 00 00 00       	jmp    107ac5 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  107ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107ac8:	05 01 00 00 00       	add    $0x1,%eax
  107acd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  107ad0:	e9 1d ff ff ff       	jmp    1079f2 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  107ad5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  107adc:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  107ae3:	0f 83 5a 00 00 00    	jae    107b43 <vmm_init+0x173>
  107ae9:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  107aee:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107af1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  107af4:	8b 12                	mov    (%edx),%edx
  107af6:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  107af9:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  107aff:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  107b02:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107b05:	8b 09                	mov    (%ecx),%ecx
  107b07:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  107b0d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  107b10:	c1 e6 0c             	shl    $0xc,%esi
  107b13:	01 f2                	add    %esi,%edx
  107b15:	8b 75 e0             	mov    -0x20(%ebp),%esi
  107b18:	89 0c 24             	mov    %ecx,(%esp)
  107b1b:	89 54 24 04          	mov    %edx,0x4(%esp)
  107b1f:	89 74 24 08          	mov    %esi,0x8(%esp)
  107b23:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  107b2a:	00 
  107b2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  107b2e:	e8 4d fa ff ff       	call   107580 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  107b33:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107b36:	05 01 00 00 00       	add    $0x1,%eax
  107b3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  107b3e:	e9 99 ff ff ff       	jmp    107adc <vmm_init+0x10c>
  107b43:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  107b48:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107b4b:	8b 09                	mov    (%ecx),%ecx
  107b4d:	8b 15 e8 82 10 00    	mov    0x1082e8,%edx
  107b53:	8b 75 f0             	mov    -0x10(%ebp),%esi
  107b56:	89 0c 24             	mov    %ecx,(%esp)
  107b59:	89 54 24 04          	mov    %edx,0x4(%esp)
  107b5d:	89 74 24 08          	mov    %esi,0x8(%esp)
  107b61:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  107b68:	00 
  107b69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  107b6c:	e8 0f fa ff ff       	call   107580 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107b71:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  107b78:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  107b7e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  107b81:	0f 83 3b 00 00 00    	jae    107bc2 <vmm_init+0x1f2>
  107b87:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  107b8c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107b8f:	8b 09                	mov    (%ecx),%ecx
  107b91:	8b 55 ec             	mov    -0x14(%ebp),%edx
  107b94:	8b 75 ec             	mov    -0x14(%ebp),%esi
  107b97:	89 0c 24             	mov    %ecx,(%esp)
  107b9a:	89 54 24 04          	mov    %edx,0x4(%esp)
  107b9e:	89 74 24 08          	mov    %esi,0x8(%esp)
  107ba2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  107ba9:	00 
  107baa:	89 45 d0             	mov    %eax,-0x30(%ebp)
  107bad:	e8 ce f9 ff ff       	call   107580 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107bb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107bb5:	05 00 10 00 00       	add    $0x1000,%eax
  107bba:	89 45 ec             	mov    %eax,-0x14(%ebp)
  107bbd:	e9 b6 ff ff ff       	jmp    107b78 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  107bc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107bc5:	8b 00                	mov    (%eax),%eax
  107bc7:	89 04 24             	mov    %eax,(%esp)
  107bca:	e8 e1 fd ff ff       	call   1079b0 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  107bcf:	0f 20 c0             	mov    %cr0,%eax
  107bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  107bd5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  107bd8:	0d 00 00 00 80       	or     $0x80000000,%eax
  107bdd:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  107be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  107be3:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  107be6:	a1 e8 82 10 00       	mov    0x1082e8,%eax
  107beb:	8b 00                	mov    (%eax),%eax
  107bed:	83 c4 3c             	add    $0x3c,%esp
  107bf0:	5e                   	pop    %esi
  107bf1:	5f                   	pop    %edi
  107bf2:	5b                   	pop    %ebx
  107bf3:	5d                   	pop    %ebp
  107bf4:	c3                   	ret    
  107bf5:	66 90                	xchg   %ax,%ax
  107bf7:	90                   	nop

00107bf8 <_start>:
  107bf8:	bc 68 a4 11 00       	mov    $0x11a468,%esp
  107bfd:	53                   	push   %ebx
  107bfe:	e8 0d 84 ff ff       	call   100010 <init>

00107c03 <_stop>:
  107c03:	fa                   	cli    
  107c04:	f4                   	hlt    
  107c05:	eb fc                	jmp    107c03 <_stop>
