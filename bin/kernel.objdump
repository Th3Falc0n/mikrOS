
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <intr_stub_0-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 6a                	in     $0x6a,%al

0010000c <intr_stub_0>:
  10000c:	6a 00                	push   $0x0
  10000e:	6a 00                	push   $0x0
  100010:	e9 eb 00 00 00       	jmp    100100 <intr_common_handler>

00100015 <intr_stub_1>:
  100015:	6a 00                	push   $0x0
  100017:	6a 01                	push   $0x1
  100019:	e9 e2 00 00 00       	jmp    100100 <intr_common_handler>

0010001e <intr_stub_2>:
  10001e:	6a 00                	push   $0x0
  100020:	6a 02                	push   $0x2
  100022:	e9 d9 00 00 00       	jmp    100100 <intr_common_handler>

00100027 <intr_stub_3>:
  100027:	6a 00                	push   $0x0
  100029:	6a 03                	push   $0x3
  10002b:	e9 d0 00 00 00       	jmp    100100 <intr_common_handler>

00100030 <intr_stub_4>:
  100030:	6a 00                	push   $0x0
  100032:	6a 04                	push   $0x4
  100034:	e9 c7 00 00 00       	jmp    100100 <intr_common_handler>

00100039 <intr_stub_5>:
  100039:	6a 00                	push   $0x0
  10003b:	6a 05                	push   $0x5
  10003d:	e9 be 00 00 00       	jmp    100100 <intr_common_handler>

00100042 <intr_stub_6>:
  100042:	6a 00                	push   $0x0
  100044:	6a 06                	push   $0x6
  100046:	e9 b5 00 00 00       	jmp    100100 <intr_common_handler>

0010004b <intr_stub_7>:
  10004b:	6a 00                	push   $0x0
  10004d:	6a 07                	push   $0x7
  10004f:	e9 ac 00 00 00       	jmp    100100 <intr_common_handler>

00100054 <intr_stub_8>:
  100054:	6a 08                	push   $0x8
  100056:	e9 a5 00 00 00       	jmp    100100 <intr_common_handler>

0010005b <intr_stub_9>:
  10005b:	6a 00                	push   $0x0
  10005d:	6a 09                	push   $0x9
  10005f:	e9 9c 00 00 00       	jmp    100100 <intr_common_handler>

00100064 <intr_stub_10>:
  100064:	6a 0a                	push   $0xa
  100066:	e9 95 00 00 00       	jmp    100100 <intr_common_handler>

0010006b <intr_stub_11>:
  10006b:	6a 0b                	push   $0xb
  10006d:	e9 8e 00 00 00       	jmp    100100 <intr_common_handler>

00100072 <intr_stub_12>:
  100072:	6a 0c                	push   $0xc
  100074:	e9 87 00 00 00       	jmp    100100 <intr_common_handler>

00100079 <intr_stub_13>:
  100079:	6a 0d                	push   $0xd
  10007b:	e9 80 00 00 00       	jmp    100100 <intr_common_handler>

00100080 <intr_stub_14>:
  100080:	6a 0e                	push   $0xe
  100082:	eb 7c                	jmp    100100 <intr_common_handler>

00100084 <intr_stub_15>:
  100084:	6a 00                	push   $0x0
  100086:	6a 0f                	push   $0xf
  100088:	eb 76                	jmp    100100 <intr_common_handler>

0010008a <intr_stub_16>:
  10008a:	6a 00                	push   $0x0
  10008c:	6a 10                	push   $0x10
  10008e:	eb 70                	jmp    100100 <intr_common_handler>

00100090 <intr_stub_17>:
  100090:	6a 11                	push   $0x11
  100092:	eb 6c                	jmp    100100 <intr_common_handler>

00100094 <intr_stub_18>:
  100094:	6a 00                	push   $0x0
  100096:	6a 12                	push   $0x12
  100098:	eb 66                	jmp    100100 <intr_common_handler>

0010009a <intr_stub_32>:
  10009a:	6a 00                	push   $0x0
  10009c:	6a 20                	push   $0x20
  10009e:	eb 60                	jmp    100100 <intr_common_handler>

001000a0 <intr_stub_33>:
  1000a0:	6a 00                	push   $0x0
  1000a2:	6a 21                	push   $0x21
  1000a4:	eb 5a                	jmp    100100 <intr_common_handler>

001000a6 <intr_stub_34>:
  1000a6:	6a 00                	push   $0x0
  1000a8:	6a 22                	push   $0x22
  1000aa:	eb 54                	jmp    100100 <intr_common_handler>

001000ac <intr_stub_35>:
  1000ac:	6a 00                	push   $0x0
  1000ae:	6a 23                	push   $0x23
  1000b0:	eb 4e                	jmp    100100 <intr_common_handler>

001000b2 <intr_stub_36>:
  1000b2:	6a 00                	push   $0x0
  1000b4:	6a 24                	push   $0x24
  1000b6:	eb 48                	jmp    100100 <intr_common_handler>

001000b8 <intr_stub_37>:
  1000b8:	6a 00                	push   $0x0
  1000ba:	6a 25                	push   $0x25
  1000bc:	eb 42                	jmp    100100 <intr_common_handler>

001000be <intr_stub_38>:
  1000be:	6a 00                	push   $0x0
  1000c0:	6a 26                	push   $0x26
  1000c2:	eb 3c                	jmp    100100 <intr_common_handler>

001000c4 <intr_stub_39>:
  1000c4:	6a 00                	push   $0x0
  1000c6:	6a 27                	push   $0x27
  1000c8:	eb 36                	jmp    100100 <intr_common_handler>

001000ca <intr_stub_40>:
  1000ca:	6a 00                	push   $0x0
  1000cc:	6a 28                	push   $0x28
  1000ce:	eb 30                	jmp    100100 <intr_common_handler>

001000d0 <intr_stub_41>:
  1000d0:	6a 00                	push   $0x0
  1000d2:	6a 29                	push   $0x29
  1000d4:	eb 2a                	jmp    100100 <intr_common_handler>

001000d6 <intr_stub_42>:
  1000d6:	6a 00                	push   $0x0
  1000d8:	6a 2a                	push   $0x2a
  1000da:	eb 24                	jmp    100100 <intr_common_handler>

001000dc <intr_stub_43>:
  1000dc:	6a 00                	push   $0x0
  1000de:	6a 2b                	push   $0x2b
  1000e0:	eb 1e                	jmp    100100 <intr_common_handler>

001000e2 <intr_stub_44>:
  1000e2:	6a 00                	push   $0x0
  1000e4:	6a 2c                	push   $0x2c
  1000e6:	eb 18                	jmp    100100 <intr_common_handler>

001000e8 <intr_stub_45>:
  1000e8:	6a 00                	push   $0x0
  1000ea:	6a 2d                	push   $0x2d
  1000ec:	eb 12                	jmp    100100 <intr_common_handler>

001000ee <intr_stub_46>:
  1000ee:	6a 00                	push   $0x0
  1000f0:	6a 2e                	push   $0x2e
  1000f2:	eb 0c                	jmp    100100 <intr_common_handler>

001000f4 <intr_stub_47>:
  1000f4:	6a 00                	push   $0x0
  1000f6:	6a 2f                	push   $0x2f
  1000f8:	eb 06                	jmp    100100 <intr_common_handler>

001000fa <intr_stub_48>:
  1000fa:	6a 00                	push   $0x0
  1000fc:	6a 30                	push   $0x30
  1000fe:	eb 00                	jmp    100100 <intr_common_handler>

00100100 <intr_common_handler>:
  100100:	55                   	push   %ebp
  100101:	57                   	push   %edi
  100102:	56                   	push   %esi
  100103:	52                   	push   %edx
  100104:	51                   	push   %ecx
  100105:	53                   	push   %ebx
  100106:	50                   	push   %eax
  100107:	54                   	push   %esp
  100108:	66 b8 10 00          	mov    $0x10,%ax
  10010c:	8e d8                	mov    %eax,%ds
  10010e:	8e c0                	mov    %eax,%es
  100110:	e8 8c 0e 00 00       	call   100fa1 <handle_interrupt>
  100115:	89 c4                	mov    %eax,%esp
  100117:	66 b8 23 00          	mov    $0x23,%ax
  10011b:	8e d8                	mov    %eax,%ds
  10011d:	8e c0                	mov    %eax,%es
  10011f:	58                   	pop    %eax
  100120:	5b                   	pop    %ebx
  100121:	59                   	pop    %ecx
  100122:	5a                   	pop    %edx
  100123:	5e                   	pop    %esi
  100124:	5f                   	pop    %edi
  100125:	5d                   	pop    %ebp
  100126:	83 c4 08             	add    $0x8,%esp
  100129:	cf                   	iret   
	...

0010012c <_start>:
  10012c:	bc 00 80 11 00       	mov    $0x118000,%esp
  100131:	53                   	push   %ebx
  100132:	e8 05 00 00 00       	call   10013c <init>

00100137 <_stop>:
  100137:	fa                   	cli    
  100138:	f4                   	hlt    
  100139:	eb fc                	jmp    100137 <_stop>
	...

0010013c <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  10013c:	55                   	push   %ebp
  10013d:	89 e5                	mov    %esp,%ebp
  10013f:	83 ec 08             	sub    $0x8,%esp
	clrscr();
  100142:	e8 c9 03 00 00       	call   100510 <clrscr>
	pmm_init(mb_info);
  100147:	83 ec 0c             	sub    $0xc,%esp
  10014a:	ff 75 08             	pushl  0x8(%ebp)
  10014d:	e8 2e 1b 00 00       	call   101c80 <pmm_init>
  100152:	83 c4 10             	add    $0x10,%esp

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100155:	83 ec 08             	sub    $0x8,%esp
  100158:	68 00 70 10 00       	push   $0x107000
  10015d:	68 14 70 10 00       	push   $0x107014
  100162:	e8 06 04 00 00       	call   10056d <kprintf>
  100167:	83 c4 10             	add    $0x10,%esp
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10016a:	83 ec 0c             	sub    $0xc,%esp
  10016d:	68 38 70 10 00       	push   $0x107038
  100172:	e8 f6 03 00 00       	call   10056d <kprintf>
  100177:	83 c4 10             	add    $0x10,%esp

	kprintf("Initializing GDT...\n");
  10017a:	83 ec 0c             	sub    $0xc,%esp
  10017d:	68 77 70 10 00       	push   $0x107077
  100182:	e8 e6 03 00 00       	call   10056d <kprintf>
  100187:	83 c4 10             	add    $0x10,%esp

	init_gdt();
  10018a:	e8 67 07 00 00       	call   1008f6 <init_gdt>

	kprintf("Initializing IDT...\n");
  10018f:	83 ec 0c             	sub    $0xc,%esp
  100192:	68 8c 70 10 00       	push   $0x10708c
  100197:	e8 d1 03 00 00       	call   10056d <kprintf>
  10019c:	83 c4 10             	add    $0x10,%esp

	init_idt();
  10019f:	e8 eb 08 00 00       	call   100a8f <init_idt>

	kprintf("Initializing Kernel...\n");
  1001a4:	83 ec 0c             	sub    $0xc,%esp
  1001a7:	68 a1 70 10 00       	push   $0x1070a1
  1001ac:	e8 bc 03 00 00       	call   10056d <kprintf>
  1001b1:	83 c4 10             	add    $0x10,%esp

	pmm_print_stats();
  1001b4:	e8 54 19 00 00       	call   101b0d <pmm_print_stats>

	kernel_main(mb_info);
  1001b9:	83 ec 0c             	sub    $0xc,%esp
  1001bc:	ff 75 08             	pushl  0x8(%ebp)
  1001bf:	e8 dd 16 00 00       	call   1018a1 <kernel_main>
  1001c4:	83 c4 10             	add    $0x10,%esp

	return;
}
  1001c7:	c9                   	leave  
  1001c8:	c3                   	ret    
  1001c9:	00 00                	add    %al,(%eax)
	...

001001cc <in_cod>:
#include "console.h"
#include "gdt.h"
#include "idt.h"
#include "kernel.h"
#include "multiboot.h"
  1001cc:	55                   	push   %ebp
  1001cd:	89 e5                	mov    %esp,%ebp
#include "pmm.h"
  1001cf:	a1 00 80 12 00       	mov    0x128000,%eax
#include "vfs.h"
  1001d4:	5d                   	pop    %ebp
  1001d5:	c3                   	ret    

001001d6 <show_cod>:

#define _VERSION "alphaUSpaceDev 1.02"
  1001d6:	55                   	push   %ebp
  1001d7:	89 e5                	mov    %esp,%ebp
  1001d9:	83 ec 08             	sub    $0x8,%esp

  1001dc:	c7 05 00 80 12 00 01 	movl   $0x1,0x128000
  1001e3:	00 00 00 
	kprintf("Initializing Kernel...\n");

	pmm_print_stats();

	kernel_main(mb_info);

  1001e6:	83 ec 0c             	sub    $0xc,%esp
  1001e9:	6a 04                	push   $0x4
  1001eb:	e8 67 03 00 00       	call   100557 <setclr>
  1001f0:	83 c4 10             	add    $0x10,%esp
	return;
  1001f3:	83 ec 0c             	sub    $0xc,%esp
  1001f6:	ff 75 0c             	pushl  0xc(%ebp)
  1001f9:	e8 6f 03 00 00       	call   10056d <kprintf>
  1001fe:	83 c4 10             	add    $0x10,%esp
}
  100201:	8b 45 08             	mov    0x8(%ebp),%eax
  100204:	8b 50 20             	mov    0x20(%eax),%edx
  100207:	8b 45 08             	mov    0x8(%ebp),%eax
  10020a:	8b 40 1c             	mov    0x1c(%eax),%eax
  10020d:	83 ec 04             	sub    $0x4,%esp
  100210:	52                   	push   %edx
  100211:	50                   	push   %eax
  100212:	68 bc 70 10 00       	push   $0x1070bc
  100217:	e8 51 03 00 00       	call   10056d <kprintf>
  10021c:	83 c4 10             	add    $0x10,%esp
  10021f:	83 ec 0c             	sub    $0xc,%esp
  100222:	ff 75 08             	pushl  0x8(%ebp)
  100225:	e8 07 00 00 00       	call   100231 <show_dump>
  10022a:	83 c4 10             	add    $0x10,%esp
  10022d:	fa                   	cli    
  10022e:	f4                   	hlt    
  10022f:	eb fc                	jmp    10022d <show_cod+0x57>

00100231 <show_dump>:
  100231:	55                   	push   %ebp
  100232:	89 e5                	mov    %esp,%ebp
  100234:	53                   	push   %ebx
  100235:	83 ec 14             	sub    $0x14,%esp
  100238:	8b 45 08             	mov    0x8(%ebp),%eax
  10023b:	8b 58 0c             	mov    0xc(%eax),%ebx
  10023e:	8b 45 08             	mov    0x8(%ebp),%eax
  100241:	8b 48 08             	mov    0x8(%eax),%ecx
  100244:	8b 45 08             	mov    0x8(%ebp),%eax
  100247:	8b 50 04             	mov    0x4(%eax),%edx
  10024a:	8b 45 08             	mov    0x8(%ebp),%eax
  10024d:	8b 00                	mov    (%eax),%eax
  10024f:	83 ec 0c             	sub    $0xc,%esp
  100252:	53                   	push   %ebx
  100253:	51                   	push   %ecx
  100254:	52                   	push   %edx
  100255:	50                   	push   %eax
  100256:	68 e4 70 10 00       	push   $0x1070e4
  10025b:	e8 0d 03 00 00       	call   10056d <kprintf>
  100260:	83 c4 20             	add    $0x20,%esp
  100263:	8b 45 08             	mov    0x8(%ebp),%eax
  100266:	8b 58 24             	mov    0x24(%eax),%ebx
  100269:	8b 45 08             	mov    0x8(%ebp),%eax
  10026c:	8b 48 18             	mov    0x18(%eax),%ecx
  10026f:	8b 45 08             	mov    0x8(%ebp),%eax
  100272:	8b 50 14             	mov    0x14(%eax),%edx
  100275:	8b 45 08             	mov    0x8(%ebp),%eax
  100278:	8b 40 10             	mov    0x10(%eax),%eax
  10027b:	83 ec 0c             	sub    $0xc,%esp
  10027e:	53                   	push   %ebx
  10027f:	51                   	push   %ecx
  100280:	52                   	push   %edx
  100281:	50                   	push   %eax
  100282:	68 08 71 10 00       	push   $0x107108
  100287:	e8 e1 02 00 00       	call   10056d <kprintf>
  10028c:	83 c4 20             	add    $0x20,%esp
  10028f:	8b 45 08             	mov    0x8(%ebp),%eax
  100292:	8b 58 34             	mov    0x34(%eax),%ebx
  100295:	8b 45 08             	mov    0x8(%ebp),%eax
  100298:	8b 48 30             	mov    0x30(%eax),%ecx
  10029b:	8b 45 08             	mov    0x8(%ebp),%eax
  10029e:	8b 50 2c             	mov    0x2c(%eax),%edx
  1002a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1002a4:	8b 40 28             	mov    0x28(%eax),%eax
  1002a7:	83 ec 0c             	sub    $0xc,%esp
  1002aa:	53                   	push   %ebx
  1002ab:	51                   	push   %ecx
  1002ac:	52                   	push   %edx
  1002ad:	50                   	push   %eax
  1002ae:	68 2c 71 10 00       	push   $0x10712c
  1002b3:	e8 b5 02 00 00       	call   10056d <kprintf>
  1002b8:	83 c4 20             	add    $0x20,%esp
  1002bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1002c2:	0f 20 d0             	mov    %cr2,%eax
  1002c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1002c8:	83 ec 08             	sub    $0x8,%esp
  1002cb:	ff 75 f4             	pushl  -0xc(%ebp)
  1002ce:	68 4e 71 10 00       	push   $0x10714e
  1002d3:	e8 95 02 00 00       	call   10056d <kprintf>
  1002d8:	83 c4 10             	add    $0x10,%esp
  1002db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1002de:	c9                   	leave  
  1002df:	c3                   	ret    

001002e0 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1002e9:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if(in_cod()) {
  1002ec:	e8 db fe ff ff       	call   1001cc <in_cod>
  1002f1:	85 c0                	test   %eax,%eax
  1002f3:	75 79                	jne    10036e <kputc+0x8e>
        goto doKPutc;
    }

    if(get_current_task() != 0) {
  1002f5:	e8 6f 28 00 00       	call   102b69 <get_current_task>
  1002fa:	85 c0                	test   %eax,%eax
  1002fc:	74 61                	je     10035f <kputc+0x7f>
        if(get_current_task()->stdout != 0) {
  1002fe:	e8 66 28 00 00       	call   102b69 <get_current_task>
  100303:	8b 40 30             	mov    0x30(%eax),%eax
  100306:	85 c0                	test   %eax,%eax
  100308:	74 55                	je     10035f <kputc+0x7f>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  10030a:	c6 45 f3 11          	movb   $0x11,-0xd(%ebp)
  10030e:	e8 56 28 00 00       	call   102b69 <get_current_task>
  100313:	8b 40 30             	mov    0x30(%eax),%eax
  100316:	6a 01                	push   $0x1
  100318:	6a 01                	push   $0x1
  10031a:	8d 55 f3             	lea    -0xd(%ebp),%edx
  10031d:	52                   	push   %edx
  10031e:	50                   	push   %eax
  10031f:	e8 7b 3f 00 00       	call   10429f <vfs_write>
  100324:	83 c4 10             	add    $0x10,%esp
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  100327:	e8 3d 28 00 00       	call   102b69 <get_current_task>
  10032c:	8b 40 30             	mov    0x30(%eax),%eax
  10032f:	6a 01                	push   $0x1
  100331:	6a 01                	push   $0x1
  100333:	68 00 60 10 00       	push   $0x106000
  100338:	50                   	push   %eax
  100339:	e8 61 3f 00 00       	call   10429f <vfs_write>
  10033e:	83 c4 10             	add    $0x10,%esp
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  100341:	e8 23 28 00 00       	call   102b69 <get_current_task>
  100346:	8b 40 30             	mov    0x30(%eax),%eax
  100349:	6a 01                	push   $0x1
  10034b:	6a 01                	push   $0x1
  10034d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  100350:	52                   	push   %edx
  100351:	50                   	push   %eax
  100352:	e8 48 3f 00 00       	call   10429f <vfs_write>
  100357:	83 c4 10             	add    $0x10,%esp

            return;
  10035a:	e9 1a 01 00 00       	jmp    100479 <kputc+0x199>
        }
    }

    if(ramfs_vga_writers()) {
  10035f:	e8 06 26 00 00       	call   10296a <ramfs_vga_writers>
  100364:	85 c0                	test   %eax,%eax
  100366:	0f 85 09 01 00 00    	jne    100475 <kputc+0x195>
  10036c:	eb 01                	jmp    10036f <kputc+0x8f>

static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
  10036e:	90                   	nop    
        return;
    }

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  10036f:	8a 45 e4             	mov    -0x1c(%ebp),%al
  100372:	3c 0a                	cmp    $0xa,%al
  100374:	74 0a                	je     100380 <kputc+0xa0>
  100376:	a1 04 80 12 00       	mov    0x128004,%eax
  10037b:	83 f8 4f             	cmp    $0x4f,%eax
  10037e:	7e 15                	jle    100395 <kputc+0xb5>
        x = 0;
  100380:	c7 05 04 80 12 00 00 	movl   $0x0,0x128004
  100387:	00 00 00 
        y++;
  10038a:	a1 08 80 12 00       	mov    0x128008,%eax
  10038f:	40                   	inc    %eax
  100390:	a3 08 80 12 00       	mov    %eax,0x128008
    }

    if (c == '\n') {
  100395:	8a 45 e4             	mov    -0x1c(%ebp),%al
  100398:	3c 0a                	cmp    $0xa,%al
  10039a:	0f 84 d8 00 00 00    	je     100478 <kputc+0x198>
        return;
    }

    if (y > 24) {
  1003a0:	a1 08 80 12 00       	mov    0x128008,%eax
  1003a5:	83 f8 18             	cmp    $0x18,%eax
  1003a8:	7e 5c                	jle    100406 <kputc+0x126>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1003aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1003b1:	eb 22                	jmp    1003d5 <kputc+0xf5>
            video[i] = video[i + 160];
  1003b3:	8b 15 04 60 10 00    	mov    0x106004,%edx
  1003b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003bc:	01 c2                	add    %eax,%edx
  1003be:	a1 04 60 10 00       	mov    0x106004,%eax
  1003c3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003c6:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  1003cc:	01 c8                	add    %ecx,%eax
  1003ce:	8a 00                	mov    (%eax),%al
  1003d0:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1003d2:	ff 45 f4             	incl   -0xc(%ebp)
  1003d5:	81 7d f4 ff 0e 00 00 	cmpl   $0xeff,-0xc(%ebp)
  1003dc:	7e d5                	jle    1003b3 <kputc+0xd3>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1003de:	eb 12                	jmp    1003f2 <kputc+0x112>
            video[i] = 0;
  1003e0:	8b 15 04 60 10 00    	mov    0x106004,%edx
  1003e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003e9:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1003ec:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1003ef:	ff 45 f4             	incl   -0xc(%ebp)
  1003f2:	81 7d f4 9f 0f 00 00 	cmpl   $0xf9f,-0xc(%ebp)
  1003f9:	7e e5                	jle    1003e0 <kputc+0x100>
            video[i] = 0;
        }
        y--;
  1003fb:	a1 08 80 12 00       	mov    0x128008,%eax
  100400:	48                   	dec    %eax
  100401:	a3 08 80 12 00       	mov    %eax,0x128008
    }

    video[2 * (y * 80 + x)] = c;
  100406:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  10040c:	8b 15 08 80 12 00    	mov    0x128008,%edx
  100412:	89 d0                	mov    %edx,%eax
  100414:	c1 e0 02             	shl    $0x2,%eax
  100417:	01 d0                	add    %edx,%eax
  100419:	c1 e0 04             	shl    $0x4,%eax
  10041c:	89 c2                	mov    %eax,%edx
  10041e:	a1 04 80 12 00       	mov    0x128004,%eax
  100423:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100426:	01 c0                	add    %eax,%eax
  100428:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  10042b:	8a 45 e4             	mov    -0x1c(%ebp),%al
  10042e:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = color;
  100430:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  100436:	8b 15 08 80 12 00    	mov    0x128008,%edx
  10043c:	89 d0                	mov    %edx,%eax
  10043e:	c1 e0 02             	shl    $0x2,%eax
  100441:	01 d0                	add    %edx,%eax
  100443:	c1 e0 04             	shl    $0x4,%eax
  100446:	89 c2                	mov    %eax,%edx
  100448:	a1 04 80 12 00       	mov    0x128004,%eax
  10044d:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100450:	01 c0                	add    %eax,%eax
  100452:	40                   	inc    %eax
  100453:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  100456:	a0 00 60 10 00       	mov    0x106000,%al
  10045b:	88 02                	mov    %al,(%edx)

    x++;
  10045d:	a1 04 80 12 00       	mov    0x128004,%eax
  100462:	40                   	inc    %eax
  100463:	a3 04 80 12 00       	mov    %eax,0x128004
    kprintf_res++;
  100468:	a1 0c 80 12 00       	mov    0x12800c,%eax
  10046d:	40                   	inc    %eax
  10046e:	a3 0c 80 12 00       	mov    %eax,0x12800c
  100473:	eb 04                	jmp    100479 <kputc+0x199>
            return;
        }
    }

    if(ramfs_vga_writers()) {
        return;
  100475:	90                   	nop    
  100476:	eb 01                	jmp    100479 <kputc+0x199>
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  100478:	90                   	nop    
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

    x++;
    kprintf_res++;
}
  100479:	c9                   	leave  
  10047a:	c3                   	ret    

0010047b <kputs>:

static void kputs(const char* s) {
  10047b:	55                   	push   %ebp
  10047c:	89 e5                	mov    %esp,%ebp
  10047e:	83 ec 08             	sub    $0x8,%esp
    while (*s) {
  100481:	eb 17                	jmp    10049a <kputs+0x1f>
        kputc(*s++);
  100483:	8b 45 08             	mov    0x8(%ebp),%eax
  100486:	8a 00                	mov    (%eax),%al
  100488:	0f be c0             	movsbl %al,%eax
  10048b:	ff 45 08             	incl   0x8(%ebp)
  10048e:	83 ec 0c             	sub    $0xc,%esp
  100491:	50                   	push   %eax
  100492:	e8 49 fe ff ff       	call   1002e0 <kputc>
  100497:	83 c4 10             	add    $0x10,%esp
    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
    while (*s) {
  10049a:	8b 45 08             	mov    0x8(%ebp),%eax
  10049d:	8a 00                	mov    (%eax),%al
  10049f:	84 c0                	test   %al,%al
  1004a1:	75 e0                	jne    100483 <kputs+0x8>
        kputc(*s++);
    }
}
  1004a3:	c9                   	leave  
  1004a4:	c3                   	ret    

001004a5 <kputn>:

static void kputn(unsigned long x, int base) {
  1004a5:	55                   	push   %ebp
  1004a6:	89 e5                	mov    %esp,%ebp
  1004a8:	83 ec 58             	sub    $0x58,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1004ab:	c7 45 f0 58 71 10 00 	movl   $0x107158,-0x10(%ebp)
    char* p;

    if (base > 36) {
  1004b2:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  1004b6:	7f 55                	jg     10050d <kputn+0x68>
        return;
    }

    p = buf + 64;
  1004b8:	8d 45 af             	lea    -0x51(%ebp),%eax
  1004bb:	83 c0 40             	add    $0x40,%eax
  1004be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *p = '\0';
  1004c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004c4:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1004c7:	ff 4d f4             	decl   -0xc(%ebp)
  1004ca:	8b 55 0c             	mov    0xc(%ebp),%edx
  1004cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d0:	89 d1                	mov    %edx,%ecx
  1004d2:	ba 00 00 00 00       	mov    $0x0,%edx
  1004d7:	f7 f1                	div    %ecx
  1004d9:	89 d0                	mov    %edx,%eax
  1004db:	03 45 f0             	add    -0x10(%ebp),%eax
  1004de:	8a 10                	mov    (%eax),%dl
  1004e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004e3:	88 10                	mov    %dl,(%eax)
        x /= base;
  1004e5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1004e8:	8b 45 08             	mov    0x8(%ebp),%eax
  1004eb:	89 d1                	mov    %edx,%ecx
  1004ed:	ba 00 00 00 00       	mov    $0x0,%edx
  1004f2:	f7 f1                	div    %ecx
  1004f4:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  1004f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1004fb:	75 ca                	jne    1004c7 <kputn+0x22>
    kputs(p);
  1004fd:	83 ec 0c             	sub    $0xc,%esp
  100500:	ff 75 f4             	pushl  -0xc(%ebp)
  100503:	e8 73 ff ff ff       	call   10047b <kputs>
  100508:	83 c4 10             	add    $0x10,%esp
  10050b:	eb 01                	jmp    10050e <kputn+0x69>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  10050d:	90                   	nop    
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
}
  10050e:	c9                   	leave  
  10050f:	c3                   	ret    

00100510 <clrscr>:

void clrscr(void) {
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100516:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10051d:	eb 12                	jmp    100531 <clrscr+0x21>
        video[i] = 0;
  10051f:	8b 15 04 60 10 00    	mov    0x106004,%edx
  100525:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100528:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10052b:	c6 00 00             	movb   $0x0,(%eax)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10052e:	ff 45 fc             	incl   -0x4(%ebp)
  100531:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  100538:	7e e5                	jle    10051f <clrscr+0xf>
        video[i] = 0;
    }

    color = 0x07;
  10053a:	c6 05 00 60 10 00 07 	movb   $0x7,0x106000

    x = y = 0;
  100541:	c7 05 08 80 12 00 00 	movl   $0x0,0x128008
  100548:	00 00 00 
  10054b:	a1 08 80 12 00       	mov    0x128008,%eax
  100550:	a3 04 80 12 00       	mov    %eax,0x128004
}
  100555:	c9                   	leave  
  100556:	c3                   	ret    

00100557 <setclr>:

void setclr(char clr) {
  100557:	55                   	push   %ebp
  100558:	89 e5                	mov    %esp,%ebp
  10055a:	83 ec 04             	sub    $0x4,%esp
  10055d:	8b 45 08             	mov    0x8(%ebp),%eax
  100560:	88 45 fc             	mov    %al,-0x4(%ebp)
    color = clr;
  100563:	8a 45 fc             	mov    -0x4(%ebp),%al
  100566:	a2 00 60 10 00       	mov    %al,0x106000
}
  10056b:	c9                   	leave  
  10056c:	c3                   	ret    

0010056d <kprintf>:

int kprintf(const char* fmt, ...) {
  10056d:	55                   	push   %ebp
  10056e:	89 e5                	mov    %esp,%ebp
  100570:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  100573:	8d 45 0c             	lea    0xc(%ebp),%eax
  100576:	89 45 e8             	mov    %eax,-0x18(%ebp)
    kprintf_res = 0;
  100579:	c7 05 0c 80 12 00 00 	movl   $0x0,0x12800c
  100580:	00 00 00 
    while (*fmt) {
  100583:	e9 35 01 00 00       	jmp    1006bd <kprintf+0x150>
        if (*fmt == '%') {
  100588:	8b 45 08             	mov    0x8(%ebp),%eax
  10058b:	8a 00                	mov    (%eax),%al
  10058d:	3c 25                	cmp    $0x25,%al
  10058f:	0f 85 11 01 00 00    	jne    1006a6 <kprintf+0x139>
            fmt++;
  100595:	ff 45 08             	incl   0x8(%ebp)
            switch (*fmt) {
  100598:	8b 45 08             	mov    0x8(%ebp),%eax
  10059b:	8a 00                	mov    (%eax),%al
  10059d:	0f be c0             	movsbl %al,%eax
  1005a0:	83 f8 70             	cmp    $0x70,%eax
  1005a3:	0f 84 8a 00 00 00    	je     100633 <kprintf+0xc6>
  1005a9:	83 f8 70             	cmp    $0x70,%eax
  1005ac:	7f 2e                	jg     1005dc <kprintf+0x6f>
  1005ae:	83 f8 63             	cmp    $0x63,%eax
  1005b1:	0f 84 9c 00 00 00    	je     100653 <kprintf+0xe6>
  1005b7:	83 f8 63             	cmp    $0x63,%eax
  1005ba:	7f 16                	jg     1005d2 <kprintf+0x65>
  1005bc:	85 c0                	test   %eax,%eax
  1005be:	0f 84 08 01 00 00    	je     1006cc <kprintf+0x15f>
  1005c4:	83 f8 25             	cmp    $0x25,%eax
  1005c7:	0f 84 a6 00 00 00    	je     100673 <kprintf+0x106>
  1005cd:	e9 b1 00 00 00       	jmp    100683 <kprintf+0x116>
  1005d2:	83 f8 64             	cmp    $0x64,%eax
  1005d5:	74 39                	je     100610 <kprintf+0xa3>
  1005d7:	e9 a7 00 00 00       	jmp    100683 <kprintf+0x116>
  1005dc:	83 f8 75             	cmp    $0x75,%eax
  1005df:	74 2f                	je     100610 <kprintf+0xa3>
  1005e1:	83 f8 78             	cmp    $0x78,%eax
  1005e4:	74 4d                	je     100633 <kprintf+0xc6>
  1005e6:	83 f8 73             	cmp    $0x73,%eax
  1005e9:	0f 85 94 00 00 00    	jne    100683 <kprintf+0x116>
            case 's':
                s = va_arg(ap, char*);
  1005ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005f2:	8d 50 04             	lea    0x4(%eax),%edx
  1005f5:	89 55 e8             	mov    %edx,-0x18(%ebp)
  1005f8:	8b 00                	mov    (%eax),%eax
  1005fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
                kputs(s);
  1005fd:	83 ec 0c             	sub    $0xc,%esp
  100600:	ff 75 ec             	pushl  -0x14(%ebp)
  100603:	e8 73 fe ff ff       	call   10047b <kputs>
  100608:	83 c4 10             	add    $0x10,%esp
                break;
  10060b:	e9 aa 00 00 00       	jmp    1006ba <kprintf+0x14d>
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  100610:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100613:	8d 50 04             	lea    0x4(%eax),%edx
  100616:	89 55 e8             	mov    %edx,-0x18(%ebp)
  100619:	8b 00                	mov    (%eax),%eax
  10061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                kputn(n, 10);
  10061e:	83 ec 08             	sub    $0x8,%esp
  100621:	6a 0a                	push   $0xa
  100623:	ff 75 f0             	pushl  -0x10(%ebp)
  100626:	e8 7a fe ff ff       	call   1004a5 <kputn>
  10062b:	83 c4 10             	add    $0x10,%esp
                break;
  10062e:	e9 87 00 00 00       	jmp    1006ba <kprintf+0x14d>
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  100633:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100636:	8d 50 04             	lea    0x4(%eax),%edx
  100639:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10063c:	8b 00                	mov    (%eax),%eax
  10063e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                kputn(n, 16);
  100641:	83 ec 08             	sub    $0x8,%esp
  100644:	6a 10                	push   $0x10
  100646:	ff 75 f0             	pushl  -0x10(%ebp)
  100649:	e8 57 fe ff ff       	call   1004a5 <kputn>
  10064e:	83 c4 10             	add    $0x10,%esp
                break;
  100651:	eb 67                	jmp    1006ba <kprintf+0x14d>
            case 'c':
                c = va_arg(ap, int);
  100653:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100656:	8d 50 04             	lea    0x4(%eax),%edx
  100659:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10065c:	8b 00                	mov    (%eax),%eax
  10065e:	88 45 f7             	mov    %al,-0x9(%ebp)
                kputc(c);
  100661:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  100665:	83 ec 0c             	sub    $0xc,%esp
  100668:	50                   	push   %eax
  100669:	e8 72 fc ff ff       	call   1002e0 <kputc>
  10066e:	83 c4 10             	add    $0x10,%esp
                break;
  100671:	eb 47                	jmp    1006ba <kprintf+0x14d>
            case '%':
                kputc('%');
  100673:	83 ec 0c             	sub    $0xc,%esp
  100676:	6a 25                	push   $0x25
  100678:	e8 63 fc ff ff       	call   1002e0 <kputc>
  10067d:	83 c4 10             	add    $0x10,%esp
                break;
  100680:	90                   	nop    
  100681:	eb 37                	jmp    1006ba <kprintf+0x14d>
            case '\0':
                goto out;
            default:
                kputc('%');
  100683:	83 ec 0c             	sub    $0xc,%esp
  100686:	6a 25                	push   $0x25
  100688:	e8 53 fc ff ff       	call   1002e0 <kputc>
  10068d:	83 c4 10             	add    $0x10,%esp
                kputc(*fmt);
  100690:	8b 45 08             	mov    0x8(%ebp),%eax
  100693:	8a 00                	mov    (%eax),%al
  100695:	0f be c0             	movsbl %al,%eax
  100698:	83 ec 0c             	sub    $0xc,%esp
  10069b:	50                   	push   %eax
  10069c:	e8 3f fc ff ff       	call   1002e0 <kputc>
  1006a1:	83 c4 10             	add    $0x10,%esp
  1006a4:	eb 14                	jmp    1006ba <kprintf+0x14d>
                break;
            }
        } else {
            kputc(*fmt);
  1006a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1006a9:	8a 00                	mov    (%eax),%al
  1006ab:	0f be c0             	movsbl %al,%eax
  1006ae:	83 ec 0c             	sub    $0xc,%esp
  1006b1:	50                   	push   %eax
  1006b2:	e8 29 fc ff ff       	call   1002e0 <kputc>
  1006b7:	83 c4 10             	add    $0x10,%esp
        }

        fmt++;
  1006ba:	ff 45 08             	incl   0x8(%ebp)
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
  1006bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1006c0:	8a 00                	mov    (%eax),%al
  1006c2:	84 c0                	test   %al,%al
  1006c4:	0f 85 be fe ff ff    	jne    100588 <kprintf+0x1b>
  1006ca:	eb 01                	jmp    1006cd <kprintf+0x160>
                break;
            case '%':
                kputc('%');
                break;
            case '\0':
                goto out;
  1006cc:	90                   	nop    
    }

    out:
    va_end(ap);

    return kprintf_res;
  1006cd:	a1 0c 80 12 00       	mov    0x12800c,%eax
}
  1006d2:	c9                   	leave  
  1006d3:	c3                   	ret    

001006d4 <load_gdt>:
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;
  1006d4:	55                   	push   %ebp
  1006d5:	89 e5                	mov    %esp,%ebp
  1006d7:	83 ec 10             	sub    $0x10,%esp

static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
  1006da:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  1006e0:	c7 45 fc 80 85 16 00 	movl   $0x168580,-0x4(%ebp)
        goto doKPutc;
    }
  1006e7:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

    if(get_current_task() != 0) {
  1006eb:	66 b8 10 00          	mov    $0x10,%ax
        if(get_current_task()->stdout != 0) {
  1006ef:	8e d8                	mov    %eax,%ds
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1006f1:	8e c0                	mov    %eax,%es
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  1006f3:	8e e0                	mov    %eax,%fs
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  1006f5:	8e e8                	mov    %eax,%gs

  1006f7:	8e d0                	mov    %eax,%ss
            return;
        }
    }
  1006f9:	c9                   	leave  
  1006fa:	c3                   	ret    

001006fb <set_gdt_entry>:

    if(ramfs_vga_writers()) {
  1006fb:	55                   	push   %ebp
  1006fc:	89 e5                	mov    %esp,%ebp
  1006fe:	57                   	push   %edi
  1006ff:	56                   	push   %esi
  100700:	53                   	push   %ebx
  100701:	83 ec 4c             	sub    $0x4c,%esp
        return;
  100704:	8b 45 08             	mov    0x8(%ebp),%eax
  100707:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10070a:	8b 45 10             	mov    0x10(%ebp),%eax
  10070d:	ba 00 00 00 00       	mov    $0x0,%edx
  100712:	0f b7 c8             	movzwl %ax,%ecx
  100715:	89 d3                	mov    %edx,%ebx
  100717:	83 e3 00             	and    $0x0,%ebx
  10071a:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10071d:	89 0c d5 80 85 16 00 	mov    %ecx,0x168580(,%edx,8)
  100724:	89 1c d5 84 85 16 00 	mov    %ebx,0x168584(,%edx,8)
    }
  10072b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10072e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100731:	8b 45 08             	mov    0x8(%ebp),%eax
  100734:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  10073b:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  100742:	8b 45 0c             	mov    0xc(%ebp),%eax
  100745:	ba 00 00 00 00       	mov    $0x0,%edx
  10074a:	89 c6                	mov    %eax,%esi
  10074c:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100752:	89 d7                	mov    %edx,%edi
  100754:	83 e7 00             	and    $0x0,%edi
  100757:	89 f0                	mov    %esi,%eax
  100759:	89 fa                	mov    %edi,%edx
  10075b:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10075f:	c1 e0 10             	shl    $0x10,%eax
  100762:	89 ce                	mov    %ecx,%esi
  100764:	09 c6                	or     %eax,%esi
  100766:	89 75 b0             	mov    %esi,-0x50(%ebp)
  100769:	89 df                	mov    %ebx,%edi
  10076b:	09 d7                	or     %edx,%edi
  10076d:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  100770:	8b 45 b0             	mov    -0x50(%ebp),%eax
  100773:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100776:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  100779:	89 04 cd 80 85 16 00 	mov    %eax,0x168580(,%ecx,8)
  100780:	89 14 cd 84 85 16 00 	mov    %edx,0x168584(,%ecx,8)

  100787:	8b 75 08             	mov    0x8(%ebp),%esi
  10078a:	8b 45 08             	mov    0x8(%ebp),%eax
  10078d:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  100794:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  10079b:	8b 45 14             	mov    0x14(%ebp),%eax
  10079e:	89 c2                	mov    %eax,%edx
  1007a0:	c1 fa 1f             	sar    $0x1f,%edx
  1007a3:	0f b6 f8             	movzbl %al,%edi
  1007a6:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1007a9:	89 d7                	mov    %edx,%edi
  1007ab:	83 e7 00             	and    $0x0,%edi
  1007ae:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1007b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1007b4:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1007b7:	89 c2                	mov    %eax,%edx
  1007b9:	b8 00 00 00 00       	mov    $0x0,%eax
  1007be:	c1 e2 08             	shl    $0x8,%edx
  1007c1:	89 cf                	mov    %ecx,%edi
  1007c3:	09 c7                	or     %eax,%edi
  1007c5:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1007c8:	89 df                	mov    %ebx,%edi
  1007ca:	09 d7                	or     %edx,%edi
  1007cc:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1007cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1007d2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1007d5:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  1007dc:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
    doKPutc:
  1007e3:	8b 75 08             	mov    0x8(%ebp),%esi
  1007e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1007e9:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  1007f0:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  1007f7:	8b 45 10             	mov    0x10(%ebp),%eax
  1007fa:	c1 e8 10             	shr    $0x10,%eax
  1007fd:	ba 00 00 00 00       	mov    $0x0,%edx
  100802:	89 c7                	mov    %eax,%edi
  100804:	83 e7 0f             	and    $0xf,%edi
  100807:	89 7d c8             	mov    %edi,-0x38(%ebp)
  10080a:	89 d7                	mov    %edx,%edi
  10080c:	83 e7 00             	and    $0x0,%edi
  10080f:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100812:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100815:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100818:	89 c2                	mov    %eax,%edx
  10081a:	b8 00 00 00 00       	mov    $0x0,%eax
  10081f:	c1 e2 10             	shl    $0x10,%edx
  100822:	89 cf                	mov    %ecx,%edi
  100824:	09 c7                	or     %eax,%edi
  100826:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100829:	89 df                	mov    %ebx,%edi
  10082b:	09 d7                	or     %edx,%edi
  10082d:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  100830:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100833:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100836:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  10083d:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)

  100844:	8b 75 08             	mov    0x8(%ebp),%esi
  100847:	8b 45 08             	mov    0x8(%ebp),%eax
  10084a:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  100851:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  100858:	8b 45 14             	mov    0x14(%ebp),%eax
  10085b:	c1 f8 08             	sar    $0x8,%eax
  10085e:	89 c2                	mov    %eax,%edx
  100860:	c1 fa 1f             	sar    $0x1f,%edx
  100863:	0f b6 f8             	movzbl %al,%edi
  100866:	89 7d d8             	mov    %edi,-0x28(%ebp)
  100869:	89 d7                	mov    %edx,%edi
  10086b:	83 e7 00             	and    $0x0,%edi
  10086e:	89 7d dc             	mov    %edi,-0x24(%ebp)
  100871:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100874:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100877:	89 c2                	mov    %eax,%edx
  100879:	b8 00 00 00 00       	mov    $0x0,%eax
  10087e:	c1 e2 14             	shl    $0x14,%edx
  100881:	89 cf                	mov    %ecx,%edi
  100883:	09 c7                	or     %eax,%edi
  100885:	89 7d e0             	mov    %edi,-0x20(%ebp)
  100888:	89 df                	mov    %ebx,%edi
  10088a:	09 d7                	or     %edx,%edi
  10088c:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10088f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100892:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100895:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  10089c:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
    if ((c == '\n') || (x > 79)) {
  1008a3:	8b 75 08             	mov    0x8(%ebp),%esi
  1008a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1008a9:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  1008b0:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  1008b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008ba:	c1 e8 18             	shr    $0x18,%eax
  1008bd:	ba 00 00 00 00       	mov    $0x0,%edx
  1008c2:	89 c2                	mov    %eax,%edx
  1008c4:	b8 00 00 00 00       	mov    $0x0,%eax
  1008c9:	c1 e2 18             	shl    $0x18,%edx
  1008cc:	89 cf                	mov    %ecx,%edi
  1008ce:	09 c7                	or     %eax,%edi
  1008d0:	89 7d e8             	mov    %edi,-0x18(%ebp)
  1008d3:	89 df                	mov    %ebx,%edi
  1008d5:	09 d7                	or     %edx,%edi
  1008d7:	89 7d ec             	mov    %edi,-0x14(%ebp)
  1008da:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1008dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1008e0:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  1008e7:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
        x = 0;
  1008ee:	83 c4 4c             	add    $0x4c,%esp
  1008f1:	5b                   	pop    %ebx
  1008f2:	5e                   	pop    %esi
  1008f3:	5f                   	pop    %edi
  1008f4:	5d                   	pop    %ebp
  1008f5:	c3                   	ret    

001008f6 <init_gdt>:
        y++;
    }
  1008f6:	55                   	push   %ebp
  1008f7:	89 e5                	mov    %esp,%ebp

  1008f9:	6a 00                	push   $0x0
  1008fb:	6a 00                	push   $0x0
  1008fd:	6a 00                	push   $0x0
  1008ff:	6a 00                	push   $0x0
  100901:	e8 f5 fd ff ff       	call   1006fb <set_gdt_entry>
  100906:	83 c4 10             	add    $0x10,%esp
    if (c == '\n') {
  100909:	68 9a 0c 00 00       	push   $0xc9a
  10090e:	68 ff ff 0f 00       	push   $0xfffff
  100913:	6a 00                	push   $0x0
  100915:	6a 01                	push   $0x1
  100917:	e8 df fd ff ff       	call   1006fb <set_gdt_entry>
  10091c:	83 c4 10             	add    $0x10,%esp
        return;
    }
  10091f:	68 92 0c 00 00       	push   $0xc92
  100924:	68 ff ff 0f 00       	push   $0xfffff
  100929:	6a 00                	push   $0x0
  10092b:	6a 02                	push   $0x2
  10092d:	e8 c9 fd ff ff       	call   1006fb <set_gdt_entry>
  100932:	83 c4 10             	add    $0x10,%esp

    if (y > 24) {
  100935:	68 fa 0c 00 00       	push   $0xcfa
  10093a:	68 ff ff 0f 00       	push   $0xfffff
  10093f:	6a 00                	push   $0x0
  100941:	6a 03                	push   $0x3
  100943:	e8 b3 fd ff ff       	call   1006fb <set_gdt_entry>
  100948:	83 c4 10             	add    $0x10,%esp
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  10094b:	68 f2 0c 00 00       	push   $0xcf2
  100950:	68 ff ff 0f 00       	push   $0xfffff
  100955:	6a 00                	push   $0x0
  100957:	6a 04                	push   $0x4
  100959:	e8 9d fd ff ff       	call   1006fb <set_gdt_entry>
  10095e:	83 c4 10             	add    $0x10,%esp
            video[i] = video[i + 160];
        }

  100961:	e8 6e fd ff ff       	call   1006d4 <load_gdt>
        for (; i < 2 * 25 * 80; i++) {
  100966:	c9                   	leave  
  100967:	c3                   	ret    

00100968 <idt_set_entry>:
    video[2 * (y * 80 + x) + 1] = color;

    x++;
    kprintf_res++;
}

  100968:	55                   	push   %ebp
  100969:	89 e5                	mov    %esp,%ebp
  10096b:	57                   	push   %edi
  10096c:	56                   	push   %esi
  10096d:	53                   	push   %ebx
  10096e:	83 ec 34             	sub    $0x34,%esp
  100971:	8b 45 10             	mov    0x10(%ebp),%eax
  100974:	8b 55 14             	mov    0x14(%ebp),%edx
  100977:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
  10097b:	88 55 d8             	mov    %dl,-0x28(%ebp)
static void kputs(const char* s) {
  10097e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100981:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*s) {
  100984:	8b 75 08             	mov    0x8(%ebp),%esi
  100987:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10098a:	ba 00 00 00 00       	mov    $0x0,%edx
  10098f:	0f b7 c8             	movzwl %ax,%ecx
  100992:	89 d3                	mov    %edx,%ebx
  100994:	83 e3 00             	and    $0x0,%ebx
  100997:	89 0c f5 20 80 12 00 	mov    %ecx,0x128020(,%esi,8)
  10099e:	89 1c f5 24 80 12 00 	mov    %ebx,0x128024(,%esi,8)
        kputc(*s++);
  1009a5:	8b 75 08             	mov    0x8(%ebp),%esi
  1009a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1009ab:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  1009b2:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  1009b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1009bc:	25 ff ff 00 00       	and    $0xffff,%eax
  1009c1:	ba 00 00 00 00       	mov    $0x0,%edx
  1009c6:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  1009ca:	c1 e0 10             	shl    $0x10,%eax
  1009cd:	89 cf                	mov    %ecx,%edi
  1009cf:	09 c7                	or     %eax,%edi
  1009d1:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1009d4:	89 df                	mov    %ebx,%edi
  1009d6:	09 d7                	or     %edx,%edi
  1009d8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1009db:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1009de:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1009e1:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  1009e8:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)
    }
  1009ef:	8b 75 08             	mov    0x8(%ebp),%esi
  1009f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1009f5:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  1009fc:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  100a03:	b8 00 00 00 00       	mov    $0x0,%eax
  100a08:	8a 45 d8             	mov    -0x28(%ebp),%al
  100a0b:	ba 00 00 00 00       	mov    $0x0,%edx
  100a10:	89 c2                	mov    %eax,%edx
  100a12:	b8 00 00 00 00       	mov    $0x0,%eax
  100a17:	c1 e2 08             	shl    $0x8,%edx
  100a1a:	89 cf                	mov    %ecx,%edi
  100a1c:	09 c7                	or     %eax,%edi
  100a1e:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100a21:	89 df                	mov    %ebx,%edi
  100a23:	09 d7                	or     %edx,%edi
  100a25:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100a28:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100a2b:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100a2e:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  100a35:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)
}
  100a3c:	8b 75 08             	mov    0x8(%ebp),%esi
  100a3f:	8b 45 08             	mov    0x8(%ebp),%eax
  100a42:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  100a49:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  100a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a53:	c1 e8 10             	shr    $0x10,%eax
  100a56:	ba 00 00 00 00       	mov    $0x0,%edx
  100a5b:	89 c2                	mov    %eax,%edx
  100a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  100a62:	c1 e2 10             	shl    $0x10,%edx
  100a65:	89 cf                	mov    %ecx,%edi
  100a67:	09 c7                	or     %eax,%edi
  100a69:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100a6c:	89 df                	mov    %ebx,%edi
  100a6e:	09 d7                	or     %edx,%edi
  100a70:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  100a73:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a76:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100a79:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  100a80:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)

  100a87:	83 c4 34             	add    $0x34,%esp
  100a8a:	5b                   	pop    %ebx
  100a8b:	5e                   	pop    %esi
  100a8c:	5f                   	pop    %edi
  100a8d:	5d                   	pop    %ebp
  100a8e:	c3                   	ret    

00100a8f <init_idt>:
static void kputn(unsigned long x, int base) {
    char buf[65];
  100a8f:	55                   	push   %ebp
  100a90:	89 e5                	mov    %esp,%ebp
  100a92:	83 ec 18             	sub    $0x18,%esp
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  100a95:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  100a9b:	c7 45 f0 20 80 12 00 	movl   $0x128020,-0x10(%ebp)
    }

  100aa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    p = buf + 64;
    *p = '\0';
  100aa9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100ab0:	eb 1f                	jmp    100ad1 <init_idt+0x42>
    do {
  100ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ab5:	c7 04 85 20 83 12 00 	movl   $0x0,0x128320(,%eax,4)
  100abc:	00 00 00 00 
        *--p = digits[x % base];
  100ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ac3:	c7 04 85 20 84 12 00 	movl   $0x0,0x128420(,%eax,4)
  100aca:	00 00 00 00 
    if (base > 36) {
        return;
    }

    p = buf + 64;
    *p = '\0';
  100ace:	ff 45 f4             	incl   -0xc(%ebp)
  100ad1:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  100ad5:	7e db                	jle    100ab2 <init_idt+0x23>
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
  100ad7:	83 ec 08             	sub    $0x8,%esp
  100ada:	6a 11                	push   $0x11
  100adc:	6a 20                	push   $0x20
  100ade:	e8 64 15 00 00       	call   102047 <outb>
  100ae3:	83 c4 10             	add    $0x10,%esp
}
  100ae6:	83 ec 08             	sub    $0x8,%esp
  100ae9:	6a 20                	push   $0x20
  100aeb:	6a 21                	push   $0x21
  100aed:	e8 55 15 00 00       	call   102047 <outb>
  100af2:	83 c4 10             	add    $0x10,%esp

  100af5:	83 ec 08             	sub    $0x8,%esp
  100af8:	6a 04                	push   $0x4
  100afa:	6a 21                	push   $0x21
  100afc:	e8 46 15 00 00       	call   102047 <outb>
  100b01:	83 c4 10             	add    $0x10,%esp
void clrscr(void) {
  100b04:	83 ec 08             	sub    $0x8,%esp
  100b07:	6a 01                	push   $0x1
  100b09:	6a 21                	push   $0x21
  100b0b:	e8 37 15 00 00       	call   102047 <outb>
  100b10:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100b13:	83 ec 08             	sub    $0x8,%esp
  100b16:	6a 11                	push   $0x11
  100b18:	68 a0 00 00 00       	push   $0xa0
  100b1d:	e8 25 15 00 00       	call   102047 <outb>
  100b22:	83 c4 10             	add    $0x10,%esp
        video[i] = 0;
  100b25:	83 ec 08             	sub    $0x8,%esp
  100b28:	6a 28                	push   $0x28
  100b2a:	68 a1 00 00 00       	push   $0xa1
  100b2f:	e8 13 15 00 00       	call   102047 <outb>
  100b34:	83 c4 10             	add    $0x10,%esp
    }
  100b37:	83 ec 08             	sub    $0x8,%esp
  100b3a:	6a 02                	push   $0x2
  100b3c:	68 a1 00 00 00       	push   $0xa1
  100b41:	e8 01 15 00 00       	call   102047 <outb>
  100b46:	83 c4 10             	add    $0x10,%esp

  100b49:	83 ec 08             	sub    $0x8,%esp
  100b4c:	6a 01                	push   $0x1
  100b4e:	68 a1 00 00 00       	push   $0xa1
  100b53:	e8 ef 14 00 00       	call   102047 <outb>
  100b58:	83 c4 10             	add    $0x10,%esp
    color = 0x07;

  100b5b:	83 ec 08             	sub    $0x8,%esp
  100b5e:	6a 00                	push   $0x0
  100b60:	6a 20                	push   $0x20
  100b62:	e8 e0 14 00 00       	call   102047 <outb>
  100b67:	83 c4 10             	add    $0x10,%esp
    x = y = 0;
  100b6a:	83 ec 08             	sub    $0x8,%esp
  100b6d:	6a 00                	push   $0x0
  100b6f:	68 a0 00 00 00       	push   $0xa0
  100b74:	e8 ce 14 00 00       	call   102047 <outb>
  100b79:	83 c4 10             	add    $0x10,%esp
}

  100b7c:	b8 0c 00 10 00       	mov    $0x10000c,%eax
  100b81:	68 8e 00 00 00       	push   $0x8e
  100b86:	6a 08                	push   $0x8
  100b88:	50                   	push   %eax
  100b89:	6a 00                	push   $0x0
  100b8b:	e8 d8 fd ff ff       	call   100968 <idt_set_entry>
  100b90:	83 c4 10             	add    $0x10,%esp
void setclr(char clr) {
    color = clr;
  100b93:	b8 15 00 10 00       	mov    $0x100015,%eax
  100b98:	68 8e 00 00 00       	push   $0x8e
  100b9d:	6a 08                	push   $0x8
  100b9f:	50                   	push   %eax
  100ba0:	6a 01                	push   $0x1
  100ba2:	e8 c1 fd ff ff       	call   100968 <idt_set_entry>
  100ba7:	83 c4 10             	add    $0x10,%esp
}

  100baa:	b8 1e 00 10 00       	mov    $0x10001e,%eax
  100baf:	68 8e 00 00 00       	push   $0x8e
  100bb4:	6a 08                	push   $0x8
  100bb6:	50                   	push   %eax
  100bb7:	6a 02                	push   $0x2
  100bb9:	e8 aa fd ff ff       	call   100968 <idt_set_entry>
  100bbe:	83 c4 10             	add    $0x10,%esp
int kprintf(const char* fmt, ...) {
    va_list ap;
  100bc1:	b8 27 00 10 00       	mov    $0x100027,%eax
  100bc6:	68 8e 00 00 00       	push   $0x8e
  100bcb:	6a 08                	push   $0x8
  100bcd:	50                   	push   %eax
  100bce:	6a 03                	push   $0x3
  100bd0:	e8 93 fd ff ff       	call   100968 <idt_set_entry>
  100bd5:	83 c4 10             	add    $0x10,%esp
    const char* s;
    unsigned long n;
  100bd8:	b8 30 00 10 00       	mov    $0x100030,%eax
  100bdd:	68 8e 00 00 00       	push   $0x8e
  100be2:	6a 08                	push   $0x8
  100be4:	50                   	push   %eax
  100be5:	6a 04                	push   $0x4
  100be7:	e8 7c fd ff ff       	call   100968 <idt_set_entry>
  100bec:	83 c4 10             	add    $0x10,%esp
    char c;

  100bef:	b8 39 00 10 00       	mov    $0x100039,%eax
  100bf4:	68 8e 00 00 00       	push   $0x8e
  100bf9:	6a 08                	push   $0x8
  100bfb:	50                   	push   %eax
  100bfc:	6a 05                	push   $0x5
  100bfe:	e8 65 fd ff ff       	call   100968 <idt_set_entry>
  100c03:	83 c4 10             	add    $0x10,%esp
    va_start(ap, fmt);
    kprintf_res = 0;
  100c06:	b8 42 00 10 00       	mov    $0x100042,%eax
  100c0b:	68 8e 00 00 00       	push   $0x8e
  100c10:	6a 08                	push   $0x8
  100c12:	50                   	push   %eax
  100c13:	6a 06                	push   $0x6
  100c15:	e8 4e fd ff ff       	call   100968 <idt_set_entry>
  100c1a:	83 c4 10             	add    $0x10,%esp
    while (*fmt) {
        if (*fmt == '%') {
  100c1d:	b8 4b 00 10 00       	mov    $0x10004b,%eax
  100c22:	68 8e 00 00 00       	push   $0x8e
  100c27:	6a 08                	push   $0x8
  100c29:	50                   	push   %eax
  100c2a:	6a 07                	push   $0x7
  100c2c:	e8 37 fd ff ff       	call   100968 <idt_set_entry>
  100c31:	83 c4 10             	add    $0x10,%esp
            fmt++;
            switch (*fmt) {
  100c34:	b8 54 00 10 00       	mov    $0x100054,%eax
  100c39:	68 8e 00 00 00       	push   $0x8e
  100c3e:	6a 08                	push   $0x8
  100c40:	50                   	push   %eax
  100c41:	6a 08                	push   $0x8
  100c43:	e8 20 fd ff ff       	call   100968 <idt_set_entry>
  100c48:	83 c4 10             	add    $0x10,%esp
            case 's':
                s = va_arg(ap, char*);
  100c4b:	b8 5b 00 10 00       	mov    $0x10005b,%eax
  100c50:	68 8e 00 00 00       	push   $0x8e
  100c55:	6a 08                	push   $0x8
  100c57:	50                   	push   %eax
  100c58:	6a 09                	push   $0x9
  100c5a:	e8 09 fd ff ff       	call   100968 <idt_set_entry>
  100c5f:	83 c4 10             	add    $0x10,%esp
                kputs(s);
                break;
  100c62:	b8 64 00 10 00       	mov    $0x100064,%eax
  100c67:	68 8e 00 00 00       	push   $0x8e
  100c6c:	6a 08                	push   $0x8
  100c6e:	50                   	push   %eax
  100c6f:	6a 0a                	push   $0xa
  100c71:	e8 f2 fc ff ff       	call   100968 <idt_set_entry>
  100c76:	83 c4 10             	add    $0x10,%esp
            case 'd':
            case 'u':
  100c79:	b8 6b 00 10 00       	mov    $0x10006b,%eax
  100c7e:	68 8e 00 00 00       	push   $0x8e
  100c83:	6a 08                	push   $0x8
  100c85:	50                   	push   %eax
  100c86:	6a 0b                	push   $0xb
  100c88:	e8 db fc ff ff       	call   100968 <idt_set_entry>
  100c8d:	83 c4 10             	add    $0x10,%esp
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
  100c90:	b8 72 00 10 00       	mov    $0x100072,%eax
  100c95:	68 8e 00 00 00       	push   $0x8e
  100c9a:	6a 08                	push   $0x8
  100c9c:	50                   	push   %eax
  100c9d:	6a 0c                	push   $0xc
  100c9f:	e8 c4 fc ff ff       	call   100968 <idt_set_entry>
  100ca4:	83 c4 10             	add    $0x10,%esp
                break;
            case 'x':
  100ca7:	b8 79 00 10 00       	mov    $0x100079,%eax
  100cac:	68 8e 00 00 00       	push   $0x8e
  100cb1:	6a 08                	push   $0x8
  100cb3:	50                   	push   %eax
  100cb4:	6a 0d                	push   $0xd
  100cb6:	e8 ad fc ff ff       	call   100968 <idt_set_entry>
  100cbb:	83 c4 10             	add    $0x10,%esp
            case 'p':
                n = va_arg(ap, unsigned long int);
  100cbe:	b8 80 00 10 00       	mov    $0x100080,%eax
  100cc3:	68 8e 00 00 00       	push   $0x8e
  100cc8:	6a 08                	push   $0x8
  100cca:	50                   	push   %eax
  100ccb:	6a 0e                	push   $0xe
  100ccd:	e8 96 fc ff ff       	call   100968 <idt_set_entry>
  100cd2:	83 c4 10             	add    $0x10,%esp
                kputn(n, 16);
                break;
  100cd5:	b8 84 00 10 00       	mov    $0x100084,%eax
  100cda:	68 8e 00 00 00       	push   $0x8e
  100cdf:	6a 08                	push   $0x8
  100ce1:	50                   	push   %eax
  100ce2:	6a 0f                	push   $0xf
  100ce4:	e8 7f fc ff ff       	call   100968 <idt_set_entry>
  100ce9:	83 c4 10             	add    $0x10,%esp
            case 'c':
                c = va_arg(ap, int);
  100cec:	b8 8a 00 10 00       	mov    $0x10008a,%eax
  100cf1:	68 8e 00 00 00       	push   $0x8e
  100cf6:	6a 08                	push   $0x8
  100cf8:	50                   	push   %eax
  100cf9:	6a 10                	push   $0x10
  100cfb:	e8 68 fc ff ff       	call   100968 <idt_set_entry>
  100d00:	83 c4 10             	add    $0x10,%esp
                kputc(c);
                break;
  100d03:	b8 90 00 10 00       	mov    $0x100090,%eax
  100d08:	68 8e 00 00 00       	push   $0x8e
  100d0d:	6a 08                	push   $0x8
  100d0f:	50                   	push   %eax
  100d10:	6a 11                	push   $0x11
  100d12:	e8 51 fc ff ff       	call   100968 <idt_set_entry>
  100d17:	83 c4 10             	add    $0x10,%esp
            case '%':
                kputc('%');
  100d1a:	b8 94 00 10 00       	mov    $0x100094,%eax
  100d1f:	68 8e 00 00 00       	push   $0x8e
  100d24:	6a 08                	push   $0x8
  100d26:	50                   	push   %eax
  100d27:	6a 12                	push   $0x12
  100d29:	e8 3a fc ff ff       	call   100968 <idt_set_entry>
  100d2e:	83 c4 10             	add    $0x10,%esp
                break;
            case '\0':
                goto out;
  100d31:	b8 9a 00 10 00       	mov    $0x10009a,%eax
  100d36:	68 8e 00 00 00       	push   $0x8e
  100d3b:	6a 08                	push   $0x8
  100d3d:	50                   	push   %eax
  100d3e:	6a 20                	push   $0x20
  100d40:	e8 23 fc ff ff       	call   100968 <idt_set_entry>
  100d45:	83 c4 10             	add    $0x10,%esp
            default:
                kputc('%');
  100d48:	b8 a0 00 10 00       	mov    $0x1000a0,%eax
  100d4d:	68 8e 00 00 00       	push   $0x8e
  100d52:	6a 08                	push   $0x8
  100d54:	50                   	push   %eax
  100d55:	6a 21                	push   $0x21
  100d57:	e8 0c fc ff ff       	call   100968 <idt_set_entry>
  100d5c:	83 c4 10             	add    $0x10,%esp
                kputc(*fmt);
                break;
  100d5f:	b8 a6 00 10 00       	mov    $0x1000a6,%eax
  100d64:	68 8e 00 00 00       	push   $0x8e
  100d69:	6a 08                	push   $0x8
  100d6b:	50                   	push   %eax
  100d6c:	6a 22                	push   $0x22
  100d6e:	e8 f5 fb ff ff       	call   100968 <idt_set_entry>
  100d73:	83 c4 10             	add    $0x10,%esp
            }
        } else {
  100d76:	b8 ac 00 10 00       	mov    $0x1000ac,%eax
  100d7b:	68 8e 00 00 00       	push   $0x8e
  100d80:	6a 08                	push   $0x8
  100d82:	50                   	push   %eax
  100d83:	6a 23                	push   $0x23
  100d85:	e8 de fb ff ff       	call   100968 <idt_set_entry>
  100d8a:	83 c4 10             	add    $0x10,%esp
            kputc(*fmt);
        }
  100d8d:	b8 b2 00 10 00       	mov    $0x1000b2,%eax
  100d92:	68 8e 00 00 00       	push   $0x8e
  100d97:	6a 08                	push   $0x8
  100d99:	50                   	push   %eax
  100d9a:	6a 24                	push   $0x24
  100d9c:	e8 c7 fb ff ff       	call   100968 <idt_set_entry>
  100da1:	83 c4 10             	add    $0x10,%esp

        fmt++;
  100da4:	b8 b8 00 10 00       	mov    $0x1000b8,%eax
  100da9:	68 8e 00 00 00       	push   $0x8e
  100dae:	6a 08                	push   $0x8
  100db0:	50                   	push   %eax
  100db1:	6a 25                	push   $0x25
  100db3:	e8 b0 fb ff ff       	call   100968 <idt_set_entry>
  100db8:	83 c4 10             	add    $0x10,%esp
    }

  100dbb:	b8 be 00 10 00       	mov    $0x1000be,%eax
  100dc0:	68 8e 00 00 00       	push   $0x8e
  100dc5:	6a 08                	push   $0x8
  100dc7:	50                   	push   %eax
  100dc8:	6a 26                	push   $0x26
  100dca:	e8 99 fb ff ff       	call   100968 <idt_set_entry>
  100dcf:	83 c4 10             	add    $0x10,%esp
    out:
    va_end(ap);
  100dd2:	b8 c4 00 10 00       	mov    $0x1000c4,%eax
  100dd7:	68 8e 00 00 00       	push   $0x8e
  100ddc:	6a 08                	push   $0x8
  100dde:	50                   	push   %eax
  100ddf:	6a 27                	push   $0x27
  100de1:	e8 82 fb ff ff       	call   100968 <idt_set_entry>
  100de6:	83 c4 10             	add    $0x10,%esp

    return kprintf_res;
  100de9:	b8 ca 00 10 00       	mov    $0x1000ca,%eax
  100dee:	68 8e 00 00 00       	push   $0x8e
  100df3:	6a 08                	push   $0x8
  100df5:	50                   	push   %eax
  100df6:	6a 28                	push   $0x28
  100df8:	e8 6b fb ff ff       	call   100968 <idt_set_entry>
  100dfd:	83 c4 10             	add    $0x10,%esp
}

  100e00:	b8 d0 00 10 00       	mov    $0x1000d0,%eax
  100e05:	68 8e 00 00 00       	push   $0x8e
  100e0a:	6a 08                	push   $0x8
  100e0c:	50                   	push   %eax
  100e0d:	6a 29                	push   $0x29
  100e0f:	e8 54 fb ff ff       	call   100968 <idt_set_entry>
  100e14:	83 c4 10             	add    $0x10,%esp
  100e17:	b8 d6 00 10 00       	mov    $0x1000d6,%eax
  100e1c:	68 8e 00 00 00       	push   $0x8e
  100e21:	6a 08                	push   $0x8
  100e23:	50                   	push   %eax
  100e24:	6a 2a                	push   $0x2a
  100e26:	e8 3d fb ff ff       	call   100968 <idt_set_entry>
  100e2b:	83 c4 10             	add    $0x10,%esp
  100e2e:	b8 dc 00 10 00       	mov    $0x1000dc,%eax
  100e33:	68 8e 00 00 00       	push   $0x8e
  100e38:	6a 08                	push   $0x8
  100e3a:	50                   	push   %eax
  100e3b:	6a 2b                	push   $0x2b
  100e3d:	e8 26 fb ff ff       	call   100968 <idt_set_entry>
  100e42:	83 c4 10             	add    $0x10,%esp
  100e45:	b8 e2 00 10 00       	mov    $0x1000e2,%eax
  100e4a:	68 8e 00 00 00       	push   $0x8e
  100e4f:	6a 08                	push   $0x8
  100e51:	50                   	push   %eax
  100e52:	6a 2c                	push   $0x2c
  100e54:	e8 0f fb ff ff       	call   100968 <idt_set_entry>
  100e59:	83 c4 10             	add    $0x10,%esp
  100e5c:	b8 e8 00 10 00       	mov    $0x1000e8,%eax
  100e61:	68 8e 00 00 00       	push   $0x8e
  100e66:	6a 08                	push   $0x8
  100e68:	50                   	push   %eax
  100e69:	6a 2d                	push   $0x2d
  100e6b:	e8 f8 fa ff ff       	call   100968 <idt_set_entry>
  100e70:	83 c4 10             	add    $0x10,%esp
  100e73:	b8 ee 00 10 00       	mov    $0x1000ee,%eax
  100e78:	68 8e 00 00 00       	push   $0x8e
  100e7d:	6a 08                	push   $0x8
  100e7f:	50                   	push   %eax
  100e80:	6a 2e                	push   $0x2e
  100e82:	e8 e1 fa ff ff       	call   100968 <idt_set_entry>
  100e87:	83 c4 10             	add    $0x10,%esp
  100e8a:	b8 f4 00 10 00       	mov    $0x1000f4,%eax
  100e8f:	68 8e 00 00 00       	push   $0x8e
  100e94:	6a 08                	push   $0x8
  100e96:	50                   	push   %eax
  100e97:	6a 2f                	push   $0x2f
  100e99:	e8 ca fa ff ff       	call   100968 <idt_set_entry>
  100e9e:	83 c4 10             	add    $0x10,%esp
  100ea1:	b8 fa 00 10 00       	mov    $0x1000fa,%eax
  100ea6:	68 ee 00 00 00       	push   $0xee
  100eab:	6a 08                	push   $0x8
  100ead:	50                   	push   %eax
  100eae:	6a 30                	push   $0x30
  100eb0:	e8 b3 fa ff ff       	call   100968 <idt_set_entry>
  100eb5:	83 c4 10             	add    $0x10,%esp
  100eb8:	b8 20 60 10 00       	mov    $0x106020,%eax
  100ebd:	68 e9 00 00 00       	push   $0xe9
  100ec2:	68 80 00 00 00       	push   $0x80
  100ec7:	50                   	push   %eax
  100ec8:	6a 05                	push   $0x5
  100eca:	e8 2c f8 ff ff       	call   1006fb <set_gdt_entry>
  100ecf:	83 c4 10             	add    $0x10,%esp
  100ed2:	b8 28 00 00 00       	mov    $0x28,%eax
  100ed7:	0f 00 d8             	ltr    %ax
  100eda:	0f 01 5d ee          	lidtl  -0x12(%ebp)
  100ede:	fb                   	sti    
  100edf:	c9                   	leave  
  100ee0:	c3                   	ret    

00100ee1 <register_intr_handler>:
  100ee1:	55                   	push   %ebp
  100ee2:	89 e5                	mov    %esp,%ebp
  100ee4:	8b 45 08             	mov    0x8(%ebp),%eax
  100ee7:	8b 55 0c             	mov    0xc(%ebp),%edx
  100eea:	89 14 85 20 82 12 00 	mov    %edx,0x128220(,%eax,4)
  100ef1:	8b 45 08             	mov    0x8(%ebp),%eax
  100ef4:	c7 04 85 20 83 12 00 	movl   $0x1,0x128320(,%eax,4)
  100efb:	01 00 00 00 
  100eff:	5d                   	pop    %ebp
  100f00:	c3                   	ret    

00100f01 <register_irq_rpc>:
  100f01:	55                   	push   %ebp
  100f02:	89 e5                	mov    %esp,%ebp
  100f04:	53                   	push   %ebx
  100f05:	83 ec 04             	sub    $0x4,%esp
  100f08:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f0c:	76 1e                	jbe    100f2c <register_irq_rpc+0x2b>
  100f0e:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f12:	77 18                	ja     100f2c <register_irq_rpc+0x2b>
  100f14:	8b 5d 08             	mov    0x8(%ebp),%ebx
  100f17:	e8 4d 1c 00 00       	call   102b69 <get_current_task>
  100f1c:	8b 00                	mov    (%eax),%eax
  100f1e:	89 04 9d 20 84 12 00 	mov    %eax,0x128420(,%ebx,4)
  100f25:	b8 01 00 00 00       	mov    $0x1,%eax
  100f2a:	eb 05                	jmp    100f31 <register_irq_rpc+0x30>
  100f2c:	b8 00 00 00 00       	mov    $0x0,%eax
  100f31:	83 c4 04             	add    $0x4,%esp
  100f34:	5b                   	pop    %ebx
  100f35:	5d                   	pop    %ebp
  100f36:	c3                   	ret    

00100f37 <disable_irq_rpc>:
  100f37:	55                   	push   %ebp
  100f38:	89 e5                	mov    %esp,%ebp
  100f3a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f3e:	76 2a                	jbe    100f6a <disable_irq_rpc+0x33>
  100f40:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f44:	77 24                	ja     100f6a <disable_irq_rpc+0x33>
  100f46:	8b 45 08             	mov    0x8(%ebp),%eax
  100f49:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  100f50:	85 c0                	test   %eax,%eax
  100f52:	7e 16                	jle    100f6a <disable_irq_rpc+0x33>
  100f54:	8b 45 08             	mov    0x8(%ebp),%eax
  100f57:	8b 55 08             	mov    0x8(%ebp),%edx
  100f5a:	8b 14 95 20 84 12 00 	mov    0x128420(,%edx,4),%edx
  100f61:	f7 da                	neg    %edx
  100f63:	89 14 85 20 84 12 00 	mov    %edx,0x128420(,%eax,4)
  100f6a:	5d                   	pop    %ebp
  100f6b:	c3                   	ret    

00100f6c <enable_irq_rpc>:
  100f6c:	55                   	push   %ebp
  100f6d:	89 e5                	mov    %esp,%ebp
  100f6f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f73:	76 2a                	jbe    100f9f <enable_irq_rpc+0x33>
  100f75:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f79:	77 24                	ja     100f9f <enable_irq_rpc+0x33>
  100f7b:	8b 45 08             	mov    0x8(%ebp),%eax
  100f7e:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  100f85:	85 c0                	test   %eax,%eax
  100f87:	79 16                	jns    100f9f <enable_irq_rpc+0x33>
  100f89:	8b 45 08             	mov    0x8(%ebp),%eax
  100f8c:	8b 55 08             	mov    0x8(%ebp),%edx
  100f8f:	8b 14 95 20 84 12 00 	mov    0x128420(,%edx,4),%edx
  100f96:	f7 da                	neg    %edx
  100f98:	89 14 85 20 84 12 00 	mov    %edx,0x128420(,%eax,4)
  100f9f:	5d                   	pop    %ebp
  100fa0:	c3                   	ret    

00100fa1 <handle_interrupt>:
  100fa1:	55                   	push   %ebp
  100fa2:	89 e5                	mov    %esp,%ebp
  100fa4:	83 ec 18             	sub    $0x18,%esp
  100fa7:	8b 45 08             	mov    0x8(%ebp),%eax
  100faa:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100fad:	8b 45 08             	mov    0x8(%ebp),%eax
  100fb0:	8b 40 1c             	mov    0x1c(%eax),%eax
  100fb3:	83 f8 1f             	cmp    $0x1f,%eax
  100fb6:	77 37                	ja     100fef <handle_interrupt+0x4e>
  100fb8:	e8 a2 1b 00 00       	call   102b5f <isSchedulingEnabled>
  100fbd:	85 c0                	test   %eax,%eax
  100fbf:	75 18                	jne    100fd9 <handle_interrupt+0x38>
  100fc1:	83 ec 08             	sub    $0x8,%esp
  100fc4:	68 7d 71 10 00       	push   $0x10717d
  100fc9:	ff 75 08             	pushl  0x8(%ebp)
  100fcc:	e8 05 f2 ff ff       	call   1001d6 <show_cod>
  100fd1:	83 c4 10             	add    $0x10,%esp
  100fd4:	e9 08 01 00 00       	jmp    1010e1 <handle_interrupt+0x140>
  100fd9:	83 ec 0c             	sub    $0xc,%esp
  100fdc:	ff 75 08             	pushl  0x8(%ebp)
  100fdf:	e8 bc 1c 00 00       	call   102ca0 <schedule_exception>
  100fe4:	83 c4 10             	add    $0x10,%esp
  100fe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100fea:	e9 f2 00 00 00       	jmp    1010e1 <handle_interrupt+0x140>
  100fef:	8b 45 08             	mov    0x8(%ebp),%eax
  100ff2:	8b 40 1c             	mov    0x1c(%eax),%eax
  100ff5:	83 f8 1f             	cmp    $0x1f,%eax
  100ff8:	0f 86 b2 00 00 00    	jbe    1010b0 <handle_interrupt+0x10f>
  100ffe:	8b 45 08             	mov    0x8(%ebp),%eax
  101001:	8b 40 1c             	mov    0x1c(%eax),%eax
  101004:	83 f8 2f             	cmp    $0x2f,%eax
  101007:	0f 87 a3 00 00 00    	ja     1010b0 <handle_interrupt+0x10f>
  10100d:	8b 45 08             	mov    0x8(%ebp),%eax
  101010:	8b 40 1c             	mov    0x1c(%eax),%eax
  101013:	83 f8 27             	cmp    $0x27,%eax
  101016:	76 12                	jbe    10102a <handle_interrupt+0x89>
  101018:	83 ec 08             	sub    $0x8,%esp
  10101b:	6a 20                	push   $0x20
  10101d:	68 a0 00 00 00       	push   $0xa0
  101022:	e8 20 10 00 00       	call   102047 <outb>
  101027:	83 c4 10             	add    $0x10,%esp
  10102a:	8b 45 08             	mov    0x8(%ebp),%eax
  10102d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101030:	83 f8 20             	cmp    $0x20,%eax
  101033:	75 13                	jne    101048 <handle_interrupt+0xa7>
  101035:	83 ec 0c             	sub    $0xc,%esp
  101038:	ff 75 08             	pushl  0x8(%ebp)
  10103b:	e8 47 20 00 00       	call   103087 <schedule>
  101040:	83 c4 10             	add    $0x10,%esp
  101043:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101046:	eb 57                	jmp    10109f <handle_interrupt+0xfe>
  101048:	8b 45 08             	mov    0x8(%ebp),%eax
  10104b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10104e:	8b 04 85 20 83 12 00 	mov    0x128320(,%eax,4),%eax
  101055:	85 c0                	test   %eax,%eax
  101057:	74 0f                	je     101068 <handle_interrupt+0xc7>
  101059:	8b 45 08             	mov    0x8(%ebp),%eax
  10105c:	8b 40 1c             	mov    0x1c(%eax),%eax
  10105f:	8b 04 85 20 82 12 00 	mov    0x128220(,%eax,4),%eax
  101066:	ff d0                	call   *%eax
  101068:	8b 45 08             	mov    0x8(%ebp),%eax
  10106b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10106e:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  101075:	85 c0                	test   %eax,%eax
  101077:	7e 26                	jle    10109f <handle_interrupt+0xfe>
  101079:	8b 45 08             	mov    0x8(%ebp),%eax
  10107c:	8b 50 1c             	mov    0x1c(%eax),%edx
  10107f:	8b 45 08             	mov    0x8(%ebp),%eax
  101082:	8b 40 1c             	mov    0x1c(%eax),%eax
  101085:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  10108c:	83 ec 0c             	sub    $0xc,%esp
  10108f:	6a 00                	push   $0x0
  101091:	6a 00                	push   $0x0
  101093:	52                   	push   %edx
  101094:	6a 00                	push   $0x0
  101096:	50                   	push   %eax
  101097:	e8 3f 21 00 00       	call   1031db <create_rpc_call>
  10109c:	83 c4 20             	add    $0x20,%esp
  10109f:	83 ec 08             	sub    $0x8,%esp
  1010a2:	6a 20                	push   $0x20
  1010a4:	6a 20                	push   $0x20
  1010a6:	e8 9c 0f 00 00       	call   102047 <outb>
  1010ab:	83 c4 10             	add    $0x10,%esp
  1010ae:	eb 31                	jmp    1010e1 <handle_interrupt+0x140>
  1010b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1010b3:	8b 40 1c             	mov    0x1c(%eax),%eax
  1010b6:	83 f8 30             	cmp    $0x30,%eax
  1010b9:	75 13                	jne    1010ce <handle_interrupt+0x12d>
  1010bb:	83 ec 0c             	sub    $0xc,%esp
  1010be:	ff 75 f4             	pushl  -0xc(%ebp)
  1010c1:	e8 22 00 00 00       	call   1010e8 <syscall>
  1010c6:	83 c4 10             	add    $0x10,%esp
  1010c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1010cc:	eb 13                	jmp    1010e1 <handle_interrupt+0x140>
  1010ce:	83 ec 08             	sub    $0x8,%esp
  1010d1:	68 8b 71 10 00       	push   $0x10718b
  1010d6:	ff 75 08             	pushl  0x8(%ebp)
  1010d9:	e8 f8 f0 ff ff       	call   1001d6 <show_cod>
  1010de:	83 c4 10             	add    $0x10,%esp
  1010e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1010e4:	c9                   	leave  
  1010e5:	c3                   	ret    
	...

001010e8 <syscall>:
static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
    }
  1010e8:	55                   	push   %ebp
  1010e9:	89 e5                	mov    %esp,%ebp
  1010eb:	56                   	push   %esi
  1010ec:	53                   	push   %ebx
  1010ed:	83 ec 70             	sub    $0x70,%esp

  1010f0:	83 ec 0c             	sub    $0xc,%esp
  1010f3:	ff 75 08             	pushl  0x8(%ebp)
  1010f6:	e8 c7 1e 00 00       	call   102fc2 <save_cpu_state>
  1010fb:	83 c4 10             	add    $0x10,%esp
  1010fe:	89 45 08             	mov    %eax,0x8(%ebp)
    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
  101101:	8b 45 08             	mov    0x8(%ebp),%eax
  101104:	8b 00                	mov    (%eax),%eax
  101106:	3d cd 00 00 00       	cmp    $0xcd,%eax
  10110b:	0f 87 61 07 00 00    	ja     101872 <syscall+0x78a>
  101111:	8b 04 85 bc 71 10 00 	mov    0x1071bc(,%eax,4),%eax
  101118:	ff e0                	jmp    *%eax
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  10111a:	83 ec 0c             	sub    $0xc,%esp
  10111d:	ff 75 08             	pushl  0x8(%ebp)
  101120:	e8 6d 1c 00 00       	call   102d92 <terminate_current>
  101125:	83 c4 10             	add    $0x10,%esp
  101128:	e9 6a 07 00 00       	jmp    101897 <syscall+0x7af>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
  10112d:	8b 45 08             	mov    0x8(%ebp),%eax
  101130:	8b 40 04             	mov    0x4(%eax),%eax
  101133:	83 ec 0c             	sub    $0xc,%esp
  101136:	50                   	push   %eax
  101137:	e8 37 1a 00 00       	call   102b73 <get_task_by_pid>
  10113c:	83 c4 10             	add    $0x10,%esp
  10113f:	89 c2                	mov    %eax,%edx
  101141:	8b 45 08             	mov    0x8(%ebp),%eax
  101144:	89 10                	mov    %edx,(%eax)
    }

  101146:	e9 49 07 00 00       	jmp    101894 <syscall+0x7ac>
    if(ramfs_vga_writers()) {
        return;
    }

  10114b:	8b 45 08             	mov    0x8(%ebp),%eax
  10114e:	8b 40 04             	mov    0x4(%eax),%eax
  101151:	83 ec 0c             	sub    $0xc,%esp
  101154:	50                   	push   %eax
  101155:	e8 5e 29 00 00       	call   103ab8 <strclone>
  10115a:	83 c4 10             	add    $0x10,%esp
  10115d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    doKPutc:

  101160:	8b 45 08             	mov    0x8(%ebp),%eax
  101163:	8b 40 0c             	mov    0xc(%eax),%eax
  101166:	89 45 a8             	mov    %eax,-0x58(%ebp)
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  101169:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  101170:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
  101177:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
  10117e:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
    }

  101185:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
  101189:	74 53                	je     1011de <syscall+0xf6>
    if (y > 24) {
  10118b:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10118e:	8b 00                	mov    (%eax),%eax
  101190:	83 ec 0c             	sub    $0xc,%esp
  101193:	50                   	push   %eax
  101194:	e8 1f 29 00 00       	call   103ab8 <strclone>
  101199:	83 c4 10             	add    $0x10,%esp
  10119c:	89 45 90             	mov    %eax,-0x70(%ebp)
        int i;
  10119f:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1011a2:	8b 40 04             	mov    0x4(%eax),%eax
  1011a5:	83 ec 0c             	sub    $0xc,%esp
  1011a8:	50                   	push   %eax
  1011a9:	e8 0a 29 00 00       	call   103ab8 <strclone>
  1011ae:	83 c4 10             	add    $0x10,%esp
  1011b1:	89 45 94             	mov    %eax,-0x6c(%ebp)
        for (i = 0; i < 2 * 24 * 80; i++) {
  1011b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1011b7:	8b 40 08             	mov    0x8(%eax),%eax
  1011ba:	83 ec 0c             	sub    $0xc,%esp
  1011bd:	50                   	push   %eax
  1011be:	e8 f5 28 00 00       	call   103ab8 <strclone>
  1011c3:	83 c4 10             	add    $0x10,%esp
  1011c6:	89 45 98             	mov    %eax,-0x68(%ebp)
            video[i] = video[i + 160];
  1011c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1011cc:	8b 40 0c             	mov    0xc(%eax),%eax
  1011cf:	83 ec 0c             	sub    $0xc,%esp
  1011d2:	50                   	push   %eax
  1011d3:	e8 e0 28 00 00       	call   103ab8 <strclone>
  1011d8:	83 c4 10             	add    $0x10,%esp
  1011db:	89 45 9c             	mov    %eax,-0x64(%ebp)
        }

        for (; i < 2 * 25 * 80; i++) {
  1011de:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1011e1:	8b 5d 98             	mov    -0x68(%ebp),%ebx
  1011e4:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1011e7:	8b 55 90             	mov    -0x70(%ebp),%edx
  1011ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1011ed:	8b 40 08             	mov    0x8(%eax),%eax
  1011f0:	83 ec 08             	sub    $0x8,%esp
  1011f3:	56                   	push   %esi
  1011f4:	53                   	push   %ebx
  1011f5:	51                   	push   %ecx
  1011f6:	52                   	push   %edx
  1011f7:	50                   	push   %eax
  1011f8:	ff 75 a4             	pushl  -0x5c(%ebp)
  1011fb:	e8 bd 31 00 00       	call   1043bd <vfs_exec>
  101200:	83 c4 20             	add    $0x20,%esp
  101203:	8b 55 08             	mov    0x8(%ebp),%edx
  101206:	89 02                	mov    %eax,(%edx)
            video[i] = 0;
        }
  101208:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
  10120c:	74 3c                	je     10124a <syscall+0x162>
        y--;
  10120e:	8b 45 90             	mov    -0x70(%ebp),%eax
  101211:	83 ec 0c             	sub    $0xc,%esp
  101214:	50                   	push   %eax
  101215:	e8 9a 26 00 00       	call   1038b4 <free>
  10121a:	83 c4 10             	add    $0x10,%esp
    }
  10121d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  101220:	83 ec 0c             	sub    $0xc,%esp
  101223:	50                   	push   %eax
  101224:	e8 8b 26 00 00       	call   1038b4 <free>
  101229:	83 c4 10             	add    $0x10,%esp

  10122c:	8b 45 98             	mov    -0x68(%ebp),%eax
  10122f:	83 ec 0c             	sub    $0xc,%esp
  101232:	50                   	push   %eax
  101233:	e8 7c 26 00 00       	call   1038b4 <free>
  101238:	83 c4 10             	add    $0x10,%esp
    video[2 * (y * 80 + x)] = c;
  10123b:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10123e:	83 ec 0c             	sub    $0xc,%esp
  101241:	50                   	push   %eax
  101242:	e8 6d 26 00 00       	call   1038b4 <free>
  101247:	83 c4 10             	add    $0x10,%esp
    video[2 * (y * 80 + x) + 1] = color;

    x++;
  10124a:	83 ec 0c             	sub    $0xc,%esp
  10124d:	ff 75 a4             	pushl  -0x5c(%ebp)
  101250:	e8 5f 26 00 00       	call   1038b4 <free>
  101255:	83 c4 10             	add    $0x10,%esp
    kprintf_res++;
}
  101258:	e9 37 06 00 00       	jmp    101894 <syscall+0x7ac>

static void kputs(const char* s) {
    while (*s) {
        kputc(*s++);
  10125d:	e8 07 19 00 00       	call   102b69 <get_current_task>
  101262:	8b 40 20             	mov    0x20(%eax),%eax
  101265:	89 c2                	mov    %eax,%edx
  101267:	8b 45 08             	mov    0x8(%ebp),%eax
  10126a:	89 10                	mov    %edx,(%eax)
    }
}
  10126c:	e9 23 06 00 00       	jmp    101894 <syscall+0x7ac>

static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  101271:	83 ec 0c             	sub    $0xc,%esp
  101274:	ff 75 08             	pushl  0x8(%ebp)
  101277:	e8 0b 1e 00 00       	call   103087 <schedule>
  10127c:	83 c4 10             	add    $0x10,%esp
  10127f:	89 45 08             	mov    %eax,0x8(%ebp)
    char* p;

  101282:	e9 0d 06 00 00       	jmp    101894 <syscall+0x7ac>
    if (base > 36) {
        return;
    }

  101287:	8b 45 08             	mov    0x8(%ebp),%eax
  10128a:	8b 40 04             	mov    0x4(%eax),%eax
  10128d:	89 45 ac             	mov    %eax,-0x54(%ebp)
    p = buf + 64;
  101290:	e8 d4 18 00 00       	call   102b69 <get_current_task>
  101295:	8b 40 28             	mov    0x28(%eax),%eax
  101298:	85 c0                	test   %eax,%eax
  10129a:	0f 84 ea 05 00 00    	je     10188a <syscall+0x7a2>
  1012a0:	e8 c4 18 00 00       	call   102b69 <get_current_task>
  1012a5:	8b 40 28             	mov    0x28(%eax),%eax
  1012a8:	83 ec 08             	sub    $0x8,%esp
  1012ab:	50                   	push   %eax
  1012ac:	ff 75 ac             	pushl  -0x54(%ebp)
  1012af:	e8 e1 27 00 00       	call   103a95 <strcpy>
  1012b4:	83 c4 10             	add    $0x10,%esp
    *p = '\0';
    do {
  1012b7:	e9 d8 05 00 00       	jmp    101894 <syscall+0x7ac>
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
  1012bc:	e8 c7 29 00 00       	call   103c88 <vfs_reset_error>
}
  1012c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1012c4:	8b 40 04             	mov    0x4(%eax),%eax
  1012c7:	83 ec 0c             	sub    $0xc,%esp
  1012ca:	50                   	push   %eax
  1012cb:	e8 e8 27 00 00       	call   103ab8 <strclone>
  1012d0:	83 c4 10             	add    $0x10,%esp
  1012d3:	89 45 b0             	mov    %eax,-0x50(%ebp)

void clrscr(void) {
  1012d6:	e8 8e 18 00 00       	call   102b69 <get_current_task>
  1012db:	8b 40 28             	mov    0x28(%eax),%eax
  1012de:	85 c0                	test   %eax,%eax
  1012e0:	74 14                	je     1012f6 <syscall+0x20e>
  1012e2:	e8 82 18 00 00       	call   102b69 <get_current_task>
  1012e7:	8b 40 28             	mov    0x28(%eax),%eax
  1012ea:	83 ec 0c             	sub    $0xc,%esp
  1012ed:	50                   	push   %eax
  1012ee:	e8 c1 25 00 00       	call   1038b4 <free>
  1012f3:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1012f6:	83 ec 0c             	sub    $0xc,%esp
  1012f9:	ff 75 b0             	pushl  -0x50(%ebp)
  1012fc:	e8 ae 35 00 00       	call   1048af <vfs_resolve_path>
  101301:	83 c4 10             	add    $0x10,%esp
  101304:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        video[i] = 0;
    }
  101307:	8b 45 08             	mov    0x8(%ebp),%eax
  10130a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  101310:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
  101314:	74 14                	je     10132a <syscall+0x242>
    color = 0x07;
  101316:	e8 4e 18 00 00       	call   102b69 <get_current_task>
  10131b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  10131e:	89 50 28             	mov    %edx,0x28(%eax)

  101321:	8b 45 08             	mov    0x8(%ebp),%eax
  101324:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    x = y = 0;
}

  10132a:	83 ec 0c             	sub    $0xc,%esp
  10132d:	ff 75 b0             	pushl  -0x50(%ebp)
  101330:	e8 7f 25 00 00       	call   1038b4 <free>
  101335:	83 c4 10             	add    $0x10,%esp
void setclr(char clr) {
    color = clr;
  101338:	e9 57 05 00 00       	jmp    101894 <syscall+0x7ac>
}

int kprintf(const char* fmt, ...) {
    va_list ap;
  10133d:	e8 46 29 00 00       	call   103c88 <vfs_reset_error>
    const char* s;
  101342:	8b 45 08             	mov    0x8(%ebp),%eax
  101345:	8b 40 04             	mov    0x4(%eax),%eax
  101348:	83 ec 0c             	sub    $0xc,%esp
  10134b:	50                   	push   %eax
  10134c:	e8 67 27 00 00       	call   103ab8 <strclone>
  101351:	83 c4 10             	add    $0x10,%esp
  101354:	89 45 b8             	mov    %eax,-0x48(%ebp)
    unsigned long n;
  101357:	8b 45 08             	mov    0x8(%ebp),%eax
  10135a:	8b 40 08             	mov    0x8(%eax),%eax
  10135d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    char c;

  101360:	83 ec 08             	sub    $0x8,%esp
  101363:	ff 75 bc             	pushl  -0x44(%ebp)
  101366:	ff 75 b8             	pushl  -0x48(%ebp)
  101369:	e8 15 2e 00 00       	call   104183 <vfs_open>
  10136e:	83 c4 10             	add    $0x10,%esp
  101371:	89 45 c0             	mov    %eax,-0x40(%ebp)
    va_start(ap, fmt);
  101374:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  101378:	74 18                	je     101392 <syscall+0x2aa>
    kprintf_res = 0;
  10137a:	83 ec 0c             	sub    $0xc,%esp
  10137d:	ff 75 c0             	pushl  -0x40(%ebp)
  101380:	e8 23 18 00 00       	call   102ba8 <register_handle>
  101385:	83 c4 10             	add    $0x10,%esp
    while (*fmt) {
  101388:	8b 55 c0             	mov    -0x40(%ebp),%edx
  10138b:	8b 45 08             	mov    0x8(%ebp),%eax
  10138e:	89 10                	mov    %edx,(%eax)
  101390:	eb 09                	jmp    10139b <syscall+0x2b3>
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
            case 's':
  101392:	8b 45 08             	mov    0x8(%ebp),%eax
  101395:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                s = va_arg(ap, char*);
                kputs(s);
                break;
  10139b:	83 ec 0c             	sub    $0xc,%esp
  10139e:	ff 75 b8             	pushl  -0x48(%ebp)
  1013a1:	e8 0e 25 00 00       	call   1038b4 <free>
  1013a6:	83 c4 10             	add    $0x10,%esp
            case 'd':
            case 'u':
  1013a9:	e9 e6 04 00 00       	jmp    101894 <syscall+0x7ac>
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
                break;
            case 'x':
  1013ae:	e8 d5 28 00 00       	call   103c88 <vfs_reset_error>
            case 'p':
  1013b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1013b6:	8b 40 04             	mov    0x4(%eax),%eax
  1013b9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
                n = va_arg(ap, unsigned long int);
  1013bc:	83 ec 0c             	sub    $0xc,%esp
  1013bf:	ff 75 c4             	pushl  -0x3c(%ebp)
  1013c2:	e8 2e 18 00 00       	call   102bf5 <unregister_handle>
  1013c7:	83 c4 10             	add    $0x10,%esp
  1013ca:	85 c0                	test   %eax,%eax
  1013cc:	75 1c                	jne    1013ea <syscall+0x302>
                kputn(n, 16);
  1013ce:	83 ec 0c             	sub    $0xc,%esp
  1013d1:	ff 75 c4             	pushl  -0x3c(%ebp)
  1013d4:	e8 07 2e 00 00       	call   1041e0 <vfs_close>
  1013d9:	83 c4 10             	add    $0x10,%esp
                break;
            case 'c':
  1013dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1013df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                kputc(c);
                break;
            case '%':
                kputc('%');
                break;
            case '\0':
  1013e5:	e9 aa 04 00 00       	jmp    101894 <syscall+0x7ac>
                break;
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
                break;
            case '%':
  1013ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ed:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
                kputc('%');
                break;
            case '\0':
  1013f3:	e9 9c 04 00 00       	jmp    101894 <syscall+0x7ac>
                goto out;
            default:
                kputc('%');
                kputc(*fmt);
  1013f8:	e8 8b 28 00 00       	call   103c88 <vfs_reset_error>
                break;
  1013fd:	8b 45 08             	mov    0x8(%ebp),%eax
  101400:	8b 40 04             	mov    0x4(%eax),%eax
  101403:	89 45 c8             	mov    %eax,-0x38(%ebp)
            }
  101406:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10140a:	74 25                	je     101431 <syscall+0x349>
        } else {
  10140c:	8b 45 08             	mov    0x8(%ebp),%eax
  10140f:	8b 50 0c             	mov    0xc(%eax),%edx
  101412:	8b 45 08             	mov    0x8(%ebp),%eax
  101415:	8b 40 08             	mov    0x8(%eax),%eax
  101418:	6a 01                	push   $0x1
  10141a:	52                   	push   %edx
  10141b:	50                   	push   %eax
  10141c:	ff 75 c8             	pushl  -0x38(%ebp)
  10141f:	e8 7b 2e 00 00       	call   10429f <vfs_write>
  101424:	83 c4 10             	add    $0x10,%esp
  101427:	8b 55 08             	mov    0x8(%ebp),%edx
  10142a:	89 02                	mov    %eax,(%edx)
        }

        fmt++;
    }

    out:
  10142c:	e9 63 04 00 00       	jmp    101894 <syscall+0x7ac>
            }
        } else {
            kputc(*fmt);
        }

        fmt++;
  101431:	8b 45 08             	mov    0x8(%ebp),%eax
  101434:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    }

    out:
  10143a:	e9 55 04 00 00       	jmp    101894 <syscall+0x7ac>
    va_end(ap);

    return kprintf_res;
}
  10143f:	e8 44 28 00 00       	call   103c88 <vfs_reset_error>

  101444:	8b 45 08             	mov    0x8(%ebp),%eax
  101447:	8b 40 04             	mov    0x4(%eax),%eax
  10144a:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10144d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  101451:	74 25                	je     101478 <syscall+0x390>
  101453:	8b 45 08             	mov    0x8(%ebp),%eax
  101456:	8b 50 0c             	mov    0xc(%eax),%edx
  101459:	8b 45 08             	mov    0x8(%ebp),%eax
  10145c:	8b 40 08             	mov    0x8(%eax),%eax
  10145f:	6a 01                	push   $0x1
  101461:	52                   	push   %edx
  101462:	50                   	push   %eax
  101463:	ff 75 cc             	pushl  -0x34(%ebp)
  101466:	e8 ab 2d 00 00       	call   104216 <vfs_read>
  10146b:	83 c4 10             	add    $0x10,%esp
  10146e:	8b 55 08             	mov    0x8(%ebp),%edx
  101471:	89 02                	mov    %eax,(%edx)
  101473:	e9 1c 04 00 00       	jmp    101894 <syscall+0x7ac>
  101478:	8b 45 08             	mov    0x8(%ebp),%eax
  10147b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  101481:	e9 0e 04 00 00       	jmp    101894 <syscall+0x7ac>
  101486:	e8 fd 27 00 00       	call   103c88 <vfs_reset_error>
  10148b:	8b 45 08             	mov    0x8(%ebp),%eax
  10148e:	8b 40 04             	mov    0x4(%eax),%eax
  101491:	83 ec 0c             	sub    $0xc,%esp
  101494:	50                   	push   %eax
  101495:	e8 1e 26 00 00       	call   103ab8 <strclone>
  10149a:	83 c4 10             	add    $0x10,%esp
  10149d:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1014a0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
  1014a7:	e8 37 0f 00 00       	call   1023e3 <ramfs_fifo_driver_struct>
  1014ac:	83 ec 04             	sub    $0x4,%esp
  1014af:	8d 55 a0             	lea    -0x60(%ebp),%edx
  1014b2:	52                   	push   %edx
  1014b3:	50                   	push   %eax
  1014b4:	ff 75 d0             	pushl  -0x30(%ebp)
  1014b7:	e8 28 2c 00 00       	call   1040e4 <vfs_create_kfile>
  1014bc:	83 c4 10             	add    $0x10,%esp
  1014bf:	83 ec 08             	sub    $0x8,%esp
  1014c2:	6a 03                	push   $0x3
  1014c4:	ff 75 d0             	pushl  -0x30(%ebp)
  1014c7:	e8 b7 2c 00 00       	call   104183 <vfs_open>
  1014cc:	83 c4 10             	add    $0x10,%esp
  1014cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1014d2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  1014d6:	74 18                	je     1014f0 <syscall+0x408>
  1014d8:	83 ec 0c             	sub    $0xc,%esp
  1014db:	ff 75 d4             	pushl  -0x2c(%ebp)
  1014de:	e8 c5 16 00 00       	call   102ba8 <register_handle>
  1014e3:	83 c4 10             	add    $0x10,%esp
  1014e6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1014e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1014ec:	89 10                	mov    %edx,(%eax)
  1014ee:	eb 09                	jmp    1014f9 <syscall+0x411>
  1014f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1014f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  1014f9:	83 ec 0c             	sub    $0xc,%esp
  1014fc:	ff 75 d0             	pushl  -0x30(%ebp)
  1014ff:	e8 b0 23 00 00       	call   1038b4 <free>
  101504:	83 c4 10             	add    $0x10,%esp
  101507:	e9 88 03 00 00       	jmp    101894 <syscall+0x7ac>
  10150c:	e8 58 16 00 00       	call   102b69 <get_current_task>
  101511:	8b 50 2c             	mov    0x2c(%eax),%edx
  101514:	8b 45 08             	mov    0x8(%ebp),%eax
  101517:	89 10                	mov    %edx,(%eax)
  101519:	e8 6a 27 00 00       	call   103c88 <vfs_reset_error>
  10151e:	e9 71 03 00 00       	jmp    101894 <syscall+0x7ac>
  101523:	8b 45 08             	mov    0x8(%ebp),%eax
  101526:	8b 40 04             	mov    0x4(%eax),%eax
  101529:	83 ec 0c             	sub    $0xc,%esp
  10152c:	50                   	push   %eax
  10152d:	e8 f7 2d 00 00       	call   104329 <vfs_available>
  101532:	83 c4 10             	add    $0x10,%esp
  101535:	8b 55 08             	mov    0x8(%ebp),%edx
  101538:	89 02                	mov    %eax,(%edx)
  10153a:	e9 55 03 00 00       	jmp    101894 <syscall+0x7ac>
  10153f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  101546:	8b 45 08             	mov    0x8(%ebp),%eax
  101549:	8b 40 04             	mov    0x4(%eax),%eax
  10154c:	83 f8 02             	cmp    $0x2,%eax
  10154f:	74 17                	je     101568 <syscall+0x480>
  101551:	83 f8 03             	cmp    $0x3,%eax
  101554:	74 1f                	je     101575 <syscall+0x48d>
  101556:	83 f8 01             	cmp    $0x1,%eax
  101559:	75 27                	jne    101582 <syscall+0x49a>
  10155b:	e8 09 16 00 00       	call   102b69 <get_current_task>
  101560:	8b 40 30             	mov    0x30(%eax),%eax
  101563:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101566:	eb 25                	jmp    10158d <syscall+0x4a5>
  101568:	e8 fc 15 00 00       	call   102b69 <get_current_task>
  10156d:	8b 40 38             	mov    0x38(%eax),%eax
  101570:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101573:	eb 18                	jmp    10158d <syscall+0x4a5>
  101575:	e8 ef 15 00 00       	call   102b69 <get_current_task>
  10157a:	8b 40 34             	mov    0x34(%eax),%eax
  10157d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101580:	eb 0b                	jmp    10158d <syscall+0x4a5>
  101582:	e8 e2 15 00 00       	call   102b69 <get_current_task>
  101587:	8b 40 30             	mov    0x30(%eax),%eax
  10158a:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10158d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101590:	8b 45 08             	mov    0x8(%ebp),%eax
  101593:	89 10                	mov    %edx,(%eax)
  101595:	e9 fa 02 00 00       	jmp    101894 <syscall+0x7ac>
  10159a:	e8 e9 26 00 00       	call   103c88 <vfs_reset_error>
  10159f:	8b 45 08             	mov    0x8(%ebp),%eax
  1015a2:	8b 40 08             	mov    0x8(%eax),%eax
  1015a5:	83 ec 0c             	sub    $0xc,%esp
  1015a8:	50                   	push   %eax
  1015a9:	e8 0a 25 00 00       	call   103ab8 <strclone>
  1015ae:	83 c4 10             	add    $0x10,%esp
  1015b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1015b4:	c7 45 e4 02 00 00 00 	movl   $0x2,-0x1c(%ebp)
  1015bb:	8b 45 08             	mov    0x8(%ebp),%eax
  1015be:	8b 40 04             	mov    0x4(%eax),%eax
  1015c1:	83 f8 02             	cmp    $0x2,%eax
  1015c4:	75 07                	jne    1015cd <syscall+0x4e5>
  1015c6:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
  1015cd:	83 ec 08             	sub    $0x8,%esp
  1015d0:	ff 75 e4             	pushl  -0x1c(%ebp)
  1015d3:	ff 75 dc             	pushl  -0x24(%ebp)
  1015d6:	e8 a8 2b 00 00       	call   104183 <vfs_open>
  1015db:	83 c4 10             	add    $0x10,%esp
  1015de:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1015e1:	83 ec 0c             	sub    $0xc,%esp
  1015e4:	ff 75 dc             	pushl  -0x24(%ebp)
  1015e7:	e8 c8 22 00 00       	call   1038b4 <free>
  1015ec:	83 c4 10             	add    $0x10,%esp
  1015ef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  1015f3:	75 0e                	jne    101603 <syscall+0x51b>
  1015f5:	8b 45 08             	mov    0x8(%ebp),%eax
  1015f8:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
  1015fe:	e9 91 02 00 00       	jmp    101894 <syscall+0x7ac>
  101603:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10160a:	8b 45 08             	mov    0x8(%ebp),%eax
  10160d:	8b 40 04             	mov    0x4(%eax),%eax
  101610:	83 f8 02             	cmp    $0x2,%eax
  101613:	74 22                	je     101637 <syscall+0x54f>
  101615:	83 f8 03             	cmp    $0x3,%eax
  101618:	74 35                	je     10164f <syscall+0x567>
  10161a:	83 f8 01             	cmp    $0x1,%eax
  10161d:	75 48                	jne    101667 <syscall+0x57f>
  10161f:	e8 45 15 00 00       	call   102b69 <get_current_task>
  101624:	8b 40 30             	mov    0x30(%eax),%eax
  101627:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10162a:	e8 3a 15 00 00       	call   102b69 <get_current_task>
  10162f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101632:	89 50 30             	mov    %edx,0x30(%eax)
  101635:	eb 46                	jmp    10167d <syscall+0x595>
  101637:	e8 2d 15 00 00       	call   102b69 <get_current_task>
  10163c:	8b 40 38             	mov    0x38(%eax),%eax
  10163f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101642:	e8 22 15 00 00       	call   102b69 <get_current_task>
  101647:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10164a:	89 50 38             	mov    %edx,0x38(%eax)
  10164d:	eb 2e                	jmp    10167d <syscall+0x595>
  10164f:	e8 15 15 00 00       	call   102b69 <get_current_task>
  101654:	8b 40 34             	mov    0x34(%eax),%eax
  101657:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10165a:	e8 0a 15 00 00       	call   102b69 <get_current_task>
  10165f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101662:	89 50 34             	mov    %edx,0x34(%eax)
  101665:	eb 16                	jmp    10167d <syscall+0x595>
  101667:	e8 fd 14 00 00       	call   102b69 <get_current_task>
  10166c:	8b 40 30             	mov    0x30(%eax),%eax
  10166f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101672:	e8 f2 14 00 00       	call   102b69 <get_current_task>
  101677:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10167a:	89 50 30             	mov    %edx,0x30(%eax)
  10167d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  101681:	74 0e                	je     101691 <syscall+0x5a9>
  101683:	83 ec 0c             	sub    $0xc,%esp
  101686:	ff 75 e8             	pushl  -0x18(%ebp)
  101689:	e8 52 2b 00 00       	call   1041e0 <vfs_close>
  10168e:	83 c4 10             	add    $0x10,%esp
  101691:	8b 45 08             	mov    0x8(%ebp),%eax
  101694:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10169a:	e9 f5 01 00 00       	jmp    101894 <syscall+0x7ac>
  10169f:	83 ec 0c             	sub    $0xc,%esp
  1016a2:	ff 75 08             	pushl  0x8(%ebp)
  1016a5:	e8 9c 1c 00 00       	call   103346 <return_rpc_call>
  1016aa:	83 c4 10             	add    $0x10,%esp
  1016ad:	89 45 08             	mov    %eax,0x8(%ebp)
  1016b0:	e9 df 01 00 00       	jmp    101894 <syscall+0x7ac>
  1016b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1016b8:	8b 40 04             	mov    0x4(%eax),%eax
  1016bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1016be:	e9 d1 01 00 00       	jmp    101894 <syscall+0x7ac>
  1016c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1016c6:	8b 40 04             	mov    0x4(%eax),%eax
  1016c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1016cc:	e8 98 14 00 00       	call   102b69 <get_current_task>
  1016d1:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016d4:	85 c0                	test   %eax,%eax
  1016d6:	0f 85 b1 01 00 00    	jne    10188d <syscall+0x7a5>
  1016dc:	e8 88 14 00 00       	call   102b69 <get_current_task>
  1016e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1016e4:	89 50 1c             	mov    %edx,0x1c(%eax)
  1016e7:	e9 a8 01 00 00       	jmp    101894 <syscall+0x7ac>
  1016ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1016ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  1016f5:	8b 45 08             	mov    0x8(%ebp),%eax
  1016f8:	8b 40 04             	mov    0x4(%eax),%eax
  1016fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1016fe:	e8 66 14 00 00       	call   102b69 <get_current_task>
  101703:	8b 40 18             	mov    0x18(%eax),%eax
  101706:	85 c0                	test   %eax,%eax
  101708:	0f 84 82 01 00 00    	je     101890 <syscall+0x7a8>
  10170e:	e8 56 14 00 00       	call   102b69 <get_current_task>
  101713:	8b 40 18             	mov    0x18(%eax),%eax
  101716:	8b 58 10             	mov    0x10(%eax),%ebx
  101719:	e8 4b 14 00 00       	call   102b69 <get_current_task>
  10171e:	8b 40 18             	mov    0x18(%eax),%eax
  101721:	8b 40 0c             	mov    0xc(%eax),%eax
  101724:	83 ec 04             	sub    $0x4,%esp
  101727:	53                   	push   %ebx
  101728:	50                   	push   %eax
  101729:	ff 75 f4             	pushl  -0xc(%ebp)
  10172c:	e8 05 22 00 00       	call   103936 <memcpy>
  101731:	83 c4 10             	add    $0x10,%esp
  101734:	e8 30 14 00 00       	call   102b69 <get_current_task>
  101739:	8b 40 18             	mov    0x18(%eax),%eax
  10173c:	8b 50 10             	mov    0x10(%eax),%edx
  10173f:	8b 45 08             	mov    0x8(%ebp),%eax
  101742:	89 10                	mov    %edx,(%eax)
  101744:	e9 4b 01 00 00       	jmp    101894 <syscall+0x7ac>
  101749:	8b 45 08             	mov    0x8(%ebp),%eax
  10174c:	8b 40 04             	mov    0x4(%eax),%eax
  10174f:	83 ec 0c             	sub    $0xc,%esp
  101752:	50                   	push   %eax
  101753:	e8 a9 f7 ff ff       	call   100f01 <register_irq_rpc>
  101758:	83 c4 10             	add    $0x10,%esp
  10175b:	8b 55 08             	mov    0x8(%ebp),%edx
  10175e:	89 02                	mov    %eax,(%edx)
  101760:	e9 2f 01 00 00       	jmp    101894 <syscall+0x7ac>
  101765:	8b 45 08             	mov    0x8(%ebp),%eax
  101768:	8b 40 04             	mov    0x4(%eax),%eax
  10176b:	25 ff ff 00 00       	and    $0xffff,%eax
  101770:	83 ec 0c             	sub    $0xc,%esp
  101773:	50                   	push   %eax
  101774:	e8 9d 06 00 00       	call   101e16 <require_port>
  101779:	83 c4 10             	add    $0x10,%esp
  10177c:	8b 55 08             	mov    0x8(%ebp),%edx
  10177f:	89 02                	mov    %eax,(%edx)
  101781:	e9 0e 01 00 00       	jmp    101894 <syscall+0x7ac>
  101786:	8b 45 08             	mov    0x8(%ebp),%eax
  101789:	8b 48 0c             	mov    0xc(%eax),%ecx
  10178c:	8b 45 08             	mov    0x8(%ebp),%eax
  10178f:	8b 40 08             	mov    0x8(%eax),%eax
  101792:	89 c2                	mov    %eax,%edx
  101794:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  10179a:	8b 45 08             	mov    0x8(%ebp),%eax
  10179d:	8b 40 04             	mov    0x4(%eax),%eax
  1017a0:	83 ec 04             	sub    $0x4,%esp
  1017a3:	51                   	push   %ecx
  1017a4:	52                   	push   %edx
  1017a5:	50                   	push   %eax
  1017a6:	e8 6f 07 00 00       	call   101f1a <port_out>
  1017ab:	83 c4 10             	add    $0x10,%esp
  1017ae:	8b 55 08             	mov    0x8(%ebp),%edx
  1017b1:	89 02                	mov    %eax,(%edx)
  1017b3:	e9 dc 00 00 00       	jmp    101894 <syscall+0x7ac>
  1017b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1017bb:	8b 40 08             	mov    0x8(%eax),%eax
  1017be:	89 c2                	mov    %eax,%edx
  1017c0:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  1017c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1017c9:	8b 40 04             	mov    0x4(%eax),%eax
  1017cc:	83 ec 08             	sub    $0x8,%esp
  1017cf:	52                   	push   %edx
  1017d0:	50                   	push   %eax
  1017d1:	e8 8c 06 00 00       	call   101e62 <port_in>
  1017d6:	83 c4 10             	add    $0x10,%esp
  1017d9:	8b 55 08             	mov    0x8(%ebp),%edx
  1017dc:	89 02                	mov    %eax,(%edx)
  1017de:	e9 b1 00 00 00       	jmp    101894 <syscall+0x7ac>
  1017e3:	8b 45 08             	mov    0x8(%ebp),%eax
  1017e6:	8b 40 04             	mov    0x4(%eax),%eax
  1017e9:	83 ec 08             	sub    $0x8,%esp
  1017ec:	50                   	push   %eax
  1017ed:	68 a0 71 10 00       	push   $0x1071a0
  1017f2:	e8 76 ed ff ff       	call   10056d <kprintf>
  1017f7:	83 c4 10             	add    $0x10,%esp
  1017fa:	89 c2                	mov    %eax,%edx
  1017fc:	8b 45 08             	mov    0x8(%ebp),%eax
  1017ff:	89 10                	mov    %edx,(%eax)
  101801:	e9 8e 00 00 00       	jmp    101894 <syscall+0x7ac>
  101806:	8b 45 08             	mov    0x8(%ebp),%eax
  101809:	8b 40 04             	mov    0x4(%eax),%eax
  10180c:	83 ec 08             	sub    $0x8,%esp
  10180f:	50                   	push   %eax
  101810:	68 a3 71 10 00       	push   $0x1071a3
  101815:	e8 53 ed ff ff       	call   10056d <kprintf>
  10181a:	83 c4 10             	add    $0x10,%esp
  10181d:	89 c2                	mov    %eax,%edx
  10181f:	8b 45 08             	mov    0x8(%ebp),%eax
  101822:	89 10                	mov    %edx,(%eax)
  101824:	eb 6e                	jmp    101894 <syscall+0x7ac>
  101826:	8b 45 08             	mov    0x8(%ebp),%eax
  101829:	8b 40 04             	mov    0x4(%eax),%eax
  10182c:	83 ec 0c             	sub    $0xc,%esp
  10182f:	50                   	push   %eax
  101830:	e8 1a 39 00 00       	call   10514f <vmm_alloc_ucont>
  101835:	83 c4 10             	add    $0x10,%esp
  101838:	89 c2                	mov    %eax,%edx
  10183a:	8b 45 08             	mov    0x8(%ebp),%eax
  10183d:	89 10                	mov    %edx,(%eax)
  10183f:	eb 53                	jmp    101894 <syscall+0x7ac>
  101841:	8b 45 08             	mov    0x8(%ebp),%eax
  101844:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10184a:	8b 45 08             	mov    0x8(%ebp),%eax
  10184d:	8b 40 04             	mov    0x4(%eax),%eax
  101850:	3d ff 0f 40 01       	cmp    $0x1400fff,%eax
  101855:	76 3c                	jbe    101893 <syscall+0x7ab>
  101857:	8b 45 08             	mov    0x8(%ebp),%eax
  10185a:	8b 40 04             	mov    0x4(%eax),%eax
  10185d:	83 ec 0c             	sub    $0xc,%esp
  101860:	50                   	push   %eax
  101861:	e8 4f 37 00 00       	call   104fb5 <vmm_free>
  101866:	83 c4 10             	add    $0x10,%esp
  101869:	eb 29                	jmp    101894 <syscall+0x7ac>
  10186b:	e8 9d 02 00 00       	call   101b0d <pmm_print_stats>
  101870:	eb 22                	jmp    101894 <syscall+0x7ac>
  101872:	8b 45 08             	mov    0x8(%ebp),%eax
  101875:	8b 00                	mov    (%eax),%eax
  101877:	83 ec 08             	sub    $0x8,%esp
  10187a:	50                   	push   %eax
  10187b:	68 a6 71 10 00       	push   $0x1071a6
  101880:	e8 e8 ec ff ff       	call   10056d <kprintf>
  101885:	83 c4 10             	add    $0x10,%esp
  101888:	eb 0a                	jmp    101894 <syscall+0x7ac>
        return;
    }

    p = buf + 64;
    *p = '\0';
    do {
  10188a:	90                   	nop    
  10188b:	eb 07                	jmp    101894 <syscall+0x7ac>
  10188d:	90                   	nop    
  10188e:	eb 04                	jmp    101894 <syscall+0x7ac>
  101890:	90                   	nop    
  101891:	eb 01                	jmp    101894 <syscall+0x7ac>
  101893:	90                   	nop    
  101894:	8b 45 08             	mov    0x8(%ebp),%eax
  101897:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10189a:	83 c4 00             	add    $0x0,%esp
  10189d:	5b                   	pop    %ebx
  10189e:	5e                   	pop    %esi
  10189f:	5d                   	pop    %ebp
  1018a0:	c3                   	ret    

001018a1 <kernel_main>:
  1018a1:	55                   	push   %ebp
  1018a2:	89 e5                	mov    %esp,%ebp
  1018a4:	83 ec 18             	sub    $0x18,%esp
  1018a7:	e8 d7 39 00 00       	call   105283 <vmm_init>
  1018ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1018af:	83 ec 0c             	sub    $0xc,%esp
  1018b2:	68 f4 74 10 00       	push   $0x1074f4
  1018b7:	e8 b1 ec ff ff       	call   10056d <kprintf>
  1018bc:	83 c4 10             	add    $0x10,%esp
  1018bf:	83 ec 08             	sub    $0x8,%esp
  1018c2:	6a 34                	push   $0x34
  1018c4:	6a 43                	push   $0x43
  1018c6:	e8 7c 07 00 00       	call   102047 <outb>
  1018cb:	83 c4 10             	add    $0x10,%esp
  1018ce:	83 ec 08             	sub    $0x8,%esp
  1018d1:	6a 00                	push   $0x0
  1018d3:	6a 40                	push   $0x40
  1018d5:	e8 6d 07 00 00       	call   102047 <outb>
  1018da:	83 c4 10             	add    $0x10,%esp
  1018dd:	83 ec 08             	sub    $0x8,%esp
  1018e0:	6a 08                	push   $0x8
  1018e2:	6a 40                	push   $0x40
  1018e4:	e8 5e 07 00 00       	call   102047 <outb>
  1018e9:	83 c4 10             	add    $0x10,%esp
  1018ec:	83 ec 0c             	sub    $0xc,%esp
  1018ef:	68 0d 75 10 00       	push   $0x10750d
  1018f4:	e8 74 ec ff ff       	call   10056d <kprintf>
  1018f9:	83 c4 10             	add    $0x10,%esp
  1018fc:	e8 e2 2f 00 00       	call   1048e3 <vfs_init_root>
  101901:	e8 be 0a 00 00       	call   1023c4 <ramfs_fifo_init>
  101906:	e8 91 07 00 00       	call   10209c <ramfs_block_init>
  10190b:	8b 55 08             	mov    0x8(%ebp),%edx
  10190e:	8b 45 08             	mov    0x8(%ebp),%eax
  101911:	83 ec 04             	sub    $0x4,%esp
  101914:	6a 00                	push   $0x0
  101916:	52                   	push   %edx
  101917:	50                   	push   %eax
  101918:	e8 43 36 00 00       	call   104f60 <map_address_active>
  10191d:	83 c4 10             	add    $0x10,%esp
  101920:	8b 45 08             	mov    0x8(%ebp),%eax
  101923:	8b 40 18             	mov    0x18(%eax),%eax
  101926:	89 c2                	mov    %eax,%edx
  101928:	8b 45 08             	mov    0x8(%ebp),%eax
  10192b:	8b 40 18             	mov    0x18(%eax),%eax
  10192e:	83 ec 04             	sub    $0x4,%esp
  101931:	6a 00                	push   $0x0
  101933:	52                   	push   %edx
  101934:	50                   	push   %eax
  101935:	e8 26 36 00 00       	call   104f60 <map_address_active>
  10193a:	83 c4 10             	add    $0x10,%esp
  10193d:	8b 45 08             	mov    0x8(%ebp),%eax
  101940:	8b 00                	mov    (%eax),%eax
  101942:	83 e0 08             	and    $0x8,%eax
  101945:	85 c0                	test   %eax,%eax
  101947:	0f 84 9b 00 00 00    	je     1019e8 <kernel_main+0x147>
  10194d:	8b 45 08             	mov    0x8(%ebp),%eax
  101950:	8b 40 18             	mov    0x18(%eax),%eax
  101953:	8b 40 04             	mov    0x4(%eax),%eax
  101956:	89 c2                	mov    %eax,%edx
  101958:	8b 45 08             	mov    0x8(%ebp),%eax
  10195b:	8b 40 18             	mov    0x18(%eax),%eax
  10195e:	8b 00                	mov    (%eax),%eax
  101960:	89 d1                	mov    %edx,%ecx
  101962:	29 c1                	sub    %eax,%ecx
  101964:	89 c8                	mov    %ecx,%eax
  101966:	89 c1                	mov    %eax,%ecx
  101968:	8b 45 08             	mov    0x8(%ebp),%eax
  10196b:	8b 40 18             	mov    0x18(%eax),%eax
  10196e:	8b 10                	mov    (%eax),%edx
  101970:	8b 45 08             	mov    0x8(%ebp),%eax
  101973:	8b 40 18             	mov    0x18(%eax),%eax
  101976:	8b 00                	mov    (%eax),%eax
  101978:	6a 00                	push   $0x0
  10197a:	51                   	push   %ecx
  10197b:	52                   	push   %edx
  10197c:	50                   	push   %eax
  10197d:	e8 fe 34 00 00       	call   104e80 <vmm_map_range>
  101982:	83 c4 10             	add    $0x10,%esp
  101985:	8b 45 08             	mov    0x8(%ebp),%eax
  101988:	8b 40 18             	mov    0x18(%eax),%eax
  10198b:	8b 40 04             	mov    0x4(%eax),%eax
  10198e:	89 c2                	mov    %eax,%edx
  101990:	8b 45 08             	mov    0x8(%ebp),%eax
  101993:	8b 40 18             	mov    0x18(%eax),%eax
  101996:	8b 00                	mov    (%eax),%eax
  101998:	89 d1                	mov    %edx,%ecx
  10199a:	29 c1                	sub    %eax,%ecx
  10199c:	89 c8                	mov    %ecx,%eax
  10199e:	83 ec 08             	sub    $0x8,%esp
  1019a1:	50                   	push   %eax
  1019a2:	68 24 75 10 00       	push   $0x107524
  1019a7:	e8 c1 eb ff ff       	call   10056d <kprintf>
  1019ac:	83 c4 10             	add    $0x10,%esp
  1019af:	8b 45 08             	mov    0x8(%ebp),%eax
  1019b2:	8b 40 18             	mov    0x18(%eax),%eax
  1019b5:	8b 50 04             	mov    0x4(%eax),%edx
  1019b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1019bb:	8b 40 18             	mov    0x18(%eax),%eax
  1019be:	8b 00                	mov    (%eax),%eax
  1019c0:	83 ec 04             	sub    $0x4,%esp
  1019c3:	52                   	push   %edx
  1019c4:	50                   	push   %eax
  1019c5:	68 64 75 10 00       	push   $0x107564
  1019ca:	e8 9e eb ff ff       	call   10056d <kprintf>
  1019cf:	83 c4 10             	add    $0x10,%esp
  1019d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1019d5:	8b 40 18             	mov    0x18(%eax),%eax
  1019d8:	8b 00                	mov    (%eax),%eax
  1019da:	83 ec 0c             	sub    $0xc,%esp
  1019dd:	50                   	push   %eax
  1019de:	e8 3a 0e 00 00       	call   10281d <tar_load_ramfs>
  1019e3:	83 c4 10             	add    $0x10,%esp
  1019e6:	eb 10                	jmp    1019f8 <kernel_main+0x157>
  1019e8:	83 ec 0c             	sub    $0xc,%esp
  1019eb:	68 80 75 10 00       	push   $0x107580
  1019f0:	e8 78 eb ff ff       	call   10056d <kprintf>
  1019f5:	83 c4 10             	add    $0x10,%esp
  1019f8:	83 ec 0c             	sub    $0xc,%esp
  1019fb:	68 b4 75 10 00       	push   $0x1075b4
  101a00:	e8 68 eb ff ff       	call   10056d <kprintf>
  101a05:	83 c4 10             	add    $0x10,%esp
  101a08:	e8 53 0f 00 00       	call   102960 <ramfs_vga_driver_struct>
  101a0d:	83 ec 04             	sub    $0x4,%esp
  101a10:	6a 00                	push   $0x0
  101a12:	50                   	push   %eax
  101a13:	68 d4 75 10 00       	push   $0x1075d4
  101a18:	e8 c7 26 00 00       	call   1040e4 <vfs_create_kfile>
  101a1d:	83 c4 10             	add    $0x10,%esp
  101a20:	83 ec 0c             	sub    $0xc,%esp
  101a23:	68 dd 75 10 00       	push   $0x1075dd
  101a28:	e8 3f 29 00 00       	call   10436c <vfs_exists>
  101a2d:	83 c4 10             	add    $0x10,%esp
  101a30:	85 c0                	test   %eax,%eax
  101a32:	74 2f                	je     101a63 <kernel_main+0x1c2>
  101a34:	83 ec 0c             	sub    $0xc,%esp
  101a37:	68 e8 75 10 00       	push   $0x1075e8
  101a3c:	e8 2c eb ff ff       	call   10056d <kprintf>
  101a41:	83 c4 10             	add    $0x10,%esp
  101a44:	83 ec 08             	sub    $0x8,%esp
  101a47:	6a 00                	push   $0x0
  101a49:	6a 00                	push   $0x0
  101a4b:	6a 00                	push   $0x0
  101a4d:	6a 00                	push   $0x0
  101a4f:	6a 00                	push   $0x0
  101a51:	68 dd 75 10 00       	push   $0x1075dd
  101a56:	e8 62 29 00 00       	call   1043bd <vfs_exec>
  101a5b:	83 c4 20             	add    $0x20,%esp
  101a5e:	e8 ed 10 00 00       	call   102b50 <enableScheduling>
  101a63:	eb fe                	jmp    101a63 <kernel_main+0x1c2>
  101a65:	00 00                	add    %al,(%eax)
	...

00101a68 <pmm_alloc>:
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;
  101a68:	55                   	push   %ebp
  101a69:	89 e5                	mov    %esp,%ebp
  101a6b:	57                   	push   %edi
  101a6c:	56                   	push   %esi
  101a6d:	53                   	push   %ebx
  101a6e:	83 ec 10             	sub    $0x10,%esp

static char* video = (char*) 0xb8000;
  101a71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101a78:	eb 79                	jmp    101af3 <pmm_alloc+0x8b>

  101a7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a7d:	8b 04 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%eax
  101a84:	85 c0                	test   %eax,%eax
  101a86:	74 68                	je     101af0 <pmm_alloc+0x88>
static void kputc(char c) {
    if(in_cod()) {
  101a88:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101a8f:	eb 59                	jmp    101aea <pmm_alloc+0x82>
        goto doKPutc;
  101a91:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a94:	8b 14 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%edx
  101a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101a9e:	bb 01 00 00 00       	mov    $0x1,%ebx
  101aa3:	89 de                	mov    %ebx,%esi
  101aa5:	88 c1                	mov    %al,%cl
  101aa7:	d3 e6                	shl    %cl,%esi
  101aa9:	89 f0                	mov    %esi,%eax
  101aab:	21 d0                	and    %edx,%eax
  101aad:	85 c0                	test   %eax,%eax
  101aaf:	74 36                	je     101ae7 <pmm_alloc+0x7f>
    }
  101ab1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101ab4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101ab7:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101abe:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101ac1:	be 01 00 00 00       	mov    $0x1,%esi
  101ac6:	89 f7                	mov    %esi,%edi
  101ac8:	88 d1                	mov    %dl,%cl
  101aca:	d3 e7                	shl    %cl,%edi
  101acc:	89 fa                	mov    %edi,%edx
  101ace:	f7 d2                	not    %edx
  101ad0:	21 da                	and    %ebx,%edx
  101ad2:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)

  101ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101adc:	c1 e0 05             	shl    $0x5,%eax
  101adf:	03 45 f0             	add    -0x10(%ebp),%eax
  101ae2:	c1 e0 0c             	shl    $0xc,%eax
  101ae5:	eb 1e                	jmp    101b05 <pmm_alloc+0x9d>
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
  101ae7:	ff 45 f0             	incl   -0x10(%ebp)
  101aea:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  101aee:	7e a1                	jle    101a91 <pmm_alloc+0x29>
static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;
  101af0:	ff 45 ec             	incl   -0x14(%ebp)
  101af3:	81 7d ec ff 7f 00 00 	cmpl   $0x7fff,-0x14(%ebp)
  101afa:	0f 8e 7a ff ff ff    	jle    101a7a <pmm_alloc+0x12>

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  101b00:	b8 00 00 00 00       	mov    $0x0,%eax

  101b05:	83 c4 10             	add    $0x10,%esp
  101b08:	5b                   	pop    %ebx
  101b09:	5e                   	pop    %esi
  101b0a:	5f                   	pop    %edi
  101b0b:	5d                   	pop    %ebp
  101b0c:	c3                   	ret    

00101b0d <pmm_print_stats>:
            return;
        }
  101b0d:	55                   	push   %ebp
  101b0e:	89 e5                	mov    %esp,%ebp
  101b10:	57                   	push   %edi
  101b11:	56                   	push   %esi
  101b12:	53                   	push   %ebx
  101b13:	83 ec 0c             	sub    $0xc,%esp
    }
  101b16:	a1 20 85 12 00       	mov    0x128520,%eax
  101b1b:	89 c7                	mov    %eax,%edi
  101b1d:	c1 ef 0a             	shr    $0xa,%edi
  101b20:	83 ec 0c             	sub    $0xc,%esp
  101b23:	68 00 04 00 00       	push   $0x400
  101b28:	e8 3e 00 00 00       	call   101b6b <pmm_get_free_space>
  101b2d:	83 c4 10             	add    $0x10,%esp
  101b30:	89 c3                	mov    %eax,%ebx
  101b32:	a1 20 85 12 00       	mov    0x128520,%eax
  101b37:	89 c6                	mov    %eax,%esi
  101b39:	c1 ee 14             	shr    $0x14,%esi
  101b3c:	83 ec 0c             	sub    $0xc,%esp
  101b3f:	68 00 00 10 00       	push   $0x100000
  101b44:	e8 22 00 00 00       	call   101b6b <pmm_get_free_space>
  101b49:	83 c4 10             	add    $0x10,%esp
  101b4c:	83 ec 0c             	sub    $0xc,%esp
  101b4f:	57                   	push   %edi
  101b50:	53                   	push   %ebx
  101b51:	56                   	push   %esi
  101b52:	50                   	push   %eax
  101b53:	68 10 76 10 00       	push   $0x107610
  101b58:	e8 10 ea ff ff       	call   10056d <kprintf>
  101b5d:	83 c4 20             	add    $0x20,%esp

    if(ramfs_vga_writers()) {
        return;
  101b60:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101b63:	83 c4 00             	add    $0x0,%esp
  101b66:	5b                   	pop    %ebx
  101b67:	5e                   	pop    %esi
  101b68:	5f                   	pop    %edi
  101b69:	5d                   	pop    %ebp
  101b6a:	c3                   	ret    

00101b6b <pmm_get_free_space>:
    }

  101b6b:	55                   	push   %ebp
  101b6c:	89 e5                	mov    %esp,%ebp
  101b6e:	56                   	push   %esi
  101b6f:	53                   	push   %ebx
  101b70:	83 ec 10             	sub    $0x10,%esp
    doKPutc:
  101b73:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    if ((c == '\n') || (x > 79)) {
  101b7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101b81:	eb 3c                	jmp    101bbf <pmm_get_free_space+0x54>
        x = 0;
  101b83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101b8a:	eb 2a                	jmp    101bb6 <pmm_get_free_space+0x4b>
        y++;
  101b8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101b8f:	8b 14 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%edx
  101b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b99:	bb 01 00 00 00       	mov    $0x1,%ebx
  101b9e:	89 de                	mov    %ebx,%esi
  101ba0:	88 c1                	mov    %al,%cl
  101ba2:	d3 e6                	shl    %cl,%esi
  101ba4:	89 f0                	mov    %esi,%eax
  101ba6:	21 d0                	and    %edx,%eax
  101ba8:	85 c0                	test   %eax,%eax
  101baa:	74 07                	je     101bb3 <pmm_get_free_space+0x48>
    }
  101bac:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
    }

    doKPutc:

    if ((c == '\n') || (x > 79)) {
        x = 0;
  101bb3:	ff 45 f4             	incl   -0xc(%ebp)
  101bb6:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
  101bba:	76 d0                	jbe    101b8c <pmm_get_free_space+0x21>
        return;
    }

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  101bbc:	ff 45 f0             	incl   -0x10(%ebp)
  101bbf:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
  101bc6:	76 bb                	jbe    101b83 <pmm_get_free_space+0x18>
        y++;
    }

    if (c == '\n') {
        return;
    }
  101bc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101bcb:	ba 00 00 00 00       	mov    $0x0,%edx
  101bd0:	f7 75 08             	divl   0x8(%ebp)

  101bd3:	83 c4 10             	add    $0x10,%esp
  101bd6:	5b                   	pop    %ebx
  101bd7:	5e                   	pop    %esi
  101bd8:	5d                   	pop    %ebp
  101bd9:	c3                   	ret    

00101bda <pmm_free>:
    if (y > 24) {
        int i;
  101bda:	55                   	push   %ebp
  101bdb:	89 e5                	mov    %esp,%ebp
  101bdd:	57                   	push   %edi
  101bde:	56                   	push   %esi
  101bdf:	53                   	push   %ebx
  101be0:	83 ec 10             	sub    $0x10,%esp
        for (i = 0; i < 2 * 24 * 80; i++) {
  101be3:	8b 45 08             	mov    0x8(%ebp),%eax
  101be6:	c1 e8 0c             	shr    $0xc,%eax
  101be9:	89 45 e8             	mov    %eax,-0x18(%ebp)
            video[i] = video[i + 160];
        }
  101bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101bef:	83 e0 1f             	and    $0x1f,%eax
  101bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)

  101bf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101bf8:	c1 e8 05             	shr    $0x5,%eax
  101bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
  101bfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c01:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101c04:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101c0b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101c0e:	be 01 00 00 00       	mov    $0x1,%esi
  101c13:	89 f7                	mov    %esi,%edi
  101c15:	88 d1                	mov    %dl,%cl
  101c17:	d3 e7                	shl    %cl,%edi
  101c19:	89 fa                	mov    %edi,%edx
  101c1b:	09 da                	or     %ebx,%edx
  101c1d:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)
        }
  101c24:	83 c4 10             	add    $0x10,%esp
  101c27:	5b                   	pop    %ebx
  101c28:	5e                   	pop    %esi
  101c29:	5f                   	pop    %edi
  101c2a:	5d                   	pop    %ebp
  101c2b:	c3                   	ret    

00101c2c <pmm_mark_used>:
        y--;
    }
  101c2c:	55                   	push   %ebp
  101c2d:	89 e5                	mov    %esp,%ebp
  101c2f:	57                   	push   %edi
  101c30:	56                   	push   %esi
  101c31:	53                   	push   %ebx
  101c32:	83 ec 10             	sub    $0x10,%esp

  101c35:	8b 45 08             	mov    0x8(%ebp),%eax
  101c38:	c1 e8 0c             	shr    $0xc,%eax
  101c3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;
  101c3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c41:	83 e0 1f             	and    $0x1f,%eax
  101c44:	89 45 ec             	mov    %eax,-0x14(%ebp)

  101c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c4a:	c1 e8 05             	shr    $0x5,%eax
  101c4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    x++;
    kprintf_res++;
  101c50:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c53:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101c56:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101c5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101c60:	be 01 00 00 00       	mov    $0x1,%esi
  101c65:	89 f7                	mov    %esi,%edi
  101c67:	88 d1                	mov    %dl,%cl
  101c69:	d3 e7                	shl    %cl,%edi
  101c6b:	89 fa                	mov    %edi,%edx
  101c6d:	f7 d2                	not    %edx
  101c6f:	21 da                	and    %ebx,%edx
  101c71:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)
}
  101c78:	83 c4 10             	add    $0x10,%esp
  101c7b:	5b                   	pop    %ebx
  101c7c:	5e                   	pop    %esi
  101c7d:	5f                   	pop    %edi
  101c7e:	5d                   	pop    %ebp
  101c7f:	c3                   	ret    

00101c80 <pmm_init>:

static void kputs(const char* s) {
  101c80:	55                   	push   %ebp
  101c81:	89 e5                	mov    %esp,%ebp
  101c83:	83 ec 28             	sub    $0x28,%esp
    while (*s) {
  101c86:	8b 45 08             	mov    0x8(%ebp),%eax
  101c89:	8b 40 30             	mov    0x30(%eax),%eax
  101c8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        kputc(*s++);
  101c8f:	8b 45 08             	mov    0x8(%ebp),%eax
  101c92:	8b 40 30             	mov    0x30(%eax),%eax
  101c95:	89 c2                	mov    %eax,%edx
  101c97:	8b 45 08             	mov    0x8(%ebp),%eax
  101c9a:	8b 40 2c             	mov    0x2c(%eax),%eax
  101c9d:	8d 04 02             	lea    (%edx,%eax,1),%eax
    }
  101ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

  101ca3:	83 ec 04             	sub    $0x4,%esp
  101ca6:	68 00 00 02 00       	push   $0x20000
  101cab:	6a 00                	push   $0x0
  101cad:	68 c0 85 16 00       	push   $0x1685c0
  101cb2:	e8 51 1c 00 00       	call   103908 <memset>
  101cb7:	83 c4 10             	add    $0x10,%esp
static void kputn(unsigned long x, int base) {
    char buf[65];
  101cba:	b8 c0 85 18 00       	mov    $0x1885c0,%eax
  101cbf:	83 ec 04             	sub    $0x4,%esp
  101cc2:	50                   	push   %eax
  101cc3:	68 c0 85 16 00       	push   $0x1685c0
  101cc8:	68 4d 76 10 00       	push   $0x10764d
  101ccd:	e8 9b e8 ff ff       	call   10056d <kprintf>
  101cd2:	83 c4 10             	add    $0x10,%esp
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;
  101cd5:	eb 5c                	jmp    101d33 <pmm_init+0xb3>

  101cd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101cda:	8b 40 14             	mov    0x14(%eax),%eax
  101cdd:	83 f8 01             	cmp    $0x1,%eax
  101ce0:	75 4d                	jne    101d2f <pmm_init+0xaf>
    if (base > 36) {
  101ce2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101ce5:	8b 50 08             	mov    0x8(%eax),%edx
  101ce8:	8b 40 04             	mov    0x4(%eax),%eax
  101ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return;
  101cee:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101cf1:	8b 50 10             	mov    0x10(%eax),%edx
  101cf4:	8b 40 0c             	mov    0xc(%eax),%eax
  101cf7:	03 45 f0             	add    -0x10(%ebp),%eax
  101cfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

  101cfd:	eb 28                	jmp    101d27 <pmm_init+0xa7>
    p = buf + 64;
  101cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d02:	83 ec 0c             	sub    $0xc,%esp
  101d05:	50                   	push   %eax
  101d06:	e8 cf fe ff ff       	call   101bda <pmm_free>
  101d0b:	83 c4 10             	add    $0x10,%esp
    *p = '\0';
  101d0e:	a1 20 85 12 00       	mov    0x128520,%eax
  101d13:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101d16:	76 08                	jbe    101d20 <pmm_init+0xa0>
    do {
  101d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d1b:	a3 20 85 12 00       	mov    %eax,0x128520
        *--p = digits[x % base];
  101d20:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
    char* p;

    if (base > 36) {
        return;
    }

  101d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  101d2d:	72 d0                	jb     101cff <pmm_init+0x7f>
    *p = '\0';
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
  101d2f:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)
}

static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;
  101d33:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101d36:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  101d39:	72 9c                	jb     101cd7 <pmm_init+0x57>
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
        video[i] = 0;
  101d3b:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
    }
  101d42:	eb 16                	jmp    101d5a <pmm_init+0xda>

  101d44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101d47:	83 ec 0c             	sub    $0xc,%esp
  101d4a:	50                   	push   %eax
  101d4b:	e8 dc fe ff ff       	call   101c2c <pmm_mark_used>
  101d50:	83 c4 10             	add    $0x10,%esp
    color = 0x07;
  101d53:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
        video[i] = 0;
    }
  101d5a:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  101d5f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  101d62:	72 e0                	jb     101d44 <pmm_init+0xc4>

    color = 0x07;

    x = y = 0;
}
  101d64:	8b 45 08             	mov    0x8(%ebp),%eax
  101d67:	8b 40 18             	mov    0x18(%eax),%eax
  101d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)

void setclr(char clr) {
  101d6d:	83 ec 0c             	sub    $0xc,%esp
  101d70:	ff 75 08             	pushl  0x8(%ebp)
  101d73:	e8 b4 fe ff ff       	call   101c2c <pmm_mark_used>
  101d78:	83 c4 10             	add    $0x10,%esp
    color = clr;
  101d7b:	83 ec 0c             	sub    $0xc,%esp
  101d7e:	ff 75 e8             	pushl  -0x18(%ebp)
  101d81:	e8 a6 fe ff ff       	call   101c2c <pmm_mark_used>
  101d86:	83 c4 10             	add    $0x10,%esp
}

int kprintf(const char* fmt, ...) {
  101d89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101d90:	eb 3a                	jmp    101dcc <pmm_init+0x14c>
    va_list ap;
  101d92:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d95:	c1 e0 04             	shl    $0x4,%eax
  101d98:	03 45 e8             	add    -0x18(%ebp),%eax
  101d9b:	8b 00                	mov    (%eax),%eax
  101d9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    const char* s;
  101da0:	eb 16                	jmp    101db8 <pmm_init+0x138>
    unsigned long n;
  101da2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101da5:	83 ec 0c             	sub    $0xc,%esp
  101da8:	50                   	push   %eax
  101da9:	e8 7e fe ff ff       	call   101c2c <pmm_mark_used>
  101dae:	83 c4 10             	add    $0x10,%esp
    char c;
  101db1:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
    color = clr;
}

int kprintf(const char* fmt, ...) {
    va_list ap;
    const char* s;
  101db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101dbb:	c1 e0 04             	shl    $0x4,%eax
  101dbe:	03 45 e8             	add    -0x18(%ebp),%eax
  101dc1:	8b 40 04             	mov    0x4(%eax),%eax
  101dc4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  101dc7:	77 d9                	ja     101da2 <pmm_init+0x122>

void setclr(char clr) {
    color = clr;
}

int kprintf(const char* fmt, ...) {
  101dc9:	ff 45 ec             	incl   -0x14(%ebp)
  101dcc:	8b 45 08             	mov    0x8(%ebp),%eax
  101dcf:	8b 40 14             	mov    0x14(%eax),%eax
  101dd2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  101dd5:	77 bb                	ja     101d92 <pmm_init+0x112>
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
  101dd7:	c9                   	leave  
  101dd8:	c3                   	ret    
  101dd9:	00 00                	add    %al,(%eax)
	...

00101ddc <free_ports_for_pid>:
#include "console.h"
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

  101ddc:	55                   	push   %ebp
  101ddd:	89 e5                	mov    %esp,%ebp
  101ddf:	83 ec 10             	sub    $0x10,%esp
static int x = 0;
  101de2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101de9:	eb 20                	jmp    101e0b <free_ports_for_pid+0x2f>
static int y = 0;
  101deb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101dee:	8b 04 85 80 85 12 00 	mov    0x128580(,%eax,4),%eax
  101df5:	3b 45 08             	cmp    0x8(%ebp),%eax
  101df8:	75 0e                	jne    101e08 <free_ports_for_pid+0x2c>
static int kprintf_res = 0;
  101dfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101dfd:	c7 04 85 80 85 12 00 	movl   $0x0,0x128580(,%eax,4)
  101e04:	00 00 00 00 
#include "console.h"
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

static int x = 0;
  101e08:	ff 45 fc             	incl   -0x4(%ebp)
  101e0b:	81 7d fc ff ff 00 00 	cmpl   $0xffff,-0x4(%ebp)
  101e12:	7e d7                	jle    101deb <free_ports_for_pid+0xf>
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;
  101e14:	c9                   	leave  
  101e15:	c3                   	ret    

00101e16 <require_port>:

static void kputc(char c) {
  101e16:	55                   	push   %ebp
  101e17:	89 e5                	mov    %esp,%ebp
  101e19:	53                   	push   %ebx
  101e1a:	83 ec 14             	sub    $0x14,%esp
  101e1d:	8b 45 08             	mov    0x8(%ebp),%eax
  101e20:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    if(in_cod()) {
  101e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e27:	25 ff ff 00 00       	and    $0xffff,%eax
  101e2c:	8b 04 85 80 85 12 00 	mov    0x128580(,%eax,4),%eax
  101e33:	85 c0                	test   %eax,%eax
  101e35:	74 07                	je     101e3e <require_port+0x28>
  101e37:	b8 00 00 00 00       	mov    $0x0,%eax
  101e3c:	eb 1e                	jmp    101e5c <require_port+0x46>
        goto doKPutc;
  101e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e41:	89 c3                	mov    %eax,%ebx
  101e43:	81 e3 ff ff 00 00    	and    $0xffff,%ebx
  101e49:	e8 1b 0d 00 00       	call   102b69 <get_current_task>
  101e4e:	8b 00                	mov    (%eax),%eax
  101e50:	89 04 9d 80 85 12 00 	mov    %eax,0x128580(,%ebx,4)
    }
  101e57:	b8 01 00 00 00       	mov    $0x1,%eax

  101e5c:	83 c4 14             	add    $0x14,%esp
  101e5f:	5b                   	pop    %ebx
  101e60:	5d                   	pop    %ebp
  101e61:	c3                   	ret    

00101e62 <port_in>:
    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
  101e62:	55                   	push   %ebp
  101e63:	89 e5                	mov    %esp,%ebp
  101e65:	53                   	push   %ebx
  101e66:	83 ec 14             	sub    $0x14,%esp
  101e69:	8b 45 0c             	mov    0xc(%ebp),%eax
  101e6c:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  101e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e73:	25 ff ff 00 00       	and    $0xffff,%eax
  101e78:	8b 1c 85 80 85 12 00 	mov    0x128580(,%eax,4),%ebx
  101e7f:	e8 e5 0c 00 00       	call   102b69 <get_current_task>
  101e84:	8b 00                	mov    (%eax),%eax
  101e86:	39 c3                	cmp    %eax,%ebx
  101e88:	74 26                	je     101eb0 <port_in+0x4e>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  101e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e8d:	89 c3                	mov    %eax,%ebx
  101e8f:	81 e3 ff ff 00 00    	and    $0xffff,%ebx
  101e95:	e8 cf 0c 00 00       	call   102b69 <get_current_task>
  101e9a:	8b 00                	mov    (%eax),%eax
  101e9c:	83 ec 04             	sub    $0x4,%esp
  101e9f:	53                   	push   %ebx
  101ea0:	50                   	push   %eax
  101ea1:	68 64 76 10 00       	push   $0x107664
  101ea6:	e8 c2 e6 ff ff       	call   10056d <kprintf>
  101eab:	83 c4 10             	add    $0x10,%esp
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  101eae:	eb fe                	jmp    101eae <port_in+0x4c>

            return;
        }
    }
  101eb0:	8b 45 08             	mov    0x8(%ebp),%eax
  101eb3:	83 f8 01             	cmp    $0x1,%eax
  101eb6:	74 27                	je     101edf <port_in+0x7d>
  101eb8:	83 f8 01             	cmp    $0x1,%eax
  101ebb:	72 07                	jb     101ec4 <port_in+0x62>
  101ebd:	83 f8 02             	cmp    $0x2,%eax
  101ec0:	74 38                	je     101efa <port_in+0x98>
  101ec2:	eb 4c                	jmp    101f10 <port_in+0xae>

    if(ramfs_vga_writers()) {
  101ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ec7:	25 ff ff 00 00       	and    $0xffff,%eax
  101ecc:	83 ec 0c             	sub    $0xc,%esp
  101ecf:	50                   	push   %eax
  101ed0:	e8 1e 01 00 00       	call   101ff3 <inb>
  101ed5:	83 c4 10             	add    $0x10,%esp
  101ed8:	25 ff 00 00 00       	and    $0xff,%eax
  101edd:	eb 36                	jmp    101f15 <port_in+0xb3>
        return;
    }
  101edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ee2:	25 ff ff 00 00       	and    $0xffff,%eax
  101ee7:	83 ec 0c             	sub    $0xc,%esp
  101eea:	50                   	push   %eax
  101eeb:	e8 e5 00 00 00       	call   101fd5 <inw>
  101ef0:	83 c4 10             	add    $0x10,%esp
  101ef3:	25 ff ff 00 00       	and    $0xffff,%eax
  101ef8:	eb 1b                	jmp    101f15 <port_in+0xb3>

    doKPutc:
  101efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101efd:	25 ff ff 00 00       	and    $0xffff,%eax
  101f02:	83 ec 0c             	sub    $0xc,%esp
  101f05:	50                   	push   %eax
  101f06:	e8 03 01 00 00       	call   10200e <inl>
  101f0b:	83 c4 10             	add    $0x10,%esp
  101f0e:	eb 05                	jmp    101f15 <port_in+0xb3>

    if ((c == '\n') || (x > 79)) {
        x = 0;
  101f10:	b8 00 00 00 00       	mov    $0x0,%eax
        y++;
  101f15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101f18:	c9                   	leave  
  101f19:	c3                   	ret    

00101f1a <port_out>:
    }

  101f1a:	55                   	push   %ebp
  101f1b:	89 e5                	mov    %esp,%ebp
  101f1d:	53                   	push   %ebx
  101f1e:	83 ec 14             	sub    $0x14,%esp
  101f21:	8b 45 0c             	mov    0xc(%ebp),%eax
  101f24:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    if (c == '\n') {
  101f28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f2b:	25 ff ff 00 00       	and    $0xffff,%eax
  101f30:	8b 1c 85 80 85 12 00 	mov    0x128580(,%eax,4),%ebx
  101f37:	e8 2d 0c 00 00       	call   102b69 <get_current_task>
  101f3c:	8b 00                	mov    (%eax),%eax
  101f3e:	39 c3                	cmp    %eax,%ebx
  101f40:	74 0a                	je     101f4c <port_out+0x32>
        return;
  101f42:	b8 00 00 00 00       	mov    $0x0,%eax
  101f47:	e9 84 00 00 00       	jmp    101fd0 <port_out+0xb6>
    }

    if (y > 24) {
  101f4c:	8b 45 08             	mov    0x8(%ebp),%eax
  101f4f:	83 f8 01             	cmp    $0x1,%eax
  101f52:	74 32                	je     101f86 <port_out+0x6c>
  101f54:	83 f8 01             	cmp    $0x1,%eax
  101f57:	72 07                	jb     101f60 <port_out+0x46>
  101f59:	83 f8 02             	cmp    $0x2,%eax
  101f5c:	74 4f                	je     101fad <port_out+0x93>
  101f5e:	eb 6b                	jmp    101fcb <port_out+0xb1>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  101f60:	8b 45 10             	mov    0x10(%ebp),%eax
  101f63:	ba 00 00 00 00       	mov    $0x0,%edx
  101f68:	88 c2                	mov    %al,%dl
  101f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f6d:	25 ff ff 00 00       	and    $0xffff,%eax
  101f72:	83 ec 08             	sub    $0x8,%esp
  101f75:	52                   	push   %edx
  101f76:	50                   	push   %eax
  101f77:	e8 cb 00 00 00       	call   102047 <outb>
  101f7c:	83 c4 10             	add    $0x10,%esp
            video[i] = video[i + 160];
  101f7f:	b8 01 00 00 00       	mov    $0x1,%eax
  101f84:	eb 4a                	jmp    101fd0 <port_out+0xb6>
        }

  101f86:	8b 45 10             	mov    0x10(%ebp),%eax
  101f89:	89 c2                	mov    %eax,%edx
  101f8b:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  101f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f94:	25 ff ff 00 00       	and    $0xffff,%eax
  101f99:	83 ec 08             	sub    $0x8,%esp
  101f9c:	52                   	push   %edx
  101f9d:	50                   	push   %eax
  101f9e:	e8 86 00 00 00       	call   102029 <outw>
  101fa3:	83 c4 10             	add    $0x10,%esp
        for (; i < 2 * 25 * 80; i++) {
  101fa6:	b8 01 00 00 00       	mov    $0x1,%eax
  101fab:	eb 23                	jmp    101fd0 <port_out+0xb6>
            video[i] = 0;
        }
  101fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101fb0:	25 ff ff 00 00       	and    $0xffff,%eax
  101fb5:	83 ec 08             	sub    $0x8,%esp
  101fb8:	ff 75 10             	pushl  0x10(%ebp)
  101fbb:	50                   	push   %eax
  101fbc:	e8 a2 00 00 00       	call   102063 <outl>
  101fc1:	83 c4 10             	add    $0x10,%esp
        y--;
  101fc4:	b8 01 00 00 00       	mov    $0x1,%eax
  101fc9:	eb 05                	jmp    101fd0 <port_out+0xb6>
    }

    video[2 * (y * 80 + x)] = c;
  101fcb:	b8 00 00 00 00       	mov    $0x0,%eax
    video[2 * (y * 80 + x) + 1] = color;
  101fd0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101fd3:	c9                   	leave  
  101fd4:	c3                   	ret    

00101fd5 <inw>:

    x++;
  101fd5:	55                   	push   %ebp
  101fd6:	89 e5                	mov    %esp,%ebp
  101fd8:	83 ec 14             	sub    $0x14,%esp
  101fdb:	8b 45 08             	mov    0x8(%ebp),%eax
  101fde:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    kprintf_res++;
}
  101fe2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101fe5:	89 c2                	mov    %eax,%edx
  101fe7:	66 ed                	in     (%dx),%ax
  101fe9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  101fed:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
static void kputs(const char* s) {
  101ff1:	c9                   	leave  
  101ff2:	c3                   	ret    

00101ff3 <inb>:
    while (*s) {
        kputc(*s++);
  101ff3:	55                   	push   %ebp
  101ff4:	89 e5                	mov    %esp,%ebp
  101ff6:	83 ec 14             	sub    $0x14,%esp
  101ff9:	8b 45 08             	mov    0x8(%ebp),%eax
  101ffc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    }
}
  102000:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102003:	89 c2                	mov    %eax,%edx
  102005:	ec                   	in     (%dx),%al
  102006:	88 45 ff             	mov    %al,-0x1(%ebp)

  102009:	8a 45 ff             	mov    -0x1(%ebp),%al
static void kputn(unsigned long x, int base) {
  10200c:	c9                   	leave  
  10200d:	c3                   	ret    

0010200e <inl>:
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  10200e:	55                   	push   %ebp
  10200f:	89 e5                	mov    %esp,%ebp
  102011:	83 ec 14             	sub    $0x14,%esp
  102014:	8b 45 08             	mov    0x8(%ebp),%eax
  102017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    char* p;

  10201b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10201e:	89 c2                	mov    %eax,%edx
  102020:	ed                   	in     (%dx),%eax
  102021:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (base > 36) {
  102024:	8b 45 fc             	mov    -0x4(%ebp),%eax
        return;
  102027:	c9                   	leave  
  102028:	c3                   	ret    

00102029 <outw>:
    }

  102029:	55                   	push   %ebp
  10202a:	89 e5                	mov    %esp,%ebp
  10202c:	83 ec 08             	sub    $0x8,%esp
  10202f:	8b 55 08             	mov    0x8(%ebp),%edx
  102032:	8b 45 0c             	mov    0xc(%ebp),%eax
  102035:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  102039:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    p = buf + 64;
  10203d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102040:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102043:	66 ef                	out    %ax,(%dx)
    *p = '\0';
  102045:	c9                   	leave  
  102046:	c3                   	ret    

00102047 <outb>:
    do {
        *--p = digits[x % base];
  102047:	55                   	push   %ebp
  102048:	89 e5                	mov    %esp,%ebp
  10204a:	83 ec 08             	sub    $0x8,%esp
  10204d:	8b 45 08             	mov    0x8(%ebp),%eax
  102050:	8b 55 0c             	mov    0xc(%ebp),%edx
  102053:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  102057:	88 55 f8             	mov    %dl,-0x8(%ebp)
        x /= base;
  10205a:	8a 45 f8             	mov    -0x8(%ebp),%al
  10205d:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102060:	ee                   	out    %al,(%dx)
    } while (x);
  102061:	c9                   	leave  
  102062:	c3                   	ret    

00102063 <outl>:
    kputs(p);
}
  102063:	55                   	push   %ebp
  102064:	89 e5                	mov    %esp,%ebp
  102066:	83 ec 04             	sub    $0x4,%esp
  102069:	8b 45 08             	mov    0x8(%ebp),%eax
  10206c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)

  102070:	8b 45 0c             	mov    0xc(%ebp),%eax
  102073:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102076:	ef                   	out    %eax,(%dx)
void clrscr(void) {
  102077:	c9                   	leave  
  102078:	c3                   	ret    

00102079 <outb_wait>:
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102079:	55                   	push   %ebp
  10207a:	89 e5                	mov    %esp,%ebp
  10207c:	83 ec 08             	sub    $0x8,%esp
  10207f:	8b 45 08             	mov    0x8(%ebp),%eax
  102082:	8b 55 0c             	mov    0xc(%ebp),%edx
  102085:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  102089:	88 55 f8             	mov    %dl,-0x8(%ebp)
        video[i] = 0;
  10208c:	8a 45 f8             	mov    -0x8(%ebp),%al
  10208f:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102092:	ee                   	out    %al,(%dx)
  102093:	eb 00                	jmp    102095 <outb_wait+0x1c>
  102095:	eb 00                	jmp    102097 <outb_wait+0x1e>
    }
  102097:	c9                   	leave  
  102098:	c3                   	ret    
  102099:	00 00                	add    %al,(%eax)
	...

0010209c <ramfs_block_init>:
#include "console.h"
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

static int x = 0;
  10209c:	55                   	push   %ebp
  10209d:	89 e5                	mov    %esp,%ebp
  10209f:	83 ec 08             	sub    $0x8,%esp
static int y = 0;
  1020a2:	83 ec 04             	sub    $0x4,%esp
  1020a5:	68 00 00 04 00       	push   $0x40000
  1020aa:	6a 00                	push   $0x0
  1020ac:	68 c0 85 18 00       	push   $0x1885c0
  1020b1:	e8 52 18 00 00       	call   103908 <memset>
  1020b6:	83 c4 10             	add    $0x10,%esp
static int kprintf_res = 0;
  1020b9:	c9                   	leave  
  1020ba:	c3                   	ret    

001020bb <ramfs_block_driver_struct>:
        goto doKPutc;
    }

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1020bb:	55                   	push   %ebp
  1020bc:	89 e5                	mov    %esp,%ebp
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  1020be:	b8 a0 60 10 00       	mov    $0x1060a0,%eax
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  1020c3:	5d                   	pop    %ebp
  1020c4:	c3                   	ret    

001020c5 <ramfs_block_available>:

            return;
  1020c5:	55                   	push   %ebp
  1020c6:	89 e5                	mov    %esp,%ebp
  1020c8:	83 ec 10             	sub    $0x10,%esp
        }
  1020cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1020ce:	8b 40 04             	mov    0x4(%eax),%eax
  1020d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

  1020d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020d7:	8b 00                	mov    (%eax),%eax
  1020d9:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1020e0:	85 c0                	test   %eax,%eax
  1020e2:	74 1d                	je     102101 <ramfs_block_available+0x3c>
    if(ramfs_vga_writers()) {
  1020e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020e7:	8b 00                	mov    (%eax),%eax
  1020e9:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1020f0:	8b 50 04             	mov    0x4(%eax),%edx
  1020f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1020f6:	8b 40 08             	mov    0x8(%eax),%eax
  1020f9:	89 d1                	mov    %edx,%ecx
  1020fb:	29 c1                	sub    %eax,%ecx
  1020fd:	89 c8                	mov    %ecx,%eax
  1020ff:	eb 05                	jmp    102106 <ramfs_block_available+0x41>
        return;
    }

  102101:	b8 00 00 00 00       	mov    $0x0,%eax
    doKPutc:
  102106:	c9                   	leave  
  102107:	c3                   	ret    

00102108 <ramfs_block_create>:

    if ((c == '\n') || (x > 79)) {
  102108:	55                   	push   %ebp
  102109:	89 e5                	mov    %esp,%ebp
  10210b:	53                   	push   %ebx
  10210c:	83 ec 14             	sub    $0x14,%esp
        x = 0;
  10210f:	83 ec 0c             	sub    $0xc,%esp
  102112:	6a 08                	push   $0x8
  102114:	e8 55 15 00 00       	call   10366e <malloc>
  102119:	83 c4 10             	add    $0x10,%esp
  10211c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        y++;
    }
  10211f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102126:	e9 86 00 00 00       	jmp    1021b1 <ramfs_block_create+0xa9>

  10212b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10212e:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102135:	85 c0                	test   %eax,%eax
  102137:	75 75                	jne    1021ae <ramfs_block_create+0xa6>
    if (c == '\n') {
  102139:	8b 5d f4             	mov    -0xc(%ebp),%ebx
  10213c:	83 ec 0c             	sub    $0xc,%esp
  10213f:	6a 10                	push   $0x10
  102141:	e8 28 15 00 00       	call   10366e <malloc>
  102146:	83 c4 10             	add    $0x10,%esp
  102149:	89 04 9d c0 85 18 00 	mov    %eax,0x1885c0(,%ebx,4)
        return;
  102150:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102153:	8b 1c 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%ebx
  10215a:	8b 45 08             	mov    0x8(%ebp),%eax
  10215d:	8b 00                	mov    (%eax),%eax
  10215f:	83 ec 0c             	sub    $0xc,%esp
  102162:	50                   	push   %eax
  102163:	e8 06 15 00 00       	call   10366e <malloc>
  102168:	83 c4 10             	add    $0x10,%esp
  10216b:	89 03                	mov    %eax,(%ebx)
    }
  10216d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102170:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102177:	8b 55 08             	mov    0x8(%ebp),%edx
  10217a:	8b 12                	mov    (%edx),%edx
  10217c:	89 50 04             	mov    %edx,0x4(%eax)

    if (y > 24) {
  10217f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102182:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102189:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        int i;
  102190:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102193:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10219a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  1021a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1021a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021a7:	89 10                	mov    %edx,(%eax)
        }

  1021a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021ac:	eb 15                	jmp    1021c3 <ramfs_block_create+0xbb>
    doKPutc:

    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
    }
  1021ae:	ff 45 f4             	incl   -0xc(%ebp)
  1021b1:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  1021b8:	0f 8e 6d ff ff ff    	jle    10212b <ramfs_block_create+0x23>
        }

        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
  1021be:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  1021c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1021c6:	c9                   	leave  
  1021c7:	c3                   	ret    

001021c8 <ramfs_block_read>:

    video[2 * (y * 80 + x)] = c;
  1021c8:	55                   	push   %ebp
  1021c9:	89 e5                	mov    %esp,%ebp
  1021cb:	83 ec 18             	sub    $0x18,%esp
    video[2 * (y * 80 + x) + 1] = color;
  1021ce:	8b 45 08             	mov    0x8(%ebp),%eax
  1021d1:	8b 40 04             	mov    0x4(%eax),%eax
  1021d4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    x++;
  1021d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021da:	8b 00                	mov    (%eax),%eax
  1021dc:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1021e3:	85 c0                	test   %eax,%eax
  1021e5:	74 55                	je     10223c <ramfs_block_read+0x74>
    kprintf_res++;
  1021e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1021ea:	8b 40 08             	mov    0x8(%eax),%eax
  1021ed:	89 c2                	mov    %eax,%edx
  1021ef:	03 55 10             	add    0x10(%ebp),%edx
  1021f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021f5:	8b 00                	mov    (%eax),%eax
  1021f7:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1021fe:	8b 40 04             	mov    0x4(%eax),%eax
  102201:	39 c2                	cmp    %eax,%edx
  102203:	76 07                	jbe    10220c <ramfs_block_read+0x44>
  102205:	b8 06 00 00 00       	mov    $0x6,%eax
  10220a:	eb 35                	jmp    102241 <ramfs_block_read+0x79>
}

  10220c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10220f:	8b 00                	mov    (%eax),%eax
  102211:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102218:	8b 10                	mov    (%eax),%edx
  10221a:	8b 45 08             	mov    0x8(%ebp),%eax
  10221d:	8b 40 08             	mov    0x8(%eax),%eax
  102220:	8d 04 02             	lea    (%edx,%eax,1),%eax
  102223:	83 ec 04             	sub    $0x4,%esp
  102226:	ff 75 10             	pushl  0x10(%ebp)
  102229:	50                   	push   %eax
  10222a:	ff 75 0c             	pushl  0xc(%ebp)
  10222d:	e8 04 17 00 00       	call   103936 <memcpy>
  102232:	83 c4 10             	add    $0x10,%esp
static void kputs(const char* s) {
    while (*s) {
  102235:	b8 00 00 00 00       	mov    $0x0,%eax
  10223a:	eb 05                	jmp    102241 <ramfs_block_read+0x79>
        kputc(*s++);
    }
}
  10223c:	b8 03 00 00 00       	mov    $0x3,%eax

  102241:	c9                   	leave  
  102242:	c3                   	ret    

00102243 <ramfs_block_write>:
static void kputn(unsigned long x, int base) {
    char buf[65];
  102243:	55                   	push   %ebp
  102244:	89 e5                	mov    %esp,%ebp
  102246:	83 ec 18             	sub    $0x18,%esp
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  102249:	8b 45 08             	mov    0x8(%ebp),%eax
  10224c:	8b 40 04             	mov    0x4(%eax),%eax
  10224f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* p;

  102252:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102255:	8b 00                	mov    (%eax),%eax
  102257:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10225e:	85 c0                	test   %eax,%eax
  102260:	74 55                	je     1022b7 <ramfs_block_write+0x74>
    if (base > 36) {
  102262:	8b 45 08             	mov    0x8(%ebp),%eax
  102265:	8b 40 08             	mov    0x8(%eax),%eax
  102268:	89 c2                	mov    %eax,%edx
  10226a:	03 55 10             	add    0x10(%ebp),%edx
  10226d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102270:	8b 00                	mov    (%eax),%eax
  102272:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102279:	8b 40 04             	mov    0x4(%eax),%eax
  10227c:	39 c2                	cmp    %eax,%edx
  10227e:	76 07                	jbe    102287 <ramfs_block_write+0x44>
  102280:	b8 06 00 00 00       	mov    $0x6,%eax
  102285:	eb 35                	jmp    1022bc <ramfs_block_write+0x79>
        return;
    }
  102287:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10228a:	8b 00                	mov    (%eax),%eax
  10228c:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102293:	8b 10                	mov    (%eax),%edx
  102295:	8b 45 08             	mov    0x8(%ebp),%eax
  102298:	8b 40 08             	mov    0x8(%eax),%eax
  10229b:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10229e:	83 ec 04             	sub    $0x4,%esp
  1022a1:	ff 75 10             	pushl  0x10(%ebp)
  1022a4:	ff 75 0c             	pushl  0xc(%ebp)
  1022a7:	50                   	push   %eax
  1022a8:	e8 89 16 00 00       	call   103936 <memcpy>
  1022ad:	83 c4 10             	add    $0x10,%esp

    p = buf + 64;
  1022b0:	b8 00 00 00 00       	mov    $0x0,%eax
  1022b5:	eb 05                	jmp    1022bc <ramfs_block_write+0x79>
    *p = '\0';
    do {
        *--p = digits[x % base];
  1022b7:	b8 03 00 00 00       	mov    $0x3,%eax
        x /= base;
  1022bc:	c9                   	leave  
  1022bd:	c3                   	ret    

001022be <ramfs_block_open>:
    } while (x);
    kputs(p);
  1022be:	55                   	push   %ebp
  1022bf:	89 e5                	mov    %esp,%ebp
  1022c1:	83 ec 18             	sub    $0x18,%esp
}
  1022c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1022c7:	8b 00                	mov    (%eax),%eax
  1022c9:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1022d0:	85 c0                	test   %eax,%eax
  1022d2:	74 74                	je     102348 <ramfs_block_open+0x8a>

  1022d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1022d7:	83 e0 01             	and    $0x1,%eax
  1022da:	84 c0                	test   %al,%al
  1022dc:	74 13                	je     1022f1 <ramfs_block_open+0x33>
  1022de:	8b 45 08             	mov    0x8(%ebp),%eax
  1022e1:	8b 00                	mov    (%eax),%eax
  1022e3:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1022ea:	8b 50 08             	mov    0x8(%eax),%edx
  1022ed:	42                   	inc    %edx
  1022ee:	89 50 08             	mov    %edx,0x8(%eax)
void clrscr(void) {
  1022f1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1022f4:	83 e0 02             	and    $0x2,%eax
  1022f7:	85 c0                	test   %eax,%eax
  1022f9:	74 13                	je     10230e <ramfs_block_open+0x50>
  1022fb:	8b 45 08             	mov    0x8(%ebp),%eax
  1022fe:	8b 00                	mov    (%eax),%eax
  102300:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102307:	8b 50 0c             	mov    0xc(%eax),%edx
  10230a:	42                   	inc    %edx
  10230b:	89 50 0c             	mov    %edx,0xc(%eax)
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10230e:	83 ec 0c             	sub    $0xc,%esp
  102311:	6a 10                	push   $0x10
  102313:	e8 56 13 00 00       	call   10366e <malloc>
  102318:	83 c4 10             	add    $0x10,%esp
  10231b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        video[i] = 0;
    }
  10231e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102321:	8b 55 0c             	mov    0xc(%ebp),%edx
  102324:	89 50 0c             	mov    %edx,0xc(%eax)

  102327:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10232a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    color = 0x07;
  102331:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102334:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  10233a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10233d:	8b 55 08             	mov    0x8(%ebp),%edx
  102340:	89 50 04             	mov    %edx,0x4(%eax)
    x = y = 0;
}
  102343:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102346:	eb 05                	jmp    10234d <ramfs_block_open+0x8f>

void setclr(char clr) {
    color = clr;
  102348:	b8 01 00 00 00       	mov    $0x1,%eax
}
  10234d:	c9                   	leave  
  10234e:	c3                   	ret    

0010234f <ramfs_block_close>:

int kprintf(const char* fmt, ...) {
  10234f:	55                   	push   %ebp
  102350:	89 e5                	mov    %esp,%ebp
  102352:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
  102355:	8b 45 08             	mov    0x8(%ebp),%eax
  102358:	8b 40 04             	mov    0x4(%eax),%eax
  10235b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    const char* s;
    unsigned long n;
  10235e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102361:	8b 00                	mov    (%eax),%eax
  102363:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10236a:	85 c0                	test   %eax,%eax
  10236c:	74 40                	je     1023ae <ramfs_block_close+0x5f>
    char c;
  10236e:	8b 45 08             	mov    0x8(%ebp),%eax
  102371:	8b 40 0c             	mov    0xc(%eax),%eax
  102374:	83 e0 01             	and    $0x1,%eax
  102377:	84 c0                	test   %al,%al
  102379:	74 13                	je     10238e <ramfs_block_close+0x3f>
  10237b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10237e:	8b 00                	mov    (%eax),%eax
  102380:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102387:	8b 50 08             	mov    0x8(%eax),%edx
  10238a:	4a                   	dec    %edx
  10238b:	89 50 08             	mov    %edx,0x8(%eax)

  10238e:	8b 45 08             	mov    0x8(%ebp),%eax
  102391:	8b 40 0c             	mov    0xc(%eax),%eax
  102394:	83 e0 02             	and    $0x2,%eax
  102397:	85 c0                	test   %eax,%eax
  102399:	74 13                	je     1023ae <ramfs_block_close+0x5f>
  10239b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10239e:	8b 00                	mov    (%eax),%eax
  1023a0:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1023a7:	8b 50 0c             	mov    0xc(%eax),%edx
  1023aa:	4a                   	dec    %edx
  1023ab:	89 50 0c             	mov    %edx,0xc(%eax)
    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
  1023ae:	83 ec 0c             	sub    $0xc,%esp
  1023b1:	ff 75 08             	pushl  0x8(%ebp)
  1023b4:	e8 fb 14 00 00       	call   1038b4 <free>
  1023b9:	83 c4 10             	add    $0x10,%esp
        if (*fmt == '%') {
            fmt++;
  1023bc:	b8 00 00 00 00       	mov    $0x0,%eax
            switch (*fmt) {
  1023c1:	c9                   	leave  
  1023c2:	c3                   	ret    
	...

001023c4 <ramfs_fifo_init>:
#include "console.h"
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

static int x = 0;
  1023c4:	55                   	push   %ebp
  1023c5:	89 e5                	mov    %esp,%ebp
  1023c7:	83 ec 08             	sub    $0x8,%esp
static int y = 0;
  1023ca:	83 ec 04             	sub    $0x4,%esp
  1023cd:	68 00 00 04 00       	push   $0x40000
  1023d2:	6a 00                	push   $0x0
  1023d4:	68 c0 85 18 00       	push   $0x1885c0
  1023d9:	e8 2a 15 00 00       	call   103908 <memset>
  1023de:	83 c4 10             	add    $0x10,%esp
static int kprintf_res = 0;
  1023e1:	c9                   	leave  
  1023e2:	c3                   	ret    

001023e3 <ramfs_fifo_driver_struct>:
        goto doKPutc;
    }

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1023e3:	55                   	push   %ebp
  1023e4:	89 e5                	mov    %esp,%ebp
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  1023e6:	b8 bc 60 10 00       	mov    $0x1060bc,%eax
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  1023eb:	5d                   	pop    %ebp
  1023ec:	c3                   	ret    

001023ed <ramfs_fifo_available>:

            return;
  1023ed:	55                   	push   %ebp
  1023ee:	89 e5                	mov    %esp,%ebp
  1023f0:	83 ec 10             	sub    $0x10,%esp
        }
  1023f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1023f6:	8b 40 04             	mov    0x4(%eax),%eax
  1023f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

  1023fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023ff:	8b 00                	mov    (%eax),%eax
  102401:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102408:	85 c0                	test   %eax,%eax
  10240a:	74 11                	je     10241d <ramfs_fifo_available+0x30>
    if(ramfs_vga_writers()) {
  10240c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10240f:	8b 00                	mov    (%eax),%eax
  102411:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102418:	8b 40 08             	mov    0x8(%eax),%eax
  10241b:	eb 05                	jmp    102422 <ramfs_fifo_available+0x35>
        return;
    }

  10241d:	b8 00 00 00 00       	mov    $0x0,%eax
    doKPutc:
  102422:	c9                   	leave  
  102423:	c3                   	ret    

00102424 <ramfs_fifo_create>:

    if ((c == '\n') || (x > 79)) {
  102424:	55                   	push   %ebp
  102425:	89 e5                	mov    %esp,%ebp
  102427:	53                   	push   %ebx
  102428:	83 ec 14             	sub    $0x14,%esp
        x = 0;
  10242b:	83 ec 0c             	sub    $0xc,%esp
  10242e:	6a 08                	push   $0x8
  102430:	e8 39 12 00 00       	call   10366e <malloc>
  102435:	83 c4 10             	add    $0x10,%esp
  102438:	89 45 f0             	mov    %eax,-0x10(%ebp)
        y++;
    }
  10243b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102442:	e9 9b 00 00 00       	jmp    1024e2 <ramfs_fifo_create+0xbe>

  102447:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10244a:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102451:	85 c0                	test   %eax,%eax
  102453:	0f 85 86 00 00 00    	jne    1024df <ramfs_fifo_create+0xbb>
    if (c == '\n') {
  102459:	8b 5d f4             	mov    -0xc(%ebp),%ebx
  10245c:	83 ec 0c             	sub    $0xc,%esp
  10245f:	6a 14                	push   $0x14
  102461:	e8 08 12 00 00       	call   10366e <malloc>
  102466:	83 c4 10             	add    $0x10,%esp
  102469:	89 04 9d c0 85 18 00 	mov    %eax,0x1885c0(,%ebx,4)
        return;
  102470:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102473:	8b 1c 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%ebx
  10247a:	8b 45 08             	mov    0x8(%ebp),%eax
  10247d:	8b 00                	mov    (%eax),%eax
  10247f:	83 ec 0c             	sub    $0xc,%esp
  102482:	50                   	push   %eax
  102483:	e8 e6 11 00 00       	call   10366e <malloc>
  102488:	83 c4 10             	add    $0x10,%esp
  10248b:	89 03                	mov    %eax,(%ebx)
    }
  10248d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102490:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102497:	8b 55 08             	mov    0x8(%ebp),%edx
  10249a:	8b 12                	mov    (%edx),%edx
  10249c:	89 50 04             	mov    %edx,0x4(%eax)

    if (y > 24) {
  10249f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024a2:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1024a9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        int i;
  1024b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024b3:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1024ba:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        for (i = 0; i < 2 * 24 * 80; i++) {
  1024c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024c4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1024cb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            video[i] = video[i + 160];
        }
  1024d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1024d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1024d8:	89 10                	mov    %edx,(%eax)

        for (; i < 2 * 25 * 80; i++) {
  1024da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1024dd:	eb 15                	jmp    1024f4 <ramfs_fifo_create+0xd0>
    doKPutc:

    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
    }
  1024df:	ff 45 f4             	incl   -0xc(%ebp)
  1024e2:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  1024e9:	0f 8e 58 ff ff ff    	jle    102447 <ramfs_fifo_create+0x23>

        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
    }
  1024ef:	b8 00 00 00 00       	mov    $0x0,%eax

  1024f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1024f7:	c9                   	leave  
  1024f8:	c3                   	ret    

001024f9 <ramfs_fifo_read>:
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;
  1024f9:	55                   	push   %ebp
  1024fa:	89 e5                	mov    %esp,%ebp
  1024fc:	83 ec 18             	sub    $0x18,%esp

  1024ff:	8b 45 08             	mov    0x8(%ebp),%eax
  102502:	8b 40 04             	mov    0x4(%eax),%eax
  102505:	89 45 f4             	mov    %eax,-0xc(%ebp)
    x++;
    kprintf_res++;
  102508:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10250b:	8b 00                	mov    (%eax),%eax
  10250d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102514:	85 c0                	test   %eax,%eax
  102516:	0f 84 c7 00 00 00    	je     1025e3 <ramfs_fifo_read+0xea>
}
  10251c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10251f:	8b 00                	mov    (%eax),%eax
  102521:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102528:	8b 40 04             	mov    0x4(%eax),%eax
  10252b:	3b 45 10             	cmp    0x10(%ebp),%eax
  10252e:	73 0a                	jae    10253a <ramfs_fifo_read+0x41>
  102530:	b8 03 00 00 00       	mov    $0x3,%eax
  102535:	e9 ae 00 00 00       	jmp    1025e8 <ramfs_fifo_read+0xef>

  10253a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10253d:	8b 00                	mov    (%eax),%eax
  10253f:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102546:	8b 40 08             	mov    0x8(%eax),%eax
  102549:	3b 45 10             	cmp    0x10(%ebp),%eax
  10254c:	73 0a                	jae    102558 <ramfs_fifo_read+0x5f>
  10254e:	b8 01 00 00 00       	mov    $0x1,%eax
  102553:	e9 90 00 00 00       	jmp    1025e8 <ramfs_fifo_read+0xef>
static void kputs(const char* s) {
    while (*s) {
  102558:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10255b:	8b 00                	mov    (%eax),%eax
  10255d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102564:	8b 00                	mov    (%eax),%eax
  102566:	83 ec 04             	sub    $0x4,%esp
  102569:	ff 75 10             	pushl  0x10(%ebp)
  10256c:	50                   	push   %eax
  10256d:	ff 75 0c             	pushl  0xc(%ebp)
  102570:	e8 c1 13 00 00       	call   103936 <memcpy>
  102575:	83 c4 10             	add    $0x10,%esp
        kputc(*s++);
  102578:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10257b:	8b 00                	mov    (%eax),%eax
  10257d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102584:	8b 40 08             	mov    0x8(%eax),%eax
  102587:	89 c1                	mov    %eax,%ecx
  102589:	2b 4d 10             	sub    0x10(%ebp),%ecx
  10258c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10258f:	8b 00                	mov    (%eax),%eax
  102591:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102598:	8b 00                	mov    (%eax),%eax
  10259a:	89 c2                	mov    %eax,%edx
  10259c:	03 55 10             	add    0x10(%ebp),%edx
  10259f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025a2:	8b 00                	mov    (%eax),%eax
  1025a4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025ab:	8b 00                	mov    (%eax),%eax
  1025ad:	83 ec 04             	sub    $0x4,%esp
  1025b0:	51                   	push   %ecx
  1025b1:	52                   	push   %edx
  1025b2:	50                   	push   %eax
  1025b3:	e8 7e 13 00 00       	call   103936 <memcpy>
  1025b8:	83 c4 10             	add    $0x10,%esp
    }
  1025bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025be:	8b 00                	mov    (%eax),%eax
  1025c0:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1025ca:	8b 12                	mov    (%edx),%edx
  1025cc:	8b 14 95 c0 85 18 00 	mov    0x1885c0(,%edx,4),%edx
  1025d3:	8b 52 08             	mov    0x8(%edx),%edx
  1025d6:	2b 55 10             	sub    0x10(%ebp),%edx
  1025d9:	89 50 08             	mov    %edx,0x8(%eax)
}

  1025dc:	b8 00 00 00 00       	mov    $0x0,%eax
  1025e1:	eb 05                	jmp    1025e8 <ramfs_fifo_read+0xef>
static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1025e3:	b8 03 00 00 00       	mov    $0x3,%eax
    char* p;
  1025e8:	c9                   	leave  
  1025e9:	c3                   	ret    

001025ea <ramfs_fifo_write>:

    if (base > 36) {
  1025ea:	55                   	push   %ebp
  1025eb:	89 e5                	mov    %esp,%ebp
  1025ed:	83 ec 18             	sub    $0x18,%esp
        return;
  1025f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1025f3:	8b 40 04             	mov    0x4(%eax),%eax
  1025f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

  1025f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025fc:	8b 00                	mov    (%eax),%eax
  1025fe:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102605:	85 c0                	test   %eax,%eax
  102607:	0f 84 a8 00 00 00    	je     1026b5 <ramfs_fifo_write+0xcb>
    p = buf + 64;
  10260d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102610:	8b 00                	mov    (%eax),%eax
  102612:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102619:	8b 40 04             	mov    0x4(%eax),%eax
  10261c:	3b 45 10             	cmp    0x10(%ebp),%eax
  10261f:	73 0a                	jae    10262b <ramfs_fifo_write+0x41>
  102621:	b8 03 00 00 00       	mov    $0x3,%eax
  102626:	e9 8f 00 00 00       	jmp    1026ba <ramfs_fifo_write+0xd0>
    *p = '\0';
  10262b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10262e:	8b 00                	mov    (%eax),%eax
  102630:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102637:	8b 50 04             	mov    0x4(%eax),%edx
  10263a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10263d:	8b 00                	mov    (%eax),%eax
  10263f:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102646:	8b 40 08             	mov    0x8(%eax),%eax
  102649:	89 d1                	mov    %edx,%ecx
  10264b:	29 c1                	sub    %eax,%ecx
  10264d:	89 c8                	mov    %ecx,%eax
  10264f:	3b 45 10             	cmp    0x10(%ebp),%eax
  102652:	73 07                	jae    10265b <ramfs_fifo_write+0x71>
  102654:	b8 01 00 00 00       	mov    $0x1,%eax
  102659:	eb 5f                	jmp    1026ba <ramfs_fifo_write+0xd0>
    do {
        *--p = digits[x % base];
  10265b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10265e:	8b 00                	mov    (%eax),%eax
  102660:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102667:	8b 10                	mov    (%eax),%edx
  102669:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10266c:	8b 00                	mov    (%eax),%eax
  10266e:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102675:	8b 40 08             	mov    0x8(%eax),%eax
  102678:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10267b:	83 ec 04             	sub    $0x4,%esp
  10267e:	ff 75 10             	pushl  0x10(%ebp)
  102681:	ff 75 0c             	pushl  0xc(%ebp)
  102684:	50                   	push   %eax
  102685:	e8 ac 12 00 00       	call   103936 <memcpy>
  10268a:	83 c4 10             	add    $0x10,%esp
        x /= base;
  10268d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102690:	8b 00                	mov    (%eax),%eax
  102692:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102699:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10269c:	8b 12                	mov    (%edx),%edx
  10269e:	8b 14 95 c0 85 18 00 	mov    0x1885c0(,%edx,4),%edx
  1026a5:	8b 52 08             	mov    0x8(%edx),%edx
  1026a8:	03 55 10             	add    0x10(%ebp),%edx
  1026ab:	89 50 08             	mov    %edx,0x8(%eax)
    } while (x);
    kputs(p);
  1026ae:	b8 00 00 00 00       	mov    $0x0,%eax
  1026b3:	eb 05                	jmp    1026ba <ramfs_fifo_write+0xd0>
}

void clrscr(void) {
  1026b5:	b8 03 00 00 00       	mov    $0x3,%eax
    int i;
  1026ba:	c9                   	leave  
  1026bb:	c3                   	ret    

001026bc <ramfs_fifo_open>:
    for (i = 0; i < 2 * 25 * 80; i++) {
        video[i] = 0;
  1026bc:	55                   	push   %ebp
  1026bd:	89 e5                	mov    %esp,%ebp
  1026bf:	83 ec 18             	sub    $0x18,%esp
    }
  1026c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1026c5:	8b 00                	mov    (%eax),%eax
  1026c7:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026ce:	85 c0                	test   %eax,%eax
  1026d0:	0f 84 85 00 00 00    	je     10275b <ramfs_fifo_open+0x9f>

  1026d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1026d9:	83 e0 04             	and    $0x4,%eax
  1026dc:	85 c0                	test   %eax,%eax
  1026de:	74 07                	je     1026e7 <ramfs_fifo_open+0x2b>
  1026e0:	b8 00 00 00 00       	mov    $0x0,%eax
  1026e5:	eb 79                	jmp    102760 <ramfs_fifo_open+0xa4>
    color = 0x07;

  1026e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1026ea:	83 e0 01             	and    $0x1,%eax
  1026ed:	84 c0                	test   %al,%al
  1026ef:	74 13                	je     102704 <ramfs_fifo_open+0x48>
  1026f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1026f4:	8b 00                	mov    (%eax),%eax
  1026f6:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026fd:	8b 50 0c             	mov    0xc(%eax),%edx
  102700:	42                   	inc    %edx
  102701:	89 50 0c             	mov    %edx,0xc(%eax)
    x = y = 0;
  102704:	8b 45 0c             	mov    0xc(%ebp),%eax
  102707:	83 e0 02             	and    $0x2,%eax
  10270a:	85 c0                	test   %eax,%eax
  10270c:	74 13                	je     102721 <ramfs_fifo_open+0x65>
  10270e:	8b 45 08             	mov    0x8(%ebp),%eax
  102711:	8b 00                	mov    (%eax),%eax
  102713:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10271a:	8b 50 10             	mov    0x10(%eax),%edx
  10271d:	42                   	inc    %edx
  10271e:	89 50 10             	mov    %edx,0x10(%eax)
}

  102721:	83 ec 0c             	sub    $0xc,%esp
  102724:	6a 10                	push   $0x10
  102726:	e8 43 0f 00 00       	call   10366e <malloc>
  10272b:	83 c4 10             	add    $0x10,%esp
  10272e:	89 45 f4             	mov    %eax,-0xc(%ebp)
void setclr(char clr) {
    color = clr;
  102731:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102734:	8b 55 0c             	mov    0xc(%ebp),%edx
  102737:	89 50 0c             	mov    %edx,0xc(%eax)
}
  10273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10273d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  102744:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102747:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
int kprintf(const char* fmt, ...) {
  10274d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102750:	8b 55 08             	mov    0x8(%ebp),%edx
  102753:	89 50 04             	mov    %edx,0x4(%eax)
    va_list ap;
    const char* s;
  102756:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102759:	eb 05                	jmp    102760 <ramfs_fifo_open+0xa4>
    unsigned long n;
    char c;

  10275b:	b8 00 00 00 00       	mov    $0x0,%eax
    va_start(ap, fmt);
  102760:	c9                   	leave  
  102761:	c3                   	ret    

00102762 <ramfs_fifo_close>:
    kprintf_res = 0;
    while (*fmt) {
  102762:	55                   	push   %ebp
  102763:	89 e5                	mov    %esp,%ebp
  102765:	83 ec 18             	sub    $0x18,%esp
        if (*fmt == '%') {
  102768:	8b 45 08             	mov    0x8(%ebp),%eax
  10276b:	8b 40 04             	mov    0x4(%eax),%eax
  10276e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            fmt++;
            switch (*fmt) {
  102771:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102774:	8b 00                	mov    (%eax),%eax
  102776:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10277d:	85 c0                	test   %eax,%eax
  10277f:	74 40                	je     1027c1 <ramfs_fifo_close+0x5f>
            case 's':
  102781:	8b 45 08             	mov    0x8(%ebp),%eax
  102784:	8b 40 0c             	mov    0xc(%eax),%eax
  102787:	83 e0 01             	and    $0x1,%eax
  10278a:	84 c0                	test   %al,%al
  10278c:	74 13                	je     1027a1 <ramfs_fifo_close+0x3f>
  10278e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102791:	8b 00                	mov    (%eax),%eax
  102793:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10279a:	8b 50 0c             	mov    0xc(%eax),%edx
  10279d:	4a                   	dec    %edx
  10279e:	89 50 0c             	mov    %edx,0xc(%eax)
                s = va_arg(ap, char*);
  1027a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1027a4:	8b 40 0c             	mov    0xc(%eax),%eax
  1027a7:	83 e0 02             	and    $0x2,%eax
  1027aa:	85 c0                	test   %eax,%eax
  1027ac:	74 13                	je     1027c1 <ramfs_fifo_close+0x5f>
  1027ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027b1:	8b 00                	mov    (%eax),%eax
  1027b3:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1027ba:	8b 50 10             	mov    0x10(%eax),%edx
  1027bd:	4a                   	dec    %edx
  1027be:	89 50 10             	mov    %edx,0x10(%eax)
                kputs(s);
                break;
            case 'd':
  1027c1:	83 ec 0c             	sub    $0xc,%esp
  1027c4:	ff 75 08             	pushl  0x8(%ebp)
  1027c7:	e8 e8 10 00 00       	call   1038b4 <free>
  1027cc:	83 c4 10             	add    $0x10,%esp
            case 'u':
                n = va_arg(ap, unsigned long int);
  1027cf:	b8 00 00 00 00       	mov    $0x0,%eax
                kputn(n, 10);
  1027d4:	c9                   	leave  
  1027d5:	c3                   	ret    
	...

001027d8 <tar_parse_number>:
  1027d8:	55                   	push   %ebp
  1027d9:	89 e5                	mov    %esp,%ebp
  1027db:	83 ec 10             	sub    $0x10,%esp
  1027de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1027e5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1027ec:	c7 45 f8 0b 00 00 00 	movl   $0xb,-0x8(%ebp)
  1027f3:	eb 1d                	jmp    102812 <tar_parse_number+0x3a>
  1027f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027f8:	48                   	dec    %eax
  1027f9:	03 45 08             	add    0x8(%ebp),%eax
  1027fc:	8a 00                	mov    (%eax),%al
  1027fe:	0f be c0             	movsbl %al,%eax
  102801:	83 e8 30             	sub    $0x30,%eax
  102804:	0f af 45 fc          	imul   -0x4(%ebp),%eax
  102808:	01 45 f4             	add    %eax,-0xc(%ebp)
  10280b:	ff 4d f8             	decl   -0x8(%ebp)
  10280e:	c1 65 fc 03          	shll   $0x3,-0x4(%ebp)
  102812:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  102816:	75 dd                	jne    1027f5 <tar_parse_number+0x1d>
  102818:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10281b:	c9                   	leave  
  10281c:	c3                   	ret    

0010281d <tar_load_ramfs>:
        goto doKPutc;
    }

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  10281d:	55                   	push   %ebp
  10281e:	89 e5                	mov    %esp,%ebp
  102820:	83 ec 28             	sub    $0x28,%esp
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  102823:	8b 45 08             	mov    0x8(%ebp),%eax
  102826:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
  102829:	83 ec 08             	sub    $0x8,%esp
  10282c:	ff 75 e4             	pushl  -0x1c(%ebp)
  10282f:	68 94 76 10 00       	push   $0x107694
  102834:	e8 34 dd ff ff       	call   10056d <kprintf>
  102839:	83 c4 10             	add    $0x10,%esp
    }

  10283c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    if(ramfs_vga_writers()) {
        return;
    }
  102843:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102846:	89 45 ec             	mov    %eax,-0x14(%ebp)

    doKPutc:
  102849:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10284c:	8a 00                	mov    (%eax),%al
  10284e:	84 c0                	test   %al,%al
  102850:	75 12                	jne    102864 <tar_load_ramfs+0x47>
    kprintf_res++;
}

static void kputs(const char* s) {
    while (*s) {
        kputc(*s++);
  102852:	83 ec 0c             	sub    $0xc,%esp
  102855:	68 c0 76 10 00       	push   $0x1076c0
  10285a:	e8 0e dd ff ff       	call   10056d <kprintf>
  10285f:	83 c4 10             	add    $0x10,%esp
    }
  102862:	c9                   	leave  
  102863:	c3                   	ret    
    }

    doKPutc:

    if ((c == '\n') || (x > 79)) {
        x = 0;
  102864:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102867:	83 c0 7c             	add    $0x7c,%eax
  10286a:	83 ec 0c             	sub    $0xc,%esp
  10286d:	50                   	push   %eax
  10286e:	e8 65 ff ff ff       	call   1027d8 <tar_parse_number>
  102873:	83 c4 10             	add    $0x10,%esp
  102876:	89 45 e0             	mov    %eax,-0x20(%ebp)
        y++;
  102879:	81 45 e4 00 02 00 00 	addl   $0x200,-0x1c(%ebp)
    }

  102880:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102883:	85 c0                	test   %eax,%eax
  102885:	0f 84 85 00 00 00    	je     102910 <tar_load_ramfs+0xf3>
    if (c == '\n') {
  10288b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10288e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102891:	83 ec 04             	sub    $0x4,%esp
  102894:	52                   	push   %edx
  102895:	50                   	push   %eax
  102896:	68 e8 76 10 00       	push   $0x1076e8
  10289b:	e8 cd dc ff ff       	call   10056d <kprintf>
  1028a0:	83 c4 10             	add    $0x10,%esp
        return;
    }
  1028a3:	e8 13 f8 ff ff       	call   1020bb <ramfs_block_driver_struct>
  1028a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1028ab:	83 ec 04             	sub    $0x4,%esp
  1028ae:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  1028b1:	51                   	push   %ecx
  1028b2:	50                   	push   %eax
  1028b3:	52                   	push   %edx
  1028b4:	e8 2b 18 00 00       	call   1040e4 <vfs_create_kfile>
  1028b9:	83 c4 10             	add    $0x10,%esp

  1028bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028bf:	83 ec 08             	sub    $0x8,%esp
  1028c2:	6a 02                	push   $0x2
  1028c4:	50                   	push   %eax
  1028c5:	e8 b9 18 00 00       	call   104183 <vfs_open>
  1028ca:	83 c4 10             	add    $0x10,%esp
  1028cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (y > 24) {
        int i;
  1028d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1028d3:	6a 01                	push   $0x1
  1028d5:	50                   	push   %eax
  1028d6:	ff 75 e4             	pushl  -0x1c(%ebp)
  1028d9:	ff 75 f0             	pushl  -0x10(%ebp)
  1028dc:	e8 be 19 00 00       	call   10429f <vfs_write>
  1028e1:	83 c4 10             	add    $0x10,%esp
  1028e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (i = 0; i < 2 * 24 * 80; i++) {
  1028e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1028eb:	74 13                	je     102900 <tar_load_ramfs+0xe3>
            video[i] = video[i + 160];
  1028ed:	83 ec 08             	sub    $0x8,%esp
  1028f0:	ff 75 f4             	pushl  -0xc(%ebp)
  1028f3:	68 0c 77 10 00       	push   $0x10770c
  1028f8:	e8 70 dc ff ff       	call   10056d <kprintf>
  1028fd:	83 c4 10             	add    $0x10,%esp
        }

        for (; i < 2 * 25 * 80; i++) {
  102900:	83 ec 0c             	sub    $0xc,%esp
  102903:	ff 75 f0             	pushl  -0x10(%ebp)
  102906:	e8 d5 18 00 00       	call   1041e0 <vfs_close>
  10290b:	83 c4 10             	add    $0x10,%esp
  10290e:	eb 27                	jmp    102937 <tar_load_ramfs+0x11a>
            video[i] = 0;
        }
        y--;
    }
  102910:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102913:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102916:	83 ec 04             	sub    $0x4,%esp
  102919:	52                   	push   %edx
  10291a:	50                   	push   %eax
  10291b:	68 28 77 10 00       	push   $0x107728
  102920:	e8 48 dc ff ff       	call   10056d <kprintf>
  102925:	83 c4 10             	add    $0x10,%esp

  102928:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10292b:	83 ec 0c             	sub    $0xc,%esp
  10292e:	50                   	push   %eax
  10292f:	e8 9a 17 00 00       	call   1040ce <vfs_create_dir>
  102934:	83 c4 10             	add    $0x10,%esp
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

  102937:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10293a:	c1 e8 09             	shr    $0x9,%eax
  10293d:	c1 e0 09             	shl    $0x9,%eax
  102940:	01 45 e4             	add    %eax,-0x1c(%ebp)
    x++;
    kprintf_res++;
  102943:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102946:	25 ff 01 00 00       	and    $0x1ff,%eax
  10294b:	85 c0                	test   %eax,%eax
  10294d:	74 07                	je     102956 <tar_load_ramfs+0x139>
}
  10294f:	81 45 e4 00 02 00 00 	addl   $0x200,-0x1c(%ebp)
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
    }

  102956:	ff 45 e8             	incl   -0x18(%ebp)

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  102959:	e9 e5 fe ff ff       	jmp    102843 <tar_load_ramfs+0x26>
	...

00102960 <ramfs_vga_driver_struct>:

static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
    }

  102960:	55                   	push   %ebp
  102961:	89 e5                	mov    %esp,%ebp
    if(get_current_task() != 0) {
  102963:	b8 dc 60 10 00       	mov    $0x1060dc,%eax
        if(get_current_task()->stdout != 0) {
  102968:	5d                   	pop    %ebp
  102969:	c3                   	ret    

0010296a <ramfs_vga_writers>:
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  10296a:	55                   	push   %ebp
  10296b:	89 e5                	mov    %esp,%ebp
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10296d:	a1 24 85 12 00       	mov    0x128524,%eax

  102972:	5d                   	pop    %ebp
  102973:	c3                   	ret    

00102974 <ramfs_vga_available>:
            return;
        }
  102974:	55                   	push   %ebp
  102975:	89 e5                	mov    %esp,%ebp
    }
  102977:	b8 06 00 00 00       	mov    $0x6,%eax

  10297c:	5d                   	pop    %ebp
  10297d:	c3                   	ret    

0010297e <ramfs_vga_create>:
    if(ramfs_vga_writers()) {
        return;
  10297e:	55                   	push   %ebp
  10297f:	89 e5                	mov    %esp,%ebp
  102981:	83 ec 08             	sub    $0x8,%esp
    }
  102984:	83 ec 0c             	sub    $0xc,%esp
  102987:	6a 08                	push   $0x8
  102989:	e8 e0 0c 00 00       	call   10366e <malloc>
  10298e:	83 c4 10             	add    $0x10,%esp

  102991:	c9                   	leave  
  102992:	c3                   	ret    

00102993 <ramfs_vga_read>:
    doKPutc:

  102993:	55                   	push   %ebp
  102994:	89 e5                	mov    %esp,%ebp
    if ((c == '\n') || (x > 79)) {
  102996:	b8 03 00 00 00       	mov    $0x3,%eax
        x = 0;
  10299b:	5d                   	pop    %ebp
  10299c:	c3                   	ret    

0010299d <ramfs_vga_write>:
        y++;
    }
  10299d:	55                   	push   %ebp
  10299e:	89 e5                	mov    %esp,%ebp
  1029a0:	83 ec 10             	sub    $0x10,%esp

  1029a3:	83 7d 10 06          	cmpl   $0x6,0x10(%ebp)
  1029a7:	74 0a                	je     1029b3 <ramfs_vga_write+0x16>
  1029a9:	b8 03 00 00 00       	mov    $0x3,%eax
  1029ae:	e9 d7 00 00 00       	jmp    102a8a <ramfs_vga_write+0xed>
    if (c == '\n') {
        return;
  1029b3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1029b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

  1029b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029bc:	66 8b 00             	mov    (%eax),%ax
  1029bf:	66 85 c0             	test   %ax,%ax
  1029c2:	75 2d                	jne    1029f1 <ramfs_vga_write+0x54>
    if (y > 24) {
  1029c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029c7:	66 8b 40 02          	mov    0x2(%eax),%ax
  1029cb:	66 3d cf 07          	cmp    $0x7cf,%ax
  1029cf:	77 20                	ja     1029f1 <ramfs_vga_write+0x54>
  1029d1:	8b 15 d8 60 10 00    	mov    0x1060d8,%edx
  1029d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029da:	66 8b 40 02          	mov    0x2(%eax),%ax
  1029de:	25 ff ff 00 00       	and    $0xffff,%eax
  1029e3:	01 c0                	add    %eax,%eax
  1029e5:	01 c2                	add    %eax,%edx
  1029e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029ea:	66 8b 40 04          	mov    0x4(%eax),%ax
  1029ee:	66 89 02             	mov    %ax,(%edx)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  1029f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029f4:	66 8b 00             	mov    (%eax),%ax
  1029f7:	66 83 f8 01          	cmp    $0x1,%ax
  1029fb:	75 26                	jne    102a23 <ramfs_vga_write+0x86>
        }
  1029fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102a04:	eb 14                	jmp    102a1a <ramfs_vga_write+0x7d>

  102a06:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102a0b:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102a0e:	01 d2                	add    %edx,%edx
  102a10:	01 d0                	add    %edx,%eax
  102a12:	66 c7 00 00 00       	movw   $0x0,(%eax)

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }
  102a17:	ff 45 f8             	incl   -0x8(%ebp)
  102a1a:	81 7d f8 cf 07 00 00 	cmpl   $0x7cf,-0x8(%ebp)
  102a21:	7e e3                	jle    102a06 <ramfs_vga_write+0x69>

        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
  102a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a26:	66 8b 00             	mov    (%eax),%ax
  102a29:	66 83 f8 02          	cmp    $0x2,%ax
  102a2d:	75 56                	jne    102a85 <ramfs_vga_write+0xe8>
    }

  102a2f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102a36:	eb 25                	jmp    102a5d <ramfs_vga_write+0xc0>
    video[2 * (y * 80 + x)] = c;
  102a38:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102a3d:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102a40:	01 d2                	add    %edx,%edx
  102a42:	8d 14 10             	lea    (%eax,%edx,1),%edx
  102a45:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102a4a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a4d:	83 c1 50             	add    $0x50,%ecx
  102a50:	01 c9                	add    %ecx,%ecx
  102a52:	01 c8                	add    %ecx,%eax
  102a54:	66 8b 00             	mov    (%eax),%ax
  102a57:	66 89 02             	mov    %ax,(%edx)
        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
    }

  102a5a:	ff 45 fc             	incl   -0x4(%ebp)
  102a5d:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%ebp)
  102a64:	7e d2                	jle    102a38 <ramfs_vga_write+0x9b>
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

    x++;
  102a66:	eb 14                	jmp    102a7c <ramfs_vga_write+0xdf>
    kprintf_res++;
  102a68:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102a6d:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102a70:	01 d2                	add    %edx,%edx
  102a72:	01 d0                	add    %edx,%eax
  102a74:	66 c7 00 00 00       	movw   $0x0,(%eax)
    }

    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

    x++;
  102a79:	ff 45 fc             	incl   -0x4(%ebp)
  102a7c:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
  102a83:	7e e3                	jle    102a68 <ramfs_vga_write+0xcb>
    kprintf_res++;
}

static void kputs(const char* s) {
    while (*s) {
  102a85:	b8 00 00 00 00       	mov    $0x0,%eax
        kputc(*s++);
  102a8a:	c9                   	leave  
  102a8b:	c3                   	ret    

00102a8c <ramfs_vga_open>:
    }
}
  102a8c:	55                   	push   %ebp
  102a8d:	89 e5                	mov    %esp,%ebp
  102a8f:	83 ec 18             	sub    $0x18,%esp

  102a92:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a95:	83 e0 04             	and    $0x4,%eax
  102a98:	85 c0                	test   %eax,%eax
  102a9a:	74 07                	je     102aa3 <ramfs_vga_open+0x17>
  102a9c:	b8 00 00 00 00       	mov    $0x0,%eax
  102aa1:	eb 78                	jmp    102b1b <ramfs_vga_open+0x8f>
static void kputn(unsigned long x, int base) {
  102aa3:	8b 45 0c             	mov    0xc(%ebp),%eax
  102aa6:	83 e0 01             	and    $0x1,%eax
  102aa9:	84 c0                	test   %al,%al
  102aab:	74 07                	je     102ab4 <ramfs_vga_open+0x28>
  102aad:	b8 00 00 00 00       	mov    $0x0,%eax
  102ab2:	eb 67                	jmp    102b1b <ramfs_vga_open+0x8f>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  102ab4:	8b 45 0c             	mov    0xc(%ebp),%eax
  102ab7:	83 e0 02             	and    $0x2,%eax
  102aba:	85 c0                	test   %eax,%eax
  102abc:	74 10                	je     102ace <ramfs_vga_open+0x42>
  102abe:	a1 24 85 12 00       	mov    0x128524,%eax
  102ac3:	85 c0                	test   %eax,%eax
  102ac5:	74 07                	je     102ace <ramfs_vga_open+0x42>
  102ac7:	b8 00 00 00 00       	mov    $0x0,%eax
  102acc:	eb 4d                	jmp    102b1b <ramfs_vga_open+0x8f>
    char* p;
  102ace:	8b 45 0c             	mov    0xc(%ebp),%eax
  102ad1:	83 e0 02             	and    $0x2,%eax
  102ad4:	85 c0                	test   %eax,%eax
  102ad6:	74 0b                	je     102ae3 <ramfs_vga_open+0x57>
  102ad8:	a1 24 85 12 00       	mov    0x128524,%eax
  102add:	40                   	inc    %eax
  102ade:	a3 24 85 12 00       	mov    %eax,0x128524

    if (base > 36) {
  102ae3:	83 ec 0c             	sub    $0xc,%esp
  102ae6:	6a 10                	push   $0x10
  102ae8:	e8 81 0b 00 00       	call   10366e <malloc>
  102aed:	83 c4 10             	add    $0x10,%esp
  102af0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return;
    }
  102af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102af6:	8b 55 0c             	mov    0xc(%ebp),%edx
  102af9:	89 50 0c             	mov    %edx,0xc(%eax)

  102afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102aff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    p = buf + 64;
  102b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b09:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    *p = '\0';
  102b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b12:	8b 55 08             	mov    0x8(%ebp),%edx
  102b15:	89 50 04             	mov    %edx,0x4(%eax)
    do {
        *--p = digits[x % base];
  102b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
        x /= base;
  102b1b:	c9                   	leave  
  102b1c:	c3                   	ret    

00102b1d <ramfs_vga_close>:
    } while (x);
    kputs(p);
  102b1d:	55                   	push   %ebp
  102b1e:	89 e5                	mov    %esp,%ebp
  102b20:	83 ec 08             	sub    $0x8,%esp
}
  102b23:	8b 45 08             	mov    0x8(%ebp),%eax
  102b26:	8b 40 0c             	mov    0xc(%eax),%eax
  102b29:	83 e0 02             	and    $0x2,%eax
  102b2c:	85 c0                	test   %eax,%eax
  102b2e:	74 0b                	je     102b3b <ramfs_vga_close+0x1e>
  102b30:	a1 24 85 12 00       	mov    0x128524,%eax
  102b35:	48                   	dec    %eax
  102b36:	a3 24 85 12 00       	mov    %eax,0x128524

void clrscr(void) {
  102b3b:	83 ec 0c             	sub    $0xc,%esp
  102b3e:	ff 75 08             	pushl  0x8(%ebp)
  102b41:	e8 6e 0d 00 00       	call   1038b4 <free>
  102b46:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102b49:	b8 00 00 00 00       	mov    $0x0,%eax
        video[i] = 0;
  102b4e:	c9                   	leave  
  102b4f:	c3                   	ret    

00102b50 <enableScheduling>:
static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
    }
  102b50:	55                   	push   %ebp
  102b51:	89 e5                	mov    %esp,%ebp

  102b53:	c7 05 28 85 12 00 01 	movl   $0x1,0x128528
  102b5a:	00 00 00 
    if(get_current_task() != 0) {
  102b5d:	5d                   	pop    %ebp
  102b5e:	c3                   	ret    

00102b5f <isSchedulingEnabled>:
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  102b5f:	55                   	push   %ebp
  102b60:	89 e5                	mov    %esp,%ebp
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  102b62:	a1 28 85 12 00       	mov    0x128528,%eax
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  102b67:	5d                   	pop    %ebp
  102b68:	c3                   	ret    

00102b69 <get_current_task>:

            return;
  102b69:	55                   	push   %ebp
  102b6a:	89 e5                	mov    %esp,%ebp
        }
  102b6c:	a1 30 85 12 00       	mov    0x128530,%eax
    }
  102b71:	5d                   	pop    %ebp
  102b72:	c3                   	ret    

00102b73 <get_task_by_pid>:

    if(ramfs_vga_writers()) {
  102b73:	55                   	push   %ebp
  102b74:	89 e5                	mov    %esp,%ebp
  102b76:	83 ec 10             	sub    $0x10,%esp
        return;
  102b79:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102b7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

  102b81:	eb 18                	jmp    102b9b <get_task_by_pid+0x28>
    doKPutc:
  102b83:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b86:	8b 00                	mov    (%eax),%eax
  102b88:	3b 45 08             	cmp    0x8(%ebp),%eax
  102b8b:	75 05                	jne    102b92 <get_task_by_pid+0x1f>
  102b8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b90:	eb 14                	jmp    102ba6 <get_task_by_pid+0x33>

  102b92:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b95:	8b 40 08             	mov    0x8(%eax),%eax
  102b98:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }

    if(ramfs_vga_writers()) {
        return;
    }

  102b9b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  102b9f:	75 e2                	jne    102b83 <get_task_by_pid+0x10>
    doKPutc:

    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
  102ba1:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  102ba6:	c9                   	leave  
  102ba7:	c3                   	ret    

00102ba8 <register_handle>:

    if (c == '\n') {
  102ba8:	55                   	push   %ebp
  102ba9:	89 e5                	mov    %esp,%ebp
  102bab:	53                   	push   %ebx
  102bac:	83 ec 14             	sub    $0x14,%esp
        return;
  102baf:	a1 30 85 12 00       	mov    0x128530,%eax
  102bb4:	8b 40 3c             	mov    0x3c(%eax),%eax
  102bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

  102bba:	8b 1d 30 85 12 00    	mov    0x128530,%ebx
  102bc0:	83 ec 0c             	sub    $0xc,%esp
  102bc3:	6a 08                	push   $0x8
  102bc5:	e8 a4 0a 00 00       	call   10366e <malloc>
  102bca:	83 c4 10             	add    $0x10,%esp
  102bcd:	89 43 3c             	mov    %eax,0x3c(%ebx)
    if (y > 24) {
  102bd0:	a1 30 85 12 00       	mov    0x128530,%eax
  102bd5:	8b 40 3c             	mov    0x3c(%eax),%eax
  102bd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102bdb:	89 50 04             	mov    %edx,0x4(%eax)
        int i;
  102bde:	a1 30 85 12 00       	mov    0x128530,%eax
  102be3:	8b 40 3c             	mov    0x3c(%eax),%eax
  102be6:	8b 55 08             	mov    0x8(%ebp),%edx
  102be9:	89 10                	mov    %edx,(%eax)
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  102beb:	b8 00 00 00 00       	mov    $0x0,%eax
        }
  102bf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102bf3:	c9                   	leave  
  102bf4:	c3                   	ret    

00102bf5 <unregister_handle>:

        for (; i < 2 * 25 * 80; i++) {
  102bf5:	55                   	push   %ebp
  102bf6:	89 e5                	mov    %esp,%ebp
  102bf8:	83 ec 18             	sub    $0x18,%esp
            video[i] = 0;
  102bfb:	a1 30 85 12 00       	mov    0x128530,%eax
  102c00:	8b 40 3c             	mov    0x3c(%eax),%eax
  102c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        y--;
  102c06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  102c0a:	75 0a                	jne    102c16 <unregister_handle+0x21>
  102c0c:	b8 02 00 00 00       	mov    $0x2,%eax
  102c11:	e9 88 00 00 00       	jmp    102c9e <unregister_handle+0xa9>
    }
  102c16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102c1a:	75 07                	jne    102c23 <unregister_handle+0x2e>
  102c1c:	b8 01 00 00 00       	mov    $0x1,%eax
  102c21:	eb 7b                	jmp    102c9e <unregister_handle+0xa9>

    video[2 * (y * 80 + x)] = c;
  102c23:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c26:	8b 00                	mov    (%eax),%eax
  102c28:	3b 45 08             	cmp    0x8(%ebp),%eax
  102c2b:	75 66                	jne    102c93 <unregister_handle+0x9e>
    video[2 * (y * 80 + x) + 1] = color;
  102c2d:	a1 30 85 12 00       	mov    0x128530,%eax
  102c32:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102c35:	8b 52 04             	mov    0x4(%edx),%edx
  102c38:	89 50 3c             	mov    %edx,0x3c(%eax)

  102c3b:	83 ec 0c             	sub    $0xc,%esp
  102c3e:	ff 75 f0             	pushl  -0x10(%ebp)
  102c41:	e8 6e 0c 00 00       	call   1038b4 <free>
  102c46:	83 c4 10             	add    $0x10,%esp
    x++;
    kprintf_res++;
  102c49:	b8 00 00 00 00       	mov    $0x0,%eax
  102c4e:	eb 4e                	jmp    102c9e <unregister_handle+0xa9>
}

static void kputs(const char* s) {
    while (*s) {
  102c50:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c53:	8b 40 04             	mov    0x4(%eax),%eax
  102c56:	8b 00                	mov    (%eax),%eax
  102c58:	3b 45 08             	cmp    0x8(%ebp),%eax
  102c5b:	75 2d                	jne    102c8a <unregister_handle+0x95>
        kputc(*s++);
  102c5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c60:	8b 40 04             	mov    0x4(%eax),%eax
  102c63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  102c66:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c69:	8b 40 04             	mov    0x4(%eax),%eax
  102c6c:	8b 50 04             	mov    0x4(%eax),%edx
  102c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c72:	89 50 04             	mov    %edx,0x4(%eax)
}

  102c75:	83 ec 0c             	sub    $0xc,%esp
  102c78:	ff 75 f4             	pushl  -0xc(%ebp)
  102c7b:	e8 34 0c 00 00       	call   1038b4 <free>
  102c80:	83 c4 10             	add    $0x10,%esp
static void kputn(unsigned long x, int base) {
    char buf[65];
  102c83:	b8 00 00 00 00       	mov    $0x0,%eax
  102c88:	eb 14                	jmp    102c9e <unregister_handle+0xa9>
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

  102c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c8d:	8b 40 04             	mov    0x4(%eax),%eax
  102c90:	89 45 f0             	mov    %eax,-0x10(%ebp)

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  102c93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102c97:	75 b7                	jne    102c50 <unregister_handle+0x5b>
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
    }
  102c99:	b8 03 00 00 00       	mov    $0x3,%eax

  102c9e:	c9                   	leave  
  102c9f:	c3                   	ret    

00102ca0 <schedule_exception>:
    p = buf + 64;
    *p = '\0';
  102ca0:	55                   	push   %ebp
  102ca1:	89 e5                	mov    %esp,%ebp
  102ca3:	53                   	push   %ebx
  102ca4:	83 ec 04             	sub    $0x4,%esp
    do {
  102ca7:	8b 15 30 85 12 00    	mov    0x128530,%edx
  102cad:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102cb2:	39 c2                	cmp    %eax,%edx
  102cb4:	75 62                	jne    102d18 <schedule_exception+0x78>
  102cb6:	a1 30 85 12 00       	mov    0x128530,%eax
  102cbb:	8b 40 08             	mov    0x8(%eax),%eax
  102cbe:	85 c0                	test   %eax,%eax
  102cc0:	75 56                	jne    102d18 <schedule_exception+0x78>
        *--p = digits[x % base];
        x /= base;
  102cc2:	83 ec 0c             	sub    $0xc,%esp
  102cc5:	6a 04                	push   $0x4
  102cc7:	e8 8b d8 ff ff       	call   100557 <setclr>
  102ccc:	83 c4 10             	add    $0x10,%esp
    } while (x);
  102ccf:	8b 45 08             	mov    0x8(%ebp),%eax
  102cd2:	8b 58 20             	mov    0x20(%eax),%ebx
  102cd5:	8b 45 08             	mov    0x8(%ebp),%eax
  102cd8:	8b 48 1c             	mov    0x1c(%eax),%ecx
  102cdb:	a1 30 85 12 00       	mov    0x128530,%eax
  102ce0:	8b 50 24             	mov    0x24(%eax),%edx
  102ce3:	a1 30 85 12 00       	mov    0x128530,%eax
  102ce8:	8b 00                	mov    (%eax),%eax
  102cea:	83 ec 0c             	sub    $0xc,%esp
  102ced:	53                   	push   %ebx
  102cee:	51                   	push   %ecx
  102cef:	52                   	push   %edx
  102cf0:	50                   	push   %eax
  102cf1:	68 5c 77 10 00       	push   $0x10775c
  102cf6:	e8 72 d8 ff ff       	call   10056d <kprintf>
  102cfb:	83 c4 20             	add    $0x20,%esp
    kputs(p);
  102cfe:	83 ec 08             	sub    $0x8,%esp
  102d01:	68 9c 77 10 00       	push   $0x10779c
  102d06:	ff 75 08             	pushl  0x8(%ebp)
  102d09:	e8 c8 d4 ff ff       	call   1001d6 <show_cod>
  102d0e:	83 c4 10             	add    $0x10,%esp
}

void clrscr(void) {
  102d11:	b8 00 00 00 00       	mov    $0x0,%eax
  102d16:	eb 75                	jmp    102d8d <schedule_exception+0xed>
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
        video[i] = 0;
  102d18:	83 ec 0c             	sub    $0xc,%esp
  102d1b:	6a 04                	push   $0x4
  102d1d:	e8 35 d8 ff ff       	call   100557 <setclr>
  102d22:	83 c4 10             	add    $0x10,%esp
    }
  102d25:	8b 45 08             	mov    0x8(%ebp),%eax
  102d28:	8b 58 20             	mov    0x20(%eax),%ebx
  102d2b:	8b 45 08             	mov    0x8(%ebp),%eax
  102d2e:	8b 48 1c             	mov    0x1c(%eax),%ecx
  102d31:	a1 30 85 12 00       	mov    0x128530,%eax
  102d36:	8b 50 24             	mov    0x24(%eax),%edx
  102d39:	a1 30 85 12 00       	mov    0x128530,%eax
  102d3e:	8b 00                	mov    (%eax),%eax
  102d40:	83 ec 0c             	sub    $0xc,%esp
  102d43:	53                   	push   %ebx
  102d44:	51                   	push   %ecx
  102d45:	52                   	push   %edx
  102d46:	50                   	push   %eax
  102d47:	68 5c 77 10 00       	push   $0x10775c
  102d4c:	e8 1c d8 ff ff       	call   10056d <kprintf>
  102d51:	83 c4 20             	add    $0x20,%esp

  102d54:	83 ec 0c             	sub    $0xc,%esp
  102d57:	68 c5 77 10 00       	push   $0x1077c5
  102d5c:	e8 0c d8 ff ff       	call   10056d <kprintf>
  102d61:	83 c4 10             	add    $0x10,%esp
    color = 0x07;
  102d64:	83 ec 0c             	sub    $0xc,%esp
  102d67:	ff 75 08             	pushl  0x8(%ebp)
  102d6a:	e8 c2 d4 ff ff       	call   100231 <show_dump>
  102d6f:	83 c4 10             	add    $0x10,%esp

  102d72:	83 ec 0c             	sub    $0xc,%esp
  102d75:	6a 07                	push   $0x7
  102d77:	e8 db d7 ff ff       	call   100557 <setclr>
  102d7c:	83 c4 10             	add    $0x10,%esp
    x = y = 0;
}
  102d7f:	83 ec 0c             	sub    $0xc,%esp
  102d82:	ff 75 08             	pushl  0x8(%ebp)
  102d85:	e8 08 00 00 00       	call   102d92 <terminate_current>
  102d8a:	83 c4 10             	add    $0x10,%esp

void setclr(char clr) {
  102d8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102d90:	c9                   	leave  
  102d91:	c3                   	ret    

00102d92 <terminate_current>:
    color = clr;
}
  102d92:	55                   	push   %ebp
  102d93:	89 e5                	mov    %esp,%ebp
  102d95:	83 ec 18             	sub    $0x18,%esp

  102d98:	a1 30 85 12 00       	mov    0x128530,%eax
  102d9d:	8b 40 08             	mov    0x8(%eax),%eax
  102da0:	89 45 ec             	mov    %eax,-0x14(%ebp)
int kprintf(const char* fmt, ...) {
  102da3:	a1 30 85 12 00       	mov    0x128530,%eax
  102da8:	8b 40 0c             	mov    0xc(%eax),%eax
  102dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    va_list ap;
  102dae:	a1 30 85 12 00       	mov    0x128530,%eax
  102db3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    const char* s;
    unsigned long n;
  102db6:	e8 f2 1e 00 00       	call   104cad <vmm_free_current_pagetables>
    char c;

  102dbb:	8b 15 30 85 12 00    	mov    0x128530,%edx
  102dc1:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102dc6:	39 c2                	cmp    %eax,%edx
  102dc8:	75 0d                	jne    102dd7 <terminate_current+0x45>
    va_start(ap, fmt);
  102dca:	a1 30 85 12 00       	mov    0x128530,%eax
  102dcf:	8b 40 08             	mov    0x8(%eax),%eax
  102dd2:	a3 2c 85 12 00       	mov    %eax,0x12852c
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
  102dd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  102ddb:	74 09                	je     102de6 <terminate_current+0x54>
            fmt++;
  102ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102de0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102de3:	89 50 0c             	mov    %edx,0xc(%eax)
            switch (*fmt) {
            case 's':
                s = va_arg(ap, char*);
  102de6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102dea:	74 09                	je     102df5 <terminate_current+0x63>
                kputs(s);
  102dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102def:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102df2:	89 50 08             	mov    %edx,0x8(%eax)
                break;
            case 'd':
            case 'u':
  102df5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  102df9:	75 08                	jne    102e03 <terminate_current+0x71>
                n = va_arg(ap, unsigned long int);
  102dfb:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102e00:	89 45 ec             	mov    %eax,-0x14(%ebp)
                kputn(n, 10);
                break;
            case 'x':
  102e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102e06:	a3 30 85 12 00       	mov    %eax,0x128530
            case 'p':
                n = va_arg(ap, unsigned long int);
  102e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e0e:	8b 40 04             	mov    0x4(%eax),%eax
  102e11:	83 ec 0c             	sub    $0xc,%esp
  102e14:	50                   	push   %eax
  102e15:	e8 9a 0a 00 00       	call   1038b4 <free>
  102e1a:	83 c4 10             	add    $0x10,%esp
                kputn(n, 16);
  102e1d:	83 ec 0c             	sub    $0xc,%esp
  102e20:	ff 75 f4             	pushl  -0xc(%ebp)
  102e23:	e8 8c 0a 00 00       	call   1038b4 <free>
  102e28:	83 c4 10             	add    $0x10,%esp
                break;
            case 'c':
  102e2b:	a1 30 85 12 00       	mov    0x128530,%eax
  102e30:	85 c0                	test   %eax,%eax
  102e32:	75 13                	jne    102e47 <terminate_current+0xb5>
                c = va_arg(ap, int);
  102e34:	83 ec 08             	sub    $0x8,%esp
  102e37:	68 c7 77 10 00       	push   $0x1077c7
  102e3c:	ff 75 08             	pushl  0x8(%ebp)
  102e3f:	e8 92 d3 ff ff       	call   1001d6 <show_cod>
  102e44:	83 c4 10             	add    $0x10,%esp
                kputc(c);
                break;
            case '%':
  102e47:	a1 30 85 12 00       	mov    0x128530,%eax
  102e4c:	8b 40 14             	mov    0x14(%eax),%eax
  102e4f:	83 ec 0c             	sub    $0xc,%esp
  102e52:	50                   	push   %eax
  102e53:	e8 18 24 00 00       	call   105270 <vmm_activate_pagedir>
  102e58:	83 c4 10             	add    $0x10,%esp
                kputc('%');
  102e5b:	a1 30 85 12 00       	mov    0x128530,%eax
  102e60:	8b 40 04             	mov    0x4(%eax),%eax
                break;
  102e63:	c9                   	leave  
  102e64:	c3                   	ret    

00102e65 <init_task>:
            case '\0':
                goto out;
  102e65:	55                   	push   %ebp
  102e66:	89 e5                	mov    %esp,%ebp
  102e68:	57                   	push   %edi
  102e69:	56                   	push   %esi
  102e6a:	53                   	push   %ebx
  102e6b:	83 ec 6c             	sub    $0x6c,%esp
            default:
  102e6e:	83 ec 08             	sub    $0x8,%esp
  102e71:	6a 40                	push   $0x40
  102e73:	6a 01                	push   $0x1
  102e75:	e8 6a 09 00 00       	call   1037e4 <calloc>
  102e7a:	83 c4 10             	add    $0x10,%esp
  102e7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kputc('%');
  102e80:	83 ec 08             	sub    $0x8,%esp
  102e83:	6a 38                	push   $0x38
  102e85:	6a 01                	push   $0x1
  102e87:	e8 58 09 00 00       	call   1037e4 <calloc>
  102e8c:	83 c4 10             	add    $0x10,%esp
  102e8f:	89 c2                	mov    %eax,%edx
  102e91:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102e94:	89 50 04             	mov    %edx,0x4(%eax)
                kputc(*fmt);
                break;
  102e97:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102e9a:	8b 55 08             	mov    0x8(%ebp),%edx
  102e9d:	89 50 14             	mov    %edx,0x14(%eax)
            }
  102ea0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ea3:	c7 40 10 00 00 ff ff 	movl   $0xffff0000,0x10(%eax)
        } else {
  102eaa:	a1 f8 60 10 00       	mov    0x1060f8,%eax
  102eaf:	8b 55 dc             	mov    -0x24(%ebp),%edx
  102eb2:	89 02                	mov    %eax,(%edx)
  102eb4:	40                   	inc    %eax
  102eb5:	a3 f8 60 10 00       	mov    %eax,0x1060f8
            kputc(*fmt);
        }
  102eba:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ebd:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

  102ec4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ec7:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        fmt++;
  102ece:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ed1:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    }

  102ed8:	8b 15 2c 85 12 00    	mov    0x12852c,%edx
  102ede:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ee1:	89 50 08             	mov    %edx,0x8(%eax)
    out:
  102ee4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ee7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    va_end(ap);

  102eee:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102ef3:	85 c0                	test   %eax,%eax
  102ef5:	74 0b                	je     102f02 <init_task+0x9d>
    return kprintf_res;
  102ef7:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102efc:	8b 55 dc             	mov    -0x24(%ebp),%edx
  102eff:	89 50 0c             	mov    %edx,0xc(%eax)
}

  102f02:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f05:	a3 2c 85 12 00       	mov    %eax,0x12852c
  102f0a:	e8 69 1d 00 00       	call   104c78 <vmm_get_current_pagedir>
  102f0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102f12:	83 ec 0c             	sub    $0xc,%esp
  102f15:	ff 75 08             	pushl  0x8(%ebp)
  102f18:	e8 53 23 00 00       	call   105270 <vmm_activate_pagedir>
  102f1d:	83 c4 10             	add    $0x10,%esp
  102f20:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f23:	8b 40 10             	mov    0x10(%eax),%eax
  102f26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102f29:	eb 17                	jmp    102f42 <init_task+0xdd>
  102f2b:	83 ec 08             	sub    $0x8,%esp
  102f2e:	6a 00                	push   $0x0
  102f30:	ff 75 e4             	pushl  -0x1c(%ebp)
  102f33:	e8 93 22 00 00       	call   1051cb <vmm_alloc_addr>
  102f38:	83 c4 10             	add    $0x10,%esp
  102f3b:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  102f42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102f45:	3d ff ef ff ff       	cmp    $0xffffefff,%eax
  102f4a:	76 df                	jbe    102f2b <init_task+0xc6>
  102f4c:	8b 75 0c             	mov    0xc(%ebp),%esi
  102f4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f52:	8b 40 10             	mov    0x10(%eax),%eax
  102f55:	05 00 10 00 00       	add    $0x1000,%eax
  102f5a:	89 45 94             	mov    %eax,-0x6c(%ebp)
  102f5d:	8d 5d a4             	lea    -0x5c(%ebp),%ebx
  102f60:	b8 00 00 00 00       	mov    $0x0,%eax
  102f65:	ba 0e 00 00 00       	mov    $0xe,%edx
  102f6a:	89 df                	mov    %ebx,%edi
  102f6c:	89 d1                	mov    %edx,%ecx
  102f6e:	f3 ab                	rep stos %eax,%es:(%edi)
  102f70:	89 75 c8             	mov    %esi,-0x38(%ebp)
  102f73:	c7 45 cc 1b 00 00 00 	movl   $0x1b,-0x34(%ebp)
  102f7a:	c7 45 d0 00 02 00 00 	movl   $0x200,-0x30(%ebp)
  102f81:	8b 45 94             	mov    -0x6c(%ebp),%eax
  102f84:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102f87:	c7 45 d8 23 00 00 00 	movl   $0x23,-0x28(%ebp)
  102f8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f91:	8b 40 04             	mov    0x4(%eax),%eax
  102f94:	83 ec 04             	sub    $0x4,%esp
  102f97:	6a 38                	push   $0x38
  102f99:	8d 55 a4             	lea    -0x5c(%ebp),%edx
  102f9c:	52                   	push   %edx
  102f9d:	50                   	push   %eax
  102f9e:	e8 93 09 00 00       	call   103936 <memcpy>
  102fa3:	83 c4 10             	add    $0x10,%esp
  102fa6:	83 ec 0c             	sub    $0xc,%esp
  102fa9:	ff 75 e0             	pushl  -0x20(%ebp)
  102fac:	e8 bf 22 00 00       	call   105270 <vmm_activate_pagedir>
  102fb1:	83 c4 10             	add    $0x10,%esp
  102fb4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102fb7:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102fba:	83 c4 00             	add    $0x0,%esp
  102fbd:	5b                   	pop    %ebx
  102fbe:	5e                   	pop    %esi
  102fbf:	5f                   	pop    %edi
  102fc0:	5d                   	pop    %ebp
  102fc1:	c3                   	ret    

00102fc2 <save_cpu_state>:
  102fc2:	55                   	push   %ebp
  102fc3:	89 e5                	mov    %esp,%ebp
  102fc5:	83 ec 08             	sub    $0x8,%esp
  102fc8:	a1 30 85 12 00       	mov    0x128530,%eax
  102fcd:	8b 40 18             	mov    0x18(%eax),%eax
  102fd0:	85 c0                	test   %eax,%eax
  102fd2:	74 38                	je     10300c <save_cpu_state+0x4a>
  102fd4:	a1 30 85 12 00       	mov    0x128530,%eax
  102fd9:	8b 40 18             	mov    0x18(%eax),%eax
  102fdc:	8a 40 14             	mov    0x14(%eax),%al
  102fdf:	84 c0                	test   %al,%al
  102fe1:	74 29                	je     10300c <save_cpu_state+0x4a>
  102fe3:	a1 30 85 12 00       	mov    0x128530,%eax
  102fe8:	8b 40 18             	mov    0x18(%eax),%eax
  102feb:	8b 40 18             	mov    0x18(%eax),%eax
  102fee:	83 ec 04             	sub    $0x4,%esp
  102ff1:	6a 38                	push   $0x38
  102ff3:	ff 75 08             	pushl  0x8(%ebp)
  102ff6:	50                   	push   %eax
  102ff7:	e8 3a 09 00 00       	call   103936 <memcpy>
  102ffc:	83 c4 10             	add    $0x10,%esp
  102fff:	a1 30 85 12 00       	mov    0x128530,%eax
  103004:	8b 40 18             	mov    0x18(%eax),%eax
  103007:	8b 40 18             	mov    0x18(%eax),%eax
  10300a:	eb 21                	jmp    10302d <save_cpu_state+0x6b>
  10300c:	a1 30 85 12 00       	mov    0x128530,%eax
  103011:	8b 40 04             	mov    0x4(%eax),%eax
  103014:	83 ec 04             	sub    $0x4,%esp
  103017:	6a 38                	push   $0x38
  103019:	ff 75 08             	pushl  0x8(%ebp)
  10301c:	50                   	push   %eax
  10301d:	e8 14 09 00 00       	call   103936 <memcpy>
  103022:	83 c4 10             	add    $0x10,%esp
  103025:	a1 30 85 12 00       	mov    0x128530,%eax
  10302a:	8b 40 04             	mov    0x4(%eax),%eax
  10302d:	c9                   	leave  
  10302e:	c3                   	ret    

0010302f <schedule_to_task>:
  10302f:	55                   	push   %ebp
  103030:	89 e5                	mov    %esp,%ebp
  103032:	83 ec 08             	sub    $0x8,%esp
  103035:	8b 45 08             	mov    0x8(%ebp),%eax
  103038:	a3 30 85 12 00       	mov    %eax,0x128530
  10303d:	8b 45 08             	mov    0x8(%ebp),%eax
  103040:	8b 40 14             	mov    0x14(%eax),%eax
  103043:	83 ec 0c             	sub    $0xc,%esp
  103046:	50                   	push   %eax
  103047:	e8 24 22 00 00       	call   105270 <vmm_activate_pagedir>
  10304c:	83 c4 10             	add    $0x10,%esp
  10304f:	8b 45 08             	mov    0x8(%ebp),%eax
  103052:	8b 40 18             	mov    0x18(%eax),%eax
  103055:	85 c0                	test   %eax,%eax
  103057:	75 08                	jne    103061 <schedule_to_task+0x32>
  103059:	8b 45 08             	mov    0x8(%ebp),%eax
  10305c:	8b 40 04             	mov    0x4(%eax),%eax
  10305f:	eb 24                	jmp    103085 <schedule_to_task+0x56>
  103061:	8b 45 08             	mov    0x8(%ebp),%eax
  103064:	8b 40 18             	mov    0x18(%eax),%eax
  103067:	8a 40 14             	mov    0x14(%eax),%al
  10306a:	84 c0                	test   %al,%al
  10306c:	75 0e                	jne    10307c <schedule_to_task+0x4d>
  10306e:	83 ec 0c             	sub    $0xc,%esp
  103071:	ff 75 08             	pushl  0x8(%ebp)
  103074:	e8 93 00 00 00       	call   10310c <init_rpc_call>
  103079:	83 c4 10             	add    $0x10,%esp
  10307c:	8b 45 08             	mov    0x8(%ebp),%eax
  10307f:	8b 40 18             	mov    0x18(%eax),%eax
  103082:	8b 40 18             	mov    0x18(%eax),%eax
  103085:	c9                   	leave  
  103086:	c3                   	ret    

00103087 <schedule>:
  103087:	55                   	push   %ebp
  103088:	89 e5                	mov    %esp,%ebp
  10308a:	83 ec 18             	sub    $0x18,%esp
  10308d:	a1 2c 85 12 00       	mov    0x12852c,%eax
  103092:	85 c0                	test   %eax,%eax
  103094:	74 71                	je     103107 <schedule+0x80>
  103096:	a1 28 85 12 00       	mov    0x128528,%eax
  10309b:	85 c0                	test   %eax,%eax
  10309d:	74 68                	je     103107 <schedule+0x80>
  10309f:	a1 30 85 12 00       	mov    0x128530,%eax
  1030a4:	85 c0                	test   %eax,%eax
  1030a6:	75 28                	jne    1030d0 <schedule+0x49>
  1030a8:	a1 2c 85 12 00       	mov    0x12852c,%eax
  1030ad:	a3 30 85 12 00       	mov    %eax,0x128530
  1030b2:	a1 30 85 12 00       	mov    0x128530,%eax
  1030b7:	8b 40 14             	mov    0x14(%eax),%eax
  1030ba:	83 ec 0c             	sub    $0xc,%esp
  1030bd:	50                   	push   %eax
  1030be:	e8 ad 21 00 00       	call   105270 <vmm_activate_pagedir>
  1030c3:	83 c4 10             	add    $0x10,%esp
  1030c6:	a1 30 85 12 00       	mov    0x128530,%eax
  1030cb:	8b 40 04             	mov    0x4(%eax),%eax
  1030ce:	eb 3a                	jmp    10310a <schedule+0x83>
  1030d0:	a1 30 85 12 00       	mov    0x128530,%eax
  1030d5:	8b 40 08             	mov    0x8(%eax),%eax
  1030d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1030db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1030df:	75 08                	jne    1030e9 <schedule+0x62>
  1030e1:	a1 2c 85 12 00       	mov    0x12852c,%eax
  1030e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1030e9:	83 ec 0c             	sub    $0xc,%esp
  1030ec:	ff 75 08             	pushl  0x8(%ebp)
  1030ef:	e8 ce fe ff ff       	call   102fc2 <save_cpu_state>
  1030f4:	83 c4 10             	add    $0x10,%esp
  1030f7:	83 ec 0c             	sub    $0xc,%esp
  1030fa:	ff 75 f4             	pushl  -0xc(%ebp)
  1030fd:	e8 2d ff ff ff       	call   10302f <schedule_to_task>
  103102:	83 c4 10             	add    $0x10,%esp
  103105:	eb 03                	jmp    10310a <schedule+0x83>
  103107:	8b 45 08             	mov    0x8(%ebp),%eax
  10310a:	c9                   	leave  
  10310b:	c3                   	ret    

0010310c <init_rpc_call>:
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;
  10310c:	55                   	push   %ebp
  10310d:	89 e5                	mov    %esp,%ebp
  10310f:	57                   	push   %edi
  103110:	56                   	push   %esi
  103111:	53                   	push   %ebx
  103112:	83 ec 5c             	sub    $0x5c,%esp

  103115:	8b 45 08             	mov    0x8(%ebp),%eax
  103118:	8b 40 18             	mov    0x18(%eax),%eax
  10311b:	89 45 e0             	mov    %eax,-0x20(%ebp)
static char* video = (char*) 0xb8000;

  10311e:	83 ec 08             	sub    $0x8,%esp
  103121:	6a 38                	push   $0x38
  103123:	6a 01                	push   $0x1
  103125:	e8 ba 06 00 00       	call   1037e4 <calloc>
  10312a:	83 c4 10             	add    $0x10,%esp
  10312d:	89 c2                	mov    %eax,%edx
  10312f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103132:	89 50 18             	mov    %edx,0x18(%eax)
    if(in_cod()) {
        goto doKPutc;
    }

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
  103135:	8b 45 08             	mov    0x8(%ebp),%eax
  103138:	8b 70 1c             	mov    0x1c(%eax),%esi
static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
    }

    if(get_current_task() != 0) {
  10313b:	8b 45 08             	mov    0x8(%ebp),%eax
  10313e:	8b 40 04             	mov    0x4(%eax),%eax
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
  103141:	8b 40 30             	mov    0x30(%eax),%eax
static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
    }

    if(get_current_task() != 0) {
  103144:	83 e8 10             	sub    $0x10,%eax
  103147:	89 45 a4             	mov    %eax,-0x5c(%ebp)
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
  10314a:	8d 5d a8             	lea    -0x58(%ebp),%ebx
  10314d:	b8 00 00 00 00       	mov    $0x0,%eax
  103152:	ba 0e 00 00 00       	mov    $0xe,%edx
  103157:	89 df                	mov    %ebx,%edi
  103159:	89 d1                	mov    %edx,%ecx
  10315b:	f3 ab                	rep stos %eax,%es:(%edi)
  10315d:	89 75 cc             	mov    %esi,-0x34(%ebp)
  103160:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  103167:	c7 45 d4 00 02 00 00 	movl   $0x200,-0x2c(%ebp)
  10316e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  103171:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103174:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
        }
    }
  10317b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10317e:	8b 40 18             	mov    0x18(%eax),%eax
  103181:	83 ec 04             	sub    $0x4,%esp
  103184:	6a 38                	push   $0x38
  103186:	8d 55 a8             	lea    -0x58(%ebp),%edx
  103189:	52                   	push   %edx
  10318a:	50                   	push   %eax
  10318b:	e8 a6 07 00 00       	call   103936 <memcpy>
  103190:	83 c4 10             	add    $0x10,%esp

    if(ramfs_vga_writers()) {
  103193:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103196:	8b 40 18             	mov    0x18(%eax),%eax
  103199:	8b 40 30             	mov    0x30(%eax),%eax
  10319c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return;
    }
  10319f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1031a2:	8d 50 04             	lea    0x4(%eax),%edx
  1031a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031a8:	8b 40 04             	mov    0x4(%eax),%eax
  1031ab:	89 02                	mov    %eax,(%edx)

  1031ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1031b0:	8d 50 08             	lea    0x8(%eax),%edx
  1031b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031b6:	8b 40 08             	mov    0x8(%eax),%eax
  1031b9:	89 02                	mov    %eax,(%edx)
    doKPutc:
  1031bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1031be:	8d 50 0c             	lea    0xc(%eax),%edx
  1031c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031c4:	8b 40 10             	mov    0x10(%eax),%eax
  1031c7:	89 02                	mov    %eax,(%edx)

    if ((c == '\n') || (x > 79)) {
  1031c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031cc:	c6 40 14 01          	movb   $0x1,0x14(%eax)
        x = 0;
  1031d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1031d3:	83 c4 00             	add    $0x0,%esp
  1031d6:	5b                   	pop    %ebx
  1031d7:	5e                   	pop    %esi
  1031d8:	5f                   	pop    %edi
  1031d9:	5d                   	pop    %ebp
  1031da:	c3                   	ret    

001031db <create_rpc_call>:
        y++;
    }
  1031db:	55                   	push   %ebp
  1031dc:	89 e5                	mov    %esp,%ebp
  1031de:	83 ec 18             	sub    $0x18,%esp

  1031e1:	83 ec 08             	sub    $0x8,%esp
  1031e4:	6a 20                	push   $0x20
  1031e6:	6a 01                	push   $0x1
  1031e8:	e8 f7 05 00 00       	call   1037e4 <calloc>
  1031ed:	83 c4 10             	add    $0x10,%esp
  1031f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (c == '\n') {
  1031f3:	83 ec 0c             	sub    $0xc,%esp
  1031f6:	ff 75 08             	pushl  0x8(%ebp)
  1031f9:	e8 75 f9 ff ff       	call   102b73 <get_task_by_pid>
  1031fe:	83 c4 10             	add    $0x10,%esp
  103201:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return;
    }
  103204:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103208:	75 34                	jne    10323e <create_rpc_call+0x63>

  10320a:	83 ec 0c             	sub    $0xc,%esp
  10320d:	6a 0a                	push   $0xa
  10320f:	e8 43 d3 ff ff       	call   100557 <setclr>
  103214:	83 c4 10             	add    $0x10,%esp
    if (y > 24) {
  103217:	83 ec 0c             	sub    $0xc,%esp
  10321a:	68 e0 77 10 00       	push   $0x1077e0
  10321f:	e8 49 d3 ff ff       	call   10056d <kprintf>
  103224:	83 c4 10             	add    $0x10,%esp
        int i;
  103227:	83 ec 0c             	sub    $0xc,%esp
  10322a:	6a 07                	push   $0x7
  10322c:	e8 26 d3 ff ff       	call   100557 <setclr>
  103231:	83 c4 10             	add    $0x10,%esp
        for (i = 0; i < 2 * 24 * 80; i++) {
  103234:	b8 02 00 00 00       	mov    $0x2,%eax
  103239:	e9 06 01 00 00       	jmp    103344 <create_rpc_call+0x169>
            video[i] = video[i + 160];
        }

  10323e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103241:	8b 40 1c             	mov    0x1c(%eax),%eax
  103244:	85 c0                	test   %eax,%eax
  103246:	75 34                	jne    10327c <create_rpc_call+0xa1>
        for (; i < 2 * 25 * 80; i++) {
  103248:	83 ec 0c             	sub    $0xc,%esp
  10324b:	6a 0a                	push   $0xa
  10324d:	e8 05 d3 ff ff       	call   100557 <setclr>
  103252:	83 c4 10             	add    $0x10,%esp
            video[i] = 0;
  103255:	83 ec 0c             	sub    $0xc,%esp
  103258:	68 0c 78 10 00       	push   $0x10780c
  10325d:	e8 0b d3 ff ff       	call   10056d <kprintf>
  103262:	83 c4 10             	add    $0x10,%esp
        }
  103265:	83 ec 0c             	sub    $0xc,%esp
  103268:	6a 07                	push   $0x7
  10326a:	e8 e8 d2 ff ff       	call   100557 <setclr>
  10326f:	83 c4 10             	add    $0x10,%esp
        y--;
  103272:	b8 03 00 00 00       	mov    $0x3,%eax
  103277:	e9 c8 00 00 00       	jmp    103344 <create_rpc_call+0x169>
    }

    video[2 * (y * 80 + x)] = c;
  10327c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10327f:	8b 55 0c             	mov    0xc(%ebp),%edx
  103282:	89 50 04             	mov    %edx,0x4(%eax)
    video[2 * (y * 80 + x) + 1] = color;
  103285:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103288:	8b 55 10             	mov    0x10(%ebp),%edx
  10328b:	89 50 08             	mov    %edx,0x8(%eax)

  10328e:	e8 d6 f8 ff ff       	call   102b69 <get_current_task>
  103293:	85 c0                	test   %eax,%eax
  103295:	74 09                	je     1032a0 <create_rpc_call+0xc5>
  103297:	e8 cd f8 ff ff       	call   102b69 <get_current_task>
  10329c:	8b 00                	mov    (%eax),%eax
  10329e:	eb 05                	jmp    1032a5 <create_rpc_call+0xca>
  1032a0:	b8 00 00 00 00       	mov    $0x0,%eax
  1032a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1032a8:	89 02                	mov    %eax,(%edx)
    x++;
    kprintf_res++;
  1032aa:	83 ec 0c             	sub    $0xc,%esp
  1032ad:	ff 75 14             	pushl  0x14(%ebp)
  1032b0:	e8 b9 03 00 00       	call   10366e <malloc>
  1032b5:	83 c4 10             	add    $0x10,%esp
  1032b8:	89 c2                	mov    %eax,%edx
  1032ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032bd:	89 50 0c             	mov    %edx,0xc(%eax)
}
  1032c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032c3:	8b 40 0c             	mov    0xc(%eax),%eax
  1032c6:	83 ec 04             	sub    $0x4,%esp
  1032c9:	ff 75 14             	pushl  0x14(%ebp)
  1032cc:	ff 75 18             	pushl  0x18(%ebp)
  1032cf:	50                   	push   %eax
  1032d0:	e8 61 06 00 00       	call   103936 <memcpy>
  1032d5:	83 c4 10             	add    $0x10,%esp

  1032d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032db:	8b 55 14             	mov    0x14(%ebp),%edx
  1032de:	89 50 10             	mov    %edx,0x10(%eax)
static void kputs(const char* s) {
    while (*s) {
  1032e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032e4:	8b 40 18             	mov    0x18(%eax),%eax
  1032e7:	85 c0                	test   %eax,%eax
  1032e9:	75 10                	jne    1032fb <create_rpc_call+0x120>
        kputc(*s++);
  1032eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032ee:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1032f1:	89 50 18             	mov    %edx,0x18(%eax)
    }
  1032f4:	b8 00 00 00 00       	mov    $0x0,%eax
  1032f9:	eb 49                	jmp    103344 <create_rpc_call+0x169>
}

static void kputn(unsigned long x, int base) {
    char buf[65];
  1032fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032fe:	8b 40 18             	mov    0x18(%eax),%eax
  103301:	89 45 f4             	mov    %eax,-0xc(%ebp)
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;
  103304:	eb 33                	jmp    103339 <create_rpc_call+0x15e>

  103306:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103309:	8b 40 1c             	mov    0x1c(%eax),%eax
  10330c:	85 c0                	test   %eax,%eax
  10330e:	75 20                	jne    103330 <create_rpc_call+0x155>
    if (base > 36) {
  103310:	83 ec 0c             	sub    $0xc,%esp
  103313:	68 3b 78 10 00       	push   $0x10783b
  103318:	e8 50 d2 ff ff       	call   10056d <kprintf>
  10331d:	83 c4 10             	add    $0x10,%esp
        return;
    }
  103320:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103323:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103326:	89 50 1c             	mov    %edx,0x1c(%eax)

  103329:	b8 00 00 00 00       	mov    $0x0,%eax
  10332e:	eb 14                	jmp    103344 <create_rpc_call+0x169>
    p = buf + 64;
    *p = '\0';
  103330:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103333:	8b 40 1c             	mov    0x1c(%eax),%eax
  103336:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;
  103339:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10333d:	75 c7                	jne    103306 <create_rpc_call+0x12b>
    p = buf + 64;
    *p = '\0';
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
  10333f:	b8 01 00 00 00       	mov    $0x1,%eax
    kputs(p);
  103344:	c9                   	leave  
  103345:	c3                   	ret    

00103346 <return_rpc_call>:
}

  103346:	55                   	push   %ebp
  103347:	89 e5                	mov    %esp,%ebp
  103349:	83 ec 18             	sub    $0x18,%esp
void clrscr(void) {
  10334c:	e8 18 f8 ff ff       	call   102b69 <get_current_task>
  103351:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  103354:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103357:	8b 40 18             	mov    0x18(%eax),%eax
  10335a:	85 c0                	test   %eax,%eax
  10335c:	75 68                	jne    1033c6 <return_rpc_call+0x80>
        video[i] = 0;
  10335e:	83 ec 0c             	sub    $0xc,%esp
  103361:	6a 04                	push   $0x4
  103363:	e8 ef d1 ff ff       	call   100557 <setclr>
  103368:	83 c4 10             	add    $0x10,%esp
    }
  10336b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10336e:	8b 50 24             	mov    0x24(%eax),%edx
  103371:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103374:	8b 00                	mov    (%eax),%eax
  103376:	83 ec 04             	sub    $0x4,%esp
  103379:	52                   	push   %edx
  10337a:	50                   	push   %eax
  10337b:	68 50 78 10 00       	push   $0x107850
  103380:	e8 e8 d1 ff ff       	call   10056d <kprintf>
  103385:	83 c4 10             	add    $0x10,%esp

  103388:	83 ec 0c             	sub    $0xc,%esp
  10338b:	68 8e 78 10 00       	push   $0x10788e
  103390:	e8 d8 d1 ff ff       	call   10056d <kprintf>
  103395:	83 c4 10             	add    $0x10,%esp
    color = 0x07;
  103398:	83 ec 0c             	sub    $0xc,%esp
  10339b:	ff 75 08             	pushl  0x8(%ebp)
  10339e:	e8 8e ce ff ff       	call   100231 <show_dump>
  1033a3:	83 c4 10             	add    $0x10,%esp

  1033a6:	83 ec 0c             	sub    $0xc,%esp
  1033a9:	6a 07                	push   $0x7
  1033ab:	e8 a7 d1 ff ff       	call   100557 <setclr>
  1033b0:	83 c4 10             	add    $0x10,%esp
    x = y = 0;
}
  1033b3:	83 ec 0c             	sub    $0xc,%esp
  1033b6:	ff 75 08             	pushl  0x8(%ebp)
  1033b9:	e8 d4 f9 ff ff       	call   102d92 <terminate_current>
  1033be:	83 c4 10             	add    $0x10,%esp
  1033c1:	e9 b5 00 00 00       	jmp    10347b <return_rpc_call+0x135>

void setclr(char clr) {
    color = clr;
  1033c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033c9:	8b 40 18             	mov    0x18(%eax),%eax
  1033cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  1033cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033d2:	8b 40 18             	mov    0x18(%eax),%eax
  1033d5:	8b 50 1c             	mov    0x1c(%eax),%edx
  1033d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033db:	89 50 18             	mov    %edx,0x18(%eax)

int kprintf(const char* fmt, ...) {
  1033de:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033e1:	8b 00                	mov    (%eax),%eax
  1033e3:	85 c0                	test   %eax,%eax
  1033e5:	0f 84 82 00 00 00    	je     10346d <return_rpc_call+0x127>
    va_list ap;
  1033eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033ee:	8b 00                	mov    (%eax),%eax
  1033f0:	83 ec 0c             	sub    $0xc,%esp
  1033f3:	50                   	push   %eax
  1033f4:	e8 7a f7 ff ff       	call   102b73 <get_task_by_pid>
  1033f9:	83 c4 10             	add    $0x10,%esp
  1033fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    const char* s;
    unsigned long n;
  1033ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103402:	8b 40 04             	mov    0x4(%eax),%eax
  103405:	85 c0                	test   %eax,%eax
  103407:	75 12                	jne    10341b <return_rpc_call+0xd5>
    char c;
  103409:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10340c:	8b 40 08             	mov    0x8(%eax),%eax
  10340f:	83 ec 0c             	sub    $0xc,%esp
  103412:	50                   	push   %eax
  103413:	e8 54 db ff ff       	call   100f6c <enable_irq_rpc>
  103418:	83 c4 10             	add    $0x10,%esp

    va_start(ap, fmt);
    kprintf_res = 0;
  10341b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10341e:	8b 40 18             	mov    0x18(%eax),%eax
  103421:	83 ec 0c             	sub    $0xc,%esp
  103424:	50                   	push   %eax
  103425:	e8 8a 04 00 00       	call   1038b4 <free>
  10342a:	83 c4 10             	add    $0x10,%esp
    while (*fmt) {
  10342d:	83 ec 0c             	sub    $0xc,%esp
  103430:	ff 75 f0             	pushl  -0x10(%ebp)
  103433:	e8 7c 04 00 00       	call   1038b4 <free>
  103438:	83 c4 10             	add    $0x10,%esp
        if (*fmt == '%') {
            fmt++;
  10343b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10343f:	75 10                	jne    103451 <return_rpc_call+0x10b>
            switch (*fmt) {
  103441:	83 ec 0c             	sub    $0xc,%esp
  103444:	ff 75 ec             	pushl  -0x14(%ebp)
  103447:	e8 e3 fb ff ff       	call   10302f <schedule_to_task>
  10344c:	83 c4 10             	add    $0x10,%esp
  10344f:	eb 2a                	jmp    10347b <return_rpc_call+0x135>
            case 's':
                s = va_arg(ap, char*);
                kputs(s);
  103451:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103454:	8b 40 04             	mov    0x4(%eax),%eax
  103457:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
                break;
            case 'd':
  10345d:	83 ec 0c             	sub    $0xc,%esp
  103460:	ff 75 f4             	pushl  -0xc(%ebp)
  103463:	e8 c7 fb ff ff       	call   10302f <schedule_to_task>
  103468:	83 c4 10             	add    $0x10,%esp
  10346b:	eb 0e                	jmp    10347b <return_rpc_call+0x135>
            case 'u':
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
                break;
  10346d:	83 ec 0c             	sub    $0xc,%esp
  103470:	ff 75 ec             	pushl  -0x14(%ebp)
  103473:	e8 b7 fb ff ff       	call   10302f <schedule_to_task>
  103478:	83 c4 10             	add    $0x10,%esp
            case 'x':
            case 'p':
  10347b:	c9                   	leave  
  10347c:	c3                   	ret    
  10347d:	00 00                	add    %al,(%eax)
	...

00103480 <remove_from_list>:
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;
  103480:	55                   	push   %ebp
  103481:	89 e5                	mov    %esp,%ebp
  103483:	83 ec 10             	sub    $0x10,%esp

  103486:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
static char* video = (char*) 0xb8000;
  10348d:	8b 45 08             	mov    0x8(%ebp),%eax
  103490:	8b 00                	mov    (%eax),%eax
  103492:	89 45 fc             	mov    %eax,-0x4(%ebp)

static void kputc(char c) {
  103495:	eb 38                	jmp    1034cf <remove_from_list+0x4f>
    if(in_cod()) {
  103497:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10349a:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10349d:	75 21                	jne    1034c0 <remove_from_list+0x40>
        goto doKPutc;
  10349f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  1034a3:	75 0d                	jne    1034b2 <remove_from_list+0x32>
    }
  1034a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034a8:	8b 50 08             	mov    0x8(%eax),%edx
  1034ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1034ae:	89 10                	mov    %edx,(%eax)

  1034b0:	eb 23                	jmp    1034d5 <remove_from_list+0x55>
    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
  1034b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034b5:	8b 50 08             	mov    0x8(%eax),%edx
  1034b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1034bb:	89 50 08             	mov    %edx,0x8(%eax)
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1034be:	eb 15                	jmp    1034d5 <remove_from_list+0x55>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

  1034c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034c3:	89 45 f8             	mov    %eax,-0x8(%ebp)
            return;
  1034c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034c9:	8b 40 08             	mov    0x8(%eax),%eax
  1034cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1034cf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1034d3:	75 c2                	jne    103497 <remove_from_list+0x17>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
    }
  1034d5:	c9                   	leave  
  1034d6:	c3                   	ret    

001034d7 <append_to_list>:

    if(ramfs_vga_writers()) {
        return;
  1034d7:	55                   	push   %ebp
  1034d8:	89 e5                	mov    %esp,%ebp
    }
  1034da:	8b 45 08             	mov    0x8(%ebp),%eax
  1034dd:	8b 10                	mov    (%eax),%edx
  1034df:	8b 45 0c             	mov    0xc(%ebp),%eax
  1034e2:	89 50 08             	mov    %edx,0x8(%eax)

  1034e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1034e8:	8b 55 0c             	mov    0xc(%ebp),%edx
  1034eb:	89 10                	mov    %edx,(%eax)
    doKPutc:
  1034ed:	5d                   	pop    %ebp
  1034ee:	c3                   	ret    

001034ef <pop_from_list>:

    if ((c == '\n') || (x > 79)) {
  1034ef:	55                   	push   %ebp
  1034f0:	89 e5                	mov    %esp,%ebp
  1034f2:	83 ec 10             	sub    $0x10,%esp
        x = 0;
  1034f5:	8b 45 08             	mov    0x8(%ebp),%eax
  1034f8:	8b 00                	mov    (%eax),%eax
  1034fa:	85 c0                	test   %eax,%eax
  1034fc:	75 07                	jne    103505 <pop_from_list+0x16>
        y++;
  1034fe:	b8 00 00 00 00       	mov    $0x0,%eax
  103503:	eb 19                	jmp    10351e <pop_from_list+0x2f>
    }
  103505:	8b 45 08             	mov    0x8(%ebp),%eax
  103508:	8b 00                	mov    (%eax),%eax
  10350a:	89 45 fc             	mov    %eax,-0x4(%ebp)

  10350d:	ff 75 fc             	pushl  -0x4(%ebp)
  103510:	ff 75 08             	pushl  0x8(%ebp)
  103513:	e8 68 ff ff ff       	call   103480 <remove_from_list>
  103518:	83 c4 08             	add    $0x8,%esp
    if (c == '\n') {
  10351b:	8b 45 fc             	mov    -0x4(%ebp),%eax
        return;
  10351e:	c9                   	leave  
  10351f:	c3                   	ret    

00103520 <allocate_unused_nodes>:
    }

  103520:	55                   	push   %ebp
  103521:	89 e5                	mov    %esp,%ebp
  103523:	83 ec 18             	sub    $0x18,%esp
    if (y > 24) {
  103526:	83 ec 0c             	sub    $0xc,%esp
  103529:	6a 01                	push   $0x1
  10352b:	e8 5d 1c 00 00       	call   10518d <vmm_alloc_cont>
  103530:	83 c4 10             	add    $0x10,%esp
  103533:	89 45 f0             	mov    %eax,-0x10(%ebp)
        int i;
  103536:	83 ec 04             	sub    $0x4,%esp
  103539:	68 00 10 00 00       	push   $0x1000
  10353e:	6a 00                	push   $0x0
  103540:	ff 75 f0             	pushl  -0x10(%ebp)
  103543:	e8 c0 03 00 00       	call   103908 <memset>
  103548:	83 c4 10             	add    $0x10,%esp
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  10354b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  103552:	eb 23                	jmp    103577 <allocate_unused_nodes+0x57>
        }
  103554:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103557:	89 d0                	mov    %edx,%eax
  103559:	01 c0                	add    %eax,%eax
  10355b:	01 d0                	add    %edx,%eax
  10355d:	c1 e0 02             	shl    $0x2,%eax
  103560:	03 45 f0             	add    -0x10(%ebp),%eax
  103563:	83 ec 08             	sub    $0x8,%esp
  103566:	50                   	push   %eax
  103567:	68 34 85 12 00       	push   $0x128534
  10356c:	e8 66 ff ff ff       	call   1034d7 <append_to_list>
  103571:	83 c4 10             	add    $0x10,%esp
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  103574:	ff 45 f4             	incl   -0xc(%ebp)
  103577:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
  10357e:	76 d4                	jbe    103554 <allocate_unused_nodes+0x34>
        }

        for (; i < 2 * 25 * 80; i++) {
  103580:	c9                   	leave  
  103581:	c3                   	ret    

00103582 <pop_unused_node>:
            video[i] = 0;
        }
  103582:	55                   	push   %ebp
  103583:	89 e5                	mov    %esp,%ebp
  103585:	83 ec 18             	sub    $0x18,%esp
        y--;
  103588:	68 34 85 12 00       	push   $0x128534
  10358d:	e8 5d ff ff ff       	call   1034ef <pop_from_list>
  103592:	83 c4 04             	add    $0x4,%esp
  103595:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

  103598:	eb 18                	jmp    1035b2 <pop_unused_node+0x30>
    video[2 * (y * 80 + x)] = c;
  10359a:	e8 81 ff ff ff       	call   103520 <allocate_unused_nodes>
    video[2 * (y * 80 + x) + 1] = color;
  10359f:	83 ec 0c             	sub    $0xc,%esp
  1035a2:	68 34 85 12 00       	push   $0x128534
  1035a7:	e8 43 ff ff ff       	call   1034ef <pop_from_list>
  1035ac:	83 c4 10             	add    $0x10,%esp
  1035af:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
    }

  1035b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1035b6:	74 e2                	je     10359a <pop_unused_node+0x18>
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

    x++;
    kprintf_res++;
  1035b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1035bb:	c9                   	leave  
  1035bc:	c3                   	ret    

001035bd <merge_into_frees>:

static void kputs(const char* s) {
  1035bd:	55                   	push   %ebp
  1035be:	89 e5                	mov    %esp,%ebp
  1035c0:	83 ec 10             	sub    $0x10,%esp
    while (*s) {
  1035c3:	ff 75 08             	pushl  0x8(%ebp)
  1035c6:	68 38 85 12 00       	push   $0x128538
  1035cb:	e8 b0 fe ff ff       	call   103480 <remove_from_list>
  1035d0:	83 c4 08             	add    $0x8,%esp
        kputc(*s++);
    }
}

static void kputn(unsigned long x, int base) {
  1035d3:	a1 3c 85 12 00       	mov    0x12853c,%eax
  1035d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1035db:	eb 79                	jmp    103656 <merge_into_frees+0x99>
    char* p;
  1035dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035e0:	8b 50 04             	mov    0x4(%eax),%edx
  1035e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035e6:	8b 00                	mov    (%eax),%eax
  1035e8:	01 c2                	add    %eax,%edx
  1035ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1035ed:	8b 40 04             	mov    0x4(%eax),%eax
  1035f0:	39 c2                	cmp    %eax,%edx
  1035f2:	75 1e                	jne    103612 <merge_into_frees+0x55>

  1035f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035f7:	8b 50 04             	mov    0x4(%eax),%edx
  1035fa:	8b 45 08             	mov    0x8(%ebp),%eax
  1035fd:	89 50 04             	mov    %edx,0x4(%eax)
    if (base > 36) {
  103600:	ff 75 fc             	pushl  -0x4(%ebp)
  103603:	68 3c 85 12 00       	push   $0x12853c
  103608:	e8 73 fe ff ff       	call   103480 <remove_from_list>
  10360d:	83 c4 08             	add    $0x8,%esp
        return;
  103610:	eb c1                	jmp    1035d3 <merge_into_frees+0x16>
    }

    p = buf + 64;
  103612:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103615:	8b 50 04             	mov    0x4(%eax),%edx
  103618:	8b 45 08             	mov    0x8(%ebp),%eax
  10361b:	8b 48 04             	mov    0x4(%eax),%ecx
  10361e:	8b 45 08             	mov    0x8(%ebp),%eax
  103621:	8b 00                	mov    (%eax),%eax
  103623:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  103626:	39 c2                	cmp    %eax,%edx
  103628:	75 23                	jne    10364d <merge_into_frees+0x90>
    *p = '\0';
  10362a:	8b 45 08             	mov    0x8(%ebp),%eax
  10362d:	8b 10                	mov    (%eax),%edx
  10362f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103632:	8b 00                	mov    (%eax),%eax
  103634:	01 c2                	add    %eax,%edx
  103636:	8b 45 08             	mov    0x8(%ebp),%eax
  103639:	89 10                	mov    %edx,(%eax)
    do {
  10363b:	ff 75 fc             	pushl  -0x4(%ebp)
  10363e:	68 3c 85 12 00       	push   $0x12853c
  103643:	e8 38 fe ff ff       	call   103480 <remove_from_list>
  103648:	83 c4 08             	add    $0x8,%esp
        *--p = digits[x % base];
  10364b:	eb 86                	jmp    1035d3 <merge_into_frees+0x16>
        x /= base;
    } while (x);
    kputs(p);
  10364d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103650:	8b 40 08             	mov    0x8(%eax),%eax
  103653:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}

static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  103656:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10365a:	75 81                	jne    1035dd <merge_into_frees+0x20>
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  10365c:	ff 75 08             	pushl  0x8(%ebp)
  10365f:	68 3c 85 12 00       	push   $0x12853c
  103664:	e8 6e fe ff ff       	call   1034d7 <append_to_list>
  103669:	83 c4 08             	add    $0x8,%esp
    int i;
  10366c:	c9                   	leave  
  10366d:	c3                   	ret    

0010366e <malloc>:
    for (i = 0; i < 2 * 25 * 80; i++) {
        video[i] = 0;
    }

    color = 0x07;
  10366e:	55                   	push   %ebp
  10366f:	89 e5                	mov    %esp,%ebp
  103671:	83 ec 28             	sub    $0x28,%esp
  103674:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103678:	75 0a                	jne    103684 <malloc+0x16>
  10367a:	b8 00 00 00 00       	mov    $0x0,%eax
  10367f:	e9 5e 01 00 00       	jmp    1037e2 <malloc+0x174>

    x = y = 0;
  103684:	a1 40 85 12 00       	mov    0x128540,%eax
  103689:	03 45 08             	add    0x8(%ebp),%eax
  10368c:	a3 40 85 12 00       	mov    %eax,0x128540
}

  103691:	a1 3c 85 12 00       	mov    0x12853c,%eax
  103696:	89 45 dc             	mov    %eax,-0x24(%ebp)
void setclr(char clr) {
    color = clr;
  103699:	eb 13                	jmp    1036ae <malloc+0x40>
}
  10369b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10369e:	8b 00                	mov    (%eax),%eax
  1036a0:	3b 45 08             	cmp    0x8(%ebp),%eax
  1036a3:	73 11                	jae    1036b6 <malloc+0x48>

int kprintf(const char* fmt, ...) {
    va_list ap;
  1036a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1036a8:	8b 40 08             	mov    0x8(%eax),%eax
  1036ab:	89 45 dc             	mov    %eax,-0x24(%ebp)

    x = y = 0;
}

void setclr(char clr) {
    color = clr;
  1036ae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  1036b2:	75 e7                	jne    10369b <malloc+0x2d>
  1036b4:	eb 01                	jmp    1036b7 <malloc+0x49>
}

  1036b6:	90                   	nop    
int kprintf(const char* fmt, ...) {
    va_list ap;
    const char* s;
    unsigned long n;
    char c;
  1036b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  1036bb:	0f 85 a6 00 00 00    	jne    103767 <malloc+0xf9>

  1036c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1036c4:	c1 e8 0c             	shr    $0xc,%eax
  1036c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    va_start(ap, fmt);
    kprintf_res = 0;
  1036ca:	8b 45 08             	mov    0x8(%ebp),%eax
  1036cd:	25 ff 0f 00 00       	and    $0xfff,%eax
  1036d2:	85 c0                	test   %eax,%eax
  1036d4:	74 03                	je     1036d9 <malloc+0x6b>
    while (*fmt) {
  1036d6:	ff 45 e0             	incl   -0x20(%ebp)
        if (*fmt == '%') {
            fmt++;
  1036d9:	83 ec 0c             	sub    $0xc,%esp
  1036dc:	ff 75 e0             	pushl  -0x20(%ebp)
  1036df:	e8 a9 1a 00 00       	call   10518d <vmm_alloc_cont>
  1036e4:	83 c4 10             	add    $0x10,%esp
  1036e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            switch (*fmt) {
            case 's':
  1036ea:	e8 93 fe ff ff       	call   103582 <pop_unused_node>
  1036ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
                s = va_arg(ap, char*);
                kputs(s);
  1036f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1036f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1036f8:	89 50 04             	mov    %edx,0x4(%eax)
                break;
  1036fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1036fe:	8b 55 08             	mov    0x8(%ebp),%edx
  103701:	89 10                	mov    %edx,(%eax)
            case 'd':
            case 'u':
  103703:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103706:	c1 e0 0c             	shl    $0xc,%eax
  103709:	3b 45 08             	cmp    0x8(%ebp),%eax
  10370c:	76 3e                	jbe    10374c <malloc+0xde>
                n = va_arg(ap, unsigned long int);
  10370e:	e8 6f fe ff ff       	call   103582 <pop_unused_node>
  103713:	89 45 ec             	mov    %eax,-0x14(%ebp)
                kputn(n, 10);
                break;
  103716:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103719:	8b 50 04             	mov    0x4(%eax),%edx
  10371c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10371f:	8b 00                	mov    (%eax),%eax
  103721:	01 c2                	add    %eax,%edx
  103723:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103726:	89 50 04             	mov    %edx,0x4(%eax)
            case 'x':
  103729:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10372c:	c1 e0 0c             	shl    $0xc,%eax
  10372f:	89 c2                	mov    %eax,%edx
  103731:	2b 55 08             	sub    0x8(%ebp),%edx
  103734:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103737:	89 10                	mov    %edx,(%eax)
            case 'p':
                n = va_arg(ap, unsigned long int);
  103739:	83 ec 08             	sub    $0x8,%esp
  10373c:	ff 75 ec             	pushl  -0x14(%ebp)
  10373f:	68 3c 85 12 00       	push   $0x12853c
  103744:	e8 8e fd ff ff       	call   1034d7 <append_to_list>
  103749:	83 c4 10             	add    $0x10,%esp
                kputn(n, 16);
                break;
            case 'c':
  10374c:	83 ec 08             	sub    $0x8,%esp
  10374f:	ff 75 e8             	pushl  -0x18(%ebp)
  103752:	68 38 85 12 00       	push   $0x128538
  103757:	e8 7b fd ff ff       	call   1034d7 <append_to_list>
  10375c:	83 c4 10             	add    $0x10,%esp
                c = va_arg(ap, int);
                kputc(c);
  10375f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103762:	8b 40 04             	mov    0x4(%eax),%eax
  103765:	eb 7b                	jmp    1037e2 <malloc+0x174>
                break;
            case '%':
  103767:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10376a:	8b 00                	mov    (%eax),%eax
  10376c:	2b 45 08             	sub    0x8(%ebp),%eax
  10376f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                kputc('%');
                break;
  103772:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103775:	8b 55 08             	mov    0x8(%ebp),%edx
  103778:	89 10                	mov    %edx,(%eax)
            case '\0':
                goto out;
  10377a:	83 ec 08             	sub    $0x8,%esp
  10377d:	ff 75 dc             	pushl  -0x24(%ebp)
  103780:	68 3c 85 12 00       	push   $0x12853c
  103785:	e8 f6 fc ff ff       	call   103480 <remove_from_list>
  10378a:	83 c4 10             	add    $0x10,%esp
            default:
  10378d:	83 ec 08             	sub    $0x8,%esp
  103790:	ff 75 dc             	pushl  -0x24(%ebp)
  103793:	68 38 85 12 00       	push   $0x128538
  103798:	e8 3a fd ff ff       	call   1034d7 <append_to_list>
  10379d:	83 c4 10             	add    $0x10,%esp
                kputc('%');
                kputc(*fmt);
  1037a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1037a4:	74 36                	je     1037dc <malloc+0x16e>
                break;
  1037a6:	e8 d7 fd ff ff       	call   103582 <pop_unused_node>
  1037ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
            }
        } else {
  1037ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037b1:	8b 50 04             	mov    0x4(%eax),%edx
  1037b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037b7:	8b 00                	mov    (%eax),%eax
  1037b9:	01 c2                	add    %eax,%edx
  1037bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037be:	89 50 04             	mov    %edx,0x4(%eax)
            kputc(*fmt);
  1037c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1037c7:	89 10                	mov    %edx,(%eax)
        }

  1037c9:	83 ec 08             	sub    $0x8,%esp
  1037cc:	ff 75 f4             	pushl  -0xc(%ebp)
  1037cf:	68 3c 85 12 00       	push   $0x12853c
  1037d4:	e8 fe fc ff ff       	call   1034d7 <append_to_list>
  1037d9:	83 c4 10             	add    $0x10,%esp
        fmt++;
    }

  1037dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037df:	8b 40 04             	mov    0x4(%eax),%eax
    out:
    va_end(ap);
  1037e2:	c9                   	leave  
  1037e3:	c3                   	ret    

001037e4 <calloc>:

    return kprintf_res;
}
  1037e4:	55                   	push   %ebp
  1037e5:	89 e5                	mov    %esp,%ebp
  1037e7:	83 ec 18             	sub    $0x18,%esp
  1037ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1037ed:	0f af 45 0c          	imul   0xc(%ebp),%eax
  1037f1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  1037f4:	83 ec 0c             	sub    $0xc,%esp
  1037f7:	ff 75 f0             	pushl  -0x10(%ebp)
  1037fa:	e8 6f fe ff ff       	call   10366e <malloc>
  1037ff:	83 c4 10             	add    $0x10,%esp
  103802:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103805:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103809:	74 13                	je     10381e <calloc+0x3a>
  10380b:	83 ec 04             	sub    $0x4,%esp
  10380e:	ff 75 f0             	pushl  -0x10(%ebp)
  103811:	6a 00                	push   $0x0
  103813:	ff 75 f4             	pushl  -0xc(%ebp)
  103816:	e8 ed 00 00 00       	call   103908 <memset>
  10381b:	83 c4 10             	add    $0x10,%esp
  10381e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103821:	c9                   	leave  
  103822:	c3                   	ret    

00103823 <realloc>:
  103823:	55                   	push   %ebp
  103824:	89 e5                	mov    %esp,%ebp
  103826:	83 ec 18             	sub    $0x18,%esp
  103829:	a1 38 85 12 00       	mov    0x128538,%eax
  10382e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103831:	eb 74                	jmp    1038a7 <realloc+0x84>
  103833:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103836:	8b 50 04             	mov    0x4(%eax),%edx
  103839:	8b 45 08             	mov    0x8(%ebp),%eax
  10383c:	39 c2                	cmp    %eax,%edx
  10383e:	75 5e                	jne    10389e <realloc+0x7b>
  103840:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103844:	75 15                	jne    10385b <realloc+0x38>
  103846:	83 ec 0c             	sub    $0xc,%esp
  103849:	ff 75 08             	pushl  0x8(%ebp)
  10384c:	e8 63 00 00 00       	call   1038b4 <free>
  103851:	83 c4 10             	add    $0x10,%esp
  103854:	b8 00 00 00 00       	mov    $0x0,%eax
  103859:	eb 57                	jmp    1038b2 <realloc+0x8f>
  10385b:	83 ec 0c             	sub    $0xc,%esp
  10385e:	ff 75 0c             	pushl  0xc(%ebp)
  103861:	e8 08 fe ff ff       	call   10366e <malloc>
  103866:	83 c4 10             	add    $0x10,%esp
  103869:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10386c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10386f:	8b 10                	mov    (%eax),%edx
  103871:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103874:	8b 40 04             	mov    0x4(%eax),%eax
  103877:	83 ec 04             	sub    $0x4,%esp
  10387a:	52                   	push   %edx
  10387b:	50                   	push   %eax
  10387c:	ff 75 f4             	pushl  -0xc(%ebp)
  10387f:	e8 b2 00 00 00       	call   103936 <memcpy>
  103884:	83 c4 10             	add    $0x10,%esp
  103887:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10388a:	8b 40 04             	mov    0x4(%eax),%eax
  10388d:	83 ec 0c             	sub    $0xc,%esp
  103890:	50                   	push   %eax
  103891:	e8 1e 00 00 00       	call   1038b4 <free>
  103896:	83 c4 10             	add    $0x10,%esp
  103899:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10389c:	eb 14                	jmp    1038b2 <realloc+0x8f>
  10389e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038a1:	8b 40 08             	mov    0x8(%eax),%eax
  1038a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1038a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1038ab:	75 86                	jne    103833 <realloc+0x10>
  1038ad:	b8 00 00 00 00       	mov    $0x0,%eax
  1038b2:	c9                   	leave  
  1038b3:	c3                   	ret    

001038b4 <free>:
  1038b4:	55                   	push   %ebp
  1038b5:	89 e5                	mov    %esp,%ebp
  1038b7:	83 ec 10             	sub    $0x10,%esp
  1038ba:	a1 38 85 12 00       	mov    0x128538,%eax
  1038bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1038c2:	eb 39                	jmp    1038fd <free+0x49>
  1038c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038c7:	8b 50 04             	mov    0x4(%eax),%edx
  1038ca:	8b 45 08             	mov    0x8(%ebp),%eax
  1038cd:	39 c2                	cmp    %eax,%edx
  1038cf:	75 23                	jne    1038f4 <free+0x40>
  1038d1:	8b 15 40 85 12 00    	mov    0x128540,%edx
  1038d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038da:	8b 00                	mov    (%eax),%eax
  1038dc:	89 d1                	mov    %edx,%ecx
  1038de:	29 c1                	sub    %eax,%ecx
  1038e0:	89 c8                	mov    %ecx,%eax
  1038e2:	a3 40 85 12 00       	mov    %eax,0x128540
  1038e7:	ff 75 fc             	pushl  -0x4(%ebp)
  1038ea:	e8 ce fc ff ff       	call   1035bd <merge_into_frees>
  1038ef:	83 c4 04             	add    $0x4,%esp
  1038f2:	eb 0f                	jmp    103903 <free+0x4f>
  1038f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038f7:	8b 40 08             	mov    0x8(%eax),%eax
  1038fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1038fd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  103901:	75 c1                	jne    1038c4 <free+0x10>
  103903:	c9                   	leave  
  103904:	c3                   	ret    
  103905:	00 00                	add    %al,(%eax)
	...

00103908 <memset>:
#include "console.h"
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

static int x = 0;
  103908:	55                   	push   %ebp
  103909:	89 e5                	mov    %esp,%ebp
  10390b:	83 ec 10             	sub    $0x10,%esp
  10390e:	8b 45 08             	mov    0x8(%ebp),%eax
  103911:	89 45 fc             	mov    %eax,-0x4(%ebp)
static int y = 0;
static int kprintf_res = 0;
  103914:	eb 0d                	jmp    103923 <memset+0x1b>
static char color = 0x07;
  103916:	8b 45 0c             	mov    0xc(%ebp),%eax
  103919:	88 c2                	mov    %al,%dl
  10391b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10391e:	88 10                	mov    %dl,(%eax)
  103920:	ff 45 fc             	incl   -0x4(%ebp)
#include "ramfs/vgacntrl.h"
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
  103923:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  103927:	0f 95 c0             	setne  %al
  10392a:	ff 4d 10             	decl   0x10(%ebp)
  10392d:	84 c0                	test   %al,%al
  10392f:	75 e5                	jne    103916 <memset+0xe>
static char color = 0x07;

static char* video = (char*) 0xb8000;

  103931:	8b 45 08             	mov    0x8(%ebp),%eax
static void kputc(char c) {
  103934:	c9                   	leave  
  103935:	c3                   	ret    

00103936 <memcpy>:
    if(in_cod()) {
        goto doKPutc;
    }
  103936:	55                   	push   %ebp
  103937:	89 e5                	mov    %esp,%ebp
  103939:	83 ec 10             	sub    $0x10,%esp
  10393c:	8b 45 08             	mov    0x8(%ebp),%eax
  10393f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  103942:	8b 45 0c             	mov    0xc(%ebp),%eax
  103945:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
  103948:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10394c:	75 19                	jne    103967 <memcpy+0x31>
  10394e:	b8 00 00 00 00       	mov    $0x0,%eax
  103953:	eb 24                	jmp    103979 <memcpy+0x43>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  103955:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103958:	8a 10                	mov    (%eax),%dl
  10395a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10395d:	88 10                	mov    %dl,(%eax)
  10395f:	ff 45 f8             	incl   -0x8(%ebp)
  103962:	ff 45 fc             	incl   -0x4(%ebp)
  103965:	eb 01                	jmp    103968 <memcpy+0x32>
    }

    if(get_current_task() != 0) {
        if(get_current_task()->stdout != 0) {
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  103967:	90                   	nop    
  103968:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10396c:	0f 95 c0             	setne  %al
  10396f:	ff 4d 10             	decl   0x10(%ebp)
  103972:	84 c0                	test   %al,%al
  103974:	75 df                	jne    103955 <memcpy+0x1f>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
  103976:	8b 45 08             	mov    0x8(%ebp),%eax
    }
  103979:	c9                   	leave  
  10397a:	c3                   	ret    

0010397b <memcmp>:

    if(ramfs_vga_writers()) {
        return;
  10397b:	55                   	push   %ebp
  10397c:	89 e5                	mov    %esp,%ebp
  10397e:	83 ec 10             	sub    $0x10,%esp
  103981:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103985:	75 0a                	jne    103991 <memcmp+0x16>
    }
  103987:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10398c:	e9 83 00 00 00       	jmp    103a14 <memcmp+0x99>

  103991:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103995:	75 07                	jne    10399e <memcmp+0x23>
    doKPutc:
  103997:	b8 01 00 00 00       	mov    $0x1,%eax
  10399c:	eb 76                	jmp    103a14 <memcmp+0x99>

  10399e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1039a2:	75 07                	jne    1039ab <memcmp+0x30>
    if ((c == '\n') || (x > 79)) {
  1039a4:	b8 00 00 00 00       	mov    $0x0,%eax
  1039a9:	eb 69                	jmp    103a14 <memcmp+0x99>
        x = 0;
        y++;
  1039ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1039ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  1039b1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1039b4:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if (c == '\n') {
  1039b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1039be:	eb 47                	jmp    103a07 <memcmp+0x8c>
        return;
  1039c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1039c6:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1039c9:	8a 10                	mov    (%eax),%dl
  1039cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039ce:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1039d1:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  1039d4:	8a 00                	mov    (%eax),%al
  1039d6:	38 c2                	cmp    %al,%dl
  1039d8:	74 2a                	je     103a04 <memcmp+0x89>
    }
  1039da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1039e0:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1039e3:	8a 00                	mov    (%eax),%al
  1039e5:	ba 00 00 00 00       	mov    $0x0,%edx
  1039ea:	88 c2                	mov    %al,%dl
  1039ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039ef:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1039f2:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  1039f5:	8a 00                	mov    (%eax),%al
  1039f7:	25 ff 00 00 00       	and    $0xff,%eax
  1039fc:	89 d1                	mov    %edx,%ecx
  1039fe:	29 c1                	sub    %eax,%ecx
  103a00:	89 c8                	mov    %ecx,%eax
  103a02:	eb 10                	jmp    103a14 <memcmp+0x99>
    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
    }

    if (c == '\n') {
  103a04:	ff 45 fc             	incl   -0x4(%ebp)
  103a07:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a0a:	3b 45 10             	cmp    0x10(%ebp),%eax
  103a0d:	72 b1                	jb     1039c0 <memcmp+0x45>
        return;
    }

    if (y > 24) {
        int i;
  103a0f:	b8 00 00 00 00       	mov    $0x0,%eax
        for (i = 0; i < 2 * 24 * 80; i++) {
  103a14:	c9                   	leave  
  103a15:	c3                   	ret    

00103a16 <strcmp>:
            video[i] = video[i + 160];
        }

  103a16:	55                   	push   %ebp
  103a17:	89 e5                	mov    %esp,%ebp
  103a19:	83 ec 18             	sub    $0x18,%esp
  103a1c:	83 ec 0c             	sub    $0xc,%esp
  103a1f:	ff 75 08             	pushl  0x8(%ebp)
  103a22:	e8 3e 00 00 00       	call   103a65 <strlen>
  103a27:	83 c4 10             	add    $0x10,%esp
  103a2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        for (; i < 2 * 25 * 80; i++) {
  103a2d:	83 ec 0c             	sub    $0xc,%esp
  103a30:	ff 75 0c             	pushl  0xc(%ebp)
  103a33:	e8 2d 00 00 00       	call   103a65 <strlen>
  103a38:	83 c4 10             	add    $0x10,%esp
  103a3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
            video[i] = 0;
  103a3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a44:	39 d0                	cmp    %edx,%eax
  103a46:	7e 02                	jle    103a4a <strcmp+0x34>
  103a48:	89 d0                	mov    %edx,%eax
  103a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        y--;
  103a4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a50:	40                   	inc    %eax
  103a51:	83 ec 04             	sub    $0x4,%esp
  103a54:	50                   	push   %eax
  103a55:	ff 75 0c             	pushl  0xc(%ebp)
  103a58:	ff 75 08             	pushl  0x8(%ebp)
  103a5b:	e8 1b ff ff ff       	call   10397b <memcmp>
  103a60:	83 c4 10             	add    $0x10,%esp
    }
  103a63:	c9                   	leave  
  103a64:	c3                   	ret    

00103a65 <strlen>:

    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;
  103a65:	55                   	push   %ebp
  103a66:	89 e5                	mov    %esp,%ebp
  103a68:	83 ec 10             	sub    $0x10,%esp
  103a6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103a6f:	75 07                	jne    103a78 <strlen+0x13>

  103a71:	b8 00 00 00 00       	mov    $0x0,%eax
  103a76:	eb 1b                	jmp    103a93 <strlen+0x2e>
    x++;
    kprintf_res++;
  103a78:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103a7f:	eb 03                	jmp    103a84 <strlen+0x1f>
  103a81:	ff 45 fc             	incl   -0x4(%ebp)
  103a84:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a87:	03 45 08             	add    0x8(%ebp),%eax
  103a8a:	8a 00                	mov    (%eax),%al
  103a8c:	84 c0                	test   %al,%al
  103a8e:	75 f1                	jne    103a81 <strlen+0x1c>
}

  103a90:	8b 45 fc             	mov    -0x4(%ebp),%eax
static void kputs(const char* s) {
  103a93:	c9                   	leave  
  103a94:	c3                   	ret    

00103a95 <strcpy>:
    while (*s) {
        kputc(*s++);
    }
  103a95:	55                   	push   %ebp
  103a96:	89 e5                	mov    %esp,%ebp
  103a98:	ff 75 0c             	pushl  0xc(%ebp)
  103a9b:	e8 c5 ff ff ff       	call   103a65 <strlen>
  103aa0:	83 c4 04             	add    $0x4,%esp
  103aa3:	40                   	inc    %eax
  103aa4:	50                   	push   %eax
  103aa5:	ff 75 0c             	pushl  0xc(%ebp)
  103aa8:	ff 75 08             	pushl  0x8(%ebp)
  103aab:	e8 86 fe ff ff       	call   103936 <memcpy>
  103ab0:	83 c4 0c             	add    $0xc,%esp
}
  103ab3:	8b 45 08             	mov    0x8(%ebp),%eax

  103ab6:	c9                   	leave  
  103ab7:	c3                   	ret    

00103ab8 <strclone>:
static void kputn(unsigned long x, int base) {
    char buf[65];
  103ab8:	55                   	push   %ebp
  103ab9:	89 e5                	mov    %esp,%ebp
  103abb:	83 ec 18             	sub    $0x18,%esp
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  103abe:	ff 75 08             	pushl  0x8(%ebp)
  103ac1:	e8 9f ff ff ff       	call   103a65 <strlen>
  103ac6:	83 c4 04             	add    $0x4,%esp
  103ac9:	40                   	inc    %eax
  103aca:	83 ec 0c             	sub    $0xc,%esp
  103acd:	50                   	push   %eax
  103ace:	e8 9b fb ff ff       	call   10366e <malloc>
  103ad3:	83 c4 10             	add    $0x10,%esp
  103ad6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* p;
  103ad9:	83 ec 08             	sub    $0x8,%esp
  103adc:	ff 75 08             	pushl  0x8(%ebp)
  103adf:	ff 75 f4             	pushl  -0xc(%ebp)
  103ae2:	e8 ae ff ff ff       	call   103a95 <strcpy>
  103ae7:	83 c4 10             	add    $0x10,%esp

    if (base > 36) {
  103aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return;
  103aed:	c9                   	leave  
  103aee:	c3                   	ret    

00103aef <strtok>:
    }

    p = buf + 64;
    *p = '\0';
    do {
  103aef:	55                   	push   %ebp
  103af0:	89 e5                	mov    %esp,%ebp
  103af2:	83 ec 08             	sub    $0x8,%esp
        *--p = digits[x % base];
  103af5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103af9:	74 43                	je     103b3e <strtok+0x4f>
        x /= base;
  103afb:	a1 48 85 12 00       	mov    0x128548,%eax
  103b00:	85 c0                	test   %eax,%eax
  103b02:	74 11                	je     103b15 <strtok+0x26>
    } while (x);
  103b04:	a1 48 85 12 00       	mov    0x128548,%eax
  103b09:	83 ec 0c             	sub    $0xc,%esp
  103b0c:	50                   	push   %eax
  103b0d:	e8 a2 fd ff ff       	call   1038b4 <free>
  103b12:	83 c4 10             	add    $0x10,%esp
    kputs(p);
}
  103b15:	83 ec 0c             	sub    $0xc,%esp
  103b18:	ff 75 08             	pushl  0x8(%ebp)
  103b1b:	e8 98 ff ff ff       	call   103ab8 <strclone>
  103b20:	83 c4 10             	add    $0x10,%esp
  103b23:	a3 48 85 12 00       	mov    %eax,0x128548

  103b28:	a1 48 85 12 00       	mov    0x128548,%eax
  103b2d:	83 ec 08             	sub    $0x8,%esp
  103b30:	ff 75 0c             	pushl  0xc(%ebp)
  103b33:	50                   	push   %eax
  103b34:	e8 17 00 00 00       	call   103b50 <strtoknc>
  103b39:	83 c4 10             	add    $0x10,%esp
  103b3c:	eb 10                	jmp    103b4e <strtok+0x5f>
void clrscr(void) {
    int i;
  103b3e:	83 ec 08             	sub    $0x8,%esp
  103b41:	ff 75 0c             	pushl  0xc(%ebp)
  103b44:	6a 00                	push   $0x0
  103b46:	e8 05 00 00 00       	call   103b50 <strtoknc>
  103b4b:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 2 * 25 * 80; i++) {
  103b4e:	c9                   	leave  
  103b4f:	c3                   	ret    

00103b50 <strtoknc>:
        video[i] = 0;
    }
  103b50:	55                   	push   %ebp
  103b51:	89 e5                	mov    %esp,%ebp
  103b53:	83 ec 10             	sub    $0x10,%esp

  103b56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    color = 0x07;
  103b5d:	ff 75 0c             	pushl  0xc(%ebp)
  103b60:	e8 00 ff ff ff       	call   103a65 <strlen>
  103b65:	83 c4 04             	add    $0x4,%esp
  103b68:	89 45 f8             	mov    %eax,-0x8(%ebp)

    x = y = 0;
}
  103b6b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  103b6f:	75 0a                	jne    103b7b <strtoknc+0x2b>

  103b71:	b8 00 00 00 00       	mov    $0x0,%eax
  103b76:	e9 e0 00 00 00       	jmp    103c5b <strtoknc+0x10b>
void setclr(char clr) {
    color = clr;
}
  103b7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103b7f:	75 13                	jne    103b94 <strtoknc+0x44>
  103b81:	a1 44 85 12 00       	mov    0x128544,%eax
  103b86:	85 c0                	test   %eax,%eax
  103b88:	75 0a                	jne    103b94 <strtoknc+0x44>

  103b8a:	b8 00 00 00 00       	mov    $0x0,%eax
  103b8f:	e9 c7 00 00 00       	jmp    103c5b <strtoknc+0x10b>
int kprintf(const char* fmt, ...) {
    va_list ap;
    const char* s;
  103b94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103b98:	74 08                	je     103ba2 <strtoknc+0x52>
    unsigned long n;
  103b9a:	8b 45 08             	mov    0x8(%ebp),%eax
  103b9d:	a3 44 85 12 00       	mov    %eax,0x128544
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
  103ba2:	a1 44 85 12 00       	mov    0x128544,%eax
  103ba7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103baa:	eb 01                	jmp    103bad <strtoknc+0x5d>
                break;
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
                break;
  103bac:	90                   	nop    
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
  103bad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  103bb4:	eb 19                	jmp    103bcf <strtoknc+0x7f>
            fmt++;
  103bb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103bb9:	8a 10                	mov    (%eax),%dl
  103bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103bbe:	03 45 0c             	add    0xc(%ebp),%eax
  103bc1:	8a 00                	mov    (%eax),%al
  103bc3:	38 c2                	cmp    %al,%dl
  103bc5:	75 05                	jne    103bcc <strtoknc+0x7c>
            switch (*fmt) {
  103bc7:	ff 45 fc             	incl   -0x4(%ebp)
            case 's':
  103bca:	eb 0b                	jmp    103bd7 <strtoknc+0x87>
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
  103bcc:	ff 45 f4             	incl   -0xc(%ebp)
  103bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103bd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103bd5:	7c df                	jl     103bb6 <strtoknc+0x66>
            switch (*fmt) {
            case 's':
                s = va_arg(ap, char*);
                kputs(s);
                break;
            case 'd':
  103bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103bda:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103bdd:	75 cd                	jne    103bac <strtoknc+0x5c>
            case 'u':
  103bdf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103be2:	a3 44 85 12 00       	mov    %eax,0x128544
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
                break;
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  103be7:	a1 44 85 12 00       	mov    0x128544,%eax
  103bec:	8a 00                	mov    (%eax),%al
  103bee:	84 c0                	test   %al,%al
  103bf0:	75 57                	jne    103c49 <strtoknc+0xf9>
                kputn(n, 16);
  103bf2:	c7 05 44 85 12 00 00 	movl   $0x0,0x128544
  103bf9:	00 00 00 
                break;
  103bfc:	a1 44 85 12 00       	mov    0x128544,%eax
  103c01:	eb 58                	jmp    103c5b <strtoknc+0x10b>
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
                break;
            case '%':
  103c03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  103c0a:	eb 20                	jmp    103c2c <strtoknc+0xdc>
                kputc('%');
  103c0c:	a1 44 85 12 00       	mov    0x128544,%eax
  103c11:	8a 10                	mov    (%eax),%dl
  103c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c16:	03 45 0c             	add    0xc(%ebp),%eax
  103c19:	8a 00                	mov    (%eax),%al
  103c1b:	38 c2                	cmp    %al,%dl
  103c1d:	75 0a                	jne    103c29 <strtoknc+0xd9>
                break;
  103c1f:	a1 44 85 12 00       	mov    0x128544,%eax
  103c24:	c6 00 00             	movb   $0x0,(%eax)
            case '\0':
  103c27:	eb 0b                	jmp    103c34 <strtoknc+0xe4>
                break;
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
                break;
            case '%':
  103c29:	ff 45 f4             	incl   -0xc(%ebp)
  103c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c2f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103c32:	7c d8                	jl     103c0c <strtoknc+0xbc>
                break;
            case '\0':
                goto out;
            default:
                kputc('%');
                kputc(*fmt);
  103c34:	a1 44 85 12 00       	mov    0x128544,%eax
  103c39:	40                   	inc    %eax
  103c3a:	a3 44 85 12 00       	mov    %eax,0x128544
                break;
  103c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c42:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103c45:	7c 10                	jl     103c57 <strtoknc+0x107>
  103c47:	eb 01                	jmp    103c4a <strtoknc+0xfa>
                kputn(n, 16);
                break;
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
                break;
  103c49:	90                   	nop    
  103c4a:	a1 44 85 12 00       	mov    0x128544,%eax
  103c4f:	8a 00                	mov    (%eax),%al
  103c51:	84 c0                	test   %al,%al
  103c53:	75 ae                	jne    103c03 <strtoknc+0xb3>
  103c55:	eb 01                	jmp    103c58 <strtoknc+0x108>
                goto out;
            default:
                kputc('%');
                kputc(*fmt);
                break;
            }
  103c57:	90                   	nop    
        } else {
            kputc(*fmt);
        }
  103c58:	8b 45 fc             	mov    -0x4(%ebp),%eax

  103c5b:	c9                   	leave  
  103c5c:	c3                   	ret    
  103c5d:	00 00                	add    %al,(%eax)
	...

00103c60 <vfs_set_error>:
#include "catofdeath.h"

static int x = 0;
static int y = 0;
static int kprintf_res = 0;
static char color = 0x07;
  103c60:	55                   	push   %ebp
  103c61:	89 e5                	mov    %esp,%ebp
  103c63:	83 ec 08             	sub    $0x8,%esp

  103c66:	e8 fe ee ff ff       	call   102b69 <get_current_task>
  103c6b:	85 c0                	test   %eax,%eax
  103c6d:	74 17                	je     103c86 <vfs_set_error+0x26>
static char* video = (char*) 0xb8000;
  103c6f:	e8 f5 ee ff ff       	call   102b69 <get_current_task>
  103c74:	8b 40 2c             	mov    0x2c(%eax),%eax
  103c77:	85 c0                	test   %eax,%eax
  103c79:	75 0b                	jne    103c86 <vfs_set_error+0x26>

  103c7b:	e8 e9 ee ff ff       	call   102b69 <get_current_task>
  103c80:	8b 55 08             	mov    0x8(%ebp),%edx
  103c83:	89 50 2c             	mov    %edx,0x2c(%eax)
static void kputc(char c) {
    if(in_cod()) {
        goto doKPutc;
  103c86:	c9                   	leave  
  103c87:	c3                   	ret    

00103c88 <vfs_reset_error>:
    }

  103c88:	55                   	push   %ebp
  103c89:	89 e5                	mov    %esp,%ebp
  103c8b:	83 ec 08             	sub    $0x8,%esp
    if(get_current_task() != 0) {
  103c8e:	e8 d6 ee ff ff       	call   102b69 <get_current_task>
  103c93:	85 c0                	test   %eax,%eax
  103c95:	74 0c                	je     103ca3 <vfs_reset_error+0x1b>
        if(get_current_task()->stdout != 0) {
  103c97:	e8 cd ee ff ff       	call   102b69 <get_current_task>
  103c9c:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  103ca3:	c9                   	leave  
  103ca4:	c3                   	ret    

00103ca5 <vfs_construct_absolute_path_for_node>:
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
  103ca5:	55                   	push   %ebp
  103ca6:	89 e5                	mov    %esp,%ebp
  103ca8:	83 ec 18             	sub    $0x18,%esp
    }
  103cab:	c6 05 c0 87 1c 00 00 	movb   $0x0,0x1c87c0

  103cb2:	c7 45 f4 bf 87 1c 00 	movl   $0x1c87bf,-0xc(%ebp)
    if(ramfs_vga_writers()) {
        return;
  103cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cbc:	c6 00 2f             	movb   $0x2f,(%eax)
    }

  103cbf:	eb 3b                	jmp    103cfc <vfs_construct_absolute_path_for_node+0x57>
    doKPutc:
  103cc1:	8b 45 08             	mov    0x8(%ebp),%eax
  103cc4:	83 ec 0c             	sub    $0xc,%esp
  103cc7:	50                   	push   %eax
  103cc8:	e8 98 fd ff ff       	call   103a65 <strlen>
  103ccd:	83 c4 10             	add    $0x10,%esp
  103cd0:	f7 d8                	neg    %eax
  103cd2:	01 45 f4             	add    %eax,-0xc(%ebp)

  103cd5:	8b 45 08             	mov    0x8(%ebp),%eax
  103cd8:	83 ec 08             	sub    $0x8,%esp
  103cdb:	50                   	push   %eax
  103cdc:	ff 75 f4             	pushl  -0xc(%ebp)
  103cdf:	e8 b1 fd ff ff       	call   103a95 <strcpy>
  103ce4:	83 c4 10             	add    $0x10,%esp
    if ((c == '\n') || (x > 79)) {
  103ce7:	ff 4d f4             	decl   -0xc(%ebp)
  103cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ced:	c6 00 2f             	movb   $0x2f,(%eax)
        x = 0;
        y++;
  103cf0:	8b 45 08             	mov    0x8(%ebp),%eax
  103cf3:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  103cf9:	89 45 08             	mov    %eax,0x8(%ebp)
    }

    if(ramfs_vga_writers()) {
        return;
    }

  103cfc:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103d01:	39 45 08             	cmp    %eax,0x8(%ebp)
  103d04:	75 bb                	jne    103cc1 <vfs_construct_absolute_path_for_node+0x1c>
    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
    }

    if (c == '\n') {
  103d06:	83 ec 0c             	sub    $0xc,%esp
  103d09:	ff 75 f4             	pushl  -0xc(%ebp)
  103d0c:	e8 a7 fd ff ff       	call   103ab8 <strclone>
  103d11:	83 c4 10             	add    $0x10,%esp
        return;
  103d14:	c9                   	leave  
  103d15:	c3                   	ret    

00103d16 <vfs_find_node>:
    }

  103d16:	55                   	push   %ebp
  103d17:	89 e5                	mov    %esp,%ebp
  103d19:	83 ec 18             	sub    $0x18,%esp
    if (y > 24) {
  103d1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103d20:	75 08                	jne    103d2a <vfs_find_node+0x14>
  103d22:	8b 45 08             	mov    0x8(%ebp),%eax
  103d25:	e9 ab 00 00 00       	jmp    103dd5 <vfs_find_node+0xbf>
        int i;
  103d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
  103d2d:	8a 00                	mov    (%eax),%al
  103d2f:	84 c0                	test   %al,%al
  103d31:	75 08                	jne    103d3b <vfs_find_node+0x25>
  103d33:	8b 45 08             	mov    0x8(%ebp),%eax
  103d36:	e9 9a 00 00 00       	jmp    103dd5 <vfs_find_node+0xbf>
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
  103d3b:	83 ec 08             	sub    $0x8,%esp
  103d3e:	68 90 78 10 00       	push   $0x107890
  103d43:	ff 75 0c             	pushl  0xc(%ebp)
  103d46:	e8 cb fc ff ff       	call   103a16 <strcmp>
  103d4b:	83 c4 10             	add    $0x10,%esp
  103d4e:	85 c0                	test   %eax,%eax
  103d50:	75 05                	jne    103d57 <vfs_find_node+0x41>
  103d52:	8b 45 08             	mov    0x8(%ebp),%eax
  103d55:	eb 7e                	jmp    103dd5 <vfs_find_node+0xbf>
        }
  103d57:	83 ec 08             	sub    $0x8,%esp
  103d5a:	68 92 78 10 00       	push   $0x107892
  103d5f:	ff 75 0c             	pushl  0xc(%ebp)
  103d62:	e8 af fc ff ff       	call   103a16 <strcmp>
  103d67:	83 c4 10             	add    $0x10,%esp
  103d6a:	85 c0                	test   %eax,%eax
  103d6c:	75 1a                	jne    103d88 <vfs_find_node+0x72>

  103d6e:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103d73:	39 45 08             	cmp    %eax,0x8(%ebp)
  103d76:	75 05                	jne    103d7d <vfs_find_node+0x67>
  103d78:	8b 45 08             	mov    0x8(%ebp),%eax
  103d7b:	eb 58                	jmp    103dd5 <vfs_find_node+0xbf>
        for (; i < 2 * 25 * 80; i++) {
  103d7d:	8b 45 08             	mov    0x8(%ebp),%eax
  103d80:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  103d86:	eb 4d                	jmp    103dd5 <vfs_find_node+0xbf>
            video[i] = 0;
        }
        y--;
  103d88:	8b 45 08             	mov    0x8(%ebp),%eax
  103d8b:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  103d91:	85 c0                	test   %eax,%eax
  103d93:	75 3b                	jne    103dd0 <vfs_find_node+0xba>
    }
  103d95:	8b 45 08             	mov    0x8(%ebp),%eax
  103d98:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103d9e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    video[2 * (y * 80 + x)] = c;
  103da1:	eb 27                	jmp    103dca <vfs_find_node+0xb4>
    video[2 * (y * 80 + x) + 1] = color;
  103da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103da6:	83 ec 08             	sub    $0x8,%esp
  103da9:	50                   	push   %eax
  103daa:	ff 75 0c             	pushl  0xc(%ebp)
  103dad:	e8 64 fc ff ff       	call   103a16 <strcmp>
  103db2:	83 c4 10             	add    $0x10,%esp
  103db5:	85 c0                	test   %eax,%eax
  103db7:	75 05                	jne    103dbe <vfs_find_node+0xa8>

  103db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103dbc:	eb 17                	jmp    103dd5 <vfs_find_node+0xbf>
    x++;
    kprintf_res++;
}
  103dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103dc1:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  103dc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
            video[i] = 0;
        }
        y--;
    }

    video[2 * (y * 80 + x)] = c;
  103dca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103dce:	75 d3                	jne    103da3 <vfs_find_node+0x8d>
    kprintf_res++;
}

static void kputs(const char* s) {
    while (*s) {
        kputc(*s++);
  103dd0:	b8 00 00 00 00       	mov    $0x0,%eax
    }
  103dd5:	c9                   	leave  
  103dd6:	c3                   	ret    

00103dd7 <vfs_insert_node>:
}

  103dd7:	55                   	push   %ebp
  103dd8:	89 e5                	mov    %esp,%ebp
static void kputn(unsigned long x, int base) {
  103dda:	8b 45 08             	mov    0x8(%ebp),%eax
  103ddd:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103de3:	85 c0                	test   %eax,%eax
  103de5:	75 0d                	jne    103df4 <vfs_insert_node+0x1d>
    char buf[65];
  103de7:	8b 45 08             	mov    0x8(%ebp),%eax
  103dea:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  103df1:	00 00 00 
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

  103df4:	8b 45 08             	mov    0x8(%ebp),%eax
  103df7:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  103dfd:	85 c0                	test   %eax,%eax
  103dff:	75 33                	jne    103e34 <vfs_insert_node+0x5d>
    if (base > 36) {
  103e01:	8b 45 08             	mov    0x8(%ebp),%eax
  103e04:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103e0a:	89 c2                	mov    %eax,%edx
  103e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e0f:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
        return;
  103e15:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e18:	8b 55 08             	mov    0x8(%ebp),%edx
  103e1b:	89 90 0c 01 00 00    	mov    %edx,0x10c(%eax)
    }
  103e21:	8b 45 08             	mov    0x8(%ebp),%eax
  103e24:	8b 55 0c             	mov    0xc(%ebp),%edx
  103e27:	89 90 04 01 00 00    	mov    %edx,0x104(%eax)

    p = buf + 64;
  103e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  103e32:	eb 05                	jmp    103e39 <vfs_insert_node+0x62>
    *p = '\0';
    do {
        *--p = digits[x % base];
  103e34:	b8 01 00 00 00       	mov    $0x1,%eax
        x /= base;
  103e39:	5d                   	pop    %ebp
  103e3a:	c3                   	ret    

00103e3b <vfs_get_relative_node>:
    } while (x);
    kputs(p);
}
  103e3b:	55                   	push   %ebp
  103e3c:	89 e5                	mov    %esp,%ebp
  103e3e:	83 ec 18             	sub    $0x18,%esp

void clrscr(void) {
  103e41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  103e48:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103e4c:	75 17                	jne    103e65 <vfs_get_relative_node+0x2a>
        video[i] = 0;
  103e4e:	83 ec 0c             	sub    $0xc,%esp
  103e51:	6a 05                	push   $0x5
  103e53:	e8 08 fe ff ff       	call   103c60 <vfs_set_error>
  103e58:	83 c4 10             	add    $0x10,%esp
    }
  103e5b:	b8 00 00 00 00       	mov    $0x0,%eax
  103e60:	e9 af 00 00 00       	jmp    103f14 <vfs_get_relative_node+0xd9>

    color = 0x07;

  103e65:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e68:	8a 00                	mov    (%eax),%al
  103e6a:	84 c0                	test   %al,%al
  103e6c:	75 17                	jne    103e85 <vfs_get_relative_node+0x4a>
    x = y = 0;
  103e6e:	83 ec 0c             	sub    $0xc,%esp
  103e71:	6a 05                	push   $0x5
  103e73:	e8 e8 fd ff ff       	call   103c60 <vfs_set_error>
  103e78:	83 c4 10             	add    $0x10,%esp
}
  103e7b:	b8 00 00 00 00       	mov    $0x0,%eax
  103e80:	e9 8f 00 00 00       	jmp    103f14 <vfs_get_relative_node+0xd9>

void setclr(char clr) {
    color = clr;
  103e85:	83 ec 08             	sub    $0x8,%esp
  103e88:	68 95 78 10 00       	push   $0x107895
  103e8d:	ff 75 0c             	pushl  0xc(%ebp)
  103e90:	e8 5a fc ff ff       	call   103aef <strtok>
  103e95:	83 c4 10             	add    $0x10,%esp
  103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

  103e9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103e9f:	75 05                	jne    103ea6 <vfs_get_relative_node+0x6b>
int kprintf(const char* fmt, ...) {
  103ea1:	8b 45 08             	mov    0x8(%ebp),%eax
  103ea4:	eb 6e                	jmp    103f14 <vfs_get_relative_node+0xd9>
    va_list ap;
    const char* s;
    unsigned long n;
  103ea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ea9:	8a 00                	mov    (%eax),%al
  103eab:	84 c0                	test   %al,%al
  103ead:	75 15                	jne    103ec4 <vfs_get_relative_node+0x89>
  103eaf:	83 ec 08             	sub    $0x8,%esp
  103eb2:	68 95 78 10 00       	push   $0x107895
  103eb7:	6a 00                	push   $0x0
  103eb9:	e8 31 fc ff ff       	call   103aef <strtok>
  103ebe:	83 c4 10             	add    $0x10,%esp
  103ec1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char c;

  103ec4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103ec8:	75 41                	jne    103f0b <vfs_get_relative_node+0xd0>
    va_start(ap, fmt);
  103eca:	8b 45 08             	mov    0x8(%ebp),%eax
  103ecd:	eb 45                	jmp    103f14 <vfs_get_relative_node+0xd9>
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
  103ecf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103ed3:	75 07                	jne    103edc <vfs_get_relative_node+0xa1>
  103ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  103eda:	eb 38                	jmp    103f14 <vfs_get_relative_node+0xd9>
            case 's':
                s = va_arg(ap, char*);
  103edc:	83 ec 08             	sub    $0x8,%esp
  103edf:	ff 75 f0             	pushl  -0x10(%ebp)
  103ee2:	ff 75 08             	pushl  0x8(%ebp)
  103ee5:	e8 2c fe ff ff       	call   103d16 <vfs_find_node>
  103eea:	83 c4 10             	add    $0x10,%esp
  103eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  103ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ef3:	89 45 08             	mov    %eax,0x8(%ebp)
                break;
            case 'd':
  103ef6:	83 ec 08             	sub    $0x8,%esp
  103ef9:	68 95 78 10 00       	push   $0x107895
  103efe:	6a 00                	push   $0x0
  103f00:	e8 ea fb ff ff       	call   103aef <strtok>
  103f05:	83 c4 10             	add    $0x10,%esp
  103f08:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
  103f0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103f0f:	75 be                	jne    103ecf <vfs_get_relative_node+0x94>
                kputs(s);
                break;
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
                kputn(n, 10);
  103f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
                break;
  103f14:	c9                   	leave  
  103f15:	c3                   	ret    

00103f16 <vfs_get_current_task_root_node_for_path>:
            case 'x':
            case 'p':
  103f16:	55                   	push   %ebp
  103f17:	89 e5                	mov    %esp,%ebp
  103f19:	83 ec 08             	sub    $0x8,%esp
                n = va_arg(ap, unsigned long int);
  103f1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103f20:	74 09                	je     103f2b <vfs_get_current_task_root_node_for_path+0x15>
  103f22:	8b 45 08             	mov    0x8(%ebp),%eax
  103f25:	8a 00                	mov    (%eax),%al
  103f27:	84 c0                	test   %al,%al
  103f29:	75 14                	jne    103f3f <vfs_get_current_task_root_node_for_path+0x29>
                kputn(n, 16);
  103f2b:	83 ec 0c             	sub    $0xc,%esp
  103f2e:	6a 05                	push   $0x5
  103f30:	e8 2b fd ff ff       	call   103c60 <vfs_set_error>
  103f35:	83 c4 10             	add    $0x10,%esp
                break;
  103f38:	b8 00 00 00 00       	mov    $0x0,%eax
  103f3d:	eb 4d                	jmp    103f8c <vfs_get_current_task_root_node_for_path+0x76>
            case 'c':
                c = va_arg(ap, int);
                kputc(c);
  103f3f:	8b 45 08             	mov    0x8(%ebp),%eax
  103f42:	8a 00                	mov    (%eax),%al
  103f44:	3c 2f                	cmp    $0x2f,%al
  103f46:	75 07                	jne    103f4f <vfs_get_current_task_root_node_for_path+0x39>
  103f48:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103f4d:	eb 3d                	jmp    103f8c <vfs_get_current_task_root_node_for_path+0x76>
                break;
  103f4f:	e8 15 ec ff ff       	call   102b69 <get_current_task>
  103f54:	85 c0                	test   %eax,%eax
  103f56:	75 07                	jne    103f5f <vfs_get_current_task_root_node_for_path+0x49>
  103f58:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103f5d:	eb 2d                	jmp    103f8c <vfs_get_current_task_root_node_for_path+0x76>
            case '%':
  103f5f:	e8 05 ec ff ff       	call   102b69 <get_current_task>
  103f64:	8b 40 28             	mov    0x28(%eax),%eax
  103f67:	85 c0                	test   %eax,%eax
  103f69:	75 07                	jne    103f72 <vfs_get_current_task_root_node_for_path+0x5c>
  103f6b:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103f70:	eb 1a                	jmp    103f8c <vfs_get_current_task_root_node_for_path+0x76>
                kputc('%');
                break;
  103f72:	e8 f2 eb ff ff       	call   102b69 <get_current_task>
  103f77:	8b 50 28             	mov    0x28(%eax),%edx
  103f7a:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103f7f:	83 ec 08             	sub    $0x8,%esp
  103f82:	52                   	push   %edx
  103f83:	50                   	push   %eax
  103f84:	e8 b2 fe ff ff       	call   103e3b <vfs_get_relative_node>
  103f89:	83 c4 10             	add    $0x10,%esp
            case '\0':
                goto out;
  103f8c:	c9                   	leave  
  103f8d:	c3                   	ret    

00103f8e <vfs_get_node>:
            default:
                kputc('%');
  103f8e:	55                   	push   %ebp
  103f8f:	89 e5                	mov    %esp,%ebp
  103f91:	83 ec 08             	sub    $0x8,%esp
                kputc(*fmt);
  103f94:	83 ec 0c             	sub    $0xc,%esp
  103f97:	ff 75 08             	pushl  0x8(%ebp)
  103f9a:	e8 77 ff ff ff       	call   103f16 <vfs_get_current_task_root_node_for_path>
  103f9f:	83 c4 10             	add    $0x10,%esp
  103fa2:	83 ec 08             	sub    $0x8,%esp
  103fa5:	ff 75 08             	pushl  0x8(%ebp)
  103fa8:	50                   	push   %eax
  103fa9:	e8 8d fe ff ff       	call   103e3b <vfs_get_relative_node>
  103fae:	83 c4 10             	add    $0x10,%esp
                break;
  103fb1:	c9                   	leave  
  103fb2:	c3                   	ret    

00103fb3 <vfs_create_path>:
            }
        } else {
  103fb3:	55                   	push   %ebp
  103fb4:	89 e5                	mov    %esp,%ebp
  103fb6:	83 ec 18             	sub    $0x18,%esp
            kputc(*fmt);
        }
  103fb9:	83 ec 0c             	sub    $0xc,%esp
  103fbc:	ff 75 08             	pushl  0x8(%ebp)
  103fbf:	e8 52 ff ff ff       	call   103f16 <vfs_get_current_task_root_node_for_path>
  103fc4:	83 c4 10             	add    $0x10,%esp
  103fc7:	89 45 ec             	mov    %eax,-0x14(%ebp)

  103fca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        fmt++;
    }
  103fd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    out:
  103fd8:	83 ec 08             	sub    $0x8,%esp
  103fdb:	68 95 78 10 00       	push   $0x107895
  103fe0:	ff 75 08             	pushl  0x8(%ebp)
  103fe3:	e8 07 fb ff ff       	call   103aef <strtok>
  103fe8:	83 c4 10             	add    $0x10,%esp
  103feb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    va_end(ap);
  103fee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103ff1:	8a 00                	mov    (%eax),%al
  103ff3:	84 c0                	test   %al,%al
  103ff5:	0f 85 c4 00 00 00    	jne    1040bf <vfs_create_path+0x10c>
  103ffb:	83 ec 08             	sub    $0x8,%esp
  103ffe:	68 95 78 10 00       	push   $0x107895
  104003:	6a 00                	push   $0x0
  104005:	e8 e5 fa ff ff       	call   103aef <strtok>
  10400a:	83 c4 10             	add    $0x10,%esp
  10400d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    return kprintf_res;
  104010:	e9 aa 00 00 00       	jmp    1040bf <vfs_create_path+0x10c>
}

  104015:	83 ec 08             	sub    $0x8,%esp
  104018:	ff 75 e8             	pushl  -0x18(%ebp)
  10401b:	ff 75 ec             	pushl  -0x14(%ebp)
  10401e:	e8 f3 fc ff ff       	call   103d16 <vfs_find_node>
  104023:	83 c4 10             	add    $0x10,%esp
  104026:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104029:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10402d:	75 75                	jne    1040a4 <vfs_create_path+0xf1>
  10402f:	83 ec 0c             	sub    $0xc,%esp
  104032:	68 10 01 00 00       	push   $0x110
  104037:	e8 32 f6 ff ff       	call   10366e <malloc>
  10403c:	83 c4 10             	add    $0x10,%esp
  10403f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104042:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104045:	83 ec 08             	sub    $0x8,%esp
  104048:	ff 75 e8             	pushl  -0x18(%ebp)
  10404b:	50                   	push   %eax
  10404c:	e8 44 fa ff ff       	call   103a95 <strcpy>
  104051:	83 c4 10             	add    $0x10,%esp
  104054:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104057:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  10405e:	00 00 00 
  104061:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104064:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  10406b:	00 00 00 
  10406e:	ff 45 f4             	incl   -0xc(%ebp)
  104071:	83 ec 08             	sub    $0x8,%esp
  104074:	ff 75 f0             	pushl  -0x10(%ebp)
  104077:	ff 75 ec             	pushl  -0x14(%ebp)
  10407a:	e8 58 fd ff ff       	call   103dd7 <vfs_insert_node>
  10407f:	83 c4 10             	add    $0x10,%esp
  104082:	85 c0                	test   %eax,%eax
  104084:	74 1e                	je     1040a4 <vfs_create_path+0xf1>
  104086:	83 ec 0c             	sub    $0xc,%esp
  104089:	6a 38                	push   $0x38
  10408b:	e8 de f5 ff ff       	call   10366e <malloc>
  104090:	83 c4 10             	add    $0x10,%esp
  104093:	83 ec 08             	sub    $0x8,%esp
  104096:	68 98 78 10 00       	push   $0x107898
  10409b:	50                   	push   %eax
  10409c:	e8 35 c1 ff ff       	call   1001d6 <show_cod>
  1040a1:	83 c4 10             	add    $0x10,%esp
  1040a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1040aa:	83 ec 08             	sub    $0x8,%esp
  1040ad:	68 95 78 10 00       	push   $0x107895
  1040b2:	6a 00                	push   $0x0
  1040b4:	e8 36 fa ff ff       	call   103aef <strtok>
  1040b9:	83 c4 10             	add    $0x10,%esp
  1040bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }

    out:
    va_end(ap);

    return kprintf_res;
  1040bf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  1040c3:	0f 85 4c ff ff ff    	jne    104015 <vfs_create_path+0x62>
  1040c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040cc:	c9                   	leave  
  1040cd:	c3                   	ret    

001040ce <vfs_create_dir>:
  1040ce:	55                   	push   %ebp
  1040cf:	89 e5                	mov    %esp,%ebp
  1040d1:	83 ec 08             	sub    $0x8,%esp
  1040d4:	83 ec 0c             	sub    $0xc,%esp
  1040d7:	ff 75 08             	pushl  0x8(%ebp)
  1040da:	e8 d4 fe ff ff       	call   103fb3 <vfs_create_path>
  1040df:	83 c4 10             	add    $0x10,%esp
  1040e2:	c9                   	leave  
  1040e3:	c3                   	ret    

001040e4 <vfs_create_kfile>:
  1040e4:	55                   	push   %ebp
  1040e5:	89 e5                	mov    %esp,%ebp
  1040e7:	53                   	push   %ebx
  1040e8:	83 ec 14             	sub    $0x14,%esp
  1040eb:	83 ec 0c             	sub    $0xc,%esp
  1040ee:	ff 75 08             	pushl  0x8(%ebp)
  1040f1:	e8 6f f9 ff ff       	call   103a65 <strlen>
  1040f6:	83 c4 10             	add    $0x10,%esp
  1040f9:	40                   	inc    %eax
  1040fa:	83 ec 0c             	sub    $0xc,%esp
  1040fd:	50                   	push   %eax
  1040fe:	e8 6b f5 ff ff       	call   10366e <malloc>
  104103:	83 c4 10             	add    $0x10,%esp
  104106:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104109:	83 ec 08             	sub    $0x8,%esp
  10410c:	ff 75 08             	pushl  0x8(%ebp)
  10410f:	ff 75 f0             	pushl  -0x10(%ebp)
  104112:	e8 7e f9 ff ff       	call   103a95 <strcpy>
  104117:	83 c4 10             	add    $0x10,%esp
  10411a:	83 ec 0c             	sub    $0xc,%esp
  10411d:	ff 75 f0             	pushl  -0x10(%ebp)
  104120:	e8 8e fe ff ff       	call   103fb3 <vfs_create_path>
  104125:	83 c4 10             	add    $0x10,%esp
  104128:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10412b:	83 ec 0c             	sub    $0xc,%esp
  10412e:	ff 75 08             	pushl  0x8(%ebp)
  104131:	e8 58 fe ff ff       	call   103f8e <vfs_get_node>
  104136:	83 c4 10             	add    $0x10,%esp
  104139:	a3 60 85 12 00       	mov    %eax,0x128560
  10413e:	a1 60 85 12 00       	mov    0x128560,%eax
  104143:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  10414a:	00 00 00 
  10414d:	8b 1d 60 85 12 00    	mov    0x128560,%ebx
  104153:	8b 45 0c             	mov    0xc(%ebp),%eax
  104156:	8b 40 14             	mov    0x14(%eax),%eax
  104159:	83 ec 0c             	sub    $0xc,%esp
  10415c:	ff 75 10             	pushl  0x10(%ebp)
  10415f:	ff d0                	call   *%eax
  104161:	83 c4 10             	add    $0x10,%esp
  104164:	89 83 04 01 00 00    	mov    %eax,0x104(%ebx)
  10416a:	a1 60 85 12 00       	mov    0x128560,%eax
  10416f:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104175:	8b 55 0c             	mov    0xc(%ebp),%edx
  104178:	89 50 04             	mov    %edx,0x4(%eax)
  10417b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10417e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104181:	c9                   	leave  
  104182:	c3                   	ret    

00104183 <vfs_open>:
  104183:	55                   	push   %ebp
  104184:	89 e5                	mov    %esp,%ebp
  104186:	83 ec 18             	sub    $0x18,%esp
  104189:	83 ec 0c             	sub    $0xc,%esp
  10418c:	ff 75 08             	pushl  0x8(%ebp)
  10418f:	e8 fa fd ff ff       	call   103f8e <vfs_get_node>
  104194:	83 c4 10             	add    $0x10,%esp
  104197:	a3 5c 85 12 00       	mov    %eax,0x12855c
  10419c:	a1 5c 85 12 00       	mov    0x12855c,%eax
  1041a1:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  1041a7:	83 f8 01             	cmp    $0x1,%eax
  1041aa:	75 2d                	jne    1041d9 <vfs_open+0x56>
  1041ac:	a1 5c 85 12 00       	mov    0x12855c,%eax
  1041b1:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1041b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1041ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1041bd:	8b 40 04             	mov    0x4(%eax),%eax
  1041c0:	8b 40 08             	mov    0x8(%eax),%eax
  1041c3:	83 ec 08             	sub    $0x8,%esp
  1041c6:	ff 75 0c             	pushl  0xc(%ebp)
  1041c9:	ff 75 f0             	pushl  -0x10(%ebp)
  1041cc:	ff d0                	call   *%eax
  1041ce:	83 c4 10             	add    $0x10,%esp
  1041d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1041d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041d7:	eb 05                	jmp    1041de <vfs_open+0x5b>
  1041d9:	b8 00 00 00 00       	mov    $0x0,%eax
  1041de:	c9                   	leave  
  1041df:	c3                   	ret    

001041e0 <vfs_close>:
  1041e0:	55                   	push   %ebp
  1041e1:	89 e5                	mov    %esp,%ebp
  1041e3:	83 ec 18             	sub    $0x18,%esp
  1041e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1041e9:	8b 00                	mov    (%eax),%eax
  1041eb:	83 f8 01             	cmp    $0x1,%eax
  1041ee:	75 1f                	jne    10420f <vfs_close+0x2f>
  1041f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1041f3:	8b 40 04             	mov    0x4(%eax),%eax
  1041f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1041f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041fc:	8b 40 04             	mov    0x4(%eax),%eax
  1041ff:	8b 40 0c             	mov    0xc(%eax),%eax
  104202:	83 ec 0c             	sub    $0xc,%esp
  104205:	ff 75 08             	pushl  0x8(%ebp)
  104208:	ff d0                	call   *%eax
  10420a:	83 c4 10             	add    $0x10,%esp
  10420d:	eb 05                	jmp    104214 <vfs_close+0x34>
  10420f:	b8 00 00 00 00       	mov    $0x0,%eax
  104214:	c9                   	leave  
  104215:	c3                   	ret    

00104216 <vfs_read>:
  104216:	55                   	push   %ebp
  104217:	89 e5                	mov    %esp,%ebp
  104219:	83 ec 18             	sub    $0x18,%esp
  10421c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104220:	75 07                	jne    104229 <vfs_read+0x13>
  104222:	b8 02 00 00 00       	mov    $0x2,%eax
  104227:	eb 74                	jmp    10429d <vfs_read+0x87>
  104229:	8b 45 08             	mov    0x8(%ebp),%eax
  10422c:	8b 40 0c             	mov    0xc(%eax),%eax
  10422f:	83 e0 01             	and    $0x1,%eax
  104232:	85 c0                	test   %eax,%eax
  104234:	75 07                	jne    10423d <vfs_read+0x27>
  104236:	b8 04 00 00 00       	mov    $0x4,%eax
  10423b:	eb 60                	jmp    10429d <vfs_read+0x87>
  10423d:	8b 45 08             	mov    0x8(%ebp),%eax
  104240:	8b 00                	mov    (%eax),%eax
  104242:	83 f8 01             	cmp    $0x1,%eax
  104245:	75 51                	jne    104298 <vfs_read+0x82>
  104247:	8b 45 08             	mov    0x8(%ebp),%eax
  10424a:	8b 40 04             	mov    0x4(%eax),%eax
  10424d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104250:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104253:	8b 40 04             	mov    0x4(%eax),%eax
  104256:	8b 10                	mov    (%eax),%edx
  104258:	8b 45 10             	mov    0x10(%ebp),%eax
  10425b:	0f af 45 14          	imul   0x14(%ebp),%eax
  10425f:	83 ec 04             	sub    $0x4,%esp
  104262:	50                   	push   %eax
  104263:	ff 75 0c             	pushl  0xc(%ebp)
  104266:	ff 75 08             	pushl  0x8(%ebp)
  104269:	ff d2                	call   *%edx
  10426b:	83 c4 10             	add    $0x10,%esp
  10426e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104271:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104275:	75 1c                	jne    104293 <vfs_read+0x7d>
  104277:	8b 45 08             	mov    0x8(%ebp),%eax
  10427a:	8b 50 08             	mov    0x8(%eax),%edx
  10427d:	8b 45 10             	mov    0x10(%ebp),%eax
  104280:	0f af 45 14          	imul   0x14(%ebp),%eax
  104284:	01 c2                	add    %eax,%edx
  104286:	8b 45 08             	mov    0x8(%ebp),%eax
  104289:	89 50 08             	mov    %edx,0x8(%eax)
  10428c:	b8 00 00 00 00       	mov    $0x0,%eax
  104291:	eb 0a                	jmp    10429d <vfs_read+0x87>
  104293:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104296:	eb 05                	jmp    10429d <vfs_read+0x87>
  104298:	b8 02 00 00 00       	mov    $0x2,%eax
  10429d:	c9                   	leave  
  10429e:	c3                   	ret    

0010429f <vfs_write>:
  10429f:	55                   	push   %ebp
  1042a0:	89 e5                	mov    %esp,%ebp
  1042a2:	83 ec 18             	sub    $0x18,%esp
  1042a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1042a9:	75 07                	jne    1042b2 <vfs_write+0x13>
  1042ab:	b8 02 00 00 00       	mov    $0x2,%eax
  1042b0:	eb 75                	jmp    104327 <vfs_write+0x88>
  1042b2:	8b 45 08             	mov    0x8(%ebp),%eax
  1042b5:	8b 40 0c             	mov    0xc(%eax),%eax
  1042b8:	83 e0 02             	and    $0x2,%eax
  1042bb:	85 c0                	test   %eax,%eax
  1042bd:	75 07                	jne    1042c6 <vfs_write+0x27>
  1042bf:	b8 05 00 00 00       	mov    $0x5,%eax
  1042c4:	eb 61                	jmp    104327 <vfs_write+0x88>
  1042c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1042c9:	8b 00                	mov    (%eax),%eax
  1042cb:	83 f8 01             	cmp    $0x1,%eax
  1042ce:	75 52                	jne    104322 <vfs_write+0x83>
  1042d0:	8b 45 08             	mov    0x8(%ebp),%eax
  1042d3:	8b 40 04             	mov    0x4(%eax),%eax
  1042d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1042d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042dc:	8b 40 04             	mov    0x4(%eax),%eax
  1042df:	8b 50 04             	mov    0x4(%eax),%edx
  1042e2:	8b 45 10             	mov    0x10(%ebp),%eax
  1042e5:	0f af 45 14          	imul   0x14(%ebp),%eax
  1042e9:	83 ec 04             	sub    $0x4,%esp
  1042ec:	50                   	push   %eax
  1042ed:	ff 75 0c             	pushl  0xc(%ebp)
  1042f0:	ff 75 08             	pushl  0x8(%ebp)
  1042f3:	ff d2                	call   *%edx
  1042f5:	83 c4 10             	add    $0x10,%esp
  1042f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1042fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1042ff:	75 1c                	jne    10431d <vfs_write+0x7e>
  104301:	8b 45 08             	mov    0x8(%ebp),%eax
  104304:	8b 50 08             	mov    0x8(%eax),%edx
  104307:	8b 45 10             	mov    0x10(%ebp),%eax
  10430a:	0f af 45 14          	imul   0x14(%ebp),%eax
  10430e:	01 c2                	add    %eax,%edx
  104310:	8b 45 08             	mov    0x8(%ebp),%eax
  104313:	89 50 08             	mov    %edx,0x8(%eax)
  104316:	b8 00 00 00 00       	mov    $0x0,%eax
  10431b:	eb 0a                	jmp    104327 <vfs_write+0x88>
  10431d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104320:	eb 05                	jmp    104327 <vfs_write+0x88>
  104322:	b8 02 00 00 00       	mov    $0x2,%eax
  104327:	c9                   	leave  
  104328:	c3                   	ret    

00104329 <vfs_available>:
  104329:	55                   	push   %ebp
  10432a:	89 e5                	mov    %esp,%ebp
  10432c:	83 ec 18             	sub    $0x18,%esp
  10432f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104333:	75 07                	jne    10433c <vfs_available+0x13>
  104335:	b8 00 00 00 00       	mov    $0x0,%eax
  10433a:	eb 2e                	jmp    10436a <vfs_available+0x41>
  10433c:	8b 45 08             	mov    0x8(%ebp),%eax
  10433f:	8b 00                	mov    (%eax),%eax
  104341:	83 f8 01             	cmp    $0x1,%eax
  104344:	75 1f                	jne    104365 <vfs_available+0x3c>
  104346:	8b 45 08             	mov    0x8(%ebp),%eax
  104349:	8b 40 04             	mov    0x4(%eax),%eax
  10434c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10434f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104352:	8b 40 04             	mov    0x4(%eax),%eax
  104355:	8b 40 10             	mov    0x10(%eax),%eax
  104358:	83 ec 0c             	sub    $0xc,%esp
  10435b:	ff 75 08             	pushl  0x8(%ebp)
  10435e:	ff d0                	call   *%eax
  104360:	83 c4 10             	add    $0x10,%esp
  104363:	eb 05                	jmp    10436a <vfs_available+0x41>
  104365:	b8 00 00 00 00       	mov    $0x0,%eax
  10436a:	c9                   	leave  
  10436b:	c3                   	ret    

0010436c <vfs_exists>:
  10436c:	55                   	push   %ebp
  10436d:	89 e5                	mov    %esp,%ebp
  10436f:	83 ec 08             	sub    $0x8,%esp
  104372:	83 ec 0c             	sub    $0xc,%esp
  104375:	ff 75 08             	pushl  0x8(%ebp)
  104378:	e8 11 fc ff ff       	call   103f8e <vfs_get_node>
  10437d:	83 c4 10             	add    $0x10,%esp
  104380:	85 c0                	test   %eax,%eax
  104382:	74 07                	je     10438b <vfs_exists+0x1f>
  104384:	b8 01 00 00 00       	mov    $0x1,%eax
  104389:	eb 05                	jmp    104390 <vfs_exists+0x24>
  10438b:	b8 00 00 00 00       	mov    $0x0,%eax
  104390:	c9                   	leave  
  104391:	c3                   	ret    

00104392 <vfs_seek>:
  104392:	55                   	push   %ebp
  104393:	89 e5                	mov    %esp,%ebp
  104395:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  104399:	75 09                	jne    1043a4 <vfs_seek+0x12>
  10439b:	8b 45 08             	mov    0x8(%ebp),%eax
  10439e:	8b 55 0c             	mov    0xc(%ebp),%edx
  1043a1:	89 50 08             	mov    %edx,0x8(%eax)
  1043a4:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
  1043a8:	75 11                	jne    1043bb <vfs_seek+0x29>
  1043aa:	8b 45 08             	mov    0x8(%ebp),%eax
  1043ad:	8b 40 08             	mov    0x8(%eax),%eax
  1043b0:	89 c2                	mov    %eax,%edx
  1043b2:	03 55 0c             	add    0xc(%ebp),%edx
  1043b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1043b8:	89 50 08             	mov    %edx,0x8(%eax)
  1043bb:	5d                   	pop    %ebp
  1043bc:	c3                   	ret    

001043bd <vfs_exec>:
  1043bd:	55                   	push   %ebp
  1043be:	89 e5                	mov    %esp,%ebp
  1043c0:	53                   	push   %ebx
  1043c1:	83 ec 64             	sub    $0x64,%esp
  1043c4:	83 ec 0c             	sub    $0xc,%esp
  1043c7:	ff 75 08             	pushl  0x8(%ebp)
  1043ca:	e8 e9 f6 ff ff       	call   103ab8 <strclone>
  1043cf:	83 c4 10             	add    $0x10,%esp
  1043d2:	89 45 08             	mov    %eax,0x8(%ebp)
  1043d5:	83 ec 0c             	sub    $0xc,%esp
  1043d8:	ff 75 08             	pushl  0x8(%ebp)
  1043db:	e8 8c ff ff ff       	call   10436c <vfs_exists>
  1043e0:	83 c4 10             	add    $0x10,%esp
  1043e3:	85 c0                	test   %eax,%eax
  1043e5:	75 25                	jne    10440c <vfs_exec+0x4f>
  1043e7:	83 ec 0c             	sub    $0xc,%esp
  1043ea:	ff 75 08             	pushl  0x8(%ebp)
  1043ed:	e8 c2 f4 ff ff       	call   1038b4 <free>
  1043f2:	83 c4 10             	add    $0x10,%esp
  1043f5:	83 ec 0c             	sub    $0xc,%esp
  1043f8:	6a 01                	push   $0x1
  1043fa:	e8 61 f8 ff ff       	call   103c60 <vfs_set_error>
  1043ff:	83 c4 10             	add    $0x10,%esp
  104402:	b8 00 00 00 00       	mov    $0x0,%eax
  104407:	e9 9e 04 00 00       	jmp    1048aa <vfs_exec+0x4ed>
  10440c:	e8 71 08 00 00       	call   104c82 <vmm_create_pagedir>
  104411:	89 45 a0             	mov    %eax,-0x60(%ebp)
  104414:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  10441b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10441f:	74 14                	je     104435 <vfs_exec+0x78>
  104421:	eb 03                	jmp    104426 <vfs_exec+0x69>
  104423:	ff 45 a4             	incl   -0x5c(%ebp)
  104426:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  104429:	c1 e0 02             	shl    $0x2,%eax
  10442c:	03 45 0c             	add    0xc(%ebp),%eax
  10442f:	8b 00                	mov    (%eax),%eax
  104431:	85 c0                	test   %eax,%eax
  104433:	75 ee                	jne    104423 <vfs_exec+0x66>
  104435:	ff 45 a4             	incl   -0x5c(%ebp)
  104438:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10443b:	40                   	inc    %eax
  10443c:	c1 e0 02             	shl    $0x2,%eax
  10443f:	83 ec 0c             	sub    $0xc,%esp
  104442:	50                   	push   %eax
  104443:	e8 26 f2 ff ff       	call   10366e <malloc>
  104448:	83 c4 10             	add    $0x10,%esp
  10444b:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10444e:	83 ec 0c             	sub    $0xc,%esp
  104451:	ff 75 08             	pushl  0x8(%ebp)
  104454:	e8 5f f6 ff ff       	call   103ab8 <strclone>
  104459:	83 c4 10             	add    $0x10,%esp
  10445c:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10445f:	89 02                	mov    %eax,(%edx)
  104461:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
  104468:	eb 59                	jmp    1044c3 <vfs_exec+0x106>
  10446a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10446d:	c1 e0 02             	shl    $0x2,%eax
  104470:	89 c3                	mov    %eax,%ebx
  104472:	03 5d a8             	add    -0x58(%ebp),%ebx
  104475:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104478:	48                   	dec    %eax
  104479:	c1 e0 02             	shl    $0x2,%eax
  10447c:	03 45 0c             	add    0xc(%ebp),%eax
  10447f:	8b 00                	mov    (%eax),%eax
  104481:	83 ec 0c             	sub    $0xc,%esp
  104484:	50                   	push   %eax
  104485:	e8 db f5 ff ff       	call   103a65 <strlen>
  10448a:	83 c4 10             	add    $0x10,%esp
  10448d:	40                   	inc    %eax
  10448e:	83 ec 0c             	sub    $0xc,%esp
  104491:	50                   	push   %eax
  104492:	e8 d7 f1 ff ff       	call   10366e <malloc>
  104497:	83 c4 10             	add    $0x10,%esp
  10449a:	89 03                	mov    %eax,(%ebx)
  10449c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10449f:	48                   	dec    %eax
  1044a0:	c1 e0 02             	shl    $0x2,%eax
  1044a3:	03 45 0c             	add    0xc(%ebp),%eax
  1044a6:	8b 10                	mov    (%eax),%edx
  1044a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1044ab:	c1 e0 02             	shl    $0x2,%eax
  1044ae:	03 45 a8             	add    -0x58(%ebp),%eax
  1044b1:	8b 00                	mov    (%eax),%eax
  1044b3:	83 ec 08             	sub    $0x8,%esp
  1044b6:	52                   	push   %edx
  1044b7:	50                   	push   %eax
  1044b8:	e8 d8 f5 ff ff       	call   103a95 <strcpy>
  1044bd:	83 c4 10             	add    $0x10,%esp
  1044c0:	ff 45 d4             	incl   -0x2c(%ebp)
  1044c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1044c6:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
  1044c9:	72 9f                	jb     10446a <vfs_exec+0xad>
  1044cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1044ce:	c1 e0 02             	shl    $0x2,%eax
  1044d1:	03 45 a8             	add    -0x58(%ebp),%eax
  1044d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  1044da:	83 ec 08             	sub    $0x8,%esp
  1044dd:	6a 05                	push   $0x5
  1044df:	ff 75 08             	pushl  0x8(%ebp)
  1044e2:	e8 9c fc ff ff       	call   104183 <vfs_open>
  1044e7:	83 c4 10             	add    $0x10,%esp
  1044ea:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1044ed:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
  1044f1:	75 25                	jne    104518 <vfs_exec+0x15b>
  1044f3:	83 ec 0c             	sub    $0xc,%esp
  1044f6:	6a 02                	push   $0x2
  1044f8:	e8 63 f7 ff ff       	call   103c60 <vfs_set_error>
  1044fd:	83 c4 10             	add    $0x10,%esp
  104500:	83 ec 0c             	sub    $0xc,%esp
  104503:	ff 75 08             	pushl  0x8(%ebp)
  104506:	e8 a9 f3 ff ff       	call   1038b4 <free>
  10450b:	83 c4 10             	add    $0x10,%esp
  10450e:	b8 00 00 00 00       	mov    $0x0,%eax
  104513:	e9 92 03 00 00       	jmp    1048aa <vfs_exec+0x4ed>
  104518:	83 ec 0c             	sub    $0xc,%esp
  10451b:	ff 75 ac             	pushl  -0x54(%ebp)
  10451e:	e8 06 fe ff ff       	call   104329 <vfs_available>
  104523:	83 c4 10             	add    $0x10,%esp
  104526:	89 45 b0             	mov    %eax,-0x50(%ebp)
  104529:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  10452d:	75 25                	jne    104554 <vfs_exec+0x197>
  10452f:	83 ec 0c             	sub    $0xc,%esp
  104532:	6a 03                	push   $0x3
  104534:	e8 27 f7 ff ff       	call   103c60 <vfs_set_error>
  104539:	83 c4 10             	add    $0x10,%esp
  10453c:	83 ec 0c             	sub    $0xc,%esp
  10453f:	ff 75 08             	pushl  0x8(%ebp)
  104542:	e8 6d f3 ff ff       	call   1038b4 <free>
  104547:	83 c4 10             	add    $0x10,%esp
  10454a:	b8 00 00 00 00       	mov    $0x0,%eax
  10454f:	e9 56 03 00 00       	jmp    1048aa <vfs_exec+0x4ed>
  104554:	83 ec 0c             	sub    $0xc,%esp
  104557:	ff 75 b0             	pushl  -0x50(%ebp)
  10455a:	e8 0f f1 ff ff       	call   10366e <malloc>
  10455f:	83 c4 10             	add    $0x10,%esp
  104562:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  104565:	6a 01                	push   $0x1
  104567:	ff 75 b0             	pushl  -0x50(%ebp)
  10456a:	ff 75 b4             	pushl  -0x4c(%ebp)
  10456d:	ff 75 ac             	pushl  -0x54(%ebp)
  104570:	e8 a1 fc ff ff       	call   104216 <vfs_read>
  104575:	83 c4 10             	add    $0x10,%esp
  104578:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10457b:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  10457f:	74 33                	je     1045b4 <vfs_exec+0x1f7>
  104581:	83 ec 0c             	sub    $0xc,%esp
  104584:	ff 75 08             	pushl  0x8(%ebp)
  104587:	e8 28 f3 ff ff       	call   1038b4 <free>
  10458c:	83 c4 10             	add    $0x10,%esp
  10458f:	83 ec 0c             	sub    $0xc,%esp
  104592:	ff 75 b4             	pushl  -0x4c(%ebp)
  104595:	e8 1a f3 ff ff       	call   1038b4 <free>
  10459a:	83 c4 10             	add    $0x10,%esp
  10459d:	83 ec 0c             	sub    $0xc,%esp
  1045a0:	6a 04                	push   $0x4
  1045a2:	e8 b9 f6 ff ff       	call   103c60 <vfs_set_error>
  1045a7:	83 c4 10             	add    $0x10,%esp
  1045aa:	b8 00 00 00 00       	mov    $0x0,%eax
  1045af:	e9 f6 02 00 00       	jmp    1048aa <vfs_exec+0x4ed>
  1045b4:	e8 bf 06 00 00       	call   104c78 <vmm_get_current_pagedir>
  1045b9:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1045bc:	83 ec 0c             	sub    $0xc,%esp
  1045bf:	ff 75 a0             	pushl  -0x60(%ebp)
  1045c2:	e8 a9 0c 00 00       	call   105270 <vmm_activate_pagedir>
  1045c7:	83 c4 10             	add    $0x10,%esp
  1045ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  1045cd:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1045d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1045d3:	8b 00                	mov    (%eax),%eax
  1045d5:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1045da:	74 33                	je     10460f <vfs_exec+0x252>
  1045dc:	83 ec 0c             	sub    $0xc,%esp
  1045df:	ff 75 b4             	pushl  -0x4c(%ebp)
  1045e2:	e8 cd f2 ff ff       	call   1038b4 <free>
  1045e7:	83 c4 10             	add    $0x10,%esp
  1045ea:	83 ec 0c             	sub    $0xc,%esp
  1045ed:	ff 75 08             	pushl  0x8(%ebp)
  1045f0:	e8 bf f2 ff ff       	call   1038b4 <free>
  1045f5:	83 c4 10             	add    $0x10,%esp
  1045f8:	83 ec 0c             	sub    $0xc,%esp
  1045fb:	6a 03                	push   $0x3
  1045fd:	e8 5e f6 ff ff       	call   103c60 <vfs_set_error>
  104602:	83 c4 10             	add    $0x10,%esp
  104605:	b8 00 00 00 00       	mov    $0x0,%eax
  10460a:	e9 9b 02 00 00       	jmp    1048aa <vfs_exec+0x4ed>
  10460f:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104612:	8b 40 18             	mov    0x18(%eax),%eax
  104615:	89 45 c8             	mov    %eax,-0x38(%ebp)
  104618:	8b 55 c0             	mov    -0x40(%ebp),%edx
  10461b:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10461e:	8b 40 1c             	mov    0x1c(%eax),%eax
  104621:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104624:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  104627:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10462e:	e9 88 00 00 00       	jmp    1046bb <vfs_exec+0x2fe>
  104633:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104636:	8b 40 08             	mov    0x8(%eax),%eax
  104639:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10463c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10463f:	8b 40 04             	mov    0x4(%eax),%eax
  104642:	03 45 c0             	add    -0x40(%ebp),%eax
  104645:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104648:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10464b:	8b 00                	mov    (%eax),%eax
  10464d:	83 f8 01             	cmp    $0x1,%eax
  104650:	75 61                	jne    1046b3 <vfs_exec+0x2f6>
  104652:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104659:	eb 33                	jmp    10468e <vfs_exec+0x2d1>
  10465b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10465e:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104661:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104664:	83 ec 0c             	sub    $0xc,%esp
  104667:	50                   	push   %eax
  104668:	e8 48 09 00 00       	call   104fb5 <vmm_free>
  10466d:	83 c4 10             	add    $0x10,%esp
  104670:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104673:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104676:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104679:	83 ec 08             	sub    $0x8,%esp
  10467c:	6a 00                	push   $0x0
  10467e:	50                   	push   %eax
  10467f:	e8 47 0b 00 00       	call   1051cb <vmm_alloc_addr>
  104684:	83 c4 10             	add    $0x10,%esp
  104687:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  10468e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104691:	8b 40 14             	mov    0x14(%eax),%eax
  104694:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  104697:	77 c2                	ja     10465b <vfs_exec+0x29e>
  104699:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10469c:	8b 40 10             	mov    0x10(%eax),%eax
  10469f:	83 ec 04             	sub    $0x4,%esp
  1046a2:	50                   	push   %eax
  1046a3:	ff 75 e0             	pushl  -0x20(%ebp)
  1046a6:	ff 75 dc             	pushl  -0x24(%ebp)
  1046a9:	e8 88 f2 ff ff       	call   103936 <memcpy>
  1046ae:	83 c4 10             	add    $0x10,%esp
  1046b1:	eb 01                	jmp    1046b4 <vfs_exec+0x2f7>
  1046b3:	90                   	nop    
  1046b4:	ff 45 d8             	incl   -0x28(%ebp)
  1046b7:	83 45 c4 20          	addl   $0x20,-0x3c(%ebp)
  1046bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1046be:	66 8b 40 2c          	mov    0x2c(%eax),%ax
  1046c2:	25 ff ff 00 00       	and    $0xffff,%eax
  1046c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
  1046ca:	0f 87 63 ff ff ff    	ja     104633 <vfs_exec+0x276>
  1046d0:	83 ec 0c             	sub    $0xc,%esp
  1046d3:	6a 01                	push   $0x1
  1046d5:	e8 75 0a 00 00       	call   10514f <vmm_alloc_ucont>
  1046da:	83 c4 10             	add    $0x10,%esp
  1046dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1046e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1046e7:	eb 57                	jmp    104740 <vfs_exec+0x383>
  1046e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1046ec:	c1 e0 02             	shl    $0x2,%eax
  1046ef:	89 c3                	mov    %eax,%ebx
  1046f1:	03 5d cc             	add    -0x34(%ebp),%ebx
  1046f4:	83 ec 0c             	sub    $0xc,%esp
  1046f7:	6a 01                	push   $0x1
  1046f9:	e8 51 0a 00 00       	call   10514f <vmm_alloc_ucont>
  1046fe:	83 c4 10             	add    $0x10,%esp
  104701:	89 03                	mov    %eax,(%ebx)
  104703:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104706:	c1 e0 02             	shl    $0x2,%eax
  104709:	03 45 a8             	add    -0x58(%ebp),%eax
  10470c:	8b 10                	mov    (%eax),%edx
  10470e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104711:	c1 e0 02             	shl    $0x2,%eax
  104714:	03 45 cc             	add    -0x34(%ebp),%eax
  104717:	8b 00                	mov    (%eax),%eax
  104719:	83 ec 08             	sub    $0x8,%esp
  10471c:	52                   	push   %edx
  10471d:	50                   	push   %eax
  10471e:	e8 72 f3 ff ff       	call   103a95 <strcpy>
  104723:	83 c4 10             	add    $0x10,%esp
  104726:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104729:	c1 e0 02             	shl    $0x2,%eax
  10472c:	03 45 a8             	add    -0x58(%ebp),%eax
  10472f:	8b 00                	mov    (%eax),%eax
  104731:	83 ec 0c             	sub    $0xc,%esp
  104734:	50                   	push   %eax
  104735:	e8 7a f1 ff ff       	call   1038b4 <free>
  10473a:	83 c4 10             	add    $0x10,%esp
  10473d:	ff 45 e8             	incl   -0x18(%ebp)
  104740:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104743:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
  104746:	72 a1                	jb     1046e9 <vfs_exec+0x32c>
  104748:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10474b:	c1 e0 02             	shl    $0x2,%eax
  10474e:	03 45 cc             	add    -0x34(%ebp),%eax
  104751:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  104757:	83 ec 0c             	sub    $0xc,%esp
  10475a:	ff 75 a8             	pushl  -0x58(%ebp)
  10475d:	e8 52 f1 ff ff       	call   1038b4 <free>
  104762:	83 c4 10             	add    $0x10,%esp
  104765:	83 ec 08             	sub    $0x8,%esp
  104768:	ff 75 c8             	pushl  -0x38(%ebp)
  10476b:	ff 75 a0             	pushl  -0x60(%ebp)
  10476e:	e8 f2 e6 ff ff       	call   102e65 <init_task>
  104773:	83 c4 10             	add    $0x10,%esp
  104776:	89 45 d0             	mov    %eax,-0x30(%ebp)
  104779:	e8 eb e3 ff ff       	call   102b69 <get_current_task>
  10477e:	85 c0                	test   %eax,%eax
  104780:	74 38                	je     1047ba <vfs_exec+0x3fd>
  104782:	e8 e2 e3 ff ff       	call   102b69 <get_current_task>
  104787:	8b 50 38             	mov    0x38(%eax),%edx
  10478a:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10478d:	89 50 38             	mov    %edx,0x38(%eax)
  104790:	e8 d4 e3 ff ff       	call   102b69 <get_current_task>
  104795:	8b 50 30             	mov    0x30(%eax),%edx
  104798:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10479b:	89 50 30             	mov    %edx,0x30(%eax)
  10479e:	e8 c6 e3 ff ff       	call   102b69 <get_current_task>
  1047a3:	8b 50 34             	mov    0x34(%eax),%edx
  1047a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1047a9:	89 50 34             	mov    %edx,0x34(%eax)
  1047ac:	e8 b8 e3 ff ff       	call   102b69 <get_current_task>
  1047b1:	8b 50 28             	mov    0x28(%eax),%edx
  1047b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1047b7:	89 50 28             	mov    %edx,0x28(%eax)
  1047ba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1047be:	74 09                	je     1047c9 <vfs_exec+0x40c>
  1047c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1047c3:	8b 55 10             	mov    0x10(%ebp),%edx
  1047c6:	89 50 28             	mov    %edx,0x28(%eax)
  1047c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  1047cd:	74 34                	je     104803 <vfs_exec+0x446>
  1047cf:	83 ec 0c             	sub    $0xc,%esp
  1047d2:	ff 75 14             	pushl  0x14(%ebp)
  1047d5:	e8 92 fb ff ff       	call   10436c <vfs_exists>
  1047da:	83 c4 10             	add    $0x10,%esp
  1047dd:	85 c0                	test   %eax,%eax
  1047df:	74 22                	je     104803 <vfs_exec+0x446>
  1047e1:	83 ec 08             	sub    $0x8,%esp
  1047e4:	6a 01                	push   $0x1
  1047e6:	ff 75 14             	pushl  0x14(%ebp)
  1047e9:	e8 95 f9 ff ff       	call   104183 <vfs_open>
  1047ee:	83 c4 10             	add    $0x10,%esp
  1047f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1047f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1047f8:	74 09                	je     104803 <vfs_exec+0x446>
  1047fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1047fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104800:	89 50 38             	mov    %edx,0x38(%eax)
  104803:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  104807:	74 34                	je     10483d <vfs_exec+0x480>
  104809:	83 ec 0c             	sub    $0xc,%esp
  10480c:	ff 75 18             	pushl  0x18(%ebp)
  10480f:	e8 58 fb ff ff       	call   10436c <vfs_exists>
  104814:	83 c4 10             	add    $0x10,%esp
  104817:	85 c0                	test   %eax,%eax
  104819:	74 22                	je     10483d <vfs_exec+0x480>
  10481b:	83 ec 08             	sub    $0x8,%esp
  10481e:	6a 01                	push   $0x1
  104820:	ff 75 18             	pushl  0x18(%ebp)
  104823:	e8 5b f9 ff ff       	call   104183 <vfs_open>
  104828:	83 c4 10             	add    $0x10,%esp
  10482b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10482e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  104832:	74 09                	je     10483d <vfs_exec+0x480>
  104834:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104837:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10483a:	89 50 30             	mov    %edx,0x30(%eax)
  10483d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  104841:	74 34                	je     104877 <vfs_exec+0x4ba>
  104843:	83 ec 0c             	sub    $0xc,%esp
  104846:	ff 75 1c             	pushl  0x1c(%ebp)
  104849:	e8 1e fb ff ff       	call   10436c <vfs_exists>
  10484e:	83 c4 10             	add    $0x10,%esp
  104851:	85 c0                	test   %eax,%eax
  104853:	74 22                	je     104877 <vfs_exec+0x4ba>
  104855:	83 ec 08             	sub    $0x8,%esp
  104858:	6a 01                	push   $0x1
  10485a:	ff 75 1c             	pushl  0x1c(%ebp)
  10485d:	e8 21 f9 ff ff       	call   104183 <vfs_open>
  104862:	83 c4 10             	add    $0x10,%esp
  104865:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104868:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10486c:	74 09                	je     104877 <vfs_exec+0x4ba>
  10486e:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104871:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104874:	89 50 34             	mov    %edx,0x34(%eax)
  104877:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10487a:	8b 55 cc             	mov    -0x34(%ebp),%edx
  10487d:	89 50 20             	mov    %edx,0x20(%eax)
  104880:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104883:	8b 55 08             	mov    0x8(%ebp),%edx
  104886:	89 50 24             	mov    %edx,0x24(%eax)
  104889:	83 ec 0c             	sub    $0xc,%esp
  10488c:	ff 75 bc             	pushl  -0x44(%ebp)
  10488f:	e8 dc 09 00 00       	call   105270 <vmm_activate_pagedir>
  104894:	83 c4 10             	add    $0x10,%esp
  104897:	83 ec 0c             	sub    $0xc,%esp
  10489a:	ff 75 b4             	pushl  -0x4c(%ebp)
  10489d:	e8 12 f0 ff ff       	call   1038b4 <free>
  1048a2:	83 c4 10             	add    $0x10,%esp
  1048a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048a8:	8b 00                	mov    (%eax),%eax
  1048aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1048ad:	c9                   	leave  
  1048ae:	c3                   	ret    

001048af <vfs_resolve_path>:
  1048af:	55                   	push   %ebp
  1048b0:	89 e5                	mov    %esp,%ebp
  1048b2:	83 ec 18             	sub    $0x18,%esp
  1048b5:	83 ec 0c             	sub    $0xc,%esp
  1048b8:	ff 75 08             	pushl  0x8(%ebp)
  1048bb:	e8 ce f6 ff ff       	call   103f8e <vfs_get_node>
  1048c0:	83 c4 10             	add    $0x10,%esp
  1048c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1048c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1048ca:	75 07                	jne    1048d3 <vfs_resolve_path+0x24>
  1048cc:	b8 00 00 00 00       	mov    $0x0,%eax
  1048d1:	eb 0e                	jmp    1048e1 <vfs_resolve_path+0x32>
  1048d3:	83 ec 0c             	sub    $0xc,%esp
  1048d6:	ff 75 f4             	pushl  -0xc(%ebp)
  1048d9:	e8 c7 f3 ff ff       	call   103ca5 <vfs_construct_absolute_path_for_node>
  1048de:	83 c4 10             	add    $0x10,%esp
  1048e1:	c9                   	leave  
  1048e2:	c3                   	ret    

001048e3 <vfs_init_root>:
  1048e3:	55                   	push   %ebp
  1048e4:	89 e5                	mov    %esp,%ebp
  1048e6:	83 ec 08             	sub    $0x8,%esp
  1048e9:	a1 4c 85 12 00       	mov    0x12854c,%eax
  1048ee:	85 c0                	test   %eax,%eax
  1048f0:	75 69                	jne    10495b <vfs_init_root+0x78>
  1048f2:	83 ec 0c             	sub    $0xc,%esp
  1048f5:	68 10 01 00 00       	push   $0x110
  1048fa:	e8 6f ed ff ff       	call   10366e <malloc>
  1048ff:	83 c4 10             	add    $0x10,%esp
  104902:	a3 4c 85 12 00       	mov    %eax,0x12854c
  104907:	a1 4c 85 12 00       	mov    0x12854c,%eax
  10490c:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  104913:	00 00 00 
  104916:	a1 4c 85 12 00       	mov    0x12854c,%eax
  10491b:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  104922:	00 00 00 
  104925:	a1 4c 85 12 00       	mov    0x12854c,%eax
  10492a:	83 ec 04             	sub    $0x4,%esp
  10492d:	6a 02                	push   $0x2
  10492f:	68 ca 78 10 00       	push   $0x1078ca
  104934:	50                   	push   %eax
  104935:	e8 fc ef ff ff       	call   103936 <memcpy>
  10493a:	83 c4 10             	add    $0x10,%esp
  10493d:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104942:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  104949:	00 00 00 
  10494c:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104951:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  104958:	00 00 00 
  10495b:	c9                   	leave  
  10495c:	c3                   	ret    

0010495d <vfs_debug_ls>:
  10495d:	55                   	push   %ebp
  10495e:	89 e5                	mov    %esp,%ebp
  104960:	83 ec 18             	sub    $0x18,%esp
  104963:	83 ec 0c             	sub    $0xc,%esp
  104966:	ff 75 08             	pushl  0x8(%ebp)
  104969:	e8 20 f6 ff ff       	call   103f8e <vfs_get_node>
  10496e:	83 c4 10             	add    $0x10,%esp
  104971:	a3 58 85 12 00       	mov    %eax,0x128558
  104976:	a1 58 85 12 00       	mov    0x128558,%eax
  10497b:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104981:	a3 58 85 12 00       	mov    %eax,0x128558
  104986:	eb 6a                	jmp    1049f2 <vfs_debug_ls+0x95>
  104988:	c7 45 f4 cc 78 10 00 	movl   $0x1078cc,-0xc(%ebp)
  10498f:	a1 58 85 12 00       	mov    0x128558,%eax
  104994:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  10499a:	85 c0                	test   %eax,%eax
  10499c:	75 07                	jne    1049a5 <vfs_debug_ls+0x48>
  10499e:	c7 45 f4 d0 78 10 00 	movl   $0x1078d0,-0xc(%ebp)
  1049a5:	a1 58 85 12 00       	mov    0x128558,%eax
  1049aa:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  1049b0:	83 f8 01             	cmp    $0x1,%eax
  1049b3:	75 14                	jne    1049c9 <vfs_debug_ls+0x6c>
  1049b5:	a1 58 85 12 00       	mov    0x128558,%eax
  1049ba:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1049c0:	8b 40 04             	mov    0x4(%eax),%eax
  1049c3:	8b 40 18             	mov    0x18(%eax),%eax
  1049c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1049c9:	a1 58 85 12 00       	mov    0x128558,%eax
  1049ce:	ff 75 f4             	pushl  -0xc(%ebp)
  1049d1:	50                   	push   %eax
  1049d2:	ff 75 08             	pushl  0x8(%ebp)
  1049d5:	68 d4 78 10 00       	push   $0x1078d4
  1049da:	e8 8e bb ff ff       	call   10056d <kprintf>
  1049df:	83 c4 10             	add    $0x10,%esp
  1049e2:	a1 58 85 12 00       	mov    0x128558,%eax
  1049e7:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  1049ed:	a3 58 85 12 00       	mov    %eax,0x128558
  1049f2:	a1 58 85 12 00       	mov    0x128558,%eax
  1049f7:	85 c0                	test   %eax,%eax
  1049f9:	75 8d                	jne    104988 <vfs_debug_ls+0x2b>
  1049fb:	c9                   	leave  
  1049fc:	c3                   	ret    
  1049fd:	00 00                	add    %al,(%eax)
	...

00104a00 <vmm_create_vpdraw>:
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
    if(in_cod()) {
  104a00:	55                   	push   %ebp
  104a01:	89 e5                	mov    %esp,%ebp
  104a03:	53                   	push   %ebx
  104a04:	83 ec 34             	sub    $0x34,%esp
        goto doKPutc;
  104a07:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    }
  104a0e:	83 ec 0c             	sub    $0xc,%esp
  104a11:	8d 45 dc             	lea    -0x24(%ebp),%eax
  104a14:	50                   	push   %eax
  104a15:	e8 92 07 00 00       	call   1051ac <vmm_alloc>
  104a1a:	83 c4 10             	add    $0x10,%esp
  104a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if(get_current_task() != 0) {
  104a20:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        if(get_current_task()->stdout != 0) {
  104a27:	83 ec 0c             	sub    $0xc,%esp
  104a2a:	8d 45 d8             	lea    -0x28(%ebp),%eax
  104a2d:	50                   	push   %eax
  104a2e:	e8 79 07 00 00       	call   1051ac <vmm_alloc>
  104a33:	83 c4 10             	add    $0x10,%esp
  104a36:	89 c2                	mov    %eax,%edx
  104a38:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104a3b:	89 10                	mov    %edx,(%eax)
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  104a3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104a41:	74 08                	je     104a4b <vmm_create_vpdraw+0x4b>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  104a43:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104a46:	8b 45 08             	mov    0x8(%ebp),%eax
  104a49:	89 10                	mov    %edx,(%eax)
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

  104a4b:	83 ec 0c             	sub    $0xc,%esp
  104a4e:	6a 00                	push   $0x0
  104a50:	e8 57 07 00 00       	call   1051ac <vmm_alloc>
  104a55:	83 c4 10             	add    $0x10,%esp
  104a58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            return;
        }
    }
  104a5b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  104a62:	e9 f9 00 00 00       	jmp    104b60 <vmm_create_vpdraw+0x160>

  104a67:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104a6a:	c1 e0 02             	shl    $0x2,%eax
  104a6d:	89 c3                	mov    %eax,%ebx
  104a6f:	03 5d e4             	add    -0x1c(%ebp),%ebx
  104a72:	83 ec 0c             	sub    $0xc,%esp
  104a75:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  104a78:	50                   	push   %eax
  104a79:	e8 2e 07 00 00       	call   1051ac <vmm_alloc>
  104a7e:	83 c4 10             	add    $0x10,%esp
  104a81:	89 03                	mov    %eax,(%ebx)
    if(ramfs_vga_writers()) {
        return;
  104a83:	83 7d e8 7f          	cmpl   $0x7f,-0x18(%ebp)
  104a87:	77 48                	ja     104ad1 <vmm_create_vpdraw+0xd1>
    }
  104a89:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104a8c:	c1 e0 02             	shl    $0x2,%eax
  104a8f:	03 45 e4             	add    -0x1c(%ebp),%eax
  104a92:	8b 00                	mov    (%eax),%eax
  104a94:	83 ec 0c             	sub    $0xc,%esp
  104a97:	50                   	push   %eax
  104a98:	e8 18 05 00 00       	call   104fb5 <vmm_free>
  104a9d:	83 c4 10             	add    $0x10,%esp

  104aa0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104aa3:	8b 14 85 e0 87 1c 00 	mov    0x1c87e0(,%eax,4),%edx
  104aaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104aad:	c1 e0 02             	shl    $0x2,%eax
  104ab0:	03 45 e4             	add    -0x1c(%ebp),%eax
  104ab3:	8b 00                	mov    (%eax),%eax
  104ab5:	83 ec 04             	sub    $0x4,%esp
  104ab8:	6a 00                	push   $0x0
  104aba:	52                   	push   %edx
  104abb:	50                   	push   %eax
  104abc:	e8 9f 04 00 00       	call   104f60 <map_address_active>
  104ac1:	83 c4 10             	add    $0x10,%esp
    doKPutc:
  104ac4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104ac7:	8b 04 85 e0 87 1c 00 	mov    0x1c87e0(,%eax,4),%eax
  104ace:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    if ((c == '\n') || (x > 79)) {
        x = 0;
  104ad1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104ad4:	8b 00                	mov    (%eax),%eax
  104ad6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104ad9:	c1 e2 02             	shl    $0x2,%edx
  104adc:	01 d0                	add    %edx,%eax
  104ade:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  104ae1:	83 ca 07             	or     $0x7,%edx
  104ae4:	89 10                	mov    %edx,(%eax)
        y++;
    }
  104ae6:	83 7d e8 7f          	cmpl   $0x7f,-0x18(%ebp)
  104aea:	76 71                	jbe    104b5d <vmm_create_vpdraw+0x15d>

  104aec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  104af3:	eb 5f                	jmp    104b54 <vmm_create_vpdraw+0x154>
    if (c == '\n') {
  104af5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104af8:	89 c2                	mov    %eax,%edx
  104afa:	c1 e2 16             	shl    $0x16,%edx
  104afd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b00:	c1 e0 0c             	shl    $0xc,%eax
  104b03:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104b06:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return;
    }
  104b09:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104b13:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104b16:	c1 e0 02             	shl    $0x2,%eax
  104b19:	03 45 e4             	add    -0x1c(%ebp),%eax
  104b1c:	8b 00                	mov    (%eax),%eax
  104b1e:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104b21:	89 c1                	mov    %eax,%ecx
  104b23:	81 7d f4 00 10 40 01 	cmpl   $0x1401000,-0xc(%ebp)
  104b2a:	76 07                	jbe    104b33 <vmm_create_vpdraw+0x133>
  104b2c:	ba 00 02 00 00       	mov    $0x200,%edx
  104b31:	eb 05                	jmp    104b38 <vmm_create_vpdraw+0x138>
  104b33:	ba 00 00 00 00       	mov    $0x0,%edx
  104b38:	81 7d f4 00 10 40 01 	cmpl   $0x1401000,-0xc(%ebp)
  104b3f:	76 07                	jbe    104b48 <vmm_create_vpdraw+0x148>
  104b41:	b8 04 00 00 00       	mov    $0x4,%eax
  104b46:	eb 05                	jmp    104b4d <vmm_create_vpdraw+0x14d>
  104b48:	b8 00 00 00 00       	mov    $0x0,%eax
  104b4d:	09 d0                	or     %edx,%eax
  104b4f:	89 01                	mov    %eax,(%ecx)

    if ((c == '\n') || (x > 79)) {
        x = 0;
        y++;
    }

  104b51:	ff 45 ec             	incl   -0x14(%ebp)
  104b54:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
  104b5b:	76 98                	jbe    104af5 <vmm_create_vpdraw+0xf5>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);

            return;
        }
    }
  104b5d:	ff 45 e8             	incl   -0x18(%ebp)
  104b60:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  104b67:	0f 86 fa fe ff ff    	jbe    104a67 <vmm_create_vpdraw+0x67>
    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

  104b6d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  104b74:	eb 3d                	jmp    104bb3 <vmm_create_vpdraw+0x1b3>
        for (; i < 2 * 25 * 80; i++) {
  104b76:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104b79:	8b 00                	mov    (%eax),%eax
  104b7b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104b7e:	c1 e2 02             	shl    $0x2,%edx
  104b81:	01 d0                	add    %edx,%eax
  104b83:	8b 00                	mov    (%eax),%eax
  104b85:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104b8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            video[i] = 0;
  104b8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
        }
  104b90:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104b93:	89 d1                	mov    %edx,%ecx
  104b95:	c1 e1 0c             	shl    $0xc,%ecx
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
  104b98:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  104b9e:	8d 14 11             	lea    (%ecx,%edx,1),%edx
  104ba1:	6a 00                	push   $0x0
  104ba3:	50                   	push   %eax
  104ba4:	52                   	push   %edx
  104ba5:	ff 75 e4             	pushl  -0x1c(%ebp)
  104ba8:	e8 2f 03 00 00       	call   104edc <map_address_context>
  104bad:	83 c4 10             	add    $0x10,%esp
    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

  104bb0:	ff 45 e8             	incl   -0x18(%ebp)
  104bb3:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  104bba:	76 ba                	jbe    104b76 <vmm_create_vpdraw+0x176>
        for (; i < 2 * 25 * 80; i++) {
            video[i] = 0;
        }
        y--;
    }

  104bbc:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104bbf:	a1 00 61 10 00       	mov    0x106100,%eax
  104bc4:	6a 00                	push   $0x0
  104bc6:	52                   	push   %edx
  104bc7:	50                   	push   %eax
  104bc8:	ff 75 e4             	pushl  -0x1c(%ebp)
  104bcb:	e8 0c 03 00 00       	call   104edc <map_address_context>
  104bd0:	83 c4 10             	add    $0x10,%esp
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

  104bd3:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
  104bda:	eb 1a                	jmp    104bf6 <vmm_create_vpdraw+0x1f6>
    x++;
  104bdc:	6a 00                	push   $0x0
  104bde:	ff 75 e8             	pushl  -0x18(%ebp)
  104be1:	ff 75 e8             	pushl  -0x18(%ebp)
  104be4:	ff 75 e4             	pushl  -0x1c(%ebp)
  104be7:	e8 f0 02 00 00       	call   104edc <map_address_context>
  104bec:	83 c4 10             	add    $0x10,%esp
        y--;
    }

    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = color;

  104bef:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
  104bf6:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  104bfb:	39 45 e8             	cmp    %eax,-0x18(%ebp)
  104bfe:	72 dc                	jb     104bdc <vmm_create_vpdraw+0x1dc>
    x++;
    kprintf_res++;
}

  104c00:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104c03:	8b 00                	mov    (%eax),%eax
  104c05:	89 45 f0             	mov    %eax,-0x10(%ebp)
static void kputs(const char* s) {
  104c08:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104c0b:	89 c2                	mov    %eax,%edx
  104c0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104c10:	89 10                	mov    %edx,(%eax)
    while (*s) {
        kputc(*s++);
  104c12:	83 ec 0c             	sub    $0xc,%esp
  104c15:	ff 75 f0             	pushl  -0x10(%ebp)
  104c18:	e8 18 04 00 00       	call   105035 <vmm_unmap>
  104c1d:	83 c4 10             	add    $0x10,%esp
    }
  104c20:	83 ec 0c             	sub    $0xc,%esp
  104c23:	ff 75 e0             	pushl  -0x20(%ebp)
  104c26:	e8 0a 04 00 00       	call   105035 <vmm_unmap>
  104c2b:	83 c4 10             	add    $0x10,%esp
}

  104c2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
static void kputn(unsigned long x, int base) {
  104c31:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104c34:	c9                   	leave  
  104c35:	c3                   	ret    

00104c36 <vmm_free_pdptr>:
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  104c36:	55                   	push   %ebp
  104c37:	89 e5                	mov    %esp,%ebp
  104c39:	83 ec 18             	sub    $0x18,%esp
    char* p;
  104c3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104c43:	eb 1a                	jmp    104c5f <vmm_free_pdptr+0x29>

  104c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104c48:	c1 e0 02             	shl    $0x2,%eax
  104c4b:	03 45 08             	add    0x8(%ebp),%eax
  104c4e:	8b 00                	mov    (%eax),%eax
  104c50:	83 ec 0c             	sub    $0xc,%esp
  104c53:	50                   	push   %eax
  104c54:	e8 dc 03 00 00       	call   105035 <vmm_unmap>
  104c59:	83 c4 10             	add    $0x10,%esp
}

static void kputn(unsigned long x, int base) {
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;
  104c5c:	ff 45 f4             	incl   -0xc(%ebp)
  104c5f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104c66:	76 dd                	jbe    104c45 <vmm_free_pdptr+0xf>

    if (base > 36) {
        return;
    }
  104c68:	83 ec 0c             	sub    $0xc,%esp
  104c6b:	ff 75 08             	pushl  0x8(%ebp)
  104c6e:	e8 c2 03 00 00       	call   105035 <vmm_unmap>
  104c73:	83 c4 10             	add    $0x10,%esp

  104c76:	c9                   	leave  
  104c77:	c3                   	ret    

00104c78 <vmm_get_current_pagedir>:
    p = buf + 64;
    *p = '\0';
  104c78:	55                   	push   %ebp
  104c79:	89 e5                	mov    %esp,%ebp
    do {
  104c7b:	a1 64 85 12 00       	mov    0x128564,%eax
        *--p = digits[x % base];
  104c80:	5d                   	pop    %ebp
  104c81:	c3                   	ret    

00104c82 <vmm_create_pagedir>:
        x /= base;
    } while (x);
  104c82:	55                   	push   %ebp
  104c83:	89 e5                	mov    %esp,%ebp
  104c85:	83 ec 18             	sub    $0x18,%esp
    kputs(p);
}
  104c88:	83 ec 0c             	sub    $0xc,%esp
  104c8b:	8d 45 f0             	lea    -0x10(%ebp),%eax
  104c8e:	50                   	push   %eax
  104c8f:	e8 6c fd ff ff       	call   104a00 <vmm_create_vpdraw>
  104c94:	83 c4 10             	add    $0x10,%esp
  104c97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  104c9a:	83 ec 0c             	sub    $0xc,%esp
  104c9d:	ff 75 f4             	pushl  -0xc(%ebp)
  104ca0:	e8 91 ff ff ff       	call   104c36 <vmm_free_pdptr>
  104ca5:	83 c4 10             	add    $0x10,%esp
void clrscr(void) {
    int i;
  104ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
    for (i = 0; i < 2 * 25 * 80; i++) {
  104cab:	c9                   	leave  
  104cac:	c3                   	ret    

00104cad <vmm_free_current_pagetables>:
        video[i] = 0;
    }
  104cad:	55                   	push   %ebp
  104cae:	89 e5                	mov    %esp,%ebp
  104cb0:	83 ec 18             	sub    $0x18,%esp

  104cb3:	83 ec 0c             	sub    $0xc,%esp
  104cb6:	6a 00                	push   $0x0
  104cb8:	e8 ef 04 00 00       	call   1051ac <vmm_alloc>
  104cbd:	83 c4 10             	add    $0x10,%esp
  104cc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    color = 0x07;
  104cc3:	83 ec 0c             	sub    $0xc,%esp
  104cc6:	6a 00                	push   $0x0
  104cc8:	e8 df 04 00 00       	call   1051ac <vmm_alloc>
  104ccd:	83 c4 10             	add    $0x10,%esp
  104cd0:	89 45 ec             	mov    %eax,-0x14(%ebp)

  104cd3:	83 ec 0c             	sub    $0xc,%esp
  104cd6:	ff 75 e8             	pushl  -0x18(%ebp)
  104cd9:	e8 d7 02 00 00       	call   104fb5 <vmm_free>
  104cde:	83 c4 10             	add    $0x10,%esp
    x = y = 0;
  104ce1:	83 ec 0c             	sub    $0xc,%esp
  104ce4:	ff 75 ec             	pushl  -0x14(%ebp)
  104ce7:	e8 c9 02 00 00       	call   104fb5 <vmm_free>
  104cec:	83 c4 10             	add    $0x10,%esp
}

  104cef:	e8 75 de ff ff       	call   102b69 <get_current_task>
  104cf4:	8b 50 14             	mov    0x14(%eax),%edx
  104cf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104cfa:	83 ec 04             	sub    $0x4,%esp
  104cfd:	6a 00                	push   $0x0
  104cff:	52                   	push   %edx
  104d00:	50                   	push   %eax
  104d01:	e8 5a 02 00 00       	call   104f60 <map_address_active>
  104d06:	83 c4 10             	add    $0x10,%esp
void setclr(char clr) {
    color = clr;
  104d09:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
  104d10:	e9 99 00 00 00       	jmp    104dae <vmm_free_current_pagetables+0x101>
}
  104d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d18:	c1 e0 02             	shl    $0x2,%eax
  104d1b:	03 45 e8             	add    -0x18(%ebp),%eax
  104d1e:	8b 00                	mov    (%eax),%eax
  104d20:	89 c2                	mov    %eax,%edx
  104d22:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  104d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104d2b:	83 ec 04             	sub    $0x4,%esp
  104d2e:	6a 00                	push   $0x0
  104d30:	52                   	push   %edx
  104d31:	50                   	push   %eax
  104d32:	e8 29 02 00 00       	call   104f60 <map_address_active>
  104d37:	83 c4 10             	add    $0x10,%esp

int kprintf(const char* fmt, ...) {
  104d3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104d41:	eb 31                	jmp    104d74 <vmm_free_current_pagetables+0xc7>
    va_list ap;
  104d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d46:	c1 e0 02             	shl    $0x2,%eax
  104d49:	03 45 ec             	add    -0x14(%ebp),%eax
  104d4c:	8b 00                	mov    (%eax),%eax
  104d4e:	83 e0 01             	and    $0x1,%eax
  104d51:	84 c0                	test   %al,%al
  104d53:	74 1c                	je     104d71 <vmm_free_current_pagetables+0xc4>
    const char* s;
    unsigned long n;
    char c;

  104d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d58:	c1 e0 02             	shl    $0x2,%eax
  104d5b:	03 45 ec             	add    -0x14(%ebp),%eax
  104d5e:	8b 00                	mov    (%eax),%eax
  104d60:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  104d65:	83 ec 0c             	sub    $0xc,%esp
  104d68:	50                   	push   %eax
  104d69:	e8 6c ce ff ff       	call   101bda <pmm_free>
  104d6e:	83 c4 10             	add    $0x10,%esp

void setclr(char clr) {
    color = clr;
}

int kprintf(const char* fmt, ...) {
  104d71:	ff 45 f4             	incl   -0xc(%ebp)
  104d74:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104d7b:	76 c6                	jbe    104d43 <vmm_free_current_pagetables+0x96>
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
        if (*fmt == '%') {
  104d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d80:	c1 e0 02             	shl    $0x2,%eax
  104d83:	03 45 e8             	add    -0x18(%ebp),%eax
  104d86:	8b 00                	mov    (%eax),%eax
  104d88:	83 e0 01             	and    $0x1,%eax
  104d8b:	84 c0                	test   %al,%al
  104d8d:	74 1c                	je     104dab <vmm_free_current_pagetables+0xfe>
            fmt++;
  104d8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d92:	c1 e0 02             	shl    $0x2,%eax
  104d95:	03 45 e8             	add    -0x18(%ebp),%eax
  104d98:	8b 00                	mov    (%eax),%eax
  104d9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104d9f:	83 ec 0c             	sub    $0xc,%esp
  104da2:	50                   	push   %eax
  104da3:	e8 32 ce ff ff       	call   101bda <pmm_free>
  104da8:	83 c4 10             	add    $0x10,%esp

    x = y = 0;
}

void setclr(char clr) {
    color = clr;
  104dab:	ff 45 f0             	incl   -0x10(%ebp)
  104dae:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  104db5:	0f 86 5a ff ff ff    	jbe    104d15 <vmm_free_current_pagetables+0x68>
    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            switch (*fmt) {
            case 's':
                s = va_arg(ap, char*);
  104dbb:	e8 a9 dd ff ff       	call   102b69 <get_current_task>
  104dc0:	8b 40 14             	mov    0x14(%eax),%eax
  104dc3:	83 ec 0c             	sub    $0xc,%esp
  104dc6:	50                   	push   %eax
  104dc7:	e8 0e ce ff ff       	call   101bda <pmm_free>
  104dcc:	83 c4 10             	add    $0x10,%esp
                kputs(s);
  104dcf:	c9                   	leave  
  104dd0:	c3                   	ret    

00104dd1 <vmm_resolve>:
                break;
            case 'd':
  104dd1:	55                   	push   %ebp
  104dd2:	89 e5                	mov    %esp,%ebp
            case 'u':
  104dd4:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  104dd9:	8b 55 08             	mov    0x8(%ebp),%edx
  104ddc:	c1 ea 0c             	shr    $0xc,%edx
  104ddf:	c1 e2 02             	shl    $0x2,%edx
  104de2:	01 d0                	add    %edx,%eax
  104de4:	8b 00                	mov    (%eax),%eax
  104de6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
                n = va_arg(ap, unsigned long int);
  104deb:	5d                   	pop    %ebp
  104dec:	c3                   	ret    

00104ded <vmm_resolve_ppd>:
                kputn(n, 10);
                break;
  104ded:	55                   	push   %ebp
  104dee:	89 e5                	mov    %esp,%ebp
  104df0:	83 ec 28             	sub    $0x28,%esp
            case 'x':
  104df3:	8b 45 0c             	mov    0xc(%ebp),%eax
  104df6:	c1 e8 16             	shr    $0x16,%eax
  104df9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            case 'p':
  104dfc:	8b 45 0c             	mov    0xc(%ebp),%eax
  104dff:	c1 e8 0c             	shr    $0xc,%eax
  104e02:	25 ff 03 00 00       	and    $0x3ff,%eax
  104e07:	89 45 e8             	mov    %eax,-0x18(%ebp)
                n = va_arg(ap, unsigned long int);
                kputn(n, 16);
  104e0a:	83 ec 0c             	sub    $0xc,%esp
  104e0d:	6a 00                	push   $0x0
  104e0f:	e8 98 03 00 00       	call   1051ac <vmm_alloc>
  104e14:	83 c4 10             	add    $0x10,%esp
  104e17:	89 45 ec             	mov    %eax,-0x14(%ebp)
                break;
  104e1a:	83 ec 0c             	sub    $0xc,%esp
  104e1d:	ff 75 ec             	pushl  -0x14(%ebp)
  104e20:	e8 90 01 00 00       	call   104fb5 <vmm_free>
  104e25:	83 c4 10             	add    $0x10,%esp
            case 'c':
                c = va_arg(ap, int);
  104e28:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e2b:	83 ec 04             	sub    $0x4,%esp
  104e2e:	6a 00                	push   $0x0
  104e30:	ff 75 08             	pushl  0x8(%ebp)
  104e33:	50                   	push   %eax
  104e34:	e8 27 01 00 00       	call   104f60 <map_address_active>
  104e39:	83 c4 10             	add    $0x10,%esp
                kputc(c);
  104e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104e3f:	c1 e0 02             	shl    $0x2,%eax
  104e42:	03 45 ec             	add    -0x14(%ebp),%eax
  104e45:	8b 00                	mov    (%eax),%eax
  104e47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104e4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                break;
            case '%':
  104e4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e52:	83 ec 04             	sub    $0x4,%esp
  104e55:	6a 00                	push   $0x0
  104e57:	ff 75 f0             	pushl  -0x10(%ebp)
  104e5a:	50                   	push   %eax
  104e5b:	e8 00 01 00 00       	call   104f60 <map_address_active>
  104e60:	83 c4 10             	add    $0x10,%esp
                kputc('%');
  104e63:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104e66:	c1 e0 02             	shl    $0x2,%eax
  104e69:	03 45 ec             	add    -0x14(%ebp),%eax
  104e6c:	8b 00                	mov    (%eax),%eax
  104e6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104e73:	89 45 f4             	mov    %eax,-0xc(%ebp)
                break;
            case '\0':
  104e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
                goto out;
  104e7e:	c9                   	leave  
  104e7f:	c3                   	ret    

00104e80 <vmm_map_range>:
            default:
                kputc('%');
  104e80:	55                   	push   %ebp
  104e81:	89 e5                	mov    %esp,%ebp
  104e83:	83 ec 18             	sub    $0x18,%esp
                kputc(*fmt);
  104e86:	8b 45 08             	mov    0x8(%ebp),%eax
  104e89:	25 ff 0f 00 00       	and    $0xfff,%eax
  104e8e:	85 c0                	test   %eax,%eax
  104e90:	75 44                	jne    104ed6 <vmm_map_range+0x56>
                break;
            }
  104e92:	8b 45 0c             	mov    0xc(%ebp),%eax
  104e95:	25 ff 0f 00 00       	and    $0xfff,%eax
  104e9a:	85 c0                	test   %eax,%eax
  104e9c:	75 3b                	jne    104ed9 <vmm_map_range+0x59>
        } else {
            kputc(*fmt);
        }
  104e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104ea5:	eb 25                	jmp    104ecc <vmm_map_range+0x4c>

  104ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
  104eaa:	89 c2                	mov    %eax,%edx
  104eac:	03 55 f4             	add    -0xc(%ebp),%edx
  104eaf:	8b 45 08             	mov    0x8(%ebp),%eax
  104eb2:	03 45 f4             	add    -0xc(%ebp),%eax
  104eb5:	83 ec 04             	sub    $0x4,%esp
  104eb8:	ff 75 14             	pushl  0x14(%ebp)
  104ebb:	52                   	push   %edx
  104ebc:	50                   	push   %eax
  104ebd:	e8 9e 00 00 00       	call   104f60 <map_address_active>
  104ec2:	83 c4 10             	add    $0x10,%esp
                kputc(*fmt);
                break;
            }
        } else {
            kputc(*fmt);
        }
  104ec5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  104ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ecf:	3b 45 10             	cmp    0x10(%ebp),%eax
  104ed2:	72 d3                	jb     104ea7 <vmm_map_range+0x27>
  104ed4:	eb 04                	jmp    104eda <vmm_map_range+0x5a>
            case '\0':
                goto out;
            default:
                kputc('%');
                kputc(*fmt);
                break;
  104ed6:	90                   	nop    
  104ed7:	eb 01                	jmp    104eda <vmm_map_range+0x5a>
            }
        } else {
  104ed9:	90                   	nop    
            kputc(*fmt);
        }

        fmt++;
    }
  104eda:	c9                   	leave  
  104edb:	c3                   	ret    

00104edc <map_address_context>:

    out:
    va_end(ap);
  104edc:	55                   	push   %ebp
  104edd:	89 e5                	mov    %esp,%ebp
  104edf:	53                   	push   %ebx
  104ee0:	83 ec 10             	sub    $0x10,%esp

  104ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
  104ee6:	c1 e8 16             	shr    $0x16,%eax
  104ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return kprintf_res;
  104eec:	8b 45 0c             	mov    0xc(%ebp),%eax
  104eef:	c1 e8 0c             	shr    $0xc,%eax
  104ef2:	25 ff 03 00 00       	and    $0x3ff,%eax
  104ef7:	89 45 f8             	mov    %eax,-0x8(%ebp)
}

  104efa:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104efd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f07:	c1 e0 02             	shl    $0x2,%eax
  104f0a:	03 45 08             	add    0x8(%ebp),%eax
  104f0d:	8b 00                	mov    (%eax),%eax
  104f0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104f14:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104f17:	8b 55 10             	mov    0x10(%ebp),%edx
  104f1a:	89 d1                	mov    %edx,%ecx
  104f1c:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  104f22:	8b 55 14             	mov    0x14(%ebp),%edx
  104f25:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
    out:
    va_end(ap);

    return kprintf_res;
}

  104f2b:	09 d1                	or     %edx,%ecx
  104f2d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104f30:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
  104f37:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104f3a:	c1 e2 02             	shl    $0x2,%edx
  104f3d:	03 55 08             	add    0x8(%ebp),%edx
  104f40:	8b 12                	mov    (%edx),%edx
  104f42:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  104f48:	8d 14 13             	lea    (%ebx,%edx,1),%edx
  104f4b:	8b 12                	mov    (%edx),%edx
  104f4d:	81 e2 04 02 00 00    	and    $0x204,%edx
    out:
    va_end(ap);

    return kprintf_res;
}

  104f53:	09 ca                	or     %ecx,%edx
  104f55:	83 ca 03             	or     $0x3,%edx
  104f58:	89 10                	mov    %edx,(%eax)
  104f5a:	83 c4 10             	add    $0x10,%esp
  104f5d:	5b                   	pop    %ebx
  104f5e:	5d                   	pop    %ebp
  104f5f:	c3                   	ret    

00104f60 <map_address_active>:
  104f60:	55                   	push   %ebp
  104f61:	89 e5                	mov    %esp,%ebp
  104f63:	53                   	push   %ebx
  104f64:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  104f69:	8b 55 08             	mov    0x8(%ebp),%edx
  104f6c:	c1 ea 0c             	shr    $0xc,%edx
  104f6f:	c1 e2 02             	shl    $0x2,%edx
  104f72:	01 d0                	add    %edx,%eax
  104f74:	8b 55 0c             	mov    0xc(%ebp),%edx
  104f77:	89 d1                	mov    %edx,%ecx
  104f79:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  104f7f:	8b 55 10             	mov    0x10(%ebp),%edx
  104f82:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  104f88:	89 cb                	mov    %ecx,%ebx
  104f8a:	09 d3                	or     %edx,%ebx
  104f8c:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  104f92:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104f95:	c1 e9 0c             	shr    $0xc,%ecx
  104f98:	c1 e1 02             	shl    $0x2,%ecx
  104f9b:	01 ca                	add    %ecx,%edx
  104f9d:	8b 12                	mov    (%edx),%edx
  104f9f:	81 e2 04 02 00 00    	and    $0x204,%edx
  104fa5:	09 da                	or     %ebx,%edx
  104fa7:	83 ca 03             	or     $0x3,%edx
  104faa:	89 10                	mov    %edx,(%eax)
  104fac:	8b 45 08             	mov    0x8(%ebp),%eax
  104faf:	0f 01 38             	invlpg (%eax)
  104fb2:	5b                   	pop    %ebx
  104fb3:	5d                   	pop    %ebp
  104fb4:	c3                   	ret    

00104fb5 <vmm_free>:
  104fb5:	55                   	push   %ebp
  104fb6:	89 e5                	mov    %esp,%ebp
  104fb8:	83 ec 18             	sub    $0x18,%esp
  104fbb:	8b 45 08             	mov    0x8(%ebp),%eax
  104fbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104fc1:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  104fc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104fc9:	c1 ea 0c             	shr    $0xc,%edx
  104fcc:	c1 e2 02             	shl    $0x2,%edx
  104fcf:	01 d0                	add    %edx,%eax
  104fd1:	8b 00                	mov    (%eax),%eax
  104fd3:	25 01 02 00 00       	and    $0x201,%eax
  104fd8:	3d 01 02 00 00       	cmp    $0x201,%eax
  104fdd:	75 54                	jne    105033 <vmm_free+0x7e>
  104fdf:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  104fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104fe7:	c1 ea 0c             	shr    $0xc,%edx
  104fea:	c1 e2 02             	shl    $0x2,%edx
  104fed:	01 d0                	add    %edx,%eax
  104fef:	8b 00                	mov    (%eax),%eax
  104ff1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104ff6:	83 ec 0c             	sub    $0xc,%esp
  104ff9:	50                   	push   %eax
  104ffa:	e8 db cb ff ff       	call   101bda <pmm_free>
  104fff:	83 c4 10             	add    $0x10,%esp
  105002:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  105007:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10500a:	c1 ea 0c             	shr    $0xc,%edx
  10500d:	c1 e2 02             	shl    $0x2,%edx
  105010:	01 d0                	add    %edx,%eax
  105012:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  105018:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10501b:	c1 e9 0c             	shr    $0xc,%ecx
  10501e:	c1 e1 02             	shl    $0x2,%ecx
  105021:	01 ca                	add    %ecx,%edx
  105023:	8b 12                	mov    (%edx),%edx
  105025:	83 e2 04             	and    $0x4,%edx
  105028:	80 ce 02             	or     $0x2,%dh
  10502b:	89 10                	mov    %edx,(%eax)
  10502d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105030:	0f 01 38             	invlpg (%eax)
  105033:	c9                   	leave  
  105034:	c3                   	ret    

00105035 <vmm_unmap>:
  105035:	55                   	push   %ebp
  105036:	89 e5                	mov    %esp,%ebp
  105038:	83 ec 10             	sub    $0x10,%esp
  10503b:	8b 45 08             	mov    0x8(%ebp),%eax
  10503e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105041:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  105046:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105049:	c1 ea 0c             	shr    $0xc,%edx
  10504c:	c1 e2 02             	shl    $0x2,%edx
  10504f:	01 d0                	add    %edx,%eax
  105051:	8b 00                	mov    (%eax),%eax
  105053:	25 01 02 00 00       	and    $0x201,%eax
  105058:	3d 01 02 00 00       	cmp    $0x201,%eax
  10505d:	75 31                	jne    105090 <vmm_unmap+0x5b>
  10505f:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  105064:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105067:	c1 ea 0c             	shr    $0xc,%edx
  10506a:	c1 e2 02             	shl    $0x2,%edx
  10506d:	01 d0                	add    %edx,%eax
  10506f:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  105075:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105078:	c1 e9 0c             	shr    $0xc,%ecx
  10507b:	c1 e1 02             	shl    $0x2,%ecx
  10507e:	01 ca                	add    %ecx,%edx
  105080:	8b 12                	mov    (%edx),%edx
  105082:	83 e2 04             	and    $0x4,%edx
  105085:	80 ce 02             	or     $0x2,%dh
  105088:	89 10                	mov    %edx,(%eax)
  10508a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10508d:	0f 01 38             	invlpg (%eax)
  105090:	c9                   	leave  
  105091:	c3                   	ret    

00105092 <vmm_alloc_in_range>:
  105092:	55                   	push   %ebp
  105093:	89 e5                	mov    %esp,%ebp
  105095:	83 ec 18             	sub    $0x18,%esp
  105098:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10509f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1050a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1050ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1050b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1050b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1050b8:	eb 48                	jmp    105102 <vmm_alloc_in_range+0x70>
  1050ba:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1050bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1050c2:	c1 ea 0c             	shr    $0xc,%edx
  1050c5:	c1 e2 02             	shl    $0x2,%edx
  1050c8:	01 d0                	add    %edx,%eax
  1050ca:	8b 00                	mov    (%eax),%eax
  1050cc:	25 01 02 00 00       	and    $0x201,%eax
  1050d1:	3d 00 02 00 00       	cmp    $0x200,%eax
  1050d6:	75 19                	jne    1050f1 <vmm_alloc_in_range+0x5f>
  1050d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1050dc:	75 06                	jne    1050e4 <vmm_alloc_in_range+0x52>
  1050de:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1050e4:	ff 45 f0             	incl   -0x10(%ebp)
  1050e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050ea:	3b 45 14             	cmp    0x14(%ebp),%eax
  1050ed:	72 0b                	jb     1050fa <vmm_alloc_in_range+0x68>
  1050ef:	eb 19                	jmp    10510a <vmm_alloc_in_range+0x78>
  1050f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1050f8:	eb 01                	jmp    1050fb <vmm_alloc_in_range+0x69>
  1050fa:	90                   	nop    
  1050fb:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
  105102:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105105:	3b 45 0c             	cmp    0xc(%ebp),%eax
  105108:	72 b0                	jb     1050ba <vmm_alloc_in_range+0x28>
  10510a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  105111:	eb 29                	jmp    10513c <vmm_alloc_in_range+0xaa>
  105113:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  105117:	75 05                	jne    10511e <vmm_alloc_in_range+0x8c>
  105119:	8b 45 10             	mov    0x10(%ebp),%eax
  10511c:	eb 05                	jmp    105123 <vmm_alloc_in_range+0x91>
  10511e:	b8 00 00 00 00       	mov    $0x0,%eax
  105123:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105126:	c1 e2 0c             	shl    $0xc,%edx
  105129:	03 55 e8             	add    -0x18(%ebp),%edx
  10512c:	83 ec 08             	sub    $0x8,%esp
  10512f:	50                   	push   %eax
  105130:	52                   	push   %edx
  105131:	e8 95 00 00 00       	call   1051cb <vmm_alloc_addr>
  105136:	83 c4 10             	add    $0x10,%esp
  105139:	ff 45 f4             	incl   -0xc(%ebp)
  10513c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105140:	0f 95 c0             	setne  %al
  105143:	ff 4d f0             	decl   -0x10(%ebp)
  105146:	84 c0                	test   %al,%al
  105148:	75 c9                	jne    105113 <vmm_alloc_in_range+0x81>
  10514a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10514d:	c9                   	leave  
  10514e:	c3                   	ret    

0010514f <vmm_alloc_ucont>:
  10514f:	55                   	push   %ebp
  105150:	89 e5                	mov    %esp,%ebp
  105152:	83 ec 08             	sub    $0x8,%esp
  105155:	ff 75 08             	pushl  0x8(%ebp)
  105158:	6a 00                	push   $0x0
  10515a:	68 00 f0 ff ff       	push   $0xfffff000
  10515f:	68 00 10 40 01       	push   $0x1401000
  105164:	e8 29 ff ff ff       	call   105092 <vmm_alloc_in_range>
  105169:	83 c4 10             	add    $0x10,%esp
  10516c:	c9                   	leave  
  10516d:	c3                   	ret    

0010516e <vmm_alloc_user>:
  10516e:	55                   	push   %ebp
  10516f:	89 e5                	mov    %esp,%ebp
  105171:	83 ec 08             	sub    $0x8,%esp
  105174:	6a 01                	push   $0x1
  105176:	ff 75 08             	pushl  0x8(%ebp)
  105179:	68 00 f0 ff ff       	push   $0xfffff000
  10517e:	68 00 10 40 01       	push   $0x1401000
  105183:	e8 0a ff ff ff       	call   105092 <vmm_alloc_in_range>
  105188:	83 c4 10             	add    $0x10,%esp
  10518b:	c9                   	leave  
  10518c:	c3                   	ret    

0010518d <vmm_alloc_cont>:
  10518d:	55                   	push   %ebp
  10518e:	89 e5                	mov    %esp,%ebp
  105190:	83 ec 08             	sub    $0x8,%esp
  105193:	ff 75 08             	pushl  0x8(%ebp)
  105196:	6a 00                	push   $0x0
  105198:	68 00 00 00 20       	push   $0x20000000
  10519d:	68 00 10 40 01       	push   $0x1401000
  1051a2:	e8 eb fe ff ff       	call   105092 <vmm_alloc_in_range>
  1051a7:	83 c4 10             	add    $0x10,%esp
  1051aa:	c9                   	leave  
  1051ab:	c3                   	ret    

001051ac <vmm_alloc>:
  1051ac:	55                   	push   %ebp
  1051ad:	89 e5                	mov    %esp,%ebp
  1051af:	83 ec 08             	sub    $0x8,%esp
  1051b2:	6a 01                	push   $0x1
  1051b4:	ff 75 08             	pushl  0x8(%ebp)
  1051b7:	68 00 00 00 20       	push   $0x20000000
  1051bc:	68 00 10 40 01       	push   $0x1401000
  1051c1:	e8 cc fe ff ff       	call   105092 <vmm_alloc_in_range>
  1051c6:	83 c4 10             	add    $0x10,%esp
  1051c9:	c9                   	leave  
  1051ca:	c3                   	ret    

001051cb <vmm_alloc_addr>:
  1051cb:	55                   	push   %ebp
  1051cc:	89 e5                	mov    %esp,%ebp
  1051ce:	83 ec 18             	sub    $0x18,%esp
  1051d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1051d5:	75 1c                	jne    1051f3 <vmm_alloc_addr+0x28>
  1051d7:	83 ec 04             	sub    $0x4,%esp
  1051da:	6a 00                	push   $0x0
  1051dc:	ff 75 08             	pushl  0x8(%ebp)
  1051df:	68 e4 78 10 00       	push   $0x1078e4
  1051e4:	e8 84 b3 ff ff       	call   10056d <kprintf>
  1051e9:	83 c4 10             	add    $0x10,%esp
  1051ec:	b8 00 00 00 00       	mov    $0x0,%eax
  1051f1:	eb 7b                	jmp    10526e <vmm_alloc_addr+0xa3>
  1051f3:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1051f8:	8b 55 08             	mov    0x8(%ebp),%edx
  1051fb:	c1 ea 0c             	shr    $0xc,%edx
  1051fe:	c1 e2 02             	shl    $0x2,%edx
  105201:	01 d0                	add    %edx,%eax
  105203:	8b 00                	mov    (%eax),%eax
  105205:	25 01 02 00 00       	and    $0x201,%eax
  10520a:	3d 00 02 00 00       	cmp    $0x200,%eax
  10520f:	74 2d                	je     10523e <vmm_alloc_addr+0x73>
  105211:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  105216:	8b 55 08             	mov    0x8(%ebp),%edx
  105219:	c1 ea 0c             	shr    $0xc,%edx
  10521c:	c1 e2 02             	shl    $0x2,%edx
  10521f:	01 d0                	add    %edx,%eax
  105221:	8b 00                	mov    (%eax),%eax
  105223:	83 ec 04             	sub    $0x4,%esp
  105226:	50                   	push   %eax
  105227:	ff 75 08             	pushl  0x8(%ebp)
  10522a:	68 e4 78 10 00       	push   $0x1078e4
  10522f:	e8 39 b3 ff ff       	call   10056d <kprintf>
  105234:	83 c4 10             	add    $0x10,%esp
  105237:	b8 00 00 00 00       	mov    $0x0,%eax
  10523c:	eb 30                	jmp    10526e <vmm_alloc_addr+0xa3>
  10523e:	e8 25 c8 ff ff       	call   101a68 <pmm_alloc>
  105243:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105246:	8b 45 08             	mov    0x8(%ebp),%eax
  105249:	83 ec 04             	sub    $0x4,%esp
  10524c:	68 04 02 00 00       	push   $0x204
  105251:	ff 75 f4             	pushl  -0xc(%ebp)
  105254:	50                   	push   %eax
  105255:	e8 06 fd ff ff       	call   104f60 <map_address_active>
  10525a:	83 c4 10             	add    $0x10,%esp
  10525d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  105261:	74 08                	je     10526b <vmm_alloc_addr+0xa0>
  105263:	8b 45 0c             	mov    0xc(%ebp),%eax
  105266:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105269:	89 10                	mov    %edx,(%eax)
  10526b:	8b 45 08             	mov    0x8(%ebp),%eax
  10526e:	c9                   	leave  
  10526f:	c3                   	ret    

00105270 <vmm_activate_pagedir>:
  105270:	55                   	push   %ebp
  105271:	89 e5                	mov    %esp,%ebp
  105273:	8b 45 08             	mov    0x8(%ebp),%eax
  105276:	a3 64 85 12 00       	mov    %eax,0x128564
  10527b:	8b 45 08             	mov    0x8(%ebp),%eax
  10527e:	0f 22 d8             	mov    %eax,%cr3
  105281:	5d                   	pop    %ebp
  105282:	c3                   	ret    

00105283 <vmm_init>:
  105283:	55                   	push   %ebp
  105284:	89 e5                	mov    %esp,%ebp
  105286:	53                   	push   %ebx
  105287:	83 ec 24             	sub    $0x24,%esp
  10528a:	e8 d9 c7 ff ff       	call   101a68 <pmm_alloc>
  10528f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105292:	e8 d1 c7 ff ff       	call   101a68 <pmm_alloc>
  105297:	89 c2                	mov    %eax,%edx
  105299:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10529c:	89 10                	mov    %edx,(%eax)
  10529e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1052a5:	e9 d3 00 00 00       	jmp    10537d <vmm_init+0xfa>
  1052aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1052ad:	8b 00                	mov    (%eax),%eax
  1052af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1052b2:	c1 e2 02             	shl    $0x2,%edx
  1052b5:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  1052b8:	e8 ab c7 ff ff       	call   101a68 <pmm_alloc>
  1052bd:	89 03                	mov    %eax,(%ebx)
  1052bf:	83 7d e4 7f          	cmpl   $0x7f,-0x1c(%ebp)
  1052c3:	77 19                	ja     1052de <vmm_init+0x5b>
  1052c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052c8:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1052cb:	8b 12                	mov    (%edx),%edx
  1052cd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1052d0:	c1 e1 02             	shl    $0x2,%ecx
  1052d3:	01 ca                	add    %ecx,%edx
  1052d5:	8b 12                	mov    (%edx),%edx
  1052d7:	89 14 85 e0 87 1c 00 	mov    %edx,0x1c87e0(,%eax,4)
  1052de:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1052e1:	8b 00                	mov    (%eax),%eax
  1052e3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1052e6:	c1 e2 02             	shl    $0x2,%edx
  1052e9:	8d 14 10             	lea    (%eax,%edx,1),%edx
  1052ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1052ef:	8b 00                	mov    (%eax),%eax
  1052f1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1052f4:	c1 e1 02             	shl    $0x2,%ecx
  1052f7:	01 c8                	add    %ecx,%eax
  1052f9:	8b 00                	mov    (%eax),%eax
  1052fb:	83 c8 07             	or     $0x7,%eax
  1052fe:	89 02                	mov    %eax,(%edx)
  105300:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  105307:	eb 68                	jmp    105371 <vmm_init+0xee>
  105309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10530c:	89 c2                	mov    %eax,%edx
  10530e:	c1 e2 16             	shl    $0x16,%edx
  105311:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105314:	c1 e0 0c             	shl    $0xc,%eax
  105317:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10531a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10531d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105320:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  105327:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10532a:	8b 00                	mov    (%eax),%eax
  10532c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10532f:	c1 e2 02             	shl    $0x2,%edx
  105332:	01 d0                	add    %edx,%eax
  105334:	8b 00                	mov    (%eax),%eax
  105336:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10533b:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  10533e:	89 c1                	mov    %eax,%ecx
  105340:	81 7d f0 00 10 40 01 	cmpl   $0x1401000,-0x10(%ebp)
  105347:	76 07                	jbe    105350 <vmm_init+0xcd>
  105349:	ba 00 02 00 00       	mov    $0x200,%edx
  10534e:	eb 05                	jmp    105355 <vmm_init+0xd2>
  105350:	ba 00 00 00 00       	mov    $0x0,%edx
  105355:	81 7d f0 00 10 40 01 	cmpl   $0x1401000,-0x10(%ebp)
  10535c:	76 07                	jbe    105365 <vmm_init+0xe2>
  10535e:	b8 04 00 00 00       	mov    $0x4,%eax
  105363:	eb 05                	jmp    10536a <vmm_init+0xe7>
  105365:	b8 00 00 00 00       	mov    $0x0,%eax
  10536a:	09 d0                	or     %edx,%eax
  10536c:	89 01                	mov    %eax,(%ecx)
  10536e:	ff 45 e8             	incl   -0x18(%ebp)
  105371:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  105378:	76 8f                	jbe    105309 <vmm_init+0x86>
  10537a:	ff 45 e4             	incl   -0x1c(%ebp)
  10537d:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
  105384:	0f 86 20 ff ff ff    	jbe    1052aa <vmm_init+0x27>
  10538a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  105391:	eb 3d                	jmp    1053d0 <vmm_init+0x14d>
  105393:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105396:	8b 00                	mov    (%eax),%eax
  105398:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10539b:	c1 e2 02             	shl    $0x2,%edx
  10539e:	01 d0                	add    %edx,%eax
  1053a0:	8b 00                	mov    (%eax),%eax
  1053a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1053a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1053aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1053ad:	89 c2                	mov    %eax,%edx
  1053af:	c1 e2 0c             	shl    $0xc,%edx
  1053b2:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1053b7:	01 c2                	add    %eax,%edx
  1053b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1053bc:	8b 00                	mov    (%eax),%eax
  1053be:	6a 00                	push   $0x0
  1053c0:	ff 75 f4             	pushl  -0xc(%ebp)
  1053c3:	52                   	push   %edx
  1053c4:	50                   	push   %eax
  1053c5:	e8 12 fb ff ff       	call   104edc <map_address_context>
  1053ca:	83 c4 10             	add    $0x10,%esp
  1053cd:	ff 45 e4             	incl   -0x1c(%ebp)
  1053d0:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
  1053d7:	76 ba                	jbe    105393 <vmm_init+0x110>
  1053d9:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1053dc:	a1 00 61 10 00       	mov    0x106100,%eax
  1053e1:	89 c2                	mov    %eax,%edx
  1053e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1053e6:	8b 00                	mov    (%eax),%eax
  1053e8:	6a 00                	push   $0x0
  1053ea:	51                   	push   %ecx
  1053eb:	52                   	push   %edx
  1053ec:	50                   	push   %eax
  1053ed:	e8 ea fa ff ff       	call   104edc <map_address_context>
  1053f2:	83 c4 10             	add    $0x10,%esp
  1053f5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
  1053fc:	eb 1d                	jmp    10541b <vmm_init+0x198>
  1053fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105401:	8b 00                	mov    (%eax),%eax
  105403:	6a 00                	push   $0x0
  105405:	ff 75 e4             	pushl  -0x1c(%ebp)
  105408:	ff 75 e4             	pushl  -0x1c(%ebp)
  10540b:	50                   	push   %eax
  10540c:	e8 cb fa ff ff       	call   104edc <map_address_context>
  105411:	83 c4 10             	add    $0x10,%esp
  105414:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  10541b:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  105420:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  105423:	72 d9                	jb     1053fe <vmm_init+0x17b>
  105425:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105428:	8b 00                	mov    (%eax),%eax
  10542a:	83 ec 0c             	sub    $0xc,%esp
  10542d:	50                   	push   %eax
  10542e:	e8 3d fe ff ff       	call   105270 <vmm_activate_pagedir>
  105433:	83 c4 10             	add    $0x10,%esp
  105436:	0f 20 c0             	mov    %cr0,%eax
  105439:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10543c:	81 4d ec 00 00 00 80 	orl    $0x80000000,-0x14(%ebp)
  105443:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105446:	0f 22 c0             	mov    %eax,%cr0
  105449:	a1 00 61 10 00       	mov    0x106100,%eax
  10544e:	8b 00                	mov    (%eax),%eax
  105450:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105453:	c9                   	leave  
  105454:	c3                   	ret    
