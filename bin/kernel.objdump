
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 6a                	in     $0x6a,%al

0010000c <intr_stub_0>:
  10000c:	6a 00                	push   $0x0
  10000e:	6a 00                	push   $0x0
  100010:	e9 eb 00 00 00       	jmp    100100 <intr_common_handler>

00100015 <intr_stub_1>:
  100015:	6a 00                	push   $0x0
  100017:	6a 01                	push   $0x1
  100019:	e9 e2 00 00 00       	jmp    100100 <intr_common_handler>

0010001e <intr_stub_2>:
  10001e:	6a 00                	push   $0x0
  100020:	6a 02                	push   $0x2
  100022:	e9 d9 00 00 00       	jmp    100100 <intr_common_handler>

00100027 <intr_stub_3>:
  100027:	6a 00                	push   $0x0
  100029:	6a 03                	push   $0x3
  10002b:	e9 d0 00 00 00       	jmp    100100 <intr_common_handler>

00100030 <intr_stub_4>:
  100030:	6a 00                	push   $0x0
  100032:	6a 04                	push   $0x4
  100034:	e9 c7 00 00 00       	jmp    100100 <intr_common_handler>

00100039 <intr_stub_5>:
  100039:	6a 00                	push   $0x0
  10003b:	6a 05                	push   $0x5
  10003d:	e9 be 00 00 00       	jmp    100100 <intr_common_handler>

00100042 <intr_stub_6>:
  100042:	6a 00                	push   $0x0
  100044:	6a 06                	push   $0x6
  100046:	e9 b5 00 00 00       	jmp    100100 <intr_common_handler>

0010004b <intr_stub_7>:
  10004b:	6a 00                	push   $0x0
  10004d:	6a 07                	push   $0x7
  10004f:	e9 ac 00 00 00       	jmp    100100 <intr_common_handler>

00100054 <intr_stub_8>:
  100054:	6a 08                	push   $0x8
  100056:	e9 a5 00 00 00       	jmp    100100 <intr_common_handler>

0010005b <intr_stub_9>:
  10005b:	6a 00                	push   $0x0
  10005d:	6a 09                	push   $0x9
  10005f:	e9 9c 00 00 00       	jmp    100100 <intr_common_handler>

00100064 <intr_stub_10>:
  100064:	6a 0a                	push   $0xa
  100066:	e9 95 00 00 00       	jmp    100100 <intr_common_handler>

0010006b <intr_stub_11>:
  10006b:	6a 0b                	push   $0xb
  10006d:	e9 8e 00 00 00       	jmp    100100 <intr_common_handler>

00100072 <intr_stub_12>:
  100072:	6a 0c                	push   $0xc
  100074:	e9 87 00 00 00       	jmp    100100 <intr_common_handler>

00100079 <intr_stub_13>:
  100079:	6a 0d                	push   $0xd
  10007b:	e9 80 00 00 00       	jmp    100100 <intr_common_handler>

00100080 <intr_stub_14>:
  100080:	6a 0e                	push   $0xe
  100082:	eb 7c                	jmp    100100 <intr_common_handler>

00100084 <intr_stub_15>:
  100084:	6a 00                	push   $0x0
  100086:	6a 0f                	push   $0xf
  100088:	eb 76                	jmp    100100 <intr_common_handler>

0010008a <intr_stub_16>:
  10008a:	6a 00                	push   $0x0
  10008c:	6a 10                	push   $0x10
  10008e:	eb 70                	jmp    100100 <intr_common_handler>

00100090 <intr_stub_17>:
  100090:	6a 11                	push   $0x11
  100092:	eb 6c                	jmp    100100 <intr_common_handler>

00100094 <intr_stub_18>:
  100094:	6a 00                	push   $0x0
  100096:	6a 12                	push   $0x12
  100098:	eb 66                	jmp    100100 <intr_common_handler>

0010009a <intr_stub_32>:
  10009a:	6a 00                	push   $0x0
  10009c:	6a 20                	push   $0x20
  10009e:	eb 60                	jmp    100100 <intr_common_handler>

001000a0 <intr_stub_33>:
  1000a0:	6a 00                	push   $0x0
  1000a2:	6a 21                	push   $0x21
  1000a4:	eb 5a                	jmp    100100 <intr_common_handler>

001000a6 <intr_stub_34>:
  1000a6:	6a 00                	push   $0x0
  1000a8:	6a 22                	push   $0x22
  1000aa:	eb 54                	jmp    100100 <intr_common_handler>

001000ac <intr_stub_35>:
  1000ac:	6a 00                	push   $0x0
  1000ae:	6a 23                	push   $0x23
  1000b0:	eb 4e                	jmp    100100 <intr_common_handler>

001000b2 <intr_stub_36>:
  1000b2:	6a 00                	push   $0x0
  1000b4:	6a 24                	push   $0x24
  1000b6:	eb 48                	jmp    100100 <intr_common_handler>

001000b8 <intr_stub_37>:
  1000b8:	6a 00                	push   $0x0
  1000ba:	6a 25                	push   $0x25
  1000bc:	eb 42                	jmp    100100 <intr_common_handler>

001000be <intr_stub_38>:
  1000be:	6a 00                	push   $0x0
  1000c0:	6a 26                	push   $0x26
  1000c2:	eb 3c                	jmp    100100 <intr_common_handler>

001000c4 <intr_stub_39>:
  1000c4:	6a 00                	push   $0x0
  1000c6:	6a 27                	push   $0x27
  1000c8:	eb 36                	jmp    100100 <intr_common_handler>

001000ca <intr_stub_40>:
  1000ca:	6a 00                	push   $0x0
  1000cc:	6a 28                	push   $0x28
  1000ce:	eb 30                	jmp    100100 <intr_common_handler>

001000d0 <intr_stub_41>:
  1000d0:	6a 00                	push   $0x0
  1000d2:	6a 29                	push   $0x29
  1000d4:	eb 2a                	jmp    100100 <intr_common_handler>

001000d6 <intr_stub_42>:
  1000d6:	6a 00                	push   $0x0
  1000d8:	6a 2a                	push   $0x2a
  1000da:	eb 24                	jmp    100100 <intr_common_handler>

001000dc <intr_stub_43>:
  1000dc:	6a 00                	push   $0x0
  1000de:	6a 2b                	push   $0x2b
  1000e0:	eb 1e                	jmp    100100 <intr_common_handler>

001000e2 <intr_stub_44>:
  1000e2:	6a 00                	push   $0x0
  1000e4:	6a 2c                	push   $0x2c
  1000e6:	eb 18                	jmp    100100 <intr_common_handler>

001000e8 <intr_stub_45>:
  1000e8:	6a 00                	push   $0x0
  1000ea:	6a 2d                	push   $0x2d
  1000ec:	eb 12                	jmp    100100 <intr_common_handler>

001000ee <intr_stub_46>:
  1000ee:	6a 00                	push   $0x0
  1000f0:	6a 2e                	push   $0x2e
  1000f2:	eb 0c                	jmp    100100 <intr_common_handler>

001000f4 <intr_stub_47>:
  1000f4:	6a 00                	push   $0x0
  1000f6:	6a 2f                	push   $0x2f
  1000f8:	eb 06                	jmp    100100 <intr_common_handler>

001000fa <intr_stub_48>:
  1000fa:	6a 00                	push   $0x0
  1000fc:	6a 30                	push   $0x30
  1000fe:	eb 00                	jmp    100100 <intr_common_handler>

00100100 <intr_common_handler>:
  100100:	55                   	push   %ebp
  100101:	57                   	push   %edi
  100102:	56                   	push   %esi
  100103:	52                   	push   %edx
  100104:	51                   	push   %ecx
  100105:	53                   	push   %ebx
  100106:	50                   	push   %eax
  100107:	54                   	push   %esp
  100108:	66 b8 10 00          	mov    $0x10,%ax
  10010c:	8e d8                	mov    %eax,%ds
  10010e:	8e c0                	mov    %eax,%es
  100110:	e8 3c 15 00 00       	call   101651 <handle_interrupt>
  100115:	89 c4                	mov    %eax,%esp
  100117:	66 b8 23 00          	mov    $0x23,%ax
  10011b:	8e d8                	mov    %eax,%ds
  10011d:	8e c0                	mov    %eax,%es
  10011f:	58                   	pop    %eax
  100120:	5b                   	pop    %ebx
  100121:	59                   	pop    %ecx
  100122:	5a                   	pop    %edx
  100123:	5e                   	pop    %esi
  100124:	5f                   	pop    %edi
  100125:	5d                   	pop    %ebp
  100126:	83 c4 08             	add    $0x8,%esp
  100129:	cf                   	iret   

0010012a <_start>:
  10012a:	bc 00 90 11 00       	mov    $0x119000,%esp
  10012f:	53                   	push   %ebx
  100130:	e8 04 00 00 00       	call   100139 <init>

00100135 <_stop>:
  100135:	fa                   	cli    
  100136:	f4                   	hlt    
  100137:	eb fc                	jmp    100135 <_stop>

00100139 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  100139:	55                   	push   %ebp
  10013a:	89 e5                	mov    %esp,%ebp
  10013c:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  10013f:	e8 fd 03 00 00       	call   100541 <clrscr>
	pmm_init(mb_info);
  100144:	8b 45 08             	mov    0x8(%ebp),%eax
  100147:	89 04 24             	mov    %eax,(%esp)
  10014a:	e8 60 21 00 00       	call   1022af <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  10014f:	c7 44 24 04 00 70 10 	movl   $0x107000,0x4(%esp)
  100156:	00 
  100157:	c7 04 24 14 70 10 00 	movl   $0x107014,(%esp)
  10015e:	e8 3c 04 00 00       	call   10059f <kprintf>
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  100163:	c7 04 24 38 70 10 00 	movl   $0x107038,(%esp)
  10016a:	e8 30 04 00 00       	call   10059f <kprintf>

	kprintf("Initializing GDT...\n");
  10016f:	c7 04 24 77 70 10 00 	movl   $0x107077,(%esp)
  100176:	e8 24 04 00 00       	call   10059f <kprintf>

	init_gdt();
  10017b:	e8 c1 0b 00 00       	call   100d41 <init_gdt>

	kprintf("Initializing IDT...\n");
  100180:	c7 04 24 8c 70 10 00 	movl   $0x10708c,(%esp)
  100187:	e8 13 04 00 00       	call   10059f <kprintf>

	init_idt();
  10018c:	e8 ac 0d 00 00       	call   100f3d <init_idt>

	kprintf("Initializing Kernel...\n");
  100191:	c7 04 24 a1 70 10 00 	movl   $0x1070a1,(%esp)
  100198:	e8 02 04 00 00       	call   10059f <kprintf>

	pmm_print_stats();
  10019d:	e8 ab 1f 00 00       	call   10214d <pmm_print_stats>

	kernel_main(mb_info);
  1001a2:	8b 45 08             	mov    0x8(%ebp),%eax
  1001a5:	89 04 24             	mov    %eax,(%esp)
  1001a8:	e8 24 1d 00 00       	call   101ed1 <kernel_main>

	return;
  1001ad:	90                   	nop
}
  1001ae:	c9                   	leave  
  1001af:	c3                   	ret    

001001b0 <in_cod>:
#include "catofdeath.h"

static uint32_t icod = 0;

uint32_t in_cod() {
  1001b0:	55                   	push   %ebp
  1001b1:	89 e5                	mov    %esp,%ebp
    return icod;
  1001b3:	a1 00 90 12 00       	mov    0x129000,%eax
}
  1001b8:	5d                   	pop    %ebp
  1001b9:	c3                   	ret    

001001ba <show_cod>:

void show_cod(struct cpu_state* cpu, char* fstr) {
  1001ba:	55                   	push   %ebp
  1001bb:	89 e5                	mov    %esp,%ebp
  1001bd:	83 ec 18             	sub    $0x18,%esp
    icod = 1;
  1001c0:	c7 05 00 90 12 00 01 	movl   $0x1,0x129000
  1001c7:	00 00 00 
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  1001ca:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1001d1:	e8 b2 03 00 00       	call   100588 <setclr>
    kprintf(fstr);
  1001d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001d9:	89 04 24             	mov    %eax,(%esp)
  1001dc:	e8 be 03 00 00       	call   10059f <kprintf>
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1001e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1001e4:	8b 50 20             	mov    0x20(%eax),%edx
  1001e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1001ea:	8b 40 1c             	mov    0x1c(%eax),%eax
  1001ed:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001f1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1001f5:	c7 04 24 bc 70 10 00 	movl   $0x1070bc,(%esp)
  1001fc:	e8 9e 03 00 00       	call   10059f <kprintf>
    show_dump(cpu);
  100201:	8b 45 08             	mov    0x8(%ebp),%eax
  100204:	89 04 24             	mov    %eax,(%esp)
  100207:	e8 04 00 00 00       	call   100210 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  10020c:	fa                   	cli    
  10020d:	f4                   	hlt    
    }
  10020e:	eb fc                	jmp    10020c <show_cod+0x52>

00100210 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  100210:	55                   	push   %ebp
  100211:	89 e5                	mov    %esp,%ebp
  100213:	53                   	push   %ebx
  100214:	83 ec 34             	sub    $0x34,%esp
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  100217:	8b 45 08             	mov    0x8(%ebp),%eax
  10021a:	8b 58 0c             	mov    0xc(%eax),%ebx
  10021d:	8b 45 08             	mov    0x8(%ebp),%eax
  100220:	8b 48 08             	mov    0x8(%eax),%ecx
  100223:	8b 45 08             	mov    0x8(%ebp),%eax
  100226:	8b 50 04             	mov    0x4(%eax),%edx
  100229:	8b 45 08             	mov    0x8(%ebp),%eax
  10022c:	8b 00                	mov    (%eax),%eax
  10022e:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100232:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  100236:	89 54 24 08          	mov    %edx,0x8(%esp)
  10023a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10023e:	c7 04 24 e4 70 10 00 	movl   $0x1070e4,(%esp)
  100245:	e8 55 03 00 00       	call   10059f <kprintf>
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10024a:	8b 45 08             	mov    0x8(%ebp),%eax
  10024d:	8b 58 24             	mov    0x24(%eax),%ebx
  100250:	8b 45 08             	mov    0x8(%ebp),%eax
  100253:	8b 48 18             	mov    0x18(%eax),%ecx
  100256:	8b 45 08             	mov    0x8(%ebp),%eax
  100259:	8b 50 14             	mov    0x14(%eax),%edx
  10025c:	8b 45 08             	mov    0x8(%ebp),%eax
  10025f:	8b 40 10             	mov    0x10(%eax),%eax
  100262:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100266:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  10026a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10026e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100272:	c7 04 24 08 71 10 00 	movl   $0x107108,(%esp)
  100279:	e8 21 03 00 00       	call   10059f <kprintf>
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  10027e:	8b 45 08             	mov    0x8(%ebp),%eax
  100281:	8b 58 34             	mov    0x34(%eax),%ebx
  100284:	8b 45 08             	mov    0x8(%ebp),%eax
  100287:	8b 48 30             	mov    0x30(%eax),%ecx
  10028a:	8b 45 08             	mov    0x8(%ebp),%eax
  10028d:	8b 50 2c             	mov    0x2c(%eax),%edx
  100290:	8b 45 08             	mov    0x8(%ebp),%eax
  100293:	8b 40 28             	mov    0x28(%eax),%eax
  100296:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10029a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  10029e:	89 54 24 08          	mov    %edx,0x8(%esp)
  1002a2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1002a6:	c7 04 24 2c 71 10 00 	movl   $0x10712c,(%esp)
  1002ad:	e8 ed 02 00 00       	call   10059f <kprintf>
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  1002b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1002b9:	0f 20 d0             	mov    %cr2,%eax
  1002bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kprintf("CR2: %x \n", cr2);
  1002bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1002c2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1002c6:	c7 04 24 4e 71 10 00 	movl   $0x10714e,(%esp)
  1002cd:	e8 cd 02 00 00       	call   10059f <kprintf>
}
  1002d2:	83 c4 34             	add    $0x34,%esp
  1002d5:	5b                   	pop    %ebx
  1002d6:	5d                   	pop    %ebp
  1002d7:	c3                   	ret    

001002d8 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1002d8:	55                   	push   %ebp
  1002d9:	89 e5                	mov    %esp,%ebp
  1002db:	83 ec 38             	sub    $0x38,%esp
  1002de:	8b 45 08             	mov    0x8(%ebp),%eax
  1002e1:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if(in_cod()) {
  1002e4:	e8 c7 fe ff ff       	call   1001b0 <in_cod>
  1002e9:	85 c0                	test   %eax,%eax
  1002eb:	74 05                	je     1002f2 <kputc+0x1a>
        goto doKPutc;
  1002ed:	e9 a6 00 00 00       	jmp    100398 <kputc+0xc0>
    }

    if(get_current_task() != 0) {
  1002f2:	e8 28 2c 00 00       	call   102f1f <get_current_task>
  1002f7:	85 c0                	test   %eax,%eax
  1002f9:	0f 84 8b 00 00 00    	je     10038a <kputc+0xb2>
        if(get_current_task()->stdout != 0) {
  1002ff:	e8 1b 2c 00 00       	call   102f1f <get_current_task>
  100304:	8b 40 30             	mov    0x30(%eax),%eax
  100307:	85 c0                	test   %eax,%eax
  100309:	74 7f                	je     10038a <kputc+0xb2>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  10030b:	c6 45 f3 11          	movb   $0x11,-0xd(%ebp)
  10030f:	e8 0b 2c 00 00       	call   102f1f <get_current_task>
  100314:	8b 40 30             	mov    0x30(%eax),%eax
  100317:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10031e:	00 
  10031f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100326:	00 
  100327:	8d 55 f3             	lea    -0xd(%ebp),%edx
  10032a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10032e:	89 04 24             	mov    %eax,(%esp)
  100331:	e8 2b 43 00 00       	call   104661 <vfs_write>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  100336:	e8 e4 2b 00 00       	call   102f1f <get_current_task>
  10033b:	8b 40 30             	mov    0x30(%eax),%eax
  10033e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100345:	00 
  100346:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10034d:	00 
  10034e:	c7 44 24 04 00 60 10 	movl   $0x106000,0x4(%esp)
  100355:	00 
  100356:	89 04 24             	mov    %eax,(%esp)
  100359:	e8 03 43 00 00       	call   104661 <vfs_write>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10035e:	e8 bc 2b 00 00       	call   102f1f <get_current_task>
  100363:	8b 40 30             	mov    0x30(%eax),%eax
  100366:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10036d:	00 
  10036e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100375:	00 
  100376:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  100379:	89 54 24 04          	mov    %edx,0x4(%esp)
  10037d:	89 04 24             	mov    %eax,(%esp)
  100380:	e8 dc 42 00 00       	call   104661 <vfs_write>

            return;
  100385:	e9 22 01 00 00       	jmp    1004ac <kputc+0x1d4>
        }
    }

    if(ramfs_vga_writers()) {
  10038a:	e8 92 29 00 00       	call   102d21 <ramfs_vga_writers>
  10038f:	85 c0                	test   %eax,%eax
  100391:	74 05                	je     100398 <kputc+0xc0>
        return;
  100393:	e9 14 01 00 00       	jmp    1004ac <kputc+0x1d4>
    }

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  100398:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  10039c:	3c 0a                	cmp    $0xa,%al
  10039e:	74 0a                	je     1003aa <kputc+0xd2>
  1003a0:	a1 04 90 12 00       	mov    0x129004,%eax
  1003a5:	83 f8 4f             	cmp    $0x4f,%eax
  1003a8:	7e 17                	jle    1003c1 <kputc+0xe9>
        x = 0;
  1003aa:	c7 05 04 90 12 00 00 	movl   $0x0,0x129004
  1003b1:	00 00 00 
        y++;
  1003b4:	a1 08 90 12 00       	mov    0x129008,%eax
  1003b9:	83 c0 01             	add    $0x1,%eax
  1003bc:	a3 08 90 12 00       	mov    %eax,0x129008
    }

    if (c == '\n') {
  1003c1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  1003c5:	3c 0a                	cmp    $0xa,%al
  1003c7:	75 05                	jne    1003ce <kputc+0xf6>
        return;
  1003c9:	e9 de 00 00 00       	jmp    1004ac <kputc+0x1d4>
    }

    if (y > 24) {
  1003ce:	a1 08 90 12 00       	mov    0x129008,%eax
  1003d3:	83 f8 18             	cmp    $0x18,%eax
  1003d6:	7e 60                	jle    100438 <kputc+0x160>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1003d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1003df:	eb 24                	jmp    100405 <kputc+0x12d>
            video[i] = video[i + 160];
  1003e1:	8b 15 04 60 10 00    	mov    0x106004,%edx
  1003e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003ea:	01 c2                	add    %eax,%edx
  1003ec:	a1 04 60 10 00       	mov    0x106004,%eax
  1003f1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003f4:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  1003fa:	01 c8                	add    %ecx,%eax
  1003fc:	0f b6 00             	movzbl (%eax),%eax
  1003ff:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100401:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100405:	81 7d f4 ff 0e 00 00 	cmpl   $0xeff,-0xc(%ebp)
  10040c:	7e d3                	jle    1003e1 <kputc+0x109>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10040e:	eb 12                	jmp    100422 <kputc+0x14a>
            video[i] = 0;
  100410:	8b 15 04 60 10 00    	mov    0x106004,%edx
  100416:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100419:	01 d0                	add    %edx,%eax
  10041b:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10041e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100422:	81 7d f4 9f 0f 00 00 	cmpl   $0xf9f,-0xc(%ebp)
  100429:	7e e5                	jle    100410 <kputc+0x138>
            video[i] = 0;
        }
        y--;
  10042b:	a1 08 90 12 00       	mov    0x129008,%eax
  100430:	83 e8 01             	sub    $0x1,%eax
  100433:	a3 08 90 12 00       	mov    %eax,0x129008
    }

    video[2 * (y * 80 + x)] = c;
  100438:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  10043e:	8b 15 08 90 12 00    	mov    0x129008,%edx
  100444:	89 d0                	mov    %edx,%eax
  100446:	c1 e0 02             	shl    $0x2,%eax
  100449:	01 d0                	add    %edx,%eax
  10044b:	c1 e0 04             	shl    $0x4,%eax
  10044e:	89 c2                	mov    %eax,%edx
  100450:	a1 04 90 12 00       	mov    0x129004,%eax
  100455:	01 d0                	add    %edx,%eax
  100457:	01 c0                	add    %eax,%eax
  100459:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  10045c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  100460:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = color;
  100462:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  100468:	8b 15 08 90 12 00    	mov    0x129008,%edx
  10046e:	89 d0                	mov    %edx,%eax
  100470:	c1 e0 02             	shl    $0x2,%eax
  100473:	01 d0                	add    %edx,%eax
  100475:	c1 e0 04             	shl    $0x4,%eax
  100478:	89 c2                	mov    %eax,%edx
  10047a:	a1 04 90 12 00       	mov    0x129004,%eax
  10047f:	01 d0                	add    %edx,%eax
  100481:	01 c0                	add    %eax,%eax
  100483:	83 c0 01             	add    $0x1,%eax
  100486:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  100489:	0f b6 05 00 60 10 00 	movzbl 0x106000,%eax
  100490:	88 02                	mov    %al,(%edx)

    x++;
  100492:	a1 04 90 12 00       	mov    0x129004,%eax
  100497:	83 c0 01             	add    $0x1,%eax
  10049a:	a3 04 90 12 00       	mov    %eax,0x129004
    kprintf_res++;
  10049f:	a1 0c 90 12 00       	mov    0x12900c,%eax
  1004a4:	83 c0 01             	add    $0x1,%eax
  1004a7:	a3 0c 90 12 00       	mov    %eax,0x12900c
}
  1004ac:	c9                   	leave  
  1004ad:	c3                   	ret    

001004ae <kputs>:

static void kputs(const char* s) {
  1004ae:	55                   	push   %ebp
  1004af:	89 e5                	mov    %esp,%ebp
  1004b1:	83 ec 18             	sub    $0x18,%esp
    while (*s) {
  1004b4:	eb 17                	jmp    1004cd <kputs+0x1f>
        kputc(*s++);
  1004b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b9:	8d 50 01             	lea    0x1(%eax),%edx
  1004bc:	89 55 08             	mov    %edx,0x8(%ebp)
  1004bf:	0f b6 00             	movzbl (%eax),%eax
  1004c2:	0f be c0             	movsbl %al,%eax
  1004c5:	89 04 24             	mov    %eax,(%esp)
  1004c8:	e8 0b fe ff ff       	call   1002d8 <kputc>
    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
    while (*s) {
  1004cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d0:	0f b6 00             	movzbl (%eax),%eax
  1004d3:	84 c0                	test   %al,%al
  1004d5:	75 df                	jne    1004b6 <kputs+0x8>
        kputc(*s++);
    }
}
  1004d7:	c9                   	leave  
  1004d8:	c3                   	ret    

001004d9 <kputn>:

static void kputn(unsigned long x, int base) {
  1004d9:	55                   	push   %ebp
  1004da:	89 e5                	mov    %esp,%ebp
  1004dc:	53                   	push   %ebx
  1004dd:	83 ec 64             	sub    $0x64,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1004e0:	c7 45 f0 58 71 10 00 	movl   $0x107158,-0x10(%ebp)
    char* p;

    if (base > 36) {
  1004e7:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  1004eb:	7f 4e                	jg     10053b <kputn+0x62>
        return;
    }

    p = buf + 64;
  1004ed:	8d 45 af             	lea    -0x51(%ebp),%eax
  1004f0:	83 c0 40             	add    $0x40,%eax
  1004f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *p = '\0';
  1004f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004f9:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1004fc:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  100500:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100503:	8b 45 08             	mov    0x8(%ebp),%eax
  100506:	ba 00 00 00 00       	mov    $0x0,%edx
  10050b:	f7 f1                	div    %ecx
  10050d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100510:	01 d0                	add    %edx,%eax
  100512:	0f b6 10             	movzbl (%eax),%edx
  100515:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100518:	88 10                	mov    %dl,(%eax)
        x /= base;
  10051a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10051d:	8b 45 08             	mov    0x8(%ebp),%eax
  100520:	ba 00 00 00 00       	mov    $0x0,%edx
  100525:	f7 f3                	div    %ebx
  100527:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  10052a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10052e:	75 cc                	jne    1004fc <kputn+0x23>
    kputs(p);
  100530:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100533:	89 04 24             	mov    %eax,(%esp)
  100536:	e8 73 ff ff ff       	call   1004ae <kputs>
}
  10053b:	83 c4 64             	add    $0x64,%esp
  10053e:	5b                   	pop    %ebx
  10053f:	5d                   	pop    %ebp
  100540:	c3                   	ret    

00100541 <clrscr>:

void clrscr(void) {
  100541:	55                   	push   %ebp
  100542:	89 e5                	mov    %esp,%ebp
  100544:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100547:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10054e:	eb 12                	jmp    100562 <clrscr+0x21>
        video[i] = 0;
  100550:	8b 15 04 60 10 00    	mov    0x106004,%edx
  100556:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100559:	01 d0                	add    %edx,%eax
  10055b:	c6 00 00             	movb   $0x0,(%eax)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10055e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100562:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  100569:	7e e5                	jle    100550 <clrscr+0xf>
        video[i] = 0;
    }

    color = 0x07;
  10056b:	c6 05 00 60 10 00 07 	movb   $0x7,0x106000

    x = y = 0;
  100572:	c7 05 08 90 12 00 00 	movl   $0x0,0x129008
  100579:	00 00 00 
  10057c:	a1 08 90 12 00       	mov    0x129008,%eax
  100581:	a3 04 90 12 00       	mov    %eax,0x129004
}
  100586:	c9                   	leave  
  100587:	c3                   	ret    

00100588 <setclr>:

void setclr(char clr) {
  100588:	55                   	push   %ebp
  100589:	89 e5                	mov    %esp,%ebp
  10058b:	83 ec 04             	sub    $0x4,%esp
  10058e:	8b 45 08             	mov    0x8(%ebp),%eax
  100591:	88 45 fc             	mov    %al,-0x4(%ebp)
    color = clr;
  100594:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  100598:	a2 00 60 10 00       	mov    %al,0x106000
}
  10059d:	c9                   	leave  
  10059e:	c3                   	ret    

0010059f <kprintf>:

int kprintf(const char* fmt, ...) {
  10059f:	55                   	push   %ebp
  1005a0:	89 e5                	mov    %esp,%ebp
  1005a2:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  1005a5:	8d 45 0c             	lea    0xc(%ebp),%eax
  1005a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    kprintf_res = 0;
  1005ab:	c7 05 0c 90 12 00 00 	movl   $0x0,0x12900c
  1005b2:	00 00 00 
    while (*fmt) {
  1005b5:	e9 2a 01 00 00       	jmp    1006e4 <kprintf+0x145>
        if (*fmt == '%') {
  1005ba:	8b 45 08             	mov    0x8(%ebp),%eax
  1005bd:	0f b6 00             	movzbl (%eax),%eax
  1005c0:	3c 25                	cmp    $0x25,%al
  1005c2:	0f 85 07 01 00 00    	jne    1006cf <kprintf+0x130>
            fmt++;
  1005c8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
            switch (*fmt) {
  1005cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1005cf:	0f b6 00             	movzbl (%eax),%eax
  1005d2:	0f be c0             	movsbl %al,%eax
  1005d5:	83 f8 64             	cmp    $0x64,%eax
  1005d8:	74 65                	je     10063f <kprintf+0xa0>
  1005da:	83 f8 64             	cmp    $0x64,%eax
  1005dd:	7f 1f                	jg     1005fe <kprintf+0x5f>
  1005df:	83 f8 25             	cmp    $0x25,%eax
  1005e2:	0f 84 b9 00 00 00    	je     1006a1 <kprintf+0x102>
  1005e8:	83 f8 63             	cmp    $0x63,%eax
  1005eb:	0f 84 94 00 00 00    	je     100685 <kprintf+0xe6>
  1005f1:	85 c0                	test   %eax,%eax
  1005f3:	0f 84 fb 00 00 00    	je     1006f4 <kprintf+0x155>
  1005f9:	e9 b1 00 00 00       	jmp    1006af <kprintf+0x110>
  1005fe:	83 f8 73             	cmp    $0x73,%eax
  100601:	74 1e                	je     100621 <kprintf+0x82>
  100603:	83 f8 73             	cmp    $0x73,%eax
  100606:	7f 0a                	jg     100612 <kprintf+0x73>
  100608:	83 f8 70             	cmp    $0x70,%eax
  10060b:	74 55                	je     100662 <kprintf+0xc3>
  10060d:	e9 9d 00 00 00       	jmp    1006af <kprintf+0x110>
  100612:	83 f8 75             	cmp    $0x75,%eax
  100615:	74 28                	je     10063f <kprintf+0xa0>
  100617:	83 f8 78             	cmp    $0x78,%eax
  10061a:	74 46                	je     100662 <kprintf+0xc3>
  10061c:	e9 8e 00 00 00       	jmp    1006af <kprintf+0x110>
            case 's':
                s = va_arg(ap, char*);
  100621:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100624:	8d 50 04             	lea    0x4(%eax),%edx
  100627:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10062a:	8b 00                	mov    (%eax),%eax
  10062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  10062f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100632:	89 04 24             	mov    %eax,(%esp)
  100635:	e8 74 fe ff ff       	call   1004ae <kputs>
                break;
  10063a:	e9 8e 00 00 00       	jmp    1006cd <kprintf+0x12e>
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  10063f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100642:	8d 50 04             	lea    0x4(%eax),%edx
  100645:	89 55 e8             	mov    %edx,-0x18(%ebp)
  100648:	8b 00                	mov    (%eax),%eax
  10064a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                kputn(n, 10);
  10064d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100654:	00 
  100655:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100658:	89 04 24             	mov    %eax,(%esp)
  10065b:	e8 79 fe ff ff       	call   1004d9 <kputn>
                break;
  100660:	eb 6b                	jmp    1006cd <kprintf+0x12e>
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  100662:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100665:	8d 50 04             	lea    0x4(%eax),%edx
  100668:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10066b:	8b 00                	mov    (%eax),%eax
  10066d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                kputn(n, 16);
  100670:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100677:	00 
  100678:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10067b:	89 04 24             	mov    %eax,(%esp)
  10067e:	e8 56 fe ff ff       	call   1004d9 <kputn>
                break;
  100683:	eb 48                	jmp    1006cd <kprintf+0x12e>
            case 'c':
                c = va_arg(ap, int);
  100685:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100688:	8d 50 04             	lea    0x4(%eax),%edx
  10068b:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10068e:	8b 00                	mov    (%eax),%eax
  100690:	88 45 ef             	mov    %al,-0x11(%ebp)
                kputc(c);
  100693:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100697:	89 04 24             	mov    %eax,(%esp)
  10069a:	e8 39 fc ff ff       	call   1002d8 <kputc>
                break;
  10069f:	eb 2c                	jmp    1006cd <kprintf+0x12e>
            case '%':
                kputc('%');
  1006a1:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1006a8:	e8 2b fc ff ff       	call   1002d8 <kputc>
                break;
  1006ad:	eb 1e                	jmp    1006cd <kprintf+0x12e>
            case '\0':
                goto out;
            default:
                kputc('%');
  1006af:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1006b6:	e8 1d fc ff ff       	call   1002d8 <kputc>
                kputc(*fmt);
  1006bb:	8b 45 08             	mov    0x8(%ebp),%eax
  1006be:	0f b6 00             	movzbl (%eax),%eax
  1006c1:	0f be c0             	movsbl %al,%eax
  1006c4:	89 04 24             	mov    %eax,(%esp)
  1006c7:	e8 0c fc ff ff       	call   1002d8 <kputc>
                break;
  1006cc:	90                   	nop
  1006cd:	eb 11                	jmp    1006e0 <kprintf+0x141>
            }
        } else {
            kputc(*fmt);
  1006cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1006d2:	0f b6 00             	movzbl (%eax),%eax
  1006d5:	0f be c0             	movsbl %al,%eax
  1006d8:	89 04 24             	mov    %eax,(%esp)
  1006db:	e8 f8 fb ff ff       	call   1002d8 <kputc>
        }

        fmt++;
  1006e0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    unsigned long n;
    char c;

    va_start(ap, fmt);
    kprintf_res = 0;
    while (*fmt) {
  1006e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1006e7:	0f b6 00             	movzbl (%eax),%eax
  1006ea:	84 c0                	test   %al,%al
  1006ec:	0f 85 c8 fe ff ff    	jne    1005ba <kprintf+0x1b>
  1006f2:	eb 01                	jmp    1006f5 <kprintf+0x156>
                break;
            case '%':
                kputc('%');
                break;
            case '\0':
                goto out;
  1006f4:	90                   	nop
    }

    out:
    va_end(ap);

    return kprintf_res;
  1006f5:	a1 0c 90 12 00       	mov    0x12900c,%eax
}
  1006fa:	c9                   	leave  
  1006fb:	c3                   	ret    

001006fc <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  1006fc:	55                   	push   %ebp
  1006fd:	89 e5                	mov    %esp,%ebp
  1006ff:	83 ec 14             	sub    $0x14,%esp
  100702:	8b 45 08             	mov    0x8(%ebp),%eax
  100705:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100709:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10070d:	89 c2                	mov    %eax,%edx
  10070f:	ec                   	in     (%dx),%al
  100710:	88 45 ff             	mov    %al,-0x1(%ebp)
    return result;
  100713:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  100717:	c9                   	leave  
  100718:	c3                   	ret    

00100719 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  100719:	55                   	push   %ebp
  10071a:	89 e5                	mov    %esp,%ebp
  10071c:	83 ec 08             	sub    $0x8,%esp
  10071f:	8b 55 08             	mov    0x8(%ebp),%edx
  100722:	8b 45 0c             	mov    0xc(%ebp),%eax
  100725:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100729:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  10072c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  100730:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100734:	ee                   	out    %al,(%dx)
}
  100735:	c9                   	leave  
  100736:	c3                   	ret    

00100737 <translate_scancode>:
uint32_t key_flags[256];

struct res_handle* charout = 0;

static uint8_t translate_scancode(int set, uint16_t scancode)
{
  100737:	55                   	push   %ebp
  100738:	89 e5                	mov    %esp,%ebp
  10073a:	83 ec 28             	sub    $0x28,%esp
  10073d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100740:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    uint8_t keycode = 0;
  100744:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

    switch (set) {
  100748:	8b 45 08             	mov    0x8(%ebp),%eax
  10074b:	83 f8 01             	cmp    $0x1,%eax
  10074e:	74 19                	je     100769 <translate_scancode+0x32>
  100750:	83 f8 02             	cmp    $0x2,%eax
  100753:	74 24                	je     100779 <translate_scancode+0x42>
  100755:	85 c0                	test   %eax,%eax
  100757:	75 37                	jne    100790 <translate_scancode+0x59>
        // Normal scancodes
        case 0:
            keycode = sc_to_kc[0][scancode];
  100759:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10075d:	0f b6 80 20 60 10 00 	movzbl 0x106020(%eax),%eax
  100764:	88 45 f7             	mov    %al,-0x9(%ebp)
            break;
  100767:	eb 27                	jmp    100790 <translate_scancode+0x59>

        // e0-Scancodes
        case 1:
            keycode = sc_to_kc[1][scancode];
  100769:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10076d:	0f b6 80 a0 60 10 00 	movzbl 0x1060a0(%eax),%eax
  100774:	88 45 f7             	mov    %al,-0x9(%ebp)
            break;
  100777:	eb 17                	jmp    100790 <translate_scancode+0x59>

        // e1-Scancodes
        case 2:
            switch (scancode) {
  100779:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10077d:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  100782:	75 07                	jne    10078b <translate_scancode+0x54>
                // Pause
                case 0x451D:
                    keycode = 119;
  100784:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
                    break;
  100788:	90                   	nop

                default:
                    keycode = 0x0;
            };
            break;
  100789:	eb 04                	jmp    10078f <translate_scancode+0x58>
                case 0x451D:
                    keycode = 119;
                    break;

                default:
                    keycode = 0x0;
  10078b:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
            };
            break;
  10078f:	90                   	nop
    }

    if (keycode == 0) {
  100790:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  100794:	75 1b                	jne    1007b1 <translate_scancode+0x7a>
        kprintf("kbc: Unknown Scancode: 0x%x (%d)\n", scancode, set);
  100796:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10079a:	8b 55 08             	mov    0x8(%ebp),%edx
  10079d:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007a1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1007a5:	c7 04 24 80 71 10 00 	movl   $0x107180,(%esp)
  1007ac:	e8 ee fd ff ff       	call   10059f <kprintf>
    }

    return keycode;
  1007b1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  1007b5:	c9                   	leave  
  1007b6:	c3                   	ret    

001007b7 <getchar>:

static char getchar(uint8_t keycode) {
  1007b7:	55                   	push   %ebp
  1007b8:	89 e5                	mov    %esp,%ebp
  1007ba:	83 ec 14             	sub    $0x14,%esp
  1007bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1007c0:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint32_t index = 0;
  1007c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if(key_flags[0x2A] & KF_PRESSED) index = 1; //LSHIFT
  1007ca:	a1 48 96 12 00       	mov    0x129648,%eax
  1007cf:	83 e0 01             	and    $0x1,%eax
  1007d2:	85 c0                	test   %eax,%eax
  1007d4:	74 07                	je     1007dd <getchar+0x26>
  1007d6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    if(key_flags[0x36] & KF_PRESSED) index = 1; //RSHIFT
  1007dd:	a1 78 96 12 00       	mov    0x129678,%eax
  1007e2:	83 e0 01             	and    $0x1,%eax
  1007e5:	85 c0                	test   %eax,%eax
  1007e7:	74 07                	je     1007f0 <getchar+0x39>
  1007e9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

    return kc_to_char[index][keycode];
  1007f0:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  1007f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1007f7:	c1 e2 07             	shl    $0x7,%edx
  1007fa:	01 d0                	add    %edx,%eax
  1007fc:	05 20 61 10 00       	add    $0x106120,%eax
  100801:	0f b6 00             	movzbl (%eax),%eax
}
  100804:	c9                   	leave  
  100805:	c3                   	ret    

00100806 <send_command>:

static void send_command(uint8_t command)
{
  100806:	55                   	push   %ebp
  100807:	89 e5                	mov    %esp,%ebp
  100809:	83 ec 0c             	sub    $0xc,%esp
  10080c:	8b 45 08             	mov    0x8(%ebp),%eax
  10080f:	88 45 fc             	mov    %al,-0x4(%ebp)
    do {
        while (inb(0x64) & 0x2) {
  100812:	eb 00                	jmp    100814 <send_command+0xe>
  100814:	90                   	nop
  100815:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  10081c:	e8 db fe ff ff       	call   1006fc <inb>
  100821:	0f b6 c0             	movzbl %al,%eax
  100824:	83 e0 02             	and    $0x2,%eax
  100827:	85 c0                	test   %eax,%eax
  100829:	75 ea                	jne    100815 <send_command+0xf>
        }

        outb(0x60, command);
  10082b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  10082f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100833:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10083a:	e8 da fe ff ff       	call   100719 <outb>

        while ((inb(0x64) & 0x1) == 0) {
  10083f:	90                   	nop
  100840:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100847:	e8 b0 fe ff ff       	call   1006fc <inb>
  10084c:	0f b6 c0             	movzbl %al,%eax
  10084f:	83 e0 01             	and    $0x1,%eax
  100852:	85 c0                	test   %eax,%eax
  100854:	74 ea                	je     100840 <send_command+0x3a>
        }
    } while (inb(0x60) == 0xfe);
  100856:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10085d:	e8 9a fe ff ff       	call   1006fc <inb>
  100862:	3c fe                	cmp    $0xfe,%al
  100864:	74 ae                	je     100814 <send_command+0xe>
}
  100866:	c9                   	leave  
  100867:	c3                   	ret    

00100868 <irq_handler>:

void irq_handler() {
  100868:	55                   	push   %ebp
  100869:	89 e5                	mov    %esp,%ebp
  10086b:	83 ec 28             	sub    $0x28,%esp
    uint8_t scancode;
    uint8_t keycode = 0;
  10086e:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
    int break_code = 0;
  100872:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    static int      e0_code = 0;
    static int      e1_code = 0;
    static uint16_t e1_prev = 0;

    if(!init_done) return;
  100879:	a1 10 90 12 00       	mov    0x129010,%eax
  10087e:	85 c0                	test   %eax,%eax
  100880:	75 05                	jne    100887 <irq_handler+0x1f>
  100882:	e9 be 01 00 00       	jmp    100a45 <irq_handler+0x1dd>

    scancode = inb(0x60);
  100887:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10088e:	e8 69 fe ff ff       	call   1006fc <inb>
  100893:	88 45 f7             	mov    %al,-0x9(%ebp)

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
  100896:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10089a:	84 c0                	test   %al,%al
  10089c:	79 29                	jns    1008c7 <irq_handler+0x5f>
        (e1_code || (scancode != 0xE1)) &&
  10089e:	a1 18 90 12 00       	mov    0x129018,%eax

    scancode = inb(0x60);

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
  1008a3:	85 c0                	test   %eax,%eax
  1008a5:	75 06                	jne    1008ad <irq_handler+0x45>
        (e1_code || (scancode != 0xE1)) &&
  1008a7:	80 7d f7 e1          	cmpb   $0xe1,-0x9(%ebp)
  1008ab:	74 1a                	je     1008c7 <irq_handler+0x5f>
        (e0_code || (scancode != 0xE0)))
  1008ad:	a1 1c 90 12 00       	mov    0x12901c,%eax
    scancode = inb(0x60);

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
        (e1_code || (scancode != 0xE1)) &&
  1008b2:	85 c0                	test   %eax,%eax
  1008b4:	75 06                	jne    1008bc <irq_handler+0x54>
        (e0_code || (scancode != 0xE0)))
  1008b6:	80 7d f7 e0          	cmpb   $0xe0,-0x9(%ebp)
  1008ba:	74 0b                	je     1008c7 <irq_handler+0x5f>
    {
        break_code = 1;
  1008bc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
        scancode &= ~0x80;
  1008c3:	80 65 f7 7f          	andb   $0x7f,-0x9(%ebp)
    }

    if (e0_code) {
  1008c7:	a1 1c 90 12 00       	mov    0x12901c,%eax
  1008cc:	85 c0                	test   %eax,%eax
  1008ce:	74 41                	je     100911 <irq_handler+0xa9>
        // Fake shift abfangen und ignorieren
        if ((scancode == 0x2A) || (scancode == 0x36)) {
  1008d0:	80 7d f7 2a          	cmpb   $0x2a,-0x9(%ebp)
  1008d4:	74 06                	je     1008dc <irq_handler+0x74>
  1008d6:	80 7d f7 36          	cmpb   $0x36,-0x9(%ebp)
  1008da:	75 0f                	jne    1008eb <irq_handler+0x83>
            e0_code = 0;
  1008dc:	c7 05 1c 90 12 00 00 	movl   $0x0,0x12901c
  1008e3:	00 00 00 
            return;
  1008e6:	e9 5a 01 00 00       	jmp    100a45 <irq_handler+0x1dd>
        }

        keycode = translate_scancode(1, scancode);
  1008eb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1008fa:	e8 38 fe ff ff       	call   100737 <translate_scancode>
  1008ff:	88 45 f6             	mov    %al,-0xa(%ebp)
        e0_code = 0;
  100902:	c7 05 1c 90 12 00 00 	movl   $0x0,0x12901c
  100909:	00 00 00 
  10090c:	e9 a9 00 00 00       	jmp    1009ba <irq_handler+0x152>
    } else if (e1_code == 2) {
  100911:	a1 18 90 12 00       	mov    0x129018,%eax
  100916:	83 f8 02             	cmp    $0x2,%eax
  100919:	75 41                	jne    10095c <irq_handler+0xf4>
        // Fertiger e1-Scancode
        // Zweiten Scancode in hoeherwertiges Byte packen
        e1_prev |= ((uint16_t) scancode << 8);
  10091b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10091f:	c1 e0 08             	shl    $0x8,%eax
  100922:	89 c2                	mov    %eax,%edx
  100924:	0f b7 05 20 90 12 00 	movzwl 0x129020,%eax
  10092b:	09 d0                	or     %edx,%eax
  10092d:	66 a3 20 90 12 00    	mov    %ax,0x129020
        keycode = translate_scancode(2, e1_prev);
  100933:	0f b7 05 20 90 12 00 	movzwl 0x129020,%eax
  10093a:	0f b7 c0             	movzwl %ax,%eax
  10093d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100941:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100948:	e8 ea fd ff ff       	call   100737 <translate_scancode>
  10094d:	88 45 f6             	mov    %al,-0xa(%ebp)
        e1_code = 0;
  100950:	c7 05 18 90 12 00 00 	movl   $0x0,0x129018
  100957:	00 00 00 
  10095a:	eb 5e                	jmp    1009ba <irq_handler+0x152>
    } else if (e1_code == 1) {
  10095c:	a1 18 90 12 00       	mov    0x129018,%eax
  100961:	83 f8 01             	cmp    $0x1,%eax
  100964:	75 19                	jne    10097f <irq_handler+0x117>
        // Erstes Byte fuer e1-Scancode
        e1_prev = scancode;
  100966:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10096a:	66 a3 20 90 12 00    	mov    %ax,0x129020
        e1_code++;
  100970:	a1 18 90 12 00       	mov    0x129018,%eax
  100975:	83 c0 01             	add    $0x1,%eax
  100978:	a3 18 90 12 00       	mov    %eax,0x129018
  10097d:	eb 3b                	jmp    1009ba <irq_handler+0x152>
    } else if (scancode == 0xE0) {
  10097f:	80 7d f7 e0          	cmpb   $0xe0,-0x9(%ebp)
  100983:	75 0c                	jne    100991 <irq_handler+0x129>
        // Anfang eines e0-Codes
        e0_code = 1;
  100985:	c7 05 1c 90 12 00 01 	movl   $0x1,0x12901c
  10098c:	00 00 00 
  10098f:	eb 29                	jmp    1009ba <irq_handler+0x152>
    } else if (scancode == 0xE1) {
  100991:	80 7d f7 e1          	cmpb   $0xe1,-0x9(%ebp)
  100995:	75 0c                	jne    1009a3 <irq_handler+0x13b>
        // Anfang eines e1-Codes
        e1_code = 1;
  100997:	c7 05 18 90 12 00 01 	movl   $0x1,0x129018
  10099e:	00 00 00 
  1009a1:	eb 17                	jmp    1009ba <irq_handler+0x152>
    } else {
        // Normaler Scancode
        keycode = translate_scancode(0, scancode);
  1009a3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009a7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009ab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1009b2:	e8 80 fd ff ff       	call   100737 <translate_scancode>
  1009b7:	88 45 f6             	mov    %al,-0xa(%ebp)
    }

    if(break_code) {
  1009ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1009be:	74 1b                	je     1009db <irq_handler+0x173>
        key_flags[keycode] &= ~KF_PRESSED;
  1009c0:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1009c4:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
  1009c8:	8b 14 95 a0 95 12 00 	mov    0x1295a0(,%edx,4),%edx
  1009cf:	83 e2 fe             	and    $0xfffffffe,%edx
  1009d2:	89 14 85 a0 95 12 00 	mov    %edx,0x1295a0(,%eax,4)
  1009d9:	eb 19                	jmp    1009f4 <irq_handler+0x18c>
    }
    else
    {
        key_flags[keycode] |= KF_PRESSED;
  1009db:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1009df:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
  1009e3:	8b 14 95 a0 95 12 00 	mov    0x1295a0(,%edx,4),%edx
  1009ea:	83 ca 01             	or     $0x1,%edx
  1009ed:	89 14 85 a0 95 12 00 	mov    %edx,0x1295a0(,%eax,4)
    }

    char chr = getchar(keycode);
  1009f4:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1009f8:	89 04 24             	mov    %eax,(%esp)
  1009fb:	e8 b7 fd ff ff       	call   1007b7 <getchar>
  100a00:	88 45 ef             	mov    %al,-0x11(%ebp)

    if(!break_code && chr) {
  100a03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  100a07:	75 3c                	jne    100a45 <irq_handler+0x1dd>
  100a09:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
  100a0d:	84 c0                	test   %al,%al
  100a0f:	74 34                	je     100a45 <irq_handler+0x1dd>
        if(vfs_write(charout, &chr, sizeof(char), 1)) {
  100a11:	a1 14 90 12 00       	mov    0x129014,%eax
  100a16:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100a1d:	00 
  100a1e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100a25:	00 
  100a26:	8d 55 ef             	lea    -0x11(%ebp),%edx
  100a29:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a2d:	89 04 24             	mov    %eax,(%esp)
  100a30:	e8 2c 3c 00 00       	call   104661 <vfs_write>
  100a35:	85 c0                	test   %eax,%eax
  100a37:	74 0c                	je     100a45 <irq_handler+0x1dd>
            kprintf("[keyboard] BUFFER OVERFLOW! \n");
  100a39:	c7 04 24 a2 71 10 00 	movl   $0x1071a2,(%esp)
  100a40:	e8 5a fb ff ff       	call   10059f <kprintf>
        }
    }
}
  100a45:	c9                   	leave  
  100a46:	c3                   	ret    

00100a47 <driver_keyboard_init>:

void driver_keyboard_init(void)
{
  100a47:	55                   	push   %ebp
  100a48:	89 e5                	mov    %esp,%ebp
  100a4a:	83 ec 28             	sub    $0x28,%esp
    register_intr_handler(0x21, &irq_handler);
  100a4d:	c7 44 24 04 68 08 10 	movl   $0x100868,0x4(%esp)
  100a54:	00 
  100a55:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100a5c:	e8 31 0b 00 00       	call   101592 <register_intr_handler>

    while (inb(0x64) & 0x1) {
  100a61:	eb 0c                	jmp    100a6f <driver_keyboard_init+0x28>
        inb(0x60);
  100a63:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100a6a:	e8 8d fc ff ff       	call   1006fc <inb>

void driver_keyboard_init(void)
{
    register_intr_handler(0x21, &irq_handler);

    while (inb(0x64) & 0x1) {
  100a6f:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100a76:	e8 81 fc ff ff       	call   1006fc <inb>
  100a7b:	0f b6 c0             	movzbl %al,%eax
  100a7e:	83 e0 01             	and    $0x1,%eax
  100a81:	85 c0                	test   %eax,%eax
  100a83:	75 de                	jne    100a63 <driver_keyboard_init+0x1c>
        inb(0x60);
    }

    memset(key_flags, 0, 256 * sizeof(uint32_t));
  100a85:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
  100a8c:	00 
  100a8d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100a94:	00 
  100a95:	c7 04 24 a0 95 12 00 	movl   $0x1295a0,(%esp)
  100a9c:	e8 1a 32 00 00       	call   103cbb <memset>

    // Leds alle ausloeschen
    send_command(0xED);
  100aa1:	c7 04 24 ed 00 00 00 	movl   $0xed,(%esp)
  100aa8:	e8 59 fd ff ff       	call   100806 <send_command>
    send_command(0);
  100aad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100ab4:	e8 4d fd ff ff       	call   100806 <send_command>

    // Schnellste Wiederholrate
    send_command(0xF3);
  100ab9:	c7 04 24 f3 00 00 00 	movl   $0xf3,(%esp)
  100ac0:	e8 41 fd ff ff       	call   100806 <send_command>
    send_command(0);
  100ac5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100acc:	e8 35 fd ff ff       	call   100806 <send_command>

    send_command(0xF4);
  100ad1:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100ad8:	e8 29 fd ff ff       	call   100806 <send_command>

    vfs_create_kfile("/dev/keyboard", ramfs_fifo_driver_struct(), &(uint32_t){512});
  100add:	c7 45 f4 00 02 00 00 	movl   $0x200,-0xc(%ebp)
  100ae4:	e8 97 1c 00 00       	call   102780 <ramfs_fifo_driver_struct>
  100ae9:	8d 55 f4             	lea    -0xc(%ebp),%edx
  100aec:	89 54 24 08          	mov    %edx,0x8(%esp)
  100af0:	89 44 24 04          	mov    %eax,0x4(%esp)
  100af4:	c7 04 24 c0 71 10 00 	movl   $0x1071c0,(%esp)
  100afb:	e8 a1 39 00 00       	call   1044a1 <vfs_create_kfile>
    charout = vfs_open("/dev/keyboard", FM_WRITE);
  100b00:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100b07:	00 
  100b08:	c7 04 24 c0 71 10 00 	movl   $0x1071c0,(%esp)
  100b0f:	e8 20 3a 00 00       	call   104534 <vfs_open>
  100b14:	a3 14 90 12 00       	mov    %eax,0x129014

    init_done = 1;
  100b19:	c7 05 10 90 12 00 01 	movl   $0x1,0x129010
  100b20:	00 00 00 
}
  100b23:	c9                   	leave  
  100b24:	c3                   	ret    

00100b25 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  100b25:	55                   	push   %ebp
  100b26:	89 e5                	mov    %esp,%ebp
  100b28:	83 ec 10             	sub    $0x10,%esp
	struct {
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
  100b2b:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100b31:	c7 45 fc a0 99 12 00 	movl   $0x1299a0,-0x4(%ebp)
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  100b38:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100b3c:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100b40:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100b42:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  100b44:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  100b46:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  100b48:	8e d0                	mov    %eax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  100b4a:	c9                   	leave  
  100b4b:	c3                   	ret    

00100b4c <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100b4c:	55                   	push   %ebp
  100b4d:	89 e5                	mov    %esp,%ebp
  100b4f:	57                   	push   %edi
  100b50:	56                   	push   %esi
  100b51:	53                   	push   %ebx
  100b52:	83 ec 4c             	sub    $0x4c,%esp
	gdt[i] = limit & 0xffffLL;
  100b55:	8b 45 10             	mov    0x10(%ebp),%eax
  100b58:	ba 00 00 00 00       	mov    $0x0,%edx
  100b5d:	0f b7 c8             	movzwl %ax,%ecx
  100b60:	89 d0                	mov    %edx,%eax
  100b62:	83 e0 00             	and    $0x0,%eax
  100b65:	89 c3                	mov    %eax,%ebx
  100b67:	8b 45 08             	mov    0x8(%ebp),%eax
  100b6a:	89 0c c5 a0 99 12 00 	mov    %ecx,0x1299a0(,%eax,8)
  100b71:	89 1c c5 a4 99 12 00 	mov    %ebx,0x1299a4(,%eax,8)
	gdt[i] |= (base & 0xffffffLL) << 16;
  100b78:	8b 45 08             	mov    0x8(%ebp),%eax
  100b7b:	8b 14 c5 a4 99 12 00 	mov    0x1299a4(,%eax,8),%edx
  100b82:	8b 04 c5 a0 99 12 00 	mov    0x1299a0(,%eax,8),%eax
  100b89:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100b8c:	89 55 ac             	mov    %edx,-0x54(%ebp)
  100b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
  100b92:	ba 00 00 00 00       	mov    $0x0,%edx
  100b97:	89 c3                	mov    %eax,%ebx
  100b99:	81 e3 ff ff ff 00    	and    $0xffffff,%ebx
  100b9f:	89 de                	mov    %ebx,%esi
  100ba1:	89 d0                	mov    %edx,%eax
  100ba3:	83 e0 00             	and    $0x0,%eax
  100ba6:	89 c7                	mov    %eax,%edi
  100ba8:	89 f0                	mov    %esi,%eax
  100baa:	89 fa                	mov    %edi,%edx
  100bac:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  100bb0:	c1 e0 10             	shl    $0x10,%eax
  100bb3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  100bb6:	8b 5d ac             	mov    -0x54(%ebp),%ebx
  100bb9:	89 cf                	mov    %ecx,%edi
  100bbb:	09 c7                	or     %eax,%edi
  100bbd:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100bc0:	89 df                	mov    %ebx,%edi
  100bc2:	09 d7                	or     %edx,%edi
  100bc4:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100bc7:	8b 45 08             	mov    0x8(%ebp),%eax
  100bca:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  100bcd:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100bd0:	89 1c c5 a0 99 12 00 	mov    %ebx,0x1299a0(,%eax,8)
  100bd7:	89 34 c5 a4 99 12 00 	mov    %esi,0x1299a4(,%eax,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100bde:	8b 45 08             	mov    0x8(%ebp),%eax
  100be1:	8b 0c c5 a0 99 12 00 	mov    0x1299a0(,%eax,8),%ecx
  100be8:	8b 1c c5 a4 99 12 00 	mov    0x1299a4(,%eax,8),%ebx
  100bef:	8b 45 14             	mov    0x14(%ebp),%eax
  100bf2:	99                   	cltd   
  100bf3:	0f b6 f8             	movzbl %al,%edi
  100bf6:	89 7d e0             	mov    %edi,-0x20(%ebp)
  100bf9:	89 d0                	mov    %edx,%eax
  100bfb:	83 e0 00             	and    $0x0,%eax
  100bfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100c01:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c07:	89 c2                	mov    %eax,%edx
  100c09:	b8 00 00 00 00       	mov    $0x0,%eax
  100c0e:	c1 e2 08             	shl    $0x8,%edx
  100c11:	89 cf                	mov    %ecx,%edi
  100c13:	09 c7                	or     %eax,%edi
  100c15:	89 7d d8             	mov    %edi,-0x28(%ebp)
  100c18:	89 df                	mov    %ebx,%edi
  100c1a:	09 d7                	or     %edx,%edi
  100c1c:	89 7d dc             	mov    %edi,-0x24(%ebp)
  100c1f:	8b 45 08             	mov    0x8(%ebp),%eax
  100c22:	8b 5d d8             	mov    -0x28(%ebp),%ebx
  100c25:	8b 75 dc             	mov    -0x24(%ebp),%esi
  100c28:	89 1c c5 a0 99 12 00 	mov    %ebx,0x1299a0(,%eax,8)
  100c2f:	89 34 c5 a4 99 12 00 	mov    %esi,0x1299a4(,%eax,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100c36:	8b 45 08             	mov    0x8(%ebp),%eax
  100c39:	8b 0c c5 a0 99 12 00 	mov    0x1299a0(,%eax,8),%ecx
  100c40:	8b 1c c5 a4 99 12 00 	mov    0x1299a4(,%eax,8),%ebx
  100c47:	8b 45 10             	mov    0x10(%ebp),%eax
  100c4a:	c1 e8 10             	shr    $0x10,%eax
  100c4d:	ba 00 00 00 00       	mov    $0x0,%edx
  100c52:	89 c7                	mov    %eax,%edi
  100c54:	83 e7 0f             	and    $0xf,%edi
  100c57:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100c5a:	89 d0                	mov    %edx,%eax
  100c5c:	83 e0 00             	and    $0x0,%eax
  100c5f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100c62:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100c65:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100c68:	89 c2                	mov    %eax,%edx
  100c6a:	b8 00 00 00 00       	mov    $0x0,%eax
  100c6f:	c1 e2 10             	shl    $0x10,%edx
  100c72:	89 ce                	mov    %ecx,%esi
  100c74:	09 c6                	or     %eax,%esi
  100c76:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100c79:	09 d3                	or     %edx,%ebx
  100c7b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  100c7e:	8b 45 08             	mov    0x8(%ebp),%eax
  100c81:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  100c84:	8b 75 cc             	mov    -0x34(%ebp),%esi
  100c87:	89 1c c5 a0 99 12 00 	mov    %ebx,0x1299a0(,%eax,8)
  100c8e:	89 34 c5 a4 99 12 00 	mov    %esi,0x1299a4(,%eax,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100c95:	8b 45 08             	mov    0x8(%ebp),%eax
  100c98:	8b 0c c5 a0 99 12 00 	mov    0x1299a0(,%eax,8),%ecx
  100c9f:	8b 1c c5 a4 99 12 00 	mov    0x1299a4(,%eax,8),%ebx
  100ca6:	8b 45 14             	mov    0x14(%ebp),%eax
  100ca9:	c1 f8 08             	sar    $0x8,%eax
  100cac:	99                   	cltd   
  100cad:	0f b6 f0             	movzbl %al,%esi
  100cb0:	89 75 c0             	mov    %esi,-0x40(%ebp)
  100cb3:	89 d0                	mov    %edx,%eax
  100cb5:	83 e0 00             	and    $0x0,%eax
  100cb8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100cbb:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100cbe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100cc1:	89 c2                	mov    %eax,%edx
  100cc3:	b8 00 00 00 00       	mov    $0x0,%eax
  100cc8:	c1 e2 14             	shl    $0x14,%edx
  100ccb:	89 cf                	mov    %ecx,%edi
  100ccd:	09 c7                	or     %eax,%edi
  100ccf:	89 7d b8             	mov    %edi,-0x48(%ebp)
  100cd2:	09 d3                	or     %edx,%ebx
  100cd4:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  100cd7:	8b 45 08             	mov    0x8(%ebp),%eax
  100cda:	8b 5d b8             	mov    -0x48(%ebp),%ebx
  100cdd:	8b 75 bc             	mov    -0x44(%ebp),%esi
  100ce0:	89 1c c5 a0 99 12 00 	mov    %ebx,0x1299a0(,%eax,8)
  100ce7:	89 34 c5 a4 99 12 00 	mov    %esi,0x1299a4(,%eax,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100cee:	8b 45 08             	mov    0x8(%ebp),%eax
  100cf1:	8b 0c c5 a0 99 12 00 	mov    0x1299a0(,%eax,8),%ecx
  100cf8:	8b 1c c5 a4 99 12 00 	mov    0x1299a4(,%eax,8),%ebx
  100cff:	8b 45 0c             	mov    0xc(%ebp),%eax
  100d02:	c1 e8 18             	shr    $0x18,%eax
  100d05:	ba 00 00 00 00       	mov    $0x0,%edx
  100d0a:	89 c2                	mov    %eax,%edx
  100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
  100d11:	c1 e2 18             	shl    $0x18,%edx
  100d14:	89 ce                	mov    %ecx,%esi
  100d16:	09 c6                	or     %eax,%esi
  100d18:	89 75 b0             	mov    %esi,-0x50(%ebp)
  100d1b:	89 d9                	mov    %ebx,%ecx
  100d1d:	09 d1                	or     %edx,%ecx
  100d1f:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100d22:	8b 45 08             	mov    0x8(%ebp),%eax
  100d25:	8b 5d b0             	mov    -0x50(%ebp),%ebx
  100d28:	8b 75 b4             	mov    -0x4c(%ebp),%esi
  100d2b:	89 1c c5 a0 99 12 00 	mov    %ebx,0x1299a0(,%eax,8)
  100d32:	89 34 c5 a4 99 12 00 	mov    %esi,0x1299a4(,%eax,8)
}
  100d39:	83 c4 4c             	add    $0x4c,%esp
  100d3c:	5b                   	pop    %ebx
  100d3d:	5e                   	pop    %esi
  100d3e:	5f                   	pop    %edi
  100d3f:	5d                   	pop    %ebp
  100d40:	c3                   	ret    

00100d41 <init_gdt>:

void init_gdt(void) {
  100d41:	55                   	push   %ebp
  100d42:	89 e5                	mov    %esp,%ebp
  100d44:	83 ec 10             	sub    $0x10,%esp
	set_gdt_entry(0, 0, 0, 0);
  100d47:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d4e:	00 
  100d4f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100d56:	00 
  100d57:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100d5e:	00 
  100d5f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d66:	e8 e1 fd ff ff       	call   100b4c <set_gdt_entry>
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100d6b:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100d72:	00 
  100d73:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100d7a:	00 
  100d7b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100d82:	00 
  100d83:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100d8a:	e8 bd fd ff ff       	call   100b4c <set_gdt_entry>
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100d8f:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100d96:	00 
  100d97:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100d9e:	00 
  100d9f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100da6:	00 
  100da7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100dae:	e8 99 fd ff ff       	call   100b4c <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100db3:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100dba:	00 
  100dbb:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100dc2:	00 
  100dc3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100dca:	00 
  100dcb:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100dd2:	e8 75 fd ff ff       	call   100b4c <set_gdt_entry>
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100dd7:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100dde:	00 
  100ddf:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100de6:	00 
  100de7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100dee:	00 
  100def:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100df6:	e8 51 fd ff ff       	call   100b4c <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  100dfb:	e8 25 fd ff ff       	call   100b25 <load_gdt>
}
  100e00:	c9                   	leave  
  100e01:	c3                   	ret    

00100e02 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  100e02:	55                   	push   %ebp
  100e03:	89 e5                	mov    %esp,%ebp
  100e05:	83 ec 08             	sub    $0x8,%esp
  100e08:	8b 55 08             	mov    0x8(%ebp),%edx
  100e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
  100e0e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100e12:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100e15:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  100e19:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100e1d:	ee                   	out    %al,(%dx)
}
  100e1e:	c9                   	leave  
  100e1f:	c3                   	ret    

00100e20 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  100e20:	55                   	push   %ebp
  100e21:	89 e5                	mov    %esp,%ebp
  100e23:	57                   	push   %edi
  100e24:	56                   	push   %esi
  100e25:	53                   	push   %ebx
  100e26:	83 ec 34             	sub    $0x34,%esp
  100e29:	8b 55 10             	mov    0x10(%ebp),%edx
  100e2c:	8b 45 14             	mov    0x14(%ebp),%eax
  100e2f:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  100e33:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  100e36:	8b 45 0c             	mov    0xc(%ebp),%eax
  100e39:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  100e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e3f:	ba 00 00 00 00       	mov    $0x0,%edx
  100e44:	0f b7 c8             	movzwl %ax,%ecx
  100e47:	89 d0                	mov    %edx,%eax
  100e49:	83 e0 00             	and    $0x0,%eax
  100e4c:	89 c3                	mov    %eax,%ebx
  100e4e:	8b 45 08             	mov    0x8(%ebp),%eax
  100e51:	89 0c c5 40 90 12 00 	mov    %ecx,0x129040(,%eax,8)
  100e58:	89 1c c5 44 90 12 00 	mov    %ebx,0x129044(,%eax,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  100e5f:	8b 45 08             	mov    0x8(%ebp),%eax
  100e62:	8b 0c c5 40 90 12 00 	mov    0x129040(,%eax,8),%ecx
  100e69:	8b 1c c5 44 90 12 00 	mov    0x129044(,%eax,8),%ebx
  100e70:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  100e74:	ba 00 00 00 00       	mov    $0x0,%edx
  100e79:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  100e7d:	c1 e0 10             	shl    $0x10,%eax
  100e80:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100e83:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  100e86:	89 c8                	mov    %ecx,%eax
  100e88:	0b 45 d0             	or     -0x30(%ebp),%eax
  100e8b:	89 c6                	mov    %eax,%esi
  100e8d:	89 d8                	mov    %ebx,%eax
  100e8f:	0b 45 d4             	or     -0x2c(%ebp),%eax
  100e92:	89 c7                	mov    %eax,%edi
  100e94:	8b 45 08             	mov    0x8(%ebp),%eax
  100e97:	89 34 c5 40 90 12 00 	mov    %esi,0x129040(,%eax,8)
  100e9e:	89 3c c5 44 90 12 00 	mov    %edi,0x129044(,%eax,8)
	idt[i] |= (flags & 0xffLL) << 40;
  100ea5:	8b 45 08             	mov    0x8(%ebp),%eax
  100ea8:	8b 0c c5 40 90 12 00 	mov    0x129040(,%eax,8),%ecx
  100eaf:	8b 1c c5 44 90 12 00 	mov    0x129044(,%eax,8),%ebx
  100eb6:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  100eba:	ba 00 00 00 00       	mov    $0x0,%edx
  100ebf:	89 c2                	mov    %eax,%edx
  100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
  100ec6:	c1 e2 08             	shl    $0x8,%edx
  100ec9:	89 cf                	mov    %ecx,%edi
  100ecb:	09 c7                	or     %eax,%edi
  100ecd:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100ed0:	09 d3                	or     %edx,%ebx
  100ed2:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  100ed5:	8b 45 08             	mov    0x8(%ebp),%eax
  100ed8:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  100edb:	8b 75 cc             	mov    -0x34(%ebp),%esi
  100ede:	89 1c c5 40 90 12 00 	mov    %ebx,0x129040(,%eax,8)
  100ee5:	89 34 c5 44 90 12 00 	mov    %esi,0x129044(,%eax,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  100eec:	8b 45 08             	mov    0x8(%ebp),%eax
  100eef:	8b 0c c5 40 90 12 00 	mov    0x129040(,%eax,8),%ecx
  100ef6:	8b 1c c5 44 90 12 00 	mov    0x129044(,%eax,8),%ebx
  100efd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f00:	c1 e8 10             	shr    $0x10,%eax
  100f03:	ba 00 00 00 00       	mov    $0x0,%edx
  100f08:	89 c2                	mov    %eax,%edx
  100f0a:	b8 00 00 00 00       	mov    $0x0,%eax
  100f0f:	c1 e2 10             	shl    $0x10,%edx
  100f12:	89 cf                	mov    %ecx,%edi
  100f14:	09 c7                	or     %eax,%edi
  100f16:	89 7d c0             	mov    %edi,-0x40(%ebp)
  100f19:	09 d3                	or     %edx,%ebx
  100f1b:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
  100f1e:	8b 45 08             	mov    0x8(%ebp),%eax
  100f21:	8b 55 c0             	mov    -0x40(%ebp),%edx
  100f24:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  100f27:	89 14 c5 40 90 12 00 	mov    %edx,0x129040(,%eax,8)
  100f2e:	89 0c c5 44 90 12 00 	mov    %ecx,0x129044(,%eax,8)
}
  100f35:	83 c4 34             	add    $0x34,%esp
  100f38:	5b                   	pop    %ebx
  100f39:	5e                   	pop    %esi
  100f3a:	5f                   	pop    %edi
  100f3b:	5d                   	pop    %ebp
  100f3c:	c3                   	ret    

00100f3d <init_idt>:

void init_idt() {
  100f3d:	55                   	push   %ebp
  100f3e:	89 e5                	mov    %esp,%ebp
  100f40:	83 ec 28             	sub    $0x28,%esp
	struct {
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
  100f43:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  100f49:	c7 45 f0 40 90 12 00 	movl   $0x129040,-0x10(%ebp)
			idt, };

	int i = 0;
  100f50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  100f57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100f5e:	eb 20                	jmp    100f80 <init_idt+0x43>
		handler_set[i] = 0;
  100f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f63:	c7 04 85 40 93 12 00 	movl   $0x0,0x129340(,%eax,4)
  100f6a:	00 00 00 00 
		irq_rpcs[i] = 0;
  100f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f71:	c7 04 85 40 94 12 00 	movl   $0x0,0x129440(,%eax,4)
  100f78:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  100f7c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100f80:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  100f84:	7e da                	jle    100f60 <init_idt+0x23>
		handler_set[i] = 0;
		irq_rpcs[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  100f86:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100f8d:	00 
  100f8e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100f95:	e8 68 fe ff ff       	call   100e02 <outb>
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  100f9a:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  100fa1:	00 
  100fa2:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100fa9:	e8 54 fe ff ff       	call   100e02 <outb>
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  100fae:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  100fb5:	00 
  100fb6:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100fbd:	e8 40 fe ff ff       	call   100e02 <outb>
	outb(0x21, 0x01); // ICW 4
  100fc2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100fc9:	00 
  100fca:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100fd1:	e8 2c fe ff ff       	call   100e02 <outb>

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  100fd6:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100fdd:	00 
  100fde:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100fe5:	e8 18 fe ff ff       	call   100e02 <outb>
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  100fea:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  100ff1:	00 
  100ff2:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100ff9:	e8 04 fe ff ff       	call   100e02 <outb>
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  100ffe:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101005:	00 
  101006:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10100d:	e8 f0 fd ff ff       	call   100e02 <outb>
	outb(0xa1, 0x01); // ICW 4
  101012:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  101019:	00 
  10101a:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101021:	e8 dc fd ff ff       	call   100e02 <outb>

	outb(0x20, 0x0);
  101026:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10102d:	00 
  10102e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101035:	e8 c8 fd ff ff       	call   100e02 <outb>
	outb(0xa0, 0x0);
  10103a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101041:	00 
  101042:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101049:	e8 b4 fd ff ff       	call   100e02 <outb>

	idt_set_entry(0, intr_stub_0, 0x8,
  10104e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101055:	00 
  101056:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10105d:	00 
  10105e:	c7 44 24 04 0c 00 10 	movl   $0x10000c,0x4(%esp)
  101065:	00 
  101066:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10106d:	e8 ae fd ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  101072:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101079:	00 
  10107a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101081:	00 
  101082:	c7 44 24 04 15 00 10 	movl   $0x100015,0x4(%esp)
  101089:	00 
  10108a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101091:	e8 8a fd ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  101096:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10109d:	00 
  10109e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010a5:	00 
  1010a6:	c7 44 24 04 1e 00 10 	movl   $0x10001e,0x4(%esp)
  1010ad:	00 
  1010ae:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1010b5:	e8 66 fd ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  1010ba:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010c1:	00 
  1010c2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010c9:	00 
  1010ca:	c7 44 24 04 27 00 10 	movl   $0x100027,0x4(%esp)
  1010d1:	00 
  1010d2:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1010d9:	e8 42 fd ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  1010de:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010e5:	00 
  1010e6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010ed:	00 
  1010ee:	c7 44 24 04 30 00 10 	movl   $0x100030,0x4(%esp)
  1010f5:	00 
  1010f6:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1010fd:	e8 1e fd ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101102:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101109:	00 
  10110a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101111:	00 
  101112:	c7 44 24 04 39 00 10 	movl   $0x100039,0x4(%esp)
  101119:	00 
  10111a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101121:	e8 fa fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  101126:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10112d:	00 
  10112e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101135:	00 
  101136:	c7 44 24 04 42 00 10 	movl   $0x100042,0x4(%esp)
  10113d:	00 
  10113e:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  101145:	e8 d6 fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  10114a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101151:	00 
  101152:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101159:	00 
  10115a:	c7 44 24 04 4b 00 10 	movl   $0x10004b,0x4(%esp)
  101161:	00 
  101162:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101169:	e8 b2 fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  10116e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101175:	00 
  101176:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10117d:	00 
  10117e:	c7 44 24 04 54 00 10 	movl   $0x100054,0x4(%esp)
  101185:	00 
  101186:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  10118d:	e8 8e fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101192:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101199:	00 
  10119a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011a1:	00 
  1011a2:	c7 44 24 04 5b 00 10 	movl   $0x10005b,0x4(%esp)
  1011a9:	00 
  1011aa:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1011b1:	e8 6a fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1011b6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011bd:	00 
  1011be:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011c5:	00 
  1011c6:	c7 44 24 04 64 00 10 	movl   $0x100064,0x4(%esp)
  1011cd:	00 
  1011ce:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1011d5:	e8 46 fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  1011da:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011e1:	00 
  1011e2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011e9:	00 
  1011ea:	c7 44 24 04 6b 00 10 	movl   $0x10006b,0x4(%esp)
  1011f1:	00 
  1011f2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1011f9:	e8 22 fc ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  1011fe:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101205:	00 
  101206:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10120d:	00 
  10120e:	c7 44 24 04 72 00 10 	movl   $0x100072,0x4(%esp)
  101215:	00 
  101216:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10121d:	e8 fe fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  101222:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101229:	00 
  10122a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101231:	00 
  101232:	c7 44 24 04 79 00 10 	movl   $0x100079,0x4(%esp)
  101239:	00 
  10123a:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101241:	e8 da fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  101246:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10124d:	00 
  10124e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101255:	00 
  101256:	c7 44 24 04 80 00 10 	movl   $0x100080,0x4(%esp)
  10125d:	00 
  10125e:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  101265:	e8 b6 fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10126a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101271:	00 
  101272:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101279:	00 
  10127a:	c7 44 24 04 84 00 10 	movl   $0x100084,0x4(%esp)
  101281:	00 
  101282:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101289:	e8 92 fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  10128e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101295:	00 
  101296:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10129d:	00 
  10129e:	c7 44 24 04 8a 00 10 	movl   $0x10008a,0x4(%esp)
  1012a5:	00 
  1012a6:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1012ad:	e8 6e fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  1012b2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012b9:	00 
  1012ba:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012c1:	00 
  1012c2:	c7 44 24 04 90 00 10 	movl   $0x100090,0x4(%esp)
  1012c9:	00 
  1012ca:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1012d1:	e8 4a fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1012d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012dd:	00 
  1012de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012e5:	00 
  1012e6:	c7 44 24 04 94 00 10 	movl   $0x100094,0x4(%esp)
  1012ed:	00 
  1012ee:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1012f5:	e8 26 fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  1012fa:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101301:	00 
  101302:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101309:	00 
  10130a:	c7 44 24 04 9a 00 10 	movl   $0x10009a,0x4(%esp)
  101311:	00 
  101312:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101319:	e8 02 fb ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10131e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101325:	00 
  101326:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10132d:	00 
  10132e:	c7 44 24 04 a0 00 10 	movl   $0x1000a0,0x4(%esp)
  101335:	00 
  101336:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10133d:	e8 de fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  101342:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101349:	00 
  10134a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101351:	00 
  101352:	c7 44 24 04 a6 00 10 	movl   $0x1000a6,0x4(%esp)
  101359:	00 
  10135a:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101361:	e8 ba fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  101366:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10136d:	00 
  10136e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101375:	00 
  101376:	c7 44 24 04 ac 00 10 	movl   $0x1000ac,0x4(%esp)
  10137d:	00 
  10137e:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101385:	e8 96 fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  10138a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101391:	00 
  101392:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101399:	00 
  10139a:	c7 44 24 04 b2 00 10 	movl   $0x1000b2,0x4(%esp)
  1013a1:	00 
  1013a2:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  1013a9:	e8 72 fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  1013ae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013b5:	00 
  1013b6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013bd:	00 
  1013be:	c7 44 24 04 b8 00 10 	movl   $0x1000b8,0x4(%esp)
  1013c5:	00 
  1013c6:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1013cd:	e8 4e fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  1013d2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013d9:	00 
  1013da:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013e1:	00 
  1013e2:	c7 44 24 04 be 00 10 	movl   $0x1000be,0x4(%esp)
  1013e9:	00 
  1013ea:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1013f1:	e8 2a fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  1013f6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013fd:	00 
  1013fe:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101405:	00 
  101406:	c7 44 24 04 c4 00 10 	movl   $0x1000c4,0x4(%esp)
  10140d:	00 
  10140e:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101415:	e8 06 fa ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  10141a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101421:	00 
  101422:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101429:	00 
  10142a:	c7 44 24 04 ca 00 10 	movl   $0x1000ca,0x4(%esp)
  101431:	00 
  101432:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101439:	e8 e2 f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  10143e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101445:	00 
  101446:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10144d:	00 
  10144e:	c7 44 24 04 d0 00 10 	movl   $0x1000d0,0x4(%esp)
  101455:	00 
  101456:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  10145d:	e8 be f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  101462:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101469:	00 
  10146a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101471:	00 
  101472:	c7 44 24 04 d6 00 10 	movl   $0x1000d6,0x4(%esp)
  101479:	00 
  10147a:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101481:	e8 9a f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101486:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10148d:	00 
  10148e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101495:	00 
  101496:	c7 44 24 04 dc 00 10 	movl   $0x1000dc,0x4(%esp)
  10149d:	00 
  10149e:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  1014a5:	e8 76 f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  1014aa:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014b1:	00 
  1014b2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014b9:	00 
  1014ba:	c7 44 24 04 e2 00 10 	movl   $0x1000e2,0x4(%esp)
  1014c1:	00 
  1014c2:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  1014c9:	e8 52 f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  1014ce:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014d5:	00 
  1014d6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014dd:	00 
  1014de:	c7 44 24 04 e8 00 10 	movl   $0x1000e8,0x4(%esp)
  1014e5:	00 
  1014e6:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  1014ed:	e8 2e f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  1014f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014f9:	00 
  1014fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101501:	00 
  101502:	c7 44 24 04 ee 00 10 	movl   $0x1000ee,0x4(%esp)
  101509:	00 
  10150a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101511:	e8 0a f9 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101516:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10151d:	00 
  10151e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101525:	00 
  101526:	c7 44 24 04 f4 00 10 	movl   $0x1000f4,0x4(%esp)
  10152d:	00 
  10152e:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101535:	e8 e6 f8 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  10153a:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101541:	00 
  101542:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101549:	00 
  10154a:	c7 44 24 04 fa 00 10 	movl   $0x1000fa,0x4(%esp)
  101551:	00 
  101552:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101559:	e8 c2 f8 ff ff       	call   100e20 <idt_set_entry>
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  10155e:	b8 20 62 10 00       	mov    $0x106220,%eax
  101563:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  10156a:	00 
  10156b:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101572:	00 
  101573:	89 44 24 04          	mov    %eax,0x4(%esp)
  101577:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  10157e:	e8 c9 f5 ff ff       	call   100b4c <set_gdt_entry>
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101583:	b8 28 00 00 00       	mov    $0x28,%eax
  101588:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  10158b:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  10158f:	fb                   	sti    
}
  101590:	c9                   	leave  
  101591:	c3                   	ret    

00101592 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101592:	55                   	push   %ebp
  101593:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  101595:	8b 45 08             	mov    0x8(%ebp),%eax
  101598:	8b 55 0c             	mov    0xc(%ebp),%edx
  10159b:	89 14 85 40 92 12 00 	mov    %edx,0x129240(,%eax,4)
	handler_set[i] = 1;
  1015a2:	8b 45 08             	mov    0x8(%ebp),%eax
  1015a5:	c7 04 85 40 93 12 00 	movl   $0x1,0x129340(,%eax,4)
  1015ac:	01 00 00 00 
}
  1015b0:	5d                   	pop    %ebp
  1015b1:	c3                   	ret    

001015b2 <register_irq_rpc>:

uint32_t register_irq_rpc(uint32_t irq) {
  1015b2:	55                   	push   %ebp
  1015b3:	89 e5                	mov    %esp,%ebp
  1015b5:	83 ec 08             	sub    $0x8,%esp
    if (irq >= 0x20 && irq <= 0x2f) {
  1015b8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  1015bc:	76 1e                	jbe    1015dc <register_irq_rpc+0x2a>
  1015be:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  1015c2:	77 18                	ja     1015dc <register_irq_rpc+0x2a>
        irq_rpcs[irq] = get_current_task()->PID;
  1015c4:	e8 56 19 00 00       	call   102f1f <get_current_task>
  1015c9:	8b 10                	mov    (%eax),%edx
  1015cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1015ce:	89 14 85 40 94 12 00 	mov    %edx,0x129440(,%eax,4)
        return 1;
  1015d5:	b8 01 00 00 00       	mov    $0x1,%eax
  1015da:	eb 05                	jmp    1015e1 <register_irq_rpc+0x2f>
    }
    return 0;
  1015dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1015e1:	c9                   	leave  
  1015e2:	c3                   	ret    

001015e3 <disable_irq_rpc>:

void disable_irq_rpc(uint32_t irq) {
  1015e3:	55                   	push   %ebp
  1015e4:	89 e5                	mov    %esp,%ebp
    if (irq >= 0x20 && irq <= 0x2f) {
  1015e6:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  1015ea:	76 2c                	jbe    101618 <disable_irq_rpc+0x35>
  1015ec:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  1015f0:	77 26                	ja     101618 <disable_irq_rpc+0x35>
        if(irq_rpcs[irq] > 0) {
  1015f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1015f5:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  1015fc:	85 c0                	test   %eax,%eax
  1015fe:	7e 18                	jle    101618 <disable_irq_rpc+0x35>
            irq_rpcs[irq] = -irq_rpcs[irq];
  101600:	8b 45 08             	mov    0x8(%ebp),%eax
  101603:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  10160a:	f7 d8                	neg    %eax
  10160c:	89 c2                	mov    %eax,%edx
  10160e:	8b 45 08             	mov    0x8(%ebp),%eax
  101611:	89 14 85 40 94 12 00 	mov    %edx,0x129440(,%eax,4)
        }
    }
}
  101618:	5d                   	pop    %ebp
  101619:	c3                   	ret    

0010161a <enable_irq_rpc>:

void enable_irq_rpc(uint32_t irq) {
  10161a:	55                   	push   %ebp
  10161b:	89 e5                	mov    %esp,%ebp
    if (irq >= 0x20 && irq <= 0x2f) {
  10161d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  101621:	76 2c                	jbe    10164f <enable_irq_rpc+0x35>
  101623:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  101627:	77 26                	ja     10164f <enable_irq_rpc+0x35>
        if(irq_rpcs[irq] < 0) {
  101629:	8b 45 08             	mov    0x8(%ebp),%eax
  10162c:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  101633:	85 c0                	test   %eax,%eax
  101635:	79 18                	jns    10164f <enable_irq_rpc+0x35>
            irq_rpcs[irq] = -irq_rpcs[irq];
  101637:	8b 45 08             	mov    0x8(%ebp),%eax
  10163a:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  101641:	f7 d8                	neg    %eax
  101643:	89 c2                	mov    %eax,%edx
  101645:	8b 45 08             	mov    0x8(%ebp),%eax
  101648:	89 14 85 40 94 12 00 	mov    %edx,0x129440(,%eax,4)
        }
    }
}
  10164f:	5d                   	pop    %ebp
  101650:	c3                   	ret    

00101651 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  101651:	55                   	push   %ebp
  101652:	89 e5                	mov    %esp,%ebp
  101654:	83 ec 38             	sub    $0x38,%esp
	struct cpu_state* new_cpu = cpu;
  101657:	8b 45 08             	mov    0x8(%ebp),%eax
  10165a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (cpu->intr <= 0x1f) {
  10165d:	8b 45 08             	mov    0x8(%ebp),%eax
  101660:	8b 40 1c             	mov    0x1c(%eax),%eax
  101663:	83 f8 1f             	cmp    $0x1f,%eax
  101666:	77 34                	ja     10169c <handle_interrupt+0x4b>
		if (!isSchedulingEnabled()) {
  101668:	e8 a8 18 00 00       	call   102f15 <isSchedulingEnabled>
  10166d:	85 c0                	test   %eax,%eax
  10166f:	75 18                	jne    101689 <handle_interrupt+0x38>
			show_cod(cpu, "Kernel PANIC!");
  101671:	c7 44 24 04 ce 71 10 	movl   $0x1071ce,0x4(%esp)
  101678:	00 
  101679:	8b 45 08             	mov    0x8(%ebp),%eax
  10167c:	89 04 24             	mov    %eax,(%esp)
  10167f:	e8 36 eb ff ff       	call   1001ba <show_cod>
  101684:	e9 17 01 00 00       	jmp    1017a0 <handle_interrupt+0x14f>
		} else {
			new_cpu = schedule_exception(cpu);
  101689:	8b 45 08             	mov    0x8(%ebp),%eax
  10168c:	89 04 24             	mov    %eax,(%esp)
  10168f:	e8 b7 19 00 00       	call   10304b <schedule_exception>
  101694:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101697:	e9 04 01 00 00       	jmp    1017a0 <handle_interrupt+0x14f>
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  10169c:	8b 45 08             	mov    0x8(%ebp),%eax
  10169f:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016a2:	83 f8 1f             	cmp    $0x1f,%eax
  1016a5:	0f 86 c7 00 00 00    	jbe    101772 <handle_interrupt+0x121>
  1016ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1016ae:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016b1:	83 f8 2f             	cmp    $0x2f,%eax
  1016b4:	0f 87 b8 00 00 00    	ja     101772 <handle_interrupt+0x121>
		if (cpu->intr >= 0x28) {
  1016ba:	8b 45 08             	mov    0x8(%ebp),%eax
  1016bd:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016c0:	83 f8 27             	cmp    $0x27,%eax
  1016c3:	76 14                	jbe    1016d9 <handle_interrupt+0x88>
			outb(0xa0, 0x20);
  1016c5:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1016cc:	00 
  1016cd:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1016d4:	e8 29 f7 ff ff       	call   100e02 <outb>
		}

		if (cpu->intr == 0x20) {
  1016d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1016dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016df:	83 f8 20             	cmp    $0x20,%eax
  1016e2:	75 10                	jne    1016f4 <handle_interrupt+0xa3>
			new_cpu = schedule(cpu);
  1016e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1016e7:	89 04 24             	mov    %eax,(%esp)
  1016ea:	e8 42 1d 00 00       	call   103431 <schedule>
  1016ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1016f2:	eb 68                	jmp    10175c <handle_interrupt+0x10b>
		}
		else
		{
            if (handler_set[cpu->intr]) {
  1016f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1016f7:	8b 40 1c             	mov    0x1c(%eax),%eax
  1016fa:	8b 04 85 40 93 12 00 	mov    0x129340(,%eax,4),%eax
  101701:	85 c0                	test   %eax,%eax
  101703:	74 0f                	je     101714 <handle_interrupt+0xc3>
                handlers[cpu->intr]();
  101705:	8b 45 08             	mov    0x8(%ebp),%eax
  101708:	8b 40 1c             	mov    0x1c(%eax),%eax
  10170b:	8b 04 85 40 92 12 00 	mov    0x129240(,%eax,4),%eax
  101712:	ff d0                	call   *%eax
            }
            if(irq_rpcs[cpu->intr] > 0) {
  101714:	8b 45 08             	mov    0x8(%ebp),%eax
  101717:	8b 40 1c             	mov    0x1c(%eax),%eax
  10171a:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  101721:	85 c0                	test   %eax,%eax
  101723:	7e 37                	jle    10175c <handle_interrupt+0x10b>
                create_rpc_call(irq_rpcs[cpu->intr], RPCT_IRQ, cpu->intr, 0, 0);
  101725:	8b 45 08             	mov    0x8(%ebp),%eax
  101728:	8b 50 1c             	mov    0x1c(%eax),%edx
  10172b:	8b 45 08             	mov    0x8(%ebp),%eax
  10172e:	8b 40 1c             	mov    0x1c(%eax),%eax
  101731:	8b 04 85 40 94 12 00 	mov    0x129440(,%eax,4),%eax
  101738:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  10173f:	00 
  101740:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101747:	00 
  101748:	89 54 24 08          	mov    %edx,0x8(%esp)
  10174c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101753:	00 
  101754:	89 04 24             	mov    %eax,(%esp)
  101757:	e8 1e 1e 00 00       	call   10357a <create_rpc_call>
                //disable_irq_rpc(cpu->intr); TODO find out if we need to block
            }
		}

        outb(0x20, 0x20);
  10175c:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101763:	00 
  101764:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10176b:	e8 92 f6 ff ff       	call   100e02 <outb>
  101770:	eb 2e                	jmp    1017a0 <handle_interrupt+0x14f>
	} else if (cpu->intr == 0x30) {
  101772:	8b 45 08             	mov    0x8(%ebp),%eax
  101775:	8b 40 1c             	mov    0x1c(%eax),%eax
  101778:	83 f8 30             	cmp    $0x30,%eax
  10177b:	75 10                	jne    10178d <handle_interrupt+0x13c>
		new_cpu = syscall(new_cpu);
  10177d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101780:	89 04 24             	mov    %eax,(%esp)
  101783:	e8 5b 00 00 00       	call   1017e3 <syscall>
  101788:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10178b:	eb 13                	jmp    1017a0 <handle_interrupt+0x14f>
	} else {
		show_cod(cpu, "Unknown Interrupt!");
  10178d:	c7 44 24 04 dc 71 10 	movl   $0x1071dc,0x4(%esp)
  101794:	00 
  101795:	8b 45 08             	mov    0x8(%ebp),%eax
  101798:	89 04 24             	mov    %eax,(%esp)
  10179b:	e8 1a ea ff ff       	call   1001ba <show_cod>
	}

	return new_cpu;
  1017a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1017a3:	c9                   	leave  
  1017a4:	c3                   	ret    

001017a5 <outw>:
    uint32_t result;
    asm volatile ("inl %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline void outw(uint16_t _port, uint16_t _data) {
  1017a5:	55                   	push   %ebp
  1017a6:	89 e5                	mov    %esp,%ebp
  1017a8:	83 ec 08             	sub    $0x8,%esp
  1017ab:	8b 55 08             	mov    0x8(%ebp),%edx
  1017ae:	8b 45 0c             	mov    0xc(%ebp),%eax
  1017b1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1017b5:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
  1017b9:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
  1017bd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1017c1:	66 ef                	out    %ax,(%dx)
}
  1017c3:	c9                   	leave  
  1017c4:	c3                   	ret    

001017c5 <outb>:

static inline void outb(uint16_t _port, uint8_t _data) {
  1017c5:	55                   	push   %ebp
  1017c6:	89 e5                	mov    %esp,%ebp
  1017c8:	83 ec 08             	sub    $0x8,%esp
  1017cb:	8b 55 08             	mov    0x8(%ebp),%edx
  1017ce:	8b 45 0c             	mov    0xc(%ebp),%eax
  1017d1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1017d5:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1017d8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  1017dc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1017e0:	ee                   	out    %al,(%dx)
}
  1017e1:	c9                   	leave  
  1017e2:	c3                   	ret    

001017e3 <syscall>:
    char* stdin;
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  1017e3:	55                   	push   %ebp
  1017e4:	89 e5                	mov    %esp,%ebp
  1017e6:	56                   	push   %esi
  1017e7:	53                   	push   %ebx
  1017e8:	81 ec 90 00 00 00    	sub    $0x90,%esp
    cpu = save_cpu_state(cpu);
  1017ee:	8b 45 08             	mov    0x8(%ebp),%eax
  1017f1:	89 04 24             	mov    %eax,(%esp)
  1017f4:	e8 6c 1b 00 00       	call   103365 <save_cpu_state>
  1017f9:	89 45 08             	mov    %eax,0x8(%ebp)

	switch (cpu->eax) {
  1017fc:	8b 45 08             	mov    0x8(%ebp),%eax
  1017ff:	8b 00                	mov    (%eax),%eax
  101801:	3d cd 00 00 00       	cmp    $0xcd,%eax
  101806:	0f 87 a2 06 00 00    	ja     101eae <syscall+0x6cb>
  10180c:	8b 04 85 0c 72 10 00 	mov    0x10720c(,%eax,4),%eax
  101813:	ff e0                	jmp    *%eax
	case 1: /* exit */
		return terminate_current(cpu);
  101815:	8b 45 08             	mov    0x8(%ebp),%eax
  101818:	89 04 24             	mov    %eax,(%esp)
  10181b:	e8 21 19 00 00       	call   103141 <terminate_current>
  101820:	e9 a2 06 00 00       	jmp    101ec7 <syscall+0x6e4>

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  101825:	8b 45 08             	mov    0x8(%ebp),%eax
  101828:	8b 40 04             	mov    0x4(%eax),%eax
  10182b:	89 04 24             	mov    %eax,(%esp)
  10182e:	e8 41 26 00 00       	call   103e74 <strclone>
  101833:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct exec_info* einp = (void*) cpu->edx;
  101836:	8b 45 08             	mov    0x8(%ebp),%eax
  101839:	8b 40 0c             	mov    0xc(%eax),%eax
  10183c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        struct exec_info ein = {
  10183f:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  101846:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
  10184d:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
  101854:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };

        if(einp != 0) {
  10185b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  10185f:	74 43                	je     1018a4 <syscall+0xc1>
            ein.execPath = strclone(einp->execPath);
  101861:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101864:	8b 00                	mov    (%eax),%eax
  101866:	89 04 24             	mov    %eax,(%esp)
  101869:	e8 06 26 00 00       	call   103e74 <strclone>
  10186e:	89 45 90             	mov    %eax,-0x70(%ebp)
            ein.stdin = strclone(einp->stdin);
  101871:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101874:	8b 40 04             	mov    0x4(%eax),%eax
  101877:	89 04 24             	mov    %eax,(%esp)
  10187a:	e8 f5 25 00 00       	call   103e74 <strclone>
  10187f:	89 45 94             	mov    %eax,-0x6c(%ebp)
            ein.stdout = strclone(einp->stdout);
  101882:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101885:	8b 40 08             	mov    0x8(%eax),%eax
  101888:	89 04 24             	mov    %eax,(%esp)
  10188b:	e8 e4 25 00 00       	call   103e74 <strclone>
  101890:	89 45 98             	mov    %eax,-0x68(%ebp)
            ein.stderr = strclone(einp->stderr);
  101893:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101896:	8b 40 0c             	mov    0xc(%eax),%eax
  101899:	89 04 24             	mov    %eax,(%esp)
  10189c:	e8 d3 25 00 00       	call   103e74 <strclone>
  1018a1:	89 45 9c             	mov    %eax,-0x64(%ebp)
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  1018a4:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1018a7:	8b 5d 98             	mov    -0x68(%ebp),%ebx
  1018aa:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1018ad:	8b 55 90             	mov    -0x70(%ebp),%edx
  1018b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1018b3:	8b 40 08             	mov    0x8(%eax),%eax
  1018b6:	89 74 24 14          	mov    %esi,0x14(%esp)
  1018ba:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1018be:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1018c2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1018c6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1018cd:	89 04 24             	mov    %eax,(%esp)
  1018d0:	e8 ba 2e 00 00       	call   10478f <vfs_exec>
  1018d5:	8b 55 08             	mov    0x8(%ebp),%edx
  1018d8:	89 02                	mov    %eax,(%edx)

        if(einp != 0) {
  1018da:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  1018de:	74 2c                	je     10190c <syscall+0x129>
            free(ein.execPath);
  1018e0:	8b 45 90             	mov    -0x70(%ebp),%eax
  1018e3:	89 04 24             	mov    %eax,(%esp)
  1018e6:	e8 62 23 00 00       	call   103c4d <free>
            free(ein.stdin);
  1018eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1018ee:	89 04 24             	mov    %eax,(%esp)
  1018f1:	e8 57 23 00 00       	call   103c4d <free>
            free(ein.stdout);
  1018f6:	8b 45 98             	mov    -0x68(%ebp),%eax
  1018f9:	89 04 24             	mov    %eax,(%esp)
  1018fc:	e8 4c 23 00 00       	call   103c4d <free>
            free(ein.stderr);
  101901:	8b 45 9c             	mov    -0x64(%ebp),%eax
  101904:	89 04 24             	mov    %eax,(%esp)
  101907:	e8 41 23 00 00       	call   103c4d <free>
        }

        free(path);
  10190c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10190f:	89 04 24             	mov    %eax,(%esp)
  101912:	e8 36 23 00 00       	call   103c4d <free>
    }
        break;
  101917:	e9 a8 05 00 00       	jmp    101ec4 <syscall+0x6e1>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  10191c:	e8 fe 15 00 00       	call   102f1f <get_current_task>
  101921:	8b 40 20             	mov    0x20(%eax),%eax
  101924:	89 c2                	mov    %eax,%edx
  101926:	8b 45 08             	mov    0x8(%ebp),%eax
  101929:	89 10                	mov    %edx,(%eax)
    }
        break;
  10192b:	e9 94 05 00 00       	jmp    101ec4 <syscall+0x6e1>

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  101930:	8b 45 08             	mov    0x8(%ebp),%eax
  101933:	89 04 24             	mov    %eax,(%esp)
  101936:	e8 f6 1a 00 00       	call   103431 <schedule>
  10193b:	89 45 08             	mov    %eax,0x8(%ebp)
    }
        break;
  10193e:	e9 81 05 00 00       	jmp    101ec4 <syscall+0x6e1>

    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
  101943:	8b 45 08             	mov    0x8(%ebp),%eax
  101946:	8b 40 04             	mov    0x4(%eax),%eax
  101949:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  10194c:	e8 ce 15 00 00       	call   102f1f <get_current_task>
  101951:	8b 40 28             	mov    0x28(%eax),%eax
  101954:	85 c0                	test   %eax,%eax
  101956:	74 1c                	je     101974 <syscall+0x191>
  101958:	e8 c2 15 00 00       	call   102f1f <get_current_task>
  10195d:	8b 40 28             	mov    0x28(%eax),%eax
  101960:	89 44 24 04          	mov    %eax,0x4(%esp)
  101964:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101967:	89 04 24             	mov    %eax,(%esp)
  10196a:	e8 d6 24 00 00       	call   103e45 <strcpy>
    }
        break;
  10196f:	e9 50 05 00 00       	jmp    101ec4 <syscall+0x6e1>
  101974:	e9 4b 05 00 00       	jmp    101ec4 <syscall+0x6e1>

    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  101979:	e8 cd 26 00 00       	call   10404b <vfs_reset_error>
        char* path = strclone((char*) cpu->ebx);
  10197e:	8b 45 08             	mov    0x8(%ebp),%eax
  101981:	8b 40 04             	mov    0x4(%eax),%eax
  101984:	89 04 24             	mov    %eax,(%esp)
  101987:	e8 e8 24 00 00       	call   103e74 <strclone>
  10198c:	89 45 dc             	mov    %eax,-0x24(%ebp)

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  10198f:	e8 8b 15 00 00       	call   102f1f <get_current_task>
  101994:	8b 40 28             	mov    0x28(%eax),%eax
  101997:	85 c0                	test   %eax,%eax
  101999:	74 10                	je     1019ab <syscall+0x1c8>
  10199b:	e8 7f 15 00 00       	call   102f1f <get_current_task>
  1019a0:	8b 40 28             	mov    0x28(%eax),%eax
  1019a3:	89 04 24             	mov    %eax,(%esp)
  1019a6:	e8 a2 22 00 00       	call   103c4d <free>

        char* new = vfs_resolve_path(path);
  1019ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1019ae:	89 04 24             	mov    %eax,(%esp)
  1019b1:	e8 c6 32 00 00       	call   104c7c <vfs_resolve_path>
  1019b6:	89 45 d8             	mov    %eax,-0x28(%ebp)

        cpu->eax = 0;
  1019b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1019bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        if(new) {
  1019c2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
  1019c6:	74 14                	je     1019dc <syscall+0x1f9>
            get_current_task()->execPath = new;
  1019c8:	e8 52 15 00 00       	call   102f1f <get_current_task>
  1019cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1019d0:	89 50 28             	mov    %edx,0x28(%eax)
            cpu->eax = 1;
  1019d3:	8b 45 08             	mov    0x8(%ebp),%eax
  1019d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        }

        free(path);
  1019dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1019df:	89 04 24             	mov    %eax,(%esp)
  1019e2:	e8 66 22 00 00       	call   103c4d <free>
    }
        break;
  1019e7:	e9 d8 04 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 10: /* fopen */
	{
        vfs_reset_error();
  1019ec:	e8 5a 26 00 00       	call   10404b <vfs_reset_error>
	    char* name = strclone((char*) cpu->ebx);
  1019f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1019f4:	8b 40 04             	mov    0x4(%eax),%eax
  1019f7:	89 04 24             	mov    %eax,(%esp)
  1019fa:	e8 75 24 00 00       	call   103e74 <strclone>
  1019ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101a02:	8b 45 08             	mov    0x8(%ebp),%eax
  101a05:	8b 40 08             	mov    0x8(%eax),%eax
  101a08:	89 45 d0             	mov    %eax,-0x30(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  101a0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  101a0e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a12:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101a15:	89 04 24             	mov    %eax,(%esp)
  101a18:	e8 17 2b 00 00       	call   104534 <vfs_open>
  101a1d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	    if(handle) {
  101a20:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  101a24:	74 15                	je     101a3b <syscall+0x258>
	        register_handle(handle);
  101a26:	8b 45 cc             	mov    -0x34(%ebp),%eax
  101a29:	89 04 24             	mov    %eax,(%esp)
  101a2c:	e8 26 15 00 00       	call   102f57 <register_handle>
	        cpu->eax = (uint32_t) handle;
  101a31:	8b 55 cc             	mov    -0x34(%ebp),%edx
  101a34:	8b 45 08             	mov    0x8(%ebp),%eax
  101a37:	89 10                	mov    %edx,(%eax)
  101a39:	eb 09                	jmp    101a44 <syscall+0x261>
	    }
	    else
	    {
	        cpu->eax = 0;
  101a3b:	8b 45 08             	mov    0x8(%ebp),%eax
  101a3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  101a44:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101a47:	89 04 24             	mov    %eax,(%esp)
  101a4a:	e8 fe 21 00 00       	call   103c4d <free>
	}
	    break;
  101a4f:	e9 70 04 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 11: /* fclose */
	{
        vfs_reset_error();
  101a54:	e8 f2 25 00 00       	call   10404b <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  101a59:	8b 45 08             	mov    0x8(%ebp),%eax
  101a5c:	8b 40 04             	mov    0x4(%eax),%eax
  101a5f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	    if(!unregister_handle(handle)) {
  101a62:	8b 45 c8             	mov    -0x38(%ebp),%eax
  101a65:	89 04 24             	mov    %eax,(%esp)
  101a68:	e8 37 15 00 00       	call   102fa4 <unregister_handle>
  101a6d:	85 c0                	test   %eax,%eax
  101a6f:	75 19                	jne    101a8a <syscall+0x2a7>
	        vfs_close(handle);
  101a71:	8b 45 c8             	mov    -0x38(%ebp),%eax
  101a74:	89 04 24             	mov    %eax,(%esp)
  101a77:	e8 13 2b 00 00       	call   10458f <vfs_close>

	        cpu->eax = 0;
  101a7c:	8b 45 08             	mov    0x8(%ebp),%eax
  101a7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    else
	    {
	        cpu->eax = (uint32_t) -1;
	    }
	}
	    break;
  101a85:	e9 3a 04 00 00       	jmp    101ec4 <syscall+0x6e1>

	        cpu->eax = 0;
	    }
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  101a8a:	8b 45 08             	mov    0x8(%ebp),%eax
  101a8d:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  101a93:	e9 2c 04 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 12: /* fwrite */
	{
        vfs_reset_error();
  101a98:	e8 ae 25 00 00       	call   10404b <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  101a9d:	8b 45 08             	mov    0x8(%ebp),%eax
  101aa0:	8b 40 04             	mov    0x4(%eax),%eax
  101aa3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	    if(handle != 0) {
  101aa6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  101aaa:	74 31                	je     101add <syscall+0x2fa>
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  101aac:	8b 45 08             	mov    0x8(%ebp),%eax
  101aaf:	8b 50 0c             	mov    0xc(%eax),%edx
  101ab2:	8b 45 08             	mov    0x8(%ebp),%eax
  101ab5:	8b 40 08             	mov    0x8(%eax),%eax
  101ab8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101abf:	00 
  101ac0:	89 54 24 08          	mov    %edx,0x8(%esp)
  101ac4:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ac8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  101acb:	89 04 24             	mov    %eax,(%esp)
  101ace:	e8 8e 2b 00 00       	call   104661 <vfs_write>
  101ad3:	8b 55 08             	mov    0x8(%ebp),%edx
  101ad6:	89 02                	mov    %eax,(%edx)
	    else
	    {
            cpu->eax = RW_ERR_VFS;
	    }
	}
	    break;
  101ad8:	e9 e7 03 00 00       	jmp    101ec4 <syscall+0x6e1>
	    if(handle != 0) {
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
	    }
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  101add:	8b 45 08             	mov    0x8(%ebp),%eax
  101ae0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  101ae6:	e9 d9 03 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 13: /* fread */
	{
        vfs_reset_error();
  101aeb:	e8 5b 25 00 00       	call   10404b <vfs_reset_error>
        struct res_handle* handle = (void*) cpu->ebx;
  101af0:	8b 45 08             	mov    0x8(%ebp),%eax
  101af3:	8b 40 04             	mov    0x4(%eax),%eax
  101af6:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if(handle != 0) {
  101af9:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
  101afd:	74 31                	je     101b30 <syscall+0x34d>
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  101aff:	8b 45 08             	mov    0x8(%ebp),%eax
  101b02:	8b 50 0c             	mov    0xc(%eax),%edx
  101b05:	8b 45 08             	mov    0x8(%ebp),%eax
  101b08:	8b 40 08             	mov    0x8(%eax),%eax
  101b0b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101b12:	00 
  101b13:	89 54 24 08          	mov    %edx,0x8(%esp)
  101b17:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b1b:	8b 45 c0             	mov    -0x40(%ebp),%eax
  101b1e:	89 04 24             	mov    %eax,(%esp)
  101b21:	e8 9c 2a 00 00       	call   1045c2 <vfs_read>
  101b26:	8b 55 08             	mov    0x8(%ebp),%edx
  101b29:	89 02                	mov    %eax,(%edx)
        else
        {
            cpu->eax = RW_ERR_VFS;
        }
	}
	    break;
  101b2b:	e9 94 03 00 00       	jmp    101ec4 <syscall+0x6e1>
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
        {
            cpu->eax = RW_ERR_VFS;
  101b30:	8b 45 08             	mov    0x8(%ebp),%eax
  101b33:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  101b39:	e9 86 03 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 14: /* fmkfifo */
	{
        vfs_reset_error();
  101b3e:	e8 08 25 00 00       	call   10404b <vfs_reset_error>
        char* name = strclone((char*) cpu->ebx);
  101b43:	8b 45 08             	mov    0x8(%ebp),%eax
  101b46:	8b 40 04             	mov    0x4(%eax),%eax
  101b49:	89 04 24             	mov    %eax,(%esp)
  101b4c:	e8 23 23 00 00       	call   103e74 <strclone>
  101b51:	89 45 bc             	mov    %eax,-0x44(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  101b54:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
  101b5b:	e8 20 0c 00 00       	call   102780 <ramfs_fifo_driver_struct>
  101b60:	8d 55 a0             	lea    -0x60(%ebp),%edx
  101b63:	89 54 24 08          	mov    %edx,0x8(%esp)
  101b67:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
  101b6e:	89 04 24             	mov    %eax,(%esp)
  101b71:	e8 2b 29 00 00       	call   1044a1 <vfs_create_kfile>

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  101b76:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  101b7d:	00 
  101b7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
  101b81:	89 04 24             	mov    %eax,(%esp)
  101b84:	e8 ab 29 00 00       	call   104534 <vfs_open>
  101b89:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if(handle) {
  101b8c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  101b90:	74 15                	je     101ba7 <syscall+0x3c4>
            register_handle(handle);
  101b92:	8b 45 b8             	mov    -0x48(%ebp),%eax
  101b95:	89 04 24             	mov    %eax,(%esp)
  101b98:	e8 ba 13 00 00       	call   102f57 <register_handle>
            cpu->eax = (uint32_t) handle;
  101b9d:	8b 55 b8             	mov    -0x48(%ebp),%edx
  101ba0:	8b 45 08             	mov    0x8(%ebp),%eax
  101ba3:	89 10                	mov    %edx,(%eax)
  101ba5:	eb 09                	jmp    101bb0 <syscall+0x3cd>
        }
        else
        {
            cpu->eax = 0;
  101ba7:	8b 45 08             	mov    0x8(%ebp),%eax
  101baa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  101bb0:	8b 45 bc             	mov    -0x44(%ebp),%eax
  101bb3:	89 04 24             	mov    %eax,(%esp)
  101bb6:	e8 92 20 00 00       	call   103c4d <free>
	}
	    break;
  101bbb:	e9 04 03 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
  101bc0:	e8 5a 13 00 00       	call   102f1f <get_current_task>
  101bc5:	8b 50 2c             	mov    0x2c(%eax),%edx
  101bc8:	8b 45 08             	mov    0x8(%ebp),%eax
  101bcb:	89 10                	mov    %edx,(%eax)
        vfs_reset_error();
  101bcd:	e8 79 24 00 00       	call   10404b <vfs_reset_error>
	}
	    break;
  101bd2:	e9 ed 02 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  101bd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	    switch(cpu->ebx) {
  101bde:	8b 45 08             	mov    0x8(%ebp),%eax
  101be1:	8b 40 04             	mov    0x4(%eax),%eax
  101be4:	83 f8 01             	cmp    $0x1,%eax
  101be7:	74 19                	je     101c02 <syscall+0x41f>
  101be9:	83 f8 01             	cmp    $0x1,%eax
  101bec:	72 07                	jb     101bf5 <syscall+0x412>
  101bee:	83 f8 02             	cmp    $0x2,%eax
  101bf1:	74 1c                	je     101c0f <syscall+0x42c>
  101bf3:	eb 27                	jmp    101c1c <syscall+0x439>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  101bf5:	e8 25 13 00 00       	call   102f1f <get_current_task>
  101bfa:	8b 40 30             	mov    0x30(%eax),%eax
  101bfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	        break;
  101c00:	eb 26                	jmp    101c28 <syscall+0x445>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  101c02:	e8 18 13 00 00       	call   102f1f <get_current_task>
  101c07:	8b 40 38             	mov    0x38(%eax),%eax
  101c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
  101c0d:	eb 19                	jmp    101c28 <syscall+0x445>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  101c0f:	e8 0b 13 00 00       	call   102f1f <get_current_task>
  101c14:	8b 40 34             	mov    0x34(%eax),%eax
  101c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
  101c1a:	eb 0c                	jmp    101c28 <syscall+0x445>
        default:
            handle = get_current_task()->stdout;
  101c1c:	e8 fe 12 00 00       	call   102f1f <get_current_task>
  101c21:	8b 40 30             	mov    0x30(%eax),%eax
  101c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
  101c27:	90                   	nop
	    }

	    cpu->eax = (uint32_t) handle;
  101c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101c2b:	8b 45 08             	mov    0x8(%ebp),%eax
  101c2e:	89 10                	mov    %edx,(%eax)
	}
	    break;
  101c30:	e9 8f 02 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 21: /* fopenpmhandle */
	{
	    vfs_reset_error();
  101c35:	e8 11 24 00 00       	call   10404b <vfs_reset_error>
	    char* path = strclone((char*)cpu->ecx);
  101c3a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c3d:	8b 40 08             	mov    0x8(%eax),%eax
  101c40:	89 04 24             	mov    %eax,(%esp)
  101c43:	e8 2c 22 00 00       	call   103e74 <strclone>
  101c48:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  101c4b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  101c52:	8b 45 08             	mov    0x8(%ebp),%eax
  101c55:	8b 40 04             	mov    0x4(%eax),%eax
  101c58:	83 f8 01             	cmp    $0x1,%eax
  101c5b:	75 07                	jne    101c64 <syscall+0x481>
	        fm = FM_READ;
  101c5d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	    }

	    open = vfs_open(path, fm);
  101c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c67:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  101c6e:	89 04 24             	mov    %eax,(%esp)
  101c71:	e8 be 28 00 00       	call   104534 <vfs_open>
  101c76:	89 45 b0             	mov    %eax,-0x50(%ebp)

	    free(path);
  101c79:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  101c7c:	89 04 24             	mov    %eax,(%esp)
  101c7f:	e8 c9 1f 00 00       	call   103c4d <free>

	    if(!open) {
  101c84:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  101c88:	75 0e                	jne    101c98 <syscall+0x4b5>
	        cpu->eax = (uint32_t) -1;
  101c8a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c8d:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  101c93:	e9 2c 02 00 00       	jmp    101ec4 <syscall+0x6e1>
	    }

	    struct res_handle* oldhandle = 0;
  101c98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

        switch(cpu->ebx) {
  101c9f:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca2:	8b 40 04             	mov    0x4(%eax),%eax
  101ca5:	83 f8 01             	cmp    $0x1,%eax
  101ca8:	74 24                	je     101cce <syscall+0x4eb>
  101caa:	83 f8 01             	cmp    $0x1,%eax
  101cad:	72 07                	jb     101cb6 <syscall+0x4d3>
  101caf:	83 f8 02             	cmp    $0x2,%eax
  101cb2:	74 32                	je     101ce6 <syscall+0x503>
  101cb4:	eb 48                	jmp    101cfe <syscall+0x51b>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  101cb6:	e8 64 12 00 00       	call   102f1f <get_current_task>
  101cbb:	8b 40 30             	mov    0x30(%eax),%eax
  101cbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
            get_current_task()->stdout = open;
  101cc1:	e8 59 12 00 00       	call   102f1f <get_current_task>
  101cc6:	8b 55 b0             	mov    -0x50(%ebp),%edx
  101cc9:	89 50 30             	mov    %edx,0x30(%eax)
            break;
  101ccc:	eb 47                	jmp    101d15 <syscall+0x532>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  101cce:	e8 4c 12 00 00       	call   102f1f <get_current_task>
  101cd3:	8b 40 38             	mov    0x38(%eax),%eax
  101cd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            get_current_task()->stdin = open;
  101cd9:	e8 41 12 00 00       	call   102f1f <get_current_task>
  101cde:	8b 55 b0             	mov    -0x50(%ebp),%edx
  101ce1:	89 50 38             	mov    %edx,0x38(%eax)
            break;
  101ce4:	eb 2f                	jmp    101d15 <syscall+0x532>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  101ce6:	e8 34 12 00 00       	call   102f1f <get_current_task>
  101ceb:	8b 40 34             	mov    0x34(%eax),%eax
  101cee:	89 45 ec             	mov    %eax,-0x14(%ebp)
            get_current_task()->stderr = open;
  101cf1:	e8 29 12 00 00       	call   102f1f <get_current_task>
  101cf6:	8b 55 b0             	mov    -0x50(%ebp),%edx
  101cf9:	89 50 34             	mov    %edx,0x34(%eax)
            break;
  101cfc:	eb 17                	jmp    101d15 <syscall+0x532>
        default:
            oldhandle = get_current_task()->stdout;
  101cfe:	e8 1c 12 00 00       	call   102f1f <get_current_task>
  101d03:	8b 40 30             	mov    0x30(%eax),%eax
  101d06:	89 45 ec             	mov    %eax,-0x14(%ebp)
            get_current_task()->stdout = open;
  101d09:	e8 11 12 00 00       	call   102f1f <get_current_task>
  101d0e:	8b 55 b0             	mov    -0x50(%ebp),%edx
  101d11:	89 50 30             	mov    %edx,0x30(%eax)
            break;
  101d14:	90                   	nop
        }

        if(oldhandle != 0) {
  101d15:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  101d19:	74 0b                	je     101d26 <syscall+0x543>
            vfs_close(oldhandle);
  101d1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d1e:	89 04 24             	mov    %eax,(%esp)
  101d21:	e8 69 28 00 00       	call   10458f <vfs_close>
        }

        cpu->eax = 0;
  101d26:	8b 45 08             	mov    0x8(%ebp),%eax
  101d29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  101d2f:	e9 90 01 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 30: /* return_rpc */
	{
	    cpu = return_rpc_call(cpu);
  101d34:	8b 45 08             	mov    0x8(%ebp),%eax
  101d37:	89 04 24             	mov    %eax,(%esp)
  101d3a:	e8 99 19 00 00       	call   1036d8 <return_rpc_call>
  101d3f:	89 45 08             	mov    %eax,0x8(%ebp)
	}
	    break;
  101d42:	e9 7d 01 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 31: /* call_rpc */
	{
	    int PID = cpu->ebx;
  101d47:	8b 45 08             	mov    0x8(%ebp),%eax
  101d4a:	8b 40 04             	mov    0x4(%eax),%eax
  101d4d:	89 45 ac             	mov    %eax,-0x54(%ebp)

	    //TODO create RPC for U2U
	}
	    break;
  101d50:	e9 6f 01 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 32: /* set_rpc_handler */
	{
	    uint32_t handlerAddr = cpu->ebx;
  101d55:	8b 45 08             	mov    0x8(%ebp),%eax
  101d58:	8b 40 04             	mov    0x4(%eax),%eax
  101d5b:	89 45 a8             	mov    %eax,-0x58(%ebp)
	    if(get_current_task()->rpc_handler_addr == 0) {
  101d5e:	e8 bc 11 00 00       	call   102f1f <get_current_task>
  101d63:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d66:	85 c0                	test   %eax,%eax
  101d68:	75 10                	jne    101d7a <syscall+0x597>
	        get_current_task()->rpc_handler_addr = handlerAddr;
  101d6a:	e8 b0 11 00 00       	call   102f1f <get_current_task>
  101d6f:	8b 55 a8             	mov    -0x58(%ebp),%edx
  101d72:	89 50 1c             	mov    %edx,0x1c(%eax)
	    }
	}
	    break;
  101d75:	e9 4a 01 00 00       	jmp    101ec4 <syscall+0x6e1>
  101d7a:	e9 45 01 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 33: /* fetch_rpc_data */
	{
	    cpu->eax = 0;
  101d7f:	8b 45 08             	mov    0x8(%ebp),%eax
  101d82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    void* dest = (void*) cpu->ebx;
  101d88:	8b 45 08             	mov    0x8(%ebp),%eax
  101d8b:	8b 40 04             	mov    0x4(%eax),%eax
  101d8e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	    if(get_current_task()->rpc != 0) {
  101d91:	e8 89 11 00 00       	call   102f1f <get_current_task>
  101d96:	8b 40 18             	mov    0x18(%eax),%eax
  101d99:	85 c0                	test   %eax,%eax
  101d9b:	74 3e                	je     101ddb <syscall+0x5f8>
	        memcpy(dest, get_current_task()->rpc->data, get_current_task()->rpc->dataSize);
  101d9d:	e8 7d 11 00 00       	call   102f1f <get_current_task>
  101da2:	8b 40 18             	mov    0x18(%eax),%eax
  101da5:	8b 58 10             	mov    0x10(%eax),%ebx
  101da8:	e8 72 11 00 00       	call   102f1f <get_current_task>
  101dad:	8b 40 18             	mov    0x18(%eax),%eax
  101db0:	8b 40 0c             	mov    0xc(%eax),%eax
  101db3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  101db7:	89 44 24 04          	mov    %eax,0x4(%esp)
  101dbb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  101dbe:	89 04 24             	mov    %eax,(%esp)
  101dc1:	e8 23 1f 00 00       	call   103ce9 <memcpy>
	        cpu->eax = get_current_task()->rpc->dataSize;
  101dc6:	e8 54 11 00 00       	call   102f1f <get_current_task>
  101dcb:	8b 40 18             	mov    0x18(%eax),%eax
  101dce:	8b 50 10             	mov    0x10(%eax),%edx
  101dd1:	8b 45 08             	mov    0x8(%ebp),%eax
  101dd4:	89 10                	mov    %edx,(%eax)
	    }
	}
	    break;
  101dd6:	e9 e9 00 00 00       	jmp    101ec4 <syscall+0x6e1>
  101ddb:	e9 e4 00 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 40:
	{
	    cpu->eax = register_irq_rpc(cpu->ebx);
  101de0:	8b 45 08             	mov    0x8(%ebp),%eax
  101de3:	8b 40 04             	mov    0x4(%eax),%eax
  101de6:	89 04 24             	mov    %eax,(%esp)
  101de9:	e8 c4 f7 ff ff       	call   1015b2 <register_irq_rpc>
  101dee:	8b 55 08             	mov    0x8(%ebp),%edx
  101df1:	89 02                	mov    %eax,(%edx)
	}
	    break;
  101df3:	e9 cc 00 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  101df8:	8b 45 08             	mov    0x8(%ebp),%eax
  101dfb:	8b 40 04             	mov    0x4(%eax),%eax
  101dfe:	89 44 24 04          	mov    %eax,0x4(%esp)
  101e02:	c7 04 24 f0 71 10 00 	movl   $0x1071f0,(%esp)
  101e09:	e8 91 e7 ff ff       	call   10059f <kprintf>
  101e0e:	89 c2                	mov    %eax,%edx
  101e10:	8b 45 08             	mov    0x8(%ebp),%eax
  101e13:	89 10                	mov    %edx,(%eax)
		break;
  101e15:	e9 aa 00 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  101e1a:	8b 45 08             	mov    0x8(%ebp),%eax
  101e1d:	8b 40 04             	mov    0x4(%eax),%eax
  101e20:	89 44 24 04          	mov    %eax,0x4(%esp)
  101e24:	c7 04 24 f3 71 10 00 	movl   $0x1071f3,(%esp)
  101e2b:	e8 6f e7 ff ff       	call   10059f <kprintf>
  101e30:	89 c2                	mov    %eax,%edx
  101e32:	8b 45 08             	mov    0x8(%ebp),%eax
  101e35:	89 10                	mov    %edx,(%eax)
		break;
  101e37:	e9 88 00 00 00       	jmp    101ec4 <syscall+0x6e1>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  101e3c:	8b 45 08             	mov    0x8(%ebp),%eax
  101e3f:	8b 40 04             	mov    0x4(%eax),%eax
  101e42:	89 04 24             	mov    %eax,(%esp)
  101e45:	e8 17 37 00 00       	call   105561 <vmm_alloc_ucont>
  101e4a:	89 c2                	mov    %eax,%edx
  101e4c:	8b 45 08             	mov    0x8(%ebp),%eax
  101e4f:	89 10                	mov    %edx,(%eax)
		break;
  101e51:	eb 71                	jmp    101ec4 <syscall+0x6e1>

	case 204: /* vmm_free */
		cpu->eax = 0;
  101e53:	8b 45 08             	mov    0x8(%ebp),%eax
  101e56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  101e5c:	8b 45 08             	mov    0x8(%ebp),%eax
  101e5f:	8b 40 04             	mov    0x4(%eax),%eax
  101e62:	3d ff 0f 40 01       	cmp    $0x1400fff,%eax
  101e67:	76 10                	jbe    101e79 <syscall+0x696>
			vmm_free((void*) cpu->ebx);
  101e69:	8b 45 08             	mov    0x8(%ebp),%eax
  101e6c:	8b 40 04             	mov    0x4(%eax),%eax
  101e6f:	89 04 24             	mov    %eax,(%esp)
  101e72:	e8 53 35 00 00       	call   1053ca <vmm_free>
		}
		break;
  101e77:	eb 4b                	jmp    101ec4 <syscall+0x6e1>
  101e79:	eb 49                	jmp    101ec4 <syscall+0x6e1>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  101e7b:	e8 cd 02 00 00       	call   10214d <pmm_print_stats>
        create_rpc_call(1, RPCT_KERNEL, 1, 0, 0);
  101e80:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  101e87:	00 
  101e88:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101e8f:	00 
  101e90:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  101e97:	00 
  101e98:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  101e9f:	00 
  101ea0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101ea7:	e8 ce 16 00 00       	call   10357a <create_rpc_call>
		break;
  101eac:	eb 16                	jmp    101ec4 <syscall+0x6e1>

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  101eae:	8b 45 08             	mov    0x8(%ebp),%eax
  101eb1:	8b 00                	mov    (%eax),%eax
  101eb3:	89 44 24 04          	mov    %eax,0x4(%esp)
  101eb7:	c7 04 24 f6 71 10 00 	movl   $0x1071f6,(%esp)
  101ebe:	e8 dc e6 ff ff       	call   10059f <kprintf>
		break;
  101ec3:	90                   	nop
	}

	return cpu;
  101ec4:	8b 45 08             	mov    0x8(%ebp),%eax
}
  101ec7:	81 c4 90 00 00 00    	add    $0x90,%esp
  101ecd:	5b                   	pop    %ebx
  101ece:	5e                   	pop    %esi
  101ecf:	5d                   	pop    %ebp
  101ed0:	c3                   	ret    

00101ed1 <kernel_main>:

void kernel_main(struct multiboot_info* mb_info) {
  101ed1:	55                   	push   %ebp
  101ed2:	89 e5                	mov    %esp,%ebp
  101ed4:	83 ec 38             	sub    $0x38,%esp
	uint32_t kernel_init_pdir = vmm_init();
  101ed7:	e8 f8 37 00 00       	call   1056d4 <vmm_init>
  101edc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	kprintf("Setting PIT interval...\n");
  101edf:	c7 04 24 44 75 10 00 	movl   $0x107544,(%esp)
  101ee6:	e8 b4 e6 ff ff       	call   10059f <kprintf>

	outb(0x43, 0x36);
  101eeb:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
  101ef2:	00 
  101ef3:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  101efa:	e8 c6 f8 ff ff       	call   1017c5 <outb>
	outw(0x40, 1000);
  101eff:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  101f06:	00 
  101f07:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  101f0e:	e8 92 f8 ff ff       	call   1017a5 <outw>

    kprintf("Initializing vfs...\n");
  101f13:	c7 04 24 5d 75 10 00 	movl   $0x10755d,(%esp)
  101f1a:	e8 80 e6 ff ff       	call   10059f <kprintf>

    vfs_init_root();
  101f1f:	e8 86 2d 00 00       	call   104caa <vfs_init_root>
    ramfs_fifo_init();
  101f24:	e8 33 08 00 00       	call   10275c <ramfs_fifo_init>
    ramfs_block_init();
  101f29:	e8 da 04 00 00       	call   102408 <ramfs_block_init>

    driver_keyboard_init();
  101f2e:	e8 14 eb ff ff       	call   100a47 <driver_keyboard_init>


    map_address_active((uint32_t) mb_info,
  101f33:	8b 55 08             	mov    0x8(%ebp),%edx
  101f36:	8b 45 08             	mov    0x8(%ebp),%eax
  101f39:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101f40:	00 
  101f41:	89 54 24 04          	mov    %edx,0x4(%esp)
  101f45:	89 04 24             	mov    %eax,(%esp)
  101f48:	e8 28 34 00 00       	call   105375 <map_address_active>
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);
  101f4d:	8b 45 08             	mov    0x8(%ebp),%eax
  101f50:	8b 40 18             	mov    0x18(%eax),%eax
    driver_keyboard_init();


    map_address_active((uint32_t) mb_info,
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  101f53:	89 c2                	mov    %eax,%edx
  101f55:	8b 45 08             	mov    0x8(%ebp),%eax
  101f58:	8b 40 18             	mov    0x18(%eax),%eax
  101f5b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101f62:	00 
  101f63:	89 54 24 04          	mov    %edx,0x4(%esp)
  101f67:	89 04 24             	mov    %eax,(%esp)
  101f6a:	e8 06 34 00 00       	call   105375 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  101f6f:	8b 45 08             	mov    0x8(%ebp),%eax
  101f72:	8b 00                	mov    (%eax),%eax
  101f74:	83 e0 08             	and    $0x8,%eax
  101f77:	85 c0                	test   %eax,%eax
  101f79:	0f 84 9f 00 00 00    	je     10201e <kernel_main+0x14d>
        vmm_map_range(mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
  101f7f:	8b 45 08             	mov    0x8(%ebp),%eax
  101f82:	8b 40 18             	mov    0x18(%eax),%eax
  101f85:	8b 40 04             	mov    0x4(%eax),%eax
  101f88:	89 c2                	mov    %eax,%edx
  101f8a:	8b 45 08             	mov    0x8(%ebp),%eax
  101f8d:	8b 40 18             	mov    0x18(%eax),%eax
  101f90:	8b 00                	mov    (%eax),%eax
  101f92:	29 c2                	sub    %eax,%edx
  101f94:	89 d0                	mov    %edx,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  101f96:	89 c1                	mov    %eax,%ecx
                      mb_info->mi_mods_addr[0].start,
  101f98:	8b 45 08             	mov    0x8(%ebp),%eax
  101f9b:	8b 40 18             	mov    0x18(%eax),%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  101f9e:	8b 10                	mov    (%eax),%edx
  101fa0:	8b 45 08             	mov    0x8(%ebp),%eax
  101fa3:	8b 40 18             	mov    0x18(%eax),%eax
  101fa6:	8b 00                	mov    (%eax),%eax
  101fa8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101faf:	00 
  101fb0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  101fb4:	89 54 24 04          	mov    %edx,0x4(%esp)
  101fb8:	89 04 24             	mov    %eax,(%esp)
  101fbb:	e8 c5 32 00 00       	call   105285 <vmm_map_range>
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  101fc0:	8b 45 08             	mov    0x8(%ebp),%eax
  101fc3:	8b 40 18             	mov    0x18(%eax),%eax
  101fc6:	8b 40 04             	mov    0x4(%eax),%eax
  101fc9:	89 c2                	mov    %eax,%edx
  101fcb:	8b 45 08             	mov    0x8(%ebp),%eax
  101fce:	8b 40 18             	mov    0x18(%eax),%eax
  101fd1:	8b 00                	mov    (%eax),%eax
  101fd3:	29 c2                	sub    %eax,%edx
  101fd5:	89 d0                	mov    %edx,%eax
  101fd7:	89 44 24 04          	mov    %eax,0x4(%esp)
  101fdb:	c7 04 24 74 75 10 00 	movl   $0x107574,(%esp)
  101fe2:	e8 b8 e5 ff ff       	call   10059f <kprintf>
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  101fe7:	8b 45 08             	mov    0x8(%ebp),%eax
  101fea:	8b 40 18             	mov    0x18(%eax),%eax
  101fed:	8b 50 04             	mov    0x4(%eax),%edx
  101ff0:	8b 45 08             	mov    0x8(%ebp),%eax
  101ff3:	8b 40 18             	mov    0x18(%eax),%eax
  101ff6:	8b 00                	mov    (%eax),%eax
  101ff8:	89 54 24 08          	mov    %edx,0x8(%esp)
  101ffc:	89 44 24 04          	mov    %eax,0x4(%esp)
  102000:	c7 04 24 b4 75 10 00 	movl   $0x1075b4,(%esp)
  102007:	e8 93 e5 ff ff       	call   10059f <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  10200c:	8b 45 08             	mov    0x8(%ebp),%eax
  10200f:	8b 40 18             	mov    0x18(%eax),%eax
  102012:	8b 00                	mov    (%eax),%eax
  102014:	89 04 24             	mov    %eax,(%esp)
  102017:	e8 ad 0b 00 00       	call   102bc9 <tar_load_ramfs>
  10201c:	eb 0c                	jmp    10202a <kernel_main+0x159>
    } else {
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  10201e:	c7 04 24 d0 75 10 00 	movl   $0x1075d0,(%esp)
  102025:	e8 75 e5 ff ff       	call   10059f <kprintf>
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  10202a:	c7 04 24 04 76 10 00 	movl   $0x107604,(%esp)
  102031:	e8 69 e5 ff ff       	call   10059f <kprintf>
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  102036:	e8 dc 0c 00 00       	call   102d17 <ramfs_vga_driver_struct>
  10203b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102042:	00 
  102043:	89 44 24 04          	mov    %eax,0x4(%esp)
  102047:	c7 04 24 24 76 10 00 	movl   $0x107624,(%esp)
  10204e:	e8 4e 24 00 00       	call   1044a1 <vfs_create_kfile>

    if(vfs_exists("/ibin/init")) {
  102053:	c7 04 24 2d 76 10 00 	movl   $0x10762d,(%esp)
  10205a:	e8 e2 26 00 00       	call   104741 <vfs_exists>
  10205f:	85 c0                	test   %eax,%eax
  102061:	74 45                	je     1020a8 <kernel_main+0x1d7>
        kprintf("[init] /ibin/init found. Executing...\n");
  102063:	c7 04 24 38 76 10 00 	movl   $0x107638,(%esp)
  10206a:	e8 30 e5 ff ff       	call   10059f <kprintf>

        vfs_exec("/ibin/init", 0, 0, 0, 0, 0);
  10206f:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  102076:	00 
  102077:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  10207e:	00 
  10207f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102086:	00 
  102087:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10208e:	00 
  10208f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102096:	00 
  102097:	c7 04 24 2d 76 10 00 	movl   $0x10762d,(%esp)
  10209e:	e8 ec 26 00 00       	call   10478f <vfs_exec>
        enableScheduling();
  1020a3:	e8 5e 0e 00 00       	call   102f06 <enableScheduling>
    }

	while(1);
  1020a8:	eb fe                	jmp    1020a8 <kernel_main+0x1d7>

001020aa <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  1020aa:	55                   	push   %ebp
  1020ab:	89 e5                	mov    %esp,%ebp
  1020ad:	53                   	push   %ebx
  1020ae:	83 ec 10             	sub    $0x10,%esp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  1020b1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1020b8:	eb 7b                	jmp    102135 <pmm_alloc+0x8b>
		if (allocatable[i]) {
  1020ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020bd:	8b 04 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%eax
  1020c4:	85 c0                	test   %eax,%eax
  1020c6:	74 69                	je     102131 <pmm_alloc+0x87>
			int s;
			for (s = 0; s < 32; s++) {
  1020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1020cf:	eb 5a                	jmp    10212b <pmm_alloc+0x81>
				if (allocatable[i] & (1 << s)) {
  1020d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020d4:	8b 14 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%edx
  1020db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1020de:	bb 01 00 00 00       	mov    $0x1,%ebx
  1020e3:	89 c1                	mov    %eax,%ecx
  1020e5:	d3 e3                	shl    %cl,%ebx
  1020e7:	89 d8                	mov    %ebx,%eax
  1020e9:	21 d0                	and    %edx,%eax
  1020eb:	85 c0                	test   %eax,%eax
  1020ed:	74 38                	je     102127 <pmm_alloc+0x7d>
					allocatable[i] &= ~(1 << s);
  1020ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020f2:	8b 14 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%edx
  1020f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1020fc:	bb 01 00 00 00       	mov    $0x1,%ebx
  102101:	89 c1                	mov    %eax,%ecx
  102103:	d3 e3                	shl    %cl,%ebx
  102105:	89 d8                	mov    %ebx,%eax
  102107:	f7 d0                	not    %eax
  102109:	21 c2                	and    %eax,%edx
  10210b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10210e:	89 14 85 e0 99 12 00 	mov    %edx,0x1299e0(,%eax,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  102115:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102118:	c1 e0 05             	shl    $0x5,%eax
  10211b:	89 c2                	mov    %eax,%edx
  10211d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102120:	01 d0                	add    %edx,%eax
  102122:	c1 e0 0c             	shl    $0xc,%eax
  102125:	eb 20                	jmp    102147 <pmm_alloc+0x9d>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  102127:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10212b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
  10212f:	7e a0                	jle    1020d1 <pmm_alloc+0x27>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102131:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  102135:	81 7d f8 ff 7f 00 00 	cmpl   $0x7fff,-0x8(%ebp)
  10213c:	0f 8e 78 ff ff ff    	jle    1020ba <pmm_alloc+0x10>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  102142:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102147:	83 c4 10             	add    $0x10,%esp
  10214a:	5b                   	pop    %ebx
  10214b:	5d                   	pop    %ebp
  10214c:	c3                   	ret    

0010214d <pmm_print_stats>:

void pmm_print_stats() {
  10214d:	55                   	push   %ebp
  10214e:	89 e5                	mov    %esp,%ebp
  102150:	57                   	push   %edi
  102151:	56                   	push   %esi
  102152:	53                   	push   %ebx
  102153:	83 ec 2c             	sub    $0x2c,%esp
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102156:	a1 40 95 12 00       	mov    0x129540,%eax
  10215b:	c1 e8 0a             	shr    $0xa,%eax
  10215e:	89 c7                	mov    %eax,%edi
  102160:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102167:	e8 3c 00 00 00       	call   1021a8 <pmm_get_free_space>
  10216c:	89 c3                	mov    %eax,%ebx
  10216e:	a1 40 95 12 00       	mov    0x129540,%eax
  102173:	c1 e8 14             	shr    $0x14,%eax
  102176:	89 c6                	mov    %eax,%esi
  102178:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  10217f:	e8 24 00 00 00       	call   1021a8 <pmm_get_free_space>
  102184:	89 7c 24 10          	mov    %edi,0x10(%esp)
  102188:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  10218c:	89 74 24 08          	mov    %esi,0x8(%esp)
  102190:	89 44 24 04          	mov    %eax,0x4(%esp)
  102194:	c7 04 24 60 76 10 00 	movl   $0x107660,(%esp)
  10219b:	e8 ff e3 ff ff       	call   10059f <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  1021a0:	83 c4 2c             	add    $0x2c,%esp
  1021a3:	5b                   	pop    %ebx
  1021a4:	5e                   	pop    %esi
  1021a5:	5f                   	pop    %edi
  1021a6:	5d                   	pop    %ebp
  1021a7:	c3                   	ret    

001021a8 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  1021a8:	55                   	push   %ebp
  1021a9:	89 e5                	mov    %esp,%ebp
  1021ab:	53                   	push   %ebx
  1021ac:	83 ec 10             	sub    $0x10,%esp
	uint32_t free = 0;
  1021af:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  1021b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1021bd:	eb 3c                	jmp    1021fb <pmm_get_free_space+0x53>
		for (uint32_t s = 0; s < 32; s++) {
  1021bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1021c6:	eb 29                	jmp    1021f1 <pmm_get_free_space+0x49>
			if (allocatable[i] & (1 << s))
  1021c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021cb:	8b 14 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%edx
  1021d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021d5:	bb 01 00 00 00       	mov    $0x1,%ebx
  1021da:	89 c1                	mov    %eax,%ecx
  1021dc:	d3 e3                	shl    %cl,%ebx
  1021de:	89 d8                	mov    %ebx,%eax
  1021e0:	21 d0                	and    %edx,%eax
  1021e2:	85 c0                	test   %eax,%eax
  1021e4:	74 07                	je     1021ed <pmm_get_free_space+0x45>
				free += 0x1000;
  1021e6:	81 45 f8 00 10 00 00 	addl   $0x1000,-0x8(%ebp)

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  1021ed:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1021f1:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  1021f5:	76 d1                	jbe    1021c8 <pmm_get_free_space+0x20>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  1021f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1021fb:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
  102202:	76 bb                	jbe    1021bf <pmm_get_free_space+0x17>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  102204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102207:	ba 00 00 00 00       	mov    $0x0,%edx
  10220c:	f7 75 08             	divl   0x8(%ebp)
}
  10220f:	83 c4 10             	add    $0x10,%esp
  102212:	5b                   	pop    %ebx
  102213:	5d                   	pop    %ebp
  102214:	c3                   	ret    

00102215 <pmm_free>:

void pmm_free(void* addr) {
  102215:	55                   	push   %ebp
  102216:	89 e5                	mov    %esp,%ebp
  102218:	53                   	push   %ebx
  102219:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  10221c:	8b 45 08             	mov    0x8(%ebp),%eax
  10221f:	c1 e8 0c             	shr    $0xc,%eax
  102222:	89 45 f8             	mov    %eax,-0x8(%ebp)

	uintptr_t s = ptr % 32;
  102225:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102228:	83 e0 1f             	and    $0x1f,%eax
  10222b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uintptr_t i = ptr / 32;
  10222e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102231:	c1 e8 05             	shr    $0x5,%eax
  102234:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  102237:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10223a:	8b 14 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%edx
  102241:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102244:	bb 01 00 00 00       	mov    $0x1,%ebx
  102249:	89 c1                	mov    %eax,%ecx
  10224b:	d3 e3                	shl    %cl,%ebx
  10224d:	89 d8                	mov    %ebx,%eax
  10224f:	09 c2                	or     %eax,%edx
  102251:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102254:	89 14 85 e0 99 12 00 	mov    %edx,0x1299e0(,%eax,4)
}
  10225b:	83 c4 10             	add    $0x10,%esp
  10225e:	5b                   	pop    %ebx
  10225f:	5d                   	pop    %ebp
  102260:	c3                   	ret    

00102261 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102261:	55                   	push   %ebp
  102262:	89 e5                	mov    %esp,%ebp
  102264:	53                   	push   %ebx
  102265:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102268:	8b 45 08             	mov    0x8(%ebp),%eax
  10226b:	c1 e8 0c             	shr    $0xc,%eax
  10226e:	89 45 f8             	mov    %eax,-0x8(%ebp)

	uintptr_t s = ptr % 32;
  102271:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102274:	83 e0 1f             	and    $0x1f,%eax
  102277:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uintptr_t i = ptr / 32;
  10227a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10227d:	c1 e8 05             	shr    $0x5,%eax
  102280:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  102283:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102286:	8b 14 85 e0 99 12 00 	mov    0x1299e0(,%eax,4),%edx
  10228d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102290:	bb 01 00 00 00       	mov    $0x1,%ebx
  102295:	89 c1                	mov    %eax,%ecx
  102297:	d3 e3                	shl    %cl,%ebx
  102299:	89 d8                	mov    %ebx,%eax
  10229b:	f7 d0                	not    %eax
  10229d:	21 c2                	and    %eax,%edx
  10229f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1022a2:	89 14 85 e0 99 12 00 	mov    %edx,0x1299e0(,%eax,4)
}
  1022a9:	83 c4 10             	add    $0x10,%esp
  1022ac:	5b                   	pop    %ebx
  1022ad:	5d                   	pop    %ebp
  1022ae:	c3                   	ret    

001022af <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1022af:	55                   	push   %ebp
  1022b0:	89 e5                	mov    %esp,%ebp
  1022b2:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1022b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1022b8:	8b 40 30             	mov    0x30(%eax),%eax
  1022bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  1022be:	8b 45 08             	mov    0x8(%ebp),%eax
  1022c1:	8b 40 30             	mov    0x30(%eax),%eax
  1022c4:	89 c2                	mov    %eax,%edx
			+ mb_info->mi_mmap_length);
  1022c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1022c9:	8b 40 2c             	mov    0x2c(%eax),%eax
  1022cc:	01 d0                	add    %edx,%eax
	allocatable[i] &= ~(1 << s);
}

void pmm_init(struct multiboot_info* mb_info) {
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  1022ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  1022d1:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1022d8:	00 
  1022d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1022e0:	00 
  1022e1:	c7 04 24 e0 99 12 00 	movl   $0x1299e0,(%esp)
  1022e8:	e8 ce 19 00 00       	call   103cbb <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1022ed:	c7 44 24 08 e0 99 14 	movl   $0x1499e0,0x8(%esp)
  1022f4:	00 
  1022f5:	c7 44 24 04 e0 99 12 	movl   $0x1299e0,0x4(%esp)
  1022fc:	00 
  1022fd:	c7 04 24 9d 76 10 00 	movl   $0x10769d,(%esp)
  102304:	e8 96 e2 ff ff       	call   10059f <kprintf>

	while (mmap < mmap_end) {
  102309:	eb 5c                	jmp    102367 <pmm_init+0xb8>
		if (mmap->mm_type == 1) {
  10230b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10230e:	8b 40 14             	mov    0x14(%eax),%eax
  102311:	83 f8 01             	cmp    $0x1,%eax
  102314:	75 4d                	jne    102363 <pmm_init+0xb4>
			uintptr_t addr = mmap->mm_base_addr;
  102316:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102319:	8b 50 08             	mov    0x8(%eax),%edx
  10231c:	8b 40 04             	mov    0x4(%eax),%eax
  10231f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  102322:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102325:	8b 50 10             	mov    0x10(%eax),%edx
  102328:	8b 40 0c             	mov    0xc(%eax),%eax
  10232b:	89 c2                	mov    %eax,%edx
  10232d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102330:	01 d0                	add    %edx,%eax
  102332:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  102335:	eb 24                	jmp    10235b <pmm_init+0xac>
				pmm_free((void*) addr);
  102337:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10233a:	89 04 24             	mov    %eax,(%esp)
  10233d:	e8 d3 fe ff ff       	call   102215 <pmm_free>
				if (addr > upper_limit)
  102342:	a1 40 95 12 00       	mov    0x129540,%eax
  102347:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  10234a:	76 08                	jbe    102354 <pmm_init+0xa5>
					upper_limit = addr;
  10234c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10234f:	a3 40 95 12 00       	mov    %eax,0x129540
				addr += 0x1000;
  102354:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		if (mmap->mm_type == 1) {
			uintptr_t addr = mmap->mm_base_addr;
			uintptr_t end_addr = addr + mmap->mm_length;

			while (addr < end_addr) {
  10235b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10235e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  102361:	72 d4                	jb     102337 <pmm_init+0x88>
				if (addr > upper_limit)
					upper_limit = addr;
				addr += 0x1000;
			}
		}
		mmap++;
  102363:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));

	while (mmap < mmap_end) {
  102367:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10236a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  10236d:	72 9c                	jb     10230b <pmm_init+0x5c>
	}

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  10236f:	c7 45 ec 00 00 10 00 	movl   $0x100000,-0x14(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  102376:	eb 12                	jmp    10238a <pmm_init+0xdb>
		pmm_mark_used((void*) addr);
  102378:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10237b:	89 04 24             	mov    %eax,(%esp)
  10237e:	e8 de fe ff ff       	call   102261 <pmm_mark_used>
		addr += 0x1000;
  102383:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  10238a:	b8 00 a0 18 00       	mov    $0x18a000,%eax
  10238f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  102392:	72 e4                	jb     102378 <pmm_init+0xc9>
		pmm_mark_used((void*) addr);
		addr += 0x1000;
	}

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102394:	8b 45 08             	mov    0x8(%ebp),%eax
  102397:	8b 40 18             	mov    0x18(%eax),%eax
  10239a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	pmm_mark_used(mb_info);
  10239d:	8b 45 08             	mov    0x8(%ebp),%eax
  1023a0:	89 04 24             	mov    %eax,(%esp)
  1023a3:	e8 b9 fe ff ff       	call   102261 <pmm_mark_used>
	pmm_mark_used(modules);
  1023a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1023ab:	89 04 24             	mov    %eax,(%esp)
  1023ae:	e8 ae fe ff ff       	call   102261 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1023b3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1023ba:	eb 3f                	jmp    1023fb <pmm_init+0x14c>
		addr = (uintptr_t) modules[i].start;
  1023bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023bf:	c1 e0 04             	shl    $0x4,%eax
  1023c2:	89 c2                	mov    %eax,%edx
  1023c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1023c7:	01 d0                	add    %edx,%eax
  1023c9:	8b 00                	mov    (%eax),%eax
  1023cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  1023ce:	eb 12                	jmp    1023e2 <pmm_init+0x133>
			pmm_mark_used((void*) addr);
  1023d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1023d3:	89 04 24             	mov    %eax,(%esp)
  1023d6:	e8 86 fe ff ff       	call   102261 <pmm_mark_used>
			addr += 0x1000;
  1023db:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
		addr = (uintptr_t) modules[i].start;
		while (addr < (uintptr_t) modules[i].end) {
  1023e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023e5:	c1 e0 04             	shl    $0x4,%eax
  1023e8:	89 c2                	mov    %eax,%edx
  1023ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1023ed:	01 d0                	add    %edx,%eax
  1023ef:	8b 40 04             	mov    0x4(%eax),%eax
  1023f2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1023f5:	77 d9                	ja     1023d0 <pmm_init+0x121>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1023f7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  1023fb:	8b 45 08             	mov    0x8(%ebp),%eax
  1023fe:	8b 40 14             	mov    0x14(%eax),%eax
  102401:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102404:	77 b6                	ja     1023bc <pmm_init+0x10d>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  102406:	c9                   	leave  
  102407:	c3                   	ret    

00102408 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  102408:	55                   	push   %ebp
  102409:	89 e5                	mov    %esp,%ebp
  10240b:	83 ec 18             	sub    $0x18,%esp
    memset(buffer, 0, sizeof(buffer));
  10240e:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102415:	00 
  102416:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10241d:	00 
  10241e:	c7 04 24 e0 99 14 00 	movl   $0x1499e0,(%esp)
  102425:	e8 91 18 00 00       	call   103cbb <memset>
}
  10242a:	c9                   	leave  
  10242b:	c3                   	ret    

0010242c <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  10242c:	55                   	push   %ebp
  10242d:	89 e5                	mov    %esp,%ebp
    return &block_driver;
  10242f:	b8 a0 62 10 00       	mov    $0x1062a0,%eax
}
  102434:	5d                   	pop    %ebp
  102435:	c3                   	ret    

00102436 <ramfs_block_available>:

uint32_t ramfs_block_available(struct res_handle* handle) {
  102436:	55                   	push   %ebp
  102437:	89 e5                	mov    %esp,%ebp
  102439:	83 ec 10             	sub    $0x10,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10243c:	8b 45 08             	mov    0x8(%ebp),%eax
  10243f:	8b 40 04             	mov    0x4(%eax),%eax
  102442:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if(buffer[kf->id] != 0) {
  102445:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102448:	8b 00                	mov    (%eax),%eax
  10244a:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102451:	85 c0                	test   %eax,%eax
  102453:	74 1b                	je     102470 <ramfs_block_available+0x3a>
        return buffer[kf->id]->size - handle->position;
  102455:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102458:	8b 00                	mov    (%eax),%eax
  10245a:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102461:	8b 50 04             	mov    0x4(%eax),%edx
  102464:	8b 45 08             	mov    0x8(%ebp),%eax
  102467:	8b 40 08             	mov    0x8(%eax),%eax
  10246a:	29 c2                	sub    %eax,%edx
  10246c:	89 d0                	mov    %edx,%eax
  10246e:	eb 05                	jmp    102475 <ramfs_block_available+0x3f>
    }

    return 0;
  102470:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102475:	c9                   	leave  
  102476:	c3                   	ret    

00102477 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  102477:	55                   	push   %ebp
  102478:	89 e5                	mov    %esp,%ebp
  10247a:	53                   	push   %ebx
  10247b:	83 ec 24             	sub    $0x24,%esp
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  10247e:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102485:	e8 64 15 00 00       	call   1039ee <malloc>
  10248a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for(int i = 0; i < 65536; i++) {
  10248d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102494:	e9 84 00 00 00       	jmp    10251d <ramfs_block_create+0xa6>
        if(buffer[i] == 0) {
  102499:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10249c:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1024a3:	85 c0                	test   %eax,%eax
  1024a5:	75 72                	jne    102519 <ramfs_block_create+0xa2>
            buffer[i] = malloc(sizeof(struct block_buffer));
  1024a7:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1024ae:	e8 3b 15 00 00       	call   1039ee <malloc>
  1024b3:	89 c2                	mov    %eax,%edx
  1024b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024b8:	89 14 85 e0 99 14 00 	mov    %edx,0x1499e0(,%eax,4)
            buffer[i]->buffer = malloc(args[0]);
  1024bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024c2:	8b 1c 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%ebx
  1024c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1024cc:	8b 00                	mov    (%eax),%eax
  1024ce:	89 04 24             	mov    %eax,(%esp)
  1024d1:	e8 18 15 00 00       	call   1039ee <malloc>
  1024d6:	89 03                	mov    %eax,(%ebx)
            buffer[i]->size   = args[0];
  1024d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024db:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1024e2:	8b 55 08             	mov    0x8(%ebp),%edx
  1024e5:	8b 12                	mov    (%edx),%edx
  1024e7:	89 50 04             	mov    %edx,0x4(%eax)

            buffer[i]->writers = 0;
  1024ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024ed:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1024f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  1024fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024fe:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102505:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  10250c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10250f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102512:	89 10                	mov    %edx,(%eax)

            return kfret;
  102514:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102517:	eb 16                	jmp    10252f <ramfs_block_create+0xb8>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102519:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10251d:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  102524:	0f 8e 6f ff ff ff    	jle    102499 <ramfs_block_create+0x22>

            return kfret;
        }
    }

    return 0;
  10252a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10252f:	83 c4 24             	add    $0x24,%esp
  102532:	5b                   	pop    %ebx
  102533:	5d                   	pop    %ebp
  102534:	c3                   	ret    

00102535 <ramfs_block_read>:

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  102535:	55                   	push   %ebp
  102536:	89 e5                	mov    %esp,%ebp
  102538:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10253b:	8b 45 08             	mov    0x8(%ebp),%eax
  10253e:	8b 40 04             	mov    0x4(%eax),%eax
  102541:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102544:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102547:	8b 00                	mov    (%eax),%eax
  102549:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102550:	85 c0                	test   %eax,%eax
  102552:	74 69                	je     1025bd <ramfs_block_read+0x88>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  102554:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102557:	8b 00                	mov    (%eax),%eax
  102559:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102560:	8b 50 04             	mov    0x4(%eax),%edx
  102563:	8b 45 08             	mov    0x8(%ebp),%eax
  102566:	8b 40 08             	mov    0x8(%eax),%eax
  102569:	29 c2                	sub    %eax,%edx
  10256b:	89 d0                	mov    %edx,%eax
  10256d:	3b 45 10             	cmp    0x10(%ebp),%eax
  102570:	73 07                	jae    102579 <ramfs_block_read+0x44>
  102572:	b8 03 00 00 00       	mov    $0x3,%eax
  102577:	eb 49                	jmp    1025c2 <ramfs_block_read+0x8d>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  102579:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10257c:	8b 00                	mov    (%eax),%eax
  10257e:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102585:	8b 10                	mov    (%eax),%edx
  102587:	8b 45 08             	mov    0x8(%ebp),%eax
  10258a:	8b 40 08             	mov    0x8(%eax),%eax
  10258d:	01 c2                	add    %eax,%edx
  10258f:	8b 45 10             	mov    0x10(%ebp),%eax
  102592:	89 44 24 08          	mov    %eax,0x8(%esp)
  102596:	89 54 24 04          	mov    %edx,0x4(%esp)
  10259a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10259d:	89 04 24             	mov    %eax,(%esp)
  1025a0:	e8 44 17 00 00       	call   103ce9 <memcpy>
        handle->position += length;
  1025a5:	8b 45 08             	mov    0x8(%ebp),%eax
  1025a8:	8b 50 08             	mov    0x8(%eax),%edx
  1025ab:	8b 45 10             	mov    0x10(%ebp),%eax
  1025ae:	01 c2                	add    %eax,%edx
  1025b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1025b3:	89 50 08             	mov    %edx,0x8(%eax)

        return RW_OK;
  1025b6:	b8 00 00 00 00       	mov    $0x0,%eax
  1025bb:	eb 05                	jmp    1025c2 <ramfs_block_read+0x8d>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1025bd:	b8 03 00 00 00       	mov    $0x3,%eax
}
  1025c2:	c9                   	leave  
  1025c3:	c3                   	ret    

001025c4 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  1025c4:	55                   	push   %ebp
  1025c5:	89 e5                	mov    %esp,%ebp
  1025c7:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1025ca:	8b 45 08             	mov    0x8(%ebp),%eax
  1025cd:	8b 40 04             	mov    0x4(%eax),%eax
  1025d0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  1025d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025d6:	8b 00                	mov    (%eax),%eax
  1025d8:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1025df:	85 c0                	test   %eax,%eax
  1025e1:	74 69                	je     10264c <ramfs_block_write+0x88>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  1025e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025e6:	8b 00                	mov    (%eax),%eax
  1025e8:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1025ef:	8b 50 04             	mov    0x4(%eax),%edx
  1025f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1025f5:	8b 40 08             	mov    0x8(%eax),%eax
  1025f8:	29 c2                	sub    %eax,%edx
  1025fa:	89 d0                	mov    %edx,%eax
  1025fc:	3b 45 10             	cmp    0x10(%ebp),%eax
  1025ff:	73 07                	jae    102608 <ramfs_block_write+0x44>
  102601:	b8 03 00 00 00       	mov    $0x3,%eax
  102606:	eb 49                	jmp    102651 <ramfs_block_write+0x8d>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  102608:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10260b:	8b 00                	mov    (%eax),%eax
  10260d:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102614:	8b 10                	mov    (%eax),%edx
  102616:	8b 45 08             	mov    0x8(%ebp),%eax
  102619:	8b 40 08             	mov    0x8(%eax),%eax
  10261c:	01 c2                	add    %eax,%edx
  10261e:	8b 45 10             	mov    0x10(%ebp),%eax
  102621:	89 44 24 08          	mov    %eax,0x8(%esp)
  102625:	8b 45 0c             	mov    0xc(%ebp),%eax
  102628:	89 44 24 04          	mov    %eax,0x4(%esp)
  10262c:	89 14 24             	mov    %edx,(%esp)
  10262f:	e8 b5 16 00 00       	call   103ce9 <memcpy>
        handle->position += length;
  102634:	8b 45 08             	mov    0x8(%ebp),%eax
  102637:	8b 50 08             	mov    0x8(%eax),%edx
  10263a:	8b 45 10             	mov    0x10(%ebp),%eax
  10263d:	01 c2                	add    %eax,%edx
  10263f:	8b 45 08             	mov    0x8(%ebp),%eax
  102642:	89 50 08             	mov    %edx,0x8(%eax)

        return RW_OK;
  102645:	b8 00 00 00 00       	mov    $0x0,%eax
  10264a:	eb 05                	jmp    102651 <ramfs_block_write+0x8d>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  10264c:	b8 03 00 00 00       	mov    $0x3,%eax
}
  102651:	c9                   	leave  
  102652:	c3                   	ret    

00102653 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  102653:	55                   	push   %ebp
  102654:	89 e5                	mov    %esp,%ebp
  102656:	83 ec 28             	sub    $0x28,%esp
    if(buffer[kf->id] != 0) {
  102659:	8b 45 08             	mov    0x8(%ebp),%eax
  10265c:	8b 00                	mov    (%eax),%eax
  10265e:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102665:	85 c0                	test   %eax,%eax
  102667:	74 77                	je     1026e0 <ramfs_block_open+0x8d>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  102669:	8b 45 0c             	mov    0xc(%ebp),%eax
  10266c:	83 e0 01             	and    $0x1,%eax
  10266f:	85 c0                	test   %eax,%eax
  102671:	74 15                	je     102688 <ramfs_block_open+0x35>
  102673:	8b 45 08             	mov    0x8(%ebp),%eax
  102676:	8b 00                	mov    (%eax),%eax
  102678:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  10267f:	8b 50 08             	mov    0x8(%eax),%edx
  102682:	83 c2 01             	add    $0x1,%edx
  102685:	89 50 08             	mov    %edx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  102688:	8b 45 0c             	mov    0xc(%ebp),%eax
  10268b:	83 e0 02             	and    $0x2,%eax
  10268e:	85 c0                	test   %eax,%eax
  102690:	74 15                	je     1026a7 <ramfs_block_open+0x54>
  102692:	8b 45 08             	mov    0x8(%ebp),%eax
  102695:	8b 00                	mov    (%eax),%eax
  102697:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  10269e:	8b 50 0c             	mov    0xc(%eax),%edx
  1026a1:	83 c2 01             	add    $0x1,%edx
  1026a4:	89 50 0c             	mov    %edx,0xc(%eax)

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1026a7:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1026ae:	e8 3b 13 00 00       	call   1039ee <malloc>
  1026b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        rethandle->filemode = filemode;
  1026b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026b9:	8b 55 0c             	mov    0xc(%ebp),%edx
  1026bc:	89 50 0c             	mov    %edx,0xc(%eax)
        rethandle->position = 0;
  1026bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026c2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  1026c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026cc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  1026d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026d5:	8b 55 08             	mov    0x8(%ebp),%edx
  1026d8:	89 50 04             	mov    %edx,0x4(%eax)

        return rethandle;
  1026db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026de:	eb 05                	jmp    1026e5 <ramfs_block_open+0x92>
    }

    return (void*)1;
  1026e0:	b8 01 00 00 00       	mov    $0x1,%eax
}
  1026e5:	c9                   	leave  
  1026e6:	c3                   	ret    

001026e7 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  1026e7:	55                   	push   %ebp
  1026e8:	89 e5                	mov    %esp,%ebp
  1026ea:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1026ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1026f0:	8b 40 04             	mov    0x4(%eax),%eax
  1026f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  1026f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026f9:	8b 00                	mov    (%eax),%eax
  1026fb:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102702:	85 c0                	test   %eax,%eax
  102704:	74 44                	je     10274a <ramfs_block_close+0x63>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  102706:	8b 45 08             	mov    0x8(%ebp),%eax
  102709:	8b 40 0c             	mov    0xc(%eax),%eax
  10270c:	83 e0 01             	and    $0x1,%eax
  10270f:	85 c0                	test   %eax,%eax
  102711:	74 15                	je     102728 <ramfs_block_close+0x41>
  102713:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102716:	8b 00                	mov    (%eax),%eax
  102718:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  10271f:	8b 50 08             	mov    0x8(%eax),%edx
  102722:	83 ea 01             	sub    $0x1,%edx
  102725:	89 50 08             	mov    %edx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  102728:	8b 45 08             	mov    0x8(%ebp),%eax
  10272b:	8b 40 0c             	mov    0xc(%eax),%eax
  10272e:	83 e0 02             	and    $0x2,%eax
  102731:	85 c0                	test   %eax,%eax
  102733:	74 15                	je     10274a <ramfs_block_close+0x63>
  102735:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102738:	8b 00                	mov    (%eax),%eax
  10273a:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102741:	8b 50 0c             	mov    0xc(%eax),%edx
  102744:	83 ea 01             	sub    $0x1,%edx
  102747:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    free(handle);
  10274a:	8b 45 08             	mov    0x8(%ebp),%eax
  10274d:	89 04 24             	mov    %eax,(%esp)
  102750:	e8 f8 14 00 00       	call   103c4d <free>

    return 0;
  102755:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10275a:	c9                   	leave  
  10275b:	c3                   	ret    

0010275c <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  10275c:	55                   	push   %ebp
  10275d:	89 e5                	mov    %esp,%ebp
  10275f:	83 ec 18             	sub    $0x18,%esp
    memset(buffer, 0, sizeof(buffer));
  102762:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102769:	00 
  10276a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102771:	00 
  102772:	c7 04 24 e0 99 14 00 	movl   $0x1499e0,(%esp)
  102779:	e8 3d 15 00 00       	call   103cbb <memset>
}
  10277e:	c9                   	leave  
  10277f:	c3                   	ret    

00102780 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  102780:	55                   	push   %ebp
  102781:	89 e5                	mov    %esp,%ebp
    return &fifo_driver;
  102783:	b8 bc 62 10 00       	mov    $0x1062bc,%eax
}
  102788:	5d                   	pop    %ebp
  102789:	c3                   	ret    

0010278a <ramfs_fifo_available>:

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  10278a:	55                   	push   %ebp
  10278b:	89 e5                	mov    %esp,%ebp
  10278d:	83 ec 10             	sub    $0x10,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102790:	8b 45 08             	mov    0x8(%ebp),%eax
  102793:	8b 40 04             	mov    0x4(%eax),%eax
  102796:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if(buffer[kf->id] != 0) {
  102799:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10279c:	8b 00                	mov    (%eax),%eax
  10279e:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1027a5:	85 c0                	test   %eax,%eax
  1027a7:	74 11                	je     1027ba <ramfs_fifo_available+0x30>
        return buffer[kf->id]->pos;
  1027a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027ac:	8b 00                	mov    (%eax),%eax
  1027ae:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1027b5:	8b 40 08             	mov    0x8(%eax),%eax
  1027b8:	eb 05                	jmp    1027bf <ramfs_fifo_available+0x35>
    }

    return 0;
  1027ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1027bf:	c9                   	leave  
  1027c0:	c3                   	ret    

001027c1 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  1027c1:	55                   	push   %ebp
  1027c2:	89 e5                	mov    %esp,%ebp
  1027c4:	53                   	push   %ebx
  1027c5:	83 ec 24             	sub    $0x24,%esp
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  1027c8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1027cf:	e8 1a 12 00 00       	call   1039ee <malloc>
  1027d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for(int i = 0; i < 65536; i++) {
  1027d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1027de:	e9 99 00 00 00       	jmp    10287c <ramfs_fifo_create+0xbb>
        if(buffer[i] == 0) {
  1027e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027e6:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1027ed:	85 c0                	test   %eax,%eax
  1027ef:	0f 85 83 00 00 00    	jne    102878 <ramfs_fifo_create+0xb7>
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  1027f5:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  1027fc:	e8 ed 11 00 00       	call   1039ee <malloc>
  102801:	89 c2                	mov    %eax,%edx
  102803:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102806:	89 14 85 e0 99 14 00 	mov    %edx,0x1499e0(,%eax,4)
            buffer[i]->buffer = malloc(args[0]);
  10280d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102810:	8b 1c 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%ebx
  102817:	8b 45 08             	mov    0x8(%ebp),%eax
  10281a:	8b 00                	mov    (%eax),%eax
  10281c:	89 04 24             	mov    %eax,(%esp)
  10281f:	e8 ca 11 00 00       	call   1039ee <malloc>
  102824:	89 03                	mov    %eax,(%ebx)
            buffer[i]->size   = args[0];
  102826:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102829:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102830:	8b 55 08             	mov    0x8(%ebp),%edx
  102833:	8b 12                	mov    (%edx),%edx
  102835:	89 50 04             	mov    %edx,0x4(%eax)

            buffer[i]->pos = 0;
  102838:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10283b:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102842:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  102849:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10284c:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102853:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  10285a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10285d:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102864:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  10286b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10286e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102871:	89 10                	mov    %edx,(%eax)

            return kfret;
  102873:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102876:	eb 16                	jmp    10288e <ramfs_fifo_create+0xcd>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102878:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10287c:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  102883:	0f 8e 5a ff ff ff    	jle    1027e3 <ramfs_fifo_create+0x22>

            return kfret;
        }
    }

    return 0;
  102889:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10288e:	83 c4 24             	add    $0x24,%esp
  102891:	5b                   	pop    %ebx
  102892:	5d                   	pop    %ebp
  102893:	c3                   	ret    

00102894 <ramfs_fifo_read>:

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  102894:	55                   	push   %ebp
  102895:	89 e5                	mov    %esp,%ebp
  102897:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10289a:	8b 45 08             	mov    0x8(%ebp),%eax
  10289d:	8b 40 04             	mov    0x4(%eax),%eax
  1028a0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  1028a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028a6:	8b 00                	mov    (%eax),%eax
  1028a8:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1028af:	85 c0                	test   %eax,%eax
  1028b1:	0f 84 cd 00 00 00    	je     102984 <ramfs_fifo_read+0xf0>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  1028b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028ba:	8b 00                	mov    (%eax),%eax
  1028bc:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1028c3:	8b 40 04             	mov    0x4(%eax),%eax
  1028c6:	3b 45 10             	cmp    0x10(%ebp),%eax
  1028c9:	73 0a                	jae    1028d5 <ramfs_fifo_read+0x41>
  1028cb:	b8 03 00 00 00       	mov    $0x3,%eax
  1028d0:	e9 b4 00 00 00       	jmp    102989 <ramfs_fifo_read+0xf5>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  1028d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028d8:	8b 00                	mov    (%eax),%eax
  1028da:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1028e1:	8b 40 08             	mov    0x8(%eax),%eax
  1028e4:	3b 45 10             	cmp    0x10(%ebp),%eax
  1028e7:	73 0a                	jae    1028f3 <ramfs_fifo_read+0x5f>
  1028e9:	b8 01 00 00 00       	mov    $0x1,%eax
  1028ee:	e9 96 00 00 00       	jmp    102989 <ramfs_fifo_read+0xf5>

        memcpy(dest, buffer[kf->id]->buffer, length);
  1028f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028f6:	8b 00                	mov    (%eax),%eax
  1028f8:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1028ff:	8b 00                	mov    (%eax),%eax
  102901:	8b 55 10             	mov    0x10(%ebp),%edx
  102904:	89 54 24 08          	mov    %edx,0x8(%esp)
  102908:	89 44 24 04          	mov    %eax,0x4(%esp)
  10290c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10290f:	89 04 24             	mov    %eax,(%esp)
  102912:	e8 d2 13 00 00       	call   103ce9 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  102917:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10291a:	8b 00                	mov    (%eax),%eax
  10291c:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102923:	8b 40 08             	mov    0x8(%eax),%eax
  102926:	2b 45 10             	sub    0x10(%ebp),%eax
  102929:	89 c2                	mov    %eax,%edx
  10292b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10292e:	8b 00                	mov    (%eax),%eax
  102930:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102937:	8b 08                	mov    (%eax),%ecx
  102939:	8b 45 10             	mov    0x10(%ebp),%eax
  10293c:	01 c1                	add    %eax,%ecx
  10293e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102941:	8b 00                	mov    (%eax),%eax
  102943:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  10294a:	8b 00                	mov    (%eax),%eax
  10294c:	89 54 24 08          	mov    %edx,0x8(%esp)
  102950:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102954:	89 04 24             	mov    %eax,(%esp)
  102957:	e8 8d 13 00 00       	call   103ce9 <memcpy>
        buffer[kf->id]->pos -= length;
  10295c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10295f:	8b 00                	mov    (%eax),%eax
  102961:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102968:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10296b:	8b 12                	mov    (%edx),%edx
  10296d:	8b 14 95 e0 99 14 00 	mov    0x1499e0(,%edx,4),%edx
  102974:	8b 52 08             	mov    0x8(%edx),%edx
  102977:	2b 55 10             	sub    0x10(%ebp),%edx
  10297a:	89 50 08             	mov    %edx,0x8(%eax)

        return RW_OK;
  10297d:	b8 00 00 00 00       	mov    $0x0,%eax
  102982:	eb 05                	jmp    102989 <ramfs_fifo_read+0xf5>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102984:	b8 03 00 00 00       	mov    $0x3,%eax
}
  102989:	c9                   	leave  
  10298a:	c3                   	ret    

0010298b <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  10298b:	55                   	push   %ebp
  10298c:	89 e5                	mov    %esp,%ebp
  10298e:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102991:	8b 45 08             	mov    0x8(%ebp),%eax
  102994:	8b 40 04             	mov    0x4(%eax),%eax
  102997:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  10299a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10299d:	8b 00                	mov    (%eax),%eax
  10299f:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1029a6:	85 c0                	test   %eax,%eax
  1029a8:	0f 84 ab 00 00 00    	je     102a59 <ramfs_fifo_write+0xce>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  1029ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029b1:	8b 00                	mov    (%eax),%eax
  1029b3:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1029ba:	8b 40 04             	mov    0x4(%eax),%eax
  1029bd:	3b 45 10             	cmp    0x10(%ebp),%eax
  1029c0:	73 0a                	jae    1029cc <ramfs_fifo_write+0x41>
  1029c2:	b8 03 00 00 00       	mov    $0x3,%eax
  1029c7:	e9 92 00 00 00       	jmp    102a5e <ramfs_fifo_write+0xd3>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  1029cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029cf:	8b 00                	mov    (%eax),%eax
  1029d1:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1029d8:	8b 50 04             	mov    0x4(%eax),%edx
  1029db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029de:	8b 00                	mov    (%eax),%eax
  1029e0:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  1029e7:	8b 40 08             	mov    0x8(%eax),%eax
  1029ea:	29 c2                	sub    %eax,%edx
  1029ec:	89 d0                	mov    %edx,%eax
  1029ee:	3b 45 10             	cmp    0x10(%ebp),%eax
  1029f1:	73 07                	jae    1029fa <ramfs_fifo_write+0x6f>
  1029f3:	b8 01 00 00 00       	mov    $0x1,%eax
  1029f8:	eb 64                	jmp    102a5e <ramfs_fifo_write+0xd3>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  1029fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029fd:	8b 00                	mov    (%eax),%eax
  1029ff:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102a06:	8b 10                	mov    (%eax),%edx
  102a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a0b:	8b 00                	mov    (%eax),%eax
  102a0d:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102a14:	8b 40 08             	mov    0x8(%eax),%eax
  102a17:	01 c2                	add    %eax,%edx
  102a19:	8b 45 10             	mov    0x10(%ebp),%eax
  102a1c:	89 44 24 08          	mov    %eax,0x8(%esp)
  102a20:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a23:	89 44 24 04          	mov    %eax,0x4(%esp)
  102a27:	89 14 24             	mov    %edx,(%esp)
  102a2a:	e8 ba 12 00 00       	call   103ce9 <memcpy>
        buffer[kf->id]->pos += length;
  102a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a32:	8b 00                	mov    (%eax),%eax
  102a34:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102a3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102a3e:	8b 12                	mov    (%edx),%edx
  102a40:	8b 14 95 e0 99 14 00 	mov    0x1499e0(,%edx,4),%edx
  102a47:	8b 4a 08             	mov    0x8(%edx),%ecx
  102a4a:	8b 55 10             	mov    0x10(%ebp),%edx
  102a4d:	01 ca                	add    %ecx,%edx
  102a4f:	89 50 08             	mov    %edx,0x8(%eax)

        return RW_OK;
  102a52:	b8 00 00 00 00       	mov    $0x0,%eax
  102a57:	eb 05                	jmp    102a5e <ramfs_fifo_write+0xd3>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102a59:	b8 03 00 00 00       	mov    $0x3,%eax
}
  102a5e:	c9                   	leave  
  102a5f:	c3                   	ret    

00102a60 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  102a60:	55                   	push   %ebp
  102a61:	89 e5                	mov    %esp,%ebp
  102a63:	83 ec 28             	sub    $0x28,%esp
    if(buffer[kf->id] != 0) {
  102a66:	8b 45 08             	mov    0x8(%ebp),%eax
  102a69:	8b 00                	mov    (%eax),%eax
  102a6b:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102a72:	85 c0                	test   %eax,%eax
  102a74:	0f 84 88 00 00 00    	je     102b02 <ramfs_fifo_open+0xa2>
        if(filemode & FM_EXEC) return 0;
  102a7a:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a7d:	83 e0 04             	and    $0x4,%eax
  102a80:	85 c0                	test   %eax,%eax
  102a82:	74 07                	je     102a8b <ramfs_fifo_open+0x2b>
  102a84:	b8 00 00 00 00       	mov    $0x0,%eax
  102a89:	eb 7c                	jmp    102b07 <ramfs_fifo_open+0xa7>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  102a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a8e:	83 e0 01             	and    $0x1,%eax
  102a91:	85 c0                	test   %eax,%eax
  102a93:	74 15                	je     102aaa <ramfs_fifo_open+0x4a>
  102a95:	8b 45 08             	mov    0x8(%ebp),%eax
  102a98:	8b 00                	mov    (%eax),%eax
  102a9a:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102aa1:	8b 50 0c             	mov    0xc(%eax),%edx
  102aa4:	83 c2 01             	add    $0x1,%edx
  102aa7:	89 50 0c             	mov    %edx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  102aaa:	8b 45 0c             	mov    0xc(%ebp),%eax
  102aad:	83 e0 02             	and    $0x2,%eax
  102ab0:	85 c0                	test   %eax,%eax
  102ab2:	74 15                	je     102ac9 <ramfs_fifo_open+0x69>
  102ab4:	8b 45 08             	mov    0x8(%ebp),%eax
  102ab7:	8b 00                	mov    (%eax),%eax
  102ab9:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102ac0:	8b 50 10             	mov    0x10(%eax),%edx
  102ac3:	83 c2 01             	add    $0x1,%edx
  102ac6:	89 50 10             	mov    %edx,0x10(%eax)

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102ac9:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102ad0:	e8 19 0f 00 00       	call   1039ee <malloc>
  102ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)

        rethandle->filemode = filemode;
  102ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102adb:	8b 55 0c             	mov    0xc(%ebp),%edx
  102ade:	89 50 0c             	mov    %edx,0xc(%eax)
        rethandle->position = 0;
  102ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ae4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102aee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102af7:	8b 55 08             	mov    0x8(%ebp),%edx
  102afa:	89 50 04             	mov    %edx,0x4(%eax)

        return rethandle;
  102afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b00:	eb 05                	jmp    102b07 <ramfs_fifo_open+0xa7>
    }

    return 0;
  102b02:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102b07:	c9                   	leave  
  102b08:	c3                   	ret    

00102b09 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  102b09:	55                   	push   %ebp
  102b0a:	89 e5                	mov    %esp,%ebp
  102b0c:	83 ec 28             	sub    $0x28,%esp
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102b0f:	8b 45 08             	mov    0x8(%ebp),%eax
  102b12:	8b 40 04             	mov    0x4(%eax),%eax
  102b15:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b1b:	8b 00                	mov    (%eax),%eax
  102b1d:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102b24:	85 c0                	test   %eax,%eax
  102b26:	74 44                	je     102b6c <ramfs_fifo_close+0x63>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  102b28:	8b 45 08             	mov    0x8(%ebp),%eax
  102b2b:	8b 40 0c             	mov    0xc(%eax),%eax
  102b2e:	83 e0 01             	and    $0x1,%eax
  102b31:	85 c0                	test   %eax,%eax
  102b33:	74 15                	je     102b4a <ramfs_fifo_close+0x41>
  102b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b38:	8b 00                	mov    (%eax),%eax
  102b3a:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102b41:	8b 50 0c             	mov    0xc(%eax),%edx
  102b44:	83 ea 01             	sub    $0x1,%edx
  102b47:	89 50 0c             	mov    %edx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  102b4a:	8b 45 08             	mov    0x8(%ebp),%eax
  102b4d:	8b 40 0c             	mov    0xc(%eax),%eax
  102b50:	83 e0 02             	and    $0x2,%eax
  102b53:	85 c0                	test   %eax,%eax
  102b55:	74 15                	je     102b6c <ramfs_fifo_close+0x63>
  102b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b5a:	8b 00                	mov    (%eax),%eax
  102b5c:	8b 04 85 e0 99 14 00 	mov    0x1499e0(,%eax,4),%eax
  102b63:	8b 50 10             	mov    0x10(%eax),%edx
  102b66:	83 ea 01             	sub    $0x1,%edx
  102b69:	89 50 10             	mov    %edx,0x10(%eax)
    }

    free(handle);
  102b6c:	8b 45 08             	mov    0x8(%ebp),%eax
  102b6f:	89 04 24             	mov    %eax,(%esp)
  102b72:	e8 d6 10 00 00       	call   103c4d <free>

    return 0;
  102b77:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102b7c:	c9                   	leave  
  102b7d:	c3                   	ret    

00102b7e <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  102b7e:	55                   	push   %ebp
  102b7f:	89 e5                	mov    %esp,%ebp
  102b81:	83 ec 10             	sub    $0x10,%esp

    unsigned int size = 0;
  102b84:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    unsigned int j;
    unsigned int count = 1;
  102b8b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  102b92:	c7 45 f8 0b 00 00 00 	movl   $0xb,-0x8(%ebp)
  102b99:	eb 23                	jmp    102bbe <tar_parse_number+0x40>
        size += ((in[j - 1] - '0') * count);
  102b9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102b9e:	8d 50 ff             	lea    -0x1(%eax),%edx
  102ba1:	8b 45 08             	mov    0x8(%ebp),%eax
  102ba4:	01 d0                	add    %edx,%eax
  102ba6:	0f b6 00             	movzbl (%eax),%eax
  102ba9:	0f be c0             	movsbl %al,%eax
  102bac:	83 e8 30             	sub    $0x30,%eax
  102baf:	0f af 45 f4          	imul   -0xc(%ebp),%eax
  102bb3:	01 45 fc             	add    %eax,-0x4(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  102bb6:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
  102bba:	c1 65 f4 03          	shll   $0x3,-0xc(%ebp)
  102bbe:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  102bc2:	75 d7                	jne    102b9b <tar_parse_number+0x1d>
        size += ((in[j - 1] - '0') * count);

    return size;
  102bc4:	8b 45 fc             	mov    -0x4(%ebp),%eax

}
  102bc7:	c9                   	leave  
  102bc8:	c3                   	ret    

00102bc9 <tar_load_ramfs>:

void tar_load_ramfs(void* tarball) {
  102bc9:	55                   	push   %ebp
  102bca:	89 e5                	mov    %esp,%ebp
  102bcc:	83 ec 38             	sub    $0x38,%esp
    void* address = tarball;
  102bcf:	8b 45 08             	mov    0x8(%ebp),%eax
  102bd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  102bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102bd8:	89 44 24 04          	mov    %eax,0x4(%esp)
  102bdc:	c7 04 24 c0 76 10 00 	movl   $0x1076c0,(%esp)
  102be3:	e8 b7 d9 ff ff       	call   10059f <kprintf>

    for (i = 0; ; i++)
  102be8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  102bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  102bf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102bf8:	0f b6 00             	movzbl (%eax),%eax
  102bfb:	84 c0                	test   %al,%al
  102bfd:	75 11                	jne    102c10 <tar_load_ramfs+0x47>
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  102bff:	c7 04 24 ec 76 10 00 	movl   $0x1076ec,(%esp)
  102c06:	e8 94 d9 ff ff       	call   10059f <kprintf>
  102c0b:	e9 05 01 00 00       	jmp    102d15 <tar_load_ramfs+0x14c>
        struct tar_header *header = (struct tar_header*)address;

        if (header->name[0] == '\0')
            break;

        uint32_t size = tar_parse_number(header->size);
  102c10:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c13:	83 c0 7c             	add    $0x7c,%eax
  102c16:	89 04 24             	mov    %eax,(%esp)
  102c19:	e8 60 ff ff ff       	call   102b7e <tar_parse_number>
  102c1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        address += 512;
  102c21:	81 45 f4 00 02 00 00 	addl   $0x200,-0xc(%ebp)

        if(size != 0) {
  102c28:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102c2b:	85 c0                	test   %eax,%eax
  102c2d:	0f 84 95 00 00 00    	je     102cc8 <tar_load_ramfs+0xff>
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  102c33:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102c36:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c39:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c3d:	89 44 24 04          	mov    %eax,0x4(%esp)
  102c41:	c7 04 24 14 77 10 00 	movl   $0x107714,(%esp)
  102c48:	e8 52 d9 ff ff       	call   10059f <kprintf>

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  102c4d:	e8 da f7 ff ff       	call   10242c <ramfs_block_driver_struct>
  102c52:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c55:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  102c58:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  102c5c:	89 44 24 04          	mov    %eax,0x4(%esp)
  102c60:	89 14 24             	mov    %edx,(%esp)
  102c63:	e8 39 18 00 00       	call   1044a1 <vfs_create_kfile>
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  102c68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c6b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  102c72:	00 
  102c73:	89 04 24             	mov    %eax,(%esp)
  102c76:	e8 b9 18 00 00       	call   104534 <vfs_open>
  102c7b:	89 45 e8             	mov    %eax,-0x18(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  102c7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102c81:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102c88:	00 
  102c89:	89 44 24 08          	mov    %eax,0x8(%esp)
  102c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c90:	89 44 24 04          	mov    %eax,0x4(%esp)
  102c94:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c97:	89 04 24             	mov    %eax,(%esp)
  102c9a:	e8 c2 19 00 00       	call   104661 <vfs_write>
  102c9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if(err) {
  102ca2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  102ca6:	74 13                	je     102cbb <tar_load_ramfs+0xf2>
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  102ca8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102cab:	89 44 24 04          	mov    %eax,0x4(%esp)
  102caf:	c7 04 24 38 77 10 00 	movl   $0x107738,(%esp)
  102cb6:	e8 e4 d8 ff ff       	call   10059f <kprintf>
            }

            vfs_close(h);
  102cbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102cbe:	89 04 24             	mov    %eax,(%esp)
  102cc1:	e8 c9 18 00 00       	call   10458f <vfs_close>
  102cc6:	eb 25                	jmp    102ced <tar_load_ramfs+0x124>
        }
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  102cc8:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102ccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102cce:	89 54 24 08          	mov    %edx,0x8(%esp)
  102cd2:	89 44 24 04          	mov    %eax,0x4(%esp)
  102cd6:	c7 04 24 54 77 10 00 	movl   $0x107754,(%esp)
  102cdd:	e8 bd d8 ff ff       	call   10059f <kprintf>
            vfs_create_dir(header->name);
  102ce2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ce5:	89 04 24             	mov    %eax,(%esp)
  102ce8:	e8 a1 17 00 00       	call   10448e <vfs_create_dir>
        }

        address += (size / 512) * 512;
  102ced:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102cf0:	c1 e8 09             	shr    $0x9,%eax
  102cf3:	c1 e0 09             	shl    $0x9,%eax
  102cf6:	01 45 f4             	add    %eax,-0xc(%ebp)

        if (size % 512)
  102cf9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102cfc:	25 ff 01 00 00       	and    $0x1ff,%eax
  102d01:	85 c0                	test   %eax,%eax
  102d03:	74 07                	je     102d0c <tar_load_ramfs+0x143>
            address += 512;
  102d05:	81 45 f4 00 02 00 00 	addl   $0x200,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  102d0c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
        address += (size / 512) * 512;

        if (size % 512)
            address += 512;

    }
  102d10:	e9 da fe ff ff       	jmp    102bef <tar_load_ramfs+0x26>

    kprintf("[initrfs] Finished unpacking tarball\n");
}
  102d15:	c9                   	leave  
  102d16:	c3                   	ret    

00102d17 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  102d17:	55                   	push   %ebp
  102d18:	89 e5                	mov    %esp,%ebp
    return &vga_driver;
  102d1a:	b8 dc 62 10 00       	mov    $0x1062dc,%eax
}
  102d1f:	5d                   	pop    %ebp
  102d20:	c3                   	ret    

00102d21 <ramfs_vga_writers>:

uint32_t ramfs_vga_writers() {
  102d21:	55                   	push   %ebp
  102d22:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  102d24:	a1 44 95 12 00       	mov    0x129544,%eax
}
  102d29:	5d                   	pop    %ebp
  102d2a:	c3                   	ret    

00102d2b <ramfs_vga_available>:

uint32_t ramfs_vga_available(struct res_handle* handle) {
  102d2b:	55                   	push   %ebp
  102d2c:	89 e5                	mov    %esp,%ebp
    return sizeof(struct vga_command);
  102d2e:	b8 06 00 00 00       	mov    $0x6,%eax
}
  102d33:	5d                   	pop    %ebp
  102d34:	c3                   	ret    

00102d35 <ramfs_vga_create>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  102d35:	55                   	push   %ebp
  102d36:	89 e5                	mov    %esp,%ebp
  102d38:	83 ec 18             	sub    $0x18,%esp
    return malloc(sizeof(struct res_kfile));
  102d3b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102d42:	e8 a7 0c 00 00       	call   1039ee <malloc>
}
  102d47:	c9                   	leave  
  102d48:	c3                   	ret    

00102d49 <ramfs_vga_read>:

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  102d49:	55                   	push   %ebp
  102d4a:	89 e5                	mov    %esp,%ebp
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102d4c:	b8 03 00 00 00       	mov    $0x3,%eax
}
  102d51:	5d                   	pop    %ebp
  102d52:	c3                   	ret    

00102d53 <ramfs_vga_write>:

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  102d53:	55                   	push   %ebp
  102d54:	89 e5                	mov    %esp,%ebp
  102d56:	83 ec 10             	sub    $0x10,%esp
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  102d59:	83 7d 10 06          	cmpl   $0x6,0x10(%ebp)
  102d5d:	74 0a                	je     102d69 <ramfs_vga_write+0x16>
  102d5f:	b8 03 00 00 00       	mov    $0x3,%eax
  102d64:	e9 d7 00 00 00       	jmp    102e40 <ramfs_vga_write+0xed>

    struct vga_command* vgac = src;
  102d69:	8b 45 0c             	mov    0xc(%ebp),%eax
  102d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(vgac->command == CMD_SET) {
  102d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d72:	0f b7 00             	movzwl (%eax),%eax
  102d75:	66 85 c0             	test   %ax,%ax
  102d78:	75 2b                	jne    102da5 <ramfs_vga_write+0x52>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  102d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d7d:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  102d81:	66 3d cf 07          	cmp    $0x7cf,%ax
  102d85:	77 1e                	ja     102da5 <ramfs_vga_write+0x52>
  102d87:	8b 15 d8 62 10 00    	mov    0x1062d8,%edx
  102d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d90:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  102d94:	0f b7 c0             	movzwl %ax,%eax
  102d97:	01 c0                	add    %eax,%eax
  102d99:	01 c2                	add    %eax,%edx
  102d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d9e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
  102da2:	66 89 02             	mov    %ax,(%edx)
    }

    if(vgac->command == CMD_CLEAR) {
  102da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102da8:	0f b7 00             	movzwl (%eax),%eax
  102dab:	66 83 f8 01          	cmp    $0x1,%ax
  102daf:	75 27                	jne    102dd8 <ramfs_vga_write+0x85>
        for(int i = 0; i < (80 * 25); i++) {
  102db1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102db8:	eb 15                	jmp    102dcf <ramfs_vga_write+0x7c>
            vga_buffer[i] = 0;
  102dba:	a1 d8 62 10 00       	mov    0x1062d8,%eax
  102dbf:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102dc2:	01 d2                	add    %edx,%edx
  102dc4:	01 d0                	add    %edx,%eax
  102dc6:	66 c7 00 00 00       	movw   $0x0,(%eax)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  102dcb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  102dcf:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
  102dd6:	7e e2                	jle    102dba <ramfs_vga_write+0x67>
            vga_buffer[i] = 0;
        }
    }

    if(vgac->command == CMD_SCROLL) {
  102dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ddb:	0f b7 00             	movzwl (%eax),%eax
  102dde:	66 83 f8 02          	cmp    $0x2,%ax
  102de2:	75 57                	jne    102e3b <ramfs_vga_write+0xe8>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  102de4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102deb:	eb 25                	jmp    102e12 <ramfs_vga_write+0xbf>
            vga_buffer[i] = vga_buffer[i + 80];
  102ded:	a1 d8 62 10 00       	mov    0x1062d8,%eax
  102df2:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102df5:	01 d2                	add    %edx,%edx
  102df7:	01 c2                	add    %eax,%edx
  102df9:	a1 d8 62 10 00       	mov    0x1062d8,%eax
  102dfe:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e01:	83 c1 50             	add    $0x50,%ecx
  102e04:	01 c9                	add    %ecx,%ecx
  102e06:	01 c8                	add    %ecx,%eax
  102e08:	0f b7 00             	movzwl (%eax),%eax
  102e0b:	66 89 02             	mov    %ax,(%edx)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  102e0e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  102e12:	81 7d f8 7f 07 00 00 	cmpl   $0x77f,-0x8(%ebp)
  102e19:	7e d2                	jle    102ded <ramfs_vga_write+0x9a>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  102e1b:	eb 15                	jmp    102e32 <ramfs_vga_write+0xdf>
            vga_buffer[i] = 0;
  102e1d:	a1 d8 62 10 00       	mov    0x1062d8,%eax
  102e22:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102e25:	01 d2                	add    %edx,%edx
  102e27:	01 d0                	add    %edx,%eax
  102e29:	66 c7 00 00 00       	movw   $0x0,(%eax)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  102e2e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  102e32:	81 7d f8 cf 07 00 00 	cmpl   $0x7cf,-0x8(%ebp)
  102e39:	7e e2                	jle    102e1d <ramfs_vga_write+0xca>
            vga_buffer[i] = 0;
        }
    }

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102e3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102e40:	c9                   	leave  
  102e41:	c3                   	ret    

00102e42 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  102e42:	55                   	push   %ebp
  102e43:	89 e5                	mov    %esp,%ebp
  102e45:	83 ec 28             	sub    $0x28,%esp
    if(filemode & FM_EXEC) return 0;
  102e48:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e4b:	83 e0 04             	and    $0x4,%eax
  102e4e:	85 c0                	test   %eax,%eax
  102e50:	74 07                	je     102e59 <ramfs_vga_open+0x17>
  102e52:	b8 00 00 00 00       	mov    $0x0,%eax
  102e57:	eb 79                	jmp    102ed2 <ramfs_vga_open+0x90>
    if(filemode & FM_READ) return 0;
  102e59:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e5c:	83 e0 01             	and    $0x1,%eax
  102e5f:	85 c0                	test   %eax,%eax
  102e61:	74 07                	je     102e6a <ramfs_vga_open+0x28>
  102e63:	b8 00 00 00 00       	mov    $0x0,%eax
  102e68:	eb 68                	jmp    102ed2 <ramfs_vga_open+0x90>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  102e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e6d:	83 e0 02             	and    $0x2,%eax
  102e70:	85 c0                	test   %eax,%eax
  102e72:	74 10                	je     102e84 <ramfs_vga_open+0x42>
  102e74:	a1 44 95 12 00       	mov    0x129544,%eax
  102e79:	85 c0                	test   %eax,%eax
  102e7b:	74 07                	je     102e84 <ramfs_vga_open+0x42>
  102e7d:	b8 00 00 00 00       	mov    $0x0,%eax
  102e82:	eb 4e                	jmp    102ed2 <ramfs_vga_open+0x90>
    if((filemode & FM_WRITE)) vga_writers++;
  102e84:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e87:	83 e0 02             	and    $0x2,%eax
  102e8a:	85 c0                	test   %eax,%eax
  102e8c:	74 0d                	je     102e9b <ramfs_vga_open+0x59>
  102e8e:	a1 44 95 12 00       	mov    0x129544,%eax
  102e93:	83 c0 01             	add    $0x1,%eax
  102e96:	a3 44 95 12 00       	mov    %eax,0x129544

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102e9b:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102ea2:	e8 47 0b 00 00       	call   1039ee <malloc>
  102ea7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    rethandle->filemode = filemode;
  102eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ead:	8b 55 0c             	mov    0xc(%ebp),%edx
  102eb0:	89 50 0c             	mov    %edx,0xc(%eax)
    rethandle->position = 0;
  102eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102eb6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  102ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ec0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  102ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ec9:	8b 55 08             	mov    0x8(%ebp),%edx
  102ecc:	89 50 04             	mov    %edx,0x4(%eax)

    return rethandle;
  102ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  102ed2:	c9                   	leave  
  102ed3:	c3                   	ret    

00102ed4 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  102ed4:	55                   	push   %ebp
  102ed5:	89 e5                	mov    %esp,%ebp
  102ed7:	83 ec 18             	sub    $0x18,%esp
    if(handle->filemode & FM_WRITE) vga_writers--;
  102eda:	8b 45 08             	mov    0x8(%ebp),%eax
  102edd:	8b 40 0c             	mov    0xc(%eax),%eax
  102ee0:	83 e0 02             	and    $0x2,%eax
  102ee3:	85 c0                	test   %eax,%eax
  102ee5:	74 0d                	je     102ef4 <ramfs_vga_close+0x20>
  102ee7:	a1 44 95 12 00       	mov    0x129544,%eax
  102eec:	83 e8 01             	sub    $0x1,%eax
  102eef:	a3 44 95 12 00       	mov    %eax,0x129544

    free(handle);
  102ef4:	8b 45 08             	mov    0x8(%ebp),%eax
  102ef7:	89 04 24             	mov    %eax,(%esp)
  102efa:	e8 4e 0d 00 00       	call   103c4d <free>

    return 0;
  102eff:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102f04:	c9                   	leave  
  102f05:	c3                   	ret    

00102f06 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1; //FIXME int.max_value overflow

void enableScheduling(void) {
  102f06:	55                   	push   %ebp
  102f07:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  102f09:	c7 05 48 95 12 00 01 	movl   $0x1,0x129548
  102f10:	00 00 00 
}
  102f13:	5d                   	pop    %ebp
  102f14:	c3                   	ret    

00102f15 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  102f15:	55                   	push   %ebp
  102f16:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  102f18:	a1 48 95 12 00       	mov    0x129548,%eax
}
  102f1d:	5d                   	pop    %ebp
  102f1e:	c3                   	ret    

00102f1f <get_current_task>:

struct task* get_current_task(void) {
  102f1f:	55                   	push   %ebp
  102f20:	89 e5                	mov    %esp,%ebp
    return current_task;
  102f22:	a1 50 95 12 00       	mov    0x129550,%eax
}
  102f27:	5d                   	pop    %ebp
  102f28:	c3                   	ret    

00102f29 <get_task_by_pid>:

struct task* get_task_by_pid(int pid) {
  102f29:	55                   	push   %ebp
  102f2a:	89 e5                	mov    %esp,%ebp
  102f2c:	83 ec 10             	sub    $0x10,%esp
    struct task* cur = first_task;
  102f2f:	a1 4c 95 12 00       	mov    0x12954c,%eax
  102f34:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while(cur != 0 && cur->PID != pid) {
  102f37:	eb 09                	jmp    102f42 <get_task_by_pid+0x19>
        cur = cur->next;
  102f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f3c:	8b 40 08             	mov    0x8(%eax),%eax
  102f3f:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

struct task* get_task_by_pid(int pid) {
    struct task* cur = first_task;

    while(cur != 0 && cur->PID != pid) {
  102f42:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  102f46:	74 0a                	je     102f52 <get_task_by_pid+0x29>
  102f48:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f4b:	8b 00                	mov    (%eax),%eax
  102f4d:	3b 45 08             	cmp    0x8(%ebp),%eax
  102f50:	75 e7                	jne    102f39 <get_task_by_pid+0x10>
        cur = cur->next;
    }

    return cur;
  102f52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  102f55:	c9                   	leave  
  102f56:	c3                   	ret    

00102f57 <register_handle>:

uint32_t register_handle(struct res_handle* h) {
  102f57:	55                   	push   %ebp
  102f58:	89 e5                	mov    %esp,%ebp
  102f5a:	53                   	push   %ebx
  102f5b:	83 ec 24             	sub    $0x24,%esp
    struct hl_node* old = current_task->handle_list;
  102f5e:	a1 50 95 12 00       	mov    0x129550,%eax
  102f63:	8b 40 3c             	mov    0x3c(%eax),%eax
  102f66:	89 45 f4             	mov    %eax,-0xc(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  102f69:	8b 1d 50 95 12 00    	mov    0x129550,%ebx
  102f6f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102f76:	e8 73 0a 00 00       	call   1039ee <malloc>
  102f7b:	89 43 3c             	mov    %eax,0x3c(%ebx)
    current_task->handle_list->next = old;
  102f7e:	a1 50 95 12 00       	mov    0x129550,%eax
  102f83:	8b 40 3c             	mov    0x3c(%eax),%eax
  102f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102f89:	89 50 04             	mov    %edx,0x4(%eax)
    current_task->handle_list->handle = h;
  102f8c:	a1 50 95 12 00       	mov    0x129550,%eax
  102f91:	8b 40 3c             	mov    0x3c(%eax),%eax
  102f94:	8b 55 08             	mov    0x8(%ebp),%edx
  102f97:	89 10                	mov    %edx,(%eax)

    return 0;
  102f99:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102f9e:	83 c4 24             	add    $0x24,%esp
  102fa1:	5b                   	pop    %ebx
  102fa2:	5d                   	pop    %ebp
  102fa3:	c3                   	ret    

00102fa4 <unregister_handle>:

uint32_t unregister_handle(struct res_handle* h) {
  102fa4:	55                   	push   %ebp
  102fa5:	89 e5                	mov    %esp,%ebp
  102fa7:	83 ec 28             	sub    $0x28,%esp
    struct hl_node* cur = current_task->handle_list;
  102faa:	a1 50 95 12 00       	mov    0x129550,%eax
  102faf:	8b 40 3c             	mov    0x3c(%eax),%eax
  102fb2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  102fb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  102fb9:	75 0a                	jne    102fc5 <unregister_handle+0x21>
  102fbb:	b8 02 00 00 00       	mov    $0x2,%eax
  102fc0:	e9 84 00 00 00       	jmp    103049 <unregister_handle+0xa5>
    if(cur == 0) return 1;
  102fc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  102fc9:	75 07                	jne    102fd2 <unregister_handle+0x2e>
  102fcb:	b8 01 00 00 00       	mov    $0x1,%eax
  102fd0:	eb 77                	jmp    103049 <unregister_handle+0xa5>

    if(cur->handle == h) {
  102fd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fd5:	8b 00                	mov    (%eax),%eax
  102fd7:	3b 45 08             	cmp    0x8(%ebp),%eax
  102fda:	75 20                	jne    102ffc <unregister_handle+0x58>
        current_task->handle_list = cur->next;
  102fdc:	a1 50 95 12 00       	mov    0x129550,%eax
  102fe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102fe4:	8b 52 04             	mov    0x4(%edx),%edx
  102fe7:	89 50 3c             	mov    %edx,0x3c(%eax)
        free(cur);
  102fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fed:	89 04 24             	mov    %eax,(%esp)
  102ff0:	e8 58 0c 00 00       	call   103c4d <free>

        return 0;
  102ff5:	b8 00 00 00 00       	mov    $0x0,%eax
  102ffa:	eb 4d                	jmp    103049 <unregister_handle+0xa5>
    }

    while(cur != 0) {
  102ffc:	eb 40                	jmp    10303e <unregister_handle+0x9a>
        if(cur->next->handle == h) {
  102ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103001:	8b 40 04             	mov    0x4(%eax),%eax
  103004:	8b 00                	mov    (%eax),%eax
  103006:	3b 45 08             	cmp    0x8(%ebp),%eax
  103009:	75 2a                	jne    103035 <unregister_handle+0x91>
            void* next = cur->next;
  10300b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10300e:	8b 40 04             	mov    0x4(%eax),%eax
  103011:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  103014:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103017:	8b 40 04             	mov    0x4(%eax),%eax
  10301a:	8b 50 04             	mov    0x4(%eax),%edx
  10301d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103020:	89 50 04             	mov    %edx,0x4(%eax)

            free(next);
  103023:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103026:	89 04 24             	mov    %eax,(%esp)
  103029:	e8 1f 0c 00 00       	call   103c4d <free>

            return 0;
  10302e:	b8 00 00 00 00       	mov    $0x0,%eax
  103033:	eb 14                	jmp    103049 <unregister_handle+0xa5>
        }

        cur = cur->next;
  103035:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103038:	8b 40 04             	mov    0x4(%eax),%eax
  10303b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        free(cur);

        return 0;
    }

    while(cur != 0) {
  10303e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103042:	75 ba                	jne    102ffe <unregister_handle+0x5a>
        }

        cur = cur->next;
    }

    return 3;
  103044:	b8 03 00 00 00       	mov    $0x3,%eax
}
  103049:	c9                   	leave  
  10304a:	c3                   	ret    

0010304b <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  10304b:	55                   	push   %ebp
  10304c:	89 e5                	mov    %esp,%ebp
  10304e:	53                   	push   %ebx
  10304f:	83 ec 24             	sub    $0x24,%esp
    if (current_task == first_task && current_task->next == 0) {
  103052:	8b 15 50 95 12 00    	mov    0x129550,%edx
  103058:	a1 4c 95 12 00       	mov    0x12954c,%eax
  10305d:	39 c2                	cmp    %eax,%edx
  10305f:	75 69                	jne    1030ca <schedule_exception+0x7f>
  103061:	a1 50 95 12 00       	mov    0x129550,%eax
  103066:	8b 40 08             	mov    0x8(%eax),%eax
  103069:	85 c0                	test   %eax,%eax
  10306b:	75 5d                	jne    1030ca <schedule_exception+0x7f>
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  10306d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  103074:	e8 0f d5 ff ff       	call   100588 <setclr>
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  103079:	8b 45 08             	mov    0x8(%ebp),%eax
  10307c:	8b 58 20             	mov    0x20(%eax),%ebx
  10307f:	8b 45 08             	mov    0x8(%ebp),%eax
  103082:	8b 48 1c             	mov    0x1c(%eax),%ecx
  103085:	a1 50 95 12 00       	mov    0x129550,%eax
  10308a:	8b 50 24             	mov    0x24(%eax),%edx
  10308d:	a1 50 95 12 00       	mov    0x129550,%eax
  103092:	8b 00                	mov    (%eax),%eax
  103094:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  103098:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  10309c:	89 54 24 08          	mov    %edx,0x8(%esp)
  1030a0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1030a4:	c7 04 24 88 77 10 00 	movl   $0x107788,(%esp)
  1030ab:	e8 ef d4 ff ff       	call   10059f <kprintf>
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  1030b0:	c7 44 24 04 c8 77 10 	movl   $0x1077c8,0x4(%esp)
  1030b7:	00 
  1030b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1030bb:	89 04 24             	mov    %eax,(%esp)
  1030be:	e8 f7 d0 ff ff       	call   1001ba <show_cod>

        //will never occur cause COD terminates execution
        return 0;
  1030c3:	b8 00 00 00 00       	mov    $0x0,%eax
  1030c8:	eb 71                	jmp    10313b <schedule_exception+0xf0>
    } else {
        //Potential security leaks available in following code.
        setclr(0x04);
  1030ca:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1030d1:	e8 b2 d4 ff ff       	call   100588 <setclr>
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  1030d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1030d9:	8b 58 20             	mov    0x20(%eax),%ebx
  1030dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1030df:	8b 48 1c             	mov    0x1c(%eax),%ecx
  1030e2:	a1 50 95 12 00       	mov    0x129550,%eax
  1030e7:	8b 50 24             	mov    0x24(%eax),%edx
  1030ea:	a1 50 95 12 00       	mov    0x129550,%eax
  1030ef:	8b 00                	mov    (%eax),%eax
  1030f1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1030f5:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1030f9:	89 54 24 08          	mov    %edx,0x8(%esp)
  1030fd:	89 44 24 04          	mov    %eax,0x4(%esp)
  103101:	c7 04 24 88 77 10 00 	movl   $0x107788,(%esp)
  103108:	e8 92 d4 ff ff       	call   10059f <kprintf>
        kprintf("\n");
  10310d:	c7 04 24 f1 77 10 00 	movl   $0x1077f1,(%esp)
  103114:	e8 86 d4 ff ff       	call   10059f <kprintf>
        show_dump(cpu);
  103119:	8b 45 08             	mov    0x8(%ebp),%eax
  10311c:	89 04 24             	mov    %eax,(%esp)
  10311f:	e8 ec d0 ff ff       	call   100210 <show_dump>
        setclr(0x07);
  103124:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10312b:	e8 58 d4 ff ff       	call   100588 <setclr>

        return terminate_current(cpu);
  103130:	8b 45 08             	mov    0x8(%ebp),%eax
  103133:	89 04 24             	mov    %eax,(%esp)
  103136:	e8 06 00 00 00       	call   103141 <terminate_current>
    }
}
  10313b:	83 c4 24             	add    $0x24,%esp
  10313e:	5b                   	pop    %ebx
  10313f:	5d                   	pop    %ebp
  103140:	c3                   	ret    

00103141 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  103141:	55                   	push   %ebp
  103142:	89 e5                	mov    %esp,%ebp
  103144:	83 ec 28             	sub    $0x28,%esp
    struct task* next = current_task->next;
  103147:	a1 50 95 12 00       	mov    0x129550,%eax
  10314c:	8b 40 08             	mov    0x8(%eax),%eax
  10314f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* prev = current_task->prev;
  103152:	a1 50 95 12 00       	mov    0x129550,%eax
  103157:	8b 40 0c             	mov    0xc(%eax),%eax
  10315a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct task* old = current_task;
  10315d:	a1 50 95 12 00       	mov    0x129550,%eax
  103162:	89 45 ec             	mov    %eax,-0x14(%ebp)

    vmm_free_current_pagetables();
  103165:	e8 1f 1f 00 00       	call   105089 <vmm_free_current_pagetables>

    if (current_task == first_task) {
  10316a:	8b 15 50 95 12 00    	mov    0x129550,%edx
  103170:	a1 4c 95 12 00       	mov    0x12954c,%eax
  103175:	39 c2                	cmp    %eax,%edx
  103177:	75 0d                	jne    103186 <terminate_current+0x45>
        first_task = current_task->next;
  103179:	a1 50 95 12 00       	mov    0x129550,%eax
  10317e:	8b 40 08             	mov    0x8(%eax),%eax
  103181:	a3 4c 95 12 00       	mov    %eax,0x12954c
    }

    if (next != 0) {
  103186:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10318a:	74 09                	je     103195 <terminate_current+0x54>
        next->prev = prev;
  10318c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10318f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103192:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    if (prev != 0) {
  103195:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103199:	74 09                	je     1031a4 <terminate_current+0x63>
        prev->next = next;
  10319b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10319e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1031a1:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if (next == 0)
  1031a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1031a8:	75 08                	jne    1031b2 <terminate_current+0x71>
        next = first_task;
  1031aa:	a1 4c 95 12 00       	mov    0x12954c,%eax
  1031af:	89 45 f4             	mov    %eax,-0xc(%ebp)

    current_task = next;
  1031b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031b5:	a3 50 95 12 00       	mov    %eax,0x129550

    free(old->cpuState);
  1031ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1031bd:	8b 40 04             	mov    0x4(%eax),%eax
  1031c0:	89 04 24             	mov    %eax,(%esp)
  1031c3:	e8 85 0a 00 00       	call   103c4d <free>
    free(old);
  1031c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1031cb:	89 04 24             	mov    %eax,(%esp)
  1031ce:	e8 7a 0a 00 00       	call   103c4d <free>

    if(current_task == 0) {
  1031d3:	a1 50 95 12 00       	mov    0x129550,%eax
  1031d8:	85 c0                	test   %eax,%eax
  1031da:	75 13                	jne    1031ef <terminate_current+0xae>
        show_cod(cpu, "Last task terminated.");
  1031dc:	c7 44 24 04 f3 77 10 	movl   $0x1077f3,0x4(%esp)
  1031e3:	00 
  1031e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1031e7:	89 04 24             	mov    %eax,(%esp)
  1031ea:	e8 cb cf ff ff       	call   1001ba <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  1031ef:	a1 50 95 12 00       	mov    0x129550,%eax
  1031f4:	8b 40 14             	mov    0x14(%eax),%eax
  1031f7:	89 04 24             	mov    %eax,(%esp)
  1031fa:	e8 c2 24 00 00       	call   1056c1 <vmm_activate_pagedir>
    return current_task->cpuState;
  1031ff:	a1 50 95 12 00       	mov    0x129550,%eax
  103204:	8b 40 04             	mov    0x4(%eax),%eax
}
  103207:	c9                   	leave  
  103208:	c3                   	ret    

00103209 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  103209:	55                   	push   %ebp
  10320a:	89 e5                	mov    %esp,%ebp
  10320c:	57                   	push   %edi
  10320d:	53                   	push   %ebx
  10320e:	83 ec 50             	sub    $0x50,%esp
    struct task* ntask = calloc(1, sizeof(struct task));
  103211:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
  103218:	00 
  103219:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103220:	e8 5b 09 00 00       	call   103b80 <calloc>
  103225:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ntask->cpuState = calloc(1, sizeof(struct cpu_state));
  103228:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  10322f:	00 
  103230:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103237:	e8 44 09 00 00       	call   103b80 <calloc>
  10323c:	89 c2                	mov    %eax,%edx
  10323e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103241:	89 50 04             	mov    %edx,0x4(%eax)

    ntask->phys_pdir = task_pagedir;
  103244:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103247:	8b 55 08             	mov    0x8(%ebp),%edx
  10324a:	89 50 14             	mov    %edx,0x14(%eax)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  10324d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103250:	c7 40 10 00 e0 ff ff 	movl   $0xffffe000,0x10(%eax)
    ntask->PID = nextPID++;
  103257:	a1 f8 62 10 00       	mov    0x1062f8,%eax
  10325c:	8d 50 01             	lea    0x1(%eax),%edx
  10325f:	89 15 f8 62 10 00    	mov    %edx,0x1062f8
  103265:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103268:	89 02                	mov    %eax,(%edx)

    ntask->stdin  = 0;
  10326a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10326d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    ntask->stdout = 0;
  103274:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103277:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    ntask->stderr = 0;
  10327e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103281:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)

    ntask->next = (void*) 0;
  103288:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10328b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  103292:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103295:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  10329c:	a1 4c 95 12 00       	mov    0x12954c,%eax
  1032a1:	85 c0                	test   %eax,%eax
  1032a3:	75 0a                	jne    1032af <init_task+0xa6>
        first_task = ntask;
  1032a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032a8:	a3 4c 95 12 00       	mov    %eax,0x12954c
  1032ad:	eb 1f                	jmp    1032ce <init_task+0xc5>
    } else {
        ntask->next = first_task;
  1032af:	8b 15 4c 95 12 00    	mov    0x12954c,%edx
  1032b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032b8:	89 50 08             	mov    %edx,0x8(%eax)
        first_task->prev = ntask;
  1032bb:	a1 4c 95 12 00       	mov    0x12954c,%eax
  1032c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1032c3:	89 50 0c             	mov    %edx,0xc(%eax)
        first_task = ntask;
  1032c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032c9:	a3 4c 95 12 00       	mov    %eax,0x12954c
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  1032ce:	e8 88 1d 00 00       	call   10505b <vmm_get_current_pagedir>
  1032d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    vmm_activate_pagedir(task_pagedir);
  1032d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1032d9:	89 04 24             	mov    %eax,(%esp)
  1032dc:	e8 e0 23 00 00       	call   1056c1 <vmm_activate_pagedir>

    vmm_alloc_addr(ntask->user_stack_bottom, 0);
  1032e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032e4:	8b 40 10             	mov    0x10(%eax),%eax
  1032e7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1032ee:	00 
  1032ef:	89 04 24             	mov    %eax,(%esp)
  1032f2:	e8 16 23 00 00       	call   10560d <vmm_alloc_addr>

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  1032f7:	8d 5d b8             	lea    -0x48(%ebp),%ebx
  1032fa:	b8 00 00 00 00       	mov    $0x0,%eax
  1032ff:	ba 0e 00 00 00       	mov    $0xe,%edx
  103304:	89 df                	mov    %ebx,%edi
  103306:	89 d1                	mov    %edx,%ecx
  103308:	f3 ab                	rep stos %eax,%es:(%edi)
            .esi = 0, .edi = 0, .ebp = 0, .esp =
                    (uint32_t) ntask->user_stack_bottom + 4096, .eip =
                    (uint32_t) entry,
  10330a:	8b 45 0c             	mov    0xc(%ebp),%eax
    uint32_t rest_pdir = vmm_get_current_pagedir();
    vmm_activate_pagedir(task_pagedir);

    vmm_alloc_addr(ntask->user_stack_bottom, 0);

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  10330d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103310:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  103317:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
            .esi = 0, .edi = 0, .ebp = 0, .esp =
                    (uint32_t) ntask->user_stack_bottom + 4096, .eip =
  10331e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103321:	8b 40 10             	mov    0x10(%eax),%eax
  103324:	05 00 10 00 00       	add    $0x1000,%eax
    uint32_t rest_pdir = vmm_get_current_pagedir();
    vmm_activate_pagedir(task_pagedir);

    vmm_alloc_addr(ntask->user_stack_bottom, 0);

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  103329:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10332c:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  103333:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103336:	8b 40 04             	mov    0x4(%eax),%eax
  103339:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103340:	00 
  103341:	8d 55 b8             	lea    -0x48(%ebp),%edx
  103344:	89 54 24 04          	mov    %edx,0x4(%esp)
  103348:	89 04 24             	mov    %eax,(%esp)
  10334b:	e8 99 09 00 00       	call   103ce9 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  103350:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103353:	89 04 24             	mov    %eax,(%esp)
  103356:	e8 66 23 00 00       	call   1056c1 <vmm_activate_pagedir>

    return ntask;
  10335b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10335e:	83 c4 50             	add    $0x50,%esp
  103361:	5b                   	pop    %ebx
  103362:	5f                   	pop    %edi
  103363:	5d                   	pop    %ebp
  103364:	c3                   	ret    

00103365 <save_cpu_state>:

struct cpu_state* save_cpu_state(struct cpu_state* cpu) {
  103365:	55                   	push   %ebp
  103366:	89 e5                	mov    %esp,%ebp
  103368:	83 ec 18             	sub    $0x18,%esp
    if(current_task->rpc && current_task->rpc->executing) {
  10336b:	a1 50 95 12 00       	mov    0x129550,%eax
  103370:	8b 40 18             	mov    0x18(%eax),%eax
  103373:	85 c0                	test   %eax,%eax
  103375:	74 3f                	je     1033b6 <save_cpu_state+0x51>
  103377:	a1 50 95 12 00       	mov    0x129550,%eax
  10337c:	8b 40 18             	mov    0x18(%eax),%eax
  10337f:	0f b6 40 14          	movzbl 0x14(%eax),%eax
  103383:	84 c0                	test   %al,%al
  103385:	74 2f                	je     1033b6 <save_cpu_state+0x51>
        memcpy(current_task->rpc->state, cpu, sizeof(struct cpu_state));
  103387:	a1 50 95 12 00       	mov    0x129550,%eax
  10338c:	8b 40 18             	mov    0x18(%eax),%eax
  10338f:	8b 40 18             	mov    0x18(%eax),%eax
  103392:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103399:	00 
  10339a:	8b 55 08             	mov    0x8(%ebp),%edx
  10339d:	89 54 24 04          	mov    %edx,0x4(%esp)
  1033a1:	89 04 24             	mov    %eax,(%esp)
  1033a4:	e8 40 09 00 00       	call   103ce9 <memcpy>
        return current_task->rpc->state;
  1033a9:	a1 50 95 12 00       	mov    0x129550,%eax
  1033ae:	8b 40 18             	mov    0x18(%eax),%eax
  1033b1:	8b 40 18             	mov    0x18(%eax),%eax
  1033b4:	eb 27                	jmp    1033dd <save_cpu_state+0x78>
    }
    else
    {
        memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  1033b6:	a1 50 95 12 00       	mov    0x129550,%eax
  1033bb:	8b 40 04             	mov    0x4(%eax),%eax
  1033be:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1033c5:	00 
  1033c6:	8b 55 08             	mov    0x8(%ebp),%edx
  1033c9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1033cd:	89 04 24             	mov    %eax,(%esp)
  1033d0:	e8 14 09 00 00       	call   103ce9 <memcpy>
        return current_task->cpuState;
  1033d5:	a1 50 95 12 00       	mov    0x129550,%eax
  1033da:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
  1033dd:	c9                   	leave  
  1033de:	c3                   	ret    

001033df <schedule_to_task>:

struct cpu_state* schedule_to_task(struct task* dest) {
  1033df:	55                   	push   %ebp
  1033e0:	89 e5                	mov    %esp,%ebp
  1033e2:	83 ec 18             	sub    $0x18,%esp
    current_task = dest;
  1033e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1033e8:	a3 50 95 12 00       	mov    %eax,0x129550

    vmm_activate_pagedir(dest->phys_pdir);
  1033ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1033f0:	8b 40 14             	mov    0x14(%eax),%eax
  1033f3:	89 04 24             	mov    %eax,(%esp)
  1033f6:	e8 c6 22 00 00       	call   1056c1 <vmm_activate_pagedir>

    if(!dest->rpc) {
  1033fb:	8b 45 08             	mov    0x8(%ebp),%eax
  1033fe:	8b 40 18             	mov    0x18(%eax),%eax
  103401:	85 c0                	test   %eax,%eax
  103403:	75 08                	jne    10340d <schedule_to_task+0x2e>
        return dest->cpuState;
  103405:	8b 45 08             	mov    0x8(%ebp),%eax
  103408:	8b 40 04             	mov    0x4(%eax),%eax
  10340b:	eb 22                	jmp    10342f <schedule_to_task+0x50>
    }
    else
    {
        if(!dest->rpc->executing) {
  10340d:	8b 45 08             	mov    0x8(%ebp),%eax
  103410:	8b 40 18             	mov    0x18(%eax),%eax
  103413:	0f b6 40 14          	movzbl 0x14(%eax),%eax
  103417:	84 c0                	test   %al,%al
  103419:	75 0b                	jne    103426 <schedule_to_task+0x47>
            init_rpc_call(dest);
  10341b:	8b 45 08             	mov    0x8(%ebp),%eax
  10341e:	89 04 24             	mov    %eax,(%esp)
  103421:	e8 86 00 00 00       	call   1034ac <init_rpc_call>
        }
        return dest->rpc->state;
  103426:	8b 45 08             	mov    0x8(%ebp),%eax
  103429:	8b 40 18             	mov    0x18(%eax),%eax
  10342c:	8b 40 18             	mov    0x18(%eax),%eax
    }
}
  10342f:	c9                   	leave  
  103430:	c3                   	ret    

00103431 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  103431:	55                   	push   %ebp
  103432:	89 e5                	mov    %esp,%ebp
  103434:	83 ec 28             	sub    $0x28,%esp
    if (first_task != 0 && schedulingEnabled) {
  103437:	a1 4c 95 12 00       	mov    0x12954c,%eax
  10343c:	85 c0                	test   %eax,%eax
  10343e:	74 67                	je     1034a7 <schedule+0x76>
  103440:	a1 48 95 12 00       	mov    0x129548,%eax
  103445:	85 c0                	test   %eax,%eax
  103447:	74 5e                	je     1034a7 <schedule+0x76>
        if (current_task == 0) {
  103449:	a1 50 95 12 00       	mov    0x129550,%eax
  10344e:	85 c0                	test   %eax,%eax
  103450:	75 24                	jne    103476 <schedule+0x45>
            current_task = first_task;
  103452:	a1 4c 95 12 00       	mov    0x12954c,%eax
  103457:	a3 50 95 12 00       	mov    %eax,0x129550
            vmm_activate_pagedir(current_task->phys_pdir);
  10345c:	a1 50 95 12 00       	mov    0x129550,%eax
  103461:	8b 40 14             	mov    0x14(%eax),%eax
  103464:	89 04 24             	mov    %eax,(%esp)
  103467:	e8 55 22 00 00       	call   1056c1 <vmm_activate_pagedir>
            return current_task->cpuState;
  10346c:	a1 50 95 12 00       	mov    0x129550,%eax
  103471:	8b 40 04             	mov    0x4(%eax),%eax
  103474:	eb 34                	jmp    1034aa <schedule+0x79>
        }

        struct task* next = current_task->next;
  103476:	a1 50 95 12 00       	mov    0x129550,%eax
  10347b:	8b 40 08             	mov    0x8(%eax),%eax
  10347e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  103481:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103485:	75 08                	jne    10348f <schedule+0x5e>
            next = first_task;
  103487:	a1 4c 95 12 00       	mov    0x12954c,%eax
  10348c:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  10348f:	8b 45 08             	mov    0x8(%ebp),%eax
  103492:	89 04 24             	mov    %eax,(%esp)
  103495:	e8 cb fe ff ff       	call   103365 <save_cpu_state>

        return schedule_to_task(next);
  10349a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10349d:	89 04 24             	mov    %eax,(%esp)
  1034a0:	e8 3a ff ff ff       	call   1033df <schedule_to_task>
  1034a5:	eb 03                	jmp    1034aa <schedule+0x79>
    }
    return cpu;
  1034a7:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1034aa:	c9                   	leave  
  1034ab:	c3                   	ret    

001034ac <init_rpc_call>:
#include "console.h"
#include "pmm.h"
#include "vmm.h"
#include "catofdeath.h"

void init_rpc_call(struct task* task) {
  1034ac:	55                   	push   %ebp
  1034ad:	89 e5                	mov    %esp,%ebp
  1034af:	57                   	push   %edi
  1034b0:	53                   	push   %ebx
  1034b1:	83 ec 50             	sub    $0x50,%esp
    struct rpc* rpc = task->rpc;
  1034b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1034b7:	8b 40 18             	mov    0x18(%eax),%eax
  1034ba:	89 45 f4             	mov    %eax,-0xc(%ebp)

    rpc->state = calloc(1, sizeof(struct cpu_state));
  1034bd:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  1034c4:	00 
  1034c5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1034cc:	e8 af 06 00 00       	call   103b80 <calloc>
  1034d1:	89 c2                	mov    %eax,%edx
  1034d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034d6:	89 50 18             	mov    %edx,0x18(%eax)

    struct cpu_state nstate = {
  1034d9:	8d 5d b8             	lea    -0x48(%ebp),%ebx
  1034dc:	b8 00 00 00 00       	mov    $0x0,%eax
  1034e1:	ba 0e 00 00 00       	mov    $0xe,%edx
  1034e6:	89 df                	mov    %ebx,%edi
  1034e8:	89 d1                	mov    %edx,%ecx
  1034ea:	f3 ab                	rep stos %eax,%es:(%edi)
            .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
            .esi = 0, .edi = 0, .ebp = 0,

            .esp = task->cpuState->esp - 4 * sizeof(uint32_t),
            .eip = task->rpc_handler_addr,
  1034ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1034ef:	8b 40 1c             	mov    0x1c(%eax),%eax
void init_rpc_call(struct task* task) {
    struct rpc* rpc = task->rpc;

    rpc->state = calloc(1, sizeof(struct cpu_state));

    struct cpu_state nstate = {
  1034f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1034f5:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  1034fc:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
            .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
            .esi = 0, .edi = 0, .ebp = 0,

            .esp = task->cpuState->esp - 4 * sizeof(uint32_t),
  103503:	8b 45 08             	mov    0x8(%ebp),%eax
  103506:	8b 40 04             	mov    0x4(%eax),%eax
  103509:	8b 40 30             	mov    0x30(%eax),%eax
  10350c:	83 e8 10             	sub    $0x10,%eax
void init_rpc_call(struct task* task) {
    struct rpc* rpc = task->rpc;

    rpc->state = calloc(1, sizeof(struct cpu_state));

    struct cpu_state nstate = {
  10350f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103512:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(rpc->state, &nstate, sizeof(struct cpu_state));
  103519:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10351c:	8b 40 18             	mov    0x18(%eax),%eax
  10351f:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103526:	00 
  103527:	8d 55 b8             	lea    -0x48(%ebp),%edx
  10352a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10352e:	89 04 24             	mov    %eax,(%esp)
  103531:	e8 b3 07 00 00       	call   103ce9 <memcpy>

    uint32_t* rpch_args = (void*) rpc->state->esp;
  103536:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103539:	8b 40 18             	mov    0x18(%eax),%eax
  10353c:	8b 40 30             	mov    0x30(%eax),%eax
  10353f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rpch_args[1] = rpc->type;
  103542:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103545:	8d 50 04             	lea    0x4(%eax),%edx
  103548:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10354b:	8b 40 04             	mov    0x4(%eax),%eax
  10354e:	89 02                	mov    %eax,(%edx)
    rpch_args[2] = rpc->funcID;
  103550:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103553:	8d 50 08             	lea    0x8(%eax),%edx
  103556:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103559:	8b 40 08             	mov    0x8(%eax),%eax
  10355c:	89 02                	mov    %eax,(%edx)
    rpch_args[3] = rpc->dataSize;
  10355e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103561:	8d 50 0c             	lea    0xc(%eax),%edx
  103564:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103567:	8b 40 10             	mov    0x10(%eax),%eax
  10356a:	89 02                	mov    %eax,(%edx)

    rpc->executing = 1;
  10356c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10356f:	c6 40 14 01          	movb   $0x1,0x14(%eax)
}
  103573:	83 c4 50             	add    $0x50,%esp
  103576:	5b                   	pop    %ebx
  103577:	5f                   	pop    %edi
  103578:	5d                   	pop    %ebp
  103579:	c3                   	ret    

0010357a <create_rpc_call>:

uint32_t create_rpc_call(int dPID, uint32_t type, uint32_t funcID, uint32_t dsize, void* data) {
  10357a:	55                   	push   %ebp
  10357b:	89 e5                	mov    %esp,%ebp
  10357d:	83 ec 28             	sub    $0x28,%esp
    struct rpc* nrpc = calloc(1, sizeof(struct rpc));
  103580:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  103587:	00 
  103588:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10358f:	e8 ec 05 00 00       	call   103b80 <calloc>
  103594:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct task* destTask = get_task_by_pid(dPID);
  103597:	8b 45 08             	mov    0x8(%ebp),%eax
  10359a:	89 04 24             	mov    %eax,(%esp)
  10359d:	e8 87 f9 ff ff       	call   102f29 <get_task_by_pid>
  1035a2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(destTask == 0) {
  1035a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1035a9:	75 2e                	jne    1035d9 <create_rpc_call+0x5f>
        setclr(0x0A);
  1035ab:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1035b2:	e8 d1 cf ff ff       	call   100588 <setclr>
        kprintf("Tried to execute RPC in non-existing task.\n");
  1035b7:	c7 04 24 0c 78 10 00 	movl   $0x10780c,(%esp)
  1035be:	e8 dc cf ff ff       	call   10059f <kprintf>
        setclr(0x07);
  1035c3:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1035ca:	e8 b9 cf ff ff       	call   100588 <setclr>
        return RPCE_NODEST;
  1035cf:	b8 02 00 00 00       	mov    $0x2,%eax
  1035d4:	e9 fd 00 00 00       	jmp    1036d6 <create_rpc_call+0x15c>
    }

    if(destTask->rpc_handler_addr == 0) {
  1035d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1035dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1035df:	85 c0                	test   %eax,%eax
  1035e1:	75 2e                	jne    103611 <create_rpc_call+0x97>
        setclr(0x0A);
  1035e3:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1035ea:	e8 99 cf ff ff       	call   100588 <setclr>
        kprintf("Tried to execute RPC in non RPC enabled task.\n");
  1035ef:	c7 04 24 38 78 10 00 	movl   $0x107838,(%esp)
  1035f6:	e8 a4 cf ff ff       	call   10059f <kprintf>
        setclr(0x07);
  1035fb:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  103602:	e8 81 cf ff ff       	call   100588 <setclr>
        return RPCE_NOFUNC;
  103607:	b8 03 00 00 00       	mov    $0x3,%eax
  10360c:	e9 c5 00 00 00       	jmp    1036d6 <create_rpc_call+0x15c>
    }

    nrpc->type = type;
  103611:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103614:	8b 55 0c             	mov    0xc(%ebp),%edx
  103617:	89 50 04             	mov    %edx,0x4(%eax)
    nrpc->funcID = funcID;
  10361a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10361d:	8b 55 10             	mov    0x10(%ebp),%edx
  103620:	89 50 08             	mov    %edx,0x8(%eax)
    nrpc->returnPID = get_current_task() ? get_current_task()->PID : 0;
  103623:	e8 f7 f8 ff ff       	call   102f1f <get_current_task>
  103628:	85 c0                	test   %eax,%eax
  10362a:	74 09                	je     103635 <create_rpc_call+0xbb>
  10362c:	e8 ee f8 ff ff       	call   102f1f <get_current_task>
  103631:	8b 00                	mov    (%eax),%eax
  103633:	eb 05                	jmp    10363a <create_rpc_call+0xc0>
  103635:	b8 00 00 00 00       	mov    $0x0,%eax
  10363a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10363d:	89 02                	mov    %eax,(%edx)

    nrpc->data = malloc(dsize);
  10363f:	8b 45 14             	mov    0x14(%ebp),%eax
  103642:	89 04 24             	mov    %eax,(%esp)
  103645:	e8 a4 03 00 00       	call   1039ee <malloc>
  10364a:	89 c2                	mov    %eax,%edx
  10364c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10364f:	89 50 0c             	mov    %edx,0xc(%eax)
    memcpy(nrpc->data, data, dsize);
  103652:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103655:	8b 40 0c             	mov    0xc(%eax),%eax
  103658:	8b 55 14             	mov    0x14(%ebp),%edx
  10365b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10365f:	8b 55 18             	mov    0x18(%ebp),%edx
  103662:	89 54 24 04          	mov    %edx,0x4(%esp)
  103666:	89 04 24             	mov    %eax,(%esp)
  103669:	e8 7b 06 00 00       	call   103ce9 <memcpy>
    nrpc->dataSize = dsize;
  10366e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103671:	8b 55 14             	mov    0x14(%ebp),%edx
  103674:	89 50 10             	mov    %edx,0x10(%eax)

    if(destTask->rpc == 0) {
  103677:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10367a:	8b 40 18             	mov    0x18(%eax),%eax
  10367d:	85 c0                	test   %eax,%eax
  10367f:	75 10                	jne    103691 <create_rpc_call+0x117>
        destTask->rpc = nrpc;
  103681:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103684:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103687:	89 50 18             	mov    %edx,0x18(%eax)
        return RPCE_OK;
  10368a:	b8 00 00 00 00       	mov    $0x0,%eax
  10368f:	eb 45                	jmp    1036d6 <create_rpc_call+0x15c>
    }
    else
    {
        struct rpc* ptr = destTask->rpc;
  103691:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103694:	8b 40 18             	mov    0x18(%eax),%eax
  103697:	89 45 f4             	mov    %eax,-0xc(%ebp)

        while(ptr != 0) {
  10369a:	eb 2f                	jmp    1036cb <create_rpc_call+0x151>
            if(ptr->next == 0) {
  10369c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10369f:	8b 40 1c             	mov    0x1c(%eax),%eax
  1036a2:	85 c0                	test   %eax,%eax
  1036a4:	75 1c                	jne    1036c2 <create_rpc_call+0x148>
                kprintf("Chained RPC occured\n");
  1036a6:	c7 04 24 67 78 10 00 	movl   $0x107867,(%esp)
  1036ad:	e8 ed ce ff ff       	call   10059f <kprintf>

                ptr->next = nrpc;
  1036b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1036b8:	89 50 1c             	mov    %edx,0x1c(%eax)
                return RPCE_OK;
  1036bb:	b8 00 00 00 00       	mov    $0x0,%eax
  1036c0:	eb 14                	jmp    1036d6 <create_rpc_call+0x15c>
            }
            ptr = ptr->next;
  1036c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036c5:	8b 40 1c             	mov    0x1c(%eax),%eax
  1036c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    else
    {
        struct rpc* ptr = destTask->rpc;

        while(ptr != 0) {
  1036cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1036cf:	75 cb                	jne    10369c <create_rpc_call+0x122>
            }
            ptr = ptr->next;
        }
    }

    return RPCE_UNKNOWN;
  1036d1:	b8 01 00 00 00       	mov    $0x1,%eax
}
  1036d6:	c9                   	leave  
  1036d7:	c3                   	ret    

001036d8 <return_rpc_call>:

struct cpu_state* return_rpc_call(struct cpu_state* cpu) {
  1036d8:	55                   	push   %ebp
  1036d9:	89 e5                	mov    %esp,%ebp
  1036db:	83 ec 28             	sub    $0x28,%esp
    struct task* task = get_current_task();
  1036de:	e8 3c f8 ff ff       	call   102f1f <get_current_task>
  1036e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(!task->rpc) {
  1036e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036e9:	8b 40 18             	mov    0x18(%eax),%eax
  1036ec:	85 c0                	test   %eax,%eax
  1036ee:	75 5e                	jne    10374e <return_rpc_call+0x76>
        setclr(0x04);
  1036f0:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1036f7:	e8 8c ce ff ff       	call   100588 <setclr>
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s). RPC_RET_WITHOUT_CALL \n", task->PID, task->filePath);
  1036fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036ff:	8b 50 24             	mov    0x24(%eax),%edx
  103702:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103705:	8b 00                	mov    (%eax),%eax
  103707:	89 54 24 08          	mov    %edx,0x8(%esp)
  10370b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10370f:	c7 04 24 7c 78 10 00 	movl   $0x10787c,(%esp)
  103716:	e8 84 ce ff ff       	call   10059f <kprintf>
        kprintf("\n");
  10371b:	c7 04 24 ba 78 10 00 	movl   $0x1078ba,(%esp)
  103722:	e8 78 ce ff ff       	call   10059f <kprintf>
        show_dump(cpu);
  103727:	8b 45 08             	mov    0x8(%ebp),%eax
  10372a:	89 04 24             	mov    %eax,(%esp)
  10372d:	e8 de ca ff ff       	call   100210 <show_dump>
        setclr(0x07);
  103732:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  103739:	e8 4a ce ff ff       	call   100588 <setclr>

        return terminate_current(cpu);
  10373e:	8b 45 08             	mov    0x8(%ebp),%eax
  103741:	89 04 24             	mov    %eax,(%esp)
  103744:	e8 f8 f9 ff ff       	call   103141 <terminate_current>
  103749:	e9 99 00 00 00       	jmp    1037e7 <return_rpc_call+0x10f>
    }

    struct rpc* rpc = task->rpc;
  10374e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103751:	8b 40 18             	mov    0x18(%eax),%eax
  103754:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->rpc = task->rpc->next;
  103757:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10375a:	8b 40 18             	mov    0x18(%eax),%eax
  10375d:	8b 50 1c             	mov    0x1c(%eax),%edx
  103760:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103763:	89 50 18             	mov    %edx,0x18(%eax)

    if(rpc->returnPID) {
  103766:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103769:	8b 00                	mov    (%eax),%eax
  10376b:	85 c0                	test   %eax,%eax
  10376d:	74 6d                	je     1037dc <return_rpc_call+0x104>
        struct task* rTask = get_task_by_pid(rpc->returnPID);
  10376f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103772:	8b 00                	mov    (%eax),%eax
  103774:	89 04 24             	mov    %eax,(%esp)
  103777:	e8 ad f7 ff ff       	call   102f29 <get_task_by_pid>
  10377c:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if(rpc->type == RPCT_IRQ) {
  10377f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103782:	8b 40 04             	mov    0x4(%eax),%eax
  103785:	85 c0                	test   %eax,%eax
  103787:	75 0e                	jne    103797 <return_rpc_call+0xbf>
            enable_irq_rpc(rpc->funcID);
  103789:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10378c:	8b 40 08             	mov    0x8(%eax),%eax
  10378f:	89 04 24             	mov    %eax,(%esp)
  103792:	e8 83 de ff ff       	call   10161a <enable_irq_rpc>
        }

        free(rpc->state);
  103797:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10379a:	8b 40 18             	mov    0x18(%eax),%eax
  10379d:	89 04 24             	mov    %eax,(%esp)
  1037a0:	e8 a8 04 00 00       	call   103c4d <free>
        free(rpc);
  1037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037a8:	89 04 24             	mov    %eax,(%esp)
  1037ab:	e8 9d 04 00 00       	call   103c4d <free>

        if(rTask == 0) {
  1037b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1037b4:	75 0d                	jne    1037c3 <return_rpc_call+0xeb>
            return schedule_to_task(task);
  1037b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037b9:	89 04 24             	mov    %eax,(%esp)
  1037bc:	e8 1e fc ff ff       	call   1033df <schedule_to_task>
  1037c1:	eb 24                	jmp    1037e7 <return_rpc_call+0x10f>
        }

        rTask->cpuState->eax = RPCE_OK;
  1037c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037c6:	8b 40 04             	mov    0x4(%eax),%eax
  1037c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

        return schedule_to_task(rTask);
  1037cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037d2:	89 04 24             	mov    %eax,(%esp)
  1037d5:	e8 05 fc ff ff       	call   1033df <schedule_to_task>
  1037da:	eb 0b                	jmp    1037e7 <return_rpc_call+0x10f>
    }
    else
    {
        return schedule_to_task(task);
  1037dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037df:	89 04 24             	mov    %eax,(%esp)
  1037e2:	e8 f8 fb ff ff       	call   1033df <schedule_to_task>
    }
}
  1037e7:	c9                   	leave  
  1037e8:	c3                   	ret    

001037e9 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  1037e9:	55                   	push   %ebp
  1037ea:	89 e5                	mov    %esp,%ebp
  1037ec:	83 ec 10             	sub    $0x10,%esp
    struct memory_node* last = 0;
  1037ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    struct memory_node* cur = *root;
  1037f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1037f9:	8b 00                	mov    (%eax),%eax
  1037fb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (cur != 0) {
  1037fe:	eb 38                	jmp    103838 <remove_from_list+0x4f>
        if (cur == element) {
  103800:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103803:	3b 45 0c             	cmp    0xc(%ebp),%eax
  103806:	75 21                	jne    103829 <remove_from_list+0x40>
            if (last == 0) {
  103808:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10380c:	75 0d                	jne    10381b <remove_from_list+0x32>
                *root = cur->next;
  10380e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103811:	8b 50 08             	mov    0x8(%eax),%edx
  103814:	8b 45 08             	mov    0x8(%ebp),%eax
  103817:	89 10                	mov    %edx,(%eax)
                return;
  103819:	eb 23                	jmp    10383e <remove_from_list+0x55>
            } else {
                last->next = cur->next;
  10381b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10381e:	8b 50 08             	mov    0x8(%eax),%edx
  103821:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103824:	89 50 08             	mov    %edx,0x8(%eax)
                return;
  103827:	eb 15                	jmp    10383e <remove_from_list+0x55>
            }
        }
        last = cur;
  103829:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10382c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        cur = cur->next;
  10382f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103832:	8b 40 08             	mov    0x8(%eax),%eax
  103835:	89 45 f8             	mov    %eax,-0x8(%ebp)
static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
    struct memory_node* last = 0;
    struct memory_node* cur = *root;

    while (cur != 0) {
  103838:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10383c:	75 c2                	jne    103800 <remove_from_list+0x17>
            }
        }
        last = cur;
        cur = cur->next;
    }
}
  10383e:	c9                   	leave  
  10383f:	c3                   	ret    

00103840 <append_to_list>:

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  103840:	55                   	push   %ebp
  103841:	89 e5                	mov    %esp,%ebp
    element->next = *root;
  103843:	8b 45 08             	mov    0x8(%ebp),%eax
  103846:	8b 10                	mov    (%eax),%edx
  103848:	8b 45 0c             	mov    0xc(%ebp),%eax
  10384b:	89 50 08             	mov    %edx,0x8(%eax)
    *root = element;
  10384e:	8b 45 08             	mov    0x8(%ebp),%eax
  103851:	8b 55 0c             	mov    0xc(%ebp),%edx
  103854:	89 10                	mov    %edx,(%eax)
}
  103856:	5d                   	pop    %ebp
  103857:	c3                   	ret    

00103858 <pop_from_list>:

static struct memory_node* pop_from_list(struct memory_node** root) {
  103858:	55                   	push   %ebp
  103859:	89 e5                	mov    %esp,%ebp
  10385b:	83 ec 18             	sub    $0x18,%esp
    if (*root == 0)
  10385e:	8b 45 08             	mov    0x8(%ebp),%eax
  103861:	8b 00                	mov    (%eax),%eax
  103863:	85 c0                	test   %eax,%eax
  103865:	75 07                	jne    10386e <pop_from_list+0x16>
        return 0;
  103867:	b8 00 00 00 00       	mov    $0x0,%eax
  10386c:	eb 1d                	jmp    10388b <pop_from_list+0x33>
    struct memory_node* pop = *root;
  10386e:	8b 45 08             	mov    0x8(%ebp),%eax
  103871:	8b 00                	mov    (%eax),%eax
  103873:	89 45 fc             	mov    %eax,-0x4(%ebp)
    remove_from_list(root, pop);
  103876:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103879:	89 44 24 04          	mov    %eax,0x4(%esp)
  10387d:	8b 45 08             	mov    0x8(%ebp),%eax
  103880:	89 04 24             	mov    %eax,(%esp)
  103883:	e8 61 ff ff ff       	call   1037e9 <remove_from_list>
    return pop;
  103888:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10388b:	c9                   	leave  
  10388c:	c3                   	ret    

0010388d <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  10388d:	55                   	push   %ebp
  10388e:	89 e5                	mov    %esp,%ebp
  103890:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  103893:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10389a:	e8 18 1d 00 00       	call   1055b7 <vmm_alloc_cont>
  10389f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  1038a2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1038a9:	00 
  1038aa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1038b1:	00 
  1038b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038b5:	89 04 24             	mov    %eax,(%esp)
  1038b8:	e8 fe 03 00 00       	call   103cbb <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1038bd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  1038c4:	eb 27                	jmp    1038ed <allocate_unused_nodes+0x60>
        append_to_list(&first_unused, &(new_nodes[i]));
  1038c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1038c9:	89 d0                	mov    %edx,%eax
  1038cb:	01 c0                	add    %eax,%eax
  1038cd:	01 d0                	add    %edx,%eax
  1038cf:	c1 e0 02             	shl    $0x2,%eax
  1038d2:	89 c2                	mov    %eax,%edx
  1038d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038d7:	01 d0                	add    %edx,%eax
  1038d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1038dd:	c7 04 24 54 95 12 00 	movl   $0x129554,(%esp)
  1038e4:	e8 57 ff ff ff       	call   103840 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1038e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1038ed:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
  1038f4:	76 d0                	jbe    1038c6 <allocate_unused_nodes+0x39>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  1038f6:	c9                   	leave  
  1038f7:	c3                   	ret    

001038f8 <pop_unused_node>:

static struct memory_node* pop_unused_node() {
  1038f8:	55                   	push   %ebp
  1038f9:	89 e5                	mov    %esp,%ebp
  1038fb:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* ret = pop_from_list(&first_unused);
  1038fe:	c7 04 24 54 95 12 00 	movl   $0x129554,(%esp)
  103905:	e8 4e ff ff ff       	call   103858 <pop_from_list>
  10390a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (ret == 0) {
  10390d:	eb 14                	jmp    103923 <pop_unused_node+0x2b>
        allocate_unused_nodes();
  10390f:	e8 79 ff ff ff       	call   10388d <allocate_unused_nodes>
        ret = pop_from_list(&first_unused);
  103914:	c7 04 24 54 95 12 00 	movl   $0x129554,(%esp)
  10391b:	e8 38 ff ff ff       	call   103858 <pop_from_list>
  103920:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static struct memory_node* pop_unused_node() {
    struct memory_node* ret = pop_from_list(&first_unused);

    while (ret == 0) {
  103923:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103927:	74 e6                	je     10390f <pop_unused_node+0x17>
        allocate_unused_nodes();
        ret = pop_from_list(&first_unused);
    }

    return ret;
  103929:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10392c:	c9                   	leave  
  10392d:	c3                   	ret    

0010392e <merge_into_frees>:

static void merge_into_frees(struct memory_node* tf) {
  10392e:	55                   	push   %ebp
  10392f:	89 e5                	mov    %esp,%ebp
  103931:	83 ec 18             	sub    $0x18,%esp
    remove_from_list(&first_used, tf);
  103934:	8b 45 08             	mov    0x8(%ebp),%eax
  103937:	89 44 24 04          	mov    %eax,0x4(%esp)
  10393b:	c7 04 24 58 95 12 00 	movl   $0x129558,(%esp)
  103942:	e8 a2 fe ff ff       	call   1037e9 <remove_from_list>

    struct memory_node* cur;

    editedList:
    cur = first_free;
  103947:	a1 5c 95 12 00       	mov    0x12955c,%eax
  10394c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (cur != 0) {
  10394f:	eb 7e                	jmp    1039cf <merge_into_frees+0xa1>
        if (cur->address + cur->size == tf->address) {
  103951:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103954:	8b 50 04             	mov    0x4(%eax),%edx
  103957:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10395a:	8b 00                	mov    (%eax),%eax
  10395c:	01 c2                	add    %eax,%edx
  10395e:	8b 45 08             	mov    0x8(%ebp),%eax
  103961:	8b 40 04             	mov    0x4(%eax),%eax
  103964:	39 c2                	cmp    %eax,%edx
  103966:	75 21                	jne    103989 <merge_into_frees+0x5b>
            tf->address = cur->address;
  103968:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10396b:	8b 50 04             	mov    0x4(%eax),%edx
  10396e:	8b 45 08             	mov    0x8(%ebp),%eax
  103971:	89 50 04             	mov    %edx,0x4(%eax)
            remove_from_list(&first_free, cur);
  103974:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103977:	89 44 24 04          	mov    %eax,0x4(%esp)
  10397b:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  103982:	e8 62 fe ff ff       	call   1037e9 <remove_from_list>
            goto editedList;
  103987:	eb be                	jmp    103947 <merge_into_frees+0x19>
        }

        if (cur->address == tf->address + tf->size) {
  103989:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10398c:	8b 50 04             	mov    0x4(%eax),%edx
  10398f:	8b 45 08             	mov    0x8(%ebp),%eax
  103992:	8b 48 04             	mov    0x4(%eax),%ecx
  103995:	8b 45 08             	mov    0x8(%ebp),%eax
  103998:	8b 00                	mov    (%eax),%eax
  10399a:	01 c8                	add    %ecx,%eax
  10399c:	39 c2                	cmp    %eax,%edx
  10399e:	75 26                	jne    1039c6 <merge_into_frees+0x98>
            tf->size += cur->size;
  1039a0:	8b 45 08             	mov    0x8(%ebp),%eax
  1039a3:	8b 10                	mov    (%eax),%edx
  1039a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039a8:	8b 00                	mov    (%eax),%eax
  1039aa:	01 c2                	add    %eax,%edx
  1039ac:	8b 45 08             	mov    0x8(%ebp),%eax
  1039af:	89 10                	mov    %edx,(%eax)
            remove_from_list(&first_free, cur);
  1039b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039b4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1039b8:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  1039bf:	e8 25 fe ff ff       	call   1037e9 <remove_from_list>
            goto editedList;
  1039c4:	eb 81                	jmp    103947 <merge_into_frees+0x19>
        }

        cur = cur->next;
  1039c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039c9:	8b 40 08             	mov    0x8(%eax),%eax
  1039cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* cur;

    editedList:
    cur = first_free;

    while (cur != 0) {
  1039cf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1039d3:	0f 85 78 ff ff ff    	jne    103951 <merge_into_frees+0x23>
        }

        cur = cur->next;
    }

    append_to_list(&first_free, tf);
  1039d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1039dc:	89 44 24 04          	mov    %eax,0x4(%esp)
  1039e0:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  1039e7:	e8 54 fe ff ff       	call   103840 <append_to_list>
}
  1039ec:	c9                   	leave  
  1039ed:	c3                   	ret    

001039ee <malloc>:

uint32_t malloced = 0;

void* malloc(size_t size) {
  1039ee:	55                   	push   %ebp
  1039ef:	89 e5                	mov    %esp,%ebp
  1039f1:	83 ec 38             	sub    $0x38,%esp
    if(size == 0) return 0;
  1039f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1039f8:	75 0a                	jne    103a04 <malloc+0x16>
  1039fa:	b8 00 00 00 00       	mov    $0x0,%eax
  1039ff:	e9 7a 01 00 00       	jmp    103b7e <malloc+0x190>

    malloced += size;
  103a04:	8b 15 60 95 12 00    	mov    0x129560,%edx
  103a0a:	8b 45 08             	mov    0x8(%ebp),%eax
  103a0d:	01 d0                	add    %edx,%eax
  103a0f:	a3 60 95 12 00       	mov    %eax,0x129560
    kprintf("malloc %d (%d) bytes \n", size, malloced);
  103a14:	a1 60 95 12 00       	mov    0x129560,%eax
  103a19:	89 44 24 08          	mov    %eax,0x8(%esp)
  103a1d:	8b 45 08             	mov    0x8(%ebp),%eax
  103a20:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a24:	c7 04 24 bc 78 10 00 	movl   $0x1078bc,(%esp)
  103a2b:	e8 6f cb ff ff       	call   10059f <kprintf>

    struct memory_node* cur = first_free;
  103a30:	a1 5c 95 12 00       	mov    0x12955c,%eax
  103a35:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  103a38:	eb 15                	jmp    103a4f <malloc+0x61>
        if (cur->size >= size) {
  103a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a3d:	8b 00                	mov    (%eax),%eax
  103a3f:	3b 45 08             	cmp    0x8(%ebp),%eax
  103a42:	72 02                	jb     103a46 <malloc+0x58>
            break;
  103a44:	eb 0f                	jmp    103a55 <malloc+0x67>
        }
        cur = cur->next;
  103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a49:	8b 40 08             	mov    0x8(%eax),%eax
  103a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    malloced += size;
    kprintf("malloc %d (%d) bytes \n", size, malloced);

    struct memory_node* cur = first_free;

    while (cur != 0) {
  103a4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103a53:	75 e5                	jne    103a3a <malloc+0x4c>
            break;
        }
        cur = cur->next;
    }

    if (cur == 0) {
  103a55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103a59:	0f 85 a4 00 00 00    	jne    103b03 <malloc+0x115>
        uint32_t pgs = size / PAGESIZE;
  103a5f:	8b 45 08             	mov    0x8(%ebp),%eax
  103a62:	c1 e8 0c             	shr    $0xc,%eax
  103a65:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if ((size % PAGESIZE) != 0)
  103a68:	8b 45 08             	mov    0x8(%ebp),%eax
  103a6b:	25 ff 0f 00 00       	and    $0xfff,%eax
  103a70:	85 c0                	test   %eax,%eax
  103a72:	74 04                	je     103a78 <malloc+0x8a>
            pgs++;
  103a74:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  103a78:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a7b:	89 04 24             	mov    %eax,(%esp)
  103a7e:	e8 34 1b 00 00       	call   1055b7 <vmm_alloc_cont>
  103a83:	89 45 ec             	mov    %eax,-0x14(%ebp)

        struct memory_node* fill = pop_unused_node();
  103a86:	e8 6d fe ff ff       	call   1038f8 <pop_unused_node>
  103a8b:	89 45 e8             	mov    %eax,-0x18(%ebp)

        fill->address = (uint32_t) addr;
  103a8e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103a94:	89 50 04             	mov    %edx,0x4(%eax)
        fill->size = (uint32_t) size;
  103a97:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103a9a:	8b 55 08             	mov    0x8(%ebp),%edx
  103a9d:	89 10                	mov    %edx,(%eax)

        if (pgs * PAGESIZE > size) {
  103a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103aa2:	c1 e0 0c             	shl    $0xc,%eax
  103aa5:	3b 45 08             	cmp    0x8(%ebp),%eax
  103aa8:	76 3e                	jbe    103ae8 <malloc+0xfa>
            struct memory_node* free = pop_unused_node();
  103aaa:	e8 49 fe ff ff       	call   1038f8 <pop_unused_node>
  103aaf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            free->address = fill->address + fill->size;
  103ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103ab5:	8b 50 04             	mov    0x4(%eax),%edx
  103ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103abb:	8b 00                	mov    (%eax),%eax
  103abd:	01 c2                	add    %eax,%edx
  103abf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103ac2:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = pgs * PAGESIZE - size;
  103ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ac8:	c1 e0 0c             	shl    $0xc,%eax
  103acb:	2b 45 08             	sub    0x8(%ebp),%eax
  103ace:	89 c2                	mov    %eax,%edx
  103ad0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103ad3:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
  103ad5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103ad8:	89 44 24 04          	mov    %eax,0x4(%esp)
  103adc:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  103ae3:	e8 58 fd ff ff       	call   103840 <append_to_list>
        }

        append_to_list(&first_used, fill);
  103ae8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103aeb:	89 44 24 04          	mov    %eax,0x4(%esp)
  103aef:	c7 04 24 58 95 12 00 	movl   $0x129558,(%esp)
  103af6:	e8 45 fd ff ff       	call   103840 <append_to_list>

        return (void*) fill->address;
  103afb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103afe:	8b 40 04             	mov    0x4(%eax),%eax
  103b01:	eb 7b                	jmp    103b7e <malloc+0x190>
    } else {
        uint32_t freesize = cur->size - size;
  103b03:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b06:	8b 00                	mov    (%eax),%eax
  103b08:	2b 45 08             	sub    0x8(%ebp),%eax
  103b0b:	89 45 e0             	mov    %eax,-0x20(%ebp)

        cur->size = size;
  103b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b11:	8b 55 08             	mov    0x8(%ebp),%edx
  103b14:	89 10                	mov    %edx,(%eax)

        remove_from_list(&first_free, cur);
  103b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b19:	89 44 24 04          	mov    %eax,0x4(%esp)
  103b1d:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  103b24:	e8 c0 fc ff ff       	call   1037e9 <remove_from_list>
        append_to_list(&first_used, cur);
  103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b2c:	89 44 24 04          	mov    %eax,0x4(%esp)
  103b30:	c7 04 24 58 95 12 00 	movl   $0x129558,(%esp)
  103b37:	e8 04 fd ff ff       	call   103840 <append_to_list>

        if (freesize > 0) {
  103b3c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  103b40:	74 36                	je     103b78 <malloc+0x18a>
            struct memory_node* free = pop_unused_node();
  103b42:	e8 b1 fd ff ff       	call   1038f8 <pop_unused_node>
  103b47:	89 45 dc             	mov    %eax,-0x24(%ebp)

            free->address = cur->address + cur->size;
  103b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b4d:	8b 50 04             	mov    0x4(%eax),%edx
  103b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b53:	8b 00                	mov    (%eax),%eax
  103b55:	01 c2                	add    %eax,%edx
  103b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103b5a:	89 50 04             	mov    %edx,0x4(%eax)
            free->size = freesize;
  103b5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103b60:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103b63:	89 10                	mov    %edx,(%eax)

            append_to_list(&first_free, free);
  103b65:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103b68:	89 44 24 04          	mov    %eax,0x4(%esp)
  103b6c:	c7 04 24 5c 95 12 00 	movl   $0x12955c,(%esp)
  103b73:	e8 c8 fc ff ff       	call   103840 <append_to_list>
        }

        return (void*) cur->address;
  103b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b7b:	8b 40 04             	mov    0x4(%eax),%eax
    }
}
  103b7e:	c9                   	leave  
  103b7f:	c3                   	ret    

00103b80 <calloc>:

void* calloc(size_t num, size_t size) {
  103b80:	55                   	push   %ebp
  103b81:	89 e5                	mov    %esp,%ebp
  103b83:	83 ec 28             	sub    $0x28,%esp
    size_t gsize = num * size;
  103b86:	8b 45 08             	mov    0x8(%ebp),%eax
  103b89:	0f af 45 0c          	imul   0xc(%ebp),%eax
  103b8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  103b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b93:	89 04 24             	mov    %eax,(%esp)
  103b96:	e8 53 fe ff ff       	call   1039ee <malloc>
  103b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  103b9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103ba2:	74 1a                	je     103bbe <calloc+0x3e>
        memset(p, 0, gsize);
  103ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ba7:	89 44 24 08          	mov    %eax,0x8(%esp)
  103bab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103bb2:	00 
  103bb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103bb6:	89 04 24             	mov    %eax,(%esp)
  103bb9:	e8 fd 00 00 00       	call   103cbb <memset>
    }

    return p;
  103bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  103bc1:	c9                   	leave  
  103bc2:	c3                   	ret    

00103bc3 <realloc>:

void* realloc(void* ptr, size_t size) {
  103bc3:	55                   	push   %ebp
  103bc4:	89 e5                	mov    %esp,%ebp
  103bc6:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* cur = first_used;
  103bc9:	a1 58 95 12 00       	mov    0x129558,%eax
  103bce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  103bd1:	eb 6d                	jmp    103c40 <realloc+0x7d>
        if (cur->address == (uint32_t) ptr) {
  103bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103bd6:	8b 50 04             	mov    0x4(%eax),%edx
  103bd9:	8b 45 08             	mov    0x8(%ebp),%eax
  103bdc:	39 c2                	cmp    %eax,%edx
  103bde:	75 57                	jne    103c37 <realloc+0x74>
            if (size == 0) {
  103be0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103be4:	75 12                	jne    103bf8 <realloc+0x35>
                free(ptr);
  103be6:	8b 45 08             	mov    0x8(%ebp),%eax
  103be9:	89 04 24             	mov    %eax,(%esp)
  103bec:	e8 5c 00 00 00       	call   103c4d <free>
                return 0;
  103bf1:	b8 00 00 00 00       	mov    $0x0,%eax
  103bf6:	eb 53                	jmp    103c4b <realloc+0x88>
            } else {
                void* new = malloc(size);
  103bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
  103bfb:	89 04 24             	mov    %eax,(%esp)
  103bfe:	e8 eb fd ff ff       	call   1039ee <malloc>
  103c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  103c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c09:	8b 10                	mov    (%eax),%edx
  103c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c0e:	8b 40 04             	mov    0x4(%eax),%eax
  103c11:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c15:	89 44 24 04          	mov    %eax,0x4(%esp)
  103c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c1c:	89 04 24             	mov    %eax,(%esp)
  103c1f:	e8 c5 00 00 00       	call   103ce9 <memcpy>
                free((void*) cur->address);
  103c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c27:	8b 40 04             	mov    0x4(%eax),%eax
  103c2a:	89 04 24             	mov    %eax,(%esp)
  103c2d:	e8 1b 00 00 00       	call   103c4d <free>

                return new;
  103c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c35:	eb 14                	jmp    103c4b <realloc+0x88>
            }
        }
        cur = cur->next;
  103c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c3a:	8b 40 08             	mov    0x8(%eax),%eax
  103c3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

void* realloc(void* ptr, size_t size) {
    struct memory_node* cur = first_used;

    while (cur != 0) {
  103c40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103c44:	75 8d                	jne    103bd3 <realloc+0x10>
                return new;
            }
        }
        cur = cur->next;
    }
    return 0;
  103c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
  103c4b:	c9                   	leave  
  103c4c:	c3                   	ret    

00103c4d <free>:

void free(void* ptr) {
  103c4d:	55                   	push   %ebp
  103c4e:	89 e5                	mov    %esp,%ebp
  103c50:	83 ec 28             	sub    $0x28,%esp
    struct memory_node* cur = first_used;
  103c53:	a1 58 95 12 00       	mov    0x129558,%eax
  103c58:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  103c5b:	eb 56                	jmp    103cb3 <free+0x66>
        if (cur->address == (uint32_t) ptr) {
  103c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c60:	8b 50 04             	mov    0x4(%eax),%edx
  103c63:	8b 45 08             	mov    0x8(%ebp),%eax
  103c66:	39 c2                	cmp    %eax,%edx
  103c68:	75 40                	jne    103caa <free+0x5d>
            malloced -= cur->size;
  103c6a:	8b 15 60 95 12 00    	mov    0x129560,%edx
  103c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c73:	8b 00                	mov    (%eax),%eax
  103c75:	29 c2                	sub    %eax,%edx
  103c77:	89 d0                	mov    %edx,%eax
  103c79:	a3 60 95 12 00       	mov    %eax,0x129560
            kprintf("freed %d (%d) bytes \n", cur->size, malloced);
  103c7e:	8b 15 60 95 12 00    	mov    0x129560,%edx
  103c84:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c87:	8b 00                	mov    (%eax),%eax
  103c89:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c8d:	89 44 24 04          	mov    %eax,0x4(%esp)
  103c91:	c7 04 24 d3 78 10 00 	movl   $0x1078d3,(%esp)
  103c98:	e8 02 c9 ff ff       	call   10059f <kprintf>

            merge_into_frees(cur);
  103c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ca0:	89 04 24             	mov    %eax,(%esp)
  103ca3:	e8 86 fc ff ff       	call   10392e <merge_into_frees>
            break;
  103ca8:	eb 0f                	jmp    103cb9 <free+0x6c>
        }
        cur = cur->next;
  103caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cad:	8b 40 08             	mov    0x8(%eax),%eax
  103cb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

void free(void* ptr) {
    struct memory_node* cur = first_used;

    while (cur != 0) {
  103cb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103cb7:	75 a4                	jne    103c5d <free+0x10>
            merge_into_frees(cur);
            break;
        }
        cur = cur->next;
    }
}
  103cb9:	c9                   	leave  
  103cba:	c3                   	ret    

00103cbb <memset>:
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  103cbb:	55                   	push   %ebp
  103cbc:	89 e5                	mov    %esp,%ebp
  103cbe:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  103cc1:	8b 45 08             	mov    0x8(%ebp),%eax
  103cc4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  103cc7:	eb 0e                	jmp    103cd7 <memset+0x1c>
        *p++ = c;
  103cc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ccc:	8d 50 01             	lea    0x1(%eax),%edx
  103ccf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  103cd2:	8b 55 0c             	mov    0xc(%ebp),%edx
  103cd5:	88 10                	mov    %dl,(%eax)
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
    unsigned char* p = buf;

    while (n--) {
  103cd7:	8b 45 10             	mov    0x10(%ebp),%eax
  103cda:	8d 50 ff             	lea    -0x1(%eax),%edx
  103cdd:	89 55 10             	mov    %edx,0x10(%ebp)
  103ce0:	85 c0                	test   %eax,%eax
  103ce2:	75 e5                	jne    103cc9 <memset+0xe>
        *p++ = c;
    }

    return buf;
  103ce4:	8b 45 08             	mov    0x8(%ebp),%eax
}
  103ce7:	c9                   	leave  
  103ce8:	c3                   	ret    

00103ce9 <memcpy>:

void* memcpy(void* dest, const void* src, size_t n) {
  103ce9:	55                   	push   %ebp
  103cea:	89 e5                	mov    %esp,%ebp
  103cec:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  103cef:	8b 45 08             	mov    0x8(%ebp),%eax
  103cf2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
  103cf5:	8b 45 0c             	mov    0xc(%ebp),%eax
  103cf8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(n == 0) return 0;
  103cfb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  103cff:	75 07                	jne    103d08 <memcpy+0x1f>
  103d01:	b8 00 00 00 00       	mov    $0x0,%eax
  103d06:	eb 29                	jmp    103d31 <memcpy+0x48>

    while (n--) {
  103d08:	eb 17                	jmp    103d21 <memcpy+0x38>
        *(d++) = *(s++);
  103d0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d0d:	8d 50 01             	lea    0x1(%eax),%edx
  103d10:	89 55 fc             	mov    %edx,-0x4(%ebp)
  103d13:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103d16:	8d 4a 01             	lea    0x1(%edx),%ecx
  103d19:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103d1c:	0f b6 12             	movzbl (%edx),%edx
  103d1f:	88 10                	mov    %dl,(%eax)
    unsigned char* d = dest;
    const unsigned char* s = src;

    if(n == 0) return 0;

    while (n--) {
  103d21:	8b 45 10             	mov    0x10(%ebp),%eax
  103d24:	8d 50 ff             	lea    -0x1(%eax),%edx
  103d27:	89 55 10             	mov    %edx,0x10(%ebp)
  103d2a:	85 c0                	test   %eax,%eax
  103d2c:	75 dc                	jne    103d0a <memcpy+0x21>
        *(d++) = *(s++);
    }

    return dest;
  103d2e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  103d31:	c9                   	leave  
  103d32:	c3                   	ret    

00103d33 <memcmp>:

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  103d33:	55                   	push   %ebp
  103d34:	89 e5                	mov    %esp,%ebp
  103d36:	83 ec 10             	sub    $0x10,%esp
    if (ptr1 == 0)
  103d39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103d3d:	75 07                	jne    103d46 <memcmp+0x13>
        return -1;
  103d3f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  103d44:	eb 7c                	jmp    103dc2 <memcmp+0x8f>
    if (ptr2 == 0)
  103d46:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103d4a:	75 07                	jne    103d53 <memcmp+0x20>
        return 1;
  103d4c:	b8 01 00 00 00       	mov    $0x1,%eax
  103d51:	eb 6f                	jmp    103dc2 <memcmp+0x8f>
    if (num == 0)
  103d53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  103d57:	75 07                	jne    103d60 <memcmp+0x2d>
        return 0;
  103d59:	b8 00 00 00 00       	mov    $0x0,%eax
  103d5e:	eb 62                	jmp    103dc2 <memcmp+0x8f>

    const uint8_t* pa = ptr1;
  103d60:	8b 45 08             	mov    0x8(%ebp),%eax
  103d63:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t* pb = ptr2;
  103d66:	8b 45 0c             	mov    0xc(%ebp),%eax
  103d69:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  103d6c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103d73:	eb 40                	jmp    103db5 <memcmp+0x82>
        if (pa[i] != pb[i]) {
  103d75:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d78:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103d7b:	01 d0                	add    %edx,%eax
  103d7d:	0f b6 10             	movzbl (%eax),%edx
  103d80:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d83:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103d86:	01 c8                	add    %ecx,%eax
  103d88:	0f b6 00             	movzbl (%eax),%eax
  103d8b:	38 c2                	cmp    %al,%dl
  103d8d:	74 22                	je     103db1 <memcmp+0x7e>
            return pa[i] - pb[i];
  103d8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d92:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103d95:	01 d0                	add    %edx,%eax
  103d97:	0f b6 00             	movzbl (%eax),%eax
  103d9a:	0f b6 d0             	movzbl %al,%edx
  103d9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103da0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103da3:	01 c8                	add    %ecx,%eax
  103da5:	0f b6 00             	movzbl (%eax),%eax
  103da8:	0f b6 c0             	movzbl %al,%eax
  103dab:	29 c2                	sub    %eax,%edx
  103dad:	89 d0                	mov    %edx,%eax
  103daf:	eb 11                	jmp    103dc2 <memcmp+0x8f>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  103db1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  103db5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103db8:	3b 45 10             	cmp    0x10(%ebp),%eax
  103dbb:	72 b8                	jb     103d75 <memcmp+0x42>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  103dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  103dc2:	c9                   	leave  
  103dc3:	c3                   	ret    

00103dc4 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  103dc4:	55                   	push   %ebp
  103dc5:	89 e5                	mov    %esp,%ebp
  103dc7:	83 ec 28             	sub    $0x28,%esp
    int l1 = strlen(str1);
  103dca:	8b 45 08             	mov    0x8(%ebp),%eax
  103dcd:	89 04 24             	mov    %eax,(%esp)
  103dd0:	e8 3c 00 00 00       	call   103e11 <strlen>
  103dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l2 = strlen(str2);
  103dd8:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ddb:	89 04 24             	mov    %eax,(%esp)
  103dde:	e8 2e 00 00 00       	call   103e11 <strlen>
  103de3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  103de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103de9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  103dec:	0f 4e 45 f0          	cmovle -0x10(%ebp),%eax
  103df0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
  103df3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103df6:	83 c0 01             	add    $0x1,%eax
  103df9:	89 44 24 08          	mov    %eax,0x8(%esp)
  103dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e00:	89 44 24 04          	mov    %eax,0x4(%esp)
  103e04:	8b 45 08             	mov    0x8(%ebp),%eax
  103e07:	89 04 24             	mov    %eax,(%esp)
  103e0a:	e8 24 ff ff ff       	call   103d33 <memcmp>
}
  103e0f:	c9                   	leave  
  103e10:	c3                   	ret    

00103e11 <strlen>:

unsigned int strlen(const char* str) {
  103e11:	55                   	push   %ebp
  103e12:	89 e5                	mov    %esp,%ebp
  103e14:	83 ec 10             	sub    $0x10,%esp
    if (str == 0)
  103e17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103e1b:	75 07                	jne    103e24 <strlen+0x13>
        return 0;
  103e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  103e22:	eb 1f                	jmp    103e43 <strlen+0x32>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  103e24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103e2b:	eb 04                	jmp    103e31 <strlen+0x20>
  103e2d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  103e31:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103e34:	8b 45 08             	mov    0x8(%ebp),%eax
  103e37:	01 d0                	add    %edx,%eax
  103e39:	0f b6 00             	movzbl (%eax),%eax
  103e3c:	84 c0                	test   %al,%al
  103e3e:	75 ed                	jne    103e2d <strlen+0x1c>
        ;
    return i;
  103e40:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  103e43:	c9                   	leave  
  103e44:	c3                   	ret    

00103e45 <strcpy>:

char* strcpy(char* dest, const char* src) {
  103e45:	55                   	push   %ebp
  103e46:	89 e5                	mov    %esp,%ebp
  103e48:	83 ec 0c             	sub    $0xc,%esp
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  103e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e4e:	89 04 24             	mov    %eax,(%esp)
  103e51:	e8 bb ff ff ff       	call   103e11 <strlen>
  103e56:	83 c0 01             	add    $0x1,%eax
  103e59:	89 44 24 08          	mov    %eax,0x8(%esp)
  103e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e60:	89 44 24 04          	mov    %eax,0x4(%esp)
  103e64:	8b 45 08             	mov    0x8(%ebp),%eax
  103e67:	89 04 24             	mov    %eax,(%esp)
  103e6a:	e8 7a fe ff ff       	call   103ce9 <memcpy>
    return dest;
  103e6f:	8b 45 08             	mov    0x8(%ebp),%eax
}
  103e72:	c9                   	leave  
  103e73:	c3                   	ret    

00103e74 <strclone>:

char* strclone(char* str) {
  103e74:	55                   	push   %ebp
  103e75:	89 e5                	mov    %esp,%ebp
  103e77:	83 ec 28             	sub    $0x28,%esp
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  103e7a:	8b 45 08             	mov    0x8(%ebp),%eax
  103e7d:	89 04 24             	mov    %eax,(%esp)
  103e80:	e8 8c ff ff ff       	call   103e11 <strlen>
  103e85:	83 c0 01             	add    $0x1,%eax
  103e88:	89 04 24             	mov    %eax,(%esp)
  103e8b:	e8 5e fb ff ff       	call   1039ee <malloc>
  103e90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(ret, str);
  103e93:	8b 45 08             	mov    0x8(%ebp),%eax
  103e96:	89 44 24 04          	mov    %eax,0x4(%esp)
  103e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e9d:	89 04 24             	mov    %eax,(%esp)
  103ea0:	e8 a0 ff ff ff       	call   103e45 <strcpy>

    return ret;
  103ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  103ea8:	c9                   	leave  
  103ea9:	c3                   	ret    

00103eaa <strtok>:

char* sp = NULL; /* the start position of the string */
void* fr = NULL;

char* strtok(char* str, const char* delimiters) {
  103eaa:	55                   	push   %ebp
  103eab:	89 e5                	mov    %esp,%ebp
  103ead:	83 ec 18             	sub    $0x18,%esp
    if(str != 0) { //TODO better but if you call strtok and after that strtoknc will still be a memory leak. -> Don't use strtoknc
  103eb0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103eb4:	74 3c                	je     103ef2 <strtok+0x48>
        if(fr != 0) {
  103eb6:	a1 68 95 12 00       	mov    0x129568,%eax
  103ebb:	85 c0                	test   %eax,%eax
  103ebd:	74 0d                	je     103ecc <strtok+0x22>
            free(fr);
  103ebf:	a1 68 95 12 00       	mov    0x129568,%eax
  103ec4:	89 04 24             	mov    %eax,(%esp)
  103ec7:	e8 81 fd ff ff       	call   103c4d <free>
        }
        fr = strclone(str);
  103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
  103ecf:	89 04 24             	mov    %eax,(%esp)
  103ed2:	e8 9d ff ff ff       	call   103e74 <strclone>
  103ed7:	a3 68 95 12 00       	mov    %eax,0x129568
        return strtoknc(fr, delimiters);
  103edc:	a1 68 95 12 00       	mov    0x129568,%eax
  103ee1:	8b 55 0c             	mov    0xc(%ebp),%edx
  103ee4:	89 54 24 04          	mov    %edx,0x4(%esp)
  103ee8:	89 04 24             	mov    %eax,(%esp)
  103eeb:	e8 17 00 00 00       	call   103f07 <strtoknc>
  103ef0:	eb 13                	jmp    103f05 <strtok+0x5b>
    }
    return strtoknc(0, delimiters);
  103ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ef5:	89 44 24 04          	mov    %eax,0x4(%esp)
  103ef9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103f00:	e8 02 00 00 00       	call   103f07 <strtoknc>
}
  103f05:	c9                   	leave  
  103f06:	c3                   	ret    

00103f07 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  103f07:	55                   	push   %ebp
  103f08:	89 e5                	mov    %esp,%ebp
  103f0a:	83 ec 14             	sub    $0x14,%esp
    int i = 0;
  103f0d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int len = strlen(delimiters);
  103f14:	8b 45 0c             	mov    0xc(%ebp),%eax
  103f17:	89 04 24             	mov    %eax,(%esp)
  103f1a:	e8 f2 fe ff ff       	call   103e11 <strlen>
  103f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    /* check in the delimiters */
    if (len == 0)
  103f22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103f26:	75 0a                	jne    103f32 <strtoknc+0x2b>
        return 0;
  103f28:	b8 00 00 00 00       	mov    $0x0,%eax
  103f2d:	e9 ef 00 00 00       	jmp    104021 <strtoknc+0x11a>

    /* if the original string has nothing left */
    if (!str && !sp)
  103f32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103f36:	75 13                	jne    103f4b <strtoknc+0x44>
  103f38:	a1 64 95 12 00       	mov    0x129564,%eax
  103f3d:	85 c0                	test   %eax,%eax
  103f3f:	75 0a                	jne    103f4b <strtoknc+0x44>
        return 0;
  103f41:	b8 00 00 00 00       	mov    $0x0,%eax
  103f46:	e9 d6 00 00 00       	jmp    104021 <strtoknc+0x11a>

    /* initialize the sp during the first call */
    if (str) {
  103f4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103f4f:	74 08                	je     103f59 <strtoknc+0x52>
        sp = str;
  103f51:	8b 45 08             	mov    0x8(%ebp),%eax
  103f54:	a3 64 95 12 00       	mov    %eax,0x129564
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  103f59:	a1 64 95 12 00       	mov    0x129564,%eax
  103f5e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  103f61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103f68:	eb 1f                	jmp    103f89 <strtoknc+0x82>
            if (*p_start == delimiters[i]) {
  103f6a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f6d:	0f b6 10             	movzbl (%eax),%edx
  103f70:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103f73:	8b 45 0c             	mov    0xc(%ebp),%eax
  103f76:	01 c8                	add    %ecx,%eax
  103f78:	0f b6 00             	movzbl (%eax),%eax
  103f7b:	38 c2                	cmp    %al,%dl
  103f7d:	75 06                	jne    103f85 <strtoknc+0x7e>
                p_start++;
  103f7f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
                break;
  103f83:	eb 0c                	jmp    103f91 <strtoknc+0x8a>
    }

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  103f85:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  103f89:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  103f8f:	7c d9                	jl     103f6a <strtoknc+0x63>
                p_start++;
                break;
            }
        }

        if (i == len) {
  103f91:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f94:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  103f97:	75 17                	jne    103fb0 <strtoknc+0xa9>
            sp = p_start;
  103f99:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f9c:	a3 64 95 12 00       	mov    %eax,0x129564
            break;
  103fa1:	90                   	nop
        }
    }

    /* return NULL if nothing left */
    if (*sp == '\0') {
  103fa2:	a1 64 95 12 00       	mov    0x129564,%eax
  103fa7:	0f b6 00             	movzbl (%eax),%eax
  103faa:	84 c0                	test   %al,%al
  103fac:	75 15                	jne    103fc3 <strtoknc+0xbc>
  103fae:	eb 02                	jmp    103fb2 <strtoknc+0xab>

        if (i == len) {
            sp = p_start;
            break;
        }
    }
  103fb0:	eb af                	jmp    103f61 <strtoknc+0x5a>

    /* return NULL if nothing left */
    if (*sp == '\0') {
        sp = NULL;
  103fb2:	c7 05 64 95 12 00 00 	movl   $0x0,0x129564
  103fb9:	00 00 00 
        return sp;
  103fbc:	a1 64 95 12 00       	mov    0x129564,%eax
  103fc1:	eb 5e                	jmp    104021 <strtoknc+0x11a>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  103fc3:	eb 4d                	jmp    104012 <strtoknc+0x10b>
        for (i = 0; i < len; i++) {
  103fc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103fcc:	eb 25                	jmp    103ff3 <strtoknc+0xec>
            if (*sp == delimiters[i]) {
  103fce:	a1 64 95 12 00       	mov    0x129564,%eax
  103fd3:	0f b6 10             	movzbl (%eax),%edx
  103fd6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
  103fdc:	01 c8                	add    %ecx,%eax
  103fde:	0f b6 00             	movzbl (%eax),%eax
  103fe1:	38 c2                	cmp    %al,%dl
  103fe3:	75 0a                	jne    103fef <strtoknc+0xe8>
                *sp = '\0';
  103fe5:	a1 64 95 12 00       	mov    0x129564,%eax
  103fea:	c6 00 00             	movb   $0x0,(%eax)
                break;
  103fed:	eb 0c                	jmp    103ffb <strtoknc+0xf4>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  103fef:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  103ff3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ff6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  103ff9:	7c d3                	jl     103fce <strtoknc+0xc7>
                *sp = '\0';
                break;
            }
        }

        sp++;
  103ffb:	a1 64 95 12 00       	mov    0x129564,%eax
  104000:	83 c0 01             	add    $0x1,%eax
  104003:	a3 64 95 12 00       	mov    %eax,0x129564
        if (i < len)
  104008:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10400b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10400e:	7d 02                	jge    104012 <strtoknc+0x10b>
            break;
  104010:	eb 0c                	jmp    10401e <strtoknc+0x117>
        sp = NULL;
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  104012:	a1 64 95 12 00       	mov    0x129564,%eax
  104017:	0f b6 00             	movzbl (%eax),%eax
  10401a:	84 c0                	test   %al,%al
  10401c:	75 a7                	jne    103fc5 <strtoknc+0xbe>
        sp++;
        if (i < len)
            break;
    }

    return p_start;
  10401e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
  104021:	c9                   	leave  
  104022:	c3                   	ret    

00104023 <vfs_set_error>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static void vfs_set_error(uint32_t code) {
  104023:	55                   	push   %ebp
  104024:	89 e5                	mov    %esp,%ebp
  104026:	83 ec 08             	sub    $0x8,%esp
    if(get_current_task()) {
  104029:	e8 f1 ee ff ff       	call   102f1f <get_current_task>
  10402e:	85 c0                	test   %eax,%eax
  104030:	74 17                	je     104049 <vfs_set_error+0x26>
        if(get_current_task()->vfserr == PE_NO_ERROR) {
  104032:	e8 e8 ee ff ff       	call   102f1f <get_current_task>
  104037:	8b 40 2c             	mov    0x2c(%eax),%eax
  10403a:	85 c0                	test   %eax,%eax
  10403c:	75 0b                	jne    104049 <vfs_set_error+0x26>
            get_current_task()->vfserr = code;
  10403e:	e8 dc ee ff ff       	call   102f1f <get_current_task>
  104043:	8b 55 08             	mov    0x8(%ebp),%edx
  104046:	89 50 2c             	mov    %edx,0x2c(%eax)
        }
    }
}
  104049:	c9                   	leave  
  10404a:	c3                   	ret    

0010404b <vfs_reset_error>:

void vfs_reset_error() {
  10404b:	55                   	push   %ebp
  10404c:	89 e5                	mov    %esp,%ebp
  10404e:	83 ec 08             	sub    $0x8,%esp
    if(get_current_task()) {
  104051:	e8 c9 ee ff ff       	call   102f1f <get_current_task>
  104056:	85 c0                	test   %eax,%eax
  104058:	74 0c                	je     104066 <vfs_reset_error+0x1b>
        get_current_task()->vfserr = PE_NO_ERROR;
  10405a:	e8 c0 ee ff ff       	call   102f1f <get_current_task>
  10405f:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    }
}
  104066:	c9                   	leave  
  104067:	c3                   	ret    

00104068 <vfs_construct_absolute_path_for_node>:

char capfn_buf[513];

static char* vfs_construct_absolute_path_for_node(struct res_node* node) {
  104068:	55                   	push   %ebp
  104069:	89 e5                	mov    %esp,%ebp
  10406b:	83 ec 28             	sub    $0x28,%esp
    capfn_buf[512] = '\0';
  10406e:	c6 05 e0 9b 18 00 00 	movb   $0x0,0x189be0
    char* out =  &(capfn_buf[511]);
  104075:	c7 45 f4 df 9b 18 00 	movl   $0x189bdf,-0xc(%ebp)

    *out = '/';
  10407c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10407f:	c6 00 2f             	movb   $0x2f,(%eax)

    while(node != root) {
  104082:	eb 38                	jmp    1040bc <vfs_construct_absolute_path_for_node+0x54>
        out -= strlen(node->name);
  104084:	8b 45 08             	mov    0x8(%ebp),%eax
  104087:	89 04 24             	mov    %eax,(%esp)
  10408a:	e8 82 fd ff ff       	call   103e11 <strlen>
  10408f:	f7 d8                	neg    %eax
  104091:	01 45 f4             	add    %eax,-0xc(%ebp)
        strcpy(out, node->name);
  104094:	8b 45 08             	mov    0x8(%ebp),%eax
  104097:	89 44 24 04          	mov    %eax,0x4(%esp)
  10409b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10409e:	89 04 24             	mov    %eax,(%esp)
  1040a1:	e8 9f fd ff ff       	call   103e45 <strcpy>
        *--out = '/';
  1040a6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  1040aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040ad:	c6 00 2f             	movb   $0x2f,(%eax)

        node = node->parent;
  1040b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1040b3:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  1040b9:	89 45 08             	mov    %eax,0x8(%ebp)
    capfn_buf[512] = '\0';
    char* out =  &(capfn_buf[511]);

    *out = '/';

    while(node != root) {
  1040bc:	a1 6c 95 12 00       	mov    0x12956c,%eax
  1040c1:	39 45 08             	cmp    %eax,0x8(%ebp)
  1040c4:	75 be                	jne    104084 <vfs_construct_absolute_path_for_node+0x1c>
        *--out = '/';

        node = node->parent;
    }

    return strclone(out);
  1040c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040c9:	89 04 24             	mov    %eax,(%esp)
  1040cc:	e8 a3 fd ff ff       	call   103e74 <strclone>
}
  1040d1:	c9                   	leave  
  1040d2:	c3                   	ret    

001040d3 <vfs_find_node>:

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  1040d3:	55                   	push   %ebp
  1040d4:	89 e5                	mov    %esp,%ebp
  1040d6:	83 ec 28             	sub    $0x28,%esp
    if(name == 0) return parent;
  1040d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1040dd:	75 08                	jne    1040e7 <vfs_find_node+0x14>
  1040df:	8b 45 08             	mov    0x8(%ebp),%eax
  1040e2:	e9 ac 00 00 00       	jmp    104193 <vfs_find_node+0xc0>
    if(name[0] == '\0') return parent;
  1040e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1040ea:	0f b6 00             	movzbl (%eax),%eax
  1040ed:	84 c0                	test   %al,%al
  1040ef:	75 08                	jne    1040f9 <vfs_find_node+0x26>
  1040f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1040f4:	e9 9a 00 00 00       	jmp    104193 <vfs_find_node+0xc0>

    if(!strcmp(name, ".")) return parent;
  1040f9:	c7 44 24 04 ec 78 10 	movl   $0x1078ec,0x4(%esp)
  104100:	00 
  104101:	8b 45 0c             	mov    0xc(%ebp),%eax
  104104:	89 04 24             	mov    %eax,(%esp)
  104107:	e8 b8 fc ff ff       	call   103dc4 <strcmp>
  10410c:	85 c0                	test   %eax,%eax
  10410e:	75 05                	jne    104115 <vfs_find_node+0x42>
  104110:	8b 45 08             	mov    0x8(%ebp),%eax
  104113:	eb 7e                	jmp    104193 <vfs_find_node+0xc0>
    if(!strcmp(name, "..")) {
  104115:	c7 44 24 04 ee 78 10 	movl   $0x1078ee,0x4(%esp)
  10411c:	00 
  10411d:	8b 45 0c             	mov    0xc(%ebp),%eax
  104120:	89 04 24             	mov    %eax,(%esp)
  104123:	e8 9c fc ff ff       	call   103dc4 <strcmp>
  104128:	85 c0                	test   %eax,%eax
  10412a:	75 1a                	jne    104146 <vfs_find_node+0x73>
        if(parent == root) return parent;
  10412c:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104131:	39 45 08             	cmp    %eax,0x8(%ebp)
  104134:	75 05                	jne    10413b <vfs_find_node+0x68>
  104136:	8b 45 08             	mov    0x8(%ebp),%eax
  104139:	eb 58                	jmp    104193 <vfs_find_node+0xc0>
        return parent->parent;
  10413b:	8b 45 08             	mov    0x8(%ebp),%eax
  10413e:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  104144:	eb 4d                	jmp    104193 <vfs_find_node+0xc0>
    }

    if(parent->res_type == RES_SUBDIR) {
  104146:	8b 45 08             	mov    0x8(%ebp),%eax
  104149:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  10414f:	85 c0                	test   %eax,%eax
  104151:	75 3b                	jne    10418e <vfs_find_node+0xbb>
        struct res_node* ptr = parent->res_ptr;
  104153:	8b 45 08             	mov    0x8(%ebp),%eax
  104156:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10415c:	89 45 f4             	mov    %eax,-0xc(%ebp)

        while(ptr != 0) {
  10415f:	eb 27                	jmp    104188 <vfs_find_node+0xb5>
            if(strcmp(name, ptr->name) == 0) {
  104161:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104164:	89 44 24 04          	mov    %eax,0x4(%esp)
  104168:	8b 45 0c             	mov    0xc(%ebp),%eax
  10416b:	89 04 24             	mov    %eax,(%esp)
  10416e:	e8 51 fc ff ff       	call   103dc4 <strcmp>
  104173:	85 c0                	test   %eax,%eax
  104175:	75 05                	jne    10417c <vfs_find_node+0xa9>
                return ptr;
  104177:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10417a:	eb 17                	jmp    104193 <vfs_find_node+0xc0>
            }

            ptr = ptr->next;
  10417c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10417f:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  104185:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    if(parent->res_type == RES_SUBDIR) {
        struct res_node* ptr = parent->res_ptr;

        while(ptr != 0) {
  104188:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10418c:	75 d3                	jne    104161 <vfs_find_node+0x8e>

            ptr = ptr->next;
        }
    }

    return 0;
  10418e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  104193:	c9                   	leave  
  104194:	c3                   	ret    

00104195 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  104195:	55                   	push   %ebp
  104196:	89 e5                	mov    %esp,%ebp
    if(parent->res_ptr == 0) {
  104198:	8b 45 08             	mov    0x8(%ebp),%eax
  10419b:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1041a1:	85 c0                	test   %eax,%eax
  1041a3:	75 0d                	jne    1041b2 <vfs_insert_node+0x1d>
        parent->res_type = RES_SUBDIR;
  1041a5:	8b 45 08             	mov    0x8(%ebp),%eax
  1041a8:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  1041af:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  1041b2:	8b 45 08             	mov    0x8(%ebp),%eax
  1041b5:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  1041bb:	85 c0                	test   %eax,%eax
  1041bd:	75 31                	jne    1041f0 <vfs_insert_node+0x5b>
        child->next = parent->res_ptr;
  1041bf:	8b 45 08             	mov    0x8(%ebp),%eax
  1041c2:	8b 90 04 01 00 00    	mov    0x104(%eax),%edx
  1041c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1041cb:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
        child->parent = parent;
  1041d1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1041d4:	8b 55 08             	mov    0x8(%ebp),%edx
  1041d7:	89 90 0c 01 00 00    	mov    %edx,0x10c(%eax)
        parent->res_ptr = child;
  1041dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1041e0:	8b 55 0c             	mov    0xc(%ebp),%edx
  1041e3:	89 90 04 01 00 00    	mov    %edx,0x104(%eax)

        return 0;
  1041e9:	b8 00 00 00 00       	mov    $0x0,%eax
  1041ee:	eb 05                	jmp    1041f5 <vfs_insert_node+0x60>
    }

    return 1;
  1041f0:	b8 01 00 00 00       	mov    $0x1,%eax
}
  1041f5:	5d                   	pop    %ebp
  1041f6:	c3                   	ret    

001041f7 <vfs_get_relative_node>:


static struct res_node* vfs_get_relative_node(struct res_node* parent, char* path) {
  1041f7:	55                   	push   %ebp
  1041f8:	89 e5                	mov    %esp,%ebp
  1041fa:	83 ec 28             	sub    $0x28,%esp
    char* sub;
    struct res_node* child = 0;
  1041fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    if(path == 0) {
  104204:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  104208:	75 16                	jne    104220 <vfs_get_relative_node+0x29>
        vfs_set_error(PE_INVALID);
  10420a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  104211:	e8 0d fe ff ff       	call   104023 <vfs_set_error>
        return 0;
  104216:	b8 00 00 00 00       	mov    $0x0,%eax
  10421b:	e9 b7 00 00 00       	jmp    1042d7 <vfs_get_relative_node+0xe0>
    }

    if(path[0] == 0) {
  104220:	8b 45 0c             	mov    0xc(%ebp),%eax
  104223:	0f b6 00             	movzbl (%eax),%eax
  104226:	84 c0                	test   %al,%al
  104228:	75 16                	jne    104240 <vfs_get_relative_node+0x49>
        vfs_set_error(PE_INVALID);
  10422a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  104231:	e8 ed fd ff ff       	call   104023 <vfs_set_error>
        return 0;
  104236:	b8 00 00 00 00       	mov    $0x0,%eax
  10423b:	e9 97 00 00 00       	jmp    1042d7 <vfs_get_relative_node+0xe0>
    }

    sub = strtok(path, "/");
  104240:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  104247:	00 
  104248:	8b 45 0c             	mov    0xc(%ebp),%eax
  10424b:	89 04 24             	mov    %eax,(%esp)
  10424e:	e8 57 fc ff ff       	call   103eaa <strtok>
  104253:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(sub == NULL) {
  104256:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10425a:	75 05                	jne    104261 <vfs_get_relative_node+0x6a>
        return parent;
  10425c:	8b 45 08             	mov    0x8(%ebp),%eax
  10425f:	eb 76                	jmp    1042d7 <vfs_get_relative_node+0xe0>
    }

    if(sub[0] == 0) sub = strtok(0, "/");
  104261:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104264:	0f b6 00             	movzbl (%eax),%eax
  104267:	84 c0                	test   %al,%al
  104269:	75 17                	jne    104282 <vfs_get_relative_node+0x8b>
  10426b:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  104272:	00 
  104273:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10427a:	e8 2b fc ff ff       	call   103eaa <strtok>
  10427f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(sub == NULL) {
  104282:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104286:	75 05                	jne    10428d <vfs_get_relative_node+0x96>
        return parent;
  104288:	8b 45 08             	mov    0x8(%ebp),%eax
  10428b:	eb 4a                	jmp    1042d7 <vfs_get_relative_node+0xe0>
    }

    while (sub != NULL)
  10428d:	eb 3f                	jmp    1042ce <vfs_get_relative_node+0xd7>
    {
        if(parent == 0) return 0;
  10428f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104293:	75 07                	jne    10429c <vfs_get_relative_node+0xa5>
  104295:	b8 00 00 00 00       	mov    $0x0,%eax
  10429a:	eb 3b                	jmp    1042d7 <vfs_get_relative_node+0xe0>

        child = vfs_find_node(parent, sub);
  10429c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10429f:	89 44 24 04          	mov    %eax,0x4(%esp)
  1042a3:	8b 45 08             	mov    0x8(%ebp),%eax
  1042a6:	89 04 24             	mov    %eax,(%esp)
  1042a9:	e8 25 fe ff ff       	call   1040d3 <vfs_find_node>
  1042ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        parent = child;
  1042b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042b4:	89 45 08             	mov    %eax,0x8(%ebp)

        sub = strtok(0, "/");
  1042b7:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  1042be:	00 
  1042bf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1042c6:	e8 df fb ff ff       	call   103eaa <strtok>
  1042cb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(sub == NULL) {
        return parent;
    }

    while (sub != NULL)
  1042ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1042d2:	75 bb                	jne    10428f <vfs_get_relative_node+0x98>
        parent = child;

        sub = strtok(0, "/");
    }

    return child;
  1042d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  1042d7:	c9                   	leave  
  1042d8:	c3                   	ret    

001042d9 <vfs_get_current_task_root_node_for_path>:

static struct res_node* vfs_get_current_task_root_node_for_path(char* path) {
  1042d9:	55                   	push   %ebp
  1042da:	89 e5                	mov    %esp,%ebp
  1042dc:	83 ec 18             	sub    $0x18,%esp
    if(path == 0 || path[0] == '\0') {
  1042df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1042e3:	74 0a                	je     1042ef <vfs_get_current_task_root_node_for_path+0x16>
  1042e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1042e8:	0f b6 00             	movzbl (%eax),%eax
  1042eb:	84 c0                	test   %al,%al
  1042ed:	75 13                	jne    104302 <vfs_get_current_task_root_node_for_path+0x29>
        vfs_set_error(PE_INVALID);
  1042ef:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1042f6:	e8 28 fd ff ff       	call   104023 <vfs_set_error>
        return 0;
  1042fb:	b8 00 00 00 00       	mov    $0x0,%eax
  104300:	eb 4d                	jmp    10434f <vfs_get_current_task_root_node_for_path+0x76>
    }

    if(path[0] == '/') return root;
  104302:	8b 45 08             	mov    0x8(%ebp),%eax
  104305:	0f b6 00             	movzbl (%eax),%eax
  104308:	3c 2f                	cmp    $0x2f,%al
  10430a:	75 07                	jne    104313 <vfs_get_current_task_root_node_for_path+0x3a>
  10430c:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104311:	eb 3c                	jmp    10434f <vfs_get_current_task_root_node_for_path+0x76>
    if(get_current_task() == 0) return root;
  104313:	e8 07 ec ff ff       	call   102f1f <get_current_task>
  104318:	85 c0                	test   %eax,%eax
  10431a:	75 07                	jne    104323 <vfs_get_current_task_root_node_for_path+0x4a>
  10431c:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104321:	eb 2c                	jmp    10434f <vfs_get_current_task_root_node_for_path+0x76>
    if(get_current_task()->execPath == 0) return root;
  104323:	e8 f7 eb ff ff       	call   102f1f <get_current_task>
  104328:	8b 40 28             	mov    0x28(%eax),%eax
  10432b:	85 c0                	test   %eax,%eax
  10432d:	75 07                	jne    104336 <vfs_get_current_task_root_node_for_path+0x5d>
  10432f:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104334:	eb 19                	jmp    10434f <vfs_get_current_task_root_node_for_path+0x76>

    return vfs_get_relative_node(root, get_current_task()->execPath);
  104336:	e8 e4 eb ff ff       	call   102f1f <get_current_task>
  10433b:	8b 50 28             	mov    0x28(%eax),%edx
  10433e:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104343:	89 54 24 04          	mov    %edx,0x4(%esp)
  104347:	89 04 24             	mov    %eax,(%esp)
  10434a:	e8 a8 fe ff ff       	call   1041f7 <vfs_get_relative_node>

}
  10434f:	c9                   	leave  
  104350:	c3                   	ret    

00104351 <vfs_get_node>:

static struct res_node* vfs_get_node(char* path) {
  104351:	55                   	push   %ebp
  104352:	89 e5                	mov    %esp,%ebp
  104354:	83 ec 18             	sub    $0x18,%esp
    return vfs_get_relative_node(vfs_get_current_task_root_node_for_path(path), path);
  104357:	8b 45 08             	mov    0x8(%ebp),%eax
  10435a:	89 04 24             	mov    %eax,(%esp)
  10435d:	e8 77 ff ff ff       	call   1042d9 <vfs_get_current_task_root_node_for_path>
  104362:	8b 55 08             	mov    0x8(%ebp),%edx
  104365:	89 54 24 04          	mov    %edx,0x4(%esp)
  104369:	89 04 24             	mov    %eax,(%esp)
  10436c:	e8 86 fe ff ff       	call   1041f7 <vfs_get_relative_node>
}
  104371:	c9                   	leave  
  104372:	c3                   	ret    

00104373 <vfs_create_path>:

static int vfs_create_path(char* path) {
  104373:	55                   	push   %ebp
  104374:	89 e5                	mov    %esp,%ebp
  104376:	83 ec 28             	sub    $0x28,%esp
    char* sub;
    struct res_node* parent = vfs_get_current_task_root_node_for_path(path);
  104379:	8b 45 08             	mov    0x8(%ebp),%eax
  10437c:	89 04 24             	mov    %eax,(%esp)
  10437f:	e8 55 ff ff ff       	call   1042d9 <vfs_get_current_task_root_node_for_path>
  104384:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_node* child = 0;
  104387:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    int created = 0;
  10438e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

    sub = strtok(path, "/");
  104395:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  10439c:	00 
  10439d:	8b 45 08             	mov    0x8(%ebp),%eax
  1043a0:	89 04 24             	mov    %eax,(%esp)
  1043a3:	e8 02 fb ff ff       	call   103eaa <strtok>
  1043a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  1043ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043ae:	0f b6 00             	movzbl (%eax),%eax
  1043b1:	84 c0                	test   %al,%al
  1043b3:	75 1c                	jne    1043d1 <vfs_create_path+0x5e>
  1043b5:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  1043bc:	00 
  1043bd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1043c4:	e8 e1 fa ff ff       	call   103eaa <strtok>
  1043c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (sub != NULL)
  1043cc:	e9 ae 00 00 00       	jmp    10447f <vfs_create_path+0x10c>
  1043d1:	e9 a9 00 00 00       	jmp    10447f <vfs_create_path+0x10c>
    {
        child = vfs_find_node(parent, sub);
  1043d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1043dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043e0:	89 04 24             	mov    %eax,(%esp)
  1043e3:	e8 eb fc ff ff       	call   1040d3 <vfs_find_node>
  1043e8:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if(child == 0) {
  1043eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1043ef:	75 71                	jne    104462 <vfs_create_path+0xef>
            child = malloc(sizeof(struct res_node));
  1043f1:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  1043f8:	e8 f1 f5 ff ff       	call   1039ee <malloc>
  1043fd:	89 45 ec             	mov    %eax,-0x14(%ebp)

            strcpy(child->name, sub);
  104400:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104403:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104406:	89 54 24 04          	mov    %edx,0x4(%esp)
  10440a:	89 04 24             	mov    %eax,(%esp)
  10440d:	e8 33 fa ff ff       	call   103e45 <strcpy>
            child->res_type = RES_SUBDIR;
  104412:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104415:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  10441c:	00 00 00 
            child->res_ptr = 0;
  10441f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104422:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  104429:	00 00 00 

            created++;
  10442c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)

            if(vfs_insert_node(parent, child)) {
  104430:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104433:	89 44 24 04          	mov    %eax,0x4(%esp)
  104437:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10443a:	89 04 24             	mov    %eax,(%esp)
  10443d:	e8 53 fd ff ff       	call   104195 <vfs_insert_node>
  104442:	85 c0                	test   %eax,%eax
  104444:	74 1c                	je     104462 <vfs_create_path+0xef>
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  104446:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  10444d:	e8 9c f5 ff ff       	call   1039ee <malloc>
  104452:	c7 44 24 04 f4 78 10 	movl   $0x1078f4,0x4(%esp)
  104459:	00 
  10445a:	89 04 24             	mov    %eax,(%esp)
  10445d:	e8 58 bd ff ff       	call   1001ba <show_cod>
            }
        }

        parent = child;
  104462:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104465:	89 45 f0             	mov    %eax,-0x10(%ebp)

        sub = strtok(0, "/");
  104468:	c7 44 24 04 f1 78 10 	movl   $0x1078f1,0x4(%esp)
  10446f:	00 
  104470:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104477:	e8 2e fa ff ff       	call   103eaa <strtok>
  10447c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int created = 0;

    sub = strtok(path, "/");
    if(sub[0] == 0) sub = strtok(0, "/");

    while (sub != NULL)
  10447f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104483:	0f 85 4d ff ff ff    	jne    1043d6 <vfs_create_path+0x63>
        parent = child;

        sub = strtok(0, "/");
    }

    return created;
  104489:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  10448c:	c9                   	leave  
  10448d:	c3                   	ret    

0010448e <vfs_create_dir>:

uint32_t vfs_create_dir(char* path) {
  10448e:	55                   	push   %ebp
  10448f:	89 e5                	mov    %esp,%ebp
  104491:	83 ec 18             	sub    $0x18,%esp
    return vfs_create_path(path);
  104494:	8b 45 08             	mov    0x8(%ebp),%eax
  104497:	89 04 24             	mov    %eax,(%esp)
  10449a:	e8 d4 fe ff ff       	call   104373 <vfs_create_path>
}
  10449f:	c9                   	leave  
  1044a0:	c3                   	ret    

001044a1 <vfs_create_kfile>:

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  1044a1:	55                   	push   %ebp
  1044a2:	89 e5                	mov    %esp,%ebp
  1044a4:	53                   	push   %ebx
  1044a5:	83 ec 24             	sub    $0x24,%esp
    char* pathc = malloc(strlen(path) + 1);
  1044a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1044ab:	89 04 24             	mov    %eax,(%esp)
  1044ae:	e8 5e f9 ff ff       	call   103e11 <strlen>
  1044b3:	83 c0 01             	add    $0x1,%eax
  1044b6:	89 04 24             	mov    %eax,(%esp)
  1044b9:	e8 30 f5 ff ff       	call   1039ee <malloc>
  1044be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    strcpy(pathc, path);
  1044c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1044c4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1044c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044cb:	89 04 24             	mov    %eax,(%esp)
  1044ce:	e8 72 f9 ff ff       	call   103e45 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  1044d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044d6:	89 04 24             	mov    %eax,(%esp)
  1044d9:	e8 95 fe ff ff       	call   104373 <vfs_create_path>
  1044de:	89 45 f0             	mov    %eax,-0x10(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  1044e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1044e4:	89 04 24             	mov    %eax,(%esp)
  1044e7:	e8 65 fe ff ff       	call   104351 <vfs_get_node>
  1044ec:	a3 78 95 12 00       	mov    %eax,0x129578

    node->res_type = RES_KERNDRV;
  1044f1:	a1 78 95 12 00       	mov    0x129578,%eax
  1044f6:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  1044fd:	00 00 00 
    node->res_ptr = driver->create(params);
  104500:	8b 1d 78 95 12 00    	mov    0x129578,%ebx
  104506:	8b 45 0c             	mov    0xc(%ebp),%eax
  104509:	8b 40 14             	mov    0x14(%eax),%eax
  10450c:	8b 55 10             	mov    0x10(%ebp),%edx
  10450f:	89 14 24             	mov    %edx,(%esp)
  104512:	ff d0                	call   *%eax
  104514:	89 83 04 01 00 00    	mov    %eax,0x104(%ebx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  10451a:	a1 78 95 12 00       	mov    0x129578,%eax
  10451f:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104525:	8b 55 0c             	mov    0xc(%ebp),%edx
  104528:	89 50 04             	mov    %edx,0x4(%eax)

    return ret;
  10452b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  10452e:	83 c4 24             	add    $0x24,%esp
  104531:	5b                   	pop    %ebx
  104532:	5d                   	pop    %ebp
  104533:	c3                   	ret    

00104534 <vfs_open>:

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  104534:	55                   	push   %ebp
  104535:	89 e5                	mov    %esp,%ebp
  104537:	83 ec 28             	sub    $0x28,%esp
    static struct res_node* node;

    node = vfs_get_node(path);
  10453a:	8b 45 08             	mov    0x8(%ebp),%eax
  10453d:	89 04 24             	mov    %eax,(%esp)
  104540:	e8 0c fe ff ff       	call   104351 <vfs_get_node>
  104545:	a3 7c 95 12 00       	mov    %eax,0x12957c

    if(node->res_type == RES_KERNDRV) {
  10454a:	a1 7c 95 12 00       	mov    0x12957c,%eax
  10454f:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  104555:	83 f8 01             	cmp    $0x1,%eax
  104558:	75 2e                	jne    104588 <vfs_open+0x54>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  10455a:	a1 7c 95 12 00       	mov    0x12957c,%eax
  10455f:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104565:	89 45 f4             	mov    %eax,-0xc(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  104568:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10456b:	8b 40 04             	mov    0x4(%eax),%eax
  10456e:	8b 40 08             	mov    0x8(%eax),%eax
  104571:	8b 55 0c             	mov    0xc(%ebp),%edx
  104574:	89 54 24 04          	mov    %edx,0x4(%esp)
  104578:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10457b:	89 14 24             	mov    %edx,(%esp)
  10457e:	ff d0                	call   *%eax
  104580:	89 45 f0             	mov    %eax,-0x10(%ebp)

        return handle;
  104583:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104586:	eb 05                	jmp    10458d <vfs_open+0x59>
    }

    return 0;
  104588:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10458d:	c9                   	leave  
  10458e:	c3                   	ret    

0010458f <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  10458f:	55                   	push   %ebp
  104590:	89 e5                	mov    %esp,%ebp
  104592:	83 ec 28             	sub    $0x28,%esp
    if(handle->res_type == RES_KERNDRV) {
  104595:	8b 45 08             	mov    0x8(%ebp),%eax
  104598:	8b 00                	mov    (%eax),%eax
  10459a:	83 f8 01             	cmp    $0x1,%eax
  10459d:	75 1c                	jne    1045bb <vfs_close+0x2c>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  10459f:	8b 45 08             	mov    0x8(%ebp),%eax
  1045a2:	8b 40 04             	mov    0x4(%eax),%eax
  1045a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  1045a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1045ab:	8b 40 04             	mov    0x4(%eax),%eax
  1045ae:	8b 40 0c             	mov    0xc(%eax),%eax
  1045b1:	8b 55 08             	mov    0x8(%ebp),%edx
  1045b4:	89 14 24             	mov    %edx,(%esp)
  1045b7:	ff d0                	call   *%eax
  1045b9:	eb 05                	jmp    1045c0 <vfs_close+0x31>
    }

    return 0;
  1045bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1045c0:	c9                   	leave  
  1045c1:	c3                   	ret    

001045c2 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  1045c2:	55                   	push   %ebp
  1045c3:	89 e5                	mov    %esp,%ebp
  1045c5:	83 ec 28             	sub    $0x28,%esp
    if(handle == 0) return RW_ERR_VFS;
  1045c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1045cc:	75 0a                	jne    1045d8 <vfs_read+0x16>
  1045ce:	b8 02 00 00 00       	mov    $0x2,%eax
  1045d3:	e9 87 00 00 00       	jmp    10465f <vfs_read+0x9d>

    if(!(handle->filemode & FM_READ)) return RW_NOFM_READ;
  1045d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1045db:	8b 40 0c             	mov    0xc(%eax),%eax
  1045de:	83 e0 01             	and    $0x1,%eax
  1045e1:	85 c0                	test   %eax,%eax
  1045e3:	75 07                	jne    1045ec <vfs_read+0x2a>
  1045e5:	b8 04 00 00 00       	mov    $0x4,%eax
  1045ea:	eb 73                	jmp    10465f <vfs_read+0x9d>

    if(handle->res_type == RES_KERNDRV) {
  1045ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1045ef:	8b 00                	mov    (%eax),%eax
  1045f1:	83 f8 01             	cmp    $0x1,%eax
  1045f4:	75 64                	jne    10465a <vfs_read+0x98>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1045f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1045f9:	8b 40 04             	mov    0x4(%eax),%eax
  1045fc:	89 45 f4             	mov    %eax,-0xc(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  1045ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104602:	8b 40 04             	mov    0x4(%eax),%eax
  104605:	8b 00                	mov    (%eax),%eax
  104607:	8b 55 10             	mov    0x10(%ebp),%edx
  10460a:	0f af 55 14          	imul   0x14(%ebp),%edx
  10460e:	89 54 24 08          	mov    %edx,0x8(%esp)
  104612:	8b 55 0c             	mov    0xc(%ebp),%edx
  104615:	89 54 24 04          	mov    %edx,0x4(%esp)
  104619:	8b 55 08             	mov    0x8(%ebp),%edx
  10461c:	89 14 24             	mov    %edx,(%esp)
  10461f:	ff d0                	call   *%eax
  104621:	89 45 f0             	mov    %eax,-0x10(%ebp)

       if(res == RW_OK) {
  104624:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  104628:	75 1c                	jne    104646 <vfs_read+0x84>
           handle->position += size * count;
  10462a:	8b 45 08             	mov    0x8(%ebp),%eax
  10462d:	8b 50 08             	mov    0x8(%eax),%edx
  104630:	8b 45 10             	mov    0x10(%ebp),%eax
  104633:	0f af 45 14          	imul   0x14(%ebp),%eax
  104637:	01 c2                	add    %eax,%edx
  104639:	8b 45 08             	mov    0x8(%ebp),%eax
  10463c:	89 50 08             	mov    %edx,0x8(%eax)
           return RW_OK;
  10463f:	b8 00 00 00 00       	mov    $0x0,%eax
  104644:	eb 19                	jmp    10465f <vfs_read+0x9d>
       }

       if(res == RW_BLOCK) {
  104646:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  10464a:	75 07                	jne    104653 <vfs_read+0x91>
           return RW_BLOCK;
  10464c:	b8 01 00 00 00       	mov    $0x1,%eax
  104651:	eb 0c                	jmp    10465f <vfs_read+0x9d>
       }

       return RW_ERR_DRIVER;
  104653:	b8 03 00 00 00       	mov    $0x3,%eax
  104658:	eb 05                	jmp    10465f <vfs_read+0x9d>
    }

    return RW_ERR_VFS;
  10465a:	b8 02 00 00 00       	mov    $0x2,%eax
}
  10465f:	c9                   	leave  
  104660:	c3                   	ret    

00104661 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  104661:	55                   	push   %ebp
  104662:	89 e5                	mov    %esp,%ebp
  104664:	83 ec 28             	sub    $0x28,%esp
    if(handle == 0) return RW_ERR_VFS;
  104667:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10466b:	75 0a                	jne    104677 <vfs_write+0x16>
  10466d:	b8 02 00 00 00       	mov    $0x2,%eax
  104672:	e9 88 00 00 00       	jmp    1046ff <vfs_write+0x9e>

    if(!(handle->filemode & FM_WRITE)) return RW_NOFM_WRITE;
  104677:	8b 45 08             	mov    0x8(%ebp),%eax
  10467a:	8b 40 0c             	mov    0xc(%eax),%eax
  10467d:	83 e0 02             	and    $0x2,%eax
  104680:	85 c0                	test   %eax,%eax
  104682:	75 07                	jne    10468b <vfs_write+0x2a>
  104684:	b8 05 00 00 00       	mov    $0x5,%eax
  104689:	eb 74                	jmp    1046ff <vfs_write+0x9e>

    if(handle->res_type == RES_KERNDRV) {
  10468b:	8b 45 08             	mov    0x8(%ebp),%eax
  10468e:	8b 00                	mov    (%eax),%eax
  104690:	83 f8 01             	cmp    $0x1,%eax
  104693:	75 65                	jne    1046fa <vfs_write+0x99>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104695:	8b 45 08             	mov    0x8(%ebp),%eax
  104698:	8b 40 04             	mov    0x4(%eax),%eax
  10469b:	89 45 f4             	mov    %eax,-0xc(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  10469e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1046a1:	8b 40 04             	mov    0x4(%eax),%eax
  1046a4:	8b 40 04             	mov    0x4(%eax),%eax
  1046a7:	8b 55 10             	mov    0x10(%ebp),%edx
  1046aa:	0f af 55 14          	imul   0x14(%ebp),%edx
  1046ae:	89 54 24 08          	mov    %edx,0x8(%esp)
  1046b2:	8b 55 0c             	mov    0xc(%ebp),%edx
  1046b5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1046b9:	8b 55 08             	mov    0x8(%ebp),%edx
  1046bc:	89 14 24             	mov    %edx,(%esp)
  1046bf:	ff d0                	call   *%eax
  1046c1:	89 45 f0             	mov    %eax,-0x10(%ebp)

       if(res == RW_OK) {
  1046c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1046c8:	75 1c                	jne    1046e6 <vfs_write+0x85>
           handle->position += size * count;
  1046ca:	8b 45 08             	mov    0x8(%ebp),%eax
  1046cd:	8b 50 08             	mov    0x8(%eax),%edx
  1046d0:	8b 45 10             	mov    0x10(%ebp),%eax
  1046d3:	0f af 45 14          	imul   0x14(%ebp),%eax
  1046d7:	01 c2                	add    %eax,%edx
  1046d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1046dc:	89 50 08             	mov    %edx,0x8(%eax)
           return RW_OK;
  1046df:	b8 00 00 00 00       	mov    $0x0,%eax
  1046e4:	eb 19                	jmp    1046ff <vfs_write+0x9e>
       }

       if(res == RW_BLOCK) {
  1046e6:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  1046ea:	75 07                	jne    1046f3 <vfs_write+0x92>
           return RW_BLOCK;
  1046ec:	b8 01 00 00 00       	mov    $0x1,%eax
  1046f1:	eb 0c                	jmp    1046ff <vfs_write+0x9e>
       }

       return RW_ERR_DRIVER;
  1046f3:	b8 03 00 00 00       	mov    $0x3,%eax
  1046f8:	eb 05                	jmp    1046ff <vfs_write+0x9e>
    }

    return RW_ERR_VFS;
  1046fa:	b8 02 00 00 00       	mov    $0x2,%eax
}
  1046ff:	c9                   	leave  
  104700:	c3                   	ret    

00104701 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  104701:	55                   	push   %ebp
  104702:	89 e5                	mov    %esp,%ebp
  104704:	83 ec 28             	sub    $0x28,%esp
    if(handle == 0) return 0;
  104707:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10470b:	75 07                	jne    104714 <vfs_available+0x13>
  10470d:	b8 00 00 00 00       	mov    $0x0,%eax
  104712:	eb 2b                	jmp    10473f <vfs_available+0x3e>

    if(handle->res_type == RES_KERNDRV) {
  104714:	8b 45 08             	mov    0x8(%ebp),%eax
  104717:	8b 00                	mov    (%eax),%eax
  104719:	83 f8 01             	cmp    $0x1,%eax
  10471c:	75 1c                	jne    10473a <vfs_available+0x39>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  10471e:	8b 45 08             	mov    0x8(%ebp),%eax
  104721:	8b 40 04             	mov    0x4(%eax),%eax
  104724:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  104727:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10472a:	8b 40 04             	mov    0x4(%eax),%eax
  10472d:	8b 40 10             	mov    0x10(%eax),%eax
  104730:	8b 55 08             	mov    0x8(%ebp),%edx
  104733:	89 14 24             	mov    %edx,(%esp)
  104736:	ff d0                	call   *%eax
  104738:	eb 05                	jmp    10473f <vfs_available+0x3e>
    }

    return 0;
  10473a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10473f:	c9                   	leave  
  104740:	c3                   	ret    

00104741 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  104741:	55                   	push   %ebp
  104742:	89 e5                	mov    %esp,%ebp
  104744:	83 ec 18             	sub    $0x18,%esp
    if(vfs_get_node(path) != 0) return 1;
  104747:	8b 45 08             	mov    0x8(%ebp),%eax
  10474a:	89 04 24             	mov    %eax,(%esp)
  10474d:	e8 ff fb ff ff       	call   104351 <vfs_get_node>
  104752:	85 c0                	test   %eax,%eax
  104754:	74 07                	je     10475d <vfs_exists+0x1c>
  104756:	b8 01 00 00 00       	mov    $0x1,%eax
  10475b:	eb 05                	jmp    104762 <vfs_exists+0x21>
    return 0;
  10475d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  104762:	c9                   	leave  
  104763:	c3                   	ret    

00104764 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  104764:	55                   	push   %ebp
  104765:	89 e5                	mov    %esp,%ebp
    if(origin == SEEK_SET) {
  104767:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10476b:	75 09                	jne    104776 <vfs_seek+0x12>
        handle->position = offset;
  10476d:	8b 45 08             	mov    0x8(%ebp),%eax
  104770:	8b 55 0c             	mov    0xc(%ebp),%edx
  104773:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if(origin == SEEK_CUR) {
  104776:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
  10477a:	75 11                	jne    10478d <vfs_seek+0x29>
        handle->position += offset;
  10477c:	8b 45 08             	mov    0x8(%ebp),%eax
  10477f:	8b 50 08             	mov    0x8(%eax),%edx
  104782:	8b 45 0c             	mov    0xc(%ebp),%eax
  104785:	01 c2                	add    %eax,%edx
  104787:	8b 45 08             	mov    0x8(%ebp),%eax
  10478a:	89 50 08             	mov    %edx,0x8(%eax)
    }
}
  10478d:	5d                   	pop    %ebp
  10478e:	c3                   	ret    

0010478f <vfs_exec>:

uint32_t vfs_exec(char* path, char* args[], char* execPath, char* stdin, char* stdout, char* stderr) {
  10478f:	55                   	push   %ebp
  104790:	89 e5                	mov    %esp,%ebp
  104792:	53                   	push   %ebx
  104793:	83 ec 74             	sub    $0x74,%esp
    path = strclone(path);
  104796:	8b 45 08             	mov    0x8(%ebp),%eax
  104799:	89 04 24             	mov    %eax,(%esp)
  10479c:	e8 d3 f6 ff ff       	call   103e74 <strclone>
  1047a1:	89 45 08             	mov    %eax,0x8(%ebp)
    if(!vfs_exists(path)) {
  1047a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1047a7:	89 04 24             	mov    %eax,(%esp)
  1047aa:	e8 92 ff ff ff       	call   104741 <vfs_exists>
  1047af:	85 c0                	test   %eax,%eax
  1047b1:	75 21                	jne    1047d4 <vfs_exec+0x45>
        free(path);
  1047b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1047b6:	89 04 24             	mov    %eax,(%esp)
  1047b9:	e8 8f f4 ff ff       	call   103c4d <free>
        vfs_set_error(PE_FILE_NOT_FOUND);
  1047be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1047c5:	e8 59 f8 ff ff       	call   104023 <vfs_set_error>
        return 0;
  1047ca:	b8 00 00 00 00       	mov    $0x0,%eax
  1047cf:	e9 a2 04 00 00       	jmp    104c76 <vfs_exec+0x4e7>
    }

    uint32_t elf_mod_pdir;

    elf_mod_pdir = vmm_create_pagedir();
  1047d4:	e8 8c 08 00 00       	call   105065 <vmm_create_pagedir>
  1047d9:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //Copy args into kernel memory
    uint32_t argc = 0;
  1047dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if(args != 0) {
  1047e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1047e7:	74 1b                	je     104804 <vfs_exec+0x75>
        while(args[argc] != 0) {
  1047e9:	eb 04                	jmp    1047ef <vfs_exec+0x60>
            argc++;
  1047eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

    //Copy args into kernel memory
    uint32_t argc = 0;

    if(args != 0) {
        while(args[argc] != 0) {
  1047ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1047f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1047f9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1047fc:	01 d0                	add    %edx,%eax
  1047fe:	8b 00                	mov    (%eax),%eax
  104800:	85 c0                	test   %eax,%eax
  104802:	75 e7                	jne    1047eb <vfs_exec+0x5c>
            argc++;
        }
    }

    char** kargs = malloc((sizeof(char*)) * (argc + 1));
  104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104807:	83 c0 01             	add    $0x1,%eax
  10480a:	c1 e0 02             	shl    $0x2,%eax
  10480d:	89 04 24             	mov    %eax,(%esp)
  104810:	e8 d9 f1 ff ff       	call   1039ee <malloc>
  104815:	89 45 d8             	mov    %eax,-0x28(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  104818:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10481f:	eb 68                	jmp    104889 <vfs_exec+0xfa>
        kargs[i] = malloc(strlen(args[i]) + 1);
  104821:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104824:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10482b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10482e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  104831:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104834:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10483b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10483e:	01 d0                	add    %edx,%eax
  104840:	8b 00                	mov    (%eax),%eax
  104842:	89 04 24             	mov    %eax,(%esp)
  104845:	e8 c7 f5 ff ff       	call   103e11 <strlen>
  10484a:	83 c0 01             	add    $0x1,%eax
  10484d:	89 04 24             	mov    %eax,(%esp)
  104850:	e8 99 f1 ff ff       	call   1039ee <malloc>
  104855:	89 03                	mov    %eax,(%ebx)
        strcpy(kargs[i], args[i]);
  104857:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10485a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104861:	8b 45 0c             	mov    0xc(%ebp),%eax
  104864:	01 d0                	add    %edx,%eax
  104866:	8b 10                	mov    (%eax),%edx
  104868:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10486b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  104872:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104875:	01 c8                	add    %ecx,%eax
  104877:	8b 00                	mov    (%eax),%eax
  104879:	89 54 24 04          	mov    %edx,0x4(%esp)
  10487d:	89 04 24             	mov    %eax,(%esp)
  104880:	e8 c0 f5 ff ff       	call   103e45 <strcpy>
        }
    }

    char** kargs = malloc((sizeof(char*)) * (argc + 1));

    for(uint32_t i = 0; i < argc; i++) {
  104885:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  104889:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10488c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10488f:	72 90                	jb     104821 <vfs_exec+0x92>
        kargs[i] = malloc(strlen(args[i]) + 1);
        strcpy(kargs[i], args[i]);
    }

    kargs[argc] = 0;
  104891:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104894:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10489b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10489e:	01 d0                	add    %edx,%eax
  1048a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //Execute file
    struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  1048a6:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  1048ad:	00 
  1048ae:	8b 45 08             	mov    0x8(%ebp),%eax
  1048b1:	89 04 24             	mov    %eax,(%esp)
  1048b4:	e8 7b fc ff ff       	call   104534 <vfs_open>
  1048b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    if(!handle) {
  1048bc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  1048c0:	75 21                	jne    1048e3 <vfs_exec+0x154>
        vfs_set_error(PE_PERM_DENIED);
  1048c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1048c9:	e8 55 f7 ff ff       	call   104023 <vfs_set_error>
        free(path);
  1048ce:	8b 45 08             	mov    0x8(%ebp),%eax
  1048d1:	89 04 24             	mov    %eax,(%esp)
  1048d4:	e8 74 f3 ff ff       	call   103c4d <free>
        return 0;
  1048d9:	b8 00 00 00 00       	mov    $0x0,%eax
  1048de:	e9 93 03 00 00       	jmp    104c76 <vfs_exec+0x4e7>
    }

    uint32_t size = vfs_available(handle);
  1048e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1048e6:	89 04 24             	mov    %eax,(%esp)
  1048e9:	e8 13 fe ff ff       	call   104701 <vfs_available>
  1048ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
    if(size == 0) {
  1048f1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  1048f5:	75 21                	jne    104918 <vfs_exec+0x189>
        vfs_set_error(PE_CORRUPT_FILE);
  1048f7:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1048fe:	e8 20 f7 ff ff       	call   104023 <vfs_set_error>
        free(path);
  104903:	8b 45 08             	mov    0x8(%ebp),%eax
  104906:	89 04 24             	mov    %eax,(%esp)
  104909:	e8 3f f3 ff ff       	call   103c4d <free>
        return 0;
  10490e:	b8 00 00 00 00       	mov    $0x0,%eax
  104913:	e9 5e 03 00 00       	jmp    104c76 <vfs_exec+0x4e7>
    }

    void* modsrc = malloc(size);
  104918:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10491b:	89 04 24             	mov    %eax,(%esp)
  10491e:	e8 cb f0 ff ff       	call   1039ee <malloc>
  104923:	89 45 cc             	mov    %eax,-0x34(%ebp)

    uint32_t res = vfs_read(handle, modsrc, size, 1);
  104926:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10492d:	00 
  10492e:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104931:	89 44 24 08          	mov    %eax,0x8(%esp)
  104935:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104938:	89 44 24 04          	mov    %eax,0x4(%esp)
  10493c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10493f:	89 04 24             	mov    %eax,(%esp)
  104942:	e8 7b fc ff ff       	call   1045c2 <vfs_read>
  104947:	89 45 c8             	mov    %eax,-0x38(%ebp)

    if(res != RW_OK) {
  10494a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10494e:	74 2c                	je     10497c <vfs_exec+0x1ed>
        free(path);
  104950:	8b 45 08             	mov    0x8(%ebp),%eax
  104953:	89 04 24             	mov    %eax,(%esp)
  104956:	e8 f2 f2 ff ff       	call   103c4d <free>
        free(modsrc);
  10495b:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10495e:	89 04 24             	mov    %eax,(%esp)
  104961:	e8 e7 f2 ff ff       	call   103c4d <free>
        vfs_set_error(PE_FILESYSTEM);
  104966:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10496d:	e8 b1 f6 ff ff       	call   104023 <vfs_set_error>
        return 0;
  104972:	b8 00 00 00 00       	mov    $0x0,%eax
  104977:	e9 fa 02 00 00       	jmp    104c76 <vfs_exec+0x4e7>
    }

    uint32_t old_pdir = vmm_get_current_pagedir();
  10497c:	e8 da 06 00 00       	call   10505b <vmm_get_current_pagedir>
  104981:	89 45 c4             	mov    %eax,-0x3c(%ebp)

    //**********************************************************************************************************
    vmm_activate_pagedir(elf_mod_pdir);
  104984:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104987:	89 04 24             	mov    %eax,(%esp)
  10498a:	e8 32 0d 00 00       	call   1056c1 <vmm_activate_pagedir>

    struct elf_header* header = modsrc;
  10498f:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104992:	89 45 c0             	mov    %eax,-0x40(%ebp)
    struct elf_program_header* ph;

    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  104995:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104998:	8b 00                	mov    (%eax),%eax
  10499a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  10499f:	74 2c                	je     1049cd <vfs_exec+0x23e>
        free(modsrc);
  1049a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1049a4:	89 04 24             	mov    %eax,(%esp)
  1049a7:	e8 a1 f2 ff ff       	call   103c4d <free>
        free(path);
  1049ac:	8b 45 08             	mov    0x8(%ebp),%eax
  1049af:	89 04 24             	mov    %eax,(%esp)
  1049b2:	e8 96 f2 ff ff       	call   103c4d <free>
        vfs_set_error(PE_CORRUPT_FILE);
  1049b7:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1049be:	e8 60 f6 ff ff       	call   104023 <vfs_set_error>
        return 0;
  1049c3:	b8 00 00 00 00       	mov    $0x0,%eax
  1049c8:	e9 a9 02 00 00       	jmp    104c76 <vfs_exec+0x4e7>
    }

    void* elf_mod_entry = (void*) (header->entry);
  1049cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1049d0:	8b 40 18             	mov    0x18(%eax),%eax
  1049d3:	89 45 bc             	mov    %eax,-0x44(%ebp)

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  1049d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1049d9:	8b 50 1c             	mov    0x1c(%eax),%edx
  1049dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1049df:	01 d0                	add    %edx,%eax
  1049e1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  1049e4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1049eb:	e9 8a 00 00 00       	jmp    104a7a <vfs_exec+0x2eb>
        void* dest = (void*) ph->virt_addr;
  1049f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1049f3:	8b 40 08             	mov    0x8(%eax),%eax
  1049f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
        void* src = ((char*) header) + ph->offset;
  1049f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1049fc:	8b 50 04             	mov    0x4(%eax),%edx
  1049ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104a02:	01 d0                	add    %edx,%eax
  104a04:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  104a07:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104a0a:	8b 00                	mov    (%eax),%eax
  104a0c:	83 f8 01             	cmp    $0x1,%eax
  104a0f:	74 02                	je     104a13 <vfs_exec+0x284>
            continue;
  104a11:	eb 5f                	jmp    104a72 <vfs_exec+0x2e3>
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  104a13:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104a1a:	eb 2f                	jmp    104a4b <vfs_exec+0x2bc>
            vmm_free(dest + offset);
  104a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104a1f:	8b 55 b8             	mov    -0x48(%ebp),%edx
  104a22:	01 d0                	add    %edx,%eax
  104a24:	89 04 24             	mov    %eax,(%esp)
  104a27:	e8 9e 09 00 00       	call   1053ca <vmm_free>
            vmm_alloc_addr(dest + offset, 0);
  104a2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104a2f:	8b 55 b8             	mov    -0x48(%ebp),%edx
  104a32:	01 d0                	add    %edx,%eax
  104a34:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104a3b:	00 
  104a3c:	89 04 24             	mov    %eax,(%esp)
  104a3f:	e8 c9 0b 00 00       	call   10560d <vmm_alloc_addr>
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  104a44:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  104a4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104a4e:	8b 40 14             	mov    0x14(%eax),%eax
  104a51:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  104a54:	77 c6                	ja     104a1c <vfs_exec+0x28d>
            vmm_free(dest + offset);
            vmm_alloc_addr(dest + offset, 0);
        }

        memcpy(dest, src, ph->file_size);
  104a56:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104a59:	8b 40 10             	mov    0x10(%eax),%eax
  104a5c:	89 44 24 08          	mov    %eax,0x8(%esp)
  104a60:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  104a63:	89 44 24 04          	mov    %eax,0x4(%esp)
  104a67:	8b 45 b8             	mov    -0x48(%ebp),%eax
  104a6a:	89 04 24             	mov    %eax,(%esp)
  104a6d:	e8 77 f2 ff ff       	call   103ce9 <memcpy>

    void* elf_mod_entry = (void*) (header->entry);

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  104a72:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  104a76:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
  104a7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104a7d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  104a81:	0f b7 c0             	movzwl %ax,%eax
  104a84:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  104a87:	0f 87 63 ff ff ff    	ja     1049f0 <vfs_exec+0x261>

        memcpy(dest, src, ph->file_size);
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);
  104a8d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104a94:	e8 c8 0a 00 00       	call   105561 <vmm_alloc_ucont>
  104a99:	89 45 b0             	mov    %eax,-0x50(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  104a9c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  104aa3:	eb 69                	jmp    104b0e <vfs_exec+0x37f>
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
  104aa5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104aa8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104aaf:	8b 45 b0             	mov    -0x50(%ebp),%eax
  104ab2:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  104ab5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104abc:	e8 a0 0a 00 00       	call   105561 <vmm_alloc_ucont>
  104ac1:	89 03                	mov    %eax,(%ebx)
        strcpy(usargs[i], kargs[i]);
  104ac3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104ac6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104acd:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104ad0:	01 d0                	add    %edx,%eax
  104ad2:	8b 10                	mov    (%eax),%edx
  104ad4:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104ad7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  104ade:	8b 45 b0             	mov    -0x50(%ebp),%eax
  104ae1:	01 c8                	add    %ecx,%eax
  104ae3:	8b 00                	mov    (%eax),%eax
  104ae5:	89 54 24 04          	mov    %edx,0x4(%esp)
  104ae9:	89 04 24             	mov    %eax,(%esp)
  104aec:	e8 54 f3 ff ff       	call   103e45 <strcpy>
        free(kargs[i]);
  104af1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104af4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104afb:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104afe:	01 d0                	add    %edx,%eax
  104b00:	8b 00                	mov    (%eax),%eax
  104b02:	89 04 24             	mov    %eax,(%esp)
  104b05:	e8 43 f1 ff ff       	call   103c4d <free>
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);

    for(uint32_t i = 0; i < argc; i++) {
  104b0a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  104b0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104b11:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  104b14:	72 8f                	jb     104aa5 <vfs_exec+0x316>
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
        strcpy(usargs[i], kargs[i]);
        free(kargs[i]);
    }

    usargs[argc] = 0;
  104b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104b19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104b20:	8b 45 b0             	mov    -0x50(%ebp),%eax
  104b23:	01 d0                	add    %edx,%eax
  104b25:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    free(kargs);
  104b2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104b2e:	89 04 24             	mov    %eax,(%esp)
  104b31:	e8 17 f1 ff ff       	call   103c4d <free>

    struct task* task = init_task(elf_mod_pdir, elf_mod_entry);
  104b36:	8b 45 bc             	mov    -0x44(%ebp),%eax
  104b39:	89 44 24 04          	mov    %eax,0x4(%esp)
  104b3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104b40:	89 04 24             	mov    %eax,(%esp)
  104b43:	e8 c1 e6 ff ff       	call   103209 <init_task>
  104b48:	89 45 ac             	mov    %eax,-0x54(%ebp)
    if(get_current_task() != 0) {
  104b4b:	e8 cf e3 ff ff       	call   102f1f <get_current_task>
  104b50:	85 c0                	test   %eax,%eax
  104b52:	74 38                	je     104b8c <vfs_exec+0x3fd>
        task->stdin = get_current_task()->stdin;
  104b54:	e8 c6 e3 ff ff       	call   102f1f <get_current_task>
  104b59:	8b 50 38             	mov    0x38(%eax),%edx
  104b5c:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104b5f:	89 50 38             	mov    %edx,0x38(%eax)
        task->stdout = get_current_task()->stdout;
  104b62:	e8 b8 e3 ff ff       	call   102f1f <get_current_task>
  104b67:	8b 50 30             	mov    0x30(%eax),%edx
  104b6a:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104b6d:	89 50 30             	mov    %edx,0x30(%eax)
        task->stderr = get_current_task()->stderr;
  104b70:	e8 aa e3 ff ff       	call   102f1f <get_current_task>
  104b75:	8b 50 34             	mov    0x34(%eax),%edx
  104b78:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104b7b:	89 50 34             	mov    %edx,0x34(%eax)
        task->execPath = get_current_task()->execPath;
  104b7e:	e8 9c e3 ff ff       	call   102f1f <get_current_task>
  104b83:	8b 50 28             	mov    0x28(%eax),%edx
  104b86:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104b89:	89 50 28             	mov    %edx,0x28(%eax)
    }

    if(execPath != 0) {
  104b8c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  104b90:	74 09                	je     104b9b <vfs_exec+0x40c>
        task->execPath = execPath;
  104b92:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104b95:	8b 55 10             	mov    0x10(%ebp),%edx
  104b98:	89 50 28             	mov    %edx,0x28(%eax)
    }

    if(stdin != 0) {
  104b9b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  104b9f:	74 34                	je     104bd5 <vfs_exec+0x446>
        if(vfs_exists(stdin)) {
  104ba1:	8b 45 14             	mov    0x14(%ebp),%eax
  104ba4:	89 04 24             	mov    %eax,(%esp)
  104ba7:	e8 95 fb ff ff       	call   104741 <vfs_exists>
  104bac:	85 c0                	test   %eax,%eax
  104bae:	74 25                	je     104bd5 <vfs_exec+0x446>
            struct res_handle* f = vfs_open(stdin, FM_READ);
  104bb0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104bb7:	00 
  104bb8:	8b 45 14             	mov    0x14(%ebp),%eax
  104bbb:	89 04 24             	mov    %eax,(%esp)
  104bbe:	e8 71 f9 ff ff       	call   104534 <vfs_open>
  104bc3:	89 45 a8             	mov    %eax,-0x58(%ebp)
            if(f) task->stdin = f;
  104bc6:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
  104bca:	74 09                	je     104bd5 <vfs_exec+0x446>
  104bcc:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104bcf:	8b 55 a8             	mov    -0x58(%ebp),%edx
  104bd2:	89 50 38             	mov    %edx,0x38(%eax)
        }
    }

    if(stdout != 0) {
  104bd5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  104bd9:	74 34                	je     104c0f <vfs_exec+0x480>
        if(vfs_exists(stdout)) {
  104bdb:	8b 45 18             	mov    0x18(%ebp),%eax
  104bde:	89 04 24             	mov    %eax,(%esp)
  104be1:	e8 5b fb ff ff       	call   104741 <vfs_exists>
  104be6:	85 c0                	test   %eax,%eax
  104be8:	74 25                	je     104c0f <vfs_exec+0x480>
            struct res_handle* f = vfs_open(stdout, FM_READ);
  104bea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104bf1:	00 
  104bf2:	8b 45 18             	mov    0x18(%ebp),%eax
  104bf5:	89 04 24             	mov    %eax,(%esp)
  104bf8:	e8 37 f9 ff ff       	call   104534 <vfs_open>
  104bfd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
            if(f) task->stdout = f;
  104c00:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
  104c04:	74 09                	je     104c0f <vfs_exec+0x480>
  104c06:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104c09:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  104c0c:	89 50 30             	mov    %edx,0x30(%eax)
        }
    }

    if(stderr != 0) {
  104c0f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  104c13:	74 34                	je     104c49 <vfs_exec+0x4ba>
        if(vfs_exists(stderr)) {
  104c15:	8b 45 1c             	mov    0x1c(%ebp),%eax
  104c18:	89 04 24             	mov    %eax,(%esp)
  104c1b:	e8 21 fb ff ff       	call   104741 <vfs_exists>
  104c20:	85 c0                	test   %eax,%eax
  104c22:	74 25                	je     104c49 <vfs_exec+0x4ba>
            struct res_handle* f = vfs_open(stderr, FM_READ);
  104c24:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104c2b:	00 
  104c2c:	8b 45 1c             	mov    0x1c(%ebp),%eax
  104c2f:	89 04 24             	mov    %eax,(%esp)
  104c32:	e8 fd f8 ff ff       	call   104534 <vfs_open>
  104c37:	89 45 a0             	mov    %eax,-0x60(%ebp)
            if(f) task->stderr = f;
  104c3a:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
  104c3e:	74 09                	je     104c49 <vfs_exec+0x4ba>
  104c40:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104c43:	8b 55 a0             	mov    -0x60(%ebp),%edx
  104c46:	89 50 34             	mov    %edx,0x34(%eax)
    }


    //TODO change stdio if requested and free kargs

    task->args = usargs;
  104c49:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104c4c:	8b 55 b0             	mov    -0x50(%ebp),%edx
  104c4f:	89 50 20             	mov    %edx,0x20(%eax)
    task->filePath = path;
  104c52:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104c55:	8b 55 08             	mov    0x8(%ebp),%edx
  104c58:	89 50 24             	mov    %edx,0x24(%eax)

    vmm_activate_pagedir(old_pdir);
  104c5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104c5e:	89 04 24             	mov    %eax,(%esp)
  104c61:	e8 5b 0a 00 00       	call   1056c1 <vmm_activate_pagedir>

    free(modsrc);
  104c66:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104c69:	89 04 24             	mov    %eax,(%esp)
  104c6c:	e8 dc ef ff ff       	call   103c4d <free>

    return task->PID;
  104c71:	8b 45 ac             	mov    -0x54(%ebp),%eax
  104c74:	8b 00                	mov    (%eax),%eax
}
  104c76:	83 c4 74             	add    $0x74,%esp
  104c79:	5b                   	pop    %ebx
  104c7a:	5d                   	pop    %ebp
  104c7b:	c3                   	ret    

00104c7c <vfs_resolve_path>:

char* vfs_resolve_path(char* path) {
  104c7c:	55                   	push   %ebp
  104c7d:	89 e5                	mov    %esp,%ebp
  104c7f:	83 ec 28             	sub    $0x28,%esp
    struct res_node* node = vfs_get_node(path);
  104c82:	8b 45 08             	mov    0x8(%ebp),%eax
  104c85:	89 04 24             	mov    %eax,(%esp)
  104c88:	e8 c4 f6 ff ff       	call   104351 <vfs_get_node>
  104c8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(node == 0) return 0;
  104c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104c94:	75 07                	jne    104c9d <vfs_resolve_path+0x21>
  104c96:	b8 00 00 00 00       	mov    $0x0,%eax
  104c9b:	eb 0b                	jmp    104ca8 <vfs_resolve_path+0x2c>
    return vfs_construct_absolute_path_for_node(node);
  104c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ca0:	89 04 24             	mov    %eax,(%esp)
  104ca3:	e8 c0 f3 ff ff       	call   104068 <vfs_construct_absolute_path_for_node>
}
  104ca8:	c9                   	leave  
  104ca9:	c3                   	ret    

00104caa <vfs_init_root>:

void vfs_init_root() {
  104caa:	55                   	push   %ebp
  104cab:	89 e5                	mov    %esp,%ebp
  104cad:	83 ec 18             	sub    $0x18,%esp
    if(root == 0) {
  104cb0:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104cb5:	85 c0                	test   %eax,%eax
  104cb7:	75 57                	jne    104d10 <vfs_init_root+0x66>
        root = malloc(sizeof(struct res_node));
  104cb9:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  104cc0:	e8 29 ed ff ff       	call   1039ee <malloc>
  104cc5:	a3 6c 95 12 00       	mov    %eax,0x12956c
        root->next = 0;
  104cca:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104ccf:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  104cd6:	00 00 00 
        root->parent = 0;
  104cd9:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104cde:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  104ce5:	00 00 00 
        strcpy(root->name, "$");
  104ce8:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104ced:	66 c7 00 24 00       	movw   $0x24,(%eax)
        root->res_ptr = 0;
  104cf2:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104cf7:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  104cfe:	00 00 00 
        root->res_type = RES_SUBDIR;
  104d01:	a1 6c 95 12 00       	mov    0x12956c,%eax
  104d06:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  104d0d:	00 00 00 
    }
}
  104d10:	c9                   	leave  
  104d11:	c3                   	ret    

00104d12 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  104d12:	55                   	push   %ebp
  104d13:	89 e5                	mov    %esp,%ebp
  104d15:	83 ec 28             	sub    $0x28,%esp
    static struct res_node* node;
    node = vfs_get_node(path);
  104d18:	8b 45 08             	mov    0x8(%ebp),%eax
  104d1b:	89 04 24             	mov    %eax,(%esp)
  104d1e:	e8 2e f6 ff ff       	call   104351 <vfs_get_node>
  104d23:	a3 80 95 12 00       	mov    %eax,0x129580
    node = node->res_ptr;
  104d28:	a1 80 95 12 00       	mov    0x129580,%eax
  104d2d:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104d33:	a3 80 95 12 00       	mov    %eax,0x129580

    while(node != 0) {
  104d38:	eb 74                	jmp    104dae <vfs_debug_ls+0x9c>
        char* type = "N/A";
  104d3a:	c7 45 f4 26 79 10 00 	movl   $0x107926,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  104d41:	a1 80 95 12 00       	mov    0x129580,%eax
  104d46:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  104d4c:	85 c0                	test   %eax,%eax
  104d4e:	75 07                	jne    104d57 <vfs_debug_ls+0x45>
            type = "DIR";
  104d50:	c7 45 f4 2a 79 10 00 	movl   $0x10792a,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  104d57:	a1 80 95 12 00       	mov    0x129580,%eax
  104d5c:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  104d62:	83 f8 01             	cmp    $0x1,%eax
  104d65:	75 14                	jne    104d7b <vfs_debug_ls+0x69>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  104d67:	a1 80 95 12 00       	mov    0x129580,%eax
  104d6c:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104d72:	8b 40 04             	mov    0x4(%eax),%eax
  104d75:	8b 40 18             	mov    0x18(%eax),%eax
  104d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  104d7b:	a1 80 95 12 00       	mov    0x129580,%eax
  104d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104d83:	89 54 24 0c          	mov    %edx,0xc(%esp)
  104d87:	89 44 24 08          	mov    %eax,0x8(%esp)
  104d8b:	8b 45 08             	mov    0x8(%ebp),%eax
  104d8e:	89 44 24 04          	mov    %eax,0x4(%esp)
  104d92:	c7 04 24 2e 79 10 00 	movl   $0x10792e,(%esp)
  104d99:	e8 01 b8 ff ff       	call   10059f <kprintf>

        node = node->next;
  104d9e:	a1 80 95 12 00       	mov    0x129580,%eax
  104da3:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  104da9:	a3 80 95 12 00       	mov    %eax,0x129580
void vfs_debug_ls(char* path) {
    static struct res_node* node;
    node = vfs_get_node(path);
    node = node->res_ptr;

    while(node != 0) {
  104dae:	a1 80 95 12 00       	mov    0x129580,%eax
  104db3:	85 c0                	test   %eax,%eax
  104db5:	75 83                	jne    104d3a <vfs_debug_ls+0x28>

        kprintf("LS %s: %s [%s]\n", path, node->name, type);

        node = node->next;
    }
}
  104db7:	c9                   	leave  
  104db8:	c3                   	ret    

00104db9 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  104db9:	55                   	push   %ebp
  104dba:	89 e5                	mov    %esp,%ebp
  104dbc:	53                   	push   %ebx
  104dbd:	83 ec 44             	sub    $0x44,%esp
	uint32_t phys_context = 0;
  104dc0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  104dc7:	8d 45 dc             	lea    -0x24(%ebp),%eax
  104dca:	89 04 24             	mov    %eax,(%esp)
  104dcd:	e8 10 08 00 00       	call   1055e2 <vmm_alloc>
  104dd2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	uint32_t phys_pagedir = 0;
  104dd5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  104ddc:	8d 45 d8             	lea    -0x28(%ebp),%eax
  104ddf:	89 04 24             	mov    %eax,(%esp)
  104de2:	e8 fb 07 00 00       	call   1055e2 <vmm_alloc>
  104de7:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104dea:	89 02                	mov    %eax,(%edx)
	if (pagedir != 0)
  104dec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104df0:	74 08                	je     104dfa <vmm_create_vpdraw+0x41>
		*pagedir = phys_pagedir;
  104df2:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104df5:	8b 45 08             	mov    0x8(%ebp),%eax
  104df8:	89 10                	mov    %edx,(%eax)

	uint32_t* pagedir_ptr = vmm_alloc(0);
  104dfa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104e01:	e8 dc 07 00 00       	call   1055e2 <vmm_alloc>
  104e06:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  104e09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104e10:	e9 0d 01 00 00       	jmp    104f22 <vmm_create_vpdraw+0x169>
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104e1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104e22:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  104e25:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  104e28:	89 04 24             	mov    %eax,(%esp)
  104e2b:	e8 b2 07 00 00       	call   1055e2 <vmm_alloc>
  104e30:	89 03                	mov    %eax,(%ebx)

		if (i < PMEM_TABLES) {
  104e32:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
  104e36:	77 55                	ja     104e8d <vmm_create_vpdraw+0xd4>
			vmm_free((void*) (pagedir_ptr[i]));
  104e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104e42:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104e45:	01 d0                	add    %edx,%eax
  104e47:	8b 00                	mov    (%eax),%eax
  104e49:	89 04 24             	mov    %eax,(%esp)
  104e4c:	e8 79 05 00 00       	call   1053ca <vmm_free>
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  104e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e54:	8b 14 85 00 9c 18 00 	mov    0x189c00(,%eax,4),%edx
  104e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e5e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  104e65:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104e68:	01 c8                	add    %ecx,%eax
  104e6a:	8b 00                	mov    (%eax),%eax
  104e6c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  104e73:	00 
  104e74:	89 54 24 04          	mov    %edx,0x4(%esp)
  104e78:	89 04 24             	mov    %eax,(%esp)
  104e7b:	e8 f5 04 00 00       	call   105375 <map_address_active>
			paddr = kernel_pagetables[i];
  104e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e83:	8b 04 85 00 9c 18 00 	mov    0x189c00(,%eax,4),%eax
  104e8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  104e8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e90:	8b 00                	mov    (%eax),%eax
  104e92:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104e95:	c1 e2 02             	shl    $0x2,%edx
  104e98:	01 d0                	add    %edx,%eax
  104e9a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  104e9d:	83 ca 07             	or     $0x7,%edx
  104ea0:	89 10                	mov    %edx,(%eax)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  104ea2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
  104ea6:	76 76                	jbe    104f1e <vmm_create_vpdraw+0x165>
			for (i2 = 0; i2 < 1024; i2++) {
  104ea8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104eaf:	eb 64                	jmp    104f15 <vmm_create_vpdraw+0x15c>
				uint32_t vaddr = (i << 22) + (i2 << 12);
  104eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104eb4:	c1 e0 16             	shl    $0x16,%eax
  104eb7:	89 c2                	mov    %eax,%edx
  104eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ebc:	c1 e0 0c             	shl    $0xc,%eax
  104ebf:	01 d0                	add    %edx,%eax
  104ec1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  104ec4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ec7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ed1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  104ed8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104edb:	01 c8                	add    %ecx,%eax
  104edd:	8b 00                	mov    (%eax),%eax
  104edf:	01 d0                	add    %edx,%eax
  104ee1:	89 c1                	mov    %eax,%ecx
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
  104ee3:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  104eea:	76 07                	jbe    104ef3 <vmm_create_vpdraw+0x13a>
  104eec:	ba 00 02 00 00       	mov    $0x200,%edx
  104ef1:	eb 05                	jmp    104ef8 <vmm_create_vpdraw+0x13f>
  104ef3:	ba 00 00 00 00       	mov    $0x0,%edx
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
  104ef8:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  104eff:	76 07                	jbe    104f08 <vmm_create_vpdraw+0x14f>
  104f01:	b8 04 00 00 00       	mov    $0x4,%eax
  104f06:	eb 05                	jmp    104f0d <vmm_create_vpdraw+0x154>
  104f08:	b8 00 00 00 00       	mov    $0x0,%eax
  104f0d:	09 d0                	or     %edx,%eax

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
				uint32_t vaddr = (i << 22) + (i2 << 12);

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  104f0f:	89 01                	mov    %eax,(%ecx)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  104f11:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  104f15:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  104f1c:	76 93                	jbe    104eb1 <vmm_create_vpdraw+0xf8>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  104f1e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  104f22:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104f29:	0f 86 e6 fe ff ff    	jbe    104e15 <vmm_create_vpdraw+0x5c>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  104f2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104f36:	eb 49                	jmp    104f81 <vmm_create_vpdraw+0x1c8>
		paddr = context->pagedir[i] & 0xFFFFF000;
  104f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f3b:	8b 00                	mov    (%eax),%eax
  104f3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104f40:	c1 e2 02             	shl    $0x2,%edx
  104f43:	01 d0                	add    %edx,%eax
  104f45:	8b 00                	mov    (%eax),%eax
  104f47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104f4c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		map_address_context(pagedir_ptr,
  104f4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
  104f52:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104f55:	89 d1                	mov    %edx,%ecx
  104f57:	c1 e1 0c             	shl    $0xc,%ecx
  104f5a:	8b 15 fc 62 10 00    	mov    0x1062fc,%edx
		}
	}

	for (i = 0; i < 1024; i++) {
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
  104f60:	01 ca                	add    %ecx,%edx
  104f62:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  104f69:	00 
  104f6a:	89 44 24 08          	mov    %eax,0x8(%esp)
  104f6e:	89 54 24 04          	mov    %edx,0x4(%esp)
  104f72:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104f75:	89 04 24             	mov    %eax,(%esp)
  104f78:	e8 68 03 00 00       	call   1052e5 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  104f7d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  104f81:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104f88:	76 ae                	jbe    104f38 <vmm_create_vpdraw+0x17f>
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  104f8a:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104f8d:	a1 00 63 10 00       	mov    0x106300,%eax
  104f92:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  104f99:	00 
  104f9a:	89 54 24 08          	mov    %edx,0x8(%esp)
  104f9e:	89 44 24 04          	mov    %eax,0x4(%esp)
  104fa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104fa5:	89 04 24             	mov    %eax,(%esp)
  104fa8:	e8 38 03 00 00       	call   1052e5 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  104fad:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
  104fb4:	eb 28                	jmp    104fde <vmm_create_vpdraw+0x225>
		map_address_context(pagedir_ptr, i, i, 0);
  104fb6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  104fbd:	00 
  104fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fc1:	89 44 24 08          	mov    %eax,0x8(%esp)
  104fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fc8:	89 44 24 04          	mov    %eax,0x4(%esp)
  104fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104fcf:	89 04 24             	mov    %eax,(%esp)
  104fd2:	e8 0e 03 00 00       	call   1052e5 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  104fd7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  104fde:	b8 00 a0 18 00       	mov    $0x18a000,%eax
  104fe3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  104fe6:	72 ce                	jb     104fb6 <vmm_create_vpdraw+0x1fd>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  104fe8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104feb:	8b 00                	mov    (%eax),%eax
  104fed:	89 45 e0             	mov    %eax,-0x20(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  104ff0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104ff3:	89 c2                	mov    %eax,%edx
  104ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ff8:	89 10                	mov    %edx,(%eax)

	vmm_unmap(pd_ptr);
  104ffa:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104ffd:	89 04 24             	mov    %eax,(%esp)
  105000:	e8 41 04 00 00       	call   105446 <vmm_unmap>
	vmm_unmap(context);
  105005:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105008:	89 04 24             	mov    %eax,(%esp)
  10500b:	e8 36 04 00 00       	call   105446 <vmm_unmap>

	return pagedir_ptr;
  105010:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  105013:	83 c4 44             	add    $0x44,%esp
  105016:	5b                   	pop    %ebx
  105017:	5d                   	pop    %ebp
  105018:	c3                   	ret    

00105019 <vmm_free_pdptr>:

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  105019:	55                   	push   %ebp
  10501a:	89 e5                	mov    %esp,%ebp
  10501c:	83 ec 28             	sub    $0x28,%esp
	for (uint32_t i = 0; i < 1024; i++) {
  10501f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  105026:	eb 1d                	jmp    105045 <vmm_free_pdptr+0x2c>
		vmm_unmap((void*) pagedir_ptr[i]);
  105028:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10502b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105032:	8b 45 08             	mov    0x8(%ebp),%eax
  105035:	01 d0                	add    %edx,%eax
  105037:	8b 00                	mov    (%eax),%eax
  105039:	89 04 24             	mov    %eax,(%esp)
  10503c:	e8 05 04 00 00       	call   105446 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  105041:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  105045:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  10504c:	76 da                	jbe    105028 <vmm_free_pdptr+0xf>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  10504e:	8b 45 08             	mov    0x8(%ebp),%eax
  105051:	89 04 24             	mov    %eax,(%esp)
  105054:	e8 ed 03 00 00       	call   105446 <vmm_unmap>
}
  105059:	c9                   	leave  
  10505a:	c3                   	ret    

0010505b <vmm_get_current_pagedir>:

uint32_t vmm_get_current_pagedir(void) {
  10505b:	55                   	push   %ebp
  10505c:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  10505e:	a1 84 95 12 00       	mov    0x129584,%eax
}
  105063:	5d                   	pop    %ebp
  105064:	c3                   	ret    

00105065 <vmm_create_pagedir>:

uint32_t vmm_create_pagedir() {
  105065:	55                   	push   %ebp
  105066:	89 e5                	mov    %esp,%ebp
  105068:	83 ec 28             	sub    $0x28,%esp
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10506b:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10506e:	89 04 24             	mov    %eax,(%esp)
  105071:	e8 43 fd ff ff       	call   104db9 <vmm_create_vpdraw>
  105076:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vmm_free_pdptr(pdptr);
  105079:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10507c:	89 04 24             	mov    %eax,(%esp)
  10507f:	e8 95 ff ff ff       	call   105019 <vmm_free_pdptr>

	return phys_pagedir;
  105084:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  105087:	c9                   	leave  
  105088:	c3                   	ret    

00105089 <vmm_free_current_pagetables>:

void vmm_free_current_pagetables() {
  105089:	55                   	push   %ebp
  10508a:	89 e5                	mov    %esp,%ebp
  10508c:	83 ec 28             	sub    $0x28,%esp
    uint32_t* ppd = vmm_alloc(0);
  10508f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105096:	e8 47 05 00 00       	call   1055e2 <vmm_alloc>
  10509b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t* ppt = vmm_alloc(0);
  10509e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1050a5:	e8 38 05 00 00       	call   1055e2 <vmm_alloc>
  1050aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vmm_free(ppd);
  1050ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050b0:	89 04 24             	mov    %eax,(%esp)
  1050b3:	e8 12 03 00 00       	call   1053ca <vmm_free>
    vmm_free(ppt);
  1050b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1050bb:	89 04 24             	mov    %eax,(%esp)
  1050be:	e8 07 03 00 00       	call   1053ca <vmm_free>

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);
  1050c3:	e8 57 de ff ff       	call   102f1f <get_current_task>
  1050c8:	8b 50 14             	mov    0x14(%eax),%edx
  1050cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1050d5:	00 
  1050d6:	89 54 24 04          	mov    %edx,0x4(%esp)
  1050da:	89 04 24             	mov    %eax,(%esp)
  1050dd:	e8 93 02 00 00       	call   105375 <map_address_active>

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  1050e2:	c7 45 f4 80 00 00 00 	movl   $0x80,-0xc(%ebp)
  1050e9:	e9 b5 00 00 00       	jmp    1051a3 <vmm_free_current_pagetables+0x11a>
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);
  1050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1050f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1050f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050fb:	01 d0                	add    %edx,%eax
  1050fd:	8b 00                	mov    (%eax),%eax
  1050ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105104:	89 c2                	mov    %eax,%edx
  105106:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105109:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105110:	00 
  105111:	89 54 24 04          	mov    %edx,0x4(%esp)
  105115:	89 04 24             	mov    %eax,(%esp)
  105118:	e8 58 02 00 00       	call   105375 <map_address_active>

        for(uint32_t n = 0; n < 1024; n++) {
  10511d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105124:	eb 3a                	jmp    105160 <vmm_free_current_pagetables+0xd7>
            if(ppt[n] & PT_PRESENT) {
  105126:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105129:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105130:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105133:	01 d0                	add    %edx,%eax
  105135:	8b 00                	mov    (%eax),%eax
  105137:	83 e0 01             	and    $0x1,%eax
  10513a:	85 c0                	test   %eax,%eax
  10513c:	74 1e                	je     10515c <vmm_free_current_pagetables+0xd3>

                //kprintf("[exit] should free %x:%d->%x:%d->%x\n", vmm_resolve(ppd), i, ppd[i], n, ppt[n]);

                pmm_free((void*)(ppt[n] & 0xFFFF000));
  10513e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105141:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105148:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10514b:	01 d0                	add    %edx,%eax
  10514d:	8b 00                	mov    (%eax),%eax
  10514f:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  105154:	89 04 24             	mov    %eax,(%esp)
  105157:	e8 b9 d0 ff ff       	call   102215 <pmm_free>
    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);

        for(uint32_t n = 0; n < 1024; n++) {
  10515c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  105160:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  105167:	76 bd                	jbe    105126 <vmm_free_current_pagetables+0x9d>

                pmm_free((void*)(ppt[n] & 0xFFFF000));
            }
        }

        if(ppd[i] & PD_PRESENT) {
  105169:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10516c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105173:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105176:	01 d0                	add    %edx,%eax
  105178:	8b 00                	mov    (%eax),%eax
  10517a:	83 e0 01             	and    $0x1,%eax
  10517d:	85 c0                	test   %eax,%eax
  10517f:	74 1e                	je     10519f <vmm_free_current_pagetables+0x116>
            pmm_free((void*)(ppd[i] & (~0xFFF)));
  105181:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105184:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10518b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10518e:	01 d0                	add    %edx,%eax
  105190:	8b 00                	mov    (%eax),%eax
  105192:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105197:	89 04 24             	mov    %eax,(%esp)
  10519a:	e8 76 d0 ff ff       	call   102215 <pmm_free>
    vmm_free(ppd);
    vmm_free(ppt);

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  10519f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1051a3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  1051aa:	0f 86 3e ff ff ff    	jbe    1050ee <vmm_free_current_pagetables+0x65>

        if(ppd[i] & PD_PRESENT) {
            pmm_free((void*)(ppd[i] & (~0xFFF)));
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
  1051b0:	e8 6a dd ff ff       	call   102f1f <get_current_task>
  1051b5:	8b 40 14             	mov    0x14(%eax),%eax
  1051b8:	89 04 24             	mov    %eax,(%esp)
  1051bb:	e8 55 d0 ff ff       	call   102215 <pmm_free>
}
  1051c0:	c9                   	leave  
  1051c1:	c3                   	ret    

001051c2 <vmm_resolve>:

uint32_t vmm_resolve(void* vaddr) {
  1051c2:	55                   	push   %ebp
  1051c3:	89 e5                	mov    %esp,%ebp
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  1051c5:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  1051ca:	8b 55 08             	mov    0x8(%ebp),%edx
  1051cd:	c1 ea 0c             	shr    $0xc,%edx
  1051d0:	c1 e2 02             	shl    $0x2,%edx
  1051d3:	01 d0                	add    %edx,%eax
  1051d5:	8b 00                	mov    (%eax),%eax
  1051d7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
  1051dc:	5d                   	pop    %ebp
  1051dd:	c3                   	ret    

001051de <vmm_resolve_ppd>:

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  1051de:	55                   	push   %ebp
  1051df:	89 e5                	mov    %esp,%ebp
  1051e1:	83 ec 38             	sub    $0x38,%esp
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  1051e4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1051e7:	c1 e8 16             	shr    $0x16,%eax
  1051ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  1051ed:	8b 45 0c             	mov    0xc(%ebp),%eax
  1051f0:	c1 e8 0c             	shr    $0xc,%eax
  1051f3:	25 ff 03 00 00       	and    $0x3ff,%eax
  1051f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  1051fb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105202:	e8 db 03 00 00       	call   1055e2 <vmm_alloc>
  105207:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  10520a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10520d:	89 04 24             	mov    %eax,(%esp)
  105210:	e8 b5 01 00 00       	call   1053ca <vmm_free>

	map_address_active((uint32_t) vpd, pdir, 0);
  105215:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105218:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10521f:	00 
  105220:	8b 55 08             	mov    0x8(%ebp),%edx
  105223:	89 54 24 04          	mov    %edx,0x4(%esp)
  105227:	89 04 24             	mov    %eax,(%esp)
  10522a:	e8 46 01 00 00       	call   105375 <map_address_active>
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  10522f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105232:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105239:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10523c:	01 d0                	add    %edx,%eax
  10523e:	8b 00                	mov    (%eax),%eax
  105240:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105245:	89 45 e8             	mov    %eax,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  105248:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10524b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105252:	00 
  105253:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105256:	89 54 24 04          	mov    %edx,0x4(%esp)
  10525a:	89 04 24             	mov    %eax,(%esp)
  10525d:	e8 13 01 00 00       	call   105375 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  105262:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105265:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10526c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10526f:	01 d0                	add    %edx,%eax
  105271:	8b 00                	mov    (%eax),%eax
  105273:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105278:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  10527b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10527e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
  105283:	c9                   	leave  
  105284:	c3                   	ret    

00105285 <vmm_map_range>:

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  105285:	55                   	push   %ebp
  105286:	89 e5                	mov    %esp,%ebp
  105288:	83 ec 28             	sub    $0x28,%esp
	if ((uint32_t) vaddr & 0xFFF)
  10528b:	8b 45 08             	mov    0x8(%ebp),%eax
  10528e:	25 ff 0f 00 00       	and    $0xfff,%eax
  105293:	85 c0                	test   %eax,%eax
  105295:	74 02                	je     105299 <vmm_map_range+0x14>
		return;
  105297:	eb 4a                	jmp    1052e3 <vmm_map_range+0x5e>
	if ((uint32_t) paddr & 0xFFF)
  105299:	8b 45 0c             	mov    0xc(%ebp),%eax
  10529c:	25 ff 0f 00 00       	and    $0xfff,%eax
  1052a1:	85 c0                	test   %eax,%eax
  1052a3:	74 02                	je     1052a7 <vmm_map_range+0x22>
		return;
  1052a5:	eb 3c                	jmp    1052e3 <vmm_map_range+0x5e>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  1052a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1052ae:	eb 2b                	jmp    1052db <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  1052b0:	8b 55 0c             	mov    0xc(%ebp),%edx
  1052b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1052b6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  1052b9:	8b 55 08             	mov    0x8(%ebp),%edx
  1052bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1052bf:	01 c2                	add    %eax,%edx
  1052c1:	8b 45 14             	mov    0x14(%ebp),%eax
  1052c4:	89 44 24 08          	mov    %eax,0x8(%esp)
  1052c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1052cc:	89 14 24             	mov    %edx,(%esp)
  1052cf:	e8 a1 00 00 00       	call   105375 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  1052d4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  1052db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1052de:	3b 45 10             	cmp    0x10(%ebp),%eax
  1052e1:	72 cd                	jb     1052b0 <vmm_map_range+0x2b>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  1052e3:	c9                   	leave  
  1052e4:	c3                   	ret    

001052e5 <map_address_context>:

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  1052e5:	55                   	push   %ebp
  1052e6:	89 e5                	mov    %esp,%ebp
  1052e8:	56                   	push   %esi
  1052e9:	53                   	push   %ebx
  1052ea:	83 ec 10             	sub    $0x10,%esp
	uint32_t pd_entry = vaddr >> 22;
  1052ed:	8b 45 0c             	mov    0xc(%ebp),%eax
  1052f0:	c1 e8 16             	shr    $0x16,%eax
  1052f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  1052f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1052f9:	c1 e8 0c             	shr    $0xc,%eax
  1052fc:	25 ff 03 00 00       	and    $0x3ff,%eax
  105301:	89 45 f0             	mov    %eax,-0x10(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  105304:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105307:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10530e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105311:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  105318:	8b 45 08             	mov    0x8(%ebp),%eax
  10531b:	01 c8                	add    %ecx,%eax
  10531d:	8b 00                	mov    (%eax),%eax
  10531f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105324:	01 d0                	add    %edx,%eax
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
  105326:	8b 55 10             	mov    0x10(%ebp),%edx
  105329:	89 d1                	mov    %edx,%ecx
  10532b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105331:	8b 55 14             	mov    0x14(%ebp),%edx
  105334:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  10533a:	09 d1                	or     %edx,%ecx
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
  10533c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10533f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
  105346:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105349:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
  105350:	8b 55 08             	mov    0x8(%ebp),%edx
  105353:	01 f2                	add    %esi,%edx
  105355:	8b 12                	mov    (%edx),%edx
  105357:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  10535d:	01 da                	add    %ebx,%edx
  10535f:	8b 12                	mov    (%edx),%edx
					& (PT_PUBLIC | PT_ALLOCATABLE));
  105361:	81 e2 04 02 00 00    	and    $0x204,%edx
	uint32_t pd_entry = vaddr >> 22;
	uint32_t pt_entry = (vaddr >> 12) % 1024;

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
  105367:	09 ca                	or     %ecx,%edx
  105369:	83 ca 03             	or     $0x3,%edx
void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
	uint32_t pd_entry = vaddr >> 22;
	uint32_t pt_entry = (vaddr >> 12) % 1024;

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  10536c:	89 10                	mov    %edx,(%eax)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  10536e:	83 c4 10             	add    $0x10,%esp
  105371:	5b                   	pop    %ebx
  105372:	5e                   	pop    %esi
  105373:	5d                   	pop    %ebp
  105374:	c3                   	ret    

00105375 <map_address_active>:

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  105375:	55                   	push   %ebp
  105376:	89 e5                	mov    %esp,%ebp
  105378:	53                   	push   %ebx
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  105379:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  10537e:	8b 55 08             	mov    0x8(%ebp),%edx
  105381:	c1 ea 0c             	shr    $0xc,%edx
  105384:	c1 e2 02             	shl    $0x2,%edx
  105387:	01 d0                	add    %edx,%eax
  105389:	8b 55 0c             	mov    0xc(%ebp),%edx
  10538c:	89 d1                	mov    %edx,%ecx
  10538e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
	                                 (flags & 0xFFF) |
  105394:	8b 55 10             	mov    0x10(%ebp),%edx
  105397:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  10539d:	89 cb                	mov    %ecx,%ebx
  10539f:	09 d3                	or     %edx,%ebx
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
  1053a1:	8b 15 fc 62 10 00    	mov    0x1062fc,%edx
  1053a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1053aa:	c1 e9 0c             	shr    $0xc,%ecx
  1053ad:	c1 e1 02             	shl    $0x2,%ecx
  1053b0:	01 ca                	add    %ecx,%edx
  1053b2:	8b 12                	mov    (%edx),%edx
  1053b4:	81 e2 04 02 00 00    	and    $0x204,%edx
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
	                                 (flags & 0xFFF) |
  1053ba:	09 da                	or     %ebx,%edx
  1053bc:	83 ca 03             	or     $0x3,%edx
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  1053bf:	89 10                	mov    %edx,(%eax)
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  1053c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1053c4:	0f 01 38             	invlpg (%eax)
}
  1053c7:	5b                   	pop    %ebx
  1053c8:	5d                   	pop    %ebp
  1053c9:	c3                   	ret    

001053ca <vmm_free>:

void vmm_free(void* p_vaddr) {
  1053ca:	55                   	push   %ebp
  1053cb:	89 e5                	mov    %esp,%ebp
  1053cd:	83 ec 28             	sub    $0x28,%esp
	uint32_t vaddr = (uint32_t) p_vaddr;
  1053d0:	8b 45 08             	mov    0x8(%ebp),%eax
  1053d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1053d6:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  1053db:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1053de:	c1 ea 0c             	shr    $0xc,%edx
  1053e1:	c1 e2 02             	shl    $0x2,%edx
  1053e4:	01 d0                	add    %edx,%eax
  1053e6:	8b 00                	mov    (%eax),%eax
  1053e8:	25 01 02 00 00       	and    $0x201,%eax
  1053ed:	3d 01 02 00 00       	cmp    $0x201,%eax
  1053f2:	75 50                	jne    105444 <vmm_free+0x7a>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  1053f4:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  1053f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1053fc:	c1 ea 0c             	shr    $0xc,%edx
  1053ff:	c1 e2 02             	shl    $0x2,%edx
  105402:	01 d0                	add    %edx,%eax
  105404:	8b 00                	mov    (%eax),%eax
  105406:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10540b:	89 04 24             	mov    %eax,(%esp)
  10540e:	e8 02 ce ff ff       	call   102215 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105413:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  105418:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10541b:	c1 ea 0c             	shr    $0xc,%edx
  10541e:	c1 e2 02             	shl    $0x2,%edx
  105421:	01 d0                	add    %edx,%eax
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  105423:	8b 15 fc 62 10 00    	mov    0x1062fc,%edx
  105429:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10542c:	c1 e9 0c             	shr    $0xc,%ecx
  10542f:	c1 e1 02             	shl    $0x2,%ecx
  105432:	01 ca                	add    %ecx,%edx
  105434:	8b 12                	mov    (%edx),%edx
  105436:	83 e2 04             	and    $0x4,%edx
  105439:	80 ce 02             	or     $0x2,%dh

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  10543c:	89 10                	mov    %edx,(%eax)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  10543e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105441:	0f 01 38             	invlpg (%eax)
	}
}
  105444:	c9                   	leave  
  105445:	c3                   	ret    

00105446 <vmm_unmap>:

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  105446:	55                   	push   %ebp
  105447:	89 e5                	mov    %esp,%ebp
  105449:	83 ec 10             	sub    $0x10,%esp
	uint32_t vaddr = (uint32_t) p_vaddr;
  10544c:	8b 45 08             	mov    0x8(%ebp),%eax
  10544f:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105452:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  105457:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10545a:	c1 ea 0c             	shr    $0xc,%edx
  10545d:	c1 e2 02             	shl    $0x2,%edx
  105460:	01 d0                	add    %edx,%eax
  105462:	8b 00                	mov    (%eax),%eax
  105464:	25 01 02 00 00       	and    $0x201,%eax
  105469:	3d 01 02 00 00       	cmp    $0x201,%eax
  10546e:	75 31                	jne    1054a1 <vmm_unmap+0x5b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105470:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  105475:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105478:	c1 ea 0c             	shr    $0xc,%edx
  10547b:	c1 e2 02             	shl    $0x2,%edx
  10547e:	01 d0                	add    %edx,%eax
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  105480:	8b 15 fc 62 10 00    	mov    0x1062fc,%edx
  105486:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105489:	c1 e9 0c             	shr    $0xc,%ecx
  10548c:	c1 e1 02             	shl    $0x2,%ecx
  10548f:	01 ca                	add    %ecx,%edx
  105491:	8b 12                	mov    (%edx),%edx
  105493:	83 e2 04             	and    $0x4,%edx
  105496:	80 ce 02             	or     $0x2,%dh
void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
	uint32_t vaddr = (uint32_t) p_vaddr;

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105499:	89 10                	mov    %edx,(%eax)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  10549b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10549e:	0f 01 38             	invlpg (%eax)
	}
}
  1054a1:	c9                   	leave  
  1054a2:	c3                   	ret    

001054a3 <vmm_alloc_in_range>:

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  1054a3:	55                   	push   %ebp
  1054a4:	89 e5                	mov    %esp,%ebp
  1054a6:	83 ec 28             	sub    $0x28,%esp
	void* vaddr = 0;
  1054a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32_t i = 0;
  1054b0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32_t c = 0;
  1054b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  1054be:	8b 45 08             	mov    0x8(%ebp),%eax
  1054c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1054c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1054c9:	eb 46                	jmp    105511 <vmm_alloc_in_range+0x6e>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1054cb:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  1054d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1054d3:	c1 ea 0c             	shr    $0xc,%edx
  1054d6:	c1 e2 02             	shl    $0x2,%edx
  1054d9:	01 d0                	add    %edx,%eax
  1054db:	8b 00                	mov    (%eax),%eax
  1054dd:	25 01 02 00 00       	and    $0x201,%eax
  1054e2:	3d 00 02 00 00       	cmp    $0x200,%eax
  1054e7:	75 1a                	jne    105503 <vmm_alloc_in_range+0x60>
				== PT_ALLOCATABLE) {
			if (c == 0)
  1054e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1054ed:	75 06                	jne    1054f5 <vmm_alloc_in_range+0x52>
				vaddr = (void*) i;
  1054ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1054f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
			c++;
  1054f5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
			if (c >= cont)
  1054f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1054fc:	3b 45 14             	cmp    0x14(%ebp),%eax
  1054ff:	72 09                	jb     10550a <vmm_alloc_in_range+0x67>
				break;
  105501:	eb 16                	jmp    105519 <vmm_alloc_in_range+0x76>
		} else {
			c = 0;
  105503:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10550a:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  105511:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105514:	3b 45 0c             	cmp    0xc(%ebp),%eax
  105517:	72 b2                	jb     1054cb <vmm_alloc_in_range+0x28>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  105519:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	while (c--) {
  105520:	eb 2d                	jmp    10554f <vmm_alloc_in_range+0xac>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  105522:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  105526:	75 05                	jne    10552d <vmm_alloc_in_range+0x8a>
  105528:	8b 45 10             	mov    0x10(%ebp),%eax
  10552b:	eb 05                	jmp    105532 <vmm_alloc_in_range+0x8f>
  10552d:	b8 00 00 00 00       	mov    $0x0,%eax
  105532:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105535:	89 d1                	mov    %edx,%ecx
  105537:	c1 e1 0c             	shl    $0xc,%ecx
  10553a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10553d:	01 ca                	add    %ecx,%edx
  10553f:	89 44 24 04          	mov    %eax,0x4(%esp)
  105543:	89 14 24             	mov    %edx,(%esp)
  105546:	e8 c2 00 00 00       	call   10560d <vmm_alloc_addr>
		off++;
  10554b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
		}
	}

	uint32_t off = 0;

	while (c--) {
  10554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105552:	8d 50 ff             	lea    -0x1(%eax),%edx
  105555:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105558:	85 c0                	test   %eax,%eax
  10555a:	75 c6                	jne    105522 <vmm_alloc_in_range+0x7f>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
		off++;
	}

	return vaddr;
  10555c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10555f:	c9                   	leave  
  105560:	c3                   	ret    

00105561 <vmm_alloc_ucont>:

void* vmm_alloc_ucont(uint32_t cont) {
  105561:	55                   	push   %ebp
  105562:	89 e5                	mov    %esp,%ebp
  105564:	83 ec 18             	sub    $0x18,%esp
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  105567:	8b 45 08             	mov    0x8(%ebp),%eax
  10556a:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10556e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105575:	00 
  105576:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10557d:	ff 
  10557e:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  105585:	e8 19 ff ff ff       	call   1054a3 <vmm_alloc_in_range>
}
  10558a:	c9                   	leave  
  10558b:	c3                   	ret    

0010558c <vmm_alloc_user>:

void* vmm_alloc_user(uint32_t* retpaddr) {
  10558c:	55                   	push   %ebp
  10558d:	89 e5                	mov    %esp,%ebp
  10558f:	83 ec 18             	sub    $0x18,%esp
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  105592:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105599:	00 
  10559a:	8b 45 08             	mov    0x8(%ebp),%eax
  10559d:	89 44 24 08          	mov    %eax,0x8(%esp)
  1055a1:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1055a8:	ff 
  1055a9:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1055b0:	e8 ee fe ff ff       	call   1054a3 <vmm_alloc_in_range>
}
  1055b5:	c9                   	leave  
  1055b6:	c3                   	ret    

001055b7 <vmm_alloc_cont>:

void* vmm_alloc_cont(uint32_t cont) {
  1055b7:	55                   	push   %ebp
  1055b8:	89 e5                	mov    %esp,%ebp
  1055ba:	83 ec 18             	sub    $0x18,%esp
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  1055bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1055c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1055c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1055cb:	00 
  1055cc:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  1055d3:	20 
  1055d4:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1055db:	e8 c3 fe ff ff       	call   1054a3 <vmm_alloc_in_range>
}
  1055e0:	c9                   	leave  
  1055e1:	c3                   	ret    

001055e2 <vmm_alloc>:

void* vmm_alloc(uint32_t* retpaddr) {
  1055e2:	55                   	push   %ebp
  1055e3:	89 e5                	mov    %esp,%ebp
  1055e5:	83 ec 18             	sub    $0x18,%esp
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  1055e8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1055ef:	00 
  1055f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1055f3:	89 44 24 08          	mov    %eax,0x8(%esp)
  1055f7:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  1055fe:	20 
  1055ff:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  105606:	e8 98 fe ff ff       	call   1054a3 <vmm_alloc_in_range>
}
  10560b:	c9                   	leave  
  10560c:	c3                   	ret    

0010560d <vmm_alloc_addr>:

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  10560d:	55                   	push   %ebp
  10560e:	89 e5                	mov    %esp,%ebp
  105610:	83 ec 28             	sub    $0x28,%esp
	if (reqvaddr == 0) {
  105613:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  105617:	75 25                	jne    10563e <vmm_alloc_addr+0x31>
		kprintf(
  105619:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105620:	00 
  105621:	8b 45 08             	mov    0x8(%ebp),%eax
  105624:	89 44 24 04          	mov    %eax,0x4(%esp)
  105628:	c7 04 24 40 79 10 00 	movl   $0x107940,(%esp)
  10562f:	e8 6b af ff ff       	call   10059f <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  105634:	b8 00 00 00 00       	mov    $0x0,%eax
  105639:	e9 81 00 00 00       	jmp    1056bf <vmm_alloc_addr+0xb2>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  10563e:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  105643:	8b 55 08             	mov    0x8(%ebp),%edx
  105646:	c1 ea 0c             	shr    $0xc,%edx
  105649:	c1 e2 02             	shl    $0x2,%edx
  10564c:	01 d0                	add    %edx,%eax
  10564e:	8b 00                	mov    (%eax),%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
  105650:	25 01 02 00 00       	and    $0x201,%eax
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  105655:	3d 00 02 00 00       	cmp    $0x200,%eax
  10565a:	74 30                	je     10568c <vmm_alloc_addr+0x7f>
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
  10565c:	a1 fc 62 10 00       	mov    0x1062fc,%eax
  105661:	8b 55 08             	mov    0x8(%ebp),%edx
  105664:	c1 ea 0c             	shr    $0xc,%edx
  105667:	c1 e2 02             	shl    $0x2,%edx
  10566a:	01 d0                	add    %edx,%eax
		return 0;
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  10566c:	8b 00                	mov    (%eax),%eax
  10566e:	89 44 24 08          	mov    %eax,0x8(%esp)
  105672:	8b 45 08             	mov    0x8(%ebp),%eax
  105675:	89 44 24 04          	mov    %eax,0x4(%esp)
  105679:	c7 04 24 40 79 10 00 	movl   $0x107940,(%esp)
  105680:	e8 1a af ff ff       	call   10059f <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  105685:	b8 00 00 00 00       	mov    $0x0,%eax
  10568a:	eb 33                	jmp    1056bf <vmm_alloc_addr+0xb2>
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  10568c:	e8 19 ca ff ff       	call   1020aa <pmm_alloc>
  105691:	89 45 f4             	mov    %eax,-0xc(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  105694:	8b 45 08             	mov    0x8(%ebp),%eax
  105697:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10569e:	00 
  10569f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1056a2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1056a6:	89 04 24             	mov    %eax,(%esp)
  1056a9:	e8 c7 fc ff ff       	call   105375 <map_address_active>

	if (retpaddr != 0)
  1056ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1056b2:	74 08                	je     1056bc <vmm_alloc_addr+0xaf>
		*retpaddr = paddr;
  1056b4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1056ba:	89 10                	mov    %edx,(%eax)

	return reqvaddr;
  1056bc:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1056bf:	c9                   	leave  
  1056c0:	c3                   	ret    

001056c1 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1056c1:	55                   	push   %ebp
  1056c2:	89 e5                	mov    %esp,%ebp
	active_pagedir = pdpaddr;
  1056c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1056c7:	a3 84 95 12 00       	mov    %eax,0x129584
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  1056cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1056cf:	0f 22 d8             	mov    %eax,%cr3
}
  1056d2:	5d                   	pop    %ebp
  1056d3:	c3                   	ret    

001056d4 <vmm_init>:

uint32_t vmm_init(void) {
  1056d4:	55                   	push   %ebp
  1056d5:	89 e5                	mov    %esp,%ebp
  1056d7:	53                   	push   %ebx
  1056d8:	83 ec 34             	sub    $0x34,%esp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  1056db:	e8 ca c9 ff ff       	call   1020aa <pmm_alloc>
  1056e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  1056e3:	e8 c2 c9 ff ff       	call   1020aa <pmm_alloc>
  1056e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1056eb:	89 02                	mov    %eax,(%edx)

	for (i = 0; i < 1024; i++) {
  1056ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1056f4:	e9 d2 00 00 00       	jmp    1057cb <vmm_init+0xf7>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  1056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1056fc:	8b 00                	mov    (%eax),%eax
  1056fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105701:	c1 e2 02             	shl    $0x2,%edx
  105704:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  105707:	e8 9e c9 ff ff       	call   1020aa <pmm_alloc>
  10570c:	89 03                	mov    %eax,(%ebx)
		if (i < PMEM_TABLES) {
  10570e:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
  105712:	77 19                	ja     10572d <vmm_init+0x59>
			kernel_pagetables[i] = context->pagedir[i];
  105714:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105717:	8b 00                	mov    (%eax),%eax
  105719:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10571c:	c1 e2 02             	shl    $0x2,%edx
  10571f:	01 d0                	add    %edx,%eax
  105721:	8b 10                	mov    (%eax),%edx
  105723:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105726:	89 14 85 00 9c 18 00 	mov    %edx,0x189c00(,%eax,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  10572d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105730:	8b 00                	mov    (%eax),%eax
  105732:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105735:	c1 e2 02             	shl    $0x2,%edx
  105738:	01 c2                	add    %eax,%edx
  10573a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10573d:	8b 00                	mov    (%eax),%eax
  10573f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105742:	c1 e1 02             	shl    $0x2,%ecx
  105745:	01 c8                	add    %ecx,%eax
  105747:	8b 00                	mov    (%eax),%eax
  105749:	83 c8 07             	or     $0x7,%eax
  10574c:	89 02                	mov    %eax,(%edx)

		for (i2 = 0; i2 < 1024; i2++) {
  10574e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105755:	eb 67                	jmp    1057be <vmm_init+0xea>
			uint32_t vaddr = (i << 22) + (i2 << 12);
  105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10575a:	c1 e0 16             	shl    $0x16,%eax
  10575d:	89 c2                	mov    %eax,%edx
  10575f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105762:	c1 e0 0c             	shl    $0xc,%eax
  105765:	01 d0                	add    %edx,%eax
  105767:	89 45 e8             	mov    %eax,-0x18(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  10576a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10576d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  105774:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105777:	8b 00                	mov    (%eax),%eax
  105779:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10577c:	c1 e2 02             	shl    $0x2,%edx
  10577f:	01 d0                	add    %edx,%eax
  105781:	8b 00                	mov    (%eax),%eax
  105783:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105788:	01 c8                	add    %ecx,%eax
  10578a:	89 c1                	mov    %eax,%ecx
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
  10578c:	81 7d e8 00 10 40 01 	cmpl   $0x1401000,-0x18(%ebp)
  105793:	76 07                	jbe    10579c <vmm_init+0xc8>
  105795:	ba 00 02 00 00       	mov    $0x200,%edx
  10579a:	eb 05                	jmp    1057a1 <vmm_init+0xcd>
  10579c:	ba 00 00 00 00       	mov    $0x0,%edx
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
  1057a1:	81 7d e8 00 10 40 01 	cmpl   $0x1401000,-0x18(%ebp)
  1057a8:	76 07                	jbe    1057b1 <vmm_init+0xdd>
  1057aa:	b8 04 00 00 00       	mov    $0x4,%eax
  1057af:	eb 05                	jmp    1057b6 <vmm_init+0xe2>
  1057b1:	b8 00 00 00 00       	mov    $0x0,%eax
  1057b6:	09 d0                	or     %edx,%eax
		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
			uint32_t vaddr = (i << 22) + (i2 << 12);

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  1057b8:	89 01                	mov    %eax,(%ecx)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  1057ba:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1057be:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  1057c5:	76 90                	jbe    105757 <vmm_init+0x83>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  1057c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1057cb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  1057d2:	0f 86 21 ff ff ff    	jbe    1056f9 <vmm_init+0x25>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  1057d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1057df:	eb 4b                	jmp    10582c <vmm_init+0x158>
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  1057e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1057e4:	8b 00                	mov    (%eax),%eax
  1057e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1057e9:	c1 e2 02             	shl    $0x2,%edx
  1057ec:	01 d0                	add    %edx,%eax
  1057ee:	8b 00                	mov    (%eax),%eax
  1057f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1057f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
  1057f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1057fb:	c1 e0 0c             	shl    $0xc,%eax
  1057fe:	89 c2                	mov    %eax,%edx
  105800:	a1 fc 62 10 00       	mov    0x1062fc,%eax
		}
	}

	for (i = 0; i < 1024; i++) {
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
  105805:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  105808:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10580b:	8b 00                	mov    (%eax),%eax
  10580d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105814:	00 
  105815:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  105818:	89 54 24 08          	mov    %edx,0x8(%esp)
  10581c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105820:	89 04 24             	mov    %eax,(%esp)
  105823:	e8 bd fa ff ff       	call   1052e5 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  105828:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10582c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  105833:	76 ac                	jbe    1057e1 <vmm_init+0x10d>
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  105835:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105838:	a1 00 63 10 00       	mov    0x106300,%eax
  10583d:	89 c2                	mov    %eax,%edx
  10583f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105842:	8b 00                	mov    (%eax),%eax
  105844:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10584b:	00 
  10584c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  105850:	89 54 24 04          	mov    %edx,0x4(%esp)
  105854:	89 04 24             	mov    %eax,(%esp)
  105857:	e8 89 fa ff ff       	call   1052e5 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  10585c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
  105863:	eb 2a                	jmp    10588f <vmm_init+0x1bb>
		map_address_context(context->pagedir, i, i, 0);
  105865:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105868:	8b 00                	mov    (%eax),%eax
  10586a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105871:	00 
  105872:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105875:	89 54 24 08          	mov    %edx,0x8(%esp)
  105879:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10587c:	89 54 24 04          	mov    %edx,0x4(%esp)
  105880:	89 04 24             	mov    %eax,(%esp)
  105883:	e8 5d fa ff ff       	call   1052e5 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105888:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  10588f:	b8 00 a0 18 00       	mov    $0x18a000,%eax
  105894:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  105897:	72 cc                	jb     105865 <vmm_init+0x191>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  105899:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10589c:	8b 00                	mov    (%eax),%eax
  10589e:	89 04 24             	mov    %eax,(%esp)
  1058a1:	e8 1b fe ff ff       	call   1056c1 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  1058a6:	0f 20 c0             	mov    %cr0,%eax
  1058a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	cr0 |= (1 << 31);
  1058ac:	81 4d e0 00 00 00 80 	orl    $0x80000000,-0x20(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  1058b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1058b6:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  1058b9:	a1 00 63 10 00       	mov    0x106300,%eax
  1058be:	8b 00                	mov    (%eax),%eax
}
  1058c0:	83 c4 34             	add    $0x34,%esp
  1058c3:	5b                   	pop    %ebx
  1058c4:	5d                   	pop    %ebp
  1058c5:	c3                   	ret    
