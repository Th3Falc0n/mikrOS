
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <intr_stub_0-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 6a                	in     $0x6a,%al

0010000c <intr_stub_0>:
  10000c:	6a 00                	push   $0x0
  10000e:	6a 00                	push   $0x0
  100010:	e9 eb 00 00 00       	jmp    100100 <intr_common_handler>

00100015 <intr_stub_1>:
  100015:	6a 00                	push   $0x0
  100017:	6a 01                	push   $0x1
  100019:	e9 e2 00 00 00       	jmp    100100 <intr_common_handler>

0010001e <intr_stub_2>:
  10001e:	6a 00                	push   $0x0
  100020:	6a 02                	push   $0x2
  100022:	e9 d9 00 00 00       	jmp    100100 <intr_common_handler>

00100027 <intr_stub_3>:
  100027:	6a 00                	push   $0x0
  100029:	6a 03                	push   $0x3
  10002b:	e9 d0 00 00 00       	jmp    100100 <intr_common_handler>

00100030 <intr_stub_4>:
  100030:	6a 00                	push   $0x0
  100032:	6a 04                	push   $0x4
  100034:	e9 c7 00 00 00       	jmp    100100 <intr_common_handler>

00100039 <intr_stub_5>:
  100039:	6a 00                	push   $0x0
  10003b:	6a 05                	push   $0x5
  10003d:	e9 be 00 00 00       	jmp    100100 <intr_common_handler>

00100042 <intr_stub_6>:
  100042:	6a 00                	push   $0x0
  100044:	6a 06                	push   $0x6
  100046:	e9 b5 00 00 00       	jmp    100100 <intr_common_handler>

0010004b <intr_stub_7>:
  10004b:	6a 00                	push   $0x0
  10004d:	6a 07                	push   $0x7
  10004f:	e9 ac 00 00 00       	jmp    100100 <intr_common_handler>

00100054 <intr_stub_8>:
  100054:	6a 08                	push   $0x8
  100056:	e9 a5 00 00 00       	jmp    100100 <intr_common_handler>

0010005b <intr_stub_9>:
  10005b:	6a 00                	push   $0x0
  10005d:	6a 09                	push   $0x9
  10005f:	e9 9c 00 00 00       	jmp    100100 <intr_common_handler>

00100064 <intr_stub_10>:
  100064:	6a 0a                	push   $0xa
  100066:	e9 95 00 00 00       	jmp    100100 <intr_common_handler>

0010006b <intr_stub_11>:
  10006b:	6a 0b                	push   $0xb
  10006d:	e9 8e 00 00 00       	jmp    100100 <intr_common_handler>

00100072 <intr_stub_12>:
  100072:	6a 0c                	push   $0xc
  100074:	e9 87 00 00 00       	jmp    100100 <intr_common_handler>

00100079 <intr_stub_13>:
  100079:	6a 0d                	push   $0xd
  10007b:	e9 80 00 00 00       	jmp    100100 <intr_common_handler>

00100080 <intr_stub_14>:
  100080:	6a 0e                	push   $0xe
  100082:	eb 7c                	jmp    100100 <intr_common_handler>

00100084 <intr_stub_15>:
  100084:	6a 00                	push   $0x0
  100086:	6a 0f                	push   $0xf
  100088:	eb 76                	jmp    100100 <intr_common_handler>

0010008a <intr_stub_16>:
  10008a:	6a 00                	push   $0x0
  10008c:	6a 10                	push   $0x10
  10008e:	eb 70                	jmp    100100 <intr_common_handler>

00100090 <intr_stub_17>:
  100090:	6a 11                	push   $0x11
  100092:	eb 6c                	jmp    100100 <intr_common_handler>

00100094 <intr_stub_18>:
  100094:	6a 00                	push   $0x0
  100096:	6a 12                	push   $0x12
  100098:	eb 66                	jmp    100100 <intr_common_handler>

0010009a <intr_stub_32>:
  10009a:	6a 00                	push   $0x0
  10009c:	6a 20                	push   $0x20
  10009e:	eb 60                	jmp    100100 <intr_common_handler>

001000a0 <intr_stub_33>:
  1000a0:	6a 00                	push   $0x0
  1000a2:	6a 21                	push   $0x21
  1000a4:	eb 5a                	jmp    100100 <intr_common_handler>

001000a6 <intr_stub_34>:
  1000a6:	6a 00                	push   $0x0
  1000a8:	6a 22                	push   $0x22
  1000aa:	eb 54                	jmp    100100 <intr_common_handler>

001000ac <intr_stub_35>:
  1000ac:	6a 00                	push   $0x0
  1000ae:	6a 23                	push   $0x23
  1000b0:	eb 4e                	jmp    100100 <intr_common_handler>

001000b2 <intr_stub_36>:
  1000b2:	6a 00                	push   $0x0
  1000b4:	6a 24                	push   $0x24
  1000b6:	eb 48                	jmp    100100 <intr_common_handler>

001000b8 <intr_stub_37>:
  1000b8:	6a 00                	push   $0x0
  1000ba:	6a 25                	push   $0x25
  1000bc:	eb 42                	jmp    100100 <intr_common_handler>

001000be <intr_stub_38>:
  1000be:	6a 00                	push   $0x0
  1000c0:	6a 26                	push   $0x26
  1000c2:	eb 3c                	jmp    100100 <intr_common_handler>

001000c4 <intr_stub_39>:
  1000c4:	6a 00                	push   $0x0
  1000c6:	6a 27                	push   $0x27
  1000c8:	eb 36                	jmp    100100 <intr_common_handler>

001000ca <intr_stub_40>:
  1000ca:	6a 00                	push   $0x0
  1000cc:	6a 28                	push   $0x28
  1000ce:	eb 30                	jmp    100100 <intr_common_handler>

001000d0 <intr_stub_41>:
  1000d0:	6a 00                	push   $0x0
  1000d2:	6a 29                	push   $0x29
  1000d4:	eb 2a                	jmp    100100 <intr_common_handler>

001000d6 <intr_stub_42>:
  1000d6:	6a 00                	push   $0x0
  1000d8:	6a 2a                	push   $0x2a
  1000da:	eb 24                	jmp    100100 <intr_common_handler>

001000dc <intr_stub_43>:
  1000dc:	6a 00                	push   $0x0
  1000de:	6a 2b                	push   $0x2b
  1000e0:	eb 1e                	jmp    100100 <intr_common_handler>

001000e2 <intr_stub_44>:
  1000e2:	6a 00                	push   $0x0
  1000e4:	6a 2c                	push   $0x2c
  1000e6:	eb 18                	jmp    100100 <intr_common_handler>

001000e8 <intr_stub_45>:
  1000e8:	6a 00                	push   $0x0
  1000ea:	6a 2d                	push   $0x2d
  1000ec:	eb 12                	jmp    100100 <intr_common_handler>

001000ee <intr_stub_46>:
  1000ee:	6a 00                	push   $0x0
  1000f0:	6a 2e                	push   $0x2e
  1000f2:	eb 0c                	jmp    100100 <intr_common_handler>

001000f4 <intr_stub_47>:
  1000f4:	6a 00                	push   $0x0
  1000f6:	6a 2f                	push   $0x2f
  1000f8:	eb 06                	jmp    100100 <intr_common_handler>

001000fa <intr_stub_48>:
  1000fa:	6a 00                	push   $0x0
  1000fc:	6a 30                	push   $0x30
  1000fe:	eb 00                	jmp    100100 <intr_common_handler>

00100100 <intr_common_handler>:
  100100:	55                   	push   %ebp
  100101:	57                   	push   %edi
  100102:	56                   	push   %esi
  100103:	52                   	push   %edx
  100104:	51                   	push   %ecx
  100105:	53                   	push   %ebx
  100106:	50                   	push   %eax
  100107:	54                   	push   %esp
  100108:	66 b8 10 00          	mov    $0x10,%ax
  10010c:	8e d8                	mov    %eax,%ds
  10010e:	8e c0                	mov    %eax,%es
  100110:	e8 8c 0e 00 00       	call   100fa1 <handle_interrupt>
  100115:	89 c4                	mov    %eax,%esp
  100117:	66 b8 23 00          	mov    $0x23,%ax
  10011b:	8e d8                	mov    %eax,%ds
  10011d:	8e c0                	mov    %eax,%es
  10011f:	58                   	pop    %eax
  100120:	5b                   	pop    %ebx
  100121:	59                   	pop    %ecx
  100122:	5a                   	pop    %edx
  100123:	5e                   	pop    %esi
  100124:	5f                   	pop    %edi
  100125:	5d                   	pop    %ebp
  100126:	83 c4 08             	add    $0x8,%esp
  100129:	cf                   	iret   
	...

0010012c <_start>:
  10012c:	bc 00 80 11 00       	mov    $0x118000,%esp
  100131:	53                   	push   %ebx
  100132:	e8 05 00 00 00       	call   10013c <init>

00100137 <_stop>:
  100137:	fa                   	cli    
  100138:	f4                   	hlt    
  100139:	eb fc                	jmp    100137 <_stop>
	...

0010013c <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  10013c:	55                   	push   %ebp
  10013d:	89 e5                	mov    %esp,%ebp
  10013f:	83 ec 08             	sub    $0x8,%esp
	clrscr();
  100142:	e8 c9 03 00 00       	call   100510 <clrscr>
	pmm_init(mb_info);
  100147:	83 ec 0c             	sub    $0xc,%esp
  10014a:	ff 75 08             	pushl  0x8(%ebp)
  10014d:	e8 92 1b 00 00       	call   101ce4 <pmm_init>
  100152:	83 c4 10             	add    $0x10,%esp

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100155:	83 ec 08             	sub    $0x8,%esp
  100158:	68 00 70 10 00       	push   $0x107000
  10015d:	68 14 70 10 00       	push   $0x107014
  100162:	e8 06 04 00 00       	call   10056d <kprintf>
  100167:	83 c4 10             	add    $0x10,%esp
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10016a:	83 ec 0c             	sub    $0xc,%esp
  10016d:	68 38 70 10 00       	push   $0x107038
  100172:	e8 f6 03 00 00       	call   10056d <kprintf>
  100177:	83 c4 10             	add    $0x10,%esp

	kprintf("Initializing GDT...\n");
  10017a:	83 ec 0c             	sub    $0xc,%esp
  10017d:	68 77 70 10 00       	push   $0x107077
  100182:	e8 e6 03 00 00       	call   10056d <kprintf>
  100187:	83 c4 10             	add    $0x10,%esp

	init_gdt();
  10018a:	e8 67 07 00 00       	call   1008f6 <init_gdt>

	kprintf("Initializing IDT...\n");
  10018f:	83 ec 0c             	sub    $0xc,%esp
  100192:	68 8c 70 10 00       	push   $0x10708c
  100197:	e8 d1 03 00 00       	call   10056d <kprintf>
  10019c:	83 c4 10             	add    $0x10,%esp

	init_idt();
  10019f:	e8 eb 08 00 00       	call   100a8f <init_idt>

	kprintf("Initializing Kernel...\n");
  1001a4:	83 ec 0c             	sub    $0xc,%esp
  1001a7:	68 a1 70 10 00       	push   $0x1070a1
  1001ac:	e8 bc 03 00 00       	call   10056d <kprintf>
  1001b1:	83 c4 10             	add    $0x10,%esp

	pmm_print_stats();
  1001b4:	e8 b8 19 00 00       	call   101b71 <pmm_print_stats>

	kernel_main(mb_info);
  1001b9:	83 ec 0c             	sub    $0xc,%esp
  1001bc:	ff 75 08             	pushl  0x8(%ebp)
  1001bf:	e8 44 17 00 00       	call   101908 <kernel_main>
  1001c4:	83 c4 10             	add    $0x10,%esp

	return;
}
  1001c7:	c9                   	leave  
  1001c8:	c3                   	ret    
  1001c9:	00 00                	add    %al,(%eax)
	...

001001cc <in_cod>:
#include "console.h"
#include "gdt.h"
#include "idt.h"
#include "kernel.h"
#include "multiboot.h"
  1001cc:	55                   	push   %ebp
  1001cd:	89 e5                	mov    %esp,%ebp
#include "pmm.h"
  1001cf:	a1 00 80 12 00       	mov    0x128000,%eax
#include "vfs.h"
  1001d4:	5d                   	pop    %ebp
  1001d5:	c3                   	ret    

001001d6 <show_cod>:

#define _VERSION "alphaUSpaceDev 1.02"
  1001d6:	55                   	push   %ebp
  1001d7:	89 e5                	mov    %esp,%ebp
  1001d9:	83 ec 08             	sub    $0x8,%esp

  1001dc:	c7 05 00 80 12 00 01 	movl   $0x1,0x128000
  1001e3:	00 00 00 
	kprintf("Initializing Kernel...\n");

	pmm_print_stats();

	kernel_main(mb_info);

  1001e6:	83 ec 0c             	sub    $0xc,%esp
  1001e9:	6a 04                	push   $0x4
  1001eb:	e8 67 03 00 00       	call   100557 <setclr>
  1001f0:	83 c4 10             	add    $0x10,%esp
	return;
  1001f3:	83 ec 0c             	sub    $0xc,%esp
  1001f6:	ff 75 0c             	pushl  0xc(%ebp)
  1001f9:	e8 6f 03 00 00       	call   10056d <kprintf>
  1001fe:	83 c4 10             	add    $0x10,%esp
}
  100201:	8b 45 08             	mov    0x8(%ebp),%eax
  100204:	8b 50 20             	mov    0x20(%eax),%edx
  100207:	8b 45 08             	mov    0x8(%ebp),%eax
  10020a:	8b 40 1c             	mov    0x1c(%eax),%eax
  10020d:	83 ec 04             	sub    $0x4,%esp
  100210:	52                   	push   %edx
  100211:	50                   	push   %eax
  100212:	68 bc 70 10 00       	push   $0x1070bc
  100217:	e8 51 03 00 00       	call   10056d <kprintf>
  10021c:	83 c4 10             	add    $0x10,%esp
  10021f:	83 ec 0c             	sub    $0xc,%esp
  100222:	ff 75 08             	pushl  0x8(%ebp)
  100225:	e8 07 00 00 00       	call   100231 <show_dump>
  10022a:	83 c4 10             	add    $0x10,%esp
  10022d:	fa                   	cli    
  10022e:	f4                   	hlt    
  10022f:	eb fc                	jmp    10022d <show_cod+0x57>

00100231 <show_dump>:
  100231:	55                   	push   %ebp
  100232:	89 e5                	mov    %esp,%ebp
  100234:	53                   	push   %ebx
  100235:	83 ec 14             	sub    $0x14,%esp
  100238:	8b 45 08             	mov    0x8(%ebp),%eax
  10023b:	8b 58 0c             	mov    0xc(%eax),%ebx
  10023e:	8b 45 08             	mov    0x8(%ebp),%eax
  100241:	8b 48 08             	mov    0x8(%eax),%ecx
  100244:	8b 45 08             	mov    0x8(%ebp),%eax
  100247:	8b 50 04             	mov    0x4(%eax),%edx
  10024a:	8b 45 08             	mov    0x8(%ebp),%eax
  10024d:	8b 00                	mov    (%eax),%eax
  10024f:	83 ec 0c             	sub    $0xc,%esp
  100252:	53                   	push   %ebx
  100253:	51                   	push   %ecx
  100254:	52                   	push   %edx
  100255:	50                   	push   %eax
  100256:	68 e4 70 10 00       	push   $0x1070e4
  10025b:	e8 0d 03 00 00       	call   10056d <kprintf>
  100260:	83 c4 20             	add    $0x20,%esp
  100263:	8b 45 08             	mov    0x8(%ebp),%eax
  100266:	8b 58 24             	mov    0x24(%eax),%ebx
  100269:	8b 45 08             	mov    0x8(%ebp),%eax
  10026c:	8b 48 18             	mov    0x18(%eax),%ecx
  10026f:	8b 45 08             	mov    0x8(%ebp),%eax
  100272:	8b 50 14             	mov    0x14(%eax),%edx
  100275:	8b 45 08             	mov    0x8(%ebp),%eax
  100278:	8b 40 10             	mov    0x10(%eax),%eax
  10027b:	83 ec 0c             	sub    $0xc,%esp
  10027e:	53                   	push   %ebx
  10027f:	51                   	push   %ecx
  100280:	52                   	push   %edx
  100281:	50                   	push   %eax
  100282:	68 08 71 10 00       	push   $0x107108
  100287:	e8 e1 02 00 00       	call   10056d <kprintf>
  10028c:	83 c4 20             	add    $0x20,%esp
  10028f:	8b 45 08             	mov    0x8(%ebp),%eax
  100292:	8b 58 34             	mov    0x34(%eax),%ebx
  100295:	8b 45 08             	mov    0x8(%ebp),%eax
  100298:	8b 48 30             	mov    0x30(%eax),%ecx
  10029b:	8b 45 08             	mov    0x8(%ebp),%eax
  10029e:	8b 50 2c             	mov    0x2c(%eax),%edx
  1002a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1002a4:	8b 40 28             	mov    0x28(%eax),%eax
  1002a7:	83 ec 0c             	sub    $0xc,%esp
  1002aa:	53                   	push   %ebx
  1002ab:	51                   	push   %ecx
  1002ac:	52                   	push   %edx
  1002ad:	50                   	push   %eax
  1002ae:	68 2c 71 10 00       	push   $0x10712c
  1002b3:	e8 b5 02 00 00       	call   10056d <kprintf>
  1002b8:	83 c4 20             	add    $0x20,%esp
  1002bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1002c2:	0f 20 d0             	mov    %cr2,%eax
  1002c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1002c8:	83 ec 08             	sub    $0x8,%esp
  1002cb:	ff 75 f4             	pushl  -0xc(%ebp)
  1002ce:	68 4e 71 10 00       	push   $0x10714e
  1002d3:	e8 95 02 00 00       	call   10056d <kprintf>
  1002d8:	83 c4 10             	add    $0x10,%esp
  1002db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1002de:	c9                   	leave  
  1002df:	c3                   	ret    

001002e0 <kputc>:
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
	clrscr();
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1002e9:	88 45 e4             	mov    %al,-0x1c(%ebp)
	pmm_init(mb_info);
  1002ec:	e8 db fe ff ff       	call   1001cc <in_cod>
  1002f1:	85 c0                	test   %eax,%eax
  1002f3:	75 79                	jne    10036e <kputc+0x8e>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");

  1002f5:	e8 d3 28 00 00       	call   102bcd <get_current_task>
  1002fa:	85 c0                	test   %eax,%eax
  1002fc:	74 61                	je     10035f <kputc+0x7f>
	kprintf("Initializing GDT...\n");
  1002fe:	e8 ca 28 00 00       	call   102bcd <get_current_task>
  100303:	8b 40 30             	mov    0x30(%eax),%eax
  100306:	85 c0                	test   %eax,%eax
  100308:	74 55                	je     10035f <kputc+0x7f>

  10030a:	c6 45 f3 11          	movb   $0x11,-0xd(%ebp)
  10030e:	e8 ba 28 00 00       	call   102bcd <get_current_task>
  100313:	8b 40 30             	mov    0x30(%eax),%eax
  100316:	6a 01                	push   $0x1
  100318:	6a 01                	push   $0x1
  10031a:	8d 55 f3             	lea    -0xd(%ebp),%edx
  10031d:	52                   	push   %edx
  10031e:	50                   	push   %eax
  10031f:	e8 91 40 00 00       	call   1043b5 <vfs_write>
  100324:	83 c4 10             	add    $0x10,%esp
	init_gdt();
  100327:	e8 a1 28 00 00       	call   102bcd <get_current_task>
  10032c:	8b 40 30             	mov    0x30(%eax),%eax
  10032f:	6a 01                	push   $0x1
  100331:	6a 01                	push   $0x1
  100333:	68 00 60 10 00       	push   $0x106000
  100338:	50                   	push   %eax
  100339:	e8 77 40 00 00       	call   1043b5 <vfs_write>
  10033e:	83 c4 10             	add    $0x10,%esp

  100341:	e8 87 28 00 00       	call   102bcd <get_current_task>
  100346:	8b 40 30             	mov    0x30(%eax),%eax
  100349:	6a 01                	push   $0x1
  10034b:	6a 01                	push   $0x1
  10034d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
  100350:	52                   	push   %edx
  100351:	50                   	push   %eax
  100352:	e8 5e 40 00 00       	call   1043b5 <vfs_write>
  100357:	83 c4 10             	add    $0x10,%esp
	kprintf("Initializing IDT...\n");

  10035a:	e9 1a 01 00 00       	jmp    100479 <kputc+0x199>
	init_idt();

	kprintf("Initializing Kernel...\n");

  10035f:	e8 6a 26 00 00       	call   1029ce <ramfs_vga_writers>
  100364:	85 c0                	test   %eax,%eax
  100366:	0f 85 09 01 00 00    	jne    100475 <kputc+0x195>
  10036c:	eb 01                	jmp    10036f <kputc+0x8f>
#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
	clrscr();
	pmm_init(mb_info);

  10036e:	90                   	nop    
	pmm_print_stats();

	kernel_main(mb_info);

	return;
}
  10036f:	8a 45 e4             	mov    -0x1c(%ebp),%al
  100372:	3c 0a                	cmp    $0xa,%al
  100374:	74 0a                	je     100380 <kputc+0xa0>
  100376:	a1 04 80 12 00       	mov    0x128004,%eax
  10037b:	83 f8 4f             	cmp    $0x4f,%eax
  10037e:	7e 15                	jle    100395 <kputc+0xb5>
  100380:	c7 05 04 80 12 00 00 	movl   $0x0,0x128004
  100387:	00 00 00 
  10038a:	a1 08 80 12 00       	mov    0x128008,%eax
  10038f:	40                   	inc    %eax
  100390:	a3 08 80 12 00       	mov    %eax,0x128008
  100395:	8a 45 e4             	mov    -0x1c(%ebp),%al
  100398:	3c 0a                	cmp    $0xa,%al
  10039a:	0f 84 d8 00 00 00    	je     100478 <kputc+0x198>
  1003a0:	a1 08 80 12 00       	mov    0x128008,%eax
  1003a5:	83 f8 18             	cmp    $0x18,%eax
  1003a8:	7e 5c                	jle    100406 <kputc+0x126>
  1003aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1003b1:	eb 22                	jmp    1003d5 <kputc+0xf5>
  1003b3:	8b 15 04 60 10 00    	mov    0x106004,%edx
  1003b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003bc:	01 c2                	add    %eax,%edx
  1003be:	a1 04 60 10 00       	mov    0x106004,%eax
  1003c3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003c6:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  1003cc:	01 c8                	add    %ecx,%eax
  1003ce:	8a 00                	mov    (%eax),%al
  1003d0:	88 02                	mov    %al,(%edx)
  1003d2:	ff 45 f4             	incl   -0xc(%ebp)
  1003d5:	81 7d f4 ff 0e 00 00 	cmpl   $0xeff,-0xc(%ebp)
  1003dc:	7e d5                	jle    1003b3 <kputc+0xd3>
  1003de:	eb 12                	jmp    1003f2 <kputc+0x112>
  1003e0:	8b 15 04 60 10 00    	mov    0x106004,%edx
  1003e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003e9:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1003ec:	c6 00 00             	movb   $0x0,(%eax)
  1003ef:	ff 45 f4             	incl   -0xc(%ebp)
  1003f2:	81 7d f4 9f 0f 00 00 	cmpl   $0xf9f,-0xc(%ebp)
  1003f9:	7e e5                	jle    1003e0 <kputc+0x100>
  1003fb:	a1 08 80 12 00       	mov    0x128008,%eax
  100400:	48                   	dec    %eax
  100401:	a3 08 80 12 00       	mov    %eax,0x128008
  100406:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  10040c:	8b 15 08 80 12 00    	mov    0x128008,%edx
  100412:	89 d0                	mov    %edx,%eax
  100414:	c1 e0 02             	shl    $0x2,%eax
  100417:	01 d0                	add    %edx,%eax
  100419:	c1 e0 04             	shl    $0x4,%eax
  10041c:	89 c2                	mov    %eax,%edx
  10041e:	a1 04 80 12 00       	mov    0x128004,%eax
  100423:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100426:	01 c0                	add    %eax,%eax
  100428:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  10042b:	8a 45 e4             	mov    -0x1c(%ebp),%al
  10042e:	88 02                	mov    %al,(%edx)
  100430:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  100436:	8b 15 08 80 12 00    	mov    0x128008,%edx
  10043c:	89 d0                	mov    %edx,%eax
  10043e:	c1 e0 02             	shl    $0x2,%eax
  100441:	01 d0                	add    %edx,%eax
  100443:	c1 e0 04             	shl    $0x4,%eax
  100446:	89 c2                	mov    %eax,%edx
  100448:	a1 04 80 12 00       	mov    0x128004,%eax
  10044d:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100450:	01 c0                	add    %eax,%eax
  100452:	40                   	inc    %eax
  100453:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  100456:	a0 00 60 10 00       	mov    0x106000,%al
  10045b:	88 02                	mov    %al,(%edx)
  10045d:	a1 04 80 12 00       	mov    0x128004,%eax
  100462:	40                   	inc    %eax
  100463:	a3 04 80 12 00       	mov    %eax,0x128004
  100468:	a1 0c 80 12 00       	mov    0x12800c,%eax
  10046d:	40                   	inc    %eax
  10046e:	a3 0c 80 12 00       	mov    %eax,0x12800c
  100473:	eb 04                	jmp    100479 <kputc+0x199>

	init_idt();

	kprintf("Initializing Kernel...\n");

	pmm_print_stats();
  100475:	90                   	nop    
  100476:	eb 01                	jmp    100479 <kputc+0x199>
  100478:	90                   	nop    
  100479:	c9                   	leave  
  10047a:	c3                   	ret    

0010047b <kputs>:
  10047b:	55                   	push   %ebp
  10047c:	89 e5                	mov    %esp,%ebp
  10047e:	83 ec 08             	sub    $0x8,%esp
  100481:	eb 17                	jmp    10049a <kputs+0x1f>
  100483:	8b 45 08             	mov    0x8(%ebp),%eax
  100486:	8a 00                	mov    (%eax),%al
  100488:	0f be c0             	movsbl %al,%eax
  10048b:	ff 45 08             	incl   0x8(%ebp)
  10048e:	83 ec 0c             	sub    $0xc,%esp
  100491:	50                   	push   %eax
  100492:	e8 49 fe ff ff       	call   1002e0 <kputc>
  100497:	83 c4 10             	add    $0x10,%esp
  10049a:	8b 45 08             	mov    0x8(%ebp),%eax
  10049d:	8a 00                	mov    (%eax),%al
  10049f:	84 c0                	test   %al,%al
  1004a1:	75 e0                	jne    100483 <kputs+0x8>
  1004a3:	c9                   	leave  
  1004a4:	c3                   	ret    

001004a5 <kputn>:
  1004a5:	55                   	push   %ebp
  1004a6:	89 e5                	mov    %esp,%ebp
  1004a8:	83 ec 58             	sub    $0x58,%esp
  1004ab:	c7 45 f0 58 71 10 00 	movl   $0x107158,-0x10(%ebp)
  1004b2:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  1004b6:	7f 55                	jg     10050d <kputn+0x68>
  1004b8:	8d 45 af             	lea    -0x51(%ebp),%eax
  1004bb:	83 c0 40             	add    $0x40,%eax
  1004be:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1004c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004c4:	c6 00 00             	movb   $0x0,(%eax)
  1004c7:	ff 4d f4             	decl   -0xc(%ebp)
  1004ca:	8b 55 0c             	mov    0xc(%ebp),%edx
  1004cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d0:	89 d1                	mov    %edx,%ecx
  1004d2:	ba 00 00 00 00       	mov    $0x0,%edx
  1004d7:	f7 f1                	div    %ecx
  1004d9:	89 d0                	mov    %edx,%eax
  1004db:	03 45 f0             	add    -0x10(%ebp),%eax
  1004de:	8a 10                	mov    (%eax),%dl
  1004e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004e3:	88 10                	mov    %dl,(%eax)
  1004e5:	8b 55 0c             	mov    0xc(%ebp),%edx
  1004e8:	8b 45 08             	mov    0x8(%ebp),%eax
  1004eb:	89 d1                	mov    %edx,%ecx
  1004ed:	ba 00 00 00 00       	mov    $0x0,%edx
  1004f2:	f7 f1                	div    %ecx
  1004f4:	89 45 08             	mov    %eax,0x8(%ebp)
  1004f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1004fb:	75 ca                	jne    1004c7 <kputn+0x22>
  1004fd:	83 ec 0c             	sub    $0xc,%esp
  100500:	ff 75 f4             	pushl  -0xc(%ebp)
  100503:	e8 73 ff ff ff       	call   10047b <kputs>
  100508:	83 c4 10             	add    $0x10,%esp
  10050b:	eb 01                	jmp    10050e <kputn+0x69>
  10050d:	90                   	nop    
  10050e:	c9                   	leave  
  10050f:	c3                   	ret    

00100510 <clrscr>:
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	83 ec 10             	sub    $0x10,%esp
  100516:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10051d:	eb 12                	jmp    100531 <clrscr+0x21>
  10051f:	8b 15 04 60 10 00    	mov    0x106004,%edx
  100525:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100528:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10052b:	c6 00 00             	movb   $0x0,(%eax)
  10052e:	ff 45 fc             	incl   -0x4(%ebp)
  100531:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  100538:	7e e5                	jle    10051f <clrscr+0xf>
  10053a:	c6 05 00 60 10 00 07 	movb   $0x7,0x106000
  100541:	c7 05 08 80 12 00 00 	movl   $0x0,0x128008
  100548:	00 00 00 
  10054b:	a1 08 80 12 00       	mov    0x128008,%eax
  100550:	a3 04 80 12 00       	mov    %eax,0x128004
  100555:	c9                   	leave  
  100556:	c3                   	ret    

00100557 <setclr>:
  100557:	55                   	push   %ebp
  100558:	89 e5                	mov    %esp,%ebp
  10055a:	83 ec 04             	sub    $0x4,%esp
  10055d:	8b 45 08             	mov    0x8(%ebp),%eax
  100560:	88 45 fc             	mov    %al,-0x4(%ebp)
  100563:	8a 45 fc             	mov    -0x4(%ebp),%al
  100566:	a2 00 60 10 00       	mov    %al,0x106000
  10056b:	c9                   	leave  
  10056c:	c3                   	ret    

0010056d <kprintf>:
  10056d:	55                   	push   %ebp
  10056e:	89 e5                	mov    %esp,%ebp
  100570:	83 ec 18             	sub    $0x18,%esp
  100573:	8d 45 0c             	lea    0xc(%ebp),%eax
  100576:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100579:	c7 05 0c 80 12 00 00 	movl   $0x0,0x12800c
  100580:	00 00 00 
  100583:	e9 35 01 00 00       	jmp    1006bd <kprintf+0x150>
  100588:	8b 45 08             	mov    0x8(%ebp),%eax
  10058b:	8a 00                	mov    (%eax),%al
  10058d:	3c 25                	cmp    $0x25,%al
  10058f:	0f 85 11 01 00 00    	jne    1006a6 <kprintf+0x139>
  100595:	ff 45 08             	incl   0x8(%ebp)
  100598:	8b 45 08             	mov    0x8(%ebp),%eax
  10059b:	8a 00                	mov    (%eax),%al
  10059d:	0f be c0             	movsbl %al,%eax
  1005a0:	83 f8 70             	cmp    $0x70,%eax
  1005a3:	0f 84 8a 00 00 00    	je     100633 <kprintf+0xc6>
  1005a9:	83 f8 70             	cmp    $0x70,%eax
  1005ac:	7f 2e                	jg     1005dc <kprintf+0x6f>
  1005ae:	83 f8 63             	cmp    $0x63,%eax
  1005b1:	0f 84 9c 00 00 00    	je     100653 <kprintf+0xe6>
  1005b7:	83 f8 63             	cmp    $0x63,%eax
  1005ba:	7f 16                	jg     1005d2 <kprintf+0x65>
  1005bc:	85 c0                	test   %eax,%eax
  1005be:	0f 84 08 01 00 00    	je     1006cc <kprintf+0x15f>
  1005c4:	83 f8 25             	cmp    $0x25,%eax
  1005c7:	0f 84 a6 00 00 00    	je     100673 <kprintf+0x106>
  1005cd:	e9 b1 00 00 00       	jmp    100683 <kprintf+0x116>
  1005d2:	83 f8 64             	cmp    $0x64,%eax
  1005d5:	74 39                	je     100610 <kprintf+0xa3>
  1005d7:	e9 a7 00 00 00       	jmp    100683 <kprintf+0x116>
  1005dc:	83 f8 75             	cmp    $0x75,%eax
  1005df:	74 2f                	je     100610 <kprintf+0xa3>
  1005e1:	83 f8 78             	cmp    $0x78,%eax
  1005e4:	74 4d                	je     100633 <kprintf+0xc6>
  1005e6:	83 f8 73             	cmp    $0x73,%eax
  1005e9:	0f 85 94 00 00 00    	jne    100683 <kprintf+0x116>
  1005ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005f2:	8d 50 04             	lea    0x4(%eax),%edx
  1005f5:	89 55 e8             	mov    %edx,-0x18(%ebp)
  1005f8:	8b 00                	mov    (%eax),%eax
  1005fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1005fd:	83 ec 0c             	sub    $0xc,%esp
  100600:	ff 75 ec             	pushl  -0x14(%ebp)
  100603:	e8 73 fe ff ff       	call   10047b <kputs>
  100608:	83 c4 10             	add    $0x10,%esp
  10060b:	e9 aa 00 00 00       	jmp    1006ba <kprintf+0x14d>
  100610:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100613:	8d 50 04             	lea    0x4(%eax),%edx
  100616:	89 55 e8             	mov    %edx,-0x18(%ebp)
  100619:	8b 00                	mov    (%eax),%eax
  10061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10061e:	83 ec 08             	sub    $0x8,%esp
  100621:	6a 0a                	push   $0xa
  100623:	ff 75 f0             	pushl  -0x10(%ebp)
  100626:	e8 7a fe ff ff       	call   1004a5 <kputn>
  10062b:	83 c4 10             	add    $0x10,%esp
  10062e:	e9 87 00 00 00       	jmp    1006ba <kprintf+0x14d>
  100633:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100636:	8d 50 04             	lea    0x4(%eax),%edx
  100639:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10063c:	8b 00                	mov    (%eax),%eax
  10063e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100641:	83 ec 08             	sub    $0x8,%esp
  100644:	6a 10                	push   $0x10
  100646:	ff 75 f0             	pushl  -0x10(%ebp)
  100649:	e8 57 fe ff ff       	call   1004a5 <kputn>
  10064e:	83 c4 10             	add    $0x10,%esp
  100651:	eb 67                	jmp    1006ba <kprintf+0x14d>
  100653:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100656:	8d 50 04             	lea    0x4(%eax),%edx
  100659:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10065c:	8b 00                	mov    (%eax),%eax
  10065e:	88 45 f7             	mov    %al,-0x9(%ebp)
  100661:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  100665:	83 ec 0c             	sub    $0xc,%esp
  100668:	50                   	push   %eax
  100669:	e8 72 fc ff ff       	call   1002e0 <kputc>
  10066e:	83 c4 10             	add    $0x10,%esp
  100671:	eb 47                	jmp    1006ba <kprintf+0x14d>
  100673:	83 ec 0c             	sub    $0xc,%esp
  100676:	6a 25                	push   $0x25
  100678:	e8 63 fc ff ff       	call   1002e0 <kputc>
  10067d:	83 c4 10             	add    $0x10,%esp
  100680:	90                   	nop    
  100681:	eb 37                	jmp    1006ba <kprintf+0x14d>
  100683:	83 ec 0c             	sub    $0xc,%esp
  100686:	6a 25                	push   $0x25
  100688:	e8 53 fc ff ff       	call   1002e0 <kputc>
  10068d:	83 c4 10             	add    $0x10,%esp
  100690:	8b 45 08             	mov    0x8(%ebp),%eax
  100693:	8a 00                	mov    (%eax),%al
  100695:	0f be c0             	movsbl %al,%eax
  100698:	83 ec 0c             	sub    $0xc,%esp
  10069b:	50                   	push   %eax
  10069c:	e8 3f fc ff ff       	call   1002e0 <kputc>
  1006a1:	83 c4 10             	add    $0x10,%esp
  1006a4:	eb 14                	jmp    1006ba <kprintf+0x14d>
  1006a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1006a9:	8a 00                	mov    (%eax),%al
  1006ab:	0f be c0             	movsbl %al,%eax
  1006ae:	83 ec 0c             	sub    $0xc,%esp
  1006b1:	50                   	push   %eax
  1006b2:	e8 29 fc ff ff       	call   1002e0 <kputc>
  1006b7:	83 c4 10             	add    $0x10,%esp
  1006ba:	ff 45 08             	incl   0x8(%ebp)
  1006bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1006c0:	8a 00                	mov    (%eax),%al
  1006c2:	84 c0                	test   %al,%al
  1006c4:	0f 85 be fe ff ff    	jne    100588 <kprintf+0x1b>
  1006ca:	eb 01                	jmp    1006cd <kprintf+0x160>
  1006cc:	90                   	nop    
  1006cd:	a1 0c 80 12 00       	mov    0x12800c,%eax
  1006d2:	c9                   	leave  
  1006d3:	c3                   	ret    

001006d4 <load_gdt>:
#include "idt.h"
#include "kernel.h"
#include "multiboot.h"
#include "pmm.h"
#include "vfs.h"

  1006d4:	55                   	push   %ebp
  1006d5:	89 e5                	mov    %esp,%ebp
  1006d7:	83 ec 10             	sub    $0x10,%esp
#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
	clrscr();
	pmm_init(mb_info);
  1006da:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  1006e0:	c7 45 fc 80 85 16 00 	movl   $0x168580,-0x4(%ebp)

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  1006e7:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");

  1006eb:	66 b8 10 00          	mov    $0x10,%ax
	kprintf("Initializing GDT...\n");
  1006ef:	8e d8                	mov    %eax,%ds

  1006f1:	8e c0                	mov    %eax,%es
	init_gdt();
  1006f3:	8e e0                	mov    %eax,%fs

  1006f5:	8e e8                	mov    %eax,%gs
	kprintf("Initializing IDT...\n");
  1006f7:	8e d0                	mov    %eax,%ss

	init_idt();

  1006f9:	c9                   	leave  
  1006fa:	c3                   	ret    

001006fb <set_gdt_entry>:
	kprintf("Initializing Kernel...\n");

  1006fb:	55                   	push   %ebp
  1006fc:	89 e5                	mov    %esp,%ebp
  1006fe:	57                   	push   %edi
  1006ff:	56                   	push   %esi
  100700:	53                   	push   %ebx
  100701:	83 ec 4c             	sub    $0x4c,%esp
	pmm_print_stats();
  100704:	8b 45 08             	mov    0x8(%ebp),%eax
  100707:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10070a:	8b 45 10             	mov    0x10(%ebp),%eax
  10070d:	ba 00 00 00 00       	mov    $0x0,%edx
  100712:	0f b7 c8             	movzwl %ax,%ecx
  100715:	89 d3                	mov    %edx,%ebx
  100717:	83 e3 00             	and    $0x0,%ebx
  10071a:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10071d:	89 0c d5 80 85 16 00 	mov    %ecx,0x168580(,%edx,8)
  100724:	89 1c d5 84 85 16 00 	mov    %ebx,0x168584(,%edx,8)

  10072b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10072e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100731:	8b 45 08             	mov    0x8(%ebp),%eax
  100734:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  10073b:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  100742:	8b 45 0c             	mov    0xc(%ebp),%eax
  100745:	ba 00 00 00 00       	mov    $0x0,%edx
  10074a:	89 c6                	mov    %eax,%esi
  10074c:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100752:	89 d7                	mov    %edx,%edi
  100754:	83 e7 00             	and    $0x0,%edi
  100757:	89 f0                	mov    %esi,%eax
  100759:	89 fa                	mov    %edi,%edx
  10075b:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10075f:	c1 e0 10             	shl    $0x10,%eax
  100762:	89 ce                	mov    %ecx,%esi
  100764:	09 c6                	or     %eax,%esi
  100766:	89 75 b0             	mov    %esi,-0x50(%ebp)
  100769:	89 df                	mov    %ebx,%edi
  10076b:	09 d7                	or     %edx,%edi
  10076d:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  100770:	8b 45 b0             	mov    -0x50(%ebp),%eax
  100773:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100776:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  100779:	89 04 cd 80 85 16 00 	mov    %eax,0x168580(,%ecx,8)
  100780:	89 14 cd 84 85 16 00 	mov    %edx,0x168584(,%ecx,8)
	kernel_main(mb_info);
  100787:	8b 75 08             	mov    0x8(%ebp),%esi
  10078a:	8b 45 08             	mov    0x8(%ebp),%eax
  10078d:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  100794:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  10079b:	8b 45 14             	mov    0x14(%ebp),%eax
  10079e:	89 c2                	mov    %eax,%edx
  1007a0:	c1 fa 1f             	sar    $0x1f,%edx
  1007a3:	0f b6 f8             	movzbl %al,%edi
  1007a6:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1007a9:	89 d7                	mov    %edx,%edi
  1007ab:	83 e7 00             	and    $0x0,%edi
  1007ae:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1007b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1007b4:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1007b7:	89 c2                	mov    %eax,%edx
  1007b9:	b8 00 00 00 00       	mov    $0x0,%eax
  1007be:	c1 e2 08             	shl    $0x8,%edx
  1007c1:	89 cf                	mov    %ecx,%edi
  1007c3:	09 c7                	or     %eax,%edi
  1007c5:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1007c8:	89 df                	mov    %ebx,%edi
  1007ca:	09 d7                	or     %edx,%edi
  1007cc:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1007cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1007d2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1007d5:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  1007dc:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)

  1007e3:	8b 75 08             	mov    0x8(%ebp),%esi
  1007e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1007e9:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  1007f0:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  1007f7:	8b 45 10             	mov    0x10(%ebp),%eax
  1007fa:	c1 e8 10             	shr    $0x10,%eax
  1007fd:	ba 00 00 00 00       	mov    $0x0,%edx
  100802:	89 c7                	mov    %eax,%edi
  100804:	83 e7 0f             	and    $0xf,%edi
  100807:	89 7d c8             	mov    %edi,-0x38(%ebp)
  10080a:	89 d7                	mov    %edx,%edi
  10080c:	83 e7 00             	and    $0x0,%edi
  10080f:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100812:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100815:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100818:	89 c2                	mov    %eax,%edx
  10081a:	b8 00 00 00 00       	mov    $0x0,%eax
  10081f:	c1 e2 10             	shl    $0x10,%edx
  100822:	89 cf                	mov    %ecx,%edi
  100824:	09 c7                	or     %eax,%edi
  100826:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100829:	89 df                	mov    %ebx,%edi
  10082b:	09 d7                	or     %edx,%edi
  10082d:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  100830:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100833:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100836:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  10083d:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
	return;
  100844:	8b 75 08             	mov    0x8(%ebp),%esi
  100847:	8b 45 08             	mov    0x8(%ebp),%eax
  10084a:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  100851:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  100858:	8b 45 14             	mov    0x14(%ebp),%eax
  10085b:	c1 f8 08             	sar    $0x8,%eax
  10085e:	89 c2                	mov    %eax,%edx
  100860:	c1 fa 1f             	sar    $0x1f,%edx
  100863:	0f b6 f8             	movzbl %al,%edi
  100866:	89 7d d8             	mov    %edi,-0x28(%ebp)
  100869:	89 d7                	mov    %edx,%edi
  10086b:	83 e7 00             	and    $0x0,%edi
  10086e:	89 7d dc             	mov    %edi,-0x24(%ebp)
  100871:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100874:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100877:	89 c2                	mov    %eax,%edx
  100879:	b8 00 00 00 00       	mov    $0x0,%eax
  10087e:	c1 e2 14             	shl    $0x14,%edx
  100881:	89 cf                	mov    %ecx,%edi
  100883:	09 c7                	or     %eax,%edi
  100885:	89 7d e0             	mov    %edi,-0x20(%ebp)
  100888:	89 df                	mov    %ebx,%edi
  10088a:	09 d7                	or     %edx,%edi
  10088c:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10088f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100892:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100895:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  10089c:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
}
  1008a3:	8b 75 08             	mov    0x8(%ebp),%esi
  1008a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1008a9:	8b 0c c5 80 85 16 00 	mov    0x168580(,%eax,8),%ecx
  1008b0:	8b 1c c5 84 85 16 00 	mov    0x168584(,%eax,8),%ebx
  1008b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008ba:	c1 e8 18             	shr    $0x18,%eax
  1008bd:	ba 00 00 00 00       	mov    $0x0,%edx
  1008c2:	89 c2                	mov    %eax,%edx
  1008c4:	b8 00 00 00 00       	mov    $0x0,%eax
  1008c9:	c1 e2 18             	shl    $0x18,%edx
  1008cc:	89 cf                	mov    %ecx,%edi
  1008ce:	09 c7                	or     %eax,%edi
  1008d0:	89 7d e8             	mov    %edi,-0x18(%ebp)
  1008d3:	89 df                	mov    %ebx,%edi
  1008d5:	09 d7                	or     %edx,%edi
  1008d7:	89 7d ec             	mov    %edi,-0x14(%ebp)
  1008da:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1008dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1008e0:	89 04 f5 80 85 16 00 	mov    %eax,0x168580(,%esi,8)
  1008e7:	89 14 f5 84 85 16 00 	mov    %edx,0x168584(,%esi,8)
  1008ee:	83 c4 4c             	add    $0x4c,%esp
  1008f1:	5b                   	pop    %ebx
  1008f2:	5e                   	pop    %esi
  1008f3:	5f                   	pop    %edi
  1008f4:	5d                   	pop    %ebp
  1008f5:	c3                   	ret    

001008f6 <init_gdt>:
  1008f6:	55                   	push   %ebp
  1008f7:	89 e5                	mov    %esp,%ebp
  1008f9:	6a 00                	push   $0x0
  1008fb:	6a 00                	push   $0x0
  1008fd:	6a 00                	push   $0x0
  1008ff:	6a 00                	push   $0x0
  100901:	e8 f5 fd ff ff       	call   1006fb <set_gdt_entry>
  100906:	83 c4 10             	add    $0x10,%esp
  100909:	68 9a 0c 00 00       	push   $0xc9a
  10090e:	68 ff ff 0f 00       	push   $0xfffff
  100913:	6a 00                	push   $0x0
  100915:	6a 01                	push   $0x1
  100917:	e8 df fd ff ff       	call   1006fb <set_gdt_entry>
  10091c:	83 c4 10             	add    $0x10,%esp
  10091f:	68 92 0c 00 00       	push   $0xc92
  100924:	68 ff ff 0f 00       	push   $0xfffff
  100929:	6a 00                	push   $0x0
  10092b:	6a 02                	push   $0x2
  10092d:	e8 c9 fd ff ff       	call   1006fb <set_gdt_entry>
  100932:	83 c4 10             	add    $0x10,%esp
  100935:	68 fa 0c 00 00       	push   $0xcfa
  10093a:	68 ff ff 0f 00       	push   $0xfffff
  10093f:	6a 00                	push   $0x0
  100941:	6a 03                	push   $0x3
  100943:	e8 b3 fd ff ff       	call   1006fb <set_gdt_entry>
  100948:	83 c4 10             	add    $0x10,%esp
  10094b:	68 f2 0c 00 00       	push   $0xcf2
  100950:	68 ff ff 0f 00       	push   $0xfffff
  100955:	6a 00                	push   $0x0
  100957:	6a 04                	push   $0x4
  100959:	e8 9d fd ff ff       	call   1006fb <set_gdt_entry>
  10095e:	83 c4 10             	add    $0x10,%esp
  100961:	e8 6e fd ff ff       	call   1006d4 <load_gdt>
  100966:	c9                   	leave  
  100967:	c3                   	ret    

00100968 <idt_set_entry>:
  100968:	55                   	push   %ebp
  100969:	89 e5                	mov    %esp,%ebp
  10096b:	57                   	push   %edi
  10096c:	56                   	push   %esi
  10096d:	53                   	push   %ebx
  10096e:	83 ec 34             	sub    $0x34,%esp
  100971:	8b 45 10             	mov    0x10(%ebp),%eax
  100974:	8b 55 14             	mov    0x14(%ebp),%edx
  100977:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
  10097b:	88 55 d8             	mov    %dl,-0x28(%ebp)
  10097e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100981:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100984:	8b 75 08             	mov    0x8(%ebp),%esi
  100987:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10098a:	ba 00 00 00 00       	mov    $0x0,%edx
  10098f:	0f b7 c8             	movzwl %ax,%ecx
  100992:	89 d3                	mov    %edx,%ebx
  100994:	83 e3 00             	and    $0x0,%ebx
  100997:	89 0c f5 20 80 12 00 	mov    %ecx,0x128020(,%esi,8)
  10099e:	89 1c f5 24 80 12 00 	mov    %ebx,0x128024(,%esi,8)
  1009a5:	8b 75 08             	mov    0x8(%ebp),%esi
  1009a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1009ab:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  1009b2:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  1009b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1009bc:	25 ff ff 00 00       	and    $0xffff,%eax
  1009c1:	ba 00 00 00 00       	mov    $0x0,%edx
  1009c6:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  1009ca:	c1 e0 10             	shl    $0x10,%eax
  1009cd:	89 cf                	mov    %ecx,%edi
  1009cf:	09 c7                	or     %eax,%edi
  1009d1:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1009d4:	89 df                	mov    %ebx,%edi
  1009d6:	09 d7                	or     %edx,%edi
  1009d8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1009db:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1009de:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1009e1:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  1009e8:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)
  1009ef:	8b 75 08             	mov    0x8(%ebp),%esi
  1009f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1009f5:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  1009fc:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  100a03:	b8 00 00 00 00       	mov    $0x0,%eax
  100a08:	8a 45 d8             	mov    -0x28(%ebp),%al
  100a0b:	ba 00 00 00 00       	mov    $0x0,%edx
  100a10:	89 c2                	mov    %eax,%edx
  100a12:	b8 00 00 00 00       	mov    $0x0,%eax
  100a17:	c1 e2 08             	shl    $0x8,%edx
  100a1a:	89 cf                	mov    %ecx,%edi
  100a1c:	09 c7                	or     %eax,%edi
  100a1e:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100a21:	89 df                	mov    %ebx,%edi
  100a23:	09 d7                	or     %edx,%edi
  100a25:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100a28:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100a2b:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100a2e:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  100a35:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)
  100a3c:	8b 75 08             	mov    0x8(%ebp),%esi
  100a3f:	8b 45 08             	mov    0x8(%ebp),%eax
  100a42:	8b 0c c5 20 80 12 00 	mov    0x128020(,%eax,8),%ecx
  100a49:	8b 1c c5 24 80 12 00 	mov    0x128024(,%eax,8),%ebx
  100a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a53:	c1 e8 10             	shr    $0x10,%eax
  100a56:	ba 00 00 00 00       	mov    $0x0,%edx
  100a5b:	89 c2                	mov    %eax,%edx
  100a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  100a62:	c1 e2 10             	shl    $0x10,%edx
  100a65:	89 cf                	mov    %ecx,%edi
  100a67:	09 c7                	or     %eax,%edi
  100a69:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100a6c:	89 df                	mov    %ebx,%edi
  100a6e:	09 d7                	or     %edx,%edi
  100a70:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  100a73:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a76:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100a79:	89 04 f5 20 80 12 00 	mov    %eax,0x128020(,%esi,8)
  100a80:	89 14 f5 24 80 12 00 	mov    %edx,0x128024(,%esi,8)
  100a87:	83 c4 34             	add    $0x34,%esp
  100a8a:	5b                   	pop    %ebx
  100a8b:	5e                   	pop    %esi
  100a8c:	5f                   	pop    %edi
  100a8d:	5d                   	pop    %ebp
  100a8e:	c3                   	ret    

00100a8f <init_idt>:
  100a8f:	55                   	push   %ebp
  100a90:	89 e5                	mov    %esp,%ebp
  100a92:	83 ec 18             	sub    $0x18,%esp
  100a95:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  100a9b:	c7 45 f0 20 80 12 00 	movl   $0x128020,-0x10(%ebp)
  100aa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100aa9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100ab0:	eb 1f                	jmp    100ad1 <init_idt+0x42>
  100ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ab5:	c7 04 85 20 83 12 00 	movl   $0x0,0x128320(,%eax,4)
  100abc:	00 00 00 00 
  100ac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ac3:	c7 04 85 20 84 12 00 	movl   $0x0,0x128420(,%eax,4)
  100aca:	00 00 00 00 
  100ace:	ff 45 f4             	incl   -0xc(%ebp)
  100ad1:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  100ad5:	7e db                	jle    100ab2 <init_idt+0x23>
  100ad7:	83 ec 08             	sub    $0x8,%esp
  100ada:	6a 11                	push   $0x11
  100adc:	6a 20                	push   $0x20
  100ade:	e8 c8 15 00 00       	call   1020ab <outb>
  100ae3:	83 c4 10             	add    $0x10,%esp
  100ae6:	83 ec 08             	sub    $0x8,%esp
  100ae9:	6a 20                	push   $0x20
  100aeb:	6a 21                	push   $0x21
  100aed:	e8 b9 15 00 00       	call   1020ab <outb>
  100af2:	83 c4 10             	add    $0x10,%esp
  100af5:	83 ec 08             	sub    $0x8,%esp
  100af8:	6a 04                	push   $0x4
  100afa:	6a 21                	push   $0x21
  100afc:	e8 aa 15 00 00       	call   1020ab <outb>
  100b01:	83 c4 10             	add    $0x10,%esp
  100b04:	83 ec 08             	sub    $0x8,%esp
  100b07:	6a 01                	push   $0x1
  100b09:	6a 21                	push   $0x21
  100b0b:	e8 9b 15 00 00       	call   1020ab <outb>
  100b10:	83 c4 10             	add    $0x10,%esp
  100b13:	83 ec 08             	sub    $0x8,%esp
  100b16:	6a 11                	push   $0x11
  100b18:	68 a0 00 00 00       	push   $0xa0
  100b1d:	e8 89 15 00 00       	call   1020ab <outb>
  100b22:	83 c4 10             	add    $0x10,%esp
  100b25:	83 ec 08             	sub    $0x8,%esp
  100b28:	6a 28                	push   $0x28
  100b2a:	68 a1 00 00 00       	push   $0xa1
  100b2f:	e8 77 15 00 00       	call   1020ab <outb>
  100b34:	83 c4 10             	add    $0x10,%esp
  100b37:	83 ec 08             	sub    $0x8,%esp
  100b3a:	6a 02                	push   $0x2
  100b3c:	68 a1 00 00 00       	push   $0xa1
  100b41:	e8 65 15 00 00       	call   1020ab <outb>
  100b46:	83 c4 10             	add    $0x10,%esp
  100b49:	83 ec 08             	sub    $0x8,%esp
  100b4c:	6a 01                	push   $0x1
  100b4e:	68 a1 00 00 00       	push   $0xa1
  100b53:	e8 53 15 00 00       	call   1020ab <outb>
  100b58:	83 c4 10             	add    $0x10,%esp
  100b5b:	83 ec 08             	sub    $0x8,%esp
  100b5e:	6a 00                	push   $0x0
  100b60:	6a 20                	push   $0x20
  100b62:	e8 44 15 00 00       	call   1020ab <outb>
  100b67:	83 c4 10             	add    $0x10,%esp
  100b6a:	83 ec 08             	sub    $0x8,%esp
  100b6d:	6a 00                	push   $0x0
  100b6f:	68 a0 00 00 00       	push   $0xa0
  100b74:	e8 32 15 00 00       	call   1020ab <outb>
  100b79:	83 c4 10             	add    $0x10,%esp
  100b7c:	b8 0c 00 10 00       	mov    $0x10000c,%eax
  100b81:	68 8e 00 00 00       	push   $0x8e
  100b86:	6a 08                	push   $0x8
  100b88:	50                   	push   %eax
  100b89:	6a 00                	push   $0x0
  100b8b:	e8 d8 fd ff ff       	call   100968 <idt_set_entry>
  100b90:	83 c4 10             	add    $0x10,%esp
  100b93:	b8 15 00 10 00       	mov    $0x100015,%eax
  100b98:	68 8e 00 00 00       	push   $0x8e
  100b9d:	6a 08                	push   $0x8
  100b9f:	50                   	push   %eax
  100ba0:	6a 01                	push   $0x1
  100ba2:	e8 c1 fd ff ff       	call   100968 <idt_set_entry>
  100ba7:	83 c4 10             	add    $0x10,%esp
  100baa:	b8 1e 00 10 00       	mov    $0x10001e,%eax
  100baf:	68 8e 00 00 00       	push   $0x8e
  100bb4:	6a 08                	push   $0x8
  100bb6:	50                   	push   %eax
  100bb7:	6a 02                	push   $0x2
  100bb9:	e8 aa fd ff ff       	call   100968 <idt_set_entry>
  100bbe:	83 c4 10             	add    $0x10,%esp
  100bc1:	b8 27 00 10 00       	mov    $0x100027,%eax
  100bc6:	68 8e 00 00 00       	push   $0x8e
  100bcb:	6a 08                	push   $0x8
  100bcd:	50                   	push   %eax
  100bce:	6a 03                	push   $0x3
  100bd0:	e8 93 fd ff ff       	call   100968 <idt_set_entry>
  100bd5:	83 c4 10             	add    $0x10,%esp
  100bd8:	b8 30 00 10 00       	mov    $0x100030,%eax
  100bdd:	68 8e 00 00 00       	push   $0x8e
  100be2:	6a 08                	push   $0x8
  100be4:	50                   	push   %eax
  100be5:	6a 04                	push   $0x4
  100be7:	e8 7c fd ff ff       	call   100968 <idt_set_entry>
  100bec:	83 c4 10             	add    $0x10,%esp
  100bef:	b8 39 00 10 00       	mov    $0x100039,%eax
  100bf4:	68 8e 00 00 00       	push   $0x8e
  100bf9:	6a 08                	push   $0x8
  100bfb:	50                   	push   %eax
  100bfc:	6a 05                	push   $0x5
  100bfe:	e8 65 fd ff ff       	call   100968 <idt_set_entry>
  100c03:	83 c4 10             	add    $0x10,%esp
  100c06:	b8 42 00 10 00       	mov    $0x100042,%eax
  100c0b:	68 8e 00 00 00       	push   $0x8e
  100c10:	6a 08                	push   $0x8
  100c12:	50                   	push   %eax
  100c13:	6a 06                	push   $0x6
  100c15:	e8 4e fd ff ff       	call   100968 <idt_set_entry>
  100c1a:	83 c4 10             	add    $0x10,%esp
  100c1d:	b8 4b 00 10 00       	mov    $0x10004b,%eax
  100c22:	68 8e 00 00 00       	push   $0x8e
  100c27:	6a 08                	push   $0x8
  100c29:	50                   	push   %eax
  100c2a:	6a 07                	push   $0x7
  100c2c:	e8 37 fd ff ff       	call   100968 <idt_set_entry>
  100c31:	83 c4 10             	add    $0x10,%esp
  100c34:	b8 54 00 10 00       	mov    $0x100054,%eax
  100c39:	68 8e 00 00 00       	push   $0x8e
  100c3e:	6a 08                	push   $0x8
  100c40:	50                   	push   %eax
  100c41:	6a 08                	push   $0x8
  100c43:	e8 20 fd ff ff       	call   100968 <idt_set_entry>
  100c48:	83 c4 10             	add    $0x10,%esp
  100c4b:	b8 5b 00 10 00       	mov    $0x10005b,%eax
  100c50:	68 8e 00 00 00       	push   $0x8e
  100c55:	6a 08                	push   $0x8
  100c57:	50                   	push   %eax
  100c58:	6a 09                	push   $0x9
  100c5a:	e8 09 fd ff ff       	call   100968 <idt_set_entry>
  100c5f:	83 c4 10             	add    $0x10,%esp
  100c62:	b8 64 00 10 00       	mov    $0x100064,%eax
  100c67:	68 8e 00 00 00       	push   $0x8e
  100c6c:	6a 08                	push   $0x8
  100c6e:	50                   	push   %eax
  100c6f:	6a 0a                	push   $0xa
  100c71:	e8 f2 fc ff ff       	call   100968 <idt_set_entry>
  100c76:	83 c4 10             	add    $0x10,%esp
  100c79:	b8 6b 00 10 00       	mov    $0x10006b,%eax
  100c7e:	68 8e 00 00 00       	push   $0x8e
  100c83:	6a 08                	push   $0x8
  100c85:	50                   	push   %eax
  100c86:	6a 0b                	push   $0xb
  100c88:	e8 db fc ff ff       	call   100968 <idt_set_entry>
  100c8d:	83 c4 10             	add    $0x10,%esp
  100c90:	b8 72 00 10 00       	mov    $0x100072,%eax
  100c95:	68 8e 00 00 00       	push   $0x8e
  100c9a:	6a 08                	push   $0x8
  100c9c:	50                   	push   %eax
  100c9d:	6a 0c                	push   $0xc
  100c9f:	e8 c4 fc ff ff       	call   100968 <idt_set_entry>
  100ca4:	83 c4 10             	add    $0x10,%esp
  100ca7:	b8 79 00 10 00       	mov    $0x100079,%eax
  100cac:	68 8e 00 00 00       	push   $0x8e
  100cb1:	6a 08                	push   $0x8
  100cb3:	50                   	push   %eax
  100cb4:	6a 0d                	push   $0xd
  100cb6:	e8 ad fc ff ff       	call   100968 <idt_set_entry>
  100cbb:	83 c4 10             	add    $0x10,%esp
  100cbe:	b8 80 00 10 00       	mov    $0x100080,%eax
  100cc3:	68 8e 00 00 00       	push   $0x8e
  100cc8:	6a 08                	push   $0x8
  100cca:	50                   	push   %eax
  100ccb:	6a 0e                	push   $0xe
  100ccd:	e8 96 fc ff ff       	call   100968 <idt_set_entry>
  100cd2:	83 c4 10             	add    $0x10,%esp
  100cd5:	b8 84 00 10 00       	mov    $0x100084,%eax
  100cda:	68 8e 00 00 00       	push   $0x8e
  100cdf:	6a 08                	push   $0x8
  100ce1:	50                   	push   %eax
  100ce2:	6a 0f                	push   $0xf
  100ce4:	e8 7f fc ff ff       	call   100968 <idt_set_entry>
  100ce9:	83 c4 10             	add    $0x10,%esp
  100cec:	b8 8a 00 10 00       	mov    $0x10008a,%eax
  100cf1:	68 8e 00 00 00       	push   $0x8e
  100cf6:	6a 08                	push   $0x8
  100cf8:	50                   	push   %eax
  100cf9:	6a 10                	push   $0x10
  100cfb:	e8 68 fc ff ff       	call   100968 <idt_set_entry>
  100d00:	83 c4 10             	add    $0x10,%esp
  100d03:	b8 90 00 10 00       	mov    $0x100090,%eax
  100d08:	68 8e 00 00 00       	push   $0x8e
  100d0d:	6a 08                	push   $0x8
  100d0f:	50                   	push   %eax
  100d10:	6a 11                	push   $0x11
  100d12:	e8 51 fc ff ff       	call   100968 <idt_set_entry>
  100d17:	83 c4 10             	add    $0x10,%esp
  100d1a:	b8 94 00 10 00       	mov    $0x100094,%eax
  100d1f:	68 8e 00 00 00       	push   $0x8e
  100d24:	6a 08                	push   $0x8
  100d26:	50                   	push   %eax
  100d27:	6a 12                	push   $0x12
  100d29:	e8 3a fc ff ff       	call   100968 <idt_set_entry>
  100d2e:	83 c4 10             	add    $0x10,%esp
  100d31:	b8 9a 00 10 00       	mov    $0x10009a,%eax
  100d36:	68 8e 00 00 00       	push   $0x8e
  100d3b:	6a 08                	push   $0x8
  100d3d:	50                   	push   %eax
  100d3e:	6a 20                	push   $0x20
  100d40:	e8 23 fc ff ff       	call   100968 <idt_set_entry>
  100d45:	83 c4 10             	add    $0x10,%esp
  100d48:	b8 a0 00 10 00       	mov    $0x1000a0,%eax
  100d4d:	68 8e 00 00 00       	push   $0x8e
  100d52:	6a 08                	push   $0x8
  100d54:	50                   	push   %eax
  100d55:	6a 21                	push   $0x21
  100d57:	e8 0c fc ff ff       	call   100968 <idt_set_entry>
  100d5c:	83 c4 10             	add    $0x10,%esp
  100d5f:	b8 a6 00 10 00       	mov    $0x1000a6,%eax
  100d64:	68 8e 00 00 00       	push   $0x8e
  100d69:	6a 08                	push   $0x8
  100d6b:	50                   	push   %eax
  100d6c:	6a 22                	push   $0x22
  100d6e:	e8 f5 fb ff ff       	call   100968 <idt_set_entry>
  100d73:	83 c4 10             	add    $0x10,%esp
  100d76:	b8 ac 00 10 00       	mov    $0x1000ac,%eax
  100d7b:	68 8e 00 00 00       	push   $0x8e
  100d80:	6a 08                	push   $0x8
  100d82:	50                   	push   %eax
  100d83:	6a 23                	push   $0x23
  100d85:	e8 de fb ff ff       	call   100968 <idt_set_entry>
  100d8a:	83 c4 10             	add    $0x10,%esp
  100d8d:	b8 b2 00 10 00       	mov    $0x1000b2,%eax
  100d92:	68 8e 00 00 00       	push   $0x8e
  100d97:	6a 08                	push   $0x8
  100d99:	50                   	push   %eax
  100d9a:	6a 24                	push   $0x24
  100d9c:	e8 c7 fb ff ff       	call   100968 <idt_set_entry>
  100da1:	83 c4 10             	add    $0x10,%esp
  100da4:	b8 b8 00 10 00       	mov    $0x1000b8,%eax
  100da9:	68 8e 00 00 00       	push   $0x8e
  100dae:	6a 08                	push   $0x8
  100db0:	50                   	push   %eax
  100db1:	6a 25                	push   $0x25
  100db3:	e8 b0 fb ff ff       	call   100968 <idt_set_entry>
  100db8:	83 c4 10             	add    $0x10,%esp
  100dbb:	b8 be 00 10 00       	mov    $0x1000be,%eax
  100dc0:	68 8e 00 00 00       	push   $0x8e
  100dc5:	6a 08                	push   $0x8
  100dc7:	50                   	push   %eax
  100dc8:	6a 26                	push   $0x26
  100dca:	e8 99 fb ff ff       	call   100968 <idt_set_entry>
  100dcf:	83 c4 10             	add    $0x10,%esp
  100dd2:	b8 c4 00 10 00       	mov    $0x1000c4,%eax
  100dd7:	68 8e 00 00 00       	push   $0x8e
  100ddc:	6a 08                	push   $0x8
  100dde:	50                   	push   %eax
  100ddf:	6a 27                	push   $0x27
  100de1:	e8 82 fb ff ff       	call   100968 <idt_set_entry>
  100de6:	83 c4 10             	add    $0x10,%esp
  100de9:	b8 ca 00 10 00       	mov    $0x1000ca,%eax
  100dee:	68 8e 00 00 00       	push   $0x8e
  100df3:	6a 08                	push   $0x8
  100df5:	50                   	push   %eax
  100df6:	6a 28                	push   $0x28
  100df8:	e8 6b fb ff ff       	call   100968 <idt_set_entry>
  100dfd:	83 c4 10             	add    $0x10,%esp
  100e00:	b8 d0 00 10 00       	mov    $0x1000d0,%eax
  100e05:	68 8e 00 00 00       	push   $0x8e
  100e0a:	6a 08                	push   $0x8
  100e0c:	50                   	push   %eax
  100e0d:	6a 29                	push   $0x29
  100e0f:	e8 54 fb ff ff       	call   100968 <idt_set_entry>
  100e14:	83 c4 10             	add    $0x10,%esp
  100e17:	b8 d6 00 10 00       	mov    $0x1000d6,%eax
  100e1c:	68 8e 00 00 00       	push   $0x8e
  100e21:	6a 08                	push   $0x8
  100e23:	50                   	push   %eax
  100e24:	6a 2a                	push   $0x2a
  100e26:	e8 3d fb ff ff       	call   100968 <idt_set_entry>
  100e2b:	83 c4 10             	add    $0x10,%esp
  100e2e:	b8 dc 00 10 00       	mov    $0x1000dc,%eax
  100e33:	68 8e 00 00 00       	push   $0x8e
  100e38:	6a 08                	push   $0x8
  100e3a:	50                   	push   %eax
  100e3b:	6a 2b                	push   $0x2b
  100e3d:	e8 26 fb ff ff       	call   100968 <idt_set_entry>
  100e42:	83 c4 10             	add    $0x10,%esp
  100e45:	b8 e2 00 10 00       	mov    $0x1000e2,%eax
  100e4a:	68 8e 00 00 00       	push   $0x8e
  100e4f:	6a 08                	push   $0x8
  100e51:	50                   	push   %eax
  100e52:	6a 2c                	push   $0x2c
  100e54:	e8 0f fb ff ff       	call   100968 <idt_set_entry>
  100e59:	83 c4 10             	add    $0x10,%esp
  100e5c:	b8 e8 00 10 00       	mov    $0x1000e8,%eax
  100e61:	68 8e 00 00 00       	push   $0x8e
  100e66:	6a 08                	push   $0x8
  100e68:	50                   	push   %eax
  100e69:	6a 2d                	push   $0x2d
  100e6b:	e8 f8 fa ff ff       	call   100968 <idt_set_entry>
  100e70:	83 c4 10             	add    $0x10,%esp
  100e73:	b8 ee 00 10 00       	mov    $0x1000ee,%eax
  100e78:	68 8e 00 00 00       	push   $0x8e
  100e7d:	6a 08                	push   $0x8
  100e7f:	50                   	push   %eax
  100e80:	6a 2e                	push   $0x2e
  100e82:	e8 e1 fa ff ff       	call   100968 <idt_set_entry>
  100e87:	83 c4 10             	add    $0x10,%esp
  100e8a:	b8 f4 00 10 00       	mov    $0x1000f4,%eax
  100e8f:	68 8e 00 00 00       	push   $0x8e
  100e94:	6a 08                	push   $0x8
  100e96:	50                   	push   %eax
  100e97:	6a 2f                	push   $0x2f
  100e99:	e8 ca fa ff ff       	call   100968 <idt_set_entry>
  100e9e:	83 c4 10             	add    $0x10,%esp
  100ea1:	b8 fa 00 10 00       	mov    $0x1000fa,%eax
  100ea6:	68 ee 00 00 00       	push   $0xee
  100eab:	6a 08                	push   $0x8
  100ead:	50                   	push   %eax
  100eae:	6a 30                	push   $0x30
  100eb0:	e8 b3 fa ff ff       	call   100968 <idt_set_entry>
  100eb5:	83 c4 10             	add    $0x10,%esp
  100eb8:	b8 20 60 10 00       	mov    $0x106020,%eax
  100ebd:	68 e9 00 00 00       	push   $0xe9
  100ec2:	68 80 00 00 00       	push   $0x80
  100ec7:	50                   	push   %eax
  100ec8:	6a 05                	push   $0x5
  100eca:	e8 2c f8 ff ff       	call   1006fb <set_gdt_entry>
  100ecf:	83 c4 10             	add    $0x10,%esp
  100ed2:	b8 28 00 00 00       	mov    $0x28,%eax
  100ed7:	0f 00 d8             	ltr    %ax
  100eda:	0f 01 5d ee          	lidtl  -0x12(%ebp)
  100ede:	fb                   	sti    
  100edf:	c9                   	leave  
  100ee0:	c3                   	ret    

00100ee1 <register_intr_handler>:
  100ee1:	55                   	push   %ebp
  100ee2:	89 e5                	mov    %esp,%ebp
  100ee4:	8b 45 08             	mov    0x8(%ebp),%eax
  100ee7:	8b 55 0c             	mov    0xc(%ebp),%edx
  100eea:	89 14 85 20 82 12 00 	mov    %edx,0x128220(,%eax,4)
  100ef1:	8b 45 08             	mov    0x8(%ebp),%eax
  100ef4:	c7 04 85 20 83 12 00 	movl   $0x1,0x128320(,%eax,4)
  100efb:	01 00 00 00 
  100eff:	5d                   	pop    %ebp
  100f00:	c3                   	ret    

00100f01 <register_irq_rpc>:
  100f01:	55                   	push   %ebp
  100f02:	89 e5                	mov    %esp,%ebp
  100f04:	53                   	push   %ebx
  100f05:	83 ec 04             	sub    $0x4,%esp
  100f08:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f0c:	76 1e                	jbe    100f2c <register_irq_rpc+0x2b>
  100f0e:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f12:	77 18                	ja     100f2c <register_irq_rpc+0x2b>
  100f14:	8b 5d 08             	mov    0x8(%ebp),%ebx
  100f17:	e8 b1 1c 00 00       	call   102bcd <get_current_task>
  100f1c:	8b 00                	mov    (%eax),%eax
  100f1e:	89 04 9d 20 84 12 00 	mov    %eax,0x128420(,%ebx,4)
  100f25:	b8 01 00 00 00       	mov    $0x1,%eax
  100f2a:	eb 05                	jmp    100f31 <register_irq_rpc+0x30>
  100f2c:	b8 00 00 00 00       	mov    $0x0,%eax
  100f31:	83 c4 04             	add    $0x4,%esp
  100f34:	5b                   	pop    %ebx
  100f35:	5d                   	pop    %ebp
  100f36:	c3                   	ret    

00100f37 <disable_irq_rpc>:
  100f37:	55                   	push   %ebp
  100f38:	89 e5                	mov    %esp,%ebp
  100f3a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f3e:	76 2a                	jbe    100f6a <disable_irq_rpc+0x33>
  100f40:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f44:	77 24                	ja     100f6a <disable_irq_rpc+0x33>
  100f46:	8b 45 08             	mov    0x8(%ebp),%eax
  100f49:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  100f50:	85 c0                	test   %eax,%eax
  100f52:	7e 16                	jle    100f6a <disable_irq_rpc+0x33>
  100f54:	8b 45 08             	mov    0x8(%ebp),%eax
  100f57:	8b 55 08             	mov    0x8(%ebp),%edx
  100f5a:	8b 14 95 20 84 12 00 	mov    0x128420(,%edx,4),%edx
  100f61:	f7 da                	neg    %edx
  100f63:	89 14 85 20 84 12 00 	mov    %edx,0x128420(,%eax,4)
  100f6a:	5d                   	pop    %ebp
  100f6b:	c3                   	ret    

00100f6c <enable_irq_rpc>:
  100f6c:	55                   	push   %ebp
  100f6d:	89 e5                	mov    %esp,%ebp
  100f6f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  100f73:	76 2a                	jbe    100f9f <enable_irq_rpc+0x33>
  100f75:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  100f79:	77 24                	ja     100f9f <enable_irq_rpc+0x33>
  100f7b:	8b 45 08             	mov    0x8(%ebp),%eax
  100f7e:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  100f85:	85 c0                	test   %eax,%eax
  100f87:	79 16                	jns    100f9f <enable_irq_rpc+0x33>
  100f89:	8b 45 08             	mov    0x8(%ebp),%eax
  100f8c:	8b 55 08             	mov    0x8(%ebp),%edx
  100f8f:	8b 14 95 20 84 12 00 	mov    0x128420(,%edx,4),%edx
  100f96:	f7 da                	neg    %edx
  100f98:	89 14 85 20 84 12 00 	mov    %edx,0x128420(,%eax,4)
  100f9f:	5d                   	pop    %ebp
  100fa0:	c3                   	ret    

00100fa1 <handle_interrupt>:
  100fa1:	55                   	push   %ebp
  100fa2:	89 e5                	mov    %esp,%ebp
  100fa4:	83 ec 18             	sub    $0x18,%esp
  100fa7:	8b 45 08             	mov    0x8(%ebp),%eax
  100faa:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100fad:	8b 45 08             	mov    0x8(%ebp),%eax
  100fb0:	8b 40 1c             	mov    0x1c(%eax),%eax
  100fb3:	83 f8 1f             	cmp    $0x1f,%eax
  100fb6:	77 37                	ja     100fef <handle_interrupt+0x4e>
  100fb8:	e8 06 1c 00 00       	call   102bc3 <isSchedulingEnabled>
  100fbd:	85 c0                	test   %eax,%eax
  100fbf:	75 18                	jne    100fd9 <handle_interrupt+0x38>
  100fc1:	83 ec 08             	sub    $0x8,%esp
  100fc4:	68 7d 71 10 00       	push   $0x10717d
  100fc9:	ff 75 08             	pushl  0x8(%ebp)
  100fcc:	e8 05 f2 ff ff       	call   1001d6 <show_cod>
  100fd1:	83 c4 10             	add    $0x10,%esp
  100fd4:	e9 08 01 00 00       	jmp    1010e1 <handle_interrupt+0x140>
  100fd9:	83 ec 0c             	sub    $0xc,%esp
  100fdc:	ff 75 08             	pushl  0x8(%ebp)
  100fdf:	e8 20 1d 00 00       	call   102d04 <schedule_exception>
  100fe4:	83 c4 10             	add    $0x10,%esp
  100fe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100fea:	e9 f2 00 00 00       	jmp    1010e1 <handle_interrupt+0x140>
  100fef:	8b 45 08             	mov    0x8(%ebp),%eax
  100ff2:	8b 40 1c             	mov    0x1c(%eax),%eax
  100ff5:	83 f8 1f             	cmp    $0x1f,%eax
  100ff8:	0f 86 b2 00 00 00    	jbe    1010b0 <handle_interrupt+0x10f>
  100ffe:	8b 45 08             	mov    0x8(%ebp),%eax
  101001:	8b 40 1c             	mov    0x1c(%eax),%eax
  101004:	83 f8 2f             	cmp    $0x2f,%eax
  101007:	0f 87 a3 00 00 00    	ja     1010b0 <handle_interrupt+0x10f>
  10100d:	8b 45 08             	mov    0x8(%ebp),%eax
  101010:	8b 40 1c             	mov    0x1c(%eax),%eax
  101013:	83 f8 27             	cmp    $0x27,%eax
  101016:	76 12                	jbe    10102a <handle_interrupt+0x89>
  101018:	83 ec 08             	sub    $0x8,%esp
  10101b:	6a 20                	push   $0x20
  10101d:	68 a0 00 00 00       	push   $0xa0
  101022:	e8 84 10 00 00       	call   1020ab <outb>
  101027:	83 c4 10             	add    $0x10,%esp
  10102a:	8b 45 08             	mov    0x8(%ebp),%eax
  10102d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101030:	83 f8 20             	cmp    $0x20,%eax
  101033:	75 13                	jne    101048 <handle_interrupt+0xa7>
  101035:	83 ec 0c             	sub    $0xc,%esp
  101038:	ff 75 08             	pushl  0x8(%ebp)
  10103b:	e8 ab 20 00 00       	call   1030eb <schedule>
  101040:	83 c4 10             	add    $0x10,%esp
  101043:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101046:	eb 57                	jmp    10109f <handle_interrupt+0xfe>
  101048:	8b 45 08             	mov    0x8(%ebp),%eax
  10104b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10104e:	8b 04 85 20 83 12 00 	mov    0x128320(,%eax,4),%eax
  101055:	85 c0                	test   %eax,%eax
  101057:	74 0f                	je     101068 <handle_interrupt+0xc7>
  101059:	8b 45 08             	mov    0x8(%ebp),%eax
  10105c:	8b 40 1c             	mov    0x1c(%eax),%eax
  10105f:	8b 04 85 20 82 12 00 	mov    0x128220(,%eax,4),%eax
  101066:	ff d0                	call   *%eax
  101068:	8b 45 08             	mov    0x8(%ebp),%eax
  10106b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10106e:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  101075:	85 c0                	test   %eax,%eax
  101077:	7e 26                	jle    10109f <handle_interrupt+0xfe>
  101079:	8b 45 08             	mov    0x8(%ebp),%eax
  10107c:	8b 50 1c             	mov    0x1c(%eax),%edx
  10107f:	8b 45 08             	mov    0x8(%ebp),%eax
  101082:	8b 40 1c             	mov    0x1c(%eax),%eax
  101085:	8b 04 85 20 84 12 00 	mov    0x128420(,%eax,4),%eax
  10108c:	83 ec 0c             	sub    $0xc,%esp
  10108f:	6a 00                	push   $0x0
  101091:	6a 00                	push   $0x0
  101093:	52                   	push   %edx
  101094:	6a 00                	push   $0x0
  101096:	50                   	push   %eax
  101097:	e8 a3 21 00 00       	call   10323f <create_rpc_call>
  10109c:	83 c4 20             	add    $0x20,%esp
  10109f:	83 ec 08             	sub    $0x8,%esp
  1010a2:	6a 20                	push   $0x20
  1010a4:	6a 20                	push   $0x20
  1010a6:	e8 00 10 00 00       	call   1020ab <outb>
  1010ab:	83 c4 10             	add    $0x10,%esp
  1010ae:	eb 31                	jmp    1010e1 <handle_interrupt+0x140>
  1010b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1010b3:	8b 40 1c             	mov    0x1c(%eax),%eax
  1010b6:	83 f8 30             	cmp    $0x30,%eax
  1010b9:	75 13                	jne    1010ce <handle_interrupt+0x12d>
  1010bb:	83 ec 0c             	sub    $0xc,%esp
  1010be:	ff 75 f4             	pushl  -0xc(%ebp)
  1010c1:	e8 22 00 00 00       	call   1010e8 <syscall>
  1010c6:	83 c4 10             	add    $0x10,%esp
  1010c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1010cc:	eb 13                	jmp    1010e1 <handle_interrupt+0x140>
  1010ce:	83 ec 08             	sub    $0x8,%esp
  1010d1:	68 8b 71 10 00       	push   $0x10718b
  1010d6:	ff 75 08             	pushl  0x8(%ebp)
  1010d9:	e8 f8 f0 ff ff       	call   1001d6 <show_cod>
  1010de:	83 c4 10             	add    $0x10,%esp
  1010e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1010e4:	c9                   	leave  
  1010e5:	c3                   	ret    
	...

001010e8 <syscall>:
    char* stdin;
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  1010e8:	55                   	push   %ebp
  1010e9:	89 e5                	mov    %esp,%ebp
  1010eb:	56                   	push   %esi
  1010ec:	53                   	push   %ebx
  1010ed:	83 ec 70             	sub    $0x70,%esp
    cpu = save_cpu_state(cpu);
  1010f0:	83 ec 0c             	sub    $0xc,%esp
  1010f3:	ff 75 08             	pushl  0x8(%ebp)
  1010f6:	e8 2b 1f 00 00       	call   103026 <save_cpu_state>
  1010fb:	83 c4 10             	add    $0x10,%esp
  1010fe:	89 45 08             	mov    %eax,0x8(%ebp)

	switch (cpu->eax) {
  101101:	8b 45 08             	mov    0x8(%ebp),%eax
  101104:	8b 00                	mov    (%eax),%eax
  101106:	3d cd 00 00 00       	cmp    $0xcd,%eax
  10110b:	0f 87 c8 07 00 00    	ja     1018d9 <syscall+0x7f1>
  101111:	8b 04 85 bc 71 10 00 	mov    0x1071bc(,%eax,4),%eax
  101118:	ff e0                	jmp    *%eax
	case 1: /* exit */
		return terminate_current(cpu);
  10111a:	83 ec 0c             	sub    $0xc,%esp
  10111d:	ff 75 08             	pushl  0x8(%ebp)
  101120:	e8 d1 1c 00 00       	call   102df6 <terminate_current>
  101125:	83 c4 10             	add    $0x10,%esp
  101128:	e9 d1 07 00 00       	jmp    1018fe <syscall+0x816>

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  10112d:	8b 45 08             	mov    0x8(%ebp),%eax
  101130:	8b 40 04             	mov    0x4(%eax),%eax
  101133:	83 ec 0c             	sub    $0xc,%esp
  101136:	50                   	push   %eax
  101137:	e8 9b 1a 00 00       	call   102bd7 <get_task_by_pid>
  10113c:	83 c4 10             	add    $0x10,%esp
  10113f:	89 c2                	mov    %eax,%edx
  101141:	8b 45 08             	mov    0x8(%ebp),%eax
  101144:	89 10                	mov    %edx,(%eax)
	}
	    break;
  101146:	e9 b0 07 00 00       	jmp    1018fb <syscall+0x813>

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  10114b:	8b 45 08             	mov    0x8(%ebp),%eax
  10114e:	8b 40 04             	mov    0x4(%eax),%eax
  101151:	83 ec 0c             	sub    $0xc,%esp
  101154:	50                   	push   %eax
  101155:	e8 c2 29 00 00       	call   103b1c <strclone>
  10115a:	83 c4 10             	add    $0x10,%esp
  10115d:	89 45 a0             	mov    %eax,-0x60(%ebp)

        struct exec_info* einp = (void*) cpu->edx;
  101160:	8b 45 08             	mov    0x8(%ebp),%eax
  101163:	8b 40 0c             	mov    0xc(%eax),%eax
  101166:	89 45 a4             	mov    %eax,-0x5c(%ebp)
        struct exec_info ein = {
            .execPath = 0,
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };
  101169:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)
  101170:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  101177:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
  10117e:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)

        if(einp != 0) {
  101185:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
  101189:	74 53                	je     1011de <syscall+0xf6>
            ein.execPath = strclone(einp->execPath);
  10118b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10118e:	8b 00                	mov    (%eax),%eax
  101190:	83 ec 0c             	sub    $0xc,%esp
  101193:	50                   	push   %eax
  101194:	e8 83 29 00 00       	call   103b1c <strclone>
  101199:	83 c4 10             	add    $0x10,%esp
  10119c:	89 45 8c             	mov    %eax,-0x74(%ebp)
            ein.stdin = strclone(einp->stdin);
  10119f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1011a2:	8b 40 04             	mov    0x4(%eax),%eax
  1011a5:	83 ec 0c             	sub    $0xc,%esp
  1011a8:	50                   	push   %eax
  1011a9:	e8 6e 29 00 00       	call   103b1c <strclone>
  1011ae:	83 c4 10             	add    $0x10,%esp
  1011b1:	89 45 90             	mov    %eax,-0x70(%ebp)
            ein.stdout = strclone(einp->stdout);
  1011b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1011b7:	8b 40 08             	mov    0x8(%eax),%eax
  1011ba:	83 ec 0c             	sub    $0xc,%esp
  1011bd:	50                   	push   %eax
  1011be:	e8 59 29 00 00       	call   103b1c <strclone>
  1011c3:	83 c4 10             	add    $0x10,%esp
  1011c6:	89 45 94             	mov    %eax,-0x6c(%ebp)
            ein.stderr = strclone(einp->stderr);
  1011c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1011cc:	8b 40 0c             	mov    0xc(%eax),%eax
  1011cf:	83 ec 0c             	sub    $0xc,%esp
  1011d2:	50                   	push   %eax
  1011d3:	e8 44 29 00 00       	call   103b1c <strclone>
  1011d8:	83 c4 10             	add    $0x10,%esp
  1011db:	89 45 98             	mov    %eax,-0x68(%ebp)
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  1011de:	8b 75 98             	mov    -0x68(%ebp),%esi
  1011e1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1011e4:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  1011e7:	8b 55 8c             	mov    -0x74(%ebp),%edx
  1011ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1011ed:	8b 40 08             	mov    0x8(%eax),%eax
  1011f0:	83 ec 08             	sub    $0x8,%esp
  1011f3:	56                   	push   %esi
  1011f4:	53                   	push   %ebx
  1011f5:	51                   	push   %ecx
  1011f6:	52                   	push   %edx
  1011f7:	50                   	push   %eax
  1011f8:	ff 75 a0             	pushl  -0x60(%ebp)
  1011fb:	e8 d3 32 00 00       	call   1044d3 <vfs_exec>
  101200:	83 c4 20             	add    $0x20,%esp
  101203:	8b 55 08             	mov    0x8(%ebp),%edx
  101206:	89 02                	mov    %eax,(%edx)

        if(einp != 0) {
  101208:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
  10120c:	74 3c                	je     10124a <syscall+0x162>
            free(ein.execPath);
  10120e:	8b 45 8c             	mov    -0x74(%ebp),%eax
  101211:	83 ec 0c             	sub    $0xc,%esp
  101214:	50                   	push   %eax
  101215:	e8 fe 26 00 00       	call   103918 <free>
  10121a:	83 c4 10             	add    $0x10,%esp
            free(ein.stdin);
  10121d:	8b 45 90             	mov    -0x70(%ebp),%eax
  101220:	83 ec 0c             	sub    $0xc,%esp
  101223:	50                   	push   %eax
  101224:	e8 ef 26 00 00       	call   103918 <free>
  101229:	83 c4 10             	add    $0x10,%esp
            free(ein.stdout);
  10122c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10122f:	83 ec 0c             	sub    $0xc,%esp
  101232:	50                   	push   %eax
  101233:	e8 e0 26 00 00       	call   103918 <free>
  101238:	83 c4 10             	add    $0x10,%esp
            free(ein.stderr);
  10123b:	8b 45 98             	mov    -0x68(%ebp),%eax
  10123e:	83 ec 0c             	sub    $0xc,%esp
  101241:	50                   	push   %eax
  101242:	e8 d1 26 00 00       	call   103918 <free>
  101247:	83 c4 10             	add    $0x10,%esp
        }

        free(path);
  10124a:	83 ec 0c             	sub    $0xc,%esp
  10124d:	ff 75 a0             	pushl  -0x60(%ebp)
  101250:	e8 c3 26 00 00       	call   103918 <free>
  101255:	83 c4 10             	add    $0x10,%esp
    }
        break;
  101258:	e9 9e 06 00 00       	jmp    1018fb <syscall+0x813>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  10125d:	e8 6b 19 00 00       	call   102bcd <get_current_task>
  101262:	8b 40 20             	mov    0x20(%eax),%eax
  101265:	89 c2                	mov    %eax,%edx
  101267:	8b 45 08             	mov    0x8(%ebp),%eax
  10126a:	89 10                	mov    %edx,(%eax)
    }
        break;
  10126c:	e9 8a 06 00 00       	jmp    1018fb <syscall+0x813>

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  101271:	83 ec 0c             	sub    $0xc,%esp
  101274:	ff 75 08             	pushl  0x8(%ebp)
  101277:	e8 6f 1e 00 00       	call   1030eb <schedule>
  10127c:	83 c4 10             	add    $0x10,%esp
  10127f:	89 45 08             	mov    %eax,0x8(%ebp)
    }
        break;
  101282:	e9 74 06 00 00       	jmp    1018fb <syscall+0x813>

    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
  101287:	8b 45 08             	mov    0x8(%ebp),%eax
  10128a:	8b 40 04             	mov    0x4(%eax),%eax
  10128d:	89 45 a8             	mov    %eax,-0x58(%ebp)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  101290:	e8 38 19 00 00       	call   102bcd <get_current_task>
  101295:	8b 40 28             	mov    0x28(%eax),%eax
  101298:	85 c0                	test   %eax,%eax
  10129a:	0f 84 51 06 00 00    	je     1018f1 <syscall+0x809>
  1012a0:	e8 28 19 00 00       	call   102bcd <get_current_task>
  1012a5:	8b 40 28             	mov    0x28(%eax),%eax
  1012a8:	83 ec 08             	sub    $0x8,%esp
  1012ab:	50                   	push   %eax
  1012ac:	ff 75 a8             	pushl  -0x58(%ebp)
  1012af:	e8 45 28 00 00       	call   103af9 <strcpy>
  1012b4:	83 c4 10             	add    $0x10,%esp
    }
        break;
  1012b7:	e9 3f 06 00 00       	jmp    1018fb <syscall+0x813>

    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  1012bc:	e8 2b 2a 00 00       	call   103cec <vfs_reset_error>
        char* path = strclone((char*) cpu->ebx);
  1012c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1012c4:	8b 40 04             	mov    0x4(%eax),%eax
  1012c7:	83 ec 0c             	sub    $0xc,%esp
  1012ca:	50                   	push   %eax
  1012cb:	e8 4c 28 00 00       	call   103b1c <strclone>
  1012d0:	83 c4 10             	add    $0x10,%esp
  1012d3:	89 45 ac             	mov    %eax,-0x54(%ebp)

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  1012d6:	e8 f2 18 00 00       	call   102bcd <get_current_task>
  1012db:	8b 40 28             	mov    0x28(%eax),%eax
  1012de:	85 c0                	test   %eax,%eax
  1012e0:	74 14                	je     1012f6 <syscall+0x20e>
  1012e2:	e8 e6 18 00 00       	call   102bcd <get_current_task>
  1012e7:	8b 40 28             	mov    0x28(%eax),%eax
  1012ea:	83 ec 0c             	sub    $0xc,%esp
  1012ed:	50                   	push   %eax
  1012ee:	e8 25 26 00 00       	call   103918 <free>
  1012f3:	83 c4 10             	add    $0x10,%esp

        char* new = vfs_resolve_path(path);
  1012f6:	83 ec 0c             	sub    $0xc,%esp
  1012f9:	ff 75 ac             	pushl  -0x54(%ebp)
  1012fc:	e8 c4 36 00 00       	call   1049c5 <vfs_resolve_path>
  101301:	83 c4 10             	add    $0x10,%esp
  101304:	89 45 b0             	mov    %eax,-0x50(%ebp)

        cpu->eax = 0;
  101307:	8b 45 08             	mov    0x8(%ebp),%eax
  10130a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        if(new) {
  101310:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  101314:	74 14                	je     10132a <syscall+0x242>
            get_current_task()->execPath = new;
  101316:	e8 b2 18 00 00       	call   102bcd <get_current_task>
  10131b:	8b 55 b0             	mov    -0x50(%ebp),%edx
  10131e:	89 50 28             	mov    %edx,0x28(%eax)
            cpu->eax = 1;
  101321:	8b 45 08             	mov    0x8(%ebp),%eax
  101324:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        }

        free(path);
  10132a:	83 ec 0c             	sub    $0xc,%esp
  10132d:	ff 75 ac             	pushl  -0x54(%ebp)
  101330:	e8 e3 25 00 00       	call   103918 <free>
  101335:	83 c4 10             	add    $0x10,%esp
    }
        break;
  101338:	e9 be 05 00 00       	jmp    1018fb <syscall+0x813>

	case 10: /* fopen */
	{
        vfs_reset_error();
  10133d:	e8 aa 29 00 00       	call   103cec <vfs_reset_error>
	    char* name = strclone((char*) cpu->ebx);
  101342:	8b 45 08             	mov    0x8(%ebp),%eax
  101345:	8b 40 04             	mov    0x4(%eax),%eax
  101348:	83 ec 0c             	sub    $0xc,%esp
  10134b:	50                   	push   %eax
  10134c:	e8 cb 27 00 00       	call   103b1c <strclone>
  101351:	83 c4 10             	add    $0x10,%esp
  101354:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101357:	8b 45 08             	mov    0x8(%ebp),%eax
  10135a:	8b 40 08             	mov    0x8(%eax),%eax
  10135d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  101360:	83 ec 08             	sub    $0x8,%esp
  101363:	ff 75 b8             	pushl  -0x48(%ebp)
  101366:	ff 75 b4             	pushl  -0x4c(%ebp)
  101369:	e8 2b 2f 00 00       	call   104299 <vfs_open>
  10136e:	83 c4 10             	add    $0x10,%esp
  101371:	89 45 bc             	mov    %eax,-0x44(%ebp)
	    if(handle) {
  101374:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
  101378:	74 18                	je     101392 <syscall+0x2aa>
	        register_handle(handle);
  10137a:	83 ec 0c             	sub    $0xc,%esp
  10137d:	ff 75 bc             	pushl  -0x44(%ebp)
  101380:	e8 87 18 00 00       	call   102c0c <register_handle>
  101385:	83 c4 10             	add    $0x10,%esp
	        cpu->eax = (uint32_t) handle;
  101388:	8b 55 bc             	mov    -0x44(%ebp),%edx
  10138b:	8b 45 08             	mov    0x8(%ebp),%eax
  10138e:	89 10                	mov    %edx,(%eax)
  101390:	eb 09                	jmp    10139b <syscall+0x2b3>
	    }
	    else
	    {
	        cpu->eax = 0;
  101392:	8b 45 08             	mov    0x8(%ebp),%eax
  101395:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  10139b:	83 ec 0c             	sub    $0xc,%esp
  10139e:	ff 75 b4             	pushl  -0x4c(%ebp)
  1013a1:	e8 72 25 00 00       	call   103918 <free>
  1013a6:	83 c4 10             	add    $0x10,%esp
	}
	    break;
  1013a9:	e9 4d 05 00 00       	jmp    1018fb <syscall+0x813>

	case 11: /* fclose */
	{
        vfs_reset_error();
  1013ae:	e8 39 29 00 00       	call   103cec <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  1013b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1013b6:	8b 40 04             	mov    0x4(%eax),%eax
  1013b9:	89 45 c0             	mov    %eax,-0x40(%ebp)
	    if(!unregister_handle(handle)) {
  1013bc:	83 ec 0c             	sub    $0xc,%esp
  1013bf:	ff 75 c0             	pushl  -0x40(%ebp)
  1013c2:	e8 92 18 00 00       	call   102c59 <unregister_handle>
  1013c7:	83 c4 10             	add    $0x10,%esp
  1013ca:	85 c0                	test   %eax,%eax
  1013cc:	75 1c                	jne    1013ea <syscall+0x302>
	        vfs_close(handle);
  1013ce:	83 ec 0c             	sub    $0xc,%esp
  1013d1:	ff 75 c0             	pushl  -0x40(%ebp)
  1013d4:	e8 1d 2f 00 00       	call   1042f6 <vfs_close>
  1013d9:	83 c4 10             	add    $0x10,%esp

	        cpu->eax = 0;
  1013dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1013df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    else
	    {
	        cpu->eax = (uint32_t) -1;
	    }
	}
	    break;
  1013e5:	e9 11 05 00 00       	jmp    1018fb <syscall+0x813>

	        cpu->eax = 0;
	    }
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  1013ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ed:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  1013f3:	e9 03 05 00 00       	jmp    1018fb <syscall+0x813>

	case 12: /* fwrite */
	{
        vfs_reset_error();
  1013f8:	e8 ef 28 00 00       	call   103cec <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  1013fd:	8b 45 08             	mov    0x8(%ebp),%eax
  101400:	8b 40 04             	mov    0x4(%eax),%eax
  101403:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	    if(handle != 0) {
  101406:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  10140a:	74 25                	je     101431 <syscall+0x349>
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  10140c:	8b 45 08             	mov    0x8(%ebp),%eax
  10140f:	8b 50 0c             	mov    0xc(%eax),%edx
  101412:	8b 45 08             	mov    0x8(%ebp),%eax
  101415:	8b 40 08             	mov    0x8(%eax),%eax
  101418:	6a 01                	push   $0x1
  10141a:	52                   	push   %edx
  10141b:	50                   	push   %eax
  10141c:	ff 75 c4             	pushl  -0x3c(%ebp)
  10141f:	e8 91 2f 00 00       	call   1043b5 <vfs_write>
  101424:	83 c4 10             	add    $0x10,%esp
  101427:	8b 55 08             	mov    0x8(%ebp),%edx
  10142a:	89 02                	mov    %eax,(%edx)
	    else
	    {
            cpu->eax = RW_ERR_VFS;
	    }
	}
	    break;
  10142c:	e9 ca 04 00 00       	jmp    1018fb <syscall+0x813>
	    if(handle != 0) {
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
	    }
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  101431:	8b 45 08             	mov    0x8(%ebp),%eax
  101434:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  10143a:	e9 bc 04 00 00       	jmp    1018fb <syscall+0x813>

	case 13: /* fread */
	{
        vfs_reset_error();
  10143f:	e8 a8 28 00 00       	call   103cec <vfs_reset_error>
        struct res_handle* handle = (void*) cpu->ebx;
  101444:	8b 45 08             	mov    0x8(%ebp),%eax
  101447:	8b 40 04             	mov    0x4(%eax),%eax
  10144a:	89 45 c8             	mov    %eax,-0x38(%ebp)
        if(handle != 0) {
  10144d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  101451:	74 25                	je     101478 <syscall+0x390>
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  101453:	8b 45 08             	mov    0x8(%ebp),%eax
  101456:	8b 50 0c             	mov    0xc(%eax),%edx
  101459:	8b 45 08             	mov    0x8(%ebp),%eax
  10145c:	8b 40 08             	mov    0x8(%eax),%eax
  10145f:	6a 01                	push   $0x1
  101461:	52                   	push   %edx
  101462:	50                   	push   %eax
  101463:	ff 75 c8             	pushl  -0x38(%ebp)
  101466:	e8 c1 2e 00 00       	call   10432c <vfs_read>
  10146b:	83 c4 10             	add    $0x10,%esp
  10146e:	8b 55 08             	mov    0x8(%ebp),%edx
  101471:	89 02                	mov    %eax,(%edx)
        else
        {
            cpu->eax = RW_ERR_VFS;
        }
	}
	    break;
  101473:	e9 83 04 00 00       	jmp    1018fb <syscall+0x813>
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
        {
            cpu->eax = RW_ERR_VFS;
  101478:	8b 45 08             	mov    0x8(%ebp),%eax
  10147b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  101481:	e9 75 04 00 00       	jmp    1018fb <syscall+0x813>

	case 14: /* fmkfifo */
	{
        vfs_reset_error();
  101486:	e8 61 28 00 00       	call   103cec <vfs_reset_error>
        char* name = strclone((char*) cpu->ebx);
  10148b:	8b 45 08             	mov    0x8(%ebp),%eax
  10148e:	8b 40 04             	mov    0x4(%eax),%eax
  101491:	83 ec 0c             	sub    $0xc,%esp
  101494:	50                   	push   %eax
  101495:	e8 82 26 00 00       	call   103b1c <strclone>
  10149a:	83 c4 10             	add    $0x10,%esp
  10149d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  1014a0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
  1014a7:	e8 9b 0f 00 00       	call   102447 <ramfs_fifo_driver_struct>
  1014ac:	83 ec 04             	sub    $0x4,%esp
  1014af:	8d 55 9c             	lea    -0x64(%ebp),%edx
  1014b2:	52                   	push   %edx
  1014b3:	50                   	push   %eax
  1014b4:	ff 75 cc             	pushl  -0x34(%ebp)
  1014b7:	e8 3e 2d 00 00       	call   1041fa <vfs_create_kfile>
  1014bc:	83 c4 10             	add    $0x10,%esp

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  1014bf:	83 ec 08             	sub    $0x8,%esp
  1014c2:	6a 03                	push   $0x3
  1014c4:	ff 75 cc             	pushl  -0x34(%ebp)
  1014c7:	e8 cd 2d 00 00       	call   104299 <vfs_open>
  1014cc:	83 c4 10             	add    $0x10,%esp
  1014cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if(handle) {
  1014d2:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  1014d6:	74 18                	je     1014f0 <syscall+0x408>
            register_handle(handle);
  1014d8:	83 ec 0c             	sub    $0xc,%esp
  1014db:	ff 75 d0             	pushl  -0x30(%ebp)
  1014de:	e8 29 17 00 00       	call   102c0c <register_handle>
  1014e3:	83 c4 10             	add    $0x10,%esp
            cpu->eax = (uint32_t) handle;
  1014e6:	8b 55 d0             	mov    -0x30(%ebp),%edx
  1014e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1014ec:	89 10                	mov    %edx,(%eax)
  1014ee:	eb 09                	jmp    1014f9 <syscall+0x411>
        }
        else
        {
            cpu->eax = 0;
  1014f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1014f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  1014f9:	83 ec 0c             	sub    $0xc,%esp
  1014fc:	ff 75 cc             	pushl  -0x34(%ebp)
  1014ff:	e8 14 24 00 00       	call   103918 <free>
  101504:	83 c4 10             	add    $0x10,%esp
	}
	    break;
  101507:	e9 ef 03 00 00       	jmp    1018fb <syscall+0x813>

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
  10150c:	e8 bc 16 00 00       	call   102bcd <get_current_task>
  101511:	8b 50 2c             	mov    0x2c(%eax),%edx
  101514:	8b 45 08             	mov    0x8(%ebp),%eax
  101517:	89 10                	mov    %edx,(%eax)
        vfs_reset_error();
  101519:	e8 ce 27 00 00       	call   103cec <vfs_reset_error>
	}
	    break;
  10151e:	e9 d8 03 00 00       	jmp    1018fb <syscall+0x813>

	case 16: /* favailable */
	{
	    cpu->eax = vfs_available((void*)cpu->ebx);
  101523:	8b 45 08             	mov    0x8(%ebp),%eax
  101526:	8b 40 04             	mov    0x4(%eax),%eax
  101529:	83 ec 0c             	sub    $0xc,%esp
  10152c:	50                   	push   %eax
  10152d:	e8 0d 2f 00 00       	call   10443f <vfs_available>
  101532:	83 c4 10             	add    $0x10,%esp
  101535:	8b 55 08             	mov    0x8(%ebp),%edx
  101538:	89 02                	mov    %eax,(%edx)
	}
	    break;
  10153a:	e9 bc 03 00 00       	jmp    1018fb <syscall+0x813>

	case 17: /* getExecPathChild */
	{
		char* path = vfs_get_child_of_exec_path(cpu->ebx);
  10153f:	8b 45 08             	mov    0x8(%ebp),%eax
  101542:	8b 40 04             	mov    0x4(%eax),%eax
  101545:	83 ec 0c             	sub    $0xc,%esp
  101548:	50                   	push   %eax
  101549:	e8 13 2c 00 00       	call   104161 <vfs_get_child_of_exec_path>
  10154e:	83 c4 10             	add    $0x10,%esp
  101551:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		if(path != 0 && cpu->ecx != 0) {
  101554:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  101558:	74 3e                	je     101598 <syscall+0x4b0>
  10155a:	8b 45 08             	mov    0x8(%ebp),%eax
  10155d:	8b 40 08             	mov    0x8(%eax),%eax
  101560:	85 c0                	test   %eax,%eax
  101562:	74 34                	je     101598 <syscall+0x4b0>
			strcpy((char*)cpu->ecx, path);
  101564:	8b 45 08             	mov    0x8(%ebp),%eax
  101567:	8b 40 08             	mov    0x8(%eax),%eax
  10156a:	83 ec 08             	sub    $0x8,%esp
  10156d:	ff 75 d4             	pushl  -0x2c(%ebp)
  101570:	50                   	push   %eax
  101571:	e8 83 25 00 00       	call   103af9 <strcpy>
  101576:	83 c4 10             	add    $0x10,%esp
			free(path);
  101579:	83 ec 0c             	sub    $0xc,%esp
  10157c:	ff 75 d4             	pushl  -0x2c(%ebp)
  10157f:	e8 94 23 00 00       	call   103918 <free>
  101584:	83 c4 10             	add    $0x10,%esp

			cpu->eax = cpu->ecx;
  101587:	8b 45 08             	mov    0x8(%ebp),%eax
  10158a:	8b 50 08             	mov    0x8(%eax),%edx
  10158d:	8b 45 08             	mov    0x8(%ebp),%eax
  101590:	89 10                	mov    %edx,(%eax)

	case 17: /* getExecPathChild */
	{
		char* path = vfs_get_child_of_exec_path(cpu->ebx);

		if(path != 0 && cpu->ecx != 0) {
  101592:	90                   	nop    
		else
		{
			cpu->eax = 0;
		}
	}
		break;
  101593:	e9 63 03 00 00       	jmp    1018fb <syscall+0x813>

			cpu->eax = cpu->ecx;
		}
		else
		{
			cpu->eax = 0;
  101598:	8b 45 08             	mov    0x8(%ebp),%eax
  10159b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		}
	}
		break;
  1015a1:	e9 55 03 00 00       	jmp    1018fb <syscall+0x813>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  1015a6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	    switch(cpu->ebx) {
  1015ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1015b0:	8b 40 04             	mov    0x4(%eax),%eax
  1015b3:	83 f8 02             	cmp    $0x2,%eax
  1015b6:	74 17                	je     1015cf <syscall+0x4e7>
  1015b8:	83 f8 03             	cmp    $0x3,%eax
  1015bb:	74 1f                	je     1015dc <syscall+0x4f4>
  1015bd:	83 f8 01             	cmp    $0x1,%eax
  1015c0:	75 27                	jne    1015e9 <syscall+0x501>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  1015c2:	e8 06 16 00 00       	call   102bcd <get_current_task>
  1015c7:	8b 40 30             	mov    0x30(%eax),%eax
  1015ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
	        break;
  1015cd:	eb 25                	jmp    1015f4 <syscall+0x50c>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  1015cf:	e8 f9 15 00 00       	call   102bcd <get_current_task>
  1015d4:	8b 40 38             	mov    0x38(%eax),%eax
  1015d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
            break;
  1015da:	eb 18                	jmp    1015f4 <syscall+0x50c>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  1015dc:	e8 ec 15 00 00       	call   102bcd <get_current_task>
  1015e1:	8b 40 34             	mov    0x34(%eax),%eax
  1015e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
            break;
  1015e7:	eb 0b                	jmp    1015f4 <syscall+0x50c>
        default:
            handle = get_current_task()->stdout;
  1015e9:	e8 df 15 00 00       	call   102bcd <get_current_task>
  1015ee:	8b 40 30             	mov    0x30(%eax),%eax
  1015f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
            break;
	    }

	    cpu->eax = (uint32_t) handle;
  1015f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1015f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1015fa:	89 10                	mov    %edx,(%eax)
	}
	    break;
  1015fc:	e9 fa 02 00 00       	jmp    1018fb <syscall+0x813>

	case 21: /* fopenpmhandle */
	{
	    vfs_reset_error();
  101601:	e8 e6 26 00 00       	call   103cec <vfs_reset_error>
	    char* path = strclone((char*)cpu->ecx);
  101606:	8b 45 08             	mov    0x8(%ebp),%eax
  101609:	8b 40 08             	mov    0x8(%eax),%eax
  10160c:	83 ec 0c             	sub    $0xc,%esp
  10160f:	50                   	push   %eax
  101610:	e8 07 25 00 00       	call   103b1c <strclone>
  101615:	83 c4 10             	add    $0x10,%esp
  101618:	89 45 dc             	mov    %eax,-0x24(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  10161b:	c7 45 e4 02 00 00 00 	movl   $0x2,-0x1c(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  101622:	8b 45 08             	mov    0x8(%ebp),%eax
  101625:	8b 40 04             	mov    0x4(%eax),%eax
  101628:	83 f8 02             	cmp    $0x2,%eax
  10162b:	75 07                	jne    101634 <syscall+0x54c>
	        fm = FM_READ;
  10162d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	    }

	    open = vfs_open(path, fm);
  101634:	83 ec 08             	sub    $0x8,%esp
  101637:	ff 75 e4             	pushl  -0x1c(%ebp)
  10163a:	ff 75 dc             	pushl  -0x24(%ebp)
  10163d:	e8 57 2c 00 00       	call   104299 <vfs_open>
  101642:	83 c4 10             	add    $0x10,%esp
  101645:	89 45 e0             	mov    %eax,-0x20(%ebp)

	    free(path);
  101648:	83 ec 0c             	sub    $0xc,%esp
  10164b:	ff 75 dc             	pushl  -0x24(%ebp)
  10164e:	e8 c5 22 00 00       	call   103918 <free>
  101653:	83 c4 10             	add    $0x10,%esp

	    if(!open) {
  101656:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  10165a:	75 0e                	jne    10166a <syscall+0x582>
	        cpu->eax = (uint32_t) -1;
  10165c:	8b 45 08             	mov    0x8(%ebp),%eax
  10165f:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  101665:	e9 91 02 00 00       	jmp    1018fb <syscall+0x813>
	    }

	    struct res_handle* oldhandle = 0;
  10166a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

        switch(cpu->ebx) {
  101671:	8b 45 08             	mov    0x8(%ebp),%eax
  101674:	8b 40 04             	mov    0x4(%eax),%eax
  101677:	83 f8 02             	cmp    $0x2,%eax
  10167a:	74 22                	je     10169e <syscall+0x5b6>
  10167c:	83 f8 03             	cmp    $0x3,%eax
  10167f:	74 35                	je     1016b6 <syscall+0x5ce>
  101681:	83 f8 01             	cmp    $0x1,%eax
  101684:	75 48                	jne    1016ce <syscall+0x5e6>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  101686:	e8 42 15 00 00       	call   102bcd <get_current_task>
  10168b:	8b 40 30             	mov    0x30(%eax),%eax
  10168e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            get_current_task()->stdout = open;
  101691:	e8 37 15 00 00       	call   102bcd <get_current_task>
  101696:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101699:	89 50 30             	mov    %edx,0x30(%eax)
            break;
  10169c:	eb 46                	jmp    1016e4 <syscall+0x5fc>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  10169e:	e8 2a 15 00 00       	call   102bcd <get_current_task>
  1016a3:	8b 40 38             	mov    0x38(%eax),%eax
  1016a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
            get_current_task()->stdin = open;
  1016a9:	e8 1f 15 00 00       	call   102bcd <get_current_task>
  1016ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1016b1:	89 50 38             	mov    %edx,0x38(%eax)
            break;
  1016b4:	eb 2e                	jmp    1016e4 <syscall+0x5fc>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  1016b6:	e8 12 15 00 00       	call   102bcd <get_current_task>
  1016bb:	8b 40 34             	mov    0x34(%eax),%eax
  1016be:	89 45 e8             	mov    %eax,-0x18(%ebp)
            get_current_task()->stderr = open;
  1016c1:	e8 07 15 00 00       	call   102bcd <get_current_task>
  1016c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1016c9:	89 50 34             	mov    %edx,0x34(%eax)
            break;
  1016cc:	eb 16                	jmp    1016e4 <syscall+0x5fc>
        default:
            oldhandle = get_current_task()->stdout;
  1016ce:	e8 fa 14 00 00       	call   102bcd <get_current_task>
  1016d3:	8b 40 30             	mov    0x30(%eax),%eax
  1016d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
            get_current_task()->stdout = open;
  1016d9:	e8 ef 14 00 00       	call   102bcd <get_current_task>
  1016de:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1016e1:	89 50 30             	mov    %edx,0x30(%eax)
            break;
        }

        if(oldhandle != 0) {
  1016e4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  1016e8:	74 0e                	je     1016f8 <syscall+0x610>
            vfs_close(oldhandle);
  1016ea:	83 ec 0c             	sub    $0xc,%esp
  1016ed:	ff 75 e8             	pushl  -0x18(%ebp)
  1016f0:	e8 01 2c 00 00       	call   1042f6 <vfs_close>
  1016f5:	83 c4 10             	add    $0x10,%esp
        }

        cpu->eax = 0;
  1016f8:	8b 45 08             	mov    0x8(%ebp),%eax
  1016fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  101701:	e9 f5 01 00 00       	jmp    1018fb <syscall+0x813>

	case 30: /* return_rpc */
	{
	    cpu = return_rpc_call(cpu);
  101706:	83 ec 0c             	sub    $0xc,%esp
  101709:	ff 75 08             	pushl  0x8(%ebp)
  10170c:	e8 99 1c 00 00       	call   1033aa <return_rpc_call>
  101711:	83 c4 10             	add    $0x10,%esp
  101714:	89 45 08             	mov    %eax,0x8(%ebp)
	}
	    break;
  101717:	e9 df 01 00 00       	jmp    1018fb <syscall+0x813>

	case 31: /* call_rpc */
	{
	    int PID = cpu->ebx;
  10171c:	8b 45 08             	mov    0x8(%ebp),%eax
  10171f:	8b 40 04             	mov    0x4(%eax),%eax
  101722:	89 45 ec             	mov    %eax,-0x14(%ebp)

	    //TODO create RPC for U2U
	}
	    break;
  101725:	e9 d1 01 00 00       	jmp    1018fb <syscall+0x813>

	case 32: /* set_rpc_handler */
	{
	    uint32_t handlerAddr = cpu->ebx;
  10172a:	8b 45 08             	mov    0x8(%ebp),%eax
  10172d:	8b 40 04             	mov    0x4(%eax),%eax
  101730:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    if(get_current_task()->rpc_handler_addr == 0) {
  101733:	e8 95 14 00 00       	call   102bcd <get_current_task>
  101738:	8b 40 1c             	mov    0x1c(%eax),%eax
  10173b:	85 c0                	test   %eax,%eax
  10173d:	0f 85 b1 01 00 00    	jne    1018f4 <syscall+0x80c>
	        get_current_task()->rpc_handler_addr = handlerAddr;
  101743:	e8 85 14 00 00       	call   102bcd <get_current_task>
  101748:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10174b:	89 50 1c             	mov    %edx,0x1c(%eax)
	    }
	}
	    break;
  10174e:	e9 a8 01 00 00       	jmp    1018fb <syscall+0x813>

	case 33: /* fetch_rpc_data */
	{
	    cpu->eax = 0;
  101753:	8b 45 08             	mov    0x8(%ebp),%eax
  101756:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    void* dest = (void*) cpu->ebx;
  10175c:	8b 45 08             	mov    0x8(%ebp),%eax
  10175f:	8b 40 04             	mov    0x4(%eax),%eax
  101762:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    if(get_current_task()->rpc != 0) {
  101765:	e8 63 14 00 00       	call   102bcd <get_current_task>
  10176a:	8b 40 18             	mov    0x18(%eax),%eax
  10176d:	85 c0                	test   %eax,%eax
  10176f:	0f 84 82 01 00 00    	je     1018f7 <syscall+0x80f>
	        memcpy(dest, get_current_task()->rpc->data, get_current_task()->rpc->dataSize);
  101775:	e8 53 14 00 00       	call   102bcd <get_current_task>
  10177a:	8b 40 18             	mov    0x18(%eax),%eax
  10177d:	8b 58 10             	mov    0x10(%eax),%ebx
  101780:	e8 48 14 00 00       	call   102bcd <get_current_task>
  101785:	8b 40 18             	mov    0x18(%eax),%eax
  101788:	8b 40 0c             	mov    0xc(%eax),%eax
  10178b:	83 ec 04             	sub    $0x4,%esp
  10178e:	53                   	push   %ebx
  10178f:	50                   	push   %eax
  101790:	ff 75 f4             	pushl  -0xc(%ebp)
  101793:	e8 02 22 00 00       	call   10399a <memcpy>
  101798:	83 c4 10             	add    $0x10,%esp
	        cpu->eax = get_current_task()->rpc->dataSize;
  10179b:	e8 2d 14 00 00       	call   102bcd <get_current_task>
  1017a0:	8b 40 18             	mov    0x18(%eax),%eax
  1017a3:	8b 50 10             	mov    0x10(%eax),%edx
  1017a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1017a9:	89 10                	mov    %edx,(%eax)
	    }
	}
	    break;
  1017ab:	e9 4b 01 00 00       	jmp    1018fb <syscall+0x813>

	case 40:
	{
	    cpu->eax = register_irq_rpc(cpu->ebx);
  1017b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1017b3:	8b 40 04             	mov    0x4(%eax),%eax
  1017b6:	83 ec 0c             	sub    $0xc,%esp
  1017b9:	50                   	push   %eax
  1017ba:	e8 42 f7 ff ff       	call   100f01 <register_irq_rpc>
  1017bf:	83 c4 10             	add    $0x10,%esp
  1017c2:	8b 55 08             	mov    0x8(%ebp),%edx
  1017c5:	89 02                	mov    %eax,(%edx)
	}
	    break;
  1017c7:	e9 2f 01 00 00       	jmp    1018fb <syscall+0x813>

	case 50:
	{
	    cpu->eax = require_port((uint16_t)cpu->ebx);
  1017cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1017cf:	8b 40 04             	mov    0x4(%eax),%eax
  1017d2:	25 ff ff 00 00       	and    $0xffff,%eax
  1017d7:	83 ec 0c             	sub    $0xc,%esp
  1017da:	50                   	push   %eax
  1017db:	e8 9a 06 00 00       	call   101e7a <require_port>
  1017e0:	83 c4 10             	add    $0x10,%esp
  1017e3:	8b 55 08             	mov    0x8(%ebp),%edx
  1017e6:	89 02                	mov    %eax,(%edx)
	}
	    break;
  1017e8:	e9 0e 01 00 00       	jmp    1018fb <syscall+0x813>

	case 51:
	{
	    cpu->eax = port_out(cpu->ebx, (uint16_t)cpu->ecx, cpu->edx);
  1017ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1017f0:	8b 48 0c             	mov    0xc(%eax),%ecx
  1017f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1017f6:	8b 40 08             	mov    0x8(%eax),%eax
  1017f9:	89 c2                	mov    %eax,%edx
  1017fb:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  101801:	8b 45 08             	mov    0x8(%ebp),%eax
  101804:	8b 40 04             	mov    0x4(%eax),%eax
  101807:	83 ec 04             	sub    $0x4,%esp
  10180a:	51                   	push   %ecx
  10180b:	52                   	push   %edx
  10180c:	50                   	push   %eax
  10180d:	e8 6c 07 00 00       	call   101f7e <port_out>
  101812:	83 c4 10             	add    $0x10,%esp
  101815:	8b 55 08             	mov    0x8(%ebp),%edx
  101818:	89 02                	mov    %eax,(%edx)
	}
	    break;
  10181a:	e9 dc 00 00 00       	jmp    1018fb <syscall+0x813>

	case 52:
	{
	    cpu->eax = port_in(cpu->ebx, (uint16_t)cpu->ecx);
  10181f:	8b 45 08             	mov    0x8(%ebp),%eax
  101822:	8b 40 08             	mov    0x8(%eax),%eax
  101825:	89 c2                	mov    %eax,%edx
  101827:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  10182d:	8b 45 08             	mov    0x8(%ebp),%eax
  101830:	8b 40 04             	mov    0x4(%eax),%eax
  101833:	83 ec 08             	sub    $0x8,%esp
  101836:	52                   	push   %edx
  101837:	50                   	push   %eax
  101838:	e8 89 06 00 00       	call   101ec6 <port_in>
  10183d:	83 c4 10             	add    $0x10,%esp
  101840:	8b 55 08             	mov    0x8(%ebp),%edx
  101843:	89 02                	mov    %eax,(%edx)
	}
	    break;
  101845:	e9 b1 00 00 00       	jmp    1018fb <syscall+0x813>

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  10184a:	8b 45 08             	mov    0x8(%ebp),%eax
  10184d:	8b 40 04             	mov    0x4(%eax),%eax
  101850:	83 ec 08             	sub    $0x8,%esp
  101853:	50                   	push   %eax
  101854:	68 a0 71 10 00       	push   $0x1071a0
  101859:	e8 0f ed ff ff       	call   10056d <kprintf>
  10185e:	83 c4 10             	add    $0x10,%esp
  101861:	89 c2                	mov    %eax,%edx
  101863:	8b 45 08             	mov    0x8(%ebp),%eax
  101866:	89 10                	mov    %edx,(%eax)
		break;
  101868:	e9 8e 00 00 00       	jmp    1018fb <syscall+0x813>

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  10186d:	8b 45 08             	mov    0x8(%ebp),%eax
  101870:	8b 40 04             	mov    0x4(%eax),%eax
  101873:	83 ec 08             	sub    $0x8,%esp
  101876:	50                   	push   %eax
  101877:	68 a3 71 10 00       	push   $0x1071a3
  10187c:	e8 ec ec ff ff       	call   10056d <kprintf>
  101881:	83 c4 10             	add    $0x10,%esp
  101884:	89 c2                	mov    %eax,%edx
  101886:	8b 45 08             	mov    0x8(%ebp),%eax
  101889:	89 10                	mov    %edx,(%eax)
		break;
  10188b:	eb 6e                	jmp    1018fb <syscall+0x813>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  10188d:	8b 45 08             	mov    0x8(%ebp),%eax
  101890:	8b 40 04             	mov    0x4(%eax),%eax
  101893:	83 ec 0c             	sub    $0xc,%esp
  101896:	50                   	push   %eax
  101897:	e8 c7 39 00 00       	call   105263 <vmm_alloc_ucont>
  10189c:	83 c4 10             	add    $0x10,%esp
  10189f:	89 c2                	mov    %eax,%edx
  1018a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1018a4:	89 10                	mov    %edx,(%eax)
		break;
  1018a6:	eb 53                	jmp    1018fb <syscall+0x813>

	case 204: /* vmm_free */
		cpu->eax = 0;
  1018a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1018ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  1018b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1018b4:	8b 40 04             	mov    0x4(%eax),%eax
  1018b7:	3d ff 0f 40 01       	cmp    $0x1400fff,%eax
  1018bc:	76 3c                	jbe    1018fa <syscall+0x812>
			vmm_free((void*) cpu->ebx);
  1018be:	8b 45 08             	mov    0x8(%ebp),%eax
  1018c1:	8b 40 04             	mov    0x4(%eax),%eax
  1018c4:	83 ec 0c             	sub    $0xc,%esp
  1018c7:	50                   	push   %eax
  1018c8:	e8 fc 37 00 00       	call   1050c9 <vmm_free>
  1018cd:	83 c4 10             	add    $0x10,%esp
		}
		break;
  1018d0:	eb 29                	jmp    1018fb <syscall+0x813>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  1018d2:	e8 9a 02 00 00       	call   101b71 <pmm_print_stats>
		break;
  1018d7:	eb 22                	jmp    1018fb <syscall+0x813>

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  1018d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1018dc:	8b 00                	mov    (%eax),%eax
  1018de:	83 ec 08             	sub    $0x8,%esp
  1018e1:	50                   	push   %eax
  1018e2:	68 a6 71 10 00       	push   $0x1071a6
  1018e7:	e8 81 ec ff ff       	call   10056d <kprintf>
  1018ec:	83 c4 10             	add    $0x10,%esp
  1018ef:	eb 0a                	jmp    1018fb <syscall+0x813>
    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
        break;
  1018f1:	90                   	nop    
  1018f2:	eb 07                	jmp    1018fb <syscall+0x813>
	    uint32_t handlerAddr = cpu->ebx;
	    if(get_current_task()->rpc_handler_addr == 0) {
	        get_current_task()->rpc_handler_addr = handlerAddr;
	    }
	}
	    break;
  1018f4:	90                   	nop    
  1018f5:	eb 04                	jmp    1018fb <syscall+0x813>
	    if(get_current_task()->rpc != 0) {
	        memcpy(dest, get_current_task()->rpc->data, get_current_task()->rpc->dataSize);
	        cpu->eax = get_current_task()->rpc->dataSize;
	    }
	}
	    break;
  1018f7:	90                   	nop    
  1018f8:	eb 01                	jmp    1018fb <syscall+0x813>
	case 204: /* vmm_free */
		cpu->eax = 0;
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
			vmm_free((void*) cpu->ebx);
		}
		break;
  1018fa:	90                   	nop    
	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
		break;
	}

	return cpu;
  1018fb:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1018fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
  101901:	83 c4 00             	add    $0x0,%esp
  101904:	5b                   	pop    %ebx
  101905:	5e                   	pop    %esi
  101906:	5d                   	pop    %ebp
  101907:	c3                   	ret    

00101908 <kernel_main>:

void kernel_main(struct multiboot_info* mb_info) {
  101908:	55                   	push   %ebp
  101909:	89 e5                	mov    %esp,%ebp
  10190b:	83 ec 18             	sub    $0x18,%esp
	uint32_t kernel_init_pdir = vmm_init();
  10190e:	e8 84 3a 00 00       	call   105397 <vmm_init>
  101913:	89 45 f4             	mov    %eax,-0xc(%ebp)

	kprintf("Setting PIT interval...\n");
  101916:	83 ec 0c             	sub    $0xc,%esp
  101919:	68 f4 74 10 00       	push   $0x1074f4
  10191e:	e8 4a ec ff ff       	call   10056d <kprintf>
  101923:	83 c4 10             	add    $0x10,%esp

    outb(0x43, 0b00110100);
  101926:	83 ec 08             	sub    $0x8,%esp
  101929:	6a 34                	push   $0x34
  10192b:	6a 43                	push   $0x43
  10192d:	e8 79 07 00 00       	call   1020ab <outb>
  101932:	83 c4 10             	add    $0x10,%esp
    outb(0x40, 0x00);
  101935:	83 ec 08             	sub    $0x8,%esp
  101938:	6a 00                	push   $0x0
  10193a:	6a 40                	push   $0x40
  10193c:	e8 6a 07 00 00       	call   1020ab <outb>
  101941:	83 c4 10             	add    $0x10,%esp
    outb(0x40, 0x08);
  101944:	83 ec 08             	sub    $0x8,%esp
  101947:	6a 08                	push   $0x8
  101949:	6a 40                	push   $0x40
  10194b:	e8 5b 07 00 00       	call   1020ab <outb>
  101950:	83 c4 10             	add    $0x10,%esp

    kprintf("Initializing vfs...\n");
  101953:	83 ec 0c             	sub    $0xc,%esp
  101956:	68 0d 75 10 00       	push   $0x10750d
  10195b:	e8 0d ec ff ff       	call   10056d <kprintf>
  101960:	83 c4 10             	add    $0x10,%esp

    vfs_init_root();
  101963:	e8 91 30 00 00       	call   1049f9 <vfs_init_root>
    ramfs_fifo_init();
  101968:	e8 bb 0a 00 00       	call   102428 <ramfs_fifo_init>
    ramfs_block_init();
  10196d:	e8 8e 07 00 00       	call   102100 <ramfs_block_init>

    //driver_keyboard_init();


    map_address_active((uint32_t) mb_info,
  101972:	8b 55 08             	mov    0x8(%ebp),%edx
  101975:	8b 45 08             	mov    0x8(%ebp),%eax
  101978:	83 ec 04             	sub    $0x4,%esp
  10197b:	6a 00                	push   $0x0
  10197d:	52                   	push   %edx
  10197e:	50                   	push   %eax
  10197f:	e8 f0 36 00 00       	call   105074 <map_address_active>
  101984:	83 c4 10             	add    $0x10,%esp
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  101987:	8b 45 08             	mov    0x8(%ebp),%eax
  10198a:	8b 40 18             	mov    0x18(%eax),%eax
  10198d:	89 c2                	mov    %eax,%edx
  10198f:	8b 45 08             	mov    0x8(%ebp),%eax
  101992:	8b 40 18             	mov    0x18(%eax),%eax
  101995:	83 ec 04             	sub    $0x4,%esp
  101998:	6a 00                	push   $0x0
  10199a:	52                   	push   %edx
  10199b:	50                   	push   %eax
  10199c:	e8 d3 36 00 00       	call   105074 <map_address_active>
  1019a1:	83 c4 10             	add    $0x10,%esp
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  1019a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1019a7:	8b 00                	mov    (%eax),%eax
  1019a9:	83 e0 08             	and    $0x8,%eax
  1019ac:	85 c0                	test   %eax,%eax
  1019ae:	0f 84 9b 00 00 00    	je     101a4f <kernel_main+0x147>
        vmm_map_range(mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
  1019b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1019b7:	8b 40 18             	mov    0x18(%eax),%eax
  1019ba:	8b 40 04             	mov    0x4(%eax),%eax
  1019bd:	89 c2                	mov    %eax,%edx
  1019bf:	8b 45 08             	mov    0x8(%ebp),%eax
  1019c2:	8b 40 18             	mov    0x18(%eax),%eax
  1019c5:	8b 00                	mov    (%eax),%eax
  1019c7:	89 d1                	mov    %edx,%ecx
  1019c9:	29 c1                	sub    %eax,%ecx
  1019cb:	89 c8                	mov    %ecx,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  1019cd:	89 c1                	mov    %eax,%ecx
                      mb_info->mi_mods_addr[0].start,
  1019cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1019d2:	8b 40 18             	mov    0x18(%eax),%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  1019d5:	8b 10                	mov    (%eax),%edx
  1019d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1019da:	8b 40 18             	mov    0x18(%eax),%eax
  1019dd:	8b 00                	mov    (%eax),%eax
  1019df:	6a 00                	push   $0x0
  1019e1:	51                   	push   %ecx
  1019e2:	52                   	push   %edx
  1019e3:	50                   	push   %eax
  1019e4:	e8 ab 35 00 00       	call   104f94 <vmm_map_range>
  1019e9:	83 c4 10             	add    $0x10,%esp
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  1019ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1019ef:	8b 40 18             	mov    0x18(%eax),%eax
  1019f2:	8b 40 04             	mov    0x4(%eax),%eax
  1019f5:	89 c2                	mov    %eax,%edx
  1019f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1019fa:	8b 40 18             	mov    0x18(%eax),%eax
  1019fd:	8b 00                	mov    (%eax),%eax
  1019ff:	89 d1                	mov    %edx,%ecx
  101a01:	29 c1                	sub    %eax,%ecx
  101a03:	89 c8                	mov    %ecx,%eax
  101a05:	83 ec 08             	sub    $0x8,%esp
  101a08:	50                   	push   %eax
  101a09:	68 24 75 10 00       	push   $0x107524
  101a0e:	e8 5a eb ff ff       	call   10056d <kprintf>
  101a13:	83 c4 10             	add    $0x10,%esp
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  101a16:	8b 45 08             	mov    0x8(%ebp),%eax
  101a19:	8b 40 18             	mov    0x18(%eax),%eax
  101a1c:	8b 50 04             	mov    0x4(%eax),%edx
  101a1f:	8b 45 08             	mov    0x8(%ebp),%eax
  101a22:	8b 40 18             	mov    0x18(%eax),%eax
  101a25:	8b 00                	mov    (%eax),%eax
  101a27:	83 ec 04             	sub    $0x4,%esp
  101a2a:	52                   	push   %edx
  101a2b:	50                   	push   %eax
  101a2c:	68 64 75 10 00       	push   $0x107564
  101a31:	e8 37 eb ff ff       	call   10056d <kprintf>
  101a36:	83 c4 10             	add    $0x10,%esp

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  101a39:	8b 45 08             	mov    0x8(%ebp),%eax
  101a3c:	8b 40 18             	mov    0x18(%eax),%eax
  101a3f:	8b 00                	mov    (%eax),%eax
  101a41:	83 ec 0c             	sub    $0xc,%esp
  101a44:	50                   	push   %eax
  101a45:	e8 37 0e 00 00       	call   102881 <tar_load_ramfs>
  101a4a:	83 c4 10             	add    $0x10,%esp
  101a4d:	eb 10                	jmp    101a5f <kernel_main+0x157>
    } else {
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  101a4f:	83 ec 0c             	sub    $0xc,%esp
  101a52:	68 80 75 10 00       	push   $0x107580
  101a57:	e8 11 eb ff ff       	call   10056d <kprintf>
  101a5c:	83 c4 10             	add    $0x10,%esp
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  101a5f:	83 ec 0c             	sub    $0xc,%esp
  101a62:	68 b4 75 10 00       	push   $0x1075b4
  101a67:	e8 01 eb ff ff       	call   10056d <kprintf>
  101a6c:	83 c4 10             	add    $0x10,%esp
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  101a6f:	e8 50 0f 00 00       	call   1029c4 <ramfs_vga_driver_struct>
  101a74:	83 ec 04             	sub    $0x4,%esp
  101a77:	6a 00                	push   $0x0
  101a79:	50                   	push   %eax
  101a7a:	68 d4 75 10 00       	push   $0x1075d4
  101a7f:	e8 76 27 00 00       	call   1041fa <vfs_create_kfile>
  101a84:	83 c4 10             	add    $0x10,%esp

    if(vfs_exists("/ibin/init")) {
  101a87:	83 ec 0c             	sub    $0xc,%esp
  101a8a:	68 dd 75 10 00       	push   $0x1075dd
  101a8f:	e8 ee 29 00 00       	call   104482 <vfs_exists>
  101a94:	83 c4 10             	add    $0x10,%esp
  101a97:	85 c0                	test   %eax,%eax
  101a99:	74 2f                	je     101aca <kernel_main+0x1c2>
        kprintf("[init] /ibin/init found. Executing...\n");
  101a9b:	83 ec 0c             	sub    $0xc,%esp
  101a9e:	68 e8 75 10 00       	push   $0x1075e8
  101aa3:	e8 c5 ea ff ff       	call   10056d <kprintf>
  101aa8:	83 c4 10             	add    $0x10,%esp

        vfs_exec("/ibin/init", 0, 0, 0, 0, 0);
  101aab:	83 ec 08             	sub    $0x8,%esp
  101aae:	6a 00                	push   $0x0
  101ab0:	6a 00                	push   $0x0
  101ab2:	6a 00                	push   $0x0
  101ab4:	6a 00                	push   $0x0
  101ab6:	6a 00                	push   $0x0
  101ab8:	68 dd 75 10 00       	push   $0x1075dd
  101abd:	e8 11 2a 00 00       	call   1044d3 <vfs_exec>
  101ac2:	83 c4 20             	add    $0x20,%esp
        enableScheduling();
  101ac5:	e8 ea 10 00 00       	call   102bb4 <enableScheduling>
    }

	while(1);
  101aca:	eb fe                	jmp    101aca <kernel_main+0x1c2>

00101acc <pmm_alloc>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct exec_info {
  101acc:	55                   	push   %ebp
  101acd:	89 e5                	mov    %esp,%ebp
  101acf:	57                   	push   %edi
  101ad0:	56                   	push   %esi
  101ad1:	53                   	push   %ebx
  101ad2:	83 ec 10             	sub    $0x10,%esp
    char* execPath;
    char* stdin;
  101ad5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101adc:	eb 79                	jmp    101b57 <pmm_alloc+0x8b>
    char* stdout;
  101ade:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101ae1:	8b 04 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%eax
  101ae8:	85 c0                	test   %eax,%eax
  101aea:	74 68                	je     101b54 <pmm_alloc+0x88>
    char* stderr;
};
  101aec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101af3:	eb 59                	jmp    101b4e <pmm_alloc+0x82>

  101af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101af8:	8b 14 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%edx
  101aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101b02:	bb 01 00 00 00       	mov    $0x1,%ebx
  101b07:	89 de                	mov    %ebx,%esi
  101b09:	88 c1                	mov    %al,%cl
  101b0b:	d3 e6                	shl    %cl,%esi
  101b0d:	89 f0                	mov    %esi,%eax
  101b0f:	21 d0                	and    %edx,%eax
  101b11:	85 c0                	test   %eax,%eax
  101b13:	74 36                	je     101b4b <pmm_alloc+0x7f>
struct cpu_state* syscall(struct cpu_state* cpu) {
  101b15:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b18:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101b1b:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101b22:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101b25:	be 01 00 00 00       	mov    $0x1,%esi
  101b2a:	89 f7                	mov    %esi,%edi
  101b2c:	88 d1                	mov    %dl,%cl
  101b2e:	d3 e7                	shl    %cl,%edi
  101b30:	89 fa                	mov    %edi,%edx
  101b32:	f7 d2                	not    %edx
  101b34:	21 da                	and    %ebx,%edx
  101b36:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)
    cpu = save_cpu_state(cpu);
  101b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b40:	c1 e0 05             	shl    $0x5,%eax
  101b43:	03 45 f0             	add    -0x10(%ebp),%eax
  101b46:	c1 e0 0c             	shl    $0xc,%eax
  101b49:	eb 1e                	jmp    101b69 <pmm_alloc+0x9d>
struct exec_info {
    char* execPath;
    char* stdin;
    char* stdout;
    char* stderr;
};
  101b4b:	ff 45 f0             	incl   -0x10(%ebp)
  101b4e:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  101b52:	7e a1                	jle    101af5 <pmm_alloc+0x29>
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct exec_info {
    char* execPath;
    char* stdin;
  101b54:	ff 45 ec             	incl   -0x14(%ebp)
  101b57:	81 7d ec ff 7f 00 00 	cmpl   $0x7fff,-0x14(%ebp)
  101b5e:	0f 8e 7a ff ff ff    	jle    101ade <pmm_alloc+0x12>
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
	case 1: /* exit */
		return terminate_current(cpu);

  101b64:	b8 00 00 00 00       	mov    $0x0,%eax
	case 2: /* pexists */
  101b69:	83 c4 10             	add    $0x10,%esp
  101b6c:	5b                   	pop    %ebx
  101b6d:	5e                   	pop    %esi
  101b6e:	5f                   	pop    %edi
  101b6f:	5d                   	pop    %ebp
  101b70:	c3                   	ret    

00101b71 <pmm_print_stats>:
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  101b71:	55                   	push   %ebp
  101b72:	89 e5                	mov    %esp,%ebp
  101b74:	57                   	push   %edi
  101b75:	56                   	push   %esi
  101b76:	53                   	push   %ebx
  101b77:	83 ec 0c             	sub    $0xc,%esp
	}
  101b7a:	a1 20 85 12 00       	mov    0x128520,%eax
  101b7f:	89 c7                	mov    %eax,%edi
  101b81:	c1 ef 0a             	shr    $0xa,%edi
  101b84:	83 ec 0c             	sub    $0xc,%esp
  101b87:	68 00 04 00 00       	push   $0x400
  101b8c:	e8 3e 00 00 00       	call   101bcf <pmm_get_free_space>
  101b91:	83 c4 10             	add    $0x10,%esp
  101b94:	89 c3                	mov    %eax,%ebx
  101b96:	a1 20 85 12 00       	mov    0x128520,%eax
  101b9b:	89 c6                	mov    %eax,%esi
  101b9d:	c1 ee 14             	shr    $0x14,%esi
  101ba0:	83 ec 0c             	sub    $0xc,%esp
  101ba3:	68 00 00 10 00       	push   $0x100000
  101ba8:	e8 22 00 00 00       	call   101bcf <pmm_get_free_space>
  101bad:	83 c4 10             	add    $0x10,%esp
  101bb0:	83 ec 0c             	sub    $0xc,%esp
  101bb3:	57                   	push   %edi
  101bb4:	53                   	push   %ebx
  101bb5:	56                   	push   %esi
  101bb6:	50                   	push   %eax
  101bb7:	68 10 76 10 00       	push   $0x107610
  101bbc:	e8 ac e9 ff ff       	call   10056d <kprintf>
  101bc1:	83 c4 20             	add    $0x20,%esp
	    break;

    case 3: /* exec */
  101bc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101bc7:	83 c4 00             	add    $0x0,%esp
  101bca:	5b                   	pop    %ebx
  101bcb:	5e                   	pop    %esi
  101bcc:	5f                   	pop    %edi
  101bcd:	5d                   	pop    %ebp
  101bce:	c3                   	ret    

00101bcf <pmm_get_free_space>:
    {
        char* path = strclone((char*) cpu->ebx);
  101bcf:	55                   	push   %ebp
  101bd0:	89 e5                	mov    %esp,%ebp
  101bd2:	56                   	push   %esi
  101bd3:	53                   	push   %ebx
  101bd4:	83 ec 10             	sub    $0x10,%esp

  101bd7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        struct exec_info* einp = (void*) cpu->edx;

  101bde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101be5:	eb 3c                	jmp    101c23 <pmm_get_free_space+0x54>
        struct exec_info ein = {
  101be7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101bee:	eb 2a                	jmp    101c1a <pmm_get_free_space+0x4b>
            .execPath = 0,
  101bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101bf3:	8b 14 85 c0 85 16 00 	mov    0x1685c0(,%eax,4),%edx
  101bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101bfd:	bb 01 00 00 00       	mov    $0x1,%ebx
  101c02:	89 de                	mov    %ebx,%esi
  101c04:	88 c1                	mov    %al,%cl
  101c06:	d3 e6                	shl    %cl,%esi
  101c08:	89 f0                	mov    %esi,%eax
  101c0a:	21 d0                	and    %edx,%eax
  101c0c:	85 c0                	test   %eax,%eax
  101c0e:	74 07                	je     101c17 <pmm_get_free_space+0x48>
            .stdin = 0,
  101c10:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
    {
        char* path = strclone((char*) cpu->ebx);

        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
  101c17:	ff 45 f4             	incl   -0xc(%ebp)
  101c1a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
  101c1e:	76 d0                	jbe    101bf0 <pmm_get_free_space+0x21>
    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);

        struct exec_info* einp = (void*) cpu->edx;

  101c20:	ff 45 f0             	incl   -0x10(%ebp)
  101c23:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
  101c2a:	76 bb                	jbe    101be7 <pmm_get_free_space+0x18>
            .execPath = 0,
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };

  101c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101c2f:	ba 00 00 00 00       	mov    $0x0,%edx
  101c34:	f7 75 08             	divl   0x8(%ebp)
        if(einp != 0) {
  101c37:	83 c4 10             	add    $0x10,%esp
  101c3a:	5b                   	pop    %ebx
  101c3b:	5e                   	pop    %esi
  101c3c:	5d                   	pop    %ebp
  101c3d:	c3                   	ret    

00101c3e <pmm_free>:
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
  101c3e:	55                   	push   %ebp
  101c3f:	89 e5                	mov    %esp,%ebp
  101c41:	57                   	push   %edi
  101c42:	56                   	push   %esi
  101c43:	53                   	push   %ebx
  101c44:	83 ec 10             	sub    $0x10,%esp
            ein.stdout = strclone(einp->stdout);
  101c47:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4a:	c1 e8 0c             	shr    $0xc,%eax
  101c4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
            ein.stderr = strclone(einp->stderr);
        }
  101c50:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c53:	83 e0 1f             	and    $0x1f,%eax
  101c56:	89 45 ec             	mov    %eax,-0x14(%ebp)

  101c59:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c5c:	c1 e8 05             	shr    $0x5,%eax
  101c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

  101c62:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c65:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101c68:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101c6f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101c72:	be 01 00 00 00       	mov    $0x1,%esi
  101c77:	89 f7                	mov    %esi,%edi
  101c79:	88 d1                	mov    %dl,%cl
  101c7b:	d3 e7                	shl    %cl,%edi
  101c7d:	89 fa                	mov    %edi,%edx
  101c7f:	09 da                	or     %ebx,%edx
  101c81:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)
        if(einp != 0) {
  101c88:	83 c4 10             	add    $0x10,%esp
  101c8b:	5b                   	pop    %ebx
  101c8c:	5e                   	pop    %esi
  101c8d:	5f                   	pop    %edi
  101c8e:	5d                   	pop    %ebp
  101c8f:	c3                   	ret    

00101c90 <pmm_mark_used>:
            free(ein.execPath);
            free(ein.stdin);
  101c90:	55                   	push   %ebp
  101c91:	89 e5                	mov    %esp,%ebp
  101c93:	57                   	push   %edi
  101c94:	56                   	push   %esi
  101c95:	53                   	push   %ebx
  101c96:	83 ec 10             	sub    $0x10,%esp
            free(ein.stdout);
  101c99:	8b 45 08             	mov    0x8(%ebp),%eax
  101c9c:	c1 e8 0c             	shr    $0xc,%eax
  101c9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            free(ein.stderr);
        }
  101ca2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101ca5:	83 e0 1f             	and    $0x1f,%eax
  101ca8:	89 45 ec             	mov    %eax,-0x14(%ebp)

  101cab:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101cae:	c1 e8 05             	shr    $0x5,%eax
  101cb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        free(path);
    }
  101cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101cb7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101cba:	8b 1c 95 c0 85 16 00 	mov    0x1685c0(,%edx,4),%ebx
  101cc1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101cc4:	be 01 00 00 00       	mov    $0x1,%esi
  101cc9:	89 f7                	mov    %esi,%edi
  101ccb:	88 d1                	mov    %dl,%cl
  101ccd:	d3 e7                	shl    %cl,%edi
  101ccf:	89 fa                	mov    %edi,%edx
  101cd1:	f7 d2                	not    %edx
  101cd3:	21 da                	and    %ebx,%edx
  101cd5:	89 14 85 c0 85 16 00 	mov    %edx,0x1685c0(,%eax,4)
        break;
  101cdc:	83 c4 10             	add    $0x10,%esp
  101cdf:	5b                   	pop    %ebx
  101ce0:	5e                   	pop    %esi
  101ce1:	5f                   	pop    %edi
  101ce2:	5d                   	pop    %ebp
  101ce3:	c3                   	ret    

00101ce4 <pmm_init>:

    case 4: /* getargs */
  101ce4:	55                   	push   %ebp
  101ce5:	89 e5                	mov    %esp,%ebp
  101ce7:	83 ec 28             	sub    $0x28,%esp
    {
  101cea:	8b 45 08             	mov    0x8(%ebp),%eax
  101ced:	8b 40 30             	mov    0x30(%eax),%eax
  101cf0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        cpu->eax = (uint32_t) get_current_task()->args;
  101cf3:	8b 45 08             	mov    0x8(%ebp),%eax
  101cf6:	8b 40 30             	mov    0x30(%eax),%eax
  101cf9:	89 c2                	mov    %eax,%edx
  101cfb:	8b 45 08             	mov    0x8(%ebp),%eax
  101cfe:	8b 40 2c             	mov    0x2c(%eax),%eax
  101d01:	8d 04 02             	lea    (%edx,%eax,1),%eax
    }
  101d04:	89 45 e0             	mov    %eax,-0x20(%ebp)
        break;

  101d07:	83 ec 04             	sub    $0x4,%esp
  101d0a:	68 00 00 02 00       	push   $0x20000
  101d0f:	6a 00                	push   $0x0
  101d11:	68 c0 85 16 00       	push   $0x1685c0
  101d16:	e8 51 1c 00 00       	call   10396c <memset>
  101d1b:	83 c4 10             	add    $0x10,%esp
    case 5: /* yield */
    {
  101d1e:	b8 c0 85 18 00       	mov    $0x1885c0,%eax
  101d23:	83 ec 04             	sub    $0x4,%esp
  101d26:	50                   	push   %eax
  101d27:	68 c0 85 16 00       	push   $0x1685c0
  101d2c:	68 4d 76 10 00       	push   $0x10764d
  101d31:	e8 37 e8 ff ff       	call   10056d <kprintf>
  101d36:	83 c4 10             	add    $0x10,%esp
        cpu = schedule(cpu);
    }
  101d39:	eb 5c                	jmp    101d97 <pmm_init+0xb3>
        break;
  101d3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101d3e:	8b 40 14             	mov    0x14(%eax),%eax
  101d41:	83 f8 01             	cmp    $0x1,%eax
  101d44:	75 4d                	jne    101d93 <pmm_init+0xaf>

  101d46:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101d49:	8b 50 08             	mov    0x8(%eax),%edx
  101d4c:	8b 40 04             	mov    0x4(%eax),%eax
  101d4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    case 6: /* getExecPath */
  101d52:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101d55:	8b 50 10             	mov    0x10(%eax),%edx
  101d58:	8b 40 0c             	mov    0xc(%eax),%eax
  101d5b:	03 45 f0             	add    -0x10(%ebp),%eax
  101d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        char* dest = (char*)cpu->ebx;
  101d61:	eb 28                	jmp    101d8b <pmm_init+0xa7>
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  101d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d66:	83 ec 0c             	sub    $0xc,%esp
  101d69:	50                   	push   %eax
  101d6a:	e8 cf fe ff ff       	call   101c3e <pmm_free>
  101d6f:	83 c4 10             	add    $0x10,%esp
    }
  101d72:	a1 20 85 12 00       	mov    0x128520,%eax
  101d77:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101d7a:	76 08                	jbe    101d84 <pmm_init+0xa0>
        break;
  101d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d7f:	a3 20 85 12 00       	mov    %eax,0x128520

  101d84:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
    }
        break;

    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
  101d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  101d91:	72 d0                	jb     101d63 <pmm_init+0x7f>
    }
        break;

    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  101d93:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)
        break;

    case 5: /* yield */
    {
        cpu = schedule(cpu);
    }
  101d97:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101d9a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  101d9d:	72 9c                	jb     101d3b <pmm_init+0x57>
        char* path = strclone((char*) cpu->ebx);

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);

        char* new = vfs_resolve_path(path);

  101d9f:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
        cpu->eax = 0;
  101da6:	eb 16                	jmp    101dbe <pmm_init+0xda>
        if(new) {
  101da8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101dab:	83 ec 0c             	sub    $0xc,%esp
  101dae:	50                   	push   %eax
  101daf:	e8 dc fe ff ff       	call   101c90 <pmm_mark_used>
  101db4:	83 c4 10             	add    $0x10,%esp
            get_current_task()->execPath = new;
  101db7:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);

        char* new = vfs_resolve_path(path);

        cpu->eax = 0;
  101dbe:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  101dc3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  101dc6:	72 e0                	jb     101da8 <pmm_init+0xc4>
        if(new) {
            get_current_task()->execPath = new;
            cpu->eax = 1;
        }

  101dc8:	8b 45 08             	mov    0x8(%ebp),%eax
  101dcb:	8b 40 18             	mov    0x18(%eax),%eax
  101dce:	89 45 e8             	mov    %eax,-0x18(%ebp)
        free(path);
    }
  101dd1:	83 ec 0c             	sub    $0xc,%esp
  101dd4:	ff 75 08             	pushl  0x8(%ebp)
  101dd7:	e8 b4 fe ff ff       	call   101c90 <pmm_mark_used>
  101ddc:	83 c4 10             	add    $0x10,%esp
        break;
  101ddf:	83 ec 0c             	sub    $0xc,%esp
  101de2:	ff 75 e8             	pushl  -0x18(%ebp)
  101de5:	e8 a6 fe ff ff       	call   101c90 <pmm_mark_used>
  101dea:	83 c4 10             	add    $0x10,%esp

	case 10: /* fopen */
	{
  101ded:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101df4:	eb 3a                	jmp    101e30 <pmm_init+0x14c>
        vfs_reset_error();
  101df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101df9:	c1 e0 04             	shl    $0x4,%eax
  101dfc:	03 45 e8             	add    -0x18(%ebp),%eax
  101dff:	8b 00                	mov    (%eax),%eax
  101e01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    char* name = strclone((char*) cpu->ebx);
  101e04:	eb 16                	jmp    101e1c <pmm_init+0x138>
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101e06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101e09:	83 ec 0c             	sub    $0xc,%esp
  101e0c:	50                   	push   %eax
  101e0d:	e8 7e fe ff ff       	call   101c90 <pmm_mark_used>
  101e12:	83 c4 10             	add    $0x10,%esp

  101e15:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
        break;

	case 10: /* fopen */
	{
        vfs_reset_error();
	    char* name = strclone((char*) cpu->ebx);
  101e1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101e1f:	c1 e0 04             	shl    $0x4,%eax
  101e22:	03 45 e8             	add    -0x18(%ebp),%eax
  101e25:	8b 40 04             	mov    0x4(%eax),%eax
  101e28:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  101e2b:	77 d9                	ja     101e06 <pmm_init+0x122>
        free(path);
    }
        break;

	case 10: /* fopen */
	{
  101e2d:	ff 45 ec             	incl   -0x14(%ebp)
  101e30:	8b 45 08             	mov    0x8(%ebp),%eax
  101e33:	8b 40 14             	mov    0x14(%eax),%eax
  101e36:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  101e39:	77 bb                	ja     101df6 <pmm_init+0x112>
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
  101e3b:	c9                   	leave  
  101e3c:	c3                   	ret    
  101e3d:	00 00                	add    %al,(%eax)
	...

00101e40 <free_ports_for_pid>:
#include "kernel.h"
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
  101e40:	55                   	push   %ebp
  101e41:	89 e5                	mov    %esp,%ebp
  101e43:	83 ec 10             	sub    $0x10,%esp
#include "ramfs/tar.h"
  101e46:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101e4d:	eb 20                	jmp    101e6f <free_ports_for_pid+0x2f>
#include "ramfs/vgacntrl.h"
  101e4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101e52:	8b 04 85 80 85 12 00 	mov    0x128580(,%eax,4),%eax
  101e59:	3b 45 08             	cmp    0x8(%ebp),%eax
  101e5c:	75 0e                	jne    101e6c <free_ports_for_pid+0x2c>

  101e5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101e61:	c7 04 85 80 85 12 00 	movl   $0x0,0x128580(,%eax,4)
  101e68:	00 00 00 00 
#include "kernel.h"
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
  101e6c:	ff 45 fc             	incl   -0x4(%ebp)
  101e6f:	81 7d fc ff ff 00 00 	cmpl   $0xffff,-0x4(%ebp)
  101e76:	7e d7                	jle    101e4f <free_ports_for_pid+0xf>
#include "ramfs/vgacntrl.h"

struct exec_info {
    char* execPath;
    char* stdin;
  101e78:	c9                   	leave  
  101e79:	c3                   	ret    

00101e7a <require_port>:
    char* stdout;
    char* stderr;
  101e7a:	55                   	push   %ebp
  101e7b:	89 e5                	mov    %esp,%ebp
  101e7d:	53                   	push   %ebx
  101e7e:	83 ec 14             	sub    $0x14,%esp
  101e81:	8b 45 08             	mov    0x8(%ebp),%eax
  101e84:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
};
  101e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e8b:	25 ff ff 00 00       	and    $0xffff,%eax
  101e90:	8b 04 85 80 85 12 00 	mov    0x128580(,%eax,4),%eax
  101e97:	85 c0                	test   %eax,%eax
  101e99:	74 07                	je     101ea2 <require_port+0x28>
  101e9b:	b8 00 00 00 00       	mov    $0x0,%eax
  101ea0:	eb 1e                	jmp    101ec0 <require_port+0x46>

  101ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ea5:	89 c3                	mov    %eax,%ebx
  101ea7:	81 e3 ff ff 00 00    	and    $0xffff,%ebx
  101ead:	e8 1b 0d 00 00       	call   102bcd <get_current_task>
  101eb2:	8b 00                	mov    (%eax),%eax
  101eb4:	89 04 9d 80 85 12 00 	mov    %eax,0x128580(,%ebx,4)
struct cpu_state* syscall(struct cpu_state* cpu) {
  101ebb:	b8 01 00 00 00       	mov    $0x1,%eax
    cpu = save_cpu_state(cpu);
  101ec0:	83 c4 14             	add    $0x14,%esp
  101ec3:	5b                   	pop    %ebx
  101ec4:	5d                   	pop    %ebp
  101ec5:	c3                   	ret    

00101ec6 <port_in>:

	switch (cpu->eax) {
  101ec6:	55                   	push   %ebp
  101ec7:	89 e5                	mov    %esp,%ebp
  101ec9:	53                   	push   %ebx
  101eca:	83 ec 14             	sub    $0x14,%esp
  101ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ed0:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	case 1: /* exit */
  101ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ed7:	25 ff ff 00 00       	and    $0xffff,%eax
  101edc:	8b 1c 85 80 85 12 00 	mov    0x128580(,%eax,4),%ebx
  101ee3:	e8 e5 0c 00 00       	call   102bcd <get_current_task>
  101ee8:	8b 00                	mov    (%eax),%eax
  101eea:	39 c3                	cmp    %eax,%ebx
  101eec:	74 26                	je     101f14 <port_in+0x4e>
		return terminate_current(cpu);
  101eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ef1:	89 c3                	mov    %eax,%ebx
  101ef3:	81 e3 ff ff 00 00    	and    $0xffff,%ebx
  101ef9:	e8 cf 0c 00 00       	call   102bcd <get_current_task>
  101efe:	8b 00                	mov    (%eax),%eax
  101f00:	83 ec 04             	sub    $0x4,%esp
  101f03:	53                   	push   %ebx
  101f04:	50                   	push   %eax
  101f05:	68 64 76 10 00       	push   $0x107664
  101f0a:	e8 5e e6 ff ff       	call   10056d <kprintf>
  101f0f:	83 c4 10             	add    $0x10,%esp

  101f12:	eb fe                	jmp    101f12 <port_in+0x4c>
	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
  101f14:	8b 45 08             	mov    0x8(%ebp),%eax
  101f17:	83 f8 01             	cmp    $0x1,%eax
  101f1a:	74 27                	je     101f43 <port_in+0x7d>
  101f1c:	83 f8 01             	cmp    $0x1,%eax
  101f1f:	72 07                	jb     101f28 <port_in+0x62>
  101f21:	83 f8 02             	cmp    $0x2,%eax
  101f24:	74 38                	je     101f5e <port_in+0x98>
  101f26:	eb 4c                	jmp    101f74 <port_in+0xae>
	    break;

  101f28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f2b:	25 ff ff 00 00       	and    $0xffff,%eax
  101f30:	83 ec 0c             	sub    $0xc,%esp
  101f33:	50                   	push   %eax
  101f34:	e8 1e 01 00 00       	call   102057 <inb>
  101f39:	83 c4 10             	add    $0x10,%esp
  101f3c:	25 ff 00 00 00       	and    $0xff,%eax
  101f41:	eb 36                	jmp    101f79 <port_in+0xb3>
    case 3: /* exec */
    {
  101f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f46:	25 ff ff 00 00       	and    $0xffff,%eax
  101f4b:	83 ec 0c             	sub    $0xc,%esp
  101f4e:	50                   	push   %eax
  101f4f:	e8 e5 00 00 00       	call   102039 <inw>
  101f54:	83 c4 10             	add    $0x10,%esp
  101f57:	25 ff ff 00 00       	and    $0xffff,%eax
  101f5c:	eb 1b                	jmp    101f79 <port_in+0xb3>
        char* path = strclone((char*) cpu->ebx);

  101f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f61:	25 ff ff 00 00       	and    $0xffff,%eax
  101f66:	83 ec 0c             	sub    $0xc,%esp
  101f69:	50                   	push   %eax
  101f6a:	e8 03 01 00 00       	call   102072 <inl>
  101f6f:	83 c4 10             	add    $0x10,%esp
  101f72:	eb 05                	jmp    101f79 <port_in+0xb3>
        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
  101f74:	b8 00 00 00 00       	mov    $0x0,%eax
            .execPath = 0,
  101f79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101f7c:	c9                   	leave  
  101f7d:	c3                   	ret    

00101f7e <port_out>:
            .stdin = 0,
            .stdout = 0,
  101f7e:	55                   	push   %ebp
  101f7f:	89 e5                	mov    %esp,%ebp
  101f81:	53                   	push   %ebx
  101f82:	83 ec 14             	sub    $0x14,%esp
  101f85:	8b 45 0c             	mov    0xc(%ebp),%eax
  101f88:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
            .stderr = 0
  101f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f8f:	25 ff ff 00 00       	and    $0xffff,%eax
  101f94:	8b 1c 85 80 85 12 00 	mov    0x128580(,%eax,4),%ebx
  101f9b:	e8 2d 0c 00 00       	call   102bcd <get_current_task>
  101fa0:	8b 00                	mov    (%eax),%eax
  101fa2:	39 c3                	cmp    %eax,%ebx
  101fa4:	74 0a                	je     101fb0 <port_out+0x32>
        };
  101fa6:	b8 00 00 00 00       	mov    $0x0,%eax
  101fab:	e9 84 00 00 00       	jmp    102034 <port_out+0xb6>

        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
  101fb0:	8b 45 08             	mov    0x8(%ebp),%eax
  101fb3:	83 f8 01             	cmp    $0x1,%eax
  101fb6:	74 32                	je     101fea <port_out+0x6c>
  101fb8:	83 f8 01             	cmp    $0x1,%eax
  101fbb:	72 07                	jb     101fc4 <port_out+0x46>
  101fbd:	83 f8 02             	cmp    $0x2,%eax
  101fc0:	74 4f                	je     102011 <port_out+0x93>
  101fc2:	eb 6b                	jmp    10202f <port_out+0xb1>
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
  101fc4:	8b 45 10             	mov    0x10(%ebp),%eax
  101fc7:	ba 00 00 00 00       	mov    $0x0,%edx
  101fcc:	88 c2                	mov    %al,%dl
  101fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101fd1:	25 ff ff 00 00       	and    $0xffff,%eax
  101fd6:	83 ec 08             	sub    $0x8,%esp
  101fd9:	52                   	push   %edx
  101fda:	50                   	push   %eax
  101fdb:	e8 cb 00 00 00       	call   1020ab <outb>
  101fe0:	83 c4 10             	add    $0x10,%esp
            ein.stderr = strclone(einp->stderr);
  101fe3:	b8 01 00 00 00       	mov    $0x1,%eax
  101fe8:	eb 4a                	jmp    102034 <port_out+0xb6>
        }

  101fea:	8b 45 10             	mov    0x10(%ebp),%eax
  101fed:	89 c2                	mov    %eax,%edx
  101fef:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  101ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ff8:	25 ff ff 00 00       	and    $0xffff,%eax
  101ffd:	83 ec 08             	sub    $0x8,%esp
  102000:	52                   	push   %edx
  102001:	50                   	push   %eax
  102002:	e8 86 00 00 00       	call   10208d <outw>
  102007:	83 c4 10             	add    $0x10,%esp
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  10200a:	b8 01 00 00 00       	mov    $0x1,%eax
  10200f:	eb 23                	jmp    102034 <port_out+0xb6>

        if(einp != 0) {
  102011:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102014:	25 ff ff 00 00       	and    $0xffff,%eax
  102019:	83 ec 08             	sub    $0x8,%esp
  10201c:	ff 75 10             	pushl  0x10(%ebp)
  10201f:	50                   	push   %eax
  102020:	e8 a2 00 00 00       	call   1020c7 <outl>
  102025:	83 c4 10             	add    $0x10,%esp
            free(ein.execPath);
  102028:	b8 01 00 00 00       	mov    $0x1,%eax
  10202d:	eb 05                	jmp    102034 <port_out+0xb6>
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
  10202f:	b8 00 00 00 00       	mov    $0x0,%eax
        }
  102034:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102037:	c9                   	leave  
  102038:	c3                   	ret    

00102039 <inw>:

        free(path);
  102039:	55                   	push   %ebp
  10203a:	89 e5                	mov    %esp,%ebp
  10203c:	83 ec 14             	sub    $0x14,%esp
  10203f:	8b 45 08             	mov    0x8(%ebp),%eax
  102042:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    }
        break;
  102046:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102049:	89 c2                	mov    %eax,%edx
  10204b:	66 ed                	in     (%dx),%ax
  10204d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  102051:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
    case 4: /* getargs */
  102055:	c9                   	leave  
  102056:	c3                   	ret    

00102057 <inb>:
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  102057:	55                   	push   %ebp
  102058:	89 e5                	mov    %esp,%ebp
  10205a:	83 ec 14             	sub    $0x14,%esp
  10205d:	8b 45 08             	mov    0x8(%ebp),%eax
  102060:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    }
        break;
  102064:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102067:	89 c2                	mov    %eax,%edx
  102069:	ec                   	in     (%dx),%al
  10206a:	88 45 ff             	mov    %al,-0x1(%ebp)

  10206d:	8a 45 ff             	mov    -0x1(%ebp),%al
    case 5: /* yield */
  102070:	c9                   	leave  
  102071:	c3                   	ret    

00102072 <inl>:
    {
        cpu = schedule(cpu);
  102072:	55                   	push   %ebp
  102073:	89 e5                	mov    %esp,%ebp
  102075:	83 ec 14             	sub    $0x14,%esp
  102078:	8b 45 08             	mov    0x8(%ebp),%eax
  10207b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    }
        break;
  10207f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102082:	89 c2                	mov    %eax,%edx
  102084:	ed                   	in     (%dx),%eax
  102085:	89 45 fc             	mov    %eax,-0x4(%ebp)

  102088:	8b 45 fc             	mov    -0x4(%ebp),%eax
    case 6: /* getExecPath */
  10208b:	c9                   	leave  
  10208c:	c3                   	ret    

0010208d <outw>:
    {
        char* dest = (char*)cpu->ebx;
  10208d:	55                   	push   %ebp
  10208e:	89 e5                	mov    %esp,%ebp
  102090:	83 ec 08             	sub    $0x8,%esp
  102093:	8b 55 08             	mov    0x8(%ebp),%edx
  102096:	8b 45 0c             	mov    0xc(%ebp),%eax
  102099:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  10209d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  1020a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020a7:	66 ef                	out    %ax,(%dx)
    }
  1020a9:	c9                   	leave  
  1020aa:	c3                   	ret    

001020ab <outb>:
        break;

  1020ab:	55                   	push   %ebp
  1020ac:	89 e5                	mov    %esp,%ebp
  1020ae:	83 ec 08             	sub    $0x8,%esp
  1020b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1020b4:	8b 55 0c             	mov    0xc(%ebp),%edx
  1020b7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  1020bb:	88 55 f8             	mov    %dl,-0x8(%ebp)
    case 7: /* changeExecPath */
  1020be:	8a 45 f8             	mov    -0x8(%ebp),%al
  1020c1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020c4:	ee                   	out    %al,(%dx)
    {
  1020c5:	c9                   	leave  
  1020c6:	c3                   	ret    

001020c7 <outl>:
        vfs_reset_error();
        char* path = strclone((char*) cpu->ebx);
  1020c7:	55                   	push   %ebp
  1020c8:	89 e5                	mov    %esp,%ebp
  1020ca:	83 ec 04             	sub    $0x4,%esp
  1020cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1020d0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)

  1020d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1020d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020da:	ef                   	out    %eax,(%dx)
        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  1020db:	c9                   	leave  
  1020dc:	c3                   	ret    

001020dd <outb_wait>:

        char* new = vfs_resolve_path(path);
  1020dd:	55                   	push   %ebp
  1020de:	89 e5                	mov    %esp,%ebp
  1020e0:	83 ec 08             	sub    $0x8,%esp
  1020e3:	8b 45 08             	mov    0x8(%ebp),%eax
  1020e6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1020e9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  1020ed:	88 55 f8             	mov    %dl,-0x8(%ebp)

  1020f0:	8a 45 f8             	mov    -0x8(%ebp),%al
  1020f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020f6:	ee                   	out    %al,(%dx)
  1020f7:	eb 00                	jmp    1020f9 <outb_wait+0x1c>
  1020f9:	eb 00                	jmp    1020fb <outb_wait+0x1e>
        cpu->eax = 0;
  1020fb:	c9                   	leave  
  1020fc:	c3                   	ret    
  1020fd:	00 00                	add    %al,(%eax)
	...

00102100 <ramfs_block_init>:
#include "kernel.h"
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
  102100:	55                   	push   %ebp
  102101:	89 e5                	mov    %esp,%ebp
  102103:	83 ec 08             	sub    $0x8,%esp
#include "ramfs/vgacntrl.h"
  102106:	83 ec 04             	sub    $0x4,%esp
  102109:	68 00 00 04 00       	push   $0x40000
  10210e:	6a 00                	push   $0x0
  102110:	68 c0 85 18 00       	push   $0x1885c0
  102115:	e8 52 18 00 00       	call   10396c <memset>
  10211a:	83 c4 10             	add    $0x10,%esp

  10211d:	c9                   	leave  
  10211e:	c3                   	ret    

0010211f <ramfs_block_driver_struct>:

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
	case 1: /* exit */
  10211f:	55                   	push   %ebp
  102120:	89 e5                	mov    %esp,%ebp
		return terminate_current(cpu);
  102122:	b8 a0 60 10 00       	mov    $0x1060a0,%eax

  102127:	5d                   	pop    %ebp
  102128:	c3                   	ret    

00102129 <ramfs_block_available>:
	case 2: /* pexists */
	{
  102129:	55                   	push   %ebp
  10212a:	89 e5                	mov    %esp,%ebp
  10212c:	83 ec 10             	sub    $0x10,%esp
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  10212f:	8b 45 08             	mov    0x8(%ebp),%eax
  102132:	8b 40 04             	mov    0x4(%eax),%eax
  102135:	89 45 fc             	mov    %eax,-0x4(%ebp)
	}
	    break;
  102138:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10213b:	8b 00                	mov    (%eax),%eax
  10213d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102144:	85 c0                	test   %eax,%eax
  102146:	74 1d                	je     102165 <ramfs_block_available+0x3c>

  102148:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10214b:	8b 00                	mov    (%eax),%eax
  10214d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102154:	8b 50 04             	mov    0x4(%eax),%edx
  102157:	8b 45 08             	mov    0x8(%ebp),%eax
  10215a:	8b 40 08             	mov    0x8(%eax),%eax
  10215d:	89 d1                	mov    %edx,%ecx
  10215f:	29 c1                	sub    %eax,%ecx
  102161:	89 c8                	mov    %ecx,%eax
  102163:	eb 05                	jmp    10216a <ramfs_block_available+0x41>
    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  102165:	b8 00 00 00 00       	mov    $0x0,%eax

  10216a:	c9                   	leave  
  10216b:	c3                   	ret    

0010216c <ramfs_block_create>:
        struct exec_info* einp = (void*) cpu->edx;

  10216c:	55                   	push   %ebp
  10216d:	89 e5                	mov    %esp,%ebp
  10216f:	53                   	push   %ebx
  102170:	83 ec 14             	sub    $0x14,%esp
        struct exec_info ein = {
  102173:	83 ec 0c             	sub    $0xc,%esp
  102176:	6a 08                	push   $0x8
  102178:	e8 55 15 00 00       	call   1036d2 <malloc>
  10217d:	83 c4 10             	add    $0x10,%esp
  102180:	89 45 f0             	mov    %eax,-0x10(%ebp)
            .execPath = 0,
            .stdin = 0,
  102183:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10218a:	e9 86 00 00 00       	jmp    102215 <ramfs_block_create+0xa9>
            .stdout = 0,
  10218f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102192:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102199:	85 c0                	test   %eax,%eax
  10219b:	75 75                	jne    102212 <ramfs_block_create+0xa6>
            .stderr = 0
  10219d:	8b 5d f4             	mov    -0xc(%ebp),%ebx
  1021a0:	83 ec 0c             	sub    $0xc,%esp
  1021a3:	6a 10                	push   $0x10
  1021a5:	e8 28 15 00 00       	call   1036d2 <malloc>
  1021aa:	83 c4 10             	add    $0x10,%esp
  1021ad:	89 04 9d c0 85 18 00 	mov    %eax,0x1885c0(,%ebx,4)
        };
  1021b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021b7:	8b 1c 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%ebx
  1021be:	8b 45 08             	mov    0x8(%ebp),%eax
  1021c1:	8b 00                	mov    (%eax),%eax
  1021c3:	83 ec 0c             	sub    $0xc,%esp
  1021c6:	50                   	push   %eax
  1021c7:	e8 06 15 00 00       	call   1036d2 <malloc>
  1021cc:	83 c4 10             	add    $0x10,%esp
  1021cf:	89 03                	mov    %eax,(%ebx)

  1021d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021d4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1021db:	8b 55 08             	mov    0x8(%ebp),%edx
  1021de:	8b 12                	mov    (%edx),%edx
  1021e0:	89 50 04             	mov    %edx,0x4(%eax)
        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
  1021e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021e6:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1021ed:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            ein.stdin = strclone(einp->stdin);
  1021f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021f7:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1021fe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
  102205:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102208:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10220b:	89 10                	mov    %edx,(%eax)
        }

  10220d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102210:	eb 15                	jmp    102227 <ramfs_block_create+0xbb>

        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
            .execPath = 0,
            .stdin = 0,
  102212:	ff 45 f4             	incl   -0xc(%ebp)
  102215:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  10221c:	0f 8e 6d ff ff ff    	jle    10218f <ramfs_block_create+0x23>
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
  102222:	b8 00 00 00 00       	mov    $0x0,%eax
            free(ein.stdin);
  102227:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10222a:	c9                   	leave  
  10222b:	c3                   	ret    

0010222c <ramfs_block_read>:
            free(ein.stdout);
            free(ein.stderr);
  10222c:	55                   	push   %ebp
  10222d:	89 e5                	mov    %esp,%ebp
  10222f:	83 ec 18             	sub    $0x18,%esp
        }
  102232:	8b 45 08             	mov    0x8(%ebp),%eax
  102235:	8b 40 04             	mov    0x4(%eax),%eax
  102238:	89 45 f4             	mov    %eax,-0xc(%ebp)

        free(path);
  10223b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10223e:	8b 00                	mov    (%eax),%eax
  102240:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102247:	85 c0                	test   %eax,%eax
  102249:	74 55                	je     1022a0 <ramfs_block_read+0x74>
    }
  10224b:	8b 45 08             	mov    0x8(%ebp),%eax
  10224e:	8b 40 08             	mov    0x8(%eax),%eax
  102251:	89 c2                	mov    %eax,%edx
  102253:	03 55 10             	add    0x10(%ebp),%edx
  102256:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102259:	8b 00                	mov    (%eax),%eax
  10225b:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102262:	8b 40 04             	mov    0x4(%eax),%eax
  102265:	39 c2                	cmp    %eax,%edx
  102267:	76 07                	jbe    102270 <ramfs_block_read+0x44>
  102269:	b8 06 00 00 00       	mov    $0x6,%eax
  10226e:	eb 35                	jmp    1022a5 <ramfs_block_read+0x79>
        break;

  102270:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102273:	8b 00                	mov    (%eax),%eax
  102275:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10227c:	8b 10                	mov    (%eax),%edx
  10227e:	8b 45 08             	mov    0x8(%ebp),%eax
  102281:	8b 40 08             	mov    0x8(%eax),%eax
  102284:	8d 04 02             	lea    (%edx,%eax,1),%eax
  102287:	83 ec 04             	sub    $0x4,%esp
  10228a:	ff 75 10             	pushl  0x10(%ebp)
  10228d:	50                   	push   %eax
  10228e:	ff 75 0c             	pushl  0xc(%ebp)
  102291:	e8 04 17 00 00       	call   10399a <memcpy>
  102296:	83 c4 10             	add    $0x10,%esp
    case 4: /* getargs */
    {
  102299:	b8 00 00 00 00       	mov    $0x0,%eax
  10229e:	eb 05                	jmp    1022a5 <ramfs_block_read+0x79>
        cpu->eax = (uint32_t) get_current_task()->args;
    }
        break;
  1022a0:	b8 03 00 00 00       	mov    $0x3,%eax

  1022a5:	c9                   	leave  
  1022a6:	c3                   	ret    

001022a7 <ramfs_block_write>:
    case 5: /* yield */
    {
  1022a7:	55                   	push   %ebp
  1022a8:	89 e5                	mov    %esp,%ebp
  1022aa:	83 ec 18             	sub    $0x18,%esp
        cpu = schedule(cpu);
  1022ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1022b0:	8b 40 04             	mov    0x4(%eax),%eax
  1022b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
        break;
  1022b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022b9:	8b 00                	mov    (%eax),%eax
  1022bb:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1022c2:	85 c0                	test   %eax,%eax
  1022c4:	74 55                	je     10231b <ramfs_block_write+0x74>

  1022c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1022c9:	8b 40 08             	mov    0x8(%eax),%eax
  1022cc:	89 c2                	mov    %eax,%edx
  1022ce:	03 55 10             	add    0x10(%ebp),%edx
  1022d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022d4:	8b 00                	mov    (%eax),%eax
  1022d6:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1022dd:	8b 40 04             	mov    0x4(%eax),%eax
  1022e0:	39 c2                	cmp    %eax,%edx
  1022e2:	76 07                	jbe    1022eb <ramfs_block_write+0x44>
  1022e4:	b8 06 00 00 00       	mov    $0x6,%eax
  1022e9:	eb 35                	jmp    102320 <ramfs_block_write+0x79>
    case 6: /* getExecPath */
    {
  1022eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022ee:	8b 00                	mov    (%eax),%eax
  1022f0:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1022f7:	8b 10                	mov    (%eax),%edx
  1022f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1022fc:	8b 40 08             	mov    0x8(%eax),%eax
  1022ff:	8d 04 02             	lea    (%edx,%eax,1),%eax
  102302:	83 ec 04             	sub    $0x4,%esp
  102305:	ff 75 10             	pushl  0x10(%ebp)
  102308:	ff 75 0c             	pushl  0xc(%ebp)
  10230b:	50                   	push   %eax
  10230c:	e8 89 16 00 00       	call   10399a <memcpy>
  102311:	83 c4 10             	add    $0x10,%esp
        char* dest = (char*)cpu->ebx;
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  102314:	b8 00 00 00 00       	mov    $0x0,%eax
  102319:	eb 05                	jmp    102320 <ramfs_block_write+0x79>
    }
        break;

  10231b:	b8 03 00 00 00       	mov    $0x3,%eax
    case 7: /* changeExecPath */
  102320:	c9                   	leave  
  102321:	c3                   	ret    

00102322 <ramfs_block_open>:
    {
        vfs_reset_error();
  102322:	55                   	push   %ebp
  102323:	89 e5                	mov    %esp,%ebp
  102325:	83 ec 18             	sub    $0x18,%esp
        char* path = strclone((char*) cpu->ebx);
  102328:	8b 45 08             	mov    0x8(%ebp),%eax
  10232b:	8b 00                	mov    (%eax),%eax
  10232d:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102334:	85 c0                	test   %eax,%eax
  102336:	74 74                	je     1023ac <ramfs_block_open+0x8a>

  102338:	8b 45 0c             	mov    0xc(%ebp),%eax
  10233b:	83 e0 01             	and    $0x1,%eax
  10233e:	84 c0                	test   %al,%al
  102340:	74 13                	je     102355 <ramfs_block_open+0x33>
  102342:	8b 45 08             	mov    0x8(%ebp),%eax
  102345:	8b 00                	mov    (%eax),%eax
  102347:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10234e:	8b 50 08             	mov    0x8(%eax),%edx
  102351:	42                   	inc    %edx
  102352:	89 50 08             	mov    %edx,0x8(%eax)
        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  102355:	8b 45 0c             	mov    0xc(%ebp),%eax
  102358:	83 e0 02             	and    $0x2,%eax
  10235b:	85 c0                	test   %eax,%eax
  10235d:	74 13                	je     102372 <ramfs_block_open+0x50>
  10235f:	8b 45 08             	mov    0x8(%ebp),%eax
  102362:	8b 00                	mov    (%eax),%eax
  102364:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10236b:	8b 50 0c             	mov    0xc(%eax),%edx
  10236e:	42                   	inc    %edx
  10236f:	89 50 0c             	mov    %edx,0xc(%eax)

        char* new = vfs_resolve_path(path);
  102372:	83 ec 0c             	sub    $0xc,%esp
  102375:	6a 10                	push   $0x10
  102377:	e8 56 13 00 00       	call   1036d2 <malloc>
  10237c:	83 c4 10             	add    $0x10,%esp
  10237f:	89 45 f4             	mov    %eax,-0xc(%ebp)

        cpu->eax = 0;
  102382:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102385:	8b 55 0c             	mov    0xc(%ebp),%edx
  102388:	89 50 0c             	mov    %edx,0xc(%eax)
        if(new) {
  10238b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10238e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            get_current_task()->execPath = new;
  102395:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102398:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            cpu->eax = 1;
  10239e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1023a1:	8b 55 08             	mov    0x8(%ebp),%edx
  1023a4:	89 50 04             	mov    %edx,0x4(%eax)
        }

  1023a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1023aa:	eb 05                	jmp    1023b1 <ramfs_block_open+0x8f>
        free(path);
    }
        break;
  1023ac:	b8 01 00 00 00       	mov    $0x1,%eax

  1023b1:	c9                   	leave  
  1023b2:	c3                   	ret    

001023b3 <ramfs_block_close>:
	case 10: /* fopen */
	{
  1023b3:	55                   	push   %ebp
  1023b4:	89 e5                	mov    %esp,%ebp
  1023b6:	83 ec 18             	sub    $0x18,%esp
        vfs_reset_error();
  1023b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1023bc:	8b 40 04             	mov    0x4(%eax),%eax
  1023bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;
  1023c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1023c5:	8b 00                	mov    (%eax),%eax
  1023c7:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1023ce:	85 c0                	test   %eax,%eax
  1023d0:	74 40                	je     102412 <ramfs_block_close+0x5f>

  1023d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1023d5:	8b 40 0c             	mov    0xc(%eax),%eax
  1023d8:	83 e0 01             	and    $0x1,%eax
  1023db:	84 c0                	test   %al,%al
  1023dd:	74 13                	je     1023f2 <ramfs_block_close+0x3f>
  1023df:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1023e2:	8b 00                	mov    (%eax),%eax
  1023e4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1023eb:	8b 50 08             	mov    0x8(%eax),%edx
  1023ee:	4a                   	dec    %edx
  1023ef:	89 50 08             	mov    %edx,0x8(%eax)
	    struct res_handle* handle = vfs_open(name, fmode);
  1023f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1023f5:	8b 40 0c             	mov    0xc(%eax),%eax
  1023f8:	83 e0 02             	and    $0x2,%eax
  1023fb:	85 c0                	test   %eax,%eax
  1023fd:	74 13                	je     102412 <ramfs_block_close+0x5f>
  1023ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102402:	8b 00                	mov    (%eax),%eax
  102404:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10240b:	8b 50 0c             	mov    0xc(%eax),%edx
  10240e:	4a                   	dec    %edx
  10240f:	89 50 0c             	mov    %edx,0xc(%eax)
	    if(handle) {
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
  102412:	83 ec 0c             	sub    $0xc,%esp
  102415:	ff 75 08             	pushl  0x8(%ebp)
  102418:	e8 fb 14 00 00       	call   103918 <free>
  10241d:	83 c4 10             	add    $0x10,%esp
	    }
	    else
  102420:	b8 00 00 00 00       	mov    $0x0,%eax
	    {
  102425:	c9                   	leave  
  102426:	c3                   	ret    
	...

00102428 <ramfs_fifo_init>:
#include "kernel.h"
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
  102428:	55                   	push   %ebp
  102429:	89 e5                	mov    %esp,%ebp
  10242b:	83 ec 08             	sub    $0x8,%esp
#include "ramfs/vgacntrl.h"
  10242e:	83 ec 04             	sub    $0x4,%esp
  102431:	68 00 00 04 00       	push   $0x40000
  102436:	6a 00                	push   $0x0
  102438:	68 c0 85 18 00       	push   $0x1885c0
  10243d:	e8 2a 15 00 00       	call   10396c <memset>
  102442:	83 c4 10             	add    $0x10,%esp

  102445:	c9                   	leave  
  102446:	c3                   	ret    

00102447 <ramfs_fifo_driver_struct>:

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
	case 1: /* exit */
  102447:	55                   	push   %ebp
  102448:	89 e5                	mov    %esp,%ebp
		return terminate_current(cpu);
  10244a:	b8 bc 60 10 00       	mov    $0x1060bc,%eax

  10244f:	5d                   	pop    %ebp
  102450:	c3                   	ret    

00102451 <ramfs_fifo_available>:
	case 2: /* pexists */
	{
  102451:	55                   	push   %ebp
  102452:	89 e5                	mov    %esp,%ebp
  102454:	83 ec 10             	sub    $0x10,%esp
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  102457:	8b 45 08             	mov    0x8(%ebp),%eax
  10245a:	8b 40 04             	mov    0x4(%eax),%eax
  10245d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	}
	    break;
  102460:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102463:	8b 00                	mov    (%eax),%eax
  102465:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10246c:	85 c0                	test   %eax,%eax
  10246e:	74 11                	je     102481 <ramfs_fifo_available+0x30>

  102470:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102473:	8b 00                	mov    (%eax),%eax
  102475:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10247c:	8b 40 08             	mov    0x8(%eax),%eax
  10247f:	eb 05                	jmp    102486 <ramfs_fifo_available+0x35>
    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  102481:	b8 00 00 00 00       	mov    $0x0,%eax

  102486:	c9                   	leave  
  102487:	c3                   	ret    

00102488 <ramfs_fifo_create>:
        struct exec_info* einp = (void*) cpu->edx;

  102488:	55                   	push   %ebp
  102489:	89 e5                	mov    %esp,%ebp
  10248b:	53                   	push   %ebx
  10248c:	83 ec 14             	sub    $0x14,%esp
        struct exec_info ein = {
  10248f:	83 ec 0c             	sub    $0xc,%esp
  102492:	6a 08                	push   $0x8
  102494:	e8 39 12 00 00       	call   1036d2 <malloc>
  102499:	83 c4 10             	add    $0x10,%esp
  10249c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            .execPath = 0,
            .stdin = 0,
  10249f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1024a6:	e9 9b 00 00 00       	jmp    102546 <ramfs_fifo_create+0xbe>
            .stdout = 0,
  1024ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024ae:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1024b5:	85 c0                	test   %eax,%eax
  1024b7:	0f 85 86 00 00 00    	jne    102543 <ramfs_fifo_create+0xbb>
            .stderr = 0
  1024bd:	8b 5d f4             	mov    -0xc(%ebp),%ebx
  1024c0:	83 ec 0c             	sub    $0xc,%esp
  1024c3:	6a 14                	push   $0x14
  1024c5:	e8 08 12 00 00       	call   1036d2 <malloc>
  1024ca:	83 c4 10             	add    $0x10,%esp
  1024cd:	89 04 9d c0 85 18 00 	mov    %eax,0x1885c0(,%ebx,4)
        };
  1024d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024d7:	8b 1c 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%ebx
  1024de:	8b 45 08             	mov    0x8(%ebp),%eax
  1024e1:	8b 00                	mov    (%eax),%eax
  1024e3:	83 ec 0c             	sub    $0xc,%esp
  1024e6:	50                   	push   %eax
  1024e7:	e8 e6 11 00 00       	call   1036d2 <malloc>
  1024ec:	83 c4 10             	add    $0x10,%esp
  1024ef:	89 03                	mov    %eax,(%ebx)

  1024f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024f4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1024fb:	8b 55 08             	mov    0x8(%ebp),%edx
  1024fe:	8b 12                	mov    (%edx),%edx
  102500:	89 50 04             	mov    %edx,0x4(%eax)
        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
  102503:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102506:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10250d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ein.stdin = strclone(einp->stdin);
  102514:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102517:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10251e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            ein.stdout = strclone(einp->stdout);
  102525:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102528:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10252f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            ein.stderr = strclone(einp->stderr);
        }
  102536:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102539:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10253c:	89 10                	mov    %edx,(%eax)

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  10253e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102541:	eb 15                	jmp    102558 <ramfs_fifo_create+0xd0>

        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
            .execPath = 0,
            .stdin = 0,
  102543:	ff 45 f4             	incl   -0xc(%ebp)
  102546:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
  10254d:	0f 8e 58 ff ff ff    	jle    1024ab <ramfs_fifo_create+0x23>

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
            free(ein.stdin);
  102553:	b8 00 00 00 00       	mov    $0x0,%eax
            free(ein.stdout);
  102558:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10255b:	c9                   	leave  
  10255c:	c3                   	ret    

0010255d <ramfs_fifo_read>:
            free(ein.stderr);
        }
  10255d:	55                   	push   %ebp
  10255e:	89 e5                	mov    %esp,%ebp
  102560:	83 ec 18             	sub    $0x18,%esp

  102563:	8b 45 08             	mov    0x8(%ebp),%eax
  102566:	8b 40 04             	mov    0x4(%eax),%eax
  102569:	89 45 f4             	mov    %eax,-0xc(%ebp)
        free(path);
    }
  10256c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10256f:	8b 00                	mov    (%eax),%eax
  102571:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102578:	85 c0                	test   %eax,%eax
  10257a:	0f 84 c7 00 00 00    	je     102647 <ramfs_fifo_read+0xea>
        break;
  102580:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102583:	8b 00                	mov    (%eax),%eax
  102585:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10258c:	8b 40 04             	mov    0x4(%eax),%eax
  10258f:	3b 45 10             	cmp    0x10(%ebp),%eax
  102592:	73 0a                	jae    10259e <ramfs_fifo_read+0x41>
  102594:	b8 03 00 00 00       	mov    $0x3,%eax
  102599:	e9 ae 00 00 00       	jmp    10264c <ramfs_fifo_read+0xef>

  10259e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025a1:	8b 00                	mov    (%eax),%eax
  1025a3:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025aa:	8b 40 08             	mov    0x8(%eax),%eax
  1025ad:	3b 45 10             	cmp    0x10(%ebp),%eax
  1025b0:	73 0a                	jae    1025bc <ramfs_fifo_read+0x5f>
  1025b2:	b8 01 00 00 00       	mov    $0x1,%eax
  1025b7:	e9 90 00 00 00       	jmp    10264c <ramfs_fifo_read+0xef>
    case 4: /* getargs */
    {
  1025bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025bf:	8b 00                	mov    (%eax),%eax
  1025c1:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025c8:	8b 00                	mov    (%eax),%eax
  1025ca:	83 ec 04             	sub    $0x4,%esp
  1025cd:	ff 75 10             	pushl  0x10(%ebp)
  1025d0:	50                   	push   %eax
  1025d1:	ff 75 0c             	pushl  0xc(%ebp)
  1025d4:	e8 c1 13 00 00       	call   10399a <memcpy>
  1025d9:	83 c4 10             	add    $0x10,%esp
        cpu->eax = (uint32_t) get_current_task()->args;
  1025dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025df:	8b 00                	mov    (%eax),%eax
  1025e1:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025e8:	8b 40 08             	mov    0x8(%eax),%eax
  1025eb:	89 c1                	mov    %eax,%ecx
  1025ed:	2b 4d 10             	sub    0x10(%ebp),%ecx
  1025f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025f3:	8b 00                	mov    (%eax),%eax
  1025f5:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1025fc:	8b 00                	mov    (%eax),%eax
  1025fe:	89 c2                	mov    %eax,%edx
  102600:	03 55 10             	add    0x10(%ebp),%edx
  102603:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102606:	8b 00                	mov    (%eax),%eax
  102608:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10260f:	8b 00                	mov    (%eax),%eax
  102611:	83 ec 04             	sub    $0x4,%esp
  102614:	51                   	push   %ecx
  102615:	52                   	push   %edx
  102616:	50                   	push   %eax
  102617:	e8 7e 13 00 00       	call   10399a <memcpy>
  10261c:	83 c4 10             	add    $0x10,%esp
    }
  10261f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102622:	8b 00                	mov    (%eax),%eax
  102624:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10262b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10262e:	8b 12                	mov    (%edx),%edx
  102630:	8b 14 95 c0 85 18 00 	mov    0x1885c0(,%edx,4),%edx
  102637:	8b 52 08             	mov    0x8(%edx),%edx
  10263a:	2b 55 10             	sub    0x10(%ebp),%edx
  10263d:	89 50 08             	mov    %edx,0x8(%eax)
        break;

  102640:	b8 00 00 00 00       	mov    $0x0,%eax
  102645:	eb 05                	jmp    10264c <ramfs_fifo_read+0xef>
    case 5: /* yield */
    {
        cpu = schedule(cpu);
  102647:	b8 03 00 00 00       	mov    $0x3,%eax
    }
  10264c:	c9                   	leave  
  10264d:	c3                   	ret    

0010264e <ramfs_fifo_write>:
        break;

  10264e:	55                   	push   %ebp
  10264f:	89 e5                	mov    %esp,%ebp
  102651:	83 ec 18             	sub    $0x18,%esp
    case 6: /* getExecPath */
  102654:	8b 45 08             	mov    0x8(%ebp),%eax
  102657:	8b 40 04             	mov    0x4(%eax),%eax
  10265a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        char* dest = (char*)cpu->ebx;
  10265d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102660:	8b 00                	mov    (%eax),%eax
  102662:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102669:	85 c0                	test   %eax,%eax
  10266b:	0f 84 a8 00 00 00    	je     102719 <ramfs_fifo_write+0xcb>
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  102671:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102674:	8b 00                	mov    (%eax),%eax
  102676:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10267d:	8b 40 04             	mov    0x4(%eax),%eax
  102680:	3b 45 10             	cmp    0x10(%ebp),%eax
  102683:	73 0a                	jae    10268f <ramfs_fifo_write+0x41>
  102685:	b8 03 00 00 00       	mov    $0x3,%eax
  10268a:	e9 8f 00 00 00       	jmp    10271e <ramfs_fifo_write+0xd0>
    }
  10268f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102692:	8b 00                	mov    (%eax),%eax
  102694:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10269b:	8b 50 04             	mov    0x4(%eax),%edx
  10269e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026a1:	8b 00                	mov    (%eax),%eax
  1026a3:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026aa:	8b 40 08             	mov    0x8(%eax),%eax
  1026ad:	89 d1                	mov    %edx,%ecx
  1026af:	29 c1                	sub    %eax,%ecx
  1026b1:	89 c8                	mov    %ecx,%eax
  1026b3:	3b 45 10             	cmp    0x10(%ebp),%eax
  1026b6:	73 07                	jae    1026bf <ramfs_fifo_write+0x71>
  1026b8:	b8 01 00 00 00       	mov    $0x1,%eax
  1026bd:	eb 5f                	jmp    10271e <ramfs_fifo_write+0xd0>
        break;

  1026bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026c2:	8b 00                	mov    (%eax),%eax
  1026c4:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026cb:	8b 10                	mov    (%eax),%edx
  1026cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026d0:	8b 00                	mov    (%eax),%eax
  1026d2:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026d9:	8b 40 08             	mov    0x8(%eax),%eax
  1026dc:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1026df:	83 ec 04             	sub    $0x4,%esp
  1026e2:	ff 75 10             	pushl  0x10(%ebp)
  1026e5:	ff 75 0c             	pushl  0xc(%ebp)
  1026e8:	50                   	push   %eax
  1026e9:	e8 ac 12 00 00       	call   10399a <memcpy>
  1026ee:	83 c4 10             	add    $0x10,%esp
    case 7: /* changeExecPath */
  1026f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026f4:	8b 00                	mov    (%eax),%eax
  1026f6:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1026fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102700:	8b 12                	mov    (%edx),%edx
  102702:	8b 14 95 c0 85 18 00 	mov    0x1885c0(,%edx,4),%edx
  102709:	8b 52 08             	mov    0x8(%edx),%edx
  10270c:	03 55 10             	add    0x10(%ebp),%edx
  10270f:	89 50 08             	mov    %edx,0x8(%eax)
    {
        vfs_reset_error();
  102712:	b8 00 00 00 00       	mov    $0x0,%eax
  102717:	eb 05                	jmp    10271e <ramfs_fifo_write+0xd0>
        char* path = strclone((char*) cpu->ebx);

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  102719:	b8 03 00 00 00       	mov    $0x3,%eax

  10271e:	c9                   	leave  
  10271f:	c3                   	ret    

00102720 <ramfs_fifo_open>:
        char* new = vfs_resolve_path(path);

  102720:	55                   	push   %ebp
  102721:	89 e5                	mov    %esp,%ebp
  102723:	83 ec 18             	sub    $0x18,%esp
        cpu->eax = 0;
  102726:	8b 45 08             	mov    0x8(%ebp),%eax
  102729:	8b 00                	mov    (%eax),%eax
  10272b:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102732:	85 c0                	test   %eax,%eax
  102734:	0f 84 85 00 00 00    	je     1027bf <ramfs_fifo_open+0x9f>
        if(new) {
  10273a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10273d:	83 e0 04             	and    $0x4,%eax
  102740:	85 c0                	test   %eax,%eax
  102742:	74 07                	je     10274b <ramfs_fifo_open+0x2b>
  102744:	b8 00 00 00 00       	mov    $0x0,%eax
  102749:	eb 79                	jmp    1027c4 <ramfs_fifo_open+0xa4>
            get_current_task()->execPath = new;
            cpu->eax = 1;
  10274b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10274e:	83 e0 01             	and    $0x1,%eax
  102751:	84 c0                	test   %al,%al
  102753:	74 13                	je     102768 <ramfs_fifo_open+0x48>
  102755:	8b 45 08             	mov    0x8(%ebp),%eax
  102758:	8b 00                	mov    (%eax),%eax
  10275a:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  102761:	8b 50 0c             	mov    0xc(%eax),%edx
  102764:	42                   	inc    %edx
  102765:	89 50 0c             	mov    %edx,0xc(%eax)
        }
  102768:	8b 45 0c             	mov    0xc(%ebp),%eax
  10276b:	83 e0 02             	and    $0x2,%eax
  10276e:	85 c0                	test   %eax,%eax
  102770:	74 13                	je     102785 <ramfs_fifo_open+0x65>
  102772:	8b 45 08             	mov    0x8(%ebp),%eax
  102775:	8b 00                	mov    (%eax),%eax
  102777:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10277e:	8b 50 10             	mov    0x10(%eax),%edx
  102781:	42                   	inc    %edx
  102782:	89 50 10             	mov    %edx,0x10(%eax)

        free(path);
  102785:	83 ec 0c             	sub    $0xc,%esp
  102788:	6a 10                	push   $0x10
  10278a:	e8 43 0f 00 00       	call   1036d2 <malloc>
  10278f:	83 c4 10             	add    $0x10,%esp
  102792:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
        break;
  102795:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102798:	8b 55 0c             	mov    0xc(%ebp),%edx
  10279b:	89 50 0c             	mov    %edx,0xc(%eax)

  10279e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	case 10: /* fopen */
  1027a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027ab:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	{
  1027b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027b4:	8b 55 08             	mov    0x8(%ebp),%edx
  1027b7:	89 50 04             	mov    %edx,0x4(%eax)
        vfs_reset_error();
	    char* name = strclone((char*) cpu->ebx);
  1027ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027bd:	eb 05                	jmp    1027c4 <ramfs_fifo_open+0xa4>
	    uint32_t fmode = (uint32_t) cpu->ecx;

	    struct res_handle* handle = vfs_open(name, fmode);
  1027bf:	b8 00 00 00 00       	mov    $0x0,%eax
	    if(handle) {
  1027c4:	c9                   	leave  
  1027c5:	c3                   	ret    

001027c6 <ramfs_fifo_close>:
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
  1027c6:	55                   	push   %ebp
  1027c7:	89 e5                	mov    %esp,%ebp
  1027c9:	83 ec 18             	sub    $0x18,%esp
	    }
  1027cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1027cf:	8b 40 04             	mov    0x4(%eax),%eax
  1027d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    else
	    {
  1027d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027d8:	8b 00                	mov    (%eax),%eax
  1027da:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1027e1:	85 c0                	test   %eax,%eax
  1027e3:	74 40                	je     102825 <ramfs_fifo_close+0x5f>
	        cpu->eax = 0;
  1027e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1027e8:	8b 40 0c             	mov    0xc(%eax),%eax
  1027eb:	83 e0 01             	and    $0x1,%eax
  1027ee:	84 c0                	test   %al,%al
  1027f0:	74 13                	je     102805 <ramfs_fifo_close+0x3f>
  1027f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027f5:	8b 00                	mov    (%eax),%eax
  1027f7:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  1027fe:	8b 50 0c             	mov    0xc(%eax),%edx
  102801:	4a                   	dec    %edx
  102802:	89 50 0c             	mov    %edx,0xc(%eax)
	    }
  102805:	8b 45 08             	mov    0x8(%ebp),%eax
  102808:	8b 40 0c             	mov    0xc(%eax),%eax
  10280b:	83 e0 02             	and    $0x2,%eax
  10280e:	85 c0                	test   %eax,%eax
  102810:	74 13                	je     102825 <ramfs_fifo_close+0x5f>
  102812:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102815:	8b 00                	mov    (%eax),%eax
  102817:	8b 04 85 c0 85 18 00 	mov    0x1885c0(,%eax,4),%eax
  10281e:	8b 50 10             	mov    0x10(%eax),%edx
  102821:	4a                   	dec    %edx
  102822:	89 50 10             	mov    %edx,0x10(%eax)

	    free(name);
	}
  102825:	83 ec 0c             	sub    $0xc,%esp
  102828:	ff 75 08             	pushl  0x8(%ebp)
  10282b:	e8 e8 10 00 00       	call   103918 <free>
  102830:	83 c4 10             	add    $0x10,%esp
	    break;

  102833:	b8 00 00 00 00       	mov    $0x0,%eax
	case 11: /* fclose */
  102838:	c9                   	leave  
  102839:	c3                   	ret    
	...

0010283c <tar_parse_number>:
  10283c:	55                   	push   %ebp
  10283d:	89 e5                	mov    %esp,%ebp
  10283f:	83 ec 10             	sub    $0x10,%esp
  102842:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102849:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  102850:	c7 45 f8 0b 00 00 00 	movl   $0xb,-0x8(%ebp)
  102857:	eb 1d                	jmp    102876 <tar_parse_number+0x3a>
  102859:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10285c:	48                   	dec    %eax
  10285d:	03 45 08             	add    0x8(%ebp),%eax
  102860:	8a 00                	mov    (%eax),%al
  102862:	0f be c0             	movsbl %al,%eax
  102865:	83 e8 30             	sub    $0x30,%eax
  102868:	0f af 45 fc          	imul   -0x4(%ebp),%eax
  10286c:	01 45 f4             	add    %eax,-0xc(%ebp)
  10286f:	ff 4d f8             	decl   -0x8(%ebp)
  102872:	c1 65 fc 03          	shll   $0x3,-0x4(%ebp)
  102876:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10287a:	75 dd                	jne    102859 <tar_parse_number+0x1d>
  10287c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10287f:	c9                   	leave  
  102880:	c3                   	ret    

00102881 <tar_load_ramfs>:

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
	case 1: /* exit */
  102881:	55                   	push   %ebp
  102882:	89 e5                	mov    %esp,%ebp
  102884:	83 ec 28             	sub    $0x28,%esp
		return terminate_current(cpu);
  102887:	8b 45 08             	mov    0x8(%ebp),%eax
  10288a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  10288d:	83 ec 08             	sub    $0x8,%esp
  102890:	ff 75 e4             	pushl  -0x1c(%ebp)
  102893:	68 94 76 10 00       	push   $0x107694
  102898:	e8 d0 dc ff ff       	call   10056d <kprintf>
  10289d:	83 c4 10             	add    $0x10,%esp
	}
	    break;
  1028a0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

    case 3: /* exec */
    {
  1028a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1028aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        char* path = strclone((char*) cpu->ebx);

  1028ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028b0:	8a 00                	mov    (%eax),%al
  1028b2:	84 c0                	test   %al,%al
  1028b4:	75 12                	jne    1028c8 <tar_load_ramfs+0x47>
    }
        break;

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  1028b6:	83 ec 0c             	sub    $0xc,%esp
  1028b9:	68 c0 76 10 00       	push   $0x1076c0
  1028be:	e8 aa dc ff ff       	call   10056d <kprintf>
  1028c3:	83 c4 10             	add    $0x10,%esp
    }
  1028c6:	c9                   	leave  
  1028c7:	c3                   	ret    
    {
        char* path = strclone((char*) cpu->ebx);

        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
  1028c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028cb:	83 c0 7c             	add    $0x7c,%eax
  1028ce:	83 ec 0c             	sub    $0xc,%esp
  1028d1:	50                   	push   %eax
  1028d2:	e8 65 ff ff ff       	call   10283c <tar_parse_number>
  1028d7:	83 c4 10             	add    $0x10,%esp
  1028da:	89 45 e0             	mov    %eax,-0x20(%ebp)
            .execPath = 0,
  1028dd:	81 45 e4 00 02 00 00 	addl   $0x200,-0x1c(%ebp)
            .stdin = 0,
            .stdout = 0,
  1028e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1028e7:	85 c0                	test   %eax,%eax
  1028e9:	0f 84 85 00 00 00    	je     102974 <tar_load_ramfs+0xf3>
            .stderr = 0
  1028ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1028f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028f5:	83 ec 04             	sub    $0x4,%esp
  1028f8:	52                   	push   %edx
  1028f9:	50                   	push   %eax
  1028fa:	68 e8 76 10 00       	push   $0x1076e8
  1028ff:	e8 69 dc ff ff       	call   10056d <kprintf>
  102904:	83 c4 10             	add    $0x10,%esp
        };

  102907:	e8 13 f8 ff ff       	call   10211f <ramfs_block_driver_struct>
  10290c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10290f:	83 ec 04             	sub    $0x4,%esp
  102912:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  102915:	51                   	push   %ecx
  102916:	50                   	push   %eax
  102917:	52                   	push   %edx
  102918:	e8 dd 18 00 00       	call   1041fa <vfs_create_kfile>
  10291d:	83 c4 10             	add    $0x10,%esp
        if(einp != 0) {
  102920:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102923:	83 ec 08             	sub    $0x8,%esp
  102926:	6a 02                	push   $0x2
  102928:	50                   	push   %eax
  102929:	e8 6b 19 00 00       	call   104299 <vfs_open>
  10292e:	83 c4 10             	add    $0x10,%esp
  102931:	89 45 f0             	mov    %eax,-0x10(%ebp)
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
  102934:	8b 45 e0             	mov    -0x20(%ebp),%eax
  102937:	6a 01                	push   $0x1
  102939:	50                   	push   %eax
  10293a:	ff 75 e4             	pushl  -0x1c(%ebp)
  10293d:	ff 75 f0             	pushl  -0x10(%ebp)
  102940:	e8 70 1a 00 00       	call   1043b5 <vfs_write>
  102945:	83 c4 10             	add    $0x10,%esp
  102948:	89 45 f4             	mov    %eax,-0xc(%ebp)
            ein.stdout = strclone(einp->stdout);
  10294b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10294f:	74 13                	je     102964 <tar_load_ramfs+0xe3>
            ein.stderr = strclone(einp->stderr);
  102951:	83 ec 08             	sub    $0x8,%esp
  102954:	ff 75 f4             	pushl  -0xc(%ebp)
  102957:	68 0c 77 10 00       	push   $0x10770c
  10295c:	e8 0c dc ff ff       	call   10056d <kprintf>
  102961:	83 c4 10             	add    $0x10,%esp
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  102964:	83 ec 0c             	sub    $0xc,%esp
  102967:	ff 75 f0             	pushl  -0x10(%ebp)
  10296a:	e8 87 19 00 00       	call   1042f6 <vfs_close>
  10296f:	83 c4 10             	add    $0x10,%esp
  102972:	eb 27                	jmp    10299b <tar_load_ramfs+0x11a>

        if(einp != 0) {
            free(ein.execPath);
            free(ein.stdin);
  102974:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102977:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10297a:	83 ec 04             	sub    $0x4,%esp
  10297d:	52                   	push   %edx
  10297e:	50                   	push   %eax
  10297f:	68 28 77 10 00       	push   $0x107728
  102984:	e8 e4 db ff ff       	call   10056d <kprintf>
  102989:	83 c4 10             	add    $0x10,%esp
            free(ein.stdout);
  10298c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10298f:	83 ec 0c             	sub    $0xc,%esp
  102992:	50                   	push   %eax
  102993:	e8 4c 18 00 00       	call   1041e4 <vfs_create_dir>
  102998:	83 c4 10             	add    $0x10,%esp
            free(ein.stderr);
        }

  10299b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10299e:	c1 e8 09             	shr    $0x9,%eax
  1029a1:	c1 e0 09             	shl    $0x9,%eax
  1029a4:	01 45 e4             	add    %eax,-0x1c(%ebp)
        free(path);
    }
  1029a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1029aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  1029af:	85 c0                	test   %eax,%eax
  1029b1:	74 07                	je     1029ba <tar_load_ramfs+0x139>
        break;
  1029b3:	81 45 e4 00 02 00 00 	addl   $0x200,-0x1c(%ebp)

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
	    break;
  1029ba:	ff 45 e8             	incl   -0x18(%ebp)

        free(path);
    }
        break;

    case 4: /* getargs */
  1029bd:	e9 e5 fe ff ff       	jmp    1028a7 <tar_load_ramfs+0x26>
	...

001029c4 <ramfs_vga_driver_struct>:
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);
  1029c4:	55                   	push   %ebp
  1029c5:	89 e5                	mov    %esp,%ebp

  1029c7:	b8 dc 60 10 00       	mov    $0x1060dc,%eax
	switch (cpu->eax) {
  1029cc:	5d                   	pop    %ebp
  1029cd:	c3                   	ret    

001029ce <ramfs_vga_writers>:
	case 1: /* exit */
		return terminate_current(cpu);
  1029ce:	55                   	push   %ebp
  1029cf:	89 e5                	mov    %esp,%ebp

  1029d1:	a1 24 85 12 00       	mov    0x128524,%eax
	case 2: /* pexists */
  1029d6:	5d                   	pop    %ebp
  1029d7:	c3                   	ret    

001029d8 <ramfs_vga_available>:
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  1029d8:	55                   	push   %ebp
  1029d9:	89 e5                	mov    %esp,%ebp
	}
  1029db:	b8 06 00 00 00       	mov    $0x6,%eax
	    break;
  1029e0:	5d                   	pop    %ebp
  1029e1:	c3                   	ret    

001029e2 <ramfs_vga_create>:

    case 3: /* exec */
  1029e2:	55                   	push   %ebp
  1029e3:	89 e5                	mov    %esp,%ebp
  1029e5:	83 ec 08             	sub    $0x8,%esp
    {
  1029e8:	83 ec 0c             	sub    $0xc,%esp
  1029eb:	6a 08                	push   $0x8
  1029ed:	e8 e0 0c 00 00       	call   1036d2 <malloc>
  1029f2:	83 c4 10             	add    $0x10,%esp
        char* path = strclone((char*) cpu->ebx);
  1029f5:	c9                   	leave  
  1029f6:	c3                   	ret    

001029f7 <ramfs_vga_read>:

        struct exec_info* einp = (void*) cpu->edx;
  1029f7:	55                   	push   %ebp
  1029f8:	89 e5                	mov    %esp,%ebp

  1029fa:	b8 03 00 00 00       	mov    $0x3,%eax
        struct exec_info ein = {
  1029ff:	5d                   	pop    %ebp
  102a00:	c3                   	ret    

00102a01 <ramfs_vga_write>:
            .execPath = 0,
            .stdin = 0,
  102a01:	55                   	push   %ebp
  102a02:	89 e5                	mov    %esp,%ebp
  102a04:	83 ec 10             	sub    $0x10,%esp
            .stdout = 0,
  102a07:	83 7d 10 06          	cmpl   $0x6,0x10(%ebp)
  102a0b:	74 0a                	je     102a17 <ramfs_vga_write+0x16>
  102a0d:	b8 03 00 00 00       	mov    $0x3,%eax
  102a12:	e9 d7 00 00 00       	jmp    102aee <ramfs_vga_write+0xed>
            .stderr = 0
        };
  102a17:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(einp != 0) {
  102a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a20:	66 8b 00             	mov    (%eax),%ax
  102a23:	66 85 c0             	test   %ax,%ax
  102a26:	75 2d                	jne    102a55 <ramfs_vga_write+0x54>
            ein.execPath = strclone(einp->execPath);
  102a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a2b:	66 8b 40 02          	mov    0x2(%eax),%ax
  102a2f:	66 3d cf 07          	cmp    $0x7cf,%ax
  102a33:	77 20                	ja     102a55 <ramfs_vga_write+0x54>
  102a35:	8b 15 d8 60 10 00    	mov    0x1060d8,%edx
  102a3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a3e:	66 8b 40 02          	mov    0x2(%eax),%ax
  102a42:	25 ff ff 00 00       	and    $0xffff,%eax
  102a47:	01 c0                	add    %eax,%eax
  102a49:	01 c2                	add    %eax,%edx
  102a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a4e:	66 8b 40 04          	mov    0x4(%eax),%ax
  102a52:	66 89 02             	mov    %ax,(%edx)
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
  102a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a58:	66 8b 00             	mov    (%eax),%ax
  102a5b:	66 83 f8 01          	cmp    $0x1,%ax
  102a5f:	75 26                	jne    102a87 <ramfs_vga_write+0x86>
        }
  102a61:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102a68:	eb 14                	jmp    102a7e <ramfs_vga_write+0x7d>

  102a6a:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102a6f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102a72:	01 d2                	add    %edx,%edx
  102a74:	01 d0                	add    %edx,%eax
  102a76:	66 c7 00 00 00       	movw   $0x0,(%eax)
        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
        }
  102a7b:	ff 45 f8             	incl   -0x8(%ebp)
  102a7e:	81 7d f8 cf 07 00 00 	cmpl   $0x7cf,-0x8(%ebp)
  102a85:	7e e3                	jle    102a6a <ramfs_vga_write+0x69>

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
  102a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a8a:	66 8b 00             	mov    (%eax),%ax
  102a8d:	66 83 f8 02          	cmp    $0x2,%ax
  102a91:	75 56                	jne    102ae9 <ramfs_vga_write+0xe8>
            free(ein.stdin);
            free(ein.stdout);
  102a93:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102a9a:	eb 25                	jmp    102ac1 <ramfs_vga_write+0xc0>
            free(ein.stderr);
  102a9c:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102aa1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102aa4:	01 d2                	add    %edx,%edx
  102aa6:	8d 14 10             	lea    (%eax,%edx,1),%edx
  102aa9:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102aae:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102ab1:	83 c1 50             	add    $0x50,%ecx
  102ab4:	01 c9                	add    %ecx,%ecx
  102ab6:	01 c8                	add    %ecx,%eax
  102ab8:	66 8b 00             	mov    (%eax),%ax
  102abb:	66 89 02             	mov    %ax,(%edx)
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
            free(ein.stdin);
            free(ein.stdout);
  102abe:	ff 45 fc             	incl   -0x4(%ebp)
  102ac1:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%ebp)
  102ac8:	7e d2                	jle    102a9c <ramfs_vga_write+0x9b>
            free(ein.stderr);
        }

        free(path);
  102aca:	eb 14                	jmp    102ae0 <ramfs_vga_write+0xdf>
    }
  102acc:	a1 d8 60 10 00       	mov    0x1060d8,%eax
  102ad1:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102ad4:	01 d2                	add    %edx,%edx
  102ad6:	01 d0                	add    %edx,%eax
  102ad8:	66 c7 00 00 00       	movw   $0x0,(%eax)
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
        }

        free(path);
  102add:	ff 45 fc             	incl   -0x4(%ebp)
  102ae0:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%ebp)
  102ae7:	7e e3                	jle    102acc <ramfs_vga_write+0xcb>
    }
        break;

    case 4: /* getargs */
    {
  102ae9:	b8 00 00 00 00       	mov    $0x0,%eax
        cpu->eax = (uint32_t) get_current_task()->args;
  102aee:	c9                   	leave  
  102aef:	c3                   	ret    

00102af0 <ramfs_vga_open>:
    }
        break;
  102af0:	55                   	push   %ebp
  102af1:	89 e5                	mov    %esp,%ebp
  102af3:	83 ec 18             	sub    $0x18,%esp

  102af6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102af9:	83 e0 04             	and    $0x4,%eax
  102afc:	85 c0                	test   %eax,%eax
  102afe:	74 07                	je     102b07 <ramfs_vga_open+0x17>
  102b00:	b8 00 00 00 00       	mov    $0x0,%eax
  102b05:	eb 78                	jmp    102b7f <ramfs_vga_open+0x8f>
    case 5: /* yield */
  102b07:	8b 45 0c             	mov    0xc(%ebp),%eax
  102b0a:	83 e0 01             	and    $0x1,%eax
  102b0d:	84 c0                	test   %al,%al
  102b0f:	74 07                	je     102b18 <ramfs_vga_open+0x28>
  102b11:	b8 00 00 00 00       	mov    $0x0,%eax
  102b16:	eb 67                	jmp    102b7f <ramfs_vga_open+0x8f>
    {
        cpu = schedule(cpu);
  102b18:	8b 45 0c             	mov    0xc(%ebp),%eax
  102b1b:	83 e0 02             	and    $0x2,%eax
  102b1e:	85 c0                	test   %eax,%eax
  102b20:	74 10                	je     102b32 <ramfs_vga_open+0x42>
  102b22:	a1 24 85 12 00       	mov    0x128524,%eax
  102b27:	85 c0                	test   %eax,%eax
  102b29:	74 07                	je     102b32 <ramfs_vga_open+0x42>
  102b2b:	b8 00 00 00 00       	mov    $0x0,%eax
  102b30:	eb 4d                	jmp    102b7f <ramfs_vga_open+0x8f>
    }
  102b32:	8b 45 0c             	mov    0xc(%ebp),%eax
  102b35:	83 e0 02             	and    $0x2,%eax
  102b38:	85 c0                	test   %eax,%eax
  102b3a:	74 0b                	je     102b47 <ramfs_vga_open+0x57>
  102b3c:	a1 24 85 12 00       	mov    0x128524,%eax
  102b41:	40                   	inc    %eax
  102b42:	a3 24 85 12 00       	mov    %eax,0x128524
        break;

  102b47:	83 ec 0c             	sub    $0xc,%esp
  102b4a:	6a 10                	push   $0x10
  102b4c:	e8 81 0b 00 00       	call   1036d2 <malloc>
  102b51:	83 c4 10             	add    $0x10,%esp
  102b54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    case 6: /* getExecPath */
    {
  102b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b5a:	8b 55 0c             	mov    0xc(%ebp),%edx
  102b5d:	89 50 0c             	mov    %edx,0xc(%eax)
        char* dest = (char*)cpu->ebx;
  102b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b63:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  102b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b6d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    }
  102b73:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b76:	8b 55 08             	mov    0x8(%ebp),%edx
  102b79:	89 50 04             	mov    %edx,0x4(%eax)
        break;

  102b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    case 7: /* changeExecPath */
  102b7f:	c9                   	leave  
  102b80:	c3                   	ret    

00102b81 <ramfs_vga_close>:
    {
        vfs_reset_error();
  102b81:	55                   	push   %ebp
  102b82:	89 e5                	mov    %esp,%ebp
  102b84:	83 ec 08             	sub    $0x8,%esp
        char* path = strclone((char*) cpu->ebx);
  102b87:	8b 45 08             	mov    0x8(%ebp),%eax
  102b8a:	8b 40 0c             	mov    0xc(%eax),%eax
  102b8d:	83 e0 02             	and    $0x2,%eax
  102b90:	85 c0                	test   %eax,%eax
  102b92:	74 0b                	je     102b9f <ramfs_vga_close+0x1e>
  102b94:	a1 24 85 12 00       	mov    0x128524,%eax
  102b99:	48                   	dec    %eax
  102b9a:	a3 24 85 12 00       	mov    %eax,0x128524

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  102b9f:	83 ec 0c             	sub    $0xc,%esp
  102ba2:	ff 75 08             	pushl  0x8(%ebp)
  102ba5:	e8 6e 0d 00 00       	call   103918 <free>
  102baa:	83 c4 10             	add    $0x10,%esp

        char* new = vfs_resolve_path(path);
  102bad:	b8 00 00 00 00       	mov    $0x0,%eax

  102bb2:	c9                   	leave  
  102bb3:	c3                   	ret    

00102bb4 <enableScheduling>:
    char* stdin;
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  102bb4:	55                   	push   %ebp
  102bb5:	89 e5                	mov    %esp,%ebp
    cpu = save_cpu_state(cpu);
  102bb7:	c7 05 28 85 12 00 01 	movl   $0x1,0x128528
  102bbe:	00 00 00 

  102bc1:	5d                   	pop    %ebp
  102bc2:	c3                   	ret    

00102bc3 <isSchedulingEnabled>:
	switch (cpu->eax) {
	case 1: /* exit */
  102bc3:	55                   	push   %ebp
  102bc4:	89 e5                	mov    %esp,%ebp
		return terminate_current(cpu);
  102bc6:	a1 28 85 12 00       	mov    0x128528,%eax

  102bcb:	5d                   	pop    %ebp
  102bcc:	c3                   	ret    

00102bcd <get_current_task>:
	case 2: /* pexists */
	{
  102bcd:	55                   	push   %ebp
  102bce:	89 e5                	mov    %esp,%ebp
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  102bd0:	a1 30 85 12 00       	mov    0x128530,%eax
	}
  102bd5:	5d                   	pop    %ebp
  102bd6:	c3                   	ret    

00102bd7 <get_task_by_pid>:
	    break;

  102bd7:	55                   	push   %ebp
  102bd8:	89 e5                	mov    %esp,%ebp
  102bda:	83 ec 10             	sub    $0x10,%esp
    case 3: /* exec */
  102bdd:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102be2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    {
        char* path = strclone((char*) cpu->ebx);
  102be5:	eb 18                	jmp    102bff <get_task_by_pid+0x28>

  102be7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102bea:	8b 00                	mov    (%eax),%eax
  102bec:	3b 45 08             	cmp    0x8(%ebp),%eax
  102bef:	75 05                	jne    102bf6 <get_task_by_pid+0x1f>
  102bf1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102bf4:	eb 14                	jmp    102c0a <get_task_by_pid+0x33>
        struct exec_info* einp = (void*) cpu->edx;
  102bf6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102bf9:	8b 40 08             	mov    0x8(%eax),%eax
  102bfc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	}
	    break;

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  102bff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  102c03:	75 e2                	jne    102be7 <get_task_by_pid+0x10>

        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
            .execPath = 0,
  102c05:	b8 00 00 00 00       	mov    $0x0,%eax
            .stdin = 0,
  102c0a:	c9                   	leave  
  102c0b:	c3                   	ret    

00102c0c <register_handle>:
            .stdout = 0,
            .stderr = 0
  102c0c:	55                   	push   %ebp
  102c0d:	89 e5                	mov    %esp,%ebp
  102c0f:	53                   	push   %ebx
  102c10:	83 ec 14             	sub    $0x14,%esp
        };
  102c13:	a1 30 85 12 00       	mov    0x128530,%eax
  102c18:	8b 40 3c             	mov    0x3c(%eax),%eax
  102c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(einp != 0) {
  102c1e:	8b 1d 30 85 12 00    	mov    0x128530,%ebx
  102c24:	83 ec 0c             	sub    $0xc,%esp
  102c27:	6a 08                	push   $0x8
  102c29:	e8 a4 0a 00 00       	call   1036d2 <malloc>
  102c2e:	83 c4 10             	add    $0x10,%esp
  102c31:	89 43 3c             	mov    %eax,0x3c(%ebx)
            ein.execPath = strclone(einp->execPath);
  102c34:	a1 30 85 12 00       	mov    0x128530,%eax
  102c39:	8b 40 3c             	mov    0x3c(%eax),%eax
  102c3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102c3f:	89 50 04             	mov    %edx,0x4(%eax)
            ein.stdin = strclone(einp->stdin);
  102c42:	a1 30 85 12 00       	mov    0x128530,%eax
  102c47:	8b 40 3c             	mov    0x3c(%eax),%eax
  102c4a:	8b 55 08             	mov    0x8(%ebp),%edx
  102c4d:	89 10                	mov    %edx,(%eax)
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
  102c4f:	b8 00 00 00 00       	mov    $0x0,%eax
        }
  102c54:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102c57:	c9                   	leave  
  102c58:	c3                   	ret    

00102c59 <unregister_handle>:

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  102c59:	55                   	push   %ebp
  102c5a:	89 e5                	mov    %esp,%ebp
  102c5c:	83 ec 18             	sub    $0x18,%esp

  102c5f:	a1 30 85 12 00       	mov    0x128530,%eax
  102c64:	8b 40 3c             	mov    0x3c(%eax),%eax
  102c67:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(einp != 0) {
            free(ein.execPath);
  102c6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  102c6e:	75 0a                	jne    102c7a <unregister_handle+0x21>
  102c70:	b8 02 00 00 00       	mov    $0x2,%eax
  102c75:	e9 88 00 00 00       	jmp    102d02 <unregister_handle+0xa9>
            free(ein.stdin);
  102c7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102c7e:	75 07                	jne    102c87 <unregister_handle+0x2e>
  102c80:	b8 01 00 00 00       	mov    $0x1,%eax
  102c85:	eb 7b                	jmp    102d02 <unregister_handle+0xa9>
            free(ein.stdout);
            free(ein.stderr);
  102c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c8a:	8b 00                	mov    (%eax),%eax
  102c8c:	3b 45 08             	cmp    0x8(%ebp),%eax
  102c8f:	75 66                	jne    102cf7 <unregister_handle+0x9e>
        }
  102c91:	a1 30 85 12 00       	mov    0x128530,%eax
  102c96:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102c99:	8b 52 04             	mov    0x4(%edx),%edx
  102c9c:	89 50 3c             	mov    %edx,0x3c(%eax)

  102c9f:	83 ec 0c             	sub    $0xc,%esp
  102ca2:	ff 75 f0             	pushl  -0x10(%ebp)
  102ca5:	e8 6e 0c 00 00       	call   103918 <free>
  102caa:	83 c4 10             	add    $0x10,%esp
        free(path);
    }
  102cad:	b8 00 00 00 00       	mov    $0x0,%eax
  102cb2:	eb 4e                	jmp    102d02 <unregister_handle+0xa9>
        break;

    case 4: /* getargs */
    {
  102cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cb7:	8b 40 04             	mov    0x4(%eax),%eax
  102cba:	8b 00                	mov    (%eax),%eax
  102cbc:	3b 45 08             	cmp    0x8(%ebp),%eax
  102cbf:	75 2d                	jne    102cee <unregister_handle+0x95>
        cpu->eax = (uint32_t) get_current_task()->args;
  102cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cc4:	8b 40 04             	mov    0x4(%eax),%eax
  102cc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  102cca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ccd:	8b 40 04             	mov    0x4(%eax),%eax
  102cd0:	8b 50 04             	mov    0x4(%eax),%edx
  102cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cd6:	89 50 04             	mov    %edx,0x4(%eax)
        break;

  102cd9:	83 ec 0c             	sub    $0xc,%esp
  102cdc:	ff 75 f4             	pushl  -0xc(%ebp)
  102cdf:	e8 34 0c 00 00       	call   103918 <free>
  102ce4:	83 c4 10             	add    $0x10,%esp
    case 5: /* yield */
    {
  102ce7:	b8 00 00 00 00       	mov    $0x0,%eax
  102cec:	eb 14                	jmp    102d02 <unregister_handle+0xa9>
        cpu = schedule(cpu);
    }
        break;
  102cee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cf1:	8b 40 04             	mov    0x4(%eax),%eax
  102cf4:	89 45 f0             	mov    %eax,-0x10(%ebp)

        free(path);
    }
        break;

    case 4: /* getargs */
  102cf7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102cfb:	75 b7                	jne    102cb4 <unregister_handle+0x5b>
        cpu = schedule(cpu);
    }
        break;

    case 6: /* getExecPath */
    {
  102cfd:	b8 03 00 00 00       	mov    $0x3,%eax
        char* dest = (char*)cpu->ebx;
  102d02:	c9                   	leave  
  102d03:	c3                   	ret    

00102d04 <schedule_exception>:
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
  102d04:	55                   	push   %ebp
  102d05:	89 e5                	mov    %esp,%ebp
  102d07:	53                   	push   %ebx
  102d08:	83 ec 04             	sub    $0x4,%esp
        break;
  102d0b:	8b 15 30 85 12 00    	mov    0x128530,%edx
  102d11:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102d16:	39 c2                	cmp    %eax,%edx
  102d18:	75 62                	jne    102d7c <schedule_exception+0x78>
  102d1a:	a1 30 85 12 00       	mov    0x128530,%eax
  102d1f:	8b 40 08             	mov    0x8(%eax),%eax
  102d22:	85 c0                	test   %eax,%eax
  102d24:	75 56                	jne    102d7c <schedule_exception+0x78>

    case 7: /* changeExecPath */
  102d26:	83 ec 0c             	sub    $0xc,%esp
  102d29:	6a 04                	push   $0x4
  102d2b:	e8 27 d8 ff ff       	call   100557 <setclr>
  102d30:	83 c4 10             	add    $0x10,%esp
    {
  102d33:	8b 45 08             	mov    0x8(%ebp),%eax
  102d36:	8b 58 20             	mov    0x20(%eax),%ebx
  102d39:	8b 45 08             	mov    0x8(%ebp),%eax
  102d3c:	8b 48 1c             	mov    0x1c(%eax),%ecx
  102d3f:	a1 30 85 12 00       	mov    0x128530,%eax
  102d44:	8b 50 24             	mov    0x24(%eax),%edx
  102d47:	a1 30 85 12 00       	mov    0x128530,%eax
  102d4c:	8b 00                	mov    (%eax),%eax
  102d4e:	83 ec 0c             	sub    $0xc,%esp
  102d51:	53                   	push   %ebx
  102d52:	51                   	push   %ecx
  102d53:	52                   	push   %edx
  102d54:	50                   	push   %eax
  102d55:	68 5c 77 10 00       	push   $0x10775c
  102d5a:	e8 0e d8 ff ff       	call   10056d <kprintf>
  102d5f:	83 c4 20             	add    $0x20,%esp
        vfs_reset_error();
  102d62:	83 ec 08             	sub    $0x8,%esp
  102d65:	68 9c 77 10 00       	push   $0x10779c
  102d6a:	ff 75 08             	pushl  0x8(%ebp)
  102d6d:	e8 64 d4 ff ff       	call   1001d6 <show_cod>
  102d72:	83 c4 10             	add    $0x10,%esp
        char* path = strclone((char*) cpu->ebx);

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  102d75:	b8 00 00 00 00       	mov    $0x0,%eax
  102d7a:	eb 75                	jmp    102df1 <schedule_exception+0xed>

        char* new = vfs_resolve_path(path);

  102d7c:	83 ec 0c             	sub    $0xc,%esp
  102d7f:	6a 04                	push   $0x4
  102d81:	e8 d1 d7 ff ff       	call   100557 <setclr>
  102d86:	83 c4 10             	add    $0x10,%esp
        cpu->eax = 0;
  102d89:	8b 45 08             	mov    0x8(%ebp),%eax
  102d8c:	8b 58 20             	mov    0x20(%eax),%ebx
  102d8f:	8b 45 08             	mov    0x8(%ebp),%eax
  102d92:	8b 48 1c             	mov    0x1c(%eax),%ecx
  102d95:	a1 30 85 12 00       	mov    0x128530,%eax
  102d9a:	8b 50 24             	mov    0x24(%eax),%edx
  102d9d:	a1 30 85 12 00       	mov    0x128530,%eax
  102da2:	8b 00                	mov    (%eax),%eax
  102da4:	83 ec 0c             	sub    $0xc,%esp
  102da7:	53                   	push   %ebx
  102da8:	51                   	push   %ecx
  102da9:	52                   	push   %edx
  102daa:	50                   	push   %eax
  102dab:	68 5c 77 10 00       	push   $0x10775c
  102db0:	e8 b8 d7 ff ff       	call   10056d <kprintf>
  102db5:	83 c4 20             	add    $0x20,%esp
        if(new) {
  102db8:	83 ec 0c             	sub    $0xc,%esp
  102dbb:	68 c5 77 10 00       	push   $0x1077c5
  102dc0:	e8 a8 d7 ff ff       	call   10056d <kprintf>
  102dc5:	83 c4 10             	add    $0x10,%esp
            get_current_task()->execPath = new;
  102dc8:	83 ec 0c             	sub    $0xc,%esp
  102dcb:	ff 75 08             	pushl  0x8(%ebp)
  102dce:	e8 5e d4 ff ff       	call   100231 <show_dump>
  102dd3:	83 c4 10             	add    $0x10,%esp
            cpu->eax = 1;
  102dd6:	83 ec 0c             	sub    $0xc,%esp
  102dd9:	6a 07                	push   $0x7
  102ddb:	e8 77 d7 ff ff       	call   100557 <setclr>
  102de0:	83 c4 10             	add    $0x10,%esp
        }

  102de3:	83 ec 0c             	sub    $0xc,%esp
  102de6:	ff 75 08             	pushl  0x8(%ebp)
  102de9:	e8 08 00 00 00       	call   102df6 <terminate_current>
  102dee:	83 c4 10             	add    $0x10,%esp
        free(path);
    }
  102df1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102df4:	c9                   	leave  
  102df5:	c3                   	ret    

00102df6 <terminate_current>:
        break;

  102df6:	55                   	push   %ebp
  102df7:	89 e5                	mov    %esp,%ebp
  102df9:	83 ec 18             	sub    $0x18,%esp
	case 10: /* fopen */
  102dfc:	a1 30 85 12 00       	mov    0x128530,%eax
  102e01:	8b 40 08             	mov    0x8(%eax),%eax
  102e04:	89 45 ec             	mov    %eax,-0x14(%ebp)
	{
  102e07:	a1 30 85 12 00       	mov    0x128530,%eax
  102e0c:	8b 40 0c             	mov    0xc(%eax),%eax
  102e0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_reset_error();
  102e12:	a1 30 85 12 00       	mov    0x128530,%eax
  102e17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;
  102e1a:	e8 a2 1f 00 00       	call   104dc1 <vmm_free_current_pagetables>

	    struct res_handle* handle = vfs_open(name, fmode);
  102e1f:	8b 15 30 85 12 00    	mov    0x128530,%edx
  102e25:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102e2a:	39 c2                	cmp    %eax,%edx
  102e2c:	75 0d                	jne    102e3b <terminate_current+0x45>
	    if(handle) {
  102e2e:	a1 30 85 12 00       	mov    0x128530,%eax
  102e33:	8b 40 08             	mov    0x8(%eax),%eax
  102e36:	a3 2c 85 12 00       	mov    %eax,0x12852c
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
	    }
  102e3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  102e3f:	74 09                	je     102e4a <terminate_current+0x54>
	    else
  102e41:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102e44:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102e47:	89 50 0c             	mov    %edx,0xc(%eax)
	    {
	        cpu->eax = 0;
	    }
  102e4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  102e4e:	74 09                	je     102e59 <terminate_current+0x63>

  102e50:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e53:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102e56:	89 50 08             	mov    %edx,0x8(%eax)
	    free(name);
	}
	    break;
  102e59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  102e5d:	75 08                	jne    102e67 <terminate_current+0x71>

  102e5f:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102e64:	89 45 ec             	mov    %eax,-0x14(%ebp)
	case 11: /* fclose */
	{
        vfs_reset_error();
  102e67:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102e6a:	a3 30 85 12 00       	mov    %eax,0x128530
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(!unregister_handle(handle)) {
  102e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e72:	8b 40 04             	mov    0x4(%eax),%eax
  102e75:	83 ec 0c             	sub    $0xc,%esp
  102e78:	50                   	push   %eax
  102e79:	e8 9a 0a 00 00       	call   103918 <free>
  102e7e:	83 c4 10             	add    $0x10,%esp
	        vfs_close(handle);
  102e81:	83 ec 0c             	sub    $0xc,%esp
  102e84:	ff 75 f4             	pushl  -0xc(%ebp)
  102e87:	e8 8c 0a 00 00       	call   103918 <free>
  102e8c:	83 c4 10             	add    $0x10,%esp

	        cpu->eax = 0;
  102e8f:	a1 30 85 12 00       	mov    0x128530,%eax
  102e94:	85 c0                	test   %eax,%eax
  102e96:	75 13                	jne    102eab <terminate_current+0xb5>
	    }
  102e98:	83 ec 08             	sub    $0x8,%esp
  102e9b:	68 c7 77 10 00       	push   $0x1077c7
  102ea0:	ff 75 08             	pushl  0x8(%ebp)
  102ea3:	e8 2e d3 ff ff       	call   1001d6 <show_cod>
  102ea8:	83 c4 10             	add    $0x10,%esp
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  102eab:	a1 30 85 12 00       	mov    0x128530,%eax
  102eb0:	8b 40 14             	mov    0x14(%eax),%eax
  102eb3:	83 ec 0c             	sub    $0xc,%esp
  102eb6:	50                   	push   %eax
  102eb7:	e8 c8 24 00 00       	call   105384 <vmm_activate_pagedir>
  102ebc:	83 c4 10             	add    $0x10,%esp
	    }
  102ebf:	a1 30 85 12 00       	mov    0x128530,%eax
  102ec4:	8b 40 04             	mov    0x4(%eax),%eax
	}
  102ec7:	c9                   	leave  
  102ec8:	c3                   	ret    

00102ec9 <init_task>:
	    break;

  102ec9:	55                   	push   %ebp
  102eca:	89 e5                	mov    %esp,%ebp
  102ecc:	57                   	push   %edi
  102ecd:	56                   	push   %esi
  102ece:	53                   	push   %ebx
  102ecf:	83 ec 6c             	sub    $0x6c,%esp
	case 12: /* fwrite */
  102ed2:	83 ec 08             	sub    $0x8,%esp
  102ed5:	6a 40                	push   $0x40
  102ed7:	6a 01                	push   $0x1
  102ed9:	e8 6a 09 00 00       	call   103848 <calloc>
  102ede:	83 c4 10             	add    $0x10,%esp
  102ee1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	{
  102ee4:	83 ec 08             	sub    $0x8,%esp
  102ee7:	6a 38                	push   $0x38
  102ee9:	6a 01                	push   $0x1
  102eeb:	e8 58 09 00 00       	call   103848 <calloc>
  102ef0:	83 c4 10             	add    $0x10,%esp
  102ef3:	89 c2                	mov    %eax,%edx
  102ef5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ef8:	89 50 04             	mov    %edx,0x4(%eax)
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
  102efb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102efe:	8b 55 08             	mov    0x8(%ebp),%edx
  102f01:	89 50 14             	mov    %edx,0x14(%eax)
	    if(handle != 0) {
  102f04:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f07:	c7 40 10 00 00 ff ff 	movl   $0xffff0000,0x10(%eax)
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  102f0e:	a1 f8 60 10 00       	mov    0x1060f8,%eax
  102f13:	8b 55 dc             	mov    -0x24(%ebp),%edx
  102f16:	89 02                	mov    %eax,(%edx)
  102f18:	40                   	inc    %eax
  102f19:	a3 f8 60 10 00       	mov    %eax,0x1060f8
	    }
	    else
  102f1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f21:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
	    {
  102f28:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f2b:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            cpu->eax = RW_ERR_VFS;
  102f32:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f35:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
	    }
	}
  102f3c:	8b 15 2c 85 12 00    	mov    0x12852c,%edx
  102f42:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f45:	89 50 08             	mov    %edx,0x8(%eax)
	    break;
  102f48:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f4b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

	case 13: /* fread */
  102f52:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102f57:	85 c0                	test   %eax,%eax
  102f59:	74 0b                	je     102f66 <init_task+0x9d>
	{
  102f5b:	a1 2c 85 12 00       	mov    0x12852c,%eax
  102f60:	8b 55 dc             	mov    -0x24(%ebp),%edx
  102f63:	89 50 0c             	mov    %edx,0xc(%eax)
        vfs_reset_error();
        struct res_handle* handle = (void*) cpu->ebx;
        if(handle != 0) {
  102f66:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f69:	a3 2c 85 12 00       	mov    %eax,0x12852c
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
  102f6e:	e8 19 1e 00 00       	call   104d8c <vmm_get_current_pagedir>
  102f73:	89 45 e0             	mov    %eax,-0x20(%ebp)
        else
  102f76:	83 ec 0c             	sub    $0xc,%esp
  102f79:	ff 75 08             	pushl  0x8(%ebp)
  102f7c:	e8 03 24 00 00       	call   105384 <vmm_activate_pagedir>
  102f81:	83 c4 10             	add    $0x10,%esp
        {
            cpu->eax = RW_ERR_VFS;
  102f84:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102f87:	8b 40 10             	mov    0x10(%eax),%eax
  102f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102f8d:	eb 17                	jmp    102fa6 <init_task+0xdd>
        }
  102f8f:	83 ec 08             	sub    $0x8,%esp
  102f92:	6a 00                	push   $0x0
  102f94:	ff 75 e4             	pushl  -0x1c(%ebp)
  102f97:	e8 43 23 00 00       	call   1052df <vmm_alloc_addr>
  102f9c:	83 c4 10             	add    $0x10,%esp
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
        {
            cpu->eax = RW_ERR_VFS;
  102f9f:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  102fa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102fa9:	3d ff ef ff ff       	cmp    $0xffffefff,%eax
  102fae:	76 df                	jbe    102f8f <init_task+0xc6>
	}
	    break;

	case 14: /* fmkfifo */
	{
        vfs_reset_error();
  102fb0:	8b 75 0c             	mov    0xc(%ebp),%esi
        }
	}
	    break;

	case 14: /* fmkfifo */
	{
  102fb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102fb6:	8b 40 10             	mov    0x10(%eax),%eax
  102fb9:	05 00 10 00 00       	add    $0x1000,%eax
  102fbe:	89 45 94             	mov    %eax,-0x6c(%ebp)
        vfs_reset_error();
        char* name = strclone((char*) cpu->ebx);
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
        if(handle) {
  102fc1:	8d 5d a4             	lea    -0x5c(%ebp),%ebx
  102fc4:	b8 00 00 00 00       	mov    $0x0,%eax
  102fc9:	ba 0e 00 00 00       	mov    $0xe,%edx
  102fce:	89 df                	mov    %ebx,%edi
  102fd0:	89 d1                	mov    %edx,%ecx
  102fd2:	f3 ab                	rep stos %eax,%es:(%edi)
  102fd4:	89 75 c8             	mov    %esi,-0x38(%ebp)
  102fd7:	c7 45 cc 1b 00 00 00 	movl   $0x1b,-0x34(%ebp)
  102fde:	c7 45 d0 00 02 00 00 	movl   $0x200,-0x30(%ebp)
  102fe5:	8b 45 94             	mov    -0x6c(%ebp),%eax
  102fe8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102feb:	c7 45 d8 23 00 00 00 	movl   $0x23,-0x28(%ebp)
            register_handle(handle);
            cpu->eax = (uint32_t) handle;
  102ff2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102ff5:	8b 40 04             	mov    0x4(%eax),%eax
  102ff8:	83 ec 04             	sub    $0x4,%esp
  102ffb:	6a 38                	push   $0x38
  102ffd:	8d 55 a4             	lea    -0x5c(%ebp),%edx
  103000:	52                   	push   %edx
  103001:	50                   	push   %eax
  103002:	e8 93 09 00 00       	call   10399a <memcpy>
  103007:	83 c4 10             	add    $0x10,%esp
        }
        else
  10300a:	83 ec 0c             	sub    $0xc,%esp
  10300d:	ff 75 e0             	pushl  -0x20(%ebp)
  103010:	e8 6f 23 00 00       	call   105384 <vmm_activate_pagedir>
  103015:	83 c4 10             	add    $0x10,%esp
        {
            cpu->eax = 0;
  103018:	8b 45 dc             	mov    -0x24(%ebp),%eax
        }
  10301b:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10301e:	83 c4 00             	add    $0x0,%esp
  103021:	5b                   	pop    %ebx
  103022:	5e                   	pop    %esi
  103023:	5f                   	pop    %edi
  103024:	5d                   	pop    %ebp
  103025:	c3                   	ret    

00103026 <save_cpu_state>:

        free(name);
  103026:	55                   	push   %ebp
  103027:	89 e5                	mov    %esp,%ebp
  103029:	83 ec 08             	sub    $0x8,%esp
	}
  10302c:	a1 30 85 12 00       	mov    0x128530,%eax
  103031:	8b 40 18             	mov    0x18(%eax),%eax
  103034:	85 c0                	test   %eax,%eax
  103036:	74 38                	je     103070 <save_cpu_state+0x4a>
  103038:	a1 30 85 12 00       	mov    0x128530,%eax
  10303d:	8b 40 18             	mov    0x18(%eax),%eax
  103040:	8a 40 14             	mov    0x14(%eax),%al
  103043:	84 c0                	test   %al,%al
  103045:	74 29                	je     103070 <save_cpu_state+0x4a>
	    break;
  103047:	a1 30 85 12 00       	mov    0x128530,%eax
  10304c:	8b 40 18             	mov    0x18(%eax),%eax
  10304f:	8b 40 18             	mov    0x18(%eax),%eax
  103052:	83 ec 04             	sub    $0x4,%esp
  103055:	6a 38                	push   $0x38
  103057:	ff 75 08             	pushl  0x8(%ebp)
  10305a:	50                   	push   %eax
  10305b:	e8 3a 09 00 00       	call   10399a <memcpy>
  103060:	83 c4 10             	add    $0x10,%esp

  103063:	a1 30 85 12 00       	mov    0x128530,%eax
  103068:	8b 40 18             	mov    0x18(%eax),%eax
  10306b:	8b 40 18             	mov    0x18(%eax),%eax
  10306e:	eb 21                	jmp    103091 <save_cpu_state+0x6b>
	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
        vfs_reset_error();
  103070:	a1 30 85 12 00       	mov    0x128530,%eax
  103075:	8b 40 04             	mov    0x4(%eax),%eax
  103078:	83 ec 04             	sub    $0x4,%esp
  10307b:	6a 38                	push   $0x38
  10307d:	ff 75 08             	pushl  0x8(%ebp)
  103080:	50                   	push   %eax
  103081:	e8 14 09 00 00       	call   10399a <memcpy>
  103086:	83 c4 10             	add    $0x10,%esp
	}
  103089:	a1 30 85 12 00       	mov    0x128530,%eax
  10308e:	8b 40 04             	mov    0x4(%eax),%eax
	    break;

  103091:	c9                   	leave  
  103092:	c3                   	ret    

00103093 <schedule_to_task>:
	case 16: /* favailable */
	{
  103093:	55                   	push   %ebp
  103094:	89 e5                	mov    %esp,%ebp
  103096:	83 ec 08             	sub    $0x8,%esp
	    cpu->eax = vfs_available((void*)cpu->ebx);
  103099:	8b 45 08             	mov    0x8(%ebp),%eax
  10309c:	a3 30 85 12 00       	mov    %eax,0x128530
	}
	    break;
  1030a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1030a4:	8b 40 14             	mov    0x14(%eax),%eax
  1030a7:	83 ec 0c             	sub    $0xc,%esp
  1030aa:	50                   	push   %eax
  1030ab:	e8 d4 22 00 00       	call   105384 <vmm_activate_pagedir>
  1030b0:	83 c4 10             	add    $0x10,%esp

	case 17: /* getExecPathChild */
  1030b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1030b6:	8b 40 18             	mov    0x18(%eax),%eax
  1030b9:	85 c0                	test   %eax,%eax
  1030bb:	75 08                	jne    1030c5 <schedule_to_task+0x32>
	{
  1030bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1030c0:	8b 40 04             	mov    0x4(%eax),%eax
  1030c3:	eb 24                	jmp    1030e9 <schedule_to_task+0x56>
		char* path = vfs_get_child_of_exec_path(cpu->ebx);

		if(path != 0 && cpu->ecx != 0) {
			strcpy((char*)cpu->ecx, path);
  1030c5:	8b 45 08             	mov    0x8(%ebp),%eax
  1030c8:	8b 40 18             	mov    0x18(%eax),%eax
  1030cb:	8a 40 14             	mov    0x14(%eax),%al
  1030ce:	84 c0                	test   %al,%al
  1030d0:	75 0e                	jne    1030e0 <schedule_to_task+0x4d>
			free(path);
  1030d2:	83 ec 0c             	sub    $0xc,%esp
  1030d5:	ff 75 08             	pushl  0x8(%ebp)
  1030d8:	e8 93 00 00 00       	call   103170 <init_rpc_call>
  1030dd:	83 c4 10             	add    $0x10,%esp

			cpu->eax = cpu->ecx;
  1030e0:	8b 45 08             	mov    0x8(%ebp),%eax
  1030e3:	8b 40 18             	mov    0x18(%eax),%eax
  1030e6:	8b 40 18             	mov    0x18(%eax),%eax
		}
		else
  1030e9:	c9                   	leave  
  1030ea:	c3                   	ret    

001030eb <schedule>:
		{
			cpu->eax = 0;
  1030eb:	55                   	push   %ebp
  1030ec:	89 e5                	mov    %esp,%ebp
  1030ee:	83 ec 18             	sub    $0x18,%esp
		}
  1030f1:	a1 2c 85 12 00       	mov    0x12852c,%eax
  1030f6:	85 c0                	test   %eax,%eax
  1030f8:	74 71                	je     10316b <schedule+0x80>
  1030fa:	a1 28 85 12 00       	mov    0x128528,%eax
  1030ff:	85 c0                	test   %eax,%eax
  103101:	74 68                	je     10316b <schedule+0x80>
	}
  103103:	a1 30 85 12 00       	mov    0x128530,%eax
  103108:	85 c0                	test   %eax,%eax
  10310a:	75 28                	jne    103134 <schedule+0x49>
		break;
  10310c:	a1 2c 85 12 00       	mov    0x12852c,%eax
  103111:	a3 30 85 12 00       	mov    %eax,0x128530

  103116:	a1 30 85 12 00       	mov    0x128530,%eax
  10311b:	8b 40 14             	mov    0x14(%eax),%eax
  10311e:	83 ec 0c             	sub    $0xc,%esp
  103121:	50                   	push   %eax
  103122:	e8 5d 22 00 00       	call   105384 <vmm_activate_pagedir>
  103127:	83 c4 10             	add    $0x10,%esp
	case 20: /* getpmhandle */
  10312a:	a1 30 85 12 00       	mov    0x128530,%eax
  10312f:	8b 40 04             	mov    0x4(%eax),%eax
  103132:	eb 3a                	jmp    10316e <schedule+0x83>
	{
	    struct res_handle* handle = 0;

  103134:	a1 30 85 12 00       	mov    0x128530,%eax
  103139:	8b 40 08             	mov    0x8(%eax),%eax
  10313c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    switch(cpu->ebx) {
  10313f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103143:	75 08                	jne    10314d <schedule+0x62>
	    case PMID_STDOUT:
  103145:	a1 2c 85 12 00       	mov    0x12852c,%eax
  10314a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	        handle = get_current_task()->stdout;
	        break;
  10314d:	83 ec 0c             	sub    $0xc,%esp
  103150:	ff 75 08             	pushl  0x8(%ebp)
  103153:	e8 ce fe ff ff       	call   103026 <save_cpu_state>
  103158:	83 c4 10             	add    $0x10,%esp
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  10315b:	83 ec 0c             	sub    $0xc,%esp
  10315e:	ff 75 f4             	pushl  -0xc(%ebp)
  103161:	e8 2d ff ff ff       	call   103093 <schedule_to_task>
  103166:	83 c4 10             	add    $0x10,%esp
  103169:	eb 03                	jmp    10316e <schedule+0x83>
            break;
        case PMID_STDERR:
  10316b:	8b 45 08             	mov    0x8(%ebp),%eax
            handle = get_current_task()->stderr;
  10316e:	c9                   	leave  
  10316f:	c3                   	ret    

00103170 <init_rpc_call>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct exec_info {
  103170:	55                   	push   %ebp
  103171:	89 e5                	mov    %esp,%ebp
  103173:	57                   	push   %edi
  103174:	56                   	push   %esi
  103175:	53                   	push   %ebx
  103176:	83 ec 5c             	sub    $0x5c,%esp
    char* execPath;
  103179:	8b 45 08             	mov    0x8(%ebp),%eax
  10317c:	8b 40 18             	mov    0x18(%eax),%eax
  10317f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    char* stdin;
    char* stdout;
  103182:	83 ec 08             	sub    $0x8,%esp
  103185:	6a 38                	push   $0x38
  103187:	6a 01                	push   $0x1
  103189:	e8 ba 06 00 00       	call   103848 <calloc>
  10318e:	83 c4 10             	add    $0x10,%esp
  103191:	89 c2                	mov    %eax,%edx
  103193:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103196:	89 50 18             	mov    %edx,0x18(%eax)
};

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
  103199:	8b 45 08             	mov    0x8(%ebp),%eax
  10319c:	8b 70 1c             	mov    0x1c(%eax),%esi
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

  10319f:	8b 45 08             	mov    0x8(%ebp),%eax
  1031a2:	8b 40 04             	mov    0x4(%eax),%eax
	switch (cpu->eax) {
	case 1: /* exit */
		return terminate_current(cpu);

	case 2: /* pexists */
	{
  1031a5:	8b 40 30             	mov    0x30(%eax),%eax
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

  1031a8:	83 e8 10             	sub    $0x10,%eax
  1031ab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	switch (cpu->eax) {
	case 1: /* exit */
		return terminate_current(cpu);

	case 2: /* pexists */
	{
  1031ae:	8d 5d a8             	lea    -0x58(%ebp),%ebx
  1031b1:	b8 00 00 00 00       	mov    $0x0,%eax
  1031b6:	ba 0e 00 00 00       	mov    $0xe,%edx
  1031bb:	89 df                	mov    %ebx,%edi
  1031bd:	89 d1                	mov    %edx,%ecx
  1031bf:	f3 ab                	rep stos %eax,%es:(%edi)
  1031c1:	89 75 cc             	mov    %esi,-0x34(%ebp)
  1031c4:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  1031cb:	c7 45 d4 00 02 00 00 	movl   $0x200,-0x2c(%ebp)
  1031d2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1031d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1031d8:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
  1031df:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031e2:	8b 40 18             	mov    0x18(%eax),%eax
  1031e5:	83 ec 04             	sub    $0x4,%esp
  1031e8:	6a 38                	push   $0x38
  1031ea:	8d 55 a8             	lea    -0x58(%ebp),%edx
  1031ed:	52                   	push   %edx
  1031ee:	50                   	push   %eax
  1031ef:	e8 a6 07 00 00       	call   10399a <memcpy>
  1031f4:	83 c4 10             	add    $0x10,%esp
	    break;

  1031f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1031fa:	8b 40 18             	mov    0x18(%eax),%eax
  1031fd:	8b 40 30             	mov    0x30(%eax),%eax
  103200:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    case 3: /* exec */
    {
  103203:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103206:	8d 50 04             	lea    0x4(%eax),%edx
  103209:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10320c:	8b 40 04             	mov    0x4(%eax),%eax
  10320f:	89 02                	mov    %eax,(%edx)
        char* path = strclone((char*) cpu->ebx);
  103211:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103214:	8d 50 08             	lea    0x8(%eax),%edx
  103217:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10321a:	8b 40 08             	mov    0x8(%eax),%eax
  10321d:	89 02                	mov    %eax,(%edx)

  10321f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103222:	8d 50 0c             	lea    0xc(%eax),%edx
  103225:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103228:	8b 40 10             	mov    0x10(%eax),%eax
  10322b:	89 02                	mov    %eax,(%edx)
        struct exec_info* einp = (void*) cpu->edx;

  10322d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103230:	c6 40 14 01          	movb   $0x1,0x14(%eax)
        struct exec_info ein = {
  103234:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103237:	83 c4 00             	add    $0x0,%esp
  10323a:	5b                   	pop    %ebx
  10323b:	5e                   	pop    %esi
  10323c:	5f                   	pop    %edi
  10323d:	5d                   	pop    %ebp
  10323e:	c3                   	ret    

0010323f <create_rpc_call>:
            .execPath = 0,
            .stdin = 0,
  10323f:	55                   	push   %ebp
  103240:	89 e5                	mov    %esp,%ebp
  103242:	83 ec 18             	sub    $0x18,%esp
            .stdout = 0,
  103245:	83 ec 08             	sub    $0x8,%esp
  103248:	6a 20                	push   $0x20
  10324a:	6a 01                	push   $0x1
  10324c:	e8 f7 05 00 00       	call   103848 <calloc>
  103251:	83 c4 10             	add    $0x10,%esp
  103254:	89 45 ec             	mov    %eax,-0x14(%ebp)
            .stderr = 0
  103257:	83 ec 0c             	sub    $0xc,%esp
  10325a:	ff 75 08             	pushl  0x8(%ebp)
  10325d:	e8 75 f9 ff ff       	call   102bd7 <get_task_by_pid>
  103262:	83 c4 10             	add    $0x10,%esp
  103265:	89 45 f0             	mov    %eax,-0x10(%ebp)
        };

  103268:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10326c:	75 34                	jne    1032a2 <create_rpc_call+0x63>
        if(einp != 0) {
  10326e:	83 ec 0c             	sub    $0xc,%esp
  103271:	6a 0a                	push   $0xa
  103273:	e8 df d2 ff ff       	call   100557 <setclr>
  103278:	83 c4 10             	add    $0x10,%esp
            ein.execPath = strclone(einp->execPath);
  10327b:	83 ec 0c             	sub    $0xc,%esp
  10327e:	68 e0 77 10 00       	push   $0x1077e0
  103283:	e8 e5 d2 ff ff       	call   10056d <kprintf>
  103288:	83 c4 10             	add    $0x10,%esp
            ein.stdin = strclone(einp->stdin);
  10328b:	83 ec 0c             	sub    $0xc,%esp
  10328e:	6a 07                	push   $0x7
  103290:	e8 c2 d2 ff ff       	call   100557 <setclr>
  103295:	83 c4 10             	add    $0x10,%esp
            ein.stdout = strclone(einp->stdout);
  103298:	b8 02 00 00 00       	mov    $0x2,%eax
  10329d:	e9 06 01 00 00       	jmp    1033a8 <create_rpc_call+0x169>
            ein.stderr = strclone(einp->stderr);
        }

  1032a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032a5:	8b 40 1c             	mov    0x1c(%eax),%eax
  1032a8:	85 c0                	test   %eax,%eax
  1032aa:	75 34                	jne    1032e0 <create_rpc_call+0xa1>
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  1032ac:	83 ec 0c             	sub    $0xc,%esp
  1032af:	6a 0a                	push   $0xa
  1032b1:	e8 a1 d2 ff ff       	call   100557 <setclr>
  1032b6:	83 c4 10             	add    $0x10,%esp

  1032b9:	83 ec 0c             	sub    $0xc,%esp
  1032bc:	68 0c 78 10 00       	push   $0x10780c
  1032c1:	e8 a7 d2 ff ff       	call   10056d <kprintf>
  1032c6:	83 c4 10             	add    $0x10,%esp
        if(einp != 0) {
  1032c9:	83 ec 0c             	sub    $0xc,%esp
  1032cc:	6a 07                	push   $0x7
  1032ce:	e8 84 d2 ff ff       	call   100557 <setclr>
  1032d3:	83 c4 10             	add    $0x10,%esp
            free(ein.execPath);
  1032d6:	b8 03 00 00 00       	mov    $0x3,%eax
  1032db:	e9 c8 00 00 00       	jmp    1033a8 <create_rpc_call+0x169>
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
  1032e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032e3:	8b 55 0c             	mov    0xc(%ebp),%edx
  1032e6:	89 50 04             	mov    %edx,0x4(%eax)
        }
  1032e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1032ec:	8b 55 10             	mov    0x10(%ebp),%edx
  1032ef:	89 50 08             	mov    %edx,0x8(%eax)

  1032f2:	e8 d6 f8 ff ff       	call   102bcd <get_current_task>
  1032f7:	85 c0                	test   %eax,%eax
  1032f9:	74 09                	je     103304 <create_rpc_call+0xc5>
  1032fb:	e8 cd f8 ff ff       	call   102bcd <get_current_task>
  103300:	8b 00                	mov    (%eax),%eax
  103302:	eb 05                	jmp    103309 <create_rpc_call+0xca>
  103304:	b8 00 00 00 00       	mov    $0x0,%eax
  103309:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10330c:	89 02                	mov    %eax,(%edx)
        free(path);
    }
  10330e:	83 ec 0c             	sub    $0xc,%esp
  103311:	ff 75 14             	pushl  0x14(%ebp)
  103314:	e8 b9 03 00 00       	call   1036d2 <malloc>
  103319:	83 c4 10             	add    $0x10,%esp
  10331c:	89 c2                	mov    %eax,%edx
  10331e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103321:	89 50 0c             	mov    %edx,0xc(%eax)
        break;
  103324:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103327:	8b 40 0c             	mov    0xc(%eax),%eax
  10332a:	83 ec 04             	sub    $0x4,%esp
  10332d:	ff 75 14             	pushl  0x14(%ebp)
  103330:	ff 75 18             	pushl  0x18(%ebp)
  103333:	50                   	push   %eax
  103334:	e8 61 06 00 00       	call   10399a <memcpy>
  103339:	83 c4 10             	add    $0x10,%esp

  10333c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10333f:	8b 55 14             	mov    0x14(%ebp),%edx
  103342:	89 50 10             	mov    %edx,0x10(%eax)
    case 4: /* getargs */
    {
  103345:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103348:	8b 40 18             	mov    0x18(%eax),%eax
  10334b:	85 c0                	test   %eax,%eax
  10334d:	75 10                	jne    10335f <create_rpc_call+0x120>
        cpu->eax = (uint32_t) get_current_task()->args;
  10334f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103352:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103355:	89 50 18             	mov    %edx,0x18(%eax)
    }
  103358:	b8 00 00 00 00       	mov    $0x0,%eax
  10335d:	eb 49                	jmp    1033a8 <create_rpc_call+0x169>
        break;

    case 5: /* yield */
    {
  10335f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103362:	8b 40 18             	mov    0x18(%eax),%eax
  103365:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cpu = schedule(cpu);
    }
  103368:	eb 33                	jmp    10339d <create_rpc_call+0x15e>
        break;
  10336a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10336d:	8b 40 1c             	mov    0x1c(%eax),%eax
  103370:	85 c0                	test   %eax,%eax
  103372:	75 20                	jne    103394 <create_rpc_call+0x155>

  103374:	83 ec 0c             	sub    $0xc,%esp
  103377:	68 3b 78 10 00       	push   $0x10783b
  10337c:	e8 ec d1 ff ff       	call   10056d <kprintf>
  103381:	83 c4 10             	add    $0x10,%esp
    case 6: /* getExecPath */
    {
  103384:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103387:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10338a:	89 50 1c             	mov    %edx,0x1c(%eax)
        char* dest = (char*)cpu->ebx;
  10338d:	b8 00 00 00 00       	mov    $0x0,%eax
  103392:	eb 14                	jmp    1033a8 <create_rpc_call+0x169>
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
  103394:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103397:	8b 40 1c             	mov    0x1c(%eax),%eax
  10339a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;

    case 5: /* yield */
    {
        cpu = schedule(cpu);
    }
  10339d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1033a1:	75 c7                	jne    10336a <create_rpc_call+0x12b>
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
        break;

    case 7: /* changeExecPath */
    {
  1033a3:	b8 01 00 00 00       	mov    $0x1,%eax
        vfs_reset_error();
  1033a8:	c9                   	leave  
  1033a9:	c3                   	ret    

001033aa <return_rpc_call>:
        char* path = strclone((char*) cpu->ebx);

  1033aa:	55                   	push   %ebp
  1033ab:	89 e5                	mov    %esp,%ebp
  1033ad:	83 ec 18             	sub    $0x18,%esp
        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  1033b0:	e8 18 f8 ff ff       	call   102bcd <get_current_task>
  1033b5:	89 45 ec             	mov    %eax,-0x14(%ebp)

        char* new = vfs_resolve_path(path);
  1033b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033bb:	8b 40 18             	mov    0x18(%eax),%eax
  1033be:	85 c0                	test   %eax,%eax
  1033c0:	75 68                	jne    10342a <return_rpc_call+0x80>

  1033c2:	83 ec 0c             	sub    $0xc,%esp
  1033c5:	6a 04                	push   $0x4
  1033c7:	e8 8b d1 ff ff       	call   100557 <setclr>
  1033cc:	83 c4 10             	add    $0x10,%esp
        cpu->eax = 0;
  1033cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033d2:	8b 50 24             	mov    0x24(%eax),%edx
  1033d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033d8:	8b 00                	mov    (%eax),%eax
  1033da:	83 ec 04             	sub    $0x4,%esp
  1033dd:	52                   	push   %edx
  1033de:	50                   	push   %eax
  1033df:	68 50 78 10 00       	push   $0x107850
  1033e4:	e8 84 d1 ff ff       	call   10056d <kprintf>
  1033e9:	83 c4 10             	add    $0x10,%esp
        if(new) {
  1033ec:	83 ec 0c             	sub    $0xc,%esp
  1033ef:	68 8e 78 10 00       	push   $0x10788e
  1033f4:	e8 74 d1 ff ff       	call   10056d <kprintf>
  1033f9:	83 c4 10             	add    $0x10,%esp
            get_current_task()->execPath = new;
  1033fc:	83 ec 0c             	sub    $0xc,%esp
  1033ff:	ff 75 08             	pushl  0x8(%ebp)
  103402:	e8 2a ce ff ff       	call   100231 <show_dump>
  103407:	83 c4 10             	add    $0x10,%esp
            cpu->eax = 1;
  10340a:	83 ec 0c             	sub    $0xc,%esp
  10340d:	6a 07                	push   $0x7
  10340f:	e8 43 d1 ff ff       	call   100557 <setclr>
  103414:	83 c4 10             	add    $0x10,%esp
        }

  103417:	83 ec 0c             	sub    $0xc,%esp
  10341a:	ff 75 08             	pushl  0x8(%ebp)
  10341d:	e8 d4 f9 ff ff       	call   102df6 <terminate_current>
  103422:	83 c4 10             	add    $0x10,%esp
  103425:	e9 b5 00 00 00       	jmp    1034df <return_rpc_call+0x135>
        free(path);
    }
        break;
  10342a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10342d:	8b 40 18             	mov    0x18(%eax),%eax
  103430:	89 45 f0             	mov    %eax,-0x10(%ebp)

  103433:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103436:	8b 40 18             	mov    0x18(%eax),%eax
  103439:	8b 50 1c             	mov    0x1c(%eax),%edx
  10343c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10343f:	89 50 18             	mov    %edx,0x18(%eax)
	case 10: /* fopen */
	{
  103442:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103445:	8b 00                	mov    (%eax),%eax
  103447:	85 c0                	test   %eax,%eax
  103449:	0f 84 82 00 00 00    	je     1034d1 <return_rpc_call+0x127>
        vfs_reset_error();
  10344f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103452:	8b 00                	mov    (%eax),%eax
  103454:	83 ec 0c             	sub    $0xc,%esp
  103457:	50                   	push   %eax
  103458:	e8 7a f7 ff ff       	call   102bd7 <get_task_by_pid>
  10345d:	83 c4 10             	add    $0x10,%esp
  103460:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;
  103463:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103466:	8b 40 04             	mov    0x4(%eax),%eax
  103469:	85 c0                	test   %eax,%eax
  10346b:	75 12                	jne    10347f <return_rpc_call+0xd5>

  10346d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103470:	8b 40 08             	mov    0x8(%eax),%eax
  103473:	83 ec 0c             	sub    $0xc,%esp
  103476:	50                   	push   %eax
  103477:	e8 f0 da ff ff       	call   100f6c <enable_irq_rpc>
  10347c:	83 c4 10             	add    $0x10,%esp
	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
  10347f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103482:	8b 40 18             	mov    0x18(%eax),%eax
  103485:	83 ec 0c             	sub    $0xc,%esp
  103488:	50                   	push   %eax
  103489:	e8 8a 04 00 00       	call   103918 <free>
  10348e:	83 c4 10             	add    $0x10,%esp
	        cpu->eax = (uint32_t) handle;
  103491:	83 ec 0c             	sub    $0xc,%esp
  103494:	ff 75 f0             	pushl  -0x10(%ebp)
  103497:	e8 7c 04 00 00       	call   103918 <free>
  10349c:	83 c4 10             	add    $0x10,%esp
	    }
	    else
  10349f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1034a3:	75 10                	jne    1034b5 <return_rpc_call+0x10b>
	    {
  1034a5:	83 ec 0c             	sub    $0xc,%esp
  1034a8:	ff 75 ec             	pushl  -0x14(%ebp)
  1034ab:	e8 e3 fb ff ff       	call   103093 <schedule_to_task>
  1034b0:	83 c4 10             	add    $0x10,%esp
  1034b3:	eb 2a                	jmp    1034df <return_rpc_call+0x135>
	        cpu->eax = 0;
	    }

  1034b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034b8:	8b 40 04             	mov    0x4(%eax),%eax
  1034bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    free(name);
	}
  1034c1:	83 ec 0c             	sub    $0xc,%esp
  1034c4:	ff 75 f4             	pushl  -0xc(%ebp)
  1034c7:	e8 c7 fb ff ff       	call   103093 <schedule_to_task>
  1034cc:	83 c4 10             	add    $0x10,%esp
  1034cf:	eb 0e                	jmp    1034df <return_rpc_call+0x135>
	    break;

	case 11: /* fclose */
	{
  1034d1:	83 ec 0c             	sub    $0xc,%esp
  1034d4:	ff 75 ec             	pushl  -0x14(%ebp)
  1034d7:	e8 b7 fb ff ff       	call   103093 <schedule_to_task>
  1034dc:	83 c4 10             	add    $0x10,%esp
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
  1034df:	c9                   	leave  
  1034e0:	c3                   	ret    
  1034e1:	00 00                	add    %al,(%eax)
	...

001034e4 <remove_from_list>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct exec_info {
  1034e4:	55                   	push   %ebp
  1034e5:	89 e5                	mov    %esp,%ebp
  1034e7:	83 ec 10             	sub    $0x10,%esp
    char* execPath;
  1034ea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    char* stdin;
  1034f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1034f4:	8b 00                	mov    (%eax),%eax
  1034f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* stdout;
    char* stderr;
  1034f9:	eb 38                	jmp    103533 <remove_from_list+0x4f>
};
  1034fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034fe:	3b 45 0c             	cmp    0xc(%ebp),%eax
  103501:	75 21                	jne    103524 <remove_from_list+0x40>

  103503:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  103507:	75 0d                	jne    103516 <remove_from_list+0x32>
struct cpu_state* syscall(struct cpu_state* cpu) {
  103509:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10350c:	8b 50 08             	mov    0x8(%eax),%edx
  10350f:	8b 45 08             	mov    0x8(%ebp),%eax
  103512:	89 10                	mov    %edx,(%eax)
    cpu = save_cpu_state(cpu);
  103514:	eb 23                	jmp    103539 <remove_from_list+0x55>

	switch (cpu->eax) {
  103516:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103519:	8b 50 08             	mov    0x8(%eax),%edx
  10351c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10351f:	89 50 08             	mov    %edx,0x8(%eax)
	case 1: /* exit */
  103522:	eb 15                	jmp    103539 <remove_from_list+0x55>
		return terminate_current(cpu);

	case 2: /* pexists */
  103524:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103527:	89 45 f8             	mov    %eax,-0x8(%ebp)
	{
  10352a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10352d:	8b 40 08             	mov    0x8(%eax),%eax
  103530:	89 45 fc             	mov    %eax,-0x4(%ebp)

struct exec_info {
    char* execPath;
    char* stdin;
    char* stdout;
    char* stderr;
  103533:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  103537:	75 c2                	jne    1034fb <remove_from_list+0x17>
		return terminate_current(cpu);

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
  103539:	c9                   	leave  
  10353a:	c3                   	ret    

0010353b <append_to_list>:
	    break;

    case 3: /* exec */
  10353b:	55                   	push   %ebp
  10353c:	89 e5                	mov    %esp,%ebp
    {
  10353e:	8b 45 08             	mov    0x8(%ebp),%eax
  103541:	8b 10                	mov    (%eax),%edx
  103543:	8b 45 0c             	mov    0xc(%ebp),%eax
  103546:	89 50 08             	mov    %edx,0x8(%eax)
        char* path = strclone((char*) cpu->ebx);
  103549:	8b 45 08             	mov    0x8(%ebp),%eax
  10354c:	8b 55 0c             	mov    0xc(%ebp),%edx
  10354f:	89 10                	mov    %edx,(%eax)

  103551:	5d                   	pop    %ebp
  103552:	c3                   	ret    

00103553 <pop_from_list>:
        struct exec_info* einp = (void*) cpu->edx;

  103553:	55                   	push   %ebp
  103554:	89 e5                	mov    %esp,%ebp
  103556:	83 ec 10             	sub    $0x10,%esp
        struct exec_info ein = {
  103559:	8b 45 08             	mov    0x8(%ebp),%eax
  10355c:	8b 00                	mov    (%eax),%eax
  10355e:	85 c0                	test   %eax,%eax
  103560:	75 07                	jne    103569 <pop_from_list+0x16>
            .execPath = 0,
  103562:	b8 00 00 00 00       	mov    $0x0,%eax
  103567:	eb 19                	jmp    103582 <pop_from_list+0x2f>
            .stdin = 0,
  103569:	8b 45 08             	mov    0x8(%ebp),%eax
  10356c:	8b 00                	mov    (%eax),%eax
  10356e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            .stdout = 0,
  103571:	ff 75 fc             	pushl  -0x4(%ebp)
  103574:	ff 75 08             	pushl  0x8(%ebp)
  103577:	e8 68 ff ff ff       	call   1034e4 <remove_from_list>
  10357c:	83 c4 08             	add    $0x8,%esp
            .stderr = 0
  10357f:	8b 45 fc             	mov    -0x4(%ebp),%eax
        };
  103582:	c9                   	leave  
  103583:	c3                   	ret    

00103584 <allocate_unused_nodes>:

        if(einp != 0) {
  103584:	55                   	push   %ebp
  103585:	89 e5                	mov    %esp,%ebp
  103587:	83 ec 18             	sub    $0x18,%esp
            ein.execPath = strclone(einp->execPath);
  10358a:	83 ec 0c             	sub    $0xc,%esp
  10358d:	6a 01                	push   $0x1
  10358f:	e8 0d 1d 00 00       	call   1052a1 <vmm_alloc_cont>
  103594:	83 c4 10             	add    $0x10,%esp
  103597:	89 45 f0             	mov    %eax,-0x10(%ebp)
            ein.stdin = strclone(einp->stdin);
  10359a:	83 ec 04             	sub    $0x4,%esp
  10359d:	68 00 10 00 00       	push   $0x1000
  1035a2:	6a 00                	push   $0x0
  1035a4:	ff 75 f0             	pushl  -0x10(%ebp)
  1035a7:	e8 c0 03 00 00       	call   10396c <memset>
  1035ac:	83 c4 10             	add    $0x10,%esp
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
  1035af:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  1035b6:	eb 23                	jmp    1035db <allocate_unused_nodes+0x57>
        }
  1035b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1035bb:	89 d0                	mov    %edx,%eax
  1035bd:	01 c0                	add    %eax,%eax
  1035bf:	01 d0                	add    %edx,%eax
  1035c1:	c1 e0 02             	shl    $0x2,%eax
  1035c4:	03 45 f0             	add    -0x10(%ebp),%eax
  1035c7:	83 ec 08             	sub    $0x8,%esp
  1035ca:	50                   	push   %eax
  1035cb:	68 34 85 12 00       	push   $0x128534
  1035d0:	e8 66 ff ff ff       	call   10353b <append_to_list>
  1035d5:	83 c4 10             	add    $0x10,%esp

        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
  1035d8:	ff 45 f4             	incl   -0xc(%ebp)
  1035db:	81 7d f4 54 01 00 00 	cmpl   $0x154,-0xc(%ebp)
  1035e2:	76 d4                	jbe    1035b8 <allocate_unused_nodes+0x34>
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  1035e4:	c9                   	leave  
  1035e5:	c3                   	ret    

001035e6 <pop_unused_node>:

        if(einp != 0) {
  1035e6:	55                   	push   %ebp
  1035e7:	89 e5                	mov    %esp,%ebp
  1035e9:	83 ec 18             	sub    $0x18,%esp
            free(ein.execPath);
  1035ec:	68 34 85 12 00       	push   $0x128534
  1035f1:	e8 5d ff ff ff       	call   103553 <pop_from_list>
  1035f6:	83 c4 04             	add    $0x4,%esp
  1035f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            free(ein.stdin);
            free(ein.stdout);
  1035fc:	eb 18                	jmp    103616 <pop_unused_node+0x30>
            free(ein.stderr);
  1035fe:	e8 81 ff ff ff       	call   103584 <allocate_unused_nodes>
        }
  103603:	83 ec 0c             	sub    $0xc,%esp
  103606:	68 34 85 12 00       	push   $0x128534
  10360b:	e8 43 ff ff ff       	call   103553 <pop_from_list>
  103610:	83 c4 10             	add    $0x10,%esp
  103613:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
            free(ein.stdin);
            free(ein.stdout);
  103616:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10361a:	74 e2                	je     1035fe <pop_unused_node+0x18>
            free(ein.stderr);
        }

        free(path);
    }
  10361c:	8b 45 f4             	mov    -0xc(%ebp),%eax
        break;
  10361f:	c9                   	leave  
  103620:	c3                   	ret    

00103621 <merge_into_frees>:

    case 4: /* getargs */
  103621:	55                   	push   %ebp
  103622:	89 e5                	mov    %esp,%ebp
  103624:	83 ec 10             	sub    $0x10,%esp
    {
  103627:	ff 75 08             	pushl  0x8(%ebp)
  10362a:	68 38 85 12 00       	push   $0x128538
  10362f:	e8 b0 fe ff ff       	call   1034e4 <remove_from_list>
  103634:	83 c4 08             	add    $0x8,%esp
        cpu->eax = (uint32_t) get_current_task()->args;
    }
        break;

    case 5: /* yield */
  103637:	a1 3c 85 12 00       	mov    0x12853c,%eax
  10363c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    {
        cpu = schedule(cpu);
  10363f:	eb 79                	jmp    1036ba <merge_into_frees+0x99>
    }
  103641:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103644:	8b 50 04             	mov    0x4(%eax),%edx
  103647:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10364a:	8b 00                	mov    (%eax),%eax
  10364c:	01 c2                	add    %eax,%edx
  10364e:	8b 45 08             	mov    0x8(%ebp),%eax
  103651:	8b 40 04             	mov    0x4(%eax),%eax
  103654:	39 c2                	cmp    %eax,%edx
  103656:	75 1e                	jne    103676 <merge_into_frees+0x55>
        break;
  103658:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10365b:	8b 50 04             	mov    0x4(%eax),%edx
  10365e:	8b 45 08             	mov    0x8(%ebp),%eax
  103661:	89 50 04             	mov    %edx,0x4(%eax)

  103664:	ff 75 fc             	pushl  -0x4(%ebp)
  103667:	68 3c 85 12 00       	push   $0x12853c
  10366c:	e8 73 fe ff ff       	call   1034e4 <remove_from_list>
  103671:	83 c4 08             	add    $0x8,%esp
    case 6: /* getExecPath */
  103674:	eb c1                	jmp    103637 <merge_into_frees+0x16>
    {
        char* dest = (char*)cpu->ebx;
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  103676:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103679:	8b 50 04             	mov    0x4(%eax),%edx
  10367c:	8b 45 08             	mov    0x8(%ebp),%eax
  10367f:	8b 48 04             	mov    0x4(%eax),%ecx
  103682:	8b 45 08             	mov    0x8(%ebp),%eax
  103685:	8b 00                	mov    (%eax),%eax
  103687:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  10368a:	39 c2                	cmp    %eax,%edx
  10368c:	75 23                	jne    1036b1 <merge_into_frees+0x90>
    }
  10368e:	8b 45 08             	mov    0x8(%ebp),%eax
  103691:	8b 10                	mov    (%eax),%edx
  103693:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103696:	8b 00                	mov    (%eax),%eax
  103698:	01 c2                	add    %eax,%edx
  10369a:	8b 45 08             	mov    0x8(%ebp),%eax
  10369d:	89 10                	mov    %edx,(%eax)
        break;
  10369f:	ff 75 fc             	pushl  -0x4(%ebp)
  1036a2:	68 3c 85 12 00       	push   $0x12853c
  1036a7:	e8 38 fe ff ff       	call   1034e4 <remove_from_list>
  1036ac:	83 c4 08             	add    $0x8,%esp

  1036af:	eb 86                	jmp    103637 <merge_into_frees+0x16>
    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  1036b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036b4:	8b 40 08             	mov    0x8(%eax),%eax
  1036b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
        break;

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  1036ba:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1036be:	75 81                	jne    103641 <merge_into_frees+0x20>
    case 7: /* changeExecPath */
    {
        vfs_reset_error();
        char* path = strclone((char*) cpu->ebx);

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  1036c0:	ff 75 08             	pushl  0x8(%ebp)
  1036c3:	68 3c 85 12 00       	push   $0x12853c
  1036c8:	e8 6e fe ff ff       	call   10353b <append_to_list>
  1036cd:	83 c4 08             	add    $0x8,%esp

  1036d0:	c9                   	leave  
  1036d1:	c3                   	ret    

001036d2 <malloc>:
        char* new = vfs_resolve_path(path);

        cpu->eax = 0;
        if(new) {
            get_current_task()->execPath = new;
  1036d2:	55                   	push   %ebp
  1036d3:	89 e5                	mov    %esp,%ebp
  1036d5:	83 ec 28             	sub    $0x28,%esp
  1036d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1036dc:	75 0a                	jne    1036e8 <malloc+0x16>
  1036de:	b8 00 00 00 00       	mov    $0x0,%eax
  1036e3:	e9 5e 01 00 00       	jmp    103846 <malloc+0x174>
            cpu->eax = 1;
        }
  1036e8:	a1 40 85 12 00       	mov    0x128540,%eax
  1036ed:	03 45 08             	add    0x8(%ebp),%eax
  1036f0:	a3 40 85 12 00       	mov    %eax,0x128540

        free(path);
  1036f5:	a1 3c 85 12 00       	mov    0x12853c,%eax
  1036fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
    }
        break;
  1036fd:	eb 13                	jmp    103712 <malloc+0x40>

  1036ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103702:	8b 00                	mov    (%eax),%eax
  103704:	3b 45 08             	cmp    0x8(%ebp),%eax
  103707:	73 11                	jae    10371a <malloc+0x48>
	case 10: /* fopen */
	{
        vfs_reset_error();
  103709:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10370c:	8b 40 08             	mov    0x8(%eax),%eax
  10370f:	89 45 dc             	mov    %eax,-0x24(%ebp)
            cpu->eax = 1;
        }

        free(path);
    }
        break;
  103712:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  103716:	75 e7                	jne    1036ff <malloc+0x2d>
  103718:	eb 01                	jmp    10371b <malloc+0x49>

	case 10: /* fopen */
  10371a:	90                   	nop    
	{
        vfs_reset_error();
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;

  10371b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  10371f:	0f 85 a6 00 00 00    	jne    1037cb <malloc+0xf9>
	    struct res_handle* handle = vfs_open(name, fmode);
  103725:	8b 45 08             	mov    0x8(%ebp),%eax
  103728:	c1 e8 0c             	shr    $0xc,%eax
  10372b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    if(handle) {
	        register_handle(handle);
  10372e:	8b 45 08             	mov    0x8(%ebp),%eax
  103731:	25 ff 0f 00 00       	and    $0xfff,%eax
  103736:	85 c0                	test   %eax,%eax
  103738:	74 03                	je     10373d <malloc+0x6b>
	        cpu->eax = (uint32_t) handle;
  10373a:	ff 45 e0             	incl   -0x20(%ebp)
	    }
	    else
  10373d:	83 ec 0c             	sub    $0xc,%esp
  103740:	ff 75 e0             	pushl  -0x20(%ebp)
  103743:	e8 59 1b 00 00       	call   1052a1 <vmm_alloc_cont>
  103748:	83 c4 10             	add    $0x10,%esp
  10374b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    {
	        cpu->eax = 0;
  10374e:	e8 93 fe ff ff       	call   1035e6 <pop_unused_node>
  103753:	89 45 e8             	mov    %eax,-0x18(%ebp)
	    }

  103756:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  103759:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10375c:	89 50 04             	mov    %edx,0x4(%eax)
	    free(name);
  10375f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103762:	8b 55 08             	mov    0x8(%ebp),%edx
  103765:	89 10                	mov    %edx,(%eax)
	}
	    break;
  103767:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10376a:	c1 e0 0c             	shl    $0xc,%eax
  10376d:	3b 45 08             	cmp    0x8(%ebp),%eax
  103770:	76 3e                	jbe    1037b0 <malloc+0xde>

  103772:	e8 6f fe ff ff       	call   1035e6 <pop_unused_node>
  103777:	89 45 ec             	mov    %eax,-0x14(%ebp)
	case 11: /* fclose */
	{
  10377a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10377d:	8b 50 04             	mov    0x4(%eax),%edx
  103780:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103783:	8b 00                	mov    (%eax),%eax
  103785:	01 c2                	add    %eax,%edx
  103787:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10378a:	89 50 04             	mov    %edx,0x4(%eax)
        vfs_reset_error();
  10378d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103790:	c1 e0 0c             	shl    $0xc,%eax
  103793:	89 c2                	mov    %eax,%edx
  103795:	2b 55 08             	sub    0x8(%ebp),%edx
  103798:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10379b:	89 10                	mov    %edx,(%eax)
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(!unregister_handle(handle)) {
  10379d:	83 ec 08             	sub    $0x8,%esp
  1037a0:	ff 75 ec             	pushl  -0x14(%ebp)
  1037a3:	68 3c 85 12 00       	push   $0x12853c
  1037a8:	e8 8e fd ff ff       	call   10353b <append_to_list>
  1037ad:	83 c4 10             	add    $0x10,%esp
	        vfs_close(handle);

	        cpu->eax = 0;
  1037b0:	83 ec 08             	sub    $0x8,%esp
  1037b3:	ff 75 e8             	pushl  -0x18(%ebp)
  1037b6:	68 38 85 12 00       	push   $0x128538
  1037bb:	e8 7b fd ff ff       	call   10353b <append_to_list>
  1037c0:	83 c4 10             	add    $0x10,%esp
	    }
	    else
  1037c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1037c6:	8b 40 04             	mov    0x4(%eax),%eax
  1037c9:	eb 7b                	jmp    103846 <malloc+0x174>
	    {
	        cpu->eax = (uint32_t) -1;
  1037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037ce:	8b 00                	mov    (%eax),%eax
  1037d0:	2b 45 08             	sub    0x8(%ebp),%eax
  1037d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    }
	}
  1037d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037d9:	8b 55 08             	mov    0x8(%ebp),%edx
  1037dc:	89 10                	mov    %edx,(%eax)
	    break;

  1037de:	83 ec 08             	sub    $0x8,%esp
  1037e1:	ff 75 dc             	pushl  -0x24(%ebp)
  1037e4:	68 3c 85 12 00       	push   $0x12853c
  1037e9:	e8 f6 fc ff ff       	call   1034e4 <remove_from_list>
  1037ee:	83 c4 10             	add    $0x10,%esp
	case 12: /* fwrite */
  1037f1:	83 ec 08             	sub    $0x8,%esp
  1037f4:	ff 75 dc             	pushl  -0x24(%ebp)
  1037f7:	68 38 85 12 00       	push   $0x128538
  1037fc:	e8 3a fd ff ff       	call   10353b <append_to_list>
  103801:	83 c4 10             	add    $0x10,%esp
	{
        vfs_reset_error();
  103804:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103808:	74 36                	je     103840 <malloc+0x16e>
	    struct res_handle* handle = (void*) cpu->ebx;
  10380a:	e8 d7 fd ff ff       	call   1035e6 <pop_unused_node>
  10380f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    if(handle != 0) {
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  103812:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103815:	8b 50 04             	mov    0x4(%eax),%edx
  103818:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10381b:	8b 00                	mov    (%eax),%eax
  10381d:	01 c2                	add    %eax,%edx
  10381f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103822:	89 50 04             	mov    %edx,0x4(%eax)
	    }
  103825:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103828:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10382b:	89 10                	mov    %edx,(%eax)
	    else
	    {
  10382d:	83 ec 08             	sub    $0x8,%esp
  103830:	ff 75 f4             	pushl  -0xc(%ebp)
  103833:	68 3c 85 12 00       	push   $0x12853c
  103838:	e8 fe fc ff ff       	call   10353b <append_to_list>
  10383d:	83 c4 10             	add    $0x10,%esp
            cpu->eax = RW_ERR_VFS;
	    }
	}
  103840:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103843:	8b 40 04             	mov    0x4(%eax),%eax
	    break;

  103846:	c9                   	leave  
  103847:	c3                   	ret    

00103848 <calloc>:
	case 13: /* fread */
	{
        vfs_reset_error();
  103848:	55                   	push   %ebp
  103849:	89 e5                	mov    %esp,%ebp
  10384b:	83 ec 18             	sub    $0x18,%esp
  10384e:	8b 45 08             	mov    0x8(%ebp),%eax
  103851:	0f af 45 0c          	imul   0xc(%ebp),%eax
  103855:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = (void*) cpu->ebx;
  103858:	83 ec 0c             	sub    $0xc,%esp
  10385b:	ff 75 f0             	pushl  -0x10(%ebp)
  10385e:	e8 6f fe ff ff       	call   1036d2 <malloc>
  103863:	83 c4 10             	add    $0x10,%esp
  103866:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  103869:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10386d:	74 13                	je     103882 <calloc+0x3a>
        }
  10386f:	83 ec 04             	sub    $0x4,%esp
  103872:	ff 75 f0             	pushl  -0x10(%ebp)
  103875:	6a 00                	push   $0x0
  103877:	ff 75 f4             	pushl  -0xc(%ebp)
  10387a:	e8 ed 00 00 00       	call   10396c <memset>
  10387f:	83 c4 10             	add    $0x10,%esp
        else
        {
            cpu->eax = RW_ERR_VFS;
  103882:	8b 45 f4             	mov    -0xc(%ebp),%eax
        }
  103885:	c9                   	leave  
  103886:	c3                   	ret    

00103887 <realloc>:
	}
	    break;

  103887:	55                   	push   %ebp
  103888:	89 e5                	mov    %esp,%ebp
  10388a:	83 ec 18             	sub    $0x18,%esp
  10388d:	a1 38 85 12 00       	mov    0x128538,%eax
  103892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	case 14: /* fmkfifo */
	{
  103895:	eb 74                	jmp    10390b <realloc+0x84>
        vfs_reset_error();
  103897:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10389a:	8b 50 04             	mov    0x4(%eax),%edx
  10389d:	8b 45 08             	mov    0x8(%ebp),%eax
  1038a0:	39 c2                	cmp    %eax,%edx
  1038a2:	75 5e                	jne    103902 <realloc+0x7b>
        char* name = strclone((char*) cpu->ebx);
  1038a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1038a8:	75 15                	jne    1038bf <realloc+0x38>
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  1038aa:	83 ec 0c             	sub    $0xc,%esp
  1038ad:	ff 75 08             	pushl  0x8(%ebp)
  1038b0:	e8 63 00 00 00       	call   103918 <free>
  1038b5:	83 c4 10             	add    $0x10,%esp

  1038b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1038bd:	eb 57                	jmp    103916 <realloc+0x8f>
        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
        if(handle) {
  1038bf:	83 ec 0c             	sub    $0xc,%esp
  1038c2:	ff 75 0c             	pushl  0xc(%ebp)
  1038c5:	e8 08 fe ff ff       	call   1036d2 <malloc>
  1038ca:	83 c4 10             	add    $0x10,%esp
  1038cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            register_handle(handle);
  1038d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038d3:	8b 10                	mov    (%eax),%edx
  1038d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038d8:	8b 40 04             	mov    0x4(%eax),%eax
  1038db:	83 ec 04             	sub    $0x4,%esp
  1038de:	52                   	push   %edx
  1038df:	50                   	push   %eax
  1038e0:	ff 75 f4             	pushl  -0xc(%ebp)
  1038e3:	e8 b2 00 00 00       	call   10399a <memcpy>
  1038e8:	83 c4 10             	add    $0x10,%esp
            cpu->eax = (uint32_t) handle;
  1038eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038ee:	8b 40 04             	mov    0x4(%eax),%eax
  1038f1:	83 ec 0c             	sub    $0xc,%esp
  1038f4:	50                   	push   %eax
  1038f5:	e8 1e 00 00 00       	call   103918 <free>
  1038fa:	83 c4 10             	add    $0x10,%esp
        }
        else
  1038fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103900:	eb 14                	jmp    103916 <realloc+0x8f>
        {
            cpu->eax = 0;
        }
  103902:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103905:	8b 40 08             	mov    0x8(%eax),%eax
  103908:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
	}
	    break;

	case 14: /* fmkfifo */
	{
  10390b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10390f:	75 86                	jne    103897 <realloc+0x10>
        else
        {
            cpu->eax = 0;
        }

        free(name);
  103911:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  103916:	c9                   	leave  
  103917:	c3                   	ret    

00103918 <free>:
	    break;

	case 15: /* getLastVFSErr */
  103918:	55                   	push   %ebp
  103919:	89 e5                	mov    %esp,%ebp
  10391b:	83 ec 10             	sub    $0x10,%esp
  10391e:	a1 38 85 12 00       	mov    0x128538,%eax
  103923:	89 45 fc             	mov    %eax,-0x4(%ebp)
	{
	    cpu->eax = get_current_task()->vfserr;
  103926:	eb 39                	jmp    103961 <free+0x49>
        vfs_reset_error();
  103928:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10392b:	8b 50 04             	mov    0x4(%eax),%edx
  10392e:	8b 45 08             	mov    0x8(%ebp),%eax
  103931:	39 c2                	cmp    %eax,%edx
  103933:	75 23                	jne    103958 <free+0x40>
	}
  103935:	8b 15 40 85 12 00    	mov    0x128540,%edx
  10393b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10393e:	8b 00                	mov    (%eax),%eax
  103940:	89 d1                	mov    %edx,%ecx
  103942:	29 c1                	sub    %eax,%ecx
  103944:	89 c8                	mov    %ecx,%eax
  103946:	a3 40 85 12 00       	mov    %eax,0x128540
	    break;

  10394b:	ff 75 fc             	pushl  -0x4(%ebp)
  10394e:	e8 ce fc ff ff       	call   103621 <merge_into_frees>
  103953:	83 c4 04             	add    $0x4,%esp
	case 16: /* favailable */
  103956:	eb 0f                	jmp    103967 <free+0x4f>
	{
	    cpu->eax = vfs_available((void*)cpu->ebx);
  103958:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10395b:	8b 40 08             	mov    0x8(%eax),%eax
  10395e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	}
	    break;

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
  103961:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  103965:	75 c1                	jne    103928 <free+0x10>

	case 16: /* favailable */
	{
	    cpu->eax = vfs_available((void*)cpu->ebx);
	}
	    break;
  103967:	c9                   	leave  
  103968:	c3                   	ret    
  103969:	00 00                	add    %al,(%eax)
	...

0010396c <memset>:
#include "kernel.h"
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
  10396c:	55                   	push   %ebp
  10396d:	89 e5                	mov    %esp,%ebp
  10396f:	83 ec 10             	sub    $0x10,%esp
  103972:	8b 45 08             	mov    0x8(%ebp),%eax
  103975:	89 45 fc             	mov    %eax,-0x4(%ebp)
#include "ramfs/vgacntrl.h"

  103978:	eb 0d                	jmp    103987 <memset+0x1b>
struct exec_info {
  10397a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10397d:	88 c2                	mov    %al,%dl
  10397f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103982:	88 10                	mov    %dl,(%eax)
  103984:	ff 45 fc             	incl   -0x4(%ebp)
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

  103987:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10398b:	0f 95 c0             	setne  %al
  10398e:	ff 4d 10             	decl   0x10(%ebp)
  103991:	84 c0                	test   %al,%al
  103993:	75 e5                	jne    10397a <memset+0xe>
struct exec_info {
    char* execPath;
    char* stdin;
    char* stdout;
  103995:	8b 45 08             	mov    0x8(%ebp),%eax
    char* stderr;
  103998:	c9                   	leave  
  103999:	c3                   	ret    

0010399a <memcpy>:
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  10399a:	55                   	push   %ebp
  10399b:	89 e5                	mov    %esp,%ebp
  10399d:	83 ec 10             	sub    $0x10,%esp
  1039a0:	8b 45 08             	mov    0x8(%ebp),%eax
  1039a3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cpu = save_cpu_state(cpu);
  1039a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1039a9:	89 45 fc             	mov    %eax,-0x4(%ebp)

	switch (cpu->eax) {
  1039ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1039b0:	75 19                	jne    1039cb <memcpy+0x31>
  1039b2:	b8 00 00 00 00       	mov    $0x0,%eax
  1039b7:	eb 24                	jmp    1039dd <memcpy+0x43>
	case 1: /* exit */
		return terminate_current(cpu);

  1039b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039bc:	8a 10                	mov    (%eax),%dl
  1039be:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039c1:	88 10                	mov    %dl,(%eax)
  1039c3:	ff 45 f8             	incl   -0x8(%ebp)
  1039c6:	ff 45 fc             	incl   -0x4(%ebp)
  1039c9:	eb 01                	jmp    1039cc <memcpy+0x32>
struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);

	switch (cpu->eax) {
	case 1: /* exit */
		return terminate_current(cpu);
  1039cb:	90                   	nop    
  1039cc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1039d0:	0f 95 c0             	setne  %al
  1039d3:	ff 4d 10             	decl   0x10(%ebp)
  1039d6:	84 c0                	test   %al,%al
  1039d8:	75 df                	jne    1039b9 <memcpy+0x1f>

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  1039da:	8b 45 08             	mov    0x8(%ebp),%eax
	}
  1039dd:	c9                   	leave  
  1039de:	c3                   	ret    

001039df <memcmp>:
	    break;

    case 3: /* exec */
  1039df:	55                   	push   %ebp
  1039e0:	89 e5                	mov    %esp,%ebp
  1039e2:	83 ec 10             	sub    $0x10,%esp
  1039e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1039e9:	75 0a                	jne    1039f5 <memcmp+0x16>
    {
  1039eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1039f0:	e9 83 00 00 00       	jmp    103a78 <memcmp+0x99>
        char* path = strclone((char*) cpu->ebx);
  1039f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1039f9:	75 07                	jne    103a02 <memcmp+0x23>

  1039fb:	b8 01 00 00 00       	mov    $0x1,%eax
  103a00:	eb 76                	jmp    103a78 <memcmp+0x99>
        struct exec_info* einp = (void*) cpu->edx;
  103a02:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  103a06:	75 07                	jne    103a0f <memcmp+0x30>

  103a08:	b8 00 00 00 00       	mov    $0x0,%eax
  103a0d:	eb 69                	jmp    103a78 <memcmp+0x99>
        struct exec_info ein = {
            .execPath = 0,
  103a0f:	8b 45 08             	mov    0x8(%ebp),%eax
  103a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
            .stdin = 0,
  103a15:	8b 45 0c             	mov    0xc(%ebp),%eax
  103a18:	89 45 f8             	mov    %eax,-0x8(%ebp)
            .stdout = 0,
            .stderr = 0
  103a1b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103a22:	eb 47                	jmp    103a6b <memcmp+0x8c>
        };
  103a24:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a27:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103a2a:	8d 04 02             	lea    (%edx,%eax,1),%eax
  103a2d:	8a 10                	mov    (%eax),%dl
  103a2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a32:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103a35:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  103a38:	8a 00                	mov    (%eax),%al
  103a3a:	38 c2                	cmp    %al,%dl
  103a3c:	74 2a                	je     103a68 <memcmp+0x89>

  103a3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a41:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103a44:	8d 04 02             	lea    (%edx,%eax,1),%eax
  103a47:	8a 00                	mov    (%eax),%al
  103a49:	ba 00 00 00 00       	mov    $0x0,%edx
  103a4e:	88 c2                	mov    %al,%dl
  103a50:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a53:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103a56:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  103a59:	8a 00                	mov    (%eax),%al
  103a5b:	25 ff 00 00 00       	and    $0xff,%eax
  103a60:	89 d1                	mov    %edx,%ecx
  103a62:	29 c1                	sub    %eax,%ecx
  103a64:	89 c8                	mov    %ecx,%eax
  103a66:	eb 10                	jmp    103a78 <memcmp+0x99>

        struct exec_info ein = {
            .execPath = 0,
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
  103a68:	ff 45 fc             	incl   -0x4(%ebp)
  103a6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a6e:	3b 45 10             	cmp    0x10(%ebp),%eax
  103a71:	72 b1                	jb     103a24 <memcmp+0x45>
        };

        if(einp != 0) {
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
  103a73:	b8 00 00 00 00       	mov    $0x0,%eax
            ein.stdout = strclone(einp->stdout);
  103a78:	c9                   	leave  
  103a79:	c3                   	ret    

00103a7a <strcmp>:
            ein.stderr = strclone(einp->stderr);
        }

  103a7a:	55                   	push   %ebp
  103a7b:	89 e5                	mov    %esp,%ebp
  103a7d:	83 ec 18             	sub    $0x18,%esp
  103a80:	83 ec 0c             	sub    $0xc,%esp
  103a83:	ff 75 08             	pushl  0x8(%ebp)
  103a86:	e8 3e 00 00 00       	call   103ac9 <strlen>
  103a8b:	83 c4 10             	add    $0x10,%esp
  103a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  103a91:	83 ec 0c             	sub    $0xc,%esp
  103a94:	ff 75 0c             	pushl  0xc(%ebp)
  103a97:	e8 2d 00 00 00       	call   103ac9 <strlen>
  103a9c:	83 c4 10             	add    $0x10,%esp
  103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  103aa2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103aa8:	39 d0                	cmp    %edx,%eax
  103aaa:	7e 02                	jle    103aae <strcmp+0x34>
  103aac:	89 d0                	mov    %edx,%eax
  103aae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(einp != 0) {
            free(ein.execPath);
  103ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ab4:	40                   	inc    %eax
  103ab5:	83 ec 04             	sub    $0x4,%esp
  103ab8:	50                   	push   %eax
  103ab9:	ff 75 0c             	pushl  0xc(%ebp)
  103abc:	ff 75 08             	pushl  0x8(%ebp)
  103abf:	e8 1b ff ff ff       	call   1039df <memcmp>
  103ac4:	83 c4 10             	add    $0x10,%esp
            free(ein.stdin);
  103ac7:	c9                   	leave  
  103ac8:	c3                   	ret    

00103ac9 <strlen>:
            free(ein.stdout);
            free(ein.stderr);
        }
  103ac9:	55                   	push   %ebp
  103aca:	89 e5                	mov    %esp,%ebp
  103acc:	83 ec 10             	sub    $0x10,%esp
  103acf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103ad3:	75 07                	jne    103adc <strlen+0x13>

  103ad5:	b8 00 00 00 00       	mov    $0x0,%eax
  103ada:	eb 1b                	jmp    103af7 <strlen+0x2e>
        free(path);
    }
  103adc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103ae3:	eb 03                	jmp    103ae8 <strlen+0x1f>
  103ae5:	ff 45 fc             	incl   -0x4(%ebp)
  103ae8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103aeb:	03 45 08             	add    0x8(%ebp),%eax
  103aee:	8a 00                	mov    (%eax),%al
  103af0:	84 c0                	test   %al,%al
  103af2:	75 f1                	jne    103ae5 <strlen+0x1c>
        break;

  103af4:	8b 45 fc             	mov    -0x4(%ebp),%eax
    case 4: /* getargs */
  103af7:	c9                   	leave  
  103af8:	c3                   	ret    

00103af9 <strcpy>:
    {
        cpu->eax = (uint32_t) get_current_task()->args;
    }
  103af9:	55                   	push   %ebp
  103afa:	89 e5                	mov    %esp,%ebp
  103afc:	ff 75 0c             	pushl  0xc(%ebp)
  103aff:	e8 c5 ff ff ff       	call   103ac9 <strlen>
  103b04:	83 c4 04             	add    $0x4,%esp
  103b07:	40                   	inc    %eax
  103b08:	50                   	push   %eax
  103b09:	ff 75 0c             	pushl  0xc(%ebp)
  103b0c:	ff 75 08             	pushl  0x8(%ebp)
  103b0f:	e8 86 fe ff ff       	call   10399a <memcpy>
  103b14:	83 c4 0c             	add    $0xc,%esp
        break;
  103b17:	8b 45 08             	mov    0x8(%ebp),%eax

  103b1a:	c9                   	leave  
  103b1b:	c3                   	ret    

00103b1c <strclone>:
    case 5: /* yield */
    {
  103b1c:	55                   	push   %ebp
  103b1d:	89 e5                	mov    %esp,%ebp
  103b1f:	83 ec 18             	sub    $0x18,%esp
        cpu = schedule(cpu);
  103b22:	ff 75 08             	pushl  0x8(%ebp)
  103b25:	e8 9f ff ff ff       	call   103ac9 <strlen>
  103b2a:	83 c4 04             	add    $0x4,%esp
  103b2d:	40                   	inc    %eax
  103b2e:	83 ec 0c             	sub    $0xc,%esp
  103b31:	50                   	push   %eax
  103b32:	e8 9b fb ff ff       	call   1036d2 <malloc>
  103b37:	83 c4 10             	add    $0x10,%esp
  103b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  103b3d:	83 ec 08             	sub    $0x8,%esp
  103b40:	ff 75 08             	pushl  0x8(%ebp)
  103b43:	ff 75 f4             	pushl  -0xc(%ebp)
  103b46:	e8 ae ff ff ff       	call   103af9 <strcpy>
  103b4b:	83 c4 10             	add    $0x10,%esp
        break;

  103b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    case 6: /* getExecPath */
  103b51:	c9                   	leave  
  103b52:	c3                   	ret    

00103b53 <strtok>:
    {
        char* dest = (char*)cpu->ebx;
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
        break;
  103b53:	55                   	push   %ebp
  103b54:	89 e5                	mov    %esp,%ebp
  103b56:	83 ec 08             	sub    $0x8,%esp

  103b59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103b5d:	74 43                	je     103ba2 <strtok+0x4f>
    case 7: /* changeExecPath */
  103b5f:	a1 48 85 12 00       	mov    0x128548,%eax
  103b64:	85 c0                	test   %eax,%eax
  103b66:	74 11                	je     103b79 <strtok+0x26>
    {
  103b68:	a1 48 85 12 00       	mov    0x128548,%eax
  103b6d:	83 ec 0c             	sub    $0xc,%esp
  103b70:	50                   	push   %eax
  103b71:	e8 a2 fd ff ff       	call   103918 <free>
  103b76:	83 c4 10             	add    $0x10,%esp
        vfs_reset_error();
        char* path = strclone((char*) cpu->ebx);
  103b79:	83 ec 0c             	sub    $0xc,%esp
  103b7c:	ff 75 08             	pushl  0x8(%ebp)
  103b7f:	e8 98 ff ff ff       	call   103b1c <strclone>
  103b84:	83 c4 10             	add    $0x10,%esp
  103b87:	a3 48 85 12 00       	mov    %eax,0x128548

  103b8c:	a1 48 85 12 00       	mov    0x128548,%eax
  103b91:	83 ec 08             	sub    $0x8,%esp
  103b94:	ff 75 0c             	pushl  0xc(%ebp)
  103b97:	50                   	push   %eax
  103b98:	e8 17 00 00 00       	call   103bb4 <strtoknc>
  103b9d:	83 c4 10             	add    $0x10,%esp
  103ba0:	eb 10                	jmp    103bb2 <strtok+0x5f>
        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);

  103ba2:	83 ec 08             	sub    $0x8,%esp
  103ba5:	ff 75 0c             	pushl  0xc(%ebp)
  103ba8:	6a 00                	push   $0x0
  103baa:	e8 05 00 00 00       	call   103bb4 <strtoknc>
  103baf:	83 c4 10             	add    $0x10,%esp
        char* new = vfs_resolve_path(path);
  103bb2:	c9                   	leave  
  103bb3:	c3                   	ret    

00103bb4 <strtoknc>:

        cpu->eax = 0;
  103bb4:	55                   	push   %ebp
  103bb5:	89 e5                	mov    %esp,%ebp
  103bb7:	83 ec 10             	sub    $0x10,%esp
        if(new) {
  103bba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            get_current_task()->execPath = new;
  103bc1:	ff 75 0c             	pushl  0xc(%ebp)
  103bc4:	e8 00 ff ff ff       	call   103ac9 <strlen>
  103bc9:	83 c4 04             	add    $0x4,%esp
  103bcc:	89 45 f8             	mov    %eax,-0x8(%ebp)
            cpu->eax = 1;
        }

  103bcf:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  103bd3:	75 0a                	jne    103bdf <strtoknc+0x2b>
        free(path);
  103bd5:	b8 00 00 00 00       	mov    $0x0,%eax
  103bda:	e9 e0 00 00 00       	jmp    103cbf <strtoknc+0x10b>
    }
        break;

  103bdf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103be3:	75 13                	jne    103bf8 <strtoknc+0x44>
  103be5:	a1 44 85 12 00       	mov    0x128544,%eax
  103bea:	85 c0                	test   %eax,%eax
  103bec:	75 0a                	jne    103bf8 <strtoknc+0x44>
	case 10: /* fopen */
  103bee:	b8 00 00 00 00       	mov    $0x0,%eax
  103bf3:	e9 c7 00 00 00       	jmp    103cbf <strtoknc+0x10b>
	{
        vfs_reset_error();
	    char* name = strclone((char*) cpu->ebx);
  103bf8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103bfc:	74 08                	je     103c06 <strtoknc+0x52>
	    uint32_t fmode = (uint32_t) cpu->ecx;
  103bfe:	8b 45 08             	mov    0x8(%ebp),%eax
  103c01:	a3 44 85 12 00       	mov    %eax,0x128544

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
  103c06:	a1 44 85 12 00       	mov    0x128544,%eax
  103c0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103c0e:	eb 01                	jmp    103c11 <strtoknc+0x5d>
	    free(name);
	}
	    break;

	case 11: /* fclose */
	{
  103c10:	90                   	nop    

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
	    }
  103c11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  103c18:	eb 19                	jmp    103c33 <strtoknc+0x7f>
	    else
  103c1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103c1d:	8a 10                	mov    (%eax),%dl
  103c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c22:	03 45 0c             	add    0xc(%ebp),%eax
  103c25:	8a 00                	mov    (%eax),%al
  103c27:	38 c2                	cmp    %al,%dl
  103c29:	75 05                	jne    103c30 <strtoknc+0x7c>
	    {
  103c2b:	ff 45 fc             	incl   -0x4(%ebp)
	        cpu->eax = 0;
  103c2e:	eb 0b                	jmp    103c3b <strtoknc+0x87>

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
	    }
  103c30:	ff 45 f4             	incl   -0xc(%ebp)
  103c33:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c36:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103c39:	7c df                	jl     103c1a <strtoknc+0x66>
	    {
	        cpu->eax = 0;
	    }

	    free(name);
	}
  103c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c3e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103c41:	75 cd                	jne    103c10 <strtoknc+0x5c>
	    break;
  103c43:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103c46:	a3 44 85 12 00       	mov    %eax,0x128544

	case 11: /* fclose */
	{
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(!unregister_handle(handle)) {
  103c4b:	a1 44 85 12 00       	mov    0x128544,%eax
  103c50:	8a 00                	mov    (%eax),%al
  103c52:	84 c0                	test   %al,%al
  103c54:	75 57                	jne    103cad <strtoknc+0xf9>
	        vfs_close(handle);
  103c56:	c7 05 44 85 12 00 00 	movl   $0x0,0x128544
  103c5d:	00 00 00 

  103c60:	a1 44 85 12 00       	mov    0x128544,%eax
  103c65:	eb 58                	jmp    103cbf <strtoknc+0x10b>
	        cpu->eax = 0;
	    }
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  103c67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  103c6e:	eb 20                	jmp    103c90 <strtoknc+0xdc>
	    }
  103c70:	a1 44 85 12 00       	mov    0x128544,%eax
  103c75:	8a 10                	mov    (%eax),%dl
  103c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c7a:	03 45 0c             	add    0xc(%ebp),%eax
  103c7d:	8a 00                	mov    (%eax),%al
  103c7f:	38 c2                	cmp    %al,%dl
  103c81:	75 0a                	jne    103c8d <strtoknc+0xd9>
	}
  103c83:	a1 44 85 12 00       	mov    0x128544,%eax
  103c88:	c6 00 00             	movb   $0x0,(%eax)
	    break;
  103c8b:	eb 0b                	jmp    103c98 <strtoknc+0xe4>

	        cpu->eax = 0;
	    }
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  103c8d:	ff 45 f4             	incl   -0xc(%ebp)
  103c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c93:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103c96:	7c d8                	jl     103c70 <strtoknc+0xbc>
	}
	    break;

	case 12: /* fwrite */
	{
        vfs_reset_error();
  103c98:	a1 44 85 12 00       	mov    0x128544,%eax
  103c9d:	40                   	inc    %eax
  103c9e:	a3 44 85 12 00       	mov    %eax,0x128544
	    struct res_handle* handle = (void*) cpu->ebx;
  103ca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ca6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103ca9:	7c 10                	jl     103cbb <strtoknc+0x107>
  103cab:	eb 01                	jmp    103cae <strtoknc+0xfa>
	        vfs_close(handle);

	        cpu->eax = 0;
	    }
	    else
	    {
  103cad:	90                   	nop    
  103cae:	a1 44 85 12 00       	mov    0x128544,%eax
  103cb3:	8a 00                	mov    (%eax),%al
  103cb5:	84 c0                	test   %al,%al
  103cb7:	75 ae                	jne    103c67 <strtoknc+0xb3>
  103cb9:	eb 01                	jmp    103cbc <strtoknc+0x108>

	case 12: /* fwrite */
	{
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(handle != 0) {
  103cbb:	90                   	nop    
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
	    }
	    else
  103cbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
	    {
  103cbf:	c9                   	leave  
  103cc0:	c3                   	ret    
  103cc1:	00 00                	add    %al,(%eax)
	...

00103cc4 <vfs_set_error>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct exec_info {
  103cc4:	55                   	push   %ebp
  103cc5:	89 e5                	mov    %esp,%ebp
  103cc7:	83 ec 08             	sub    $0x8,%esp
    char* execPath;
  103cca:	e8 fe ee ff ff       	call   102bcd <get_current_task>
  103ccf:	85 c0                	test   %eax,%eax
  103cd1:	74 17                	je     103cea <vfs_set_error+0x26>
    char* stdin;
  103cd3:	e8 f5 ee ff ff       	call   102bcd <get_current_task>
  103cd8:	8b 40 2c             	mov    0x2c(%eax),%eax
  103cdb:	85 c0                	test   %eax,%eax
  103cdd:	75 0b                	jne    103cea <vfs_set_error+0x26>
    char* stdout;
  103cdf:	e8 e9 ee ff ff       	call   102bcd <get_current_task>
  103ce4:	8b 55 08             	mov    0x8(%ebp),%edx
  103ce7:	89 50 2c             	mov    %edx,0x2c(%eax)
    char* stderr;
};

  103cea:	c9                   	leave  
  103ceb:	c3                   	ret    

00103cec <vfs_reset_error>:
struct cpu_state* syscall(struct cpu_state* cpu) {
    cpu = save_cpu_state(cpu);
  103cec:	55                   	push   %ebp
  103ced:	89 e5                	mov    %esp,%ebp
  103cef:	83 ec 08             	sub    $0x8,%esp

  103cf2:	e8 d6 ee ff ff       	call   102bcd <get_current_task>
  103cf7:	85 c0                	test   %eax,%eax
  103cf9:	74 0c                	je     103d07 <vfs_reset_error+0x1b>
	switch (cpu->eax) {
  103cfb:	e8 cd ee ff ff       	call   102bcd <get_current_task>
  103d00:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
	case 1: /* exit */
		return terminate_current(cpu);
  103d07:	c9                   	leave  
  103d08:	c3                   	ret    

00103d09 <vfs_construct_absolute_path_for_node>:

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
  103d09:	55                   	push   %ebp
  103d0a:	89 e5                	mov    %esp,%ebp
  103d0c:	83 ec 18             	sub    $0x18,%esp
	}
  103d0f:	c6 05 c0 87 1c 00 00 	movb   $0x0,0x1c87c0
	    break;
  103d16:	c7 45 f4 bf 87 1c 00 	movl   $0x1c87bf,-0xc(%ebp)

    case 3: /* exec */
  103d1d:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103d22:	39 45 08             	cmp    %eax,0x8(%ebp)
  103d25:	75 67                	jne    103d8e <vfs_construct_absolute_path_for_node+0x85>
    {
  103d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d2a:	c6 00 2f             	movb   $0x2f,(%eax)
        char* path = strclone((char*) cpu->ebx);

        struct exec_info* einp = (void*) cpu->edx;
  103d2d:	eb 60                	jmp    103d8f <vfs_construct_absolute_path_for_node+0x86>

  103d2f:	8b 45 08             	mov    0x8(%ebp),%eax
  103d32:	83 ec 0c             	sub    $0xc,%esp
  103d35:	50                   	push   %eax
  103d36:	e8 8e fd ff ff       	call   103ac9 <strlen>
  103d3b:	83 c4 10             	add    $0x10,%esp
  103d3e:	f7 d8                	neg    %eax
  103d40:	01 45 f4             	add    %eax,-0xc(%ebp)
        struct exec_info ein = {
  103d43:	8b 45 08             	mov    0x8(%ebp),%eax
  103d46:	83 ec 08             	sub    $0x8,%esp
  103d49:	50                   	push   %eax
  103d4a:	ff 75 f4             	pushl  -0xc(%ebp)
  103d4d:	e8 a7 fd ff ff       	call   103af9 <strcpy>
  103d52:	83 c4 10             	add    $0x10,%esp
            .execPath = 0,
  103d55:	8b 45 08             	mov    0x8(%ebp),%eax
  103d58:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  103d5e:	85 c0                	test   %eax,%eax
  103d60:	75 15                	jne    103d77 <vfs_construct_absolute_path_for_node+0x6e>
  103d62:	8b 45 08             	mov    0x8(%ebp),%eax
  103d65:	83 ec 0c             	sub    $0xc,%esp
  103d68:	50                   	push   %eax
  103d69:	e8 5b fd ff ff       	call   103ac9 <strlen>
  103d6e:	83 c4 10             	add    $0x10,%esp
  103d71:	03 45 f4             	add    -0xc(%ebp),%eax
  103d74:	c6 00 2f             	movb   $0x2f,(%eax)
            .stdin = 0,
  103d77:	ff 4d f4             	decl   -0xc(%ebp)
  103d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d7d:	c6 00 2f             	movb   $0x2f,(%eax)
            .stdout = 0,
            .stderr = 0
  103d80:	8b 45 08             	mov    0x8(%ebp),%eax
  103d83:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  103d89:	89 45 08             	mov    %eax,0x8(%ebp)
  103d8c:	eb 01                	jmp    103d8f <vfs_construct_absolute_path_for_node+0x86>

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);

        struct exec_info* einp = (void*) cpu->edx;
  103d8e:	90                   	nop    
  103d8f:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103d94:	39 45 08             	cmp    %eax,0x8(%ebp)
  103d97:	75 96                	jne    103d2f <vfs_construct_absolute_path_for_node+0x26>
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };

        if(einp != 0) {
  103d99:	83 ec 0c             	sub    $0xc,%esp
  103d9c:	ff 75 f4             	pushl  -0xc(%ebp)
  103d9f:	e8 78 fd ff ff       	call   103b1c <strclone>
  103da4:	83 c4 10             	add    $0x10,%esp
            ein.execPath = strclone(einp->execPath);
  103da7:	c9                   	leave  
  103da8:	c3                   	ret    

00103da9 <vfs_find_node>:
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
  103da9:	55                   	push   %ebp
  103daa:	89 e5                	mov    %esp,%ebp
  103dac:	83 ec 18             	sub    $0x18,%esp
            ein.stderr = strclone(einp->stderr);
  103daf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103db3:	75 08                	jne    103dbd <vfs_find_node+0x14>
  103db5:	8b 45 08             	mov    0x8(%ebp),%eax
  103db8:	e9 ab 00 00 00       	jmp    103e68 <vfs_find_node+0xbf>
        }
  103dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
  103dc0:	8a 00                	mov    (%eax),%al
  103dc2:	84 c0                	test   %al,%al
  103dc4:	75 08                	jne    103dce <vfs_find_node+0x25>
  103dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  103dc9:	e9 9a 00 00 00       	jmp    103e68 <vfs_find_node+0xbf>

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  103dce:	83 ec 08             	sub    $0x8,%esp
  103dd1:	68 90 78 10 00       	push   $0x107890
  103dd6:	ff 75 0c             	pushl  0xc(%ebp)
  103dd9:	e8 9c fc ff ff       	call   103a7a <strcmp>
  103dde:	83 c4 10             	add    $0x10,%esp
  103de1:	85 c0                	test   %eax,%eax
  103de3:	75 05                	jne    103dea <vfs_find_node+0x41>
  103de5:	8b 45 08             	mov    0x8(%ebp),%eax
  103de8:	eb 7e                	jmp    103e68 <vfs_find_node+0xbf>

  103dea:	83 ec 08             	sub    $0x8,%esp
  103ded:	68 92 78 10 00       	push   $0x107892
  103df2:	ff 75 0c             	pushl  0xc(%ebp)
  103df5:	e8 80 fc ff ff       	call   103a7a <strcmp>
  103dfa:	83 c4 10             	add    $0x10,%esp
  103dfd:	85 c0                	test   %eax,%eax
  103dff:	75 1a                	jne    103e1b <vfs_find_node+0x72>
        if(einp != 0) {
  103e01:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103e06:	39 45 08             	cmp    %eax,0x8(%ebp)
  103e09:	75 05                	jne    103e10 <vfs_find_node+0x67>
  103e0b:	8b 45 08             	mov    0x8(%ebp),%eax
  103e0e:	eb 58                	jmp    103e68 <vfs_find_node+0xbf>
            free(ein.execPath);
  103e10:	8b 45 08             	mov    0x8(%ebp),%eax
  103e13:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  103e19:	eb 4d                	jmp    103e68 <vfs_find_node+0xbf>
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
  103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
  103e1e:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  103e24:	85 c0                	test   %eax,%eax
  103e26:	75 3b                	jne    103e63 <vfs_find_node+0xba>
        }
  103e28:	8b 45 08             	mov    0x8(%ebp),%eax
  103e2b:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103e31:	89 45 f4             	mov    %eax,-0xc(%ebp)

        free(path);
  103e34:	eb 27                	jmp    103e5d <vfs_find_node+0xb4>
    }
  103e36:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e39:	83 ec 08             	sub    $0x8,%esp
  103e3c:	50                   	push   %eax
  103e3d:	ff 75 0c             	pushl  0xc(%ebp)
  103e40:	e8 35 fc ff ff       	call   103a7a <strcmp>
  103e45:	83 c4 10             	add    $0x10,%esp
  103e48:	85 c0                	test   %eax,%eax
  103e4a:	75 05                	jne    103e51 <vfs_find_node+0xa8>
        break;
  103e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e4f:	eb 17                	jmp    103e68 <vfs_find_node+0xbf>

    case 4: /* getargs */
    {
  103e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e54:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  103e5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
        }

        free(path);
  103e5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  103e61:	75 d3                	jne    103e36 <vfs_find_node+0x8d>
    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
    }
        break;

  103e63:	b8 00 00 00 00       	mov    $0x0,%eax
    case 5: /* yield */
  103e68:	c9                   	leave  
  103e69:	c3                   	ret    

00103e6a <vfs_insert_node>:
    {
        cpu = schedule(cpu);
  103e6a:	55                   	push   %ebp
  103e6b:	89 e5                	mov    %esp,%ebp
    }
  103e6d:	8b 45 08             	mov    0x8(%ebp),%eax
  103e70:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103e76:	85 c0                	test   %eax,%eax
  103e78:	75 0d                	jne    103e87 <vfs_insert_node+0x1d>
        break;
  103e7a:	8b 45 08             	mov    0x8(%ebp),%eax
  103e7d:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  103e84:	00 00 00 

    case 6: /* getExecPath */
    {
  103e87:	8b 45 08             	mov    0x8(%ebp),%eax
  103e8a:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  103e90:	85 c0                	test   %eax,%eax
  103e92:	75 33                	jne    103ec7 <vfs_insert_node+0x5d>
        char* dest = (char*)cpu->ebx;
  103e94:	8b 45 08             	mov    0x8(%ebp),%eax
  103e97:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  103e9d:	89 c2                	mov    %eax,%edx
  103e9f:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ea2:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  103ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
  103eab:	8b 55 08             	mov    0x8(%ebp),%edx
  103eae:	89 90 0c 01 00 00    	mov    %edx,0x10c(%eax)
    }
  103eb4:	8b 45 08             	mov    0x8(%ebp),%eax
  103eb7:	8b 55 0c             	mov    0xc(%ebp),%edx
  103eba:	89 90 04 01 00 00    	mov    %edx,0x104(%eax)
        break;

  103ec0:	b8 00 00 00 00       	mov    $0x0,%eax
  103ec5:	eb 05                	jmp    103ecc <vfs_insert_node+0x62>
    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  103ec7:	b8 01 00 00 00       	mov    $0x1,%eax
        char* path = strclone((char*) cpu->ebx);
  103ecc:	5d                   	pop    %ebp
  103ecd:	c3                   	ret    

00103ece <vfs_get_relative_node>:

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);

  103ece:	55                   	push   %ebp
  103ecf:	89 e5                	mov    %esp,%ebp
  103ed1:	83 ec 18             	sub    $0x18,%esp
        char* new = vfs_resolve_path(path);

  103ed4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        cpu->eax = 0;
        if(new) {
  103edb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  103edf:	75 17                	jne    103ef8 <vfs_get_relative_node+0x2a>
            get_current_task()->execPath = new;
  103ee1:	83 ec 0c             	sub    $0xc,%esp
  103ee4:	6a 05                	push   $0x5
  103ee6:	e8 d9 fd ff ff       	call   103cc4 <vfs_set_error>
  103eeb:	83 c4 10             	add    $0x10,%esp
            cpu->eax = 1;
  103eee:	b8 00 00 00 00       	mov    $0x0,%eax
  103ef3:	e9 af 00 00 00       	jmp    103fa7 <vfs_get_relative_node+0xd9>
        }

        free(path);
  103ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
  103efb:	8a 00                	mov    (%eax),%al
  103efd:	84 c0                	test   %al,%al
  103eff:	75 17                	jne    103f18 <vfs_get_relative_node+0x4a>
    }
  103f01:	83 ec 0c             	sub    $0xc,%esp
  103f04:	6a 05                	push   $0x5
  103f06:	e8 b9 fd ff ff       	call   103cc4 <vfs_set_error>
  103f0b:	83 c4 10             	add    $0x10,%esp
        break;
  103f0e:	b8 00 00 00 00       	mov    $0x0,%eax
  103f13:	e9 8f 00 00 00       	jmp    103fa7 <vfs_get_relative_node+0xd9>

	case 10: /* fopen */
	{
  103f18:	83 ec 08             	sub    $0x8,%esp
  103f1b:	68 95 78 10 00       	push   $0x107895
  103f20:	ff 75 0c             	pushl  0xc(%ebp)
  103f23:	e8 2b fc ff ff       	call   103b53 <strtok>
  103f28:	83 c4 10             	add    $0x10,%esp
  103f2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_reset_error();
	    char* name = strclone((char*) cpu->ebx);
  103f2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103f32:	75 05                	jne    103f39 <vfs_get_relative_node+0x6b>
	    uint32_t fmode = (uint32_t) cpu->ecx;
  103f34:	8b 45 08             	mov    0x8(%ebp),%eax
  103f37:	eb 6e                	jmp    103fa7 <vfs_get_relative_node+0xd9>

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
  103f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103f3c:	8a 00                	mov    (%eax),%al
  103f3e:	84 c0                	test   %al,%al
  103f40:	75 15                	jne    103f57 <vfs_get_relative_node+0x89>
  103f42:	83 ec 08             	sub    $0x8,%esp
  103f45:	68 95 78 10 00       	push   $0x107895
  103f4a:	6a 00                	push   $0x0
  103f4c:	e8 02 fc ff ff       	call   103b53 <strtok>
  103f51:	83 c4 10             	add    $0x10,%esp
  103f54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
  103f57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103f5b:	75 41                	jne    103f9e <vfs_get_relative_node+0xd0>
	    }
  103f5d:	8b 45 08             	mov    0x8(%ebp),%eax
  103f60:	eb 45                	jmp    103fa7 <vfs_get_relative_node+0xd9>
	    else
	    {
	        cpu->eax = 0;
	    }

  103f62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103f66:	75 07                	jne    103f6f <vfs_get_relative_node+0xa1>
  103f68:	b8 00 00 00 00       	mov    $0x0,%eax
  103f6d:	eb 38                	jmp    103fa7 <vfs_get_relative_node+0xd9>
	    free(name);
	}
  103f6f:	83 ec 08             	sub    $0x8,%esp
  103f72:	ff 75 f0             	pushl  -0x10(%ebp)
  103f75:	ff 75 08             	pushl  0x8(%ebp)
  103f78:	e8 2c fe ff ff       	call   103da9 <vfs_find_node>
  103f7d:	83 c4 10             	add    $0x10,%esp
  103f80:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    break;
  103f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f86:	89 45 08             	mov    %eax,0x8(%ebp)

	case 11: /* fclose */
  103f89:	83 ec 08             	sub    $0x8,%esp
  103f8c:	68 95 78 10 00       	push   $0x107895
  103f91:	6a 00                	push   $0x0
  103f93:	e8 bb fb ff ff       	call   103b53 <strtok>
  103f98:	83 c4 10             	add    $0x10,%esp
  103f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
	    }
	    else
	    {
	        cpu->eax = 0;
  103f9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103fa2:	75 be                	jne    103f62 <vfs_get_relative_node+0x94>
	    break;

	case 11: /* fclose */
	{
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
  103fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
	    if(!unregister_handle(handle)) {
  103fa7:	c9                   	leave  
  103fa8:	c3                   	ret    

00103fa9 <vfs_get_current_task_root_node_for_path>:
	        vfs_close(handle);

  103fa9:	55                   	push   %ebp
  103faa:	89 e5                	mov    %esp,%ebp
  103fac:	83 ec 08             	sub    $0x8,%esp
	        cpu->eax = 0;
  103faf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103fb3:	74 09                	je     103fbe <vfs_get_current_task_root_node_for_path+0x15>
  103fb5:	8b 45 08             	mov    0x8(%ebp),%eax
  103fb8:	8a 00                	mov    (%eax),%al
  103fba:	84 c0                	test   %al,%al
  103fbc:	75 14                	jne    103fd2 <vfs_get_current_task_root_node_for_path+0x29>
	    }
  103fbe:	83 ec 0c             	sub    $0xc,%esp
  103fc1:	6a 05                	push   $0x5
  103fc3:	e8 fc fc ff ff       	call   103cc4 <vfs_set_error>
  103fc8:	83 c4 10             	add    $0x10,%esp
	    else
  103fcb:	b8 00 00 00 00       	mov    $0x0,%eax
  103fd0:	eb 4d                	jmp    10401f <vfs_get_current_task_root_node_for_path+0x76>
	    {
	        cpu->eax = (uint32_t) -1;
	    }
  103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
  103fd5:	8a 00                	mov    (%eax),%al
  103fd7:	3c 2f                	cmp    $0x2f,%al
  103fd9:	75 07                	jne    103fe2 <vfs_get_current_task_root_node_for_path+0x39>
  103fdb:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103fe0:	eb 3d                	jmp    10401f <vfs_get_current_task_root_node_for_path+0x76>
	}
  103fe2:	e8 e6 eb ff ff       	call   102bcd <get_current_task>
  103fe7:	85 c0                	test   %eax,%eax
  103fe9:	75 07                	jne    103ff2 <vfs_get_current_task_root_node_for_path+0x49>
  103feb:	a1 4c 85 12 00       	mov    0x12854c,%eax
  103ff0:	eb 2d                	jmp    10401f <vfs_get_current_task_root_node_for_path+0x76>
	    break;
  103ff2:	e8 d6 eb ff ff       	call   102bcd <get_current_task>
  103ff7:	8b 40 28             	mov    0x28(%eax),%eax
  103ffa:	85 c0                	test   %eax,%eax
  103ffc:	75 07                	jne    104005 <vfs_get_current_task_root_node_for_path+0x5c>
  103ffe:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104003:	eb 1a                	jmp    10401f <vfs_get_current_task_root_node_for_path+0x76>

	case 12: /* fwrite */
  104005:	e8 c3 eb ff ff       	call   102bcd <get_current_task>
  10400a:	8b 50 28             	mov    0x28(%eax),%edx
  10400d:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104012:	83 ec 08             	sub    $0x8,%esp
  104015:	52                   	push   %edx
  104016:	50                   	push   %eax
  104017:	e8 b2 fe ff ff       	call   103ece <vfs_get_relative_node>
  10401c:	83 c4 10             	add    $0x10,%esp
	{
        vfs_reset_error();
  10401f:	c9                   	leave  
  104020:	c3                   	ret    

00104021 <vfs_get_node>:
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(handle != 0) {
  104021:	55                   	push   %ebp
  104022:	89 e5                	mov    %esp,%ebp
  104024:	83 ec 08             	sub    $0x8,%esp
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  104027:	83 ec 0c             	sub    $0xc,%esp
  10402a:	ff 75 08             	pushl  0x8(%ebp)
  10402d:	e8 77 ff ff ff       	call   103fa9 <vfs_get_current_task_root_node_for_path>
  104032:	83 c4 10             	add    $0x10,%esp
  104035:	83 ec 08             	sub    $0x8,%esp
  104038:	ff 75 08             	pushl  0x8(%ebp)
  10403b:	50                   	push   %eax
  10403c:	e8 8d fe ff ff       	call   103ece <vfs_get_relative_node>
  104041:	83 c4 10             	add    $0x10,%esp
	    }
  104044:	c9                   	leave  
  104045:	c3                   	ret    

00104046 <vfs_create_path>:
	    else
	    {
  104046:	55                   	push   %ebp
  104047:	89 e5                	mov    %esp,%ebp
  104049:	83 ec 18             	sub    $0x18,%esp
            cpu->eax = RW_ERR_VFS;
	    }
  10404c:	83 ec 0c             	sub    $0xc,%esp
  10404f:	ff 75 08             	pushl  0x8(%ebp)
  104052:	e8 52 ff ff ff       	call   103fa9 <vfs_get_current_task_root_node_for_path>
  104057:	83 c4 10             	add    $0x10,%esp
  10405a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  10405d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	    break;

  104064:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	case 13: /* fread */
	{
  10406b:	83 ec 08             	sub    $0x8,%esp
  10406e:	68 95 78 10 00       	push   $0x107895
  104073:	ff 75 08             	pushl  0x8(%ebp)
  104076:	e8 d8 fa ff ff       	call   103b53 <strtok>
  10407b:	83 c4 10             	add    $0x10,%esp
  10407e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vfs_reset_error();
  104081:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104084:	8a 00                	mov    (%eax),%al
  104086:	84 c0                	test   %al,%al
  104088:	0f 85 c4 00 00 00    	jne    104152 <vfs_create_path+0x10c>
  10408e:	83 ec 08             	sub    $0x8,%esp
  104091:	68 95 78 10 00       	push   $0x107895
  104096:	6a 00                	push   $0x0
  104098:	e8 b6 fa ff ff       	call   103b53 <strtok>
  10409d:	83 c4 10             	add    $0x10,%esp
  1040a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        struct res_handle* handle = (void*) cpu->ebx;
        if(handle != 0) {
  1040a3:	e9 aa 00 00 00       	jmp    104152 <vfs_create_path+0x10c>
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
  1040a8:	83 ec 08             	sub    $0x8,%esp
  1040ab:	ff 75 e8             	pushl  -0x18(%ebp)
  1040ae:	ff 75 ec             	pushl  -0x14(%ebp)
  1040b1:	e8 f3 fc ff ff       	call   103da9 <vfs_find_node>
  1040b6:	83 c4 10             	add    $0x10,%esp
  1040b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        else
        {
  1040bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1040c0:	75 75                	jne    104137 <vfs_create_path+0xf1>
            cpu->eax = RW_ERR_VFS;
  1040c2:	83 ec 0c             	sub    $0xc,%esp
  1040c5:	68 10 01 00 00       	push   $0x110
  1040ca:	e8 03 f6 ff ff       	call   1036d2 <malloc>
  1040cf:	83 c4 10             	add    $0x10,%esp
  1040d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
	}
  1040d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040d8:	83 ec 08             	sub    $0x8,%esp
  1040db:	ff 75 e8             	pushl  -0x18(%ebp)
  1040de:	50                   	push   %eax
  1040df:	e8 15 fa ff ff       	call   103af9 <strcpy>
  1040e4:	83 c4 10             	add    $0x10,%esp
	    break;
  1040e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040ea:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  1040f1:	00 00 00 

  1040f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040f7:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  1040fe:	00 00 00 
	case 14: /* fmkfifo */
	{
  104101:	ff 45 f4             	incl   -0xc(%ebp)
        vfs_reset_error();
        char* name = strclone((char*) cpu->ebx);
  104104:	83 ec 08             	sub    $0x8,%esp
  104107:	ff 75 f0             	pushl  -0x10(%ebp)
  10410a:	ff 75 ec             	pushl  -0x14(%ebp)
  10410d:	e8 58 fd ff ff       	call   103e6a <vfs_insert_node>
  104112:	83 c4 10             	add    $0x10,%esp
  104115:	85 c0                	test   %eax,%eax
  104117:	74 1e                	je     104137 <vfs_create_path+0xf1>
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  104119:	83 ec 0c             	sub    $0xc,%esp
  10411c:	6a 38                	push   $0x38
  10411e:	e8 af f5 ff ff       	call   1036d2 <malloc>
  104123:	83 c4 10             	add    $0x10,%esp
  104126:	83 ec 08             	sub    $0x8,%esp
  104129:	68 98 78 10 00       	push   $0x107898
  10412e:	50                   	push   %eax
  10412f:	e8 a2 c0 ff ff       	call   1001d6 <show_cod>
  104134:	83 c4 10             	add    $0x10,%esp

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
        if(handle) {
            register_handle(handle);
  104137:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10413a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            cpu->eax = (uint32_t) handle;
        }
  10413d:	83 ec 08             	sub    $0x8,%esp
  104140:	68 95 78 10 00       	push   $0x107895
  104145:	6a 00                	push   $0x0
  104147:	e8 07 fa ff ff       	call   103b53 <strtok>
  10414c:	83 c4 10             	add    $0x10,%esp
  10414f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	case 13: /* fread */
	{
        vfs_reset_error();
        struct res_handle* handle = (void*) cpu->ebx;
        if(handle != 0) {
  104152:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  104156:	0f 85 4c ff ff ff    	jne    1040a8 <vfs_create_path+0x62>
            register_handle(handle);
            cpu->eax = (uint32_t) handle;
        }
        else
        {
            cpu->eax = 0;
  10415c:	8b 45 f4             	mov    -0xc(%ebp),%eax
        }
  10415f:	c9                   	leave  
  104160:	c3                   	ret    

00104161 <vfs_get_child_of_exec_path>:

        free(name);
  104161:	55                   	push   %ebp
  104162:	89 e5                	mov    %esp,%ebp
  104164:	83 ec 18             	sub    $0x18,%esp
	}
  104167:	e8 61 ea ff ff       	call   102bcd <get_current_task>
  10416c:	8b 40 28             	mov    0x28(%eax),%eax
  10416f:	83 ec 0c             	sub    $0xc,%esp
  104172:	50                   	push   %eax
  104173:	e8 a9 fe ff ff       	call   104021 <vfs_get_node>
  104178:	83 c4 10             	add    $0x10,%esp
  10417b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    break;
  10417e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  104182:	74 59                	je     1041dd <vfs_get_child_of_exec_path+0x7c>

  104184:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104187:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  10418d:	85 c0                	test   %eax,%eax
  10418f:	74 07                	je     104198 <vfs_get_child_of_exec_path+0x37>
  104191:	b8 00 00 00 00       	mov    $0x0,%eax
  104196:	eb 4a                	jmp    1041e2 <vfs_get_child_of_exec_path+0x81>
	case 15: /* getLastVFSErr */
	{
  104198:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10419b:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1041a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    cpu->eax = get_current_task()->vfserr;
        vfs_reset_error();
  1041a4:	eb 19                	jmp    1041bf <vfs_get_child_of_exec_path+0x5e>
	}
  1041a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041a9:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  1041af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    break;

  1041b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1041b6:	75 07                	jne    1041bf <vfs_get_child_of_exec_path+0x5e>
  1041b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1041bd:	eb 23                	jmp    1041e2 <vfs_get_child_of_exec_path+0x81>
	    break;

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
        vfs_reset_error();
  1041bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1041c3:	0f 95 c0             	setne  %al
  1041c6:	ff 4d 08             	decl   0x8(%ebp)
  1041c9:	84 c0                	test   %al,%al
  1041cb:	75 d9                	jne    1041a6 <vfs_get_child_of_exec_path+0x45>
	}
	    break;

	case 16: /* favailable */
	{
	    cpu->eax = vfs_available((void*)cpu->ebx);
  1041cd:	83 ec 0c             	sub    $0xc,%esp
  1041d0:	ff 75 f4             	pushl  -0xc(%ebp)
  1041d3:	e8 31 fb ff ff       	call   103d09 <vfs_construct_absolute_path_for_node>
  1041d8:	83 c4 10             	add    $0x10,%esp
  1041db:	eb 05                	jmp    1041e2 <vfs_get_child_of_exec_path+0x81>
	}
	    break;

  1041dd:	b8 00 00 00 00       	mov    $0x0,%eax
	case 17: /* getExecPathChild */
  1041e2:	c9                   	leave  
  1041e3:	c3                   	ret    

001041e4 <vfs_create_dir>:
	{
		char* path = vfs_get_child_of_exec_path(cpu->ebx);
  1041e4:	55                   	push   %ebp
  1041e5:	89 e5                	mov    %esp,%ebp
  1041e7:	83 ec 08             	sub    $0x8,%esp

  1041ea:	83 ec 0c             	sub    $0xc,%esp
  1041ed:	ff 75 08             	pushl  0x8(%ebp)
  1041f0:	e8 51 fe ff ff       	call   104046 <vfs_create_path>
  1041f5:	83 c4 10             	add    $0x10,%esp
		if(path != 0 && cpu->ecx != 0) {
  1041f8:	c9                   	leave  
  1041f9:	c3                   	ret    

001041fa <vfs_create_kfile>:
			strcpy((char*)cpu->ecx, path);
			free(path);
  1041fa:	55                   	push   %ebp
  1041fb:	89 e5                	mov    %esp,%ebp
  1041fd:	53                   	push   %ebx
  1041fe:	83 ec 14             	sub    $0x14,%esp

  104201:	83 ec 0c             	sub    $0xc,%esp
  104204:	ff 75 08             	pushl  0x8(%ebp)
  104207:	e8 bd f8 ff ff       	call   103ac9 <strlen>
  10420c:	83 c4 10             	add    $0x10,%esp
  10420f:	40                   	inc    %eax
  104210:	83 ec 0c             	sub    $0xc,%esp
  104213:	50                   	push   %eax
  104214:	e8 b9 f4 ff ff       	call   1036d2 <malloc>
  104219:	83 c4 10             	add    $0x10,%esp
  10421c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			cpu->eax = cpu->ecx;
  10421f:	83 ec 08             	sub    $0x8,%esp
  104222:	ff 75 08             	pushl  0x8(%ebp)
  104225:	ff 75 f0             	pushl  -0x10(%ebp)
  104228:	e8 cc f8 ff ff       	call   103af9 <strcpy>
  10422d:	83 c4 10             	add    $0x10,%esp
		}
		else
  104230:	83 ec 0c             	sub    $0xc,%esp
  104233:	ff 75 f0             	pushl  -0x10(%ebp)
  104236:	e8 0b fe ff ff       	call   104046 <vfs_create_path>
  10423b:	83 c4 10             	add    $0x10,%esp
  10423e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			cpu->eax = 0;
		}
  104241:	83 ec 0c             	sub    $0xc,%esp
  104244:	ff 75 08             	pushl  0x8(%ebp)
  104247:	e8 d5 fd ff ff       	call   104021 <vfs_get_node>
  10424c:	83 c4 10             	add    $0x10,%esp
  10424f:	a3 60 85 12 00       	mov    %eax,0x128560
	}
		break;
  104254:	a1 60 85 12 00       	mov    0x128560,%eax
  104259:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  104260:	00 00 00 

  104263:	8b 1d 60 85 12 00    	mov    0x128560,%ebx
  104269:	8b 45 0c             	mov    0xc(%ebp),%eax
  10426c:	8b 40 14             	mov    0x14(%eax),%eax
  10426f:	83 ec 0c             	sub    $0xc,%esp
  104272:	ff 75 10             	pushl  0x10(%ebp)
  104275:	ff d0                	call   *%eax
  104277:	83 c4 10             	add    $0x10,%esp
  10427a:	89 83 04 01 00 00    	mov    %eax,0x104(%ebx)
	case 20: /* getpmhandle */
  104280:	a1 60 85 12 00       	mov    0x128560,%eax
  104285:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10428b:	8b 55 0c             	mov    0xc(%ebp),%edx
  10428e:	89 50 04             	mov    %edx,0x4(%eax)
	{
	    struct res_handle* handle = 0;
  104291:	8b 45 f4             	mov    -0xc(%ebp),%eax

  104294:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104297:	c9                   	leave  
  104298:	c3                   	ret    

00104299 <vfs_open>:
	    switch(cpu->ebx) {
	    case PMID_STDOUT:
  104299:	55                   	push   %ebp
  10429a:	89 e5                	mov    %esp,%ebp
  10429c:	83 ec 18             	sub    $0x18,%esp
	        handle = get_current_task()->stdout;
	        break;
        case PMID_STDIN:
  10429f:	83 ec 0c             	sub    $0xc,%esp
  1042a2:	ff 75 08             	pushl  0x8(%ebp)
  1042a5:	e8 77 fd ff ff       	call   104021 <vfs_get_node>
  1042aa:	83 c4 10             	add    $0x10,%esp
  1042ad:	a3 5c 85 12 00       	mov    %eax,0x12855c
            handle = get_current_task()->stdin;
            break;
  1042b2:	a1 5c 85 12 00       	mov    0x12855c,%eax
  1042b7:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  1042bd:	83 f8 01             	cmp    $0x1,%eax
  1042c0:	75 2d                	jne    1042ef <vfs_open+0x56>
        case PMID_STDERR:
  1042c2:	a1 5c 85 12 00       	mov    0x12855c,%eax
  1042c7:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1042cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
            handle = get_current_task()->stderr;
  1042d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042d3:	8b 40 04             	mov    0x4(%eax),%eax
  1042d6:	8b 40 08             	mov    0x8(%eax),%eax
  1042d9:	83 ec 08             	sub    $0x8,%esp
  1042dc:	ff 75 0c             	pushl  0xc(%ebp)
  1042df:	ff 75 f0             	pushl  -0x10(%ebp)
  1042e2:	ff d0                	call   *%eax
  1042e4:	83 c4 10             	add    $0x10,%esp
  1042e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
        default:
  1042ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1042ed:	eb 05                	jmp    1042f4 <vfs_open+0x5b>
            handle = get_current_task()->stdout;
            break;
	    }
  1042ef:	b8 00 00 00 00       	mov    $0x0,%eax

  1042f4:	c9                   	leave  
  1042f5:	c3                   	ret    

001042f6 <vfs_close>:
	    cpu->eax = (uint32_t) handle;
	}
  1042f6:	55                   	push   %ebp
  1042f7:	89 e5                	mov    %esp,%ebp
  1042f9:	83 ec 18             	sub    $0x18,%esp
	    break;
  1042fc:	8b 45 08             	mov    0x8(%ebp),%eax
  1042ff:	8b 00                	mov    (%eax),%eax
  104301:	83 f8 01             	cmp    $0x1,%eax
  104304:	75 1f                	jne    104325 <vfs_close+0x2f>

  104306:	8b 45 08             	mov    0x8(%ebp),%eax
  104309:	8b 40 04             	mov    0x4(%eax),%eax
  10430c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	case 21: /* fopenpmhandle */
	{
  10430f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104312:	8b 40 04             	mov    0x4(%eax),%eax
  104315:	8b 40 0c             	mov    0xc(%eax),%eax
  104318:	83 ec 0c             	sub    $0xc,%esp
  10431b:	ff 75 08             	pushl  0x8(%ebp)
  10431e:	ff d0                	call   *%eax
  104320:	83 c4 10             	add    $0x10,%esp
  104323:	eb 05                	jmp    10432a <vfs_close+0x34>
	    vfs_reset_error();
	    char* path = strclone((char*)cpu->ecx);

  104325:	b8 00 00 00 00       	mov    $0x0,%eax
	    struct res_handle* open;
  10432a:	c9                   	leave  
  10432b:	c3                   	ret    

0010432c <vfs_read>:
	    uint32_t fm = FM_WRITE;

  10432c:	55                   	push   %ebp
  10432d:	89 e5                	mov    %esp,%ebp
  10432f:	83 ec 18             	sub    $0x18,%esp
	    if(cpu->ebx == PMID_STDIN) {
  104332:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104336:	75 07                	jne    10433f <vfs_read+0x13>
  104338:	b8 02 00 00 00       	mov    $0x2,%eax
  10433d:	eb 74                	jmp    1043b3 <vfs_read+0x87>
	        fm = FM_READ;
	    }
  10433f:	8b 45 08             	mov    0x8(%ebp),%eax
  104342:	8b 40 0c             	mov    0xc(%eax),%eax
  104345:	83 e0 01             	and    $0x1,%eax
  104348:	85 c0                	test   %eax,%eax
  10434a:	75 07                	jne    104353 <vfs_read+0x27>
  10434c:	b8 04 00 00 00       	mov    $0x4,%eax
  104351:	eb 60                	jmp    1043b3 <vfs_read+0x87>

	    open = vfs_open(path, fm);
  104353:	8b 45 08             	mov    0x8(%ebp),%eax
  104356:	8b 00                	mov    (%eax),%eax
  104358:	83 f8 01             	cmp    $0x1,%eax
  10435b:	75 51                	jne    1043ae <vfs_read+0x82>

  10435d:	8b 45 08             	mov    0x8(%ebp),%eax
  104360:	8b 40 04             	mov    0x4(%eax),%eax
  104363:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    free(path);

  104366:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104369:	8b 40 04             	mov    0x4(%eax),%eax
  10436c:	8b 10                	mov    (%eax),%edx
  10436e:	8b 45 10             	mov    0x10(%ebp),%eax
  104371:	0f af 45 14          	imul   0x14(%ebp),%eax
  104375:	83 ec 04             	sub    $0x4,%esp
  104378:	50                   	push   %eax
  104379:	ff 75 0c             	pushl  0xc(%ebp)
  10437c:	ff 75 08             	pushl  0x8(%ebp)
  10437f:	ff d2                	call   *%edx
  104381:	83 c4 10             	add    $0x10,%esp
  104384:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    if(!open) {
	        cpu->eax = (uint32_t) -1;
  104387:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10438b:	75 1c                	jne    1043a9 <vfs_read+0x7d>
	        break;
  10438d:	8b 45 08             	mov    0x8(%ebp),%eax
  104390:	8b 50 08             	mov    0x8(%eax),%edx
  104393:	8b 45 10             	mov    0x10(%ebp),%eax
  104396:	0f af 45 14          	imul   0x14(%ebp),%eax
  10439a:	01 c2                	add    %eax,%edx
  10439c:	8b 45 08             	mov    0x8(%ebp),%eax
  10439f:	89 50 08             	mov    %edx,0x8(%eax)
	    }
  1043a2:	b8 00 00 00 00       	mov    $0x0,%eax
  1043a7:	eb 0a                	jmp    1043b3 <vfs_read+0x87>

	    struct res_handle* oldhandle = 0;

  1043a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043ac:	eb 05                	jmp    1043b3 <vfs_read+0x87>
        switch(cpu->ebx) {
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  1043ae:	b8 02 00 00 00       	mov    $0x2,%eax
            get_current_task()->stdout = open;
  1043b3:	c9                   	leave  
  1043b4:	c3                   	ret    

001043b5 <vfs_write>:
            break;
        case PMID_STDIN:
  1043b5:	55                   	push   %ebp
  1043b6:	89 e5                	mov    %esp,%ebp
  1043b8:	83 ec 18             	sub    $0x18,%esp
            oldhandle = get_current_task()->stdin;
  1043bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1043bf:	75 07                	jne    1043c8 <vfs_write+0x13>
  1043c1:	b8 02 00 00 00       	mov    $0x2,%eax
  1043c6:	eb 75                	jmp    10443d <vfs_write+0x88>
            get_current_task()->stdin = open;
            break;
  1043c8:	8b 45 08             	mov    0x8(%ebp),%eax
  1043cb:	8b 40 0c             	mov    0xc(%eax),%eax
  1043ce:	83 e0 02             	and    $0x2,%eax
  1043d1:	85 c0                	test   %eax,%eax
  1043d3:	75 07                	jne    1043dc <vfs_write+0x27>
  1043d5:	b8 05 00 00 00       	mov    $0x5,%eax
  1043da:	eb 61                	jmp    10443d <vfs_write+0x88>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  1043dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1043df:	8b 00                	mov    (%eax),%eax
  1043e1:	83 f8 01             	cmp    $0x1,%eax
  1043e4:	75 52                	jne    104438 <vfs_write+0x83>
            get_current_task()->stderr = open;
  1043e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1043e9:	8b 40 04             	mov    0x4(%eax),%eax
  1043ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
        default:
  1043ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043f2:	8b 40 04             	mov    0x4(%eax),%eax
  1043f5:	8b 50 04             	mov    0x4(%eax),%edx
  1043f8:	8b 45 10             	mov    0x10(%ebp),%eax
  1043fb:	0f af 45 14          	imul   0x14(%ebp),%eax
  1043ff:	83 ec 04             	sub    $0x4,%esp
  104402:	50                   	push   %eax
  104403:	ff 75 0c             	pushl  0xc(%ebp)
  104406:	ff 75 08             	pushl  0x8(%ebp)
  104409:	ff d2                	call   *%edx
  10440b:	83 c4 10             	add    $0x10,%esp
  10440e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            oldhandle = get_current_task()->stdout;
            get_current_task()->stdout = open;
  104411:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104415:	75 1c                	jne    104433 <vfs_write+0x7e>
            break;
  104417:	8b 45 08             	mov    0x8(%ebp),%eax
  10441a:	8b 50 08             	mov    0x8(%eax),%edx
  10441d:	8b 45 10             	mov    0x10(%ebp),%eax
  104420:	0f af 45 14          	imul   0x14(%ebp),%eax
  104424:	01 c2                	add    %eax,%edx
  104426:	8b 45 08             	mov    0x8(%ebp),%eax
  104429:	89 50 08             	mov    %edx,0x8(%eax)
        }
  10442c:	b8 00 00 00 00       	mov    $0x0,%eax
  104431:	eb 0a                	jmp    10443d <vfs_write+0x88>

        if(oldhandle != 0) {
            vfs_close(oldhandle);
  104433:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104436:	eb 05                	jmp    10443d <vfs_write+0x88>
        }

        cpu->eax = 0;
  104438:	b8 02 00 00 00       	mov    $0x2,%eax
	}
  10443d:	c9                   	leave  
  10443e:	c3                   	ret    

0010443f <vfs_available>:
	    break;

  10443f:	55                   	push   %ebp
  104440:	89 e5                	mov    %esp,%ebp
  104442:	83 ec 18             	sub    $0x18,%esp
	case 30: /* return_rpc */
  104445:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104449:	75 07                	jne    104452 <vfs_available+0x13>
  10444b:	b8 00 00 00 00       	mov    $0x0,%eax
  104450:	eb 2e                	jmp    104480 <vfs_available+0x41>
	{
	    cpu = return_rpc_call(cpu);
  104452:	8b 45 08             	mov    0x8(%ebp),%eax
  104455:	8b 00                	mov    (%eax),%eax
  104457:	83 f8 01             	cmp    $0x1,%eax
  10445a:	75 1f                	jne    10447b <vfs_available+0x3c>
	}
  10445c:	8b 45 08             	mov    0x8(%ebp),%eax
  10445f:	8b 40 04             	mov    0x4(%eax),%eax
  104462:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    break;

  104465:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104468:	8b 40 04             	mov    0x4(%eax),%eax
  10446b:	8b 40 10             	mov    0x10(%eax),%eax
  10446e:	83 ec 0c             	sub    $0xc,%esp
  104471:	ff 75 08             	pushl  0x8(%ebp)
  104474:	ff d0                	call   *%eax
  104476:	83 c4 10             	add    $0x10,%esp
  104479:	eb 05                	jmp    104480 <vfs_available+0x41>
	case 31: /* call_rpc */
	{
	    int PID = cpu->ebx;
  10447b:	b8 00 00 00 00       	mov    $0x0,%eax

  104480:	c9                   	leave  
  104481:	c3                   	ret    

00104482 <vfs_exists>:
	    //TODO create RPC for U2U
	}
  104482:	55                   	push   %ebp
  104483:	89 e5                	mov    %esp,%ebp
  104485:	83 ec 08             	sub    $0x8,%esp
	    break;
  104488:	83 ec 0c             	sub    $0xc,%esp
  10448b:	ff 75 08             	pushl  0x8(%ebp)
  10448e:	e8 8e fb ff ff       	call   104021 <vfs_get_node>
  104493:	83 c4 10             	add    $0x10,%esp
  104496:	85 c0                	test   %eax,%eax
  104498:	74 07                	je     1044a1 <vfs_exists+0x1f>
  10449a:	b8 01 00 00 00       	mov    $0x1,%eax
  10449f:	eb 05                	jmp    1044a6 <vfs_exists+0x24>

  1044a1:	b8 00 00 00 00       	mov    $0x0,%eax
	case 32: /* set_rpc_handler */
  1044a6:	c9                   	leave  
  1044a7:	c3                   	ret    

001044a8 <vfs_seek>:
	{
	    uint32_t handlerAddr = cpu->ebx;
  1044a8:	55                   	push   %ebp
  1044a9:	89 e5                	mov    %esp,%ebp
	    if(get_current_task()->rpc_handler_addr == 0) {
  1044ab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1044af:	75 09                	jne    1044ba <vfs_seek+0x12>
	        get_current_task()->rpc_handler_addr = handlerAddr;
  1044b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1044b4:	8b 55 0c             	mov    0xc(%ebp),%edx
  1044b7:	89 50 08             	mov    %edx,0x8(%eax)
	    }
	}
	    break;
  1044ba:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
  1044be:	75 11                	jne    1044d1 <vfs_seek+0x29>

  1044c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1044c3:	8b 40 08             	mov    0x8(%eax),%eax
  1044c6:	89 c2                	mov    %eax,%edx
  1044c8:	03 55 0c             	add    0xc(%ebp),%edx
  1044cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1044ce:	89 50 08             	mov    %edx,0x8(%eax)
	case 33: /* fetch_rpc_data */
	{
  1044d1:	5d                   	pop    %ebp
  1044d2:	c3                   	ret    

001044d3 <vfs_exec>:
	    cpu->eax = 0;
	    void* dest = (void*) cpu->ebx;
  1044d3:	55                   	push   %ebp
  1044d4:	89 e5                	mov    %esp,%ebp
  1044d6:	53                   	push   %ebx
  1044d7:	83 ec 64             	sub    $0x64,%esp
	    if(get_current_task()->rpc != 0) {
  1044da:	83 ec 0c             	sub    $0xc,%esp
  1044dd:	ff 75 08             	pushl  0x8(%ebp)
  1044e0:	e8 37 f6 ff ff       	call   103b1c <strclone>
  1044e5:	83 c4 10             	add    $0x10,%esp
  1044e8:	89 45 08             	mov    %eax,0x8(%ebp)
	        memcpy(dest, get_current_task()->rpc->data, get_current_task()->rpc->dataSize);
  1044eb:	83 ec 0c             	sub    $0xc,%esp
  1044ee:	ff 75 08             	pushl  0x8(%ebp)
  1044f1:	e8 8c ff ff ff       	call   104482 <vfs_exists>
  1044f6:	83 c4 10             	add    $0x10,%esp
  1044f9:	85 c0                	test   %eax,%eax
  1044fb:	75 25                	jne    104522 <vfs_exec+0x4f>
	        cpu->eax = get_current_task()->rpc->dataSize;
  1044fd:	83 ec 0c             	sub    $0xc,%esp
  104500:	ff 75 08             	pushl  0x8(%ebp)
  104503:	e8 10 f4 ff ff       	call   103918 <free>
  104508:	83 c4 10             	add    $0x10,%esp
	    }
  10450b:	83 ec 0c             	sub    $0xc,%esp
  10450e:	6a 01                	push   $0x1
  104510:	e8 af f7 ff ff       	call   103cc4 <vfs_set_error>
  104515:	83 c4 10             	add    $0x10,%esp
	}
  104518:	b8 00 00 00 00       	mov    $0x0,%eax
  10451d:	e9 9e 04 00 00       	jmp    1049c0 <vfs_exec+0x4ed>
	    break;

	case 40:
	{
	    cpu->eax = register_irq_rpc(cpu->ebx);
  104522:	e8 6f 08 00 00       	call   104d96 <vmm_create_pagedir>
  104527:	89 45 a0             	mov    %eax,-0x60(%ebp)
	}
	    break;

  10452a:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
	case 50:
	{
  104531:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  104535:	74 14                	je     10454b <vfs_exec+0x78>
	    cpu->eax = require_port((uint16_t)cpu->ebx);
  104537:	eb 03                	jmp    10453c <vfs_exec+0x69>
	}
  104539:	ff 45 a4             	incl   -0x5c(%ebp)
	}
	    break;

	case 50:
	{
	    cpu->eax = require_port((uint16_t)cpu->ebx);
  10453c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10453f:	c1 e0 02             	shl    $0x2,%eax
  104542:	03 45 0c             	add    0xc(%ebp),%eax
  104545:	8b 00                	mov    (%eax),%eax
  104547:	85 c0                	test   %eax,%eax
  104549:	75 ee                	jne    104539 <vfs_exec+0x66>
	}
	    break;

	case 51:
	{
  10454b:	ff 45 a4             	incl   -0x5c(%ebp)
	    cpu->eax = port_out(cpu->ebx, (uint16_t)cpu->ecx, cpu->edx);
  10454e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  104551:	40                   	inc    %eax
  104552:	c1 e0 02             	shl    $0x2,%eax
  104555:	83 ec 0c             	sub    $0xc,%esp
  104558:	50                   	push   %eax
  104559:	e8 74 f1 ff ff       	call   1036d2 <malloc>
  10455e:	83 c4 10             	add    $0x10,%esp
  104561:	89 45 a8             	mov    %eax,-0x58(%ebp)
	}
	    break;
  104564:	83 ec 0c             	sub    $0xc,%esp
  104567:	ff 75 08             	pushl  0x8(%ebp)
  10456a:	e8 ad f5 ff ff       	call   103b1c <strclone>
  10456f:	83 c4 10             	add    $0x10,%esp
  104572:	8b 55 a8             	mov    -0x58(%ebp),%edx
  104575:	89 02                	mov    %eax,(%edx)

	case 52:
  104577:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
  10457e:	eb 59                	jmp    1045d9 <vfs_exec+0x106>
	{
  104580:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104583:	c1 e0 02             	shl    $0x2,%eax
  104586:	89 c3                	mov    %eax,%ebx
  104588:	03 5d a8             	add    -0x58(%ebp),%ebx
  10458b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10458e:	48                   	dec    %eax
  10458f:	c1 e0 02             	shl    $0x2,%eax
  104592:	03 45 0c             	add    0xc(%ebp),%eax
  104595:	8b 00                	mov    (%eax),%eax
  104597:	83 ec 0c             	sub    $0xc,%esp
  10459a:	50                   	push   %eax
  10459b:	e8 29 f5 ff ff       	call   103ac9 <strlen>
  1045a0:	83 c4 10             	add    $0x10,%esp
  1045a3:	40                   	inc    %eax
  1045a4:	83 ec 0c             	sub    $0xc,%esp
  1045a7:	50                   	push   %eax
  1045a8:	e8 25 f1 ff ff       	call   1036d2 <malloc>
  1045ad:	83 c4 10             	add    $0x10,%esp
  1045b0:	89 03                	mov    %eax,(%ebx)
	    cpu->eax = port_in(cpu->ebx, (uint16_t)cpu->ecx);
  1045b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1045b5:	48                   	dec    %eax
  1045b6:	c1 e0 02             	shl    $0x2,%eax
  1045b9:	03 45 0c             	add    0xc(%ebp),%eax
  1045bc:	8b 10                	mov    (%eax),%edx
  1045be:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1045c1:	c1 e0 02             	shl    $0x2,%eax
  1045c4:	03 45 a8             	add    -0x58(%ebp),%eax
  1045c7:	8b 00                	mov    (%eax),%eax
  1045c9:	83 ec 08             	sub    $0x8,%esp
  1045cc:	52                   	push   %edx
  1045cd:	50                   	push   %eax
  1045ce:	e8 26 f5 ff ff       	call   103af9 <strcpy>
  1045d3:	83 c4 10             	add    $0x10,%esp
	{
	    cpu->eax = port_out(cpu->ebx, (uint16_t)cpu->ecx, cpu->edx);
	}
	    break;

	case 52:
  1045d6:	ff 45 d4             	incl   -0x2c(%ebp)
  1045d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1045dc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
  1045df:	72 9f                	jb     104580 <vfs_exec+0xad>
	{
	    cpu->eax = port_in(cpu->ebx, (uint16_t)cpu->ecx);
	}
	    break;

  1045e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1045e4:	c1 e0 02             	shl    $0x2,%eax
  1045e7:	03 45 a8             	add    -0x58(%ebp),%eax
  1045ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
		break;
  1045f0:	83 ec 08             	sub    $0x8,%esp
  1045f3:	6a 05                	push   $0x5
  1045f5:	ff 75 08             	pushl  0x8(%ebp)
  1045f8:	e8 9c fc ff ff       	call   104299 <vfs_open>
  1045fd:	83 c4 10             	add    $0x10,%esp
  104600:	89 45 ac             	mov    %eax,-0x54(%ebp)

	case 202: /* kputs */
  104603:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
  104607:	75 25                	jne    10462e <vfs_exec+0x15b>
		cpu->eax = kprintf("%s", cpu->ebx);
  104609:	83 ec 0c             	sub    $0xc,%esp
  10460c:	6a 02                	push   $0x2
  10460e:	e8 b1 f6 ff ff       	call   103cc4 <vfs_set_error>
  104613:	83 c4 10             	add    $0x10,%esp
		break;
  104616:	83 ec 0c             	sub    $0xc,%esp
  104619:	ff 75 08             	pushl  0x8(%ebp)
  10461c:	e8 f7 f2 ff ff       	call   103918 <free>
  104621:	83 c4 10             	add    $0x10,%esp

  104624:	b8 00 00 00 00       	mov    $0x0,%eax
  104629:	e9 92 03 00 00       	jmp    1049c0 <vfs_exec+0x4ed>
	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
		break;
  10462e:	83 ec 0c             	sub    $0xc,%esp
  104631:	ff 75 ac             	pushl  -0x54(%ebp)
  104634:	e8 06 fe ff ff       	call   10443f <vfs_available>
  104639:	83 c4 10             	add    $0x10,%esp
  10463c:	89 45 b0             	mov    %eax,-0x50(%ebp)

  10463f:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  104643:	75 25                	jne    10466a <vfs_exec+0x197>
	case 204: /* vmm_free */
  104645:	83 ec 0c             	sub    $0xc,%esp
  104648:	6a 03                	push   $0x3
  10464a:	e8 75 f6 ff ff       	call   103cc4 <vfs_set_error>
  10464f:	83 c4 10             	add    $0x10,%esp
		cpu->eax = 0;
  104652:	83 ec 0c             	sub    $0xc,%esp
  104655:	ff 75 08             	pushl  0x8(%ebp)
  104658:	e8 bb f2 ff ff       	call   103918 <free>
  10465d:	83 c4 10             	add    $0x10,%esp
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  104660:	b8 00 00 00 00       	mov    $0x0,%eax
  104665:	e9 56 03 00 00       	jmp    1049c0 <vfs_exec+0x4ed>
			vmm_free((void*) cpu->ebx);
		}
		break;
  10466a:	83 ec 0c             	sub    $0xc,%esp
  10466d:	ff 75 b0             	pushl  -0x50(%ebp)
  104670:	e8 5d f0 ff ff       	call   1036d2 <malloc>
  104675:	83 c4 10             	add    $0x10,%esp
  104678:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	case 205: /* pmm_print_stats */
  10467b:	6a 01                	push   $0x1
  10467d:	ff 75 b0             	pushl  -0x50(%ebp)
  104680:	ff 75 b4             	pushl  -0x4c(%ebp)
  104683:	ff 75 ac             	pushl  -0x54(%ebp)
  104686:	e8 a1 fc ff ff       	call   10432c <vfs_read>
  10468b:	83 c4 10             	add    $0x10,%esp
  10468e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		pmm_print_stats();
		break;
  104691:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  104695:	74 33                	je     1046ca <vfs_exec+0x1f7>

  104697:	83 ec 0c             	sub    $0xc,%esp
  10469a:	ff 75 08             	pushl  0x8(%ebp)
  10469d:	e8 76 f2 ff ff       	call   103918 <free>
  1046a2:	83 c4 10             	add    $0x10,%esp
	default:
  1046a5:	83 ec 0c             	sub    $0xc,%esp
  1046a8:	ff 75 b4             	pushl  -0x4c(%ebp)
  1046ab:	e8 68 f2 ff ff       	call   103918 <free>
  1046b0:	83 c4 10             	add    $0x10,%esp
		kprintf("Invalid Syscall %d...", cpu->eax);
  1046b3:	83 ec 0c             	sub    $0xc,%esp
  1046b6:	6a 04                	push   $0x4
  1046b8:	e8 07 f6 ff ff       	call   103cc4 <vfs_set_error>
  1046bd:	83 c4 10             	add    $0x10,%esp
		break;
  1046c0:	b8 00 00 00 00       	mov    $0x0,%eax
  1046c5:	e9 f6 02 00 00       	jmp    1049c0 <vfs_exec+0x4ed>
	}

	return cpu;
  1046ca:	e8 bd 06 00 00       	call   104d8c <vmm_get_current_pagedir>
  1046cf:	89 45 bc             	mov    %eax,-0x44(%ebp)
}

void kernel_main(struct multiboot_info* mb_info) {
  1046d2:	83 ec 0c             	sub    $0xc,%esp
  1046d5:	ff 75 a0             	pushl  -0x60(%ebp)
  1046d8:	e8 a7 0c 00 00       	call   105384 <vmm_activate_pagedir>
  1046dd:	83 c4 10             	add    $0x10,%esp
	uint32_t kernel_init_pdir = vmm_init();

  1046e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  1046e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
	kprintf("Setting PIT interval...\n");

    outb(0x43, 0b00110100);
    outb(0x40, 0x00);
  1046e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1046e9:	8b 00                	mov    (%eax),%eax
  1046eb:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1046f0:	74 33                	je     104725 <vfs_exec+0x252>
    outb(0x40, 0x08);
  1046f2:	83 ec 0c             	sub    $0xc,%esp
  1046f5:	ff 75 b4             	pushl  -0x4c(%ebp)
  1046f8:	e8 1b f2 ff ff       	call   103918 <free>
  1046fd:	83 c4 10             	add    $0x10,%esp

  104700:	83 ec 0c             	sub    $0xc,%esp
  104703:	ff 75 08             	pushl  0x8(%ebp)
  104706:	e8 0d f2 ff ff       	call   103918 <free>
  10470b:	83 c4 10             	add    $0x10,%esp
    kprintf("Initializing vfs...\n");
  10470e:	83 ec 0c             	sub    $0xc,%esp
  104711:	6a 03                	push   $0x3
  104713:	e8 ac f5 ff ff       	call   103cc4 <vfs_set_error>
  104718:	83 c4 10             	add    $0x10,%esp

  10471b:	b8 00 00 00 00       	mov    $0x0,%eax
  104720:	e9 9b 02 00 00       	jmp    1049c0 <vfs_exec+0x4ed>
    vfs_init_root();
    ramfs_fifo_init();
    ramfs_block_init();
  104725:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104728:	8b 40 18             	mov    0x18(%eax),%eax
  10472b:	89 45 c8             	mov    %eax,-0x38(%ebp)

    //driver_keyboard_init();
  10472e:	8b 55 c0             	mov    -0x40(%ebp),%edx
  104731:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104734:	8b 40 1c             	mov    0x1c(%eax),%eax
  104737:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10473a:	89 45 c4             	mov    %eax,-0x3c(%ebp)


  10473d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  104744:	e9 88 00 00 00       	jmp    1047d1 <vfs_exec+0x2fe>
    map_address_active((uint32_t) mb_info,
  104749:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10474c:	8b 40 08             	mov    0x8(%eax),%eax
  10474f:	89 45 dc             	mov    %eax,-0x24(%ebp)
                       (uint32_t) mb_info, 0);
  104752:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104755:	8b 40 04             	mov    0x4(%eax),%eax
  104758:	03 45 c0             	add    -0x40(%ebp),%eax
  10475b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

  10475e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104761:	8b 00                	mov    (%eax),%eax
  104763:	83 f8 01             	cmp    $0x1,%eax
  104766:	75 61                	jne    1047c9 <vfs_exec+0x2f6>
    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
  104768:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  10476f:	eb 33                	jmp    1047a4 <vfs_exec+0x2d1>
                      0);
  104771:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104774:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104777:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10477a:	83 ec 0c             	sub    $0xc,%esp
  10477d:	50                   	push   %eax
  10477e:	e8 46 09 00 00       	call   1050c9 <vmm_free>
  104783:	83 c4 10             	add    $0x10,%esp

  104786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104789:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10478c:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10478f:	83 ec 08             	sub    $0x8,%esp
  104792:	6a 00                	push   $0x0
  104794:	50                   	push   %eax
  104795:	e8 45 0b 00 00       	call   1052df <vmm_alloc_addr>
  10479a:	83 c4 10             	add    $0x10,%esp
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
        vmm_map_range(mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
  10479d:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  1047a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1047a7:	8b 40 14             	mov    0x14(%eax),%eax
  1047aa:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1047ad:	77 c2                	ja     104771 <vfs_exec+0x29e>
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);

  1047af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1047b2:	8b 40 10             	mov    0x10(%eax),%eax
  1047b5:	83 ec 04             	sub    $0x4,%esp
  1047b8:	50                   	push   %eax
  1047b9:	ff 75 e0             	pushl  -0x20(%ebp)
  1047bc:	ff 75 dc             	pushl  -0x24(%ebp)
  1047bf:	e8 d6 f1 ff ff       	call   10399a <memcpy>
  1047c4:	83 c4 10             	add    $0x10,%esp
  1047c7:	eb 01                	jmp    1047ca <vfs_exec+0x2f7>
    map_address_active((uint32_t) mb_info,
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  1047c9:	90                   	nop    
    ramfs_fifo_init();
    ramfs_block_init();

    //driver_keyboard_init();


  1047ca:	ff 45 d8             	incl   -0x28(%ebp)
  1047cd:	83 45 c4 20          	addl   $0x20,-0x3c(%ebp)
  1047d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1047d4:	66 8b 40 2c          	mov    0x2c(%eax),%ax
  1047d8:	25 ff ff 00 00       	and    $0xffff,%eax
  1047dd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
  1047e0:	0f 87 63 ff ff ff    	ja     104749 <vfs_exec+0x276>
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
    } else {
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
    }
  1047e6:	83 ec 0c             	sub    $0xc,%esp
  1047e9:	6a 01                	push   $0x1
  1047eb:	e8 73 0a 00 00       	call   105263 <vmm_alloc_ucont>
  1047f0:	83 c4 10             	add    $0x10,%esp
  1047f3:	89 45 cc             	mov    %eax,-0x34(%ebp)

    kprintf("[kernel_res] Creating /dev/vga\n");
  1047f6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1047fd:	eb 57                	jmp    104856 <vfs_exec+0x383>
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  1047ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104802:	c1 e0 02             	shl    $0x2,%eax
  104805:	89 c3                	mov    %eax,%ebx
  104807:	03 5d cc             	add    -0x34(%ebp),%ebx
  10480a:	83 ec 0c             	sub    $0xc,%esp
  10480d:	6a 01                	push   $0x1
  10480f:	e8 4f 0a 00 00       	call   105263 <vmm_alloc_ucont>
  104814:	83 c4 10             	add    $0x10,%esp
  104817:	89 03                	mov    %eax,(%ebx)

  104819:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10481c:	c1 e0 02             	shl    $0x2,%eax
  10481f:	03 45 a8             	add    -0x58(%ebp),%eax
  104822:	8b 10                	mov    (%eax),%edx
  104824:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104827:	c1 e0 02             	shl    $0x2,%eax
  10482a:	03 45 cc             	add    -0x34(%ebp),%eax
  10482d:	8b 00                	mov    (%eax),%eax
  10482f:	83 ec 08             	sub    $0x8,%esp
  104832:	52                   	push   %edx
  104833:	50                   	push   %eax
  104834:	e8 c0 f2 ff ff       	call   103af9 <strcpy>
  104839:	83 c4 10             	add    $0x10,%esp
    if(vfs_exists("/ibin/init")) {
  10483c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10483f:	c1 e0 02             	shl    $0x2,%eax
  104842:	03 45 a8             	add    -0x58(%ebp),%eax
  104845:	8b 00                	mov    (%eax),%eax
  104847:	83 ec 0c             	sub    $0xc,%esp
  10484a:	50                   	push   %eax
  10484b:	e8 c8 f0 ff ff       	call   103918 <free>
  104850:	83 c4 10             	add    $0x10,%esp
        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
    } else {
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  104853:	ff 45 e8             	incl   -0x18(%ebp)
  104856:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104859:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
  10485c:	72 a1                	jb     1047ff <vfs_exec+0x32c>
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);

    if(vfs_exists("/ibin/init")) {
        kprintf("[init] /ibin/init found. Executing...\n");

        vfs_exec("/ibin/init", 0, 0, 0, 0, 0);
  10485e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  104861:	c1 e0 02             	shl    $0x2,%eax
  104864:	03 45 cc             	add    -0x34(%ebp),%eax
  104867:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        enableScheduling();
  10486d:	83 ec 0c             	sub    $0xc,%esp
  104870:	ff 75 a8             	pushl  -0x58(%ebp)
  104873:	e8 a0 f0 ff ff       	call   103918 <free>
  104878:	83 c4 10             	add    $0x10,%esp
    }

  10487b:	83 ec 08             	sub    $0x8,%esp
  10487e:	ff 75 c8             	pushl  -0x38(%ebp)
  104881:	ff 75 a0             	pushl  -0x60(%ebp)
  104884:	e8 40 e6 ff ff       	call   102ec9 <init_task>
  104889:	83 c4 10             	add    $0x10,%esp
  10488c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	while(1);
  10488f:	e8 39 e3 ff ff       	call   102bcd <get_current_task>
  104894:	85 c0                	test   %eax,%eax
  104896:	74 38                	je     1048d0 <vfs_exec+0x3fd>
    //*********************************************************************** KERNEL END
  104898:	e8 30 e3 ff ff       	call   102bcd <get_current_task>
  10489d:	8b 50 38             	mov    0x38(%eax),%edx
  1048a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048a3:	89 50 38             	mov    %edx,0x38(%eax)
}
  1048a6:	e8 22 e3 ff ff       	call   102bcd <get_current_task>
  1048ab:	8b 50 30             	mov    0x30(%eax),%edx
  1048ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048b1:	89 50 30             	mov    %edx,0x30(%eax)
  1048b4:	e8 14 e3 ff ff       	call   102bcd <get_current_task>
  1048b9:	8b 50 34             	mov    0x34(%eax),%edx
  1048bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048bf:	89 50 34             	mov    %edx,0x34(%eax)
  1048c2:	e8 06 e3 ff ff       	call   102bcd <get_current_task>
  1048c7:	8b 50 28             	mov    0x28(%eax),%edx
  1048ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048cd:	89 50 28             	mov    %edx,0x28(%eax)
  1048d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1048d4:	74 09                	je     1048df <vfs_exec+0x40c>
  1048d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1048d9:	8b 55 10             	mov    0x10(%ebp),%edx
  1048dc:	89 50 28             	mov    %edx,0x28(%eax)
  1048df:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  1048e3:	74 34                	je     104919 <vfs_exec+0x446>
  1048e5:	83 ec 0c             	sub    $0xc,%esp
  1048e8:	ff 75 14             	pushl  0x14(%ebp)
  1048eb:	e8 92 fb ff ff       	call   104482 <vfs_exists>
  1048f0:	83 c4 10             	add    $0x10,%esp
  1048f3:	85 c0                	test   %eax,%eax
  1048f5:	74 22                	je     104919 <vfs_exec+0x446>
  1048f7:	83 ec 08             	sub    $0x8,%esp
  1048fa:	6a 01                	push   $0x1
  1048fc:	ff 75 14             	pushl  0x14(%ebp)
  1048ff:	e8 95 f9 ff ff       	call   104299 <vfs_open>
  104904:	83 c4 10             	add    $0x10,%esp
  104907:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10490a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  10490e:	74 09                	je     104919 <vfs_exec+0x446>
  104910:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104913:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104916:	89 50 38             	mov    %edx,0x38(%eax)
  104919:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  10491d:	74 34                	je     104953 <vfs_exec+0x480>
  10491f:	83 ec 0c             	sub    $0xc,%esp
  104922:	ff 75 18             	pushl  0x18(%ebp)
  104925:	e8 58 fb ff ff       	call   104482 <vfs_exists>
  10492a:	83 c4 10             	add    $0x10,%esp
  10492d:	85 c0                	test   %eax,%eax
  10492f:	74 22                	je     104953 <vfs_exec+0x480>
  104931:	83 ec 08             	sub    $0x8,%esp
  104934:	6a 01                	push   $0x1
  104936:	ff 75 18             	pushl  0x18(%ebp)
  104939:	e8 5b f9 ff ff       	call   104299 <vfs_open>
  10493e:	83 c4 10             	add    $0x10,%esp
  104941:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104944:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  104948:	74 09                	je     104953 <vfs_exec+0x480>
  10494a:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10494d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104950:	89 50 30             	mov    %edx,0x30(%eax)
  104953:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  104957:	74 34                	je     10498d <vfs_exec+0x4ba>
  104959:	83 ec 0c             	sub    $0xc,%esp
  10495c:	ff 75 1c             	pushl  0x1c(%ebp)
  10495f:	e8 1e fb ff ff       	call   104482 <vfs_exists>
  104964:	83 c4 10             	add    $0x10,%esp
  104967:	85 c0                	test   %eax,%eax
  104969:	74 22                	je     10498d <vfs_exec+0x4ba>
  10496b:	83 ec 08             	sub    $0x8,%esp
  10496e:	6a 01                	push   $0x1
  104970:	ff 75 1c             	pushl  0x1c(%ebp)
  104973:	e8 21 f9 ff ff       	call   104299 <vfs_open>
  104978:	83 c4 10             	add    $0x10,%esp
  10497b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10497e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104982:	74 09                	je     10498d <vfs_exec+0x4ba>
  104984:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104987:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10498a:	89 50 34             	mov    %edx,0x34(%eax)
  10498d:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104990:	8b 55 cc             	mov    -0x34(%ebp),%edx
  104993:	89 50 20             	mov    %edx,0x20(%eax)
  104996:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104999:	8b 55 08             	mov    0x8(%ebp),%edx
  10499c:	89 50 24             	mov    %edx,0x24(%eax)
  10499f:	83 ec 0c             	sub    $0xc,%esp
  1049a2:	ff 75 bc             	pushl  -0x44(%ebp)
  1049a5:	e8 da 09 00 00       	call   105384 <vmm_activate_pagedir>
  1049aa:	83 c4 10             	add    $0x10,%esp
  1049ad:	83 ec 0c             	sub    $0xc,%esp
  1049b0:	ff 75 b4             	pushl  -0x4c(%ebp)
  1049b3:	e8 60 ef ff ff       	call   103918 <free>
  1049b8:	83 c4 10             	add    $0x10,%esp
  1049bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1049be:	8b 00                	mov    (%eax),%eax
  1049c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1049c3:	c9                   	leave  
  1049c4:	c3                   	ret    

001049c5 <vfs_resolve_path>:
  1049c5:	55                   	push   %ebp
  1049c6:	89 e5                	mov    %esp,%ebp
  1049c8:	83 ec 18             	sub    $0x18,%esp
  1049cb:	83 ec 0c             	sub    $0xc,%esp
  1049ce:	ff 75 08             	pushl  0x8(%ebp)
  1049d1:	e8 4b f6 ff ff       	call   104021 <vfs_get_node>
  1049d6:	83 c4 10             	add    $0x10,%esp
  1049d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1049dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1049e0:	75 07                	jne    1049e9 <vfs_resolve_path+0x24>
  1049e2:	b8 00 00 00 00       	mov    $0x0,%eax
  1049e7:	eb 0e                	jmp    1049f7 <vfs_resolve_path+0x32>
  1049e9:	83 ec 0c             	sub    $0xc,%esp
  1049ec:	ff 75 f4             	pushl  -0xc(%ebp)
  1049ef:	e8 15 f3 ff ff       	call   103d09 <vfs_construct_absolute_path_for_node>
  1049f4:	83 c4 10             	add    $0x10,%esp
  1049f7:	c9                   	leave  
  1049f8:	c3                   	ret    

001049f9 <vfs_init_root>:
  1049f9:	55                   	push   %ebp
  1049fa:	89 e5                	mov    %esp,%ebp
  1049fc:	83 ec 08             	sub    $0x8,%esp
  1049ff:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a04:	85 c0                	test   %eax,%eax
  104a06:	75 69                	jne    104a71 <vfs_init_root+0x78>
  104a08:	83 ec 0c             	sub    $0xc,%esp
  104a0b:	68 10 01 00 00       	push   $0x110
  104a10:	e8 bd ec ff ff       	call   1036d2 <malloc>
  104a15:	83 c4 10             	add    $0x10,%esp
  104a18:	a3 4c 85 12 00       	mov    %eax,0x12854c
  104a1d:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a22:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  104a29:	00 00 00 
  104a2c:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a31:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  104a38:	00 00 00 
  104a3b:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a40:	83 ec 04             	sub    $0x4,%esp
  104a43:	6a 02                	push   $0x2
  104a45:	68 ca 78 10 00       	push   $0x1078ca
  104a4a:	50                   	push   %eax
  104a4b:	e8 4a ef ff ff       	call   10399a <memcpy>
  104a50:	83 c4 10             	add    $0x10,%esp
  104a53:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a58:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
  104a5f:	00 00 00 
  104a62:	a1 4c 85 12 00       	mov    0x12854c,%eax
  104a67:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  104a6e:	00 00 00 
  104a71:	c9                   	leave  
  104a72:	c3                   	ret    

00104a73 <vfs_debug_ls>:
  104a73:	55                   	push   %ebp
  104a74:	89 e5                	mov    %esp,%ebp
  104a76:	83 ec 18             	sub    $0x18,%esp
  104a79:	83 ec 0c             	sub    $0xc,%esp
  104a7c:	ff 75 08             	pushl  0x8(%ebp)
  104a7f:	e8 9d f5 ff ff       	call   104021 <vfs_get_node>
  104a84:	83 c4 10             	add    $0x10,%esp
  104a87:	a3 58 85 12 00       	mov    %eax,0x128558
  104a8c:	a1 58 85 12 00       	mov    0x128558,%eax
  104a91:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104a97:	a3 58 85 12 00       	mov    %eax,0x128558
  104a9c:	eb 6a                	jmp    104b08 <vfs_debug_ls+0x95>
  104a9e:	c7 45 f4 cc 78 10 00 	movl   $0x1078cc,-0xc(%ebp)
  104aa5:	a1 58 85 12 00       	mov    0x128558,%eax
  104aaa:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  104ab0:	85 c0                	test   %eax,%eax
  104ab2:	75 07                	jne    104abb <vfs_debug_ls+0x48>
  104ab4:	c7 45 f4 d0 78 10 00 	movl   $0x1078d0,-0xc(%ebp)
  104abb:	a1 58 85 12 00       	mov    0x128558,%eax
  104ac0:	8b 80 00 01 00 00    	mov    0x100(%eax),%eax
  104ac6:	83 f8 01             	cmp    $0x1,%eax
  104ac9:	75 14                	jne    104adf <vfs_debug_ls+0x6c>
  104acb:	a1 58 85 12 00       	mov    0x128558,%eax
  104ad0:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104ad6:	8b 40 04             	mov    0x4(%eax),%eax
  104ad9:	8b 40 18             	mov    0x18(%eax),%eax
  104adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104adf:	a1 58 85 12 00       	mov    0x128558,%eax
  104ae4:	ff 75 f4             	pushl  -0xc(%ebp)
  104ae7:	50                   	push   %eax
  104ae8:	ff 75 08             	pushl  0x8(%ebp)
  104aeb:	68 d4 78 10 00       	push   $0x1078d4
  104af0:	e8 78 ba ff ff       	call   10056d <kprintf>
  104af5:	83 c4 10             	add    $0x10,%esp
  104af8:	a1 58 85 12 00       	mov    0x128558,%eax
  104afd:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  104b03:	a3 58 85 12 00       	mov    %eax,0x128558
  104b08:	a1 58 85 12 00       	mov    0x128558,%eax
  104b0d:	85 c0                	test   %eax,%eax
  104b0f:	75 8d                	jne    104a9e <vfs_debug_ls+0x2b>
  104b11:	c9                   	leave  
  104b12:	c3                   	ret    
	...

00104b14 <vmm_create_vpdraw>:
struct exec_info {
    char* execPath;
    char* stdin;
    char* stdout;
    char* stderr;
};
  104b14:	55                   	push   %ebp
  104b15:	89 e5                	mov    %esp,%ebp
  104b17:	53                   	push   %ebx
  104b18:	83 ec 34             	sub    $0x34,%esp

  104b1b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
struct cpu_state* syscall(struct cpu_state* cpu) {
  104b22:	83 ec 0c             	sub    $0xc,%esp
  104b25:	8d 45 dc             	lea    -0x24(%ebp),%eax
  104b28:	50                   	push   %eax
  104b29:	e8 92 07 00 00       	call   1052c0 <vmm_alloc>
  104b2e:	83 c4 10             	add    $0x10,%esp
  104b31:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cpu = save_cpu_state(cpu);

  104b34:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	switch (cpu->eax) {
  104b3b:	83 ec 0c             	sub    $0xc,%esp
  104b3e:	8d 45 d8             	lea    -0x28(%ebp),%eax
  104b41:	50                   	push   %eax
  104b42:	e8 79 07 00 00       	call   1052c0 <vmm_alloc>
  104b47:	83 c4 10             	add    $0x10,%esp
  104b4a:	89 c2                	mov    %eax,%edx
  104b4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104b4f:	89 10                	mov    %edx,(%eax)
	case 1: /* exit */
  104b51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  104b55:	74 08                	je     104b5f <vmm_create_vpdraw+0x4b>
		return terminate_current(cpu);
  104b57:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104b5a:	8b 45 08             	mov    0x8(%ebp),%eax
  104b5d:	89 10                	mov    %edx,(%eax)

	case 2: /* pexists */
  104b5f:	83 ec 0c             	sub    $0xc,%esp
  104b62:	6a 00                	push   $0x0
  104b64:	e8 57 07 00 00       	call   1052c0 <vmm_alloc>
  104b69:	83 c4 10             	add    $0x10,%esp
  104b6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
  104b6f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  104b76:	e9 f9 00 00 00       	jmp    104c74 <vmm_create_vpdraw+0x160>
	    break;
  104b7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104b7e:	c1 e0 02             	shl    $0x2,%eax
  104b81:	89 c3                	mov    %eax,%ebx
  104b83:	03 5d e4             	add    -0x1c(%ebp),%ebx
  104b86:	83 ec 0c             	sub    $0xc,%esp
  104b89:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  104b8c:	50                   	push   %eax
  104b8d:	e8 2e 07 00 00       	call   1052c0 <vmm_alloc>
  104b92:	83 c4 10             	add    $0x10,%esp
  104b95:	89 03                	mov    %eax,(%ebx)

    case 3: /* exec */
  104b97:	83 7d e8 7f          	cmpl   $0x7f,-0x18(%ebp)
  104b9b:	77 48                	ja     104be5 <vmm_create_vpdraw+0xd1>
    {
  104b9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104ba0:	c1 e0 02             	shl    $0x2,%eax
  104ba3:	03 45 e4             	add    -0x1c(%ebp),%eax
  104ba6:	8b 00                	mov    (%eax),%eax
  104ba8:	83 ec 0c             	sub    $0xc,%esp
  104bab:	50                   	push   %eax
  104bac:	e8 18 05 00 00       	call   1050c9 <vmm_free>
  104bb1:	83 c4 10             	add    $0x10,%esp
        char* path = strclone((char*) cpu->ebx);
  104bb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104bb7:	8b 14 85 e0 87 1c 00 	mov    0x1c87e0(,%eax,4),%edx
  104bbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104bc1:	c1 e0 02             	shl    $0x2,%eax
  104bc4:	03 45 e4             	add    -0x1c(%ebp),%eax
  104bc7:	8b 00                	mov    (%eax),%eax
  104bc9:	83 ec 04             	sub    $0x4,%esp
  104bcc:	6a 00                	push   $0x0
  104bce:	52                   	push   %edx
  104bcf:	50                   	push   %eax
  104bd0:	e8 9f 04 00 00       	call   105074 <map_address_active>
  104bd5:	83 c4 10             	add    $0x10,%esp

  104bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104bdb:	8b 04 85 e0 87 1c 00 	mov    0x1c87e0(,%eax,4),%eax
  104be2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
  104be5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104be8:	8b 00                	mov    (%eax),%eax
  104bea:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104bed:	c1 e2 02             	shl    $0x2,%edx
  104bf0:	01 d0                	add    %edx,%eax
  104bf2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  104bf5:	83 ca 07             	or     $0x7,%edx
  104bf8:	89 10                	mov    %edx,(%eax)
            .execPath = 0,
            .stdin = 0,
  104bfa:	83 7d e8 7f          	cmpl   $0x7f,-0x18(%ebp)
  104bfe:	76 71                	jbe    104c71 <vmm_create_vpdraw+0x15d>
            .stdout = 0,
  104c00:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  104c07:	eb 5f                	jmp    104c68 <vmm_create_vpdraw+0x154>
            .stderr = 0
  104c09:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104c0c:	89 c2                	mov    %eax,%edx
  104c0e:	c1 e2 16             	shl    $0x16,%edx
  104c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104c14:	c1 e0 0c             	shl    $0xc,%eax
  104c17:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104c1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        };

  104c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104c20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104c27:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104c2a:	c1 e0 02             	shl    $0x2,%eax
  104c2d:	03 45 e4             	add    -0x1c(%ebp),%eax
  104c30:	8b 00                	mov    (%eax),%eax
  104c32:	8d 04 02             	lea    (%edx,%eax,1),%eax
  104c35:	89 c1                	mov    %eax,%ecx
  104c37:	81 7d f4 00 10 40 01 	cmpl   $0x1401000,-0xc(%ebp)
  104c3e:	76 07                	jbe    104c47 <vmm_create_vpdraw+0x133>
  104c40:	ba 00 02 00 00       	mov    $0x200,%edx
  104c45:	eb 05                	jmp    104c4c <vmm_create_vpdraw+0x138>
  104c47:	ba 00 00 00 00       	mov    $0x0,%edx
  104c4c:	81 7d f4 00 10 40 01 	cmpl   $0x1401000,-0xc(%ebp)
  104c53:	76 07                	jbe    104c5c <vmm_create_vpdraw+0x148>
  104c55:	b8 04 00 00 00       	mov    $0x4,%eax
  104c5a:	eb 05                	jmp    104c61 <vmm_create_vpdraw+0x14d>
  104c5c:	b8 00 00 00 00       	mov    $0x0,%eax
  104c61:	09 d0                	or     %edx,%eax
  104c63:	89 01                	mov    %eax,(%ecx)
        struct exec_info* einp = (void*) cpu->edx;

        struct exec_info ein = {
            .execPath = 0,
            .stdin = 0,
            .stdout = 0,
  104c65:	ff 45 ec             	incl   -0x14(%ebp)
  104c68:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
  104c6f:	76 98                	jbe    104c09 <vmm_create_vpdraw+0xf5>
		return terminate_current(cpu);

	case 2: /* pexists */
	{
	    cpu->eax = (uint32_t)get_task_by_pid((int)cpu->ebx);
	}
  104c71:	ff 45 e8             	incl   -0x18(%ebp)
  104c74:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  104c7b:	0f 86 fa fe ff ff    	jbe    104b7b <vmm_create_vpdraw+0x67>
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
        }

  104c81:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  104c88:	eb 3d                	jmp    104cc7 <vmm_create_vpdraw+0x1b3>
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  104c8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104c8d:	8b 00                	mov    (%eax),%eax
  104c8f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104c92:	c1 e2 02             	shl    $0x2,%edx
  104c95:	01 d0                	add    %edx,%eax
  104c97:	8b 00                	mov    (%eax),%eax
  104c99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104c9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

  104ca1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
        if(einp != 0) {
  104ca4:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104ca7:	89 d1                	mov    %edx,%ecx
  104ca9:	c1 e1 0c             	shl    $0xc,%ecx
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

  104cac:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  104cb2:	8d 14 11             	lea    (%ecx,%edx,1),%edx
  104cb5:	6a 00                	push   $0x0
  104cb7:	50                   	push   %eax
  104cb8:	52                   	push   %edx
  104cb9:	ff 75 e4             	pushl  -0x1c(%ebp)
  104cbc:	e8 2f 03 00 00       	call   104ff0 <map_address_context>
  104cc1:	83 c4 10             	add    $0x10,%esp
            ein.execPath = strclone(einp->execPath);
            ein.stdin = strclone(einp->stdin);
            ein.stdout = strclone(einp->stdout);
            ein.stderr = strclone(einp->stderr);
        }

  104cc4:	ff 45 e8             	incl   -0x18(%ebp)
  104cc7:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  104cce:	76 ba                	jbe    104c8a <vmm_create_vpdraw+0x176>
        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);

        if(einp != 0) {
            free(ein.execPath);
            free(ein.stdin);
            free(ein.stdout);
  104cd0:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104cd3:	a1 00 61 10 00       	mov    0x106100,%eax
  104cd8:	6a 00                	push   $0x0
  104cda:	52                   	push   %edx
  104cdb:	50                   	push   %eax
  104cdc:	ff 75 e4             	pushl  -0x1c(%ebp)
  104cdf:	e8 0c 03 00 00       	call   104ff0 <map_address_context>
  104ce4:	83 c4 10             	add    $0x10,%esp
            free(ein.stderr);
        }

  104ce7:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
  104cee:	eb 1a                	jmp    104d0a <vmm_create_vpdraw+0x1f6>
        free(path);
  104cf0:	6a 00                	push   $0x0
  104cf2:	ff 75 e8             	pushl  -0x18(%ebp)
  104cf5:	ff 75 e8             	pushl  -0x18(%ebp)
  104cf8:	ff 75 e4             	pushl  -0x1c(%ebp)
  104cfb:	e8 f0 02 00 00       	call   104ff0 <map_address_context>
  104d00:	83 c4 10             	add    $0x10,%esp
            free(ein.execPath);
            free(ein.stdin);
            free(ein.stdout);
            free(ein.stderr);
        }

  104d03:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
  104d0a:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  104d0f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
  104d12:	72 dc                	jb     104cf0 <vmm_create_vpdraw+0x1dc>
        free(path);
    }
        break;

  104d14:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104d17:	8b 00                	mov    (%eax),%eax
  104d19:	89 45 f0             	mov    %eax,-0x10(%ebp)
    case 4: /* getargs */
  104d1c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104d1f:	89 c2                	mov    %eax,%edx
  104d21:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104d24:	89 10                	mov    %edx,(%eax)
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  104d26:	83 ec 0c             	sub    $0xc,%esp
  104d29:	ff 75 f0             	pushl  -0x10(%ebp)
  104d2c:	e8 18 04 00 00       	call   105149 <vmm_unmap>
  104d31:	83 c4 10             	add    $0x10,%esp
    }
  104d34:	83 ec 0c             	sub    $0xc,%esp
  104d37:	ff 75 e0             	pushl  -0x20(%ebp)
  104d3a:	e8 0a 04 00 00       	call   105149 <vmm_unmap>
  104d3f:	83 c4 10             	add    $0x10,%esp
        break;

  104d42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    case 5: /* yield */
  104d45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104d48:	c9                   	leave  
  104d49:	c3                   	ret    

00104d4a <vmm_free_pdptr>:
    {
        cpu = schedule(cpu);
  104d4a:	55                   	push   %ebp
  104d4b:	89 e5                	mov    %esp,%ebp
  104d4d:	83 ec 18             	sub    $0x18,%esp
    }
  104d50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104d57:	eb 1a                	jmp    104d73 <vmm_free_pdptr+0x29>
        break;
  104d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d5c:	c1 e0 02             	shl    $0x2,%eax
  104d5f:	03 45 08             	add    0x8(%ebp),%eax
  104d62:	8b 00                	mov    (%eax),%eax
  104d64:	83 ec 0c             	sub    $0xc,%esp
  104d67:	50                   	push   %eax
  104d68:	e8 dc 03 00 00       	call   105149 <vmm_unmap>
  104d6d:	83 c4 10             	add    $0x10,%esp
        break;

    case 5: /* yield */
    {
        cpu = schedule(cpu);
    }
  104d70:	ff 45 f4             	incl   -0xc(%ebp)
  104d73:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104d7a:	76 dd                	jbe    104d59 <vmm_free_pdptr+0xf>
        break;

    case 6: /* getExecPath */
    {
  104d7c:	83 ec 0c             	sub    $0xc,%esp
  104d7f:	ff 75 08             	pushl  0x8(%ebp)
  104d82:	e8 c2 03 00 00       	call   105149 <vmm_unmap>
  104d87:	83 c4 10             	add    $0x10,%esp
        char* dest = (char*)cpu->ebx;
  104d8a:	c9                   	leave  
  104d8b:	c3                   	ret    

00104d8c <vmm_get_current_pagedir>:
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
    }
  104d8c:	55                   	push   %ebp
  104d8d:	89 e5                	mov    %esp,%ebp
        break;
  104d8f:	a1 64 85 12 00       	mov    0x128564,%eax

  104d94:	5d                   	pop    %ebp
  104d95:	c3                   	ret    

00104d96 <vmm_create_pagedir>:
    case 7: /* changeExecPath */
    {
  104d96:	55                   	push   %ebp
  104d97:	89 e5                	mov    %esp,%ebp
  104d99:	83 ec 18             	sub    $0x18,%esp
        vfs_reset_error();
        char* path = strclone((char*) cpu->ebx);
  104d9c:	83 ec 0c             	sub    $0xc,%esp
  104d9f:	8d 45 f0             	lea    -0x10(%ebp),%eax
  104da2:	50                   	push   %eax
  104da3:	e8 6c fd ff ff       	call   104b14 <vmm_create_vpdraw>
  104da8:	83 c4 10             	add    $0x10,%esp
  104dab:	89 45 f4             	mov    %eax,-0xc(%ebp)

  104dae:	83 ec 0c             	sub    $0xc,%esp
  104db1:	ff 75 f4             	pushl  -0xc(%ebp)
  104db4:	e8 91 ff ff ff       	call   104d4a <vmm_free_pdptr>
  104db9:	83 c4 10             	add    $0x10,%esp
        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);

  104dbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
        char* new = vfs_resolve_path(path);
  104dbf:	c9                   	leave  
  104dc0:	c3                   	ret    

00104dc1 <vmm_free_current_pagetables>:

        cpu->eax = 0;
  104dc1:	55                   	push   %ebp
  104dc2:	89 e5                	mov    %esp,%ebp
  104dc4:	83 ec 18             	sub    $0x18,%esp
        if(new) {
  104dc7:	83 ec 0c             	sub    $0xc,%esp
  104dca:	6a 00                	push   $0x0
  104dcc:	e8 ef 04 00 00       	call   1052c0 <vmm_alloc>
  104dd1:	83 c4 10             	add    $0x10,%esp
  104dd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            get_current_task()->execPath = new;
  104dd7:	83 ec 0c             	sub    $0xc,%esp
  104dda:	6a 00                	push   $0x0
  104ddc:	e8 df 04 00 00       	call   1052c0 <vmm_alloc>
  104de1:	83 c4 10             	add    $0x10,%esp
  104de4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            cpu->eax = 1;
  104de7:	83 ec 0c             	sub    $0xc,%esp
  104dea:	ff 75 e8             	pushl  -0x18(%ebp)
  104ded:	e8 d7 02 00 00       	call   1050c9 <vmm_free>
  104df2:	83 c4 10             	add    $0x10,%esp
        }
  104df5:	83 ec 0c             	sub    $0xc,%esp
  104df8:	ff 75 ec             	pushl  -0x14(%ebp)
  104dfb:	e8 c9 02 00 00       	call   1050c9 <vmm_free>
  104e00:	83 c4 10             	add    $0x10,%esp

        free(path);
  104e03:	e8 c5 dd ff ff       	call   102bcd <get_current_task>
  104e08:	8b 50 14             	mov    0x14(%eax),%edx
  104e0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104e0e:	83 ec 04             	sub    $0x4,%esp
  104e11:	6a 00                	push   $0x0
  104e13:	52                   	push   %edx
  104e14:	50                   	push   %eax
  104e15:	e8 5a 02 00 00       	call   105074 <map_address_active>
  104e1a:	83 c4 10             	add    $0x10,%esp
    }
        break;
  104e1d:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
  104e24:	e9 99 00 00 00       	jmp    104ec2 <vmm_free_current_pagetables+0x101>

  104e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e2c:	c1 e0 02             	shl    $0x2,%eax
  104e2f:	03 45 e8             	add    -0x18(%ebp),%eax
  104e32:	8b 00                	mov    (%eax),%eax
  104e34:	89 c2                	mov    %eax,%edx
  104e36:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  104e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e3f:	83 ec 04             	sub    $0x4,%esp
  104e42:	6a 00                	push   $0x0
  104e44:	52                   	push   %edx
  104e45:	50                   	push   %eax
  104e46:	e8 29 02 00 00       	call   105074 <map_address_active>
  104e4b:	83 c4 10             	add    $0x10,%esp
	case 10: /* fopen */
	{
  104e4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104e55:	eb 31                	jmp    104e88 <vmm_free_current_pagetables+0xc7>
        vfs_reset_error();
  104e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e5a:	c1 e0 02             	shl    $0x2,%eax
  104e5d:	03 45 ec             	add    -0x14(%ebp),%eax
  104e60:	8b 00                	mov    (%eax),%eax
  104e62:	83 e0 01             	and    $0x1,%eax
  104e65:	84 c0                	test   %al,%al
  104e67:	74 1c                	je     104e85 <vmm_free_current_pagetables+0xc4>
	    char* name = strclone((char*) cpu->ebx);
	    uint32_t fmode = (uint32_t) cpu->ecx;

	    struct res_handle* handle = vfs_open(name, fmode);
  104e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e6c:	c1 e0 02             	shl    $0x2,%eax
  104e6f:	03 45 ec             	add    -0x14(%ebp),%eax
  104e72:	8b 00                	mov    (%eax),%eax
  104e74:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  104e79:	83 ec 0c             	sub    $0xc,%esp
  104e7c:	50                   	push   %eax
  104e7d:	e8 bc cd ff ff       	call   101c3e <pmm_free>
  104e82:	83 c4 10             	add    $0x10,%esp
        free(path);
    }
        break;

	case 10: /* fopen */
	{
  104e85:	ff 45 f4             	incl   -0xc(%ebp)
  104e88:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  104e8f:	76 c6                	jbe    104e57 <vmm_free_current_pagetables+0x96>

	    struct res_handle* handle = vfs_open(name, fmode);
	    if(handle) {
	        register_handle(handle);
	        cpu->eax = (uint32_t) handle;
	    }
  104e91:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e94:	c1 e0 02             	shl    $0x2,%eax
  104e97:	03 45 e8             	add    -0x18(%ebp),%eax
  104e9a:	8b 00                	mov    (%eax),%eax
  104e9c:	83 e0 01             	and    $0x1,%eax
  104e9f:	84 c0                	test   %al,%al
  104ea1:	74 1c                	je     104ebf <vmm_free_current_pagetables+0xfe>
	    else
  104ea3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ea6:	c1 e0 02             	shl    $0x2,%eax
  104ea9:	03 45 e8             	add    -0x18(%ebp),%eax
  104eac:	8b 00                	mov    (%eax),%eax
  104eae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104eb3:	83 ec 0c             	sub    $0xc,%esp
  104eb6:	50                   	push   %eax
  104eb7:	e8 82 cd ff ff       	call   101c3e <pmm_free>
  104ebc:	83 c4 10             	add    $0x10,%esp
            cpu->eax = 1;
        }

        free(path);
    }
        break;
  104ebf:	ff 45 f0             	incl   -0x10(%ebp)
  104ec2:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  104ec9:	0f 86 5a ff ff ff    	jbe    104e29 <vmm_free_current_pagetables+0x68>
	        cpu->eax = (uint32_t) handle;
	    }
	    else
	    {
	        cpu->eax = 0;
	    }
  104ecf:	e8 f9 dc ff ff       	call   102bcd <get_current_task>
  104ed4:	8b 40 14             	mov    0x14(%eax),%eax
  104ed7:	83 ec 0c             	sub    $0xc,%esp
  104eda:	50                   	push   %eax
  104edb:	e8 5e cd ff ff       	call   101c3e <pmm_free>
  104ee0:	83 c4 10             	add    $0x10,%esp

  104ee3:	c9                   	leave  
  104ee4:	c3                   	ret    

00104ee5 <vmm_resolve>:
	    free(name);
	}
  104ee5:	55                   	push   %ebp
  104ee6:	89 e5                	mov    %esp,%ebp
	    break;
  104ee8:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  104eed:	8b 55 08             	mov    0x8(%ebp),%edx
  104ef0:	c1 ea 0c             	shr    $0xc,%edx
  104ef3:	c1 e2 02             	shl    $0x2,%edx
  104ef6:	01 d0                	add    %edx,%eax
  104ef8:	8b 00                	mov    (%eax),%eax
  104efa:	25 00 f0 ff ff       	and    $0xfffff000,%eax

  104eff:	5d                   	pop    %ebp
  104f00:	c3                   	ret    

00104f01 <vmm_resolve_ppd>:
	case 11: /* fclose */
	{
  104f01:	55                   	push   %ebp
  104f02:	89 e5                	mov    %esp,%ebp
  104f04:	83 ec 28             	sub    $0x28,%esp
        vfs_reset_error();
  104f07:	8b 45 0c             	mov    0xc(%ebp),%eax
  104f0a:	c1 e8 16             	shr    $0x16,%eax
  104f0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    struct res_handle* handle = (void*) cpu->ebx;
  104f10:	8b 45 0c             	mov    0xc(%ebp),%eax
  104f13:	c1 e8 0c             	shr    $0xc,%eax
  104f16:	25 ff 03 00 00       	and    $0x3ff,%eax
  104f1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	    if(!unregister_handle(handle)) {
	        vfs_close(handle);
  104f1e:	83 ec 0c             	sub    $0xc,%esp
  104f21:	6a 00                	push   $0x0
  104f23:	e8 98 03 00 00       	call   1052c0 <vmm_alloc>
  104f28:	83 c4 10             	add    $0x10,%esp
  104f2b:	89 45 ec             	mov    %eax,-0x14(%ebp)

  104f2e:	83 ec 0c             	sub    $0xc,%esp
  104f31:	ff 75 ec             	pushl  -0x14(%ebp)
  104f34:	e8 90 01 00 00       	call   1050c9 <vmm_free>
  104f39:	83 c4 10             	add    $0x10,%esp
	        cpu->eax = 0;
	    }
  104f3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f3f:	83 ec 04             	sub    $0x4,%esp
  104f42:	6a 00                	push   $0x0
  104f44:	ff 75 08             	pushl  0x8(%ebp)
  104f47:	50                   	push   %eax
  104f48:	e8 27 01 00 00       	call   105074 <map_address_active>
  104f4d:	83 c4 10             	add    $0x10,%esp
	    else
  104f50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104f53:	c1 e0 02             	shl    $0x2,%eax
  104f56:	03 45 ec             	add    -0x14(%ebp),%eax
  104f59:	8b 00                	mov    (%eax),%eax
  104f5b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104f60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    {
	        cpu->eax = (uint32_t) -1;
  104f63:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f66:	83 ec 04             	sub    $0x4,%esp
  104f69:	6a 00                	push   $0x0
  104f6b:	ff 75 f0             	pushl  -0x10(%ebp)
  104f6e:	50                   	push   %eax
  104f6f:	e8 00 01 00 00       	call   105074 <map_address_active>
  104f74:	83 c4 10             	add    $0x10,%esp
	    }
  104f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104f7a:	c1 e0 02             	shl    $0x2,%eax
  104f7d:	03 45 ec             	add    -0x14(%ebp),%eax
  104f80:	8b 00                	mov    (%eax),%eax
  104f82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	    break;
  104f8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax

  104f92:	c9                   	leave  
  104f93:	c3                   	ret    

00104f94 <vmm_map_range>:
	case 12: /* fwrite */
	{
  104f94:	55                   	push   %ebp
  104f95:	89 e5                	mov    %esp,%ebp
  104f97:	83 ec 18             	sub    $0x18,%esp
        vfs_reset_error();
  104f9a:	8b 45 08             	mov    0x8(%ebp),%eax
  104f9d:	25 ff 0f 00 00       	and    $0xfff,%eax
  104fa2:	85 c0                	test   %eax,%eax
  104fa4:	75 44                	jne    104fea <vmm_map_range+0x56>
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(handle != 0) {
  104fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  104fa9:	25 ff 0f 00 00       	and    $0xfff,%eax
  104fae:	85 c0                	test   %eax,%eax
  104fb0:	75 3b                	jne    104fed <vmm_map_range+0x59>
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
	    }
	    else
  104fb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104fb9:	eb 25                	jmp    104fe0 <vmm_map_range+0x4c>
	    {
  104fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
  104fbe:	89 c2                	mov    %eax,%edx
  104fc0:	03 55 f4             	add    -0xc(%ebp),%edx
  104fc3:	8b 45 08             	mov    0x8(%ebp),%eax
  104fc6:	03 45 f4             	add    -0xc(%ebp),%eax
  104fc9:	83 ec 04             	sub    $0x4,%esp
  104fcc:	ff 75 14             	pushl  0x14(%ebp)
  104fcf:	52                   	push   %edx
  104fd0:	50                   	push   %eax
  104fd1:	e8 9e 00 00 00       	call   105074 <map_address_active>
  104fd6:	83 c4 10             	add    $0x10,%esp
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
	    if(handle != 0) {
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
	    }
	    else
  104fd9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fe3:	3b 45 10             	cmp    0x10(%ebp),%eax
  104fe6:	72 d3                	jb     104fbb <vmm_map_range+0x27>
  104fe8:	eb 04                	jmp    104fee <vmm_map_range+0x5a>
	    break;

	case 12: /* fwrite */
	{
        vfs_reset_error();
	    struct res_handle* handle = (void*) cpu->ebx;
  104fea:	90                   	nop    
  104feb:	eb 01                	jmp    104fee <vmm_map_range+0x5a>
	    if(handle != 0) {
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  104fed:	90                   	nop    
	    }
	    else
	    {
            cpu->eax = RW_ERR_VFS;
	    }
  104fee:	c9                   	leave  
  104fef:	c3                   	ret    

00104ff0 <map_address_context>:
	}
	    break;

  104ff0:	55                   	push   %ebp
  104ff1:	89 e5                	mov    %esp,%ebp
  104ff3:	53                   	push   %ebx
  104ff4:	83 ec 10             	sub    $0x10,%esp
	case 13: /* fread */
  104ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
  104ffa:	c1 e8 16             	shr    $0x16,%eax
  104ffd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
  105000:	8b 45 0c             	mov    0xc(%ebp),%eax
  105003:	c1 e8 0c             	shr    $0xc,%eax
  105006:	25 ff 03 00 00       	and    $0x3ff,%eax
  10500b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        vfs_reset_error();
        struct res_handle* handle = (void*) cpu->ebx;
  10500e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105011:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105018:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10501b:	c1 e0 02             	shl    $0x2,%eax
  10501e:	03 45 08             	add    0x8(%ebp),%eax
  105021:	8b 00                	mov    (%eax),%eax
  105023:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105028:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10502b:	8b 55 10             	mov    0x10(%ebp),%edx
  10502e:	89 d1                	mov    %edx,%ecx
  105030:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
        if(handle != 0) {
  105036:	8b 55 14             	mov    0x14(%ebp),%edx
  105039:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
	    break;

	case 13: /* fread */
	{
        vfs_reset_error();
        struct res_handle* handle = (void*) cpu->ebx;
  10503f:	09 d1                	or     %edx,%ecx
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  105041:	8b 55 f8             	mov    -0x8(%ebp),%edx
  105044:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
  10504b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10504e:	c1 e2 02             	shl    $0x2,%edx
  105051:	03 55 08             	add    0x8(%ebp),%edx
  105054:	8b 12                	mov    (%edx),%edx
  105056:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  10505c:	8d 14 13             	lea    (%ebx,%edx,1),%edx
  10505f:	8b 12                	mov    (%edx),%edx
  105061:	81 e2 04 02 00 00    	and    $0x204,%edx
	    break;

	case 13: /* fread */
	{
        vfs_reset_error();
        struct res_handle* handle = (void*) cpu->ebx;
  105067:	09 ca                	or     %ecx,%edx
  105069:	83 ca 03             	or     $0x3,%edx
  10506c:	89 10                	mov    %edx,(%eax)
        if(handle != 0) {
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
  10506e:	83 c4 10             	add    $0x10,%esp
  105071:	5b                   	pop    %ebx
  105072:	5d                   	pop    %ebp
  105073:	c3                   	ret    

00105074 <map_address_active>:
        {
            cpu->eax = RW_ERR_VFS;
  105074:	55                   	push   %ebp
  105075:	89 e5                	mov    %esp,%ebp
  105077:	53                   	push   %ebx
        }
  105078:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  10507d:	8b 55 08             	mov    0x8(%ebp),%edx
  105080:	c1 ea 0c             	shr    $0xc,%edx
  105083:	c1 e2 02             	shl    $0x2,%edx
  105086:	01 d0                	add    %edx,%eax
  105088:	8b 55 0c             	mov    0xc(%ebp),%edx
  10508b:	89 d1                	mov    %edx,%ecx
  10508d:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
	}
  105093:	8b 55 10             	mov    0x10(%ebp),%edx
  105096:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
        {
            cpu->eax = RW_ERR_VFS;
        }
  10509c:	89 cb                	mov    %ecx,%ebx
  10509e:	09 d3                	or     %edx,%ebx
	}
	    break;
  1050a0:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  1050a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1050a9:	c1 e9 0c             	shr    $0xc,%ecx
  1050ac:	c1 e1 02             	shl    $0x2,%ecx
  1050af:	01 ca                	add    %ecx,%edx
  1050b1:	8b 12                	mov    (%edx),%edx
  1050b3:	81 e2 04 02 00 00    	and    $0x204,%edx
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
        }
        else
        {
            cpu->eax = RW_ERR_VFS;
        }
  1050b9:	09 da                	or     %ebx,%edx
  1050bb:	83 ca 03             	or     $0x3,%edx
  1050be:	89 10                	mov    %edx,(%eax)
	}
	    break;

  1050c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1050c3:	0f 01 38             	invlpg (%eax)
	case 14: /* fmkfifo */
  1050c6:	5b                   	pop    %ebx
  1050c7:	5d                   	pop    %ebp
  1050c8:	c3                   	ret    

001050c9 <vmm_free>:
	{
        vfs_reset_error();
  1050c9:	55                   	push   %ebp
  1050ca:	89 e5                	mov    %esp,%ebp
  1050cc:	83 ec 18             	sub    $0x18,%esp
        char* name = strclone((char*) cpu->ebx);
  1050cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1050d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size

  1050d5:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1050da:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1050dd:	c1 ea 0c             	shr    $0xc,%edx
  1050e0:	c1 e2 02             	shl    $0x2,%edx
  1050e3:	01 d0                	add    %edx,%eax
  1050e5:	8b 00                	mov    (%eax),%eax
  1050e7:	25 01 02 00 00       	and    $0x201,%eax
  1050ec:	3d 01 02 00 00       	cmp    $0x201,%eax
  1050f1:	75 54                	jne    105147 <vmm_free+0x7e>
        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
        if(handle) {
  1050f3:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1050f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1050fb:	c1 ea 0c             	shr    $0xc,%edx
  1050fe:	c1 e2 02             	shl    $0x2,%edx
  105101:	01 d0                	add    %edx,%eax
  105103:	8b 00                	mov    (%eax),%eax
  105105:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10510a:	83 ec 0c             	sub    $0xc,%esp
  10510d:	50                   	push   %eax
  10510e:	e8 2b cb ff ff       	call   101c3e <pmm_free>
  105113:	83 c4 10             	add    $0x10,%esp
            register_handle(handle);
            cpu->eax = (uint32_t) handle;
  105116:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  10511b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10511e:	c1 ea 0c             	shr    $0xc,%edx
  105121:	c1 e2 02             	shl    $0x2,%edx
  105124:	01 d0                	add    %edx,%eax
        }
  105126:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  10512c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10512f:	c1 e9 0c             	shr    $0xc,%ecx
  105132:	c1 e1 02             	shl    $0x2,%ecx
  105135:	01 ca                	add    %ecx,%edx
  105137:	8b 12                	mov    (%edx),%edx
  105139:	83 e2 04             	and    $0x4,%edx
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
        if(handle) {
            register_handle(handle);
            cpu->eax = (uint32_t) handle;
  10513c:	80 ce 02             	or     $0x2,%dh
  10513f:	89 10                	mov    %edx,(%eax)
        }
        else
  105141:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105144:	0f 01 38             	invlpg (%eax)
        {
            cpu->eax = 0;
  105147:	c9                   	leave  
  105148:	c3                   	ret    

00105149 <vmm_unmap>:
        }

  105149:	55                   	push   %ebp
  10514a:	89 e5                	mov    %esp,%ebp
  10514c:	83 ec 10             	sub    $0x10,%esp
        free(name);
  10514f:	8b 45 08             	mov    0x8(%ebp),%eax
  105152:	89 45 fc             	mov    %eax,-0x4(%ebp)
	}
	    break;
  105155:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  10515a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10515d:	c1 ea 0c             	shr    $0xc,%edx
  105160:	c1 e2 02             	shl    $0x2,%edx
  105163:	01 d0                	add    %edx,%eax
  105165:	8b 00                	mov    (%eax),%eax
  105167:	25 01 02 00 00       	and    $0x201,%eax
  10516c:	3d 01 02 00 00       	cmp    $0x201,%eax
  105171:	75 31                	jne    1051a4 <vmm_unmap+0x5b>

	case 15: /* getLastVFSErr */
  105173:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  105178:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10517b:	c1 ea 0c             	shr    $0xc,%edx
  10517e:	c1 e2 02             	shl    $0x2,%edx
  105181:	01 d0                	add    %edx,%eax
	{
  105183:	8b 15 fc 60 10 00    	mov    0x1060fc,%edx
  105189:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10518c:	c1 e9 0c             	shr    $0xc,%ecx
  10518f:	c1 e1 02             	shl    $0x2,%ecx
  105192:	01 ca                	add    %ecx,%edx
  105194:	8b 12                	mov    (%edx),%edx
  105196:	83 e2 04             	and    $0x4,%edx

        free(name);
	}
	    break;

	case 15: /* getLastVFSErr */
  105199:	80 ce 02             	or     $0x2,%dh
  10519c:	89 10                	mov    %edx,(%eax)
	{
	    cpu->eax = get_current_task()->vfserr;
  10519e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1051a1:	0f 01 38             	invlpg (%eax)
        vfs_reset_error();
	}
  1051a4:	c9                   	leave  
  1051a5:	c3                   	ret    

001051a6 <vmm_alloc_in_range>:
	    break;

	case 16: /* favailable */
  1051a6:	55                   	push   %ebp
  1051a7:	89 e5                	mov    %esp,%ebp
  1051a9:	83 ec 18             	sub    $0x18,%esp
	{
  1051ac:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	    cpu->eax = vfs_available((void*)cpu->ebx);
  1051b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	}
  1051ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	    break;

  1051c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1051c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1051c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1051cc:	eb 48                	jmp    105216 <vmm_alloc_in_range+0x70>
	case 17: /* getExecPathChild */
  1051ce:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1051d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1051d6:	c1 ea 0c             	shr    $0xc,%edx
  1051d9:	c1 e2 02             	shl    $0x2,%edx
  1051dc:	01 d0                	add    %edx,%eax
  1051de:	8b 00                	mov    (%eax),%eax
  1051e0:	25 01 02 00 00       	and    $0x201,%eax
  1051e5:	3d 00 02 00 00       	cmp    $0x200,%eax
  1051ea:	75 19                	jne    105205 <vmm_alloc_in_range+0x5f>
	{
		char* path = vfs_get_child_of_exec_path(cpu->ebx);
  1051ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1051f0:	75 06                	jne    1051f8 <vmm_alloc_in_range+0x52>

  1051f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1051f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(path != 0 && cpu->ecx != 0) {
  1051f8:	ff 45 f0             	incl   -0x10(%ebp)
			strcpy((char*)cpu->ecx, path);
  1051fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1051fe:	3b 45 14             	cmp    0x14(%ebp),%eax
  105201:	72 0b                	jb     10520e <vmm_alloc_in_range+0x68>
			free(path);
  105203:	eb 19                	jmp    10521e <vmm_alloc_in_range+0x78>

			cpu->eax = cpu->ecx;
  105205:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10520c:	eb 01                	jmp    10520f <vmm_alloc_in_range+0x69>
	{
		char* path = vfs_get_child_of_exec_path(cpu->ebx);

		if(path != 0 && cpu->ecx != 0) {
			strcpy((char*)cpu->ecx, path);
			free(path);
  10520e:	90                   	nop    
	case 16: /* favailable */
	{
	    cpu->eax = vfs_available((void*)cpu->ebx);
	}
	    break;

  10520f:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
  105216:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105219:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10521c:	72 b0                	jb     1051ce <vmm_alloc_in_range+0x28>

			cpu->eax = cpu->ecx;
		}
		else
		{
			cpu->eax = 0;
  10521e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		}
	}
  105225:	eb 29                	jmp    105250 <vmm_alloc_in_range+0xaa>
		break;
  105227:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10522b:	75 05                	jne    105232 <vmm_alloc_in_range+0x8c>
  10522d:	8b 45 10             	mov    0x10(%ebp),%eax
  105230:	eb 05                	jmp    105237 <vmm_alloc_in_range+0x91>
  105232:	b8 00 00 00 00       	mov    $0x0,%eax
  105237:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10523a:	c1 e2 0c             	shl    $0xc,%edx
  10523d:	03 55 e8             	add    -0x18(%ebp),%edx
  105240:	83 ec 08             	sub    $0x8,%esp
  105243:	50                   	push   %eax
  105244:	52                   	push   %edx
  105245:	e8 95 00 00 00       	call   1052df <vmm_alloc_addr>
  10524a:	83 c4 10             	add    $0x10,%esp

  10524d:	ff 45 f4             	incl   -0xc(%ebp)
		}
		else
		{
			cpu->eax = 0;
		}
	}
  105250:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105254:	0f 95 c0             	setne  %al
  105257:	ff 4d f0             	decl   -0x10(%ebp)
  10525a:	84 c0                	test   %al,%al
  10525c:	75 c9                	jne    105227 <vmm_alloc_in_range+0x81>
		break;

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  10525e:	8b 45 e8             	mov    -0x18(%ebp),%eax

  105261:	c9                   	leave  
  105262:	c3                   	ret    

00105263 <vmm_alloc_ucont>:
	    switch(cpu->ebx) {
	    case PMID_STDOUT:
  105263:	55                   	push   %ebp
  105264:	89 e5                	mov    %esp,%ebp
  105266:	83 ec 08             	sub    $0x8,%esp
	        handle = get_current_task()->stdout;
  105269:	ff 75 08             	pushl  0x8(%ebp)
  10526c:	6a 00                	push   $0x0
  10526e:	68 00 f0 ff ff       	push   $0xfffff000
  105273:	68 00 10 40 01       	push   $0x1401000
  105278:	e8 29 ff ff ff       	call   1051a6 <vmm_alloc_in_range>
  10527d:	83 c4 10             	add    $0x10,%esp
	        break;
  105280:	c9                   	leave  
  105281:	c3                   	ret    

00105282 <vmm_alloc_user>:
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  105282:	55                   	push   %ebp
  105283:	89 e5                	mov    %esp,%ebp
  105285:	83 ec 08             	sub    $0x8,%esp
            break;
  105288:	6a 01                	push   $0x1
  10528a:	ff 75 08             	pushl  0x8(%ebp)
  10528d:	68 00 f0 ff ff       	push   $0xfffff000
  105292:	68 00 10 40 01       	push   $0x1401000
  105297:	e8 0a ff ff ff       	call   1051a6 <vmm_alloc_in_range>
  10529c:	83 c4 10             	add    $0x10,%esp
        case PMID_STDERR:
  10529f:	c9                   	leave  
  1052a0:	c3                   	ret    

001052a1 <vmm_alloc_cont>:
            handle = get_current_task()->stderr;
            break;
  1052a1:	55                   	push   %ebp
  1052a2:	89 e5                	mov    %esp,%ebp
  1052a4:	83 ec 08             	sub    $0x8,%esp
        default:
  1052a7:	ff 75 08             	pushl  0x8(%ebp)
  1052aa:	6a 00                	push   $0x0
  1052ac:	68 00 00 00 20       	push   $0x20000000
  1052b1:	68 00 10 40 01       	push   $0x1401000
  1052b6:	e8 eb fe ff ff       	call   1051a6 <vmm_alloc_in_range>
  1052bb:	83 c4 10             	add    $0x10,%esp
            handle = get_current_task()->stdout;
  1052be:	c9                   	leave  
  1052bf:	c3                   	ret    

001052c0 <vmm_alloc>:
            break;
	    }
  1052c0:	55                   	push   %ebp
  1052c1:	89 e5                	mov    %esp,%ebp
  1052c3:	83 ec 08             	sub    $0x8,%esp

  1052c6:	6a 01                	push   $0x1
  1052c8:	ff 75 08             	pushl  0x8(%ebp)
  1052cb:	68 00 00 00 20       	push   $0x20000000
  1052d0:	68 00 10 40 01       	push   $0x1401000
  1052d5:	e8 cc fe ff ff       	call   1051a6 <vmm_alloc_in_range>
  1052da:	83 c4 10             	add    $0x10,%esp
	    cpu->eax = (uint32_t) handle;
  1052dd:	c9                   	leave  
  1052de:	c3                   	ret    

001052df <vmm_alloc_addr>:
	}
	    break;
  1052df:	55                   	push   %ebp
  1052e0:	89 e5                	mov    %esp,%ebp
  1052e2:	83 ec 18             	sub    $0x18,%esp

  1052e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1052e9:	75 1c                	jne    105307 <vmm_alloc_addr+0x28>
	case 21: /* fopenpmhandle */
  1052eb:	83 ec 04             	sub    $0x4,%esp
  1052ee:	6a 00                	push   $0x0
  1052f0:	ff 75 08             	pushl  0x8(%ebp)
  1052f3:	68 e4 78 10 00       	push   $0x1078e4
  1052f8:	e8 70 b2 ff ff       	call   10056d <kprintf>
  1052fd:	83 c4 10             	add    $0x10,%esp
	{
	    vfs_reset_error();
	    char* path = strclone((char*)cpu->ecx);
  105300:	b8 00 00 00 00       	mov    $0x0,%eax
  105305:	eb 7b                	jmp    105382 <vmm_alloc_addr+0xa3>

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  105307:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  10530c:	8b 55 08             	mov    0x8(%ebp),%edx
  10530f:	c1 ea 0c             	shr    $0xc,%edx
  105312:	c1 e2 02             	shl    $0x2,%edx
  105315:	01 d0                	add    %edx,%eax
  105317:	8b 00                	mov    (%eax),%eax
  105319:	25 01 02 00 00       	and    $0x201,%eax
  10531e:	3d 00 02 00 00       	cmp    $0x200,%eax
  105323:	74 2d                	je     105352 <vmm_alloc_addr+0x73>

	    if(cpu->ebx == PMID_STDIN) {
	        fm = FM_READ;
	    }
  105325:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  10532a:	8b 55 08             	mov    0x8(%ebp),%edx
  10532d:	c1 ea 0c             	shr    $0xc,%edx
  105330:	c1 e2 02             	shl    $0x2,%edx
  105333:	01 d0                	add    %edx,%eax
	    char* path = strclone((char*)cpu->ecx);

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;

	    if(cpu->ebx == PMID_STDIN) {
  105335:	8b 00                	mov    (%eax),%eax
  105337:	83 ec 04             	sub    $0x4,%esp
  10533a:	50                   	push   %eax
  10533b:	ff 75 08             	pushl  0x8(%ebp)
  10533e:	68 e4 78 10 00       	push   $0x1078e4
  105343:	e8 25 b2 ff ff       	call   10056d <kprintf>
  105348:	83 c4 10             	add    $0x10,%esp
	        fm = FM_READ;
	    }

  10534b:	b8 00 00 00 00       	mov    $0x0,%eax
  105350:	eb 30                	jmp    105382 <vmm_alloc_addr+0xa3>
	    open = vfs_open(path, fm);

	    free(path);
  105352:	e8 75 c7 ff ff       	call   101acc <pmm_alloc>
  105357:	89 45 f4             	mov    %eax,-0xc(%ebp)

  10535a:	8b 45 08             	mov    0x8(%ebp),%eax
  10535d:	83 ec 04             	sub    $0x4,%esp
  105360:	68 04 02 00 00       	push   $0x204
  105365:	ff 75 f4             	pushl  -0xc(%ebp)
  105368:	50                   	push   %eax
  105369:	e8 06 fd ff ff       	call   105074 <map_address_active>
  10536e:	83 c4 10             	add    $0x10,%esp
	    if(!open) {
	        cpu->eax = (uint32_t) -1;
  105371:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  105375:	74 08                	je     10537f <vmm_alloc_addr+0xa0>
	        break;
  105377:	8b 45 0c             	mov    0xc(%ebp),%eax
  10537a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10537d:	89 10                	mov    %edx,(%eax)
	    }

  10537f:	8b 45 08             	mov    0x8(%ebp),%eax
	    struct res_handle* oldhandle = 0;
  105382:	c9                   	leave  
  105383:	c3                   	ret    

00105384 <vmm_activate_pagedir>:

        switch(cpu->ebx) {
  105384:	55                   	push   %ebp
  105385:	89 e5                	mov    %esp,%ebp
        case PMID_STDOUT:
  105387:	8b 45 08             	mov    0x8(%ebp),%eax
  10538a:	a3 64 85 12 00       	mov    %eax,0x128564
            oldhandle = get_current_task()->stdout;
  10538f:	8b 45 08             	mov    0x8(%ebp),%eax
  105392:	0f 22 d8             	mov    %eax,%cr3
            get_current_task()->stdout = open;
  105395:	5d                   	pop    %ebp
  105396:	c3                   	ret    

00105397 <vmm_init>:
            break;
        case PMID_STDIN:
  105397:	55                   	push   %ebp
  105398:	89 e5                	mov    %esp,%ebp
  10539a:	53                   	push   %ebx
  10539b:	83 ec 24             	sub    $0x24,%esp
            oldhandle = get_current_task()->stdin;
            get_current_task()->stdin = open;
            break;
  10539e:	e8 29 c7 ff ff       	call   101acc <pmm_alloc>
  1053a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
            get_current_task()->stderr = open;
  1053a6:	e8 21 c7 ff ff       	call   101acc <pmm_alloc>
  1053ab:	89 c2                	mov    %eax,%edx
  1053ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1053b0:	89 10                	mov    %edx,(%eax)
            break;
        default:
  1053b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1053b9:	e9 d3 00 00 00       	jmp    105491 <vmm_init+0xfa>
            oldhandle = get_current_task()->stdout;
  1053be:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1053c1:	8b 00                	mov    (%eax),%eax
  1053c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1053c6:	c1 e2 02             	shl    $0x2,%edx
  1053c9:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  1053cc:	e8 fb c6 ff ff       	call   101acc <pmm_alloc>
  1053d1:	89 03                	mov    %eax,(%ebx)
            get_current_task()->stdout = open;
  1053d3:	83 7d e4 7f          	cmpl   $0x7f,-0x1c(%ebp)
  1053d7:	77 19                	ja     1053f2 <vmm_init+0x5b>
            break;
  1053d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1053dc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1053df:	8b 12                	mov    (%edx),%edx
  1053e1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1053e4:	c1 e1 02             	shl    $0x2,%ecx
  1053e7:	01 ca                	add    %ecx,%edx
  1053e9:	8b 12                	mov    (%edx),%edx
  1053eb:	89 14 85 e0 87 1c 00 	mov    %edx,0x1c87e0(,%eax,4)
        }

        if(oldhandle != 0) {
  1053f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1053f5:	8b 00                	mov    (%eax),%eax
  1053f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1053fa:	c1 e2 02             	shl    $0x2,%edx
  1053fd:	8d 14 10             	lea    (%eax,%edx,1),%edx
  105400:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105403:	8b 00                	mov    (%eax),%eax
  105405:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105408:	c1 e1 02             	shl    $0x2,%ecx
  10540b:	01 c8                	add    %ecx,%eax
  10540d:	8b 00                	mov    (%eax),%eax
  10540f:	83 c8 07             	or     $0x7,%eax
  105412:	89 02                	mov    %eax,(%edx)
            vfs_close(oldhandle);
        }
  105414:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10541b:	eb 68                	jmp    105485 <vmm_init+0xee>

  10541d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105420:	89 c2                	mov    %eax,%edx
  105422:	c1 e2 16             	shl    $0x16,%edx
  105425:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105428:	c1 e0 0c             	shl    $0xc,%eax
  10542b:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10542e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cpu->eax = 0;
	}
  105431:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105434:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  10543b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10543e:	8b 00                	mov    (%eax),%eax
  105440:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  105443:	c1 e2 02             	shl    $0x2,%edx
  105446:	01 d0                	add    %edx,%eax
  105448:	8b 00                	mov    (%eax),%eax
  10544a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10544f:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  105452:	89 c1                	mov    %eax,%ecx
  105454:	81 7d f0 00 10 40 01 	cmpl   $0x1401000,-0x10(%ebp)
  10545b:	76 07                	jbe    105464 <vmm_init+0xcd>
  10545d:	ba 00 02 00 00       	mov    $0x200,%edx
  105462:	eb 05                	jmp    105469 <vmm_init+0xd2>
  105464:	ba 00 00 00 00       	mov    $0x0,%edx
  105469:	81 7d f0 00 10 40 01 	cmpl   $0x1401000,-0x10(%ebp)
  105470:	76 07                	jbe    105479 <vmm_init+0xe2>
  105472:	b8 04 00 00 00       	mov    $0x4,%eax
  105477:	eb 05                	jmp    10547e <vmm_init+0xe7>
  105479:	b8 00 00 00 00       	mov    $0x0,%eax
  10547e:	09 d0                	or     %edx,%eax
  105480:	89 01                	mov    %eax,(%ecx)
            break;
        }

        if(oldhandle != 0) {
            vfs_close(oldhandle);
        }
  105482:	ff 45 e8             	incl   -0x18(%ebp)
  105485:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  10548c:	76 8f                	jbe    10541d <vmm_init+0x86>
            break;
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
            get_current_task()->stderr = open;
            break;
        default:
  10548e:	ff 45 e4             	incl   -0x1c(%ebp)
  105491:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
  105498:	0f 86 20 ff ff ff    	jbe    1053be <vmm_init+0x27>
	    break;

	case 30: /* return_rpc */
	{
	    cpu = return_rpc_call(cpu);
	}
  10549e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1054a5:	eb 3d                	jmp    1054e4 <vmm_init+0x14d>
	    break;
  1054a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1054aa:	8b 00                	mov    (%eax),%eax
  1054ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1054af:	c1 e2 02             	shl    $0x2,%edx
  1054b2:	01 d0                	add    %edx,%eax
  1054b4:	8b 00                	mov    (%eax),%eax
  1054b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1054bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	case 31: /* call_rpc */
  1054be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1054c1:	89 c2                	mov    %eax,%edx
  1054c3:	c1 e2 0c             	shl    $0xc,%edx
	case 30: /* return_rpc */
	{
	    cpu = return_rpc_call(cpu);
	}
	    break;

  1054c6:	a1 fc 60 10 00       	mov    0x1060fc,%eax
  1054cb:	01 c2                	add    %eax,%edx
  1054cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1054d0:	8b 00                	mov    (%eax),%eax
  1054d2:	6a 00                	push   $0x0
  1054d4:	ff 75 f4             	pushl  -0xc(%ebp)
  1054d7:	52                   	push   %edx
  1054d8:	50                   	push   %eax
  1054d9:	e8 12 fb ff ff       	call   104ff0 <map_address_context>
  1054de:	83 c4 10             	add    $0x10,%esp
	    break;

	case 30: /* return_rpc */
	{
	    cpu = return_rpc_call(cpu);
	}
  1054e1:	ff 45 e4             	incl   -0x1c(%ebp)
  1054e4:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
  1054eb:	76 ba                	jbe    1054a7 <vmm_init+0x110>
	    break;

	case 31: /* call_rpc */
	{
	    int PID = cpu->ebx;

  1054ed:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1054f0:	a1 00 61 10 00       	mov    0x106100,%eax
  1054f5:	89 c2                	mov    %eax,%edx
  1054f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1054fa:	8b 00                	mov    (%eax),%eax
  1054fc:	6a 00                	push   $0x0
  1054fe:	51                   	push   %ecx
  1054ff:	52                   	push   %edx
  105500:	50                   	push   %eax
  105501:	e8 ea fa ff ff       	call   104ff0 <map_address_context>
  105506:	83 c4 10             	add    $0x10,%esp
	    //TODO create RPC for U2U
	}
	    break;
  105509:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
  105510:	eb 1d                	jmp    10552f <vmm_init+0x198>

  105512:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105515:	8b 00                	mov    (%eax),%eax
  105517:	6a 00                	push   $0x0
  105519:	ff 75 e4             	pushl  -0x1c(%ebp)
  10551c:	ff 75 e4             	pushl  -0x1c(%ebp)
  10551f:	50                   	push   %eax
  105520:	e8 cb fa ff ff       	call   104ff0 <map_address_context>
  105525:	83 c4 10             	add    $0x10,%esp
	{
	    int PID = cpu->ebx;

	    //TODO create RPC for U2U
	}
	    break;
  105528:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  10552f:	b8 00 90 1c 00       	mov    $0x1c9000,%eax
  105534:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  105537:	72 d9                	jb     105512 <vmm_init+0x17b>

	case 32: /* set_rpc_handler */
	{
	    uint32_t handlerAddr = cpu->ebx;
	    if(get_current_task()->rpc_handler_addr == 0) {
	        get_current_task()->rpc_handler_addr = handlerAddr;
  105539:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10553c:	8b 00                	mov    (%eax),%eax
  10553e:	83 ec 0c             	sub    $0xc,%esp
  105541:	50                   	push   %eax
  105542:	e8 3d fe ff ff       	call   105384 <vmm_activate_pagedir>
  105547:	83 c4 10             	add    $0x10,%esp
	    }
	}
	    break;

  10554a:	0f 20 c0             	mov    %cr0,%eax
  10554d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	case 33: /* fetch_rpc_data */
  105550:	81 4d ec 00 00 00 80 	orl    $0x80000000,-0x14(%ebp)
	{
  105557:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10555a:	0f 22 c0             	mov    %eax,%cr0
	    cpu->eax = 0;
	    void* dest = (void*) cpu->ebx;
  10555d:	a1 00 61 10 00       	mov    0x106100,%eax
  105562:	8b 00                	mov    (%eax),%eax
	    if(get_current_task()->rpc != 0) {
  105564:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105567:	c9                   	leave  
  105568:	c3                   	ret    
