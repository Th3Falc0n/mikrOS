
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 0f 02 00 00       	call   100230 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 d4 2e 00 00       	call   102f00 <pmm_init>
  10002c:	8d 05 98 90 10 00    	lea    0x109098,%eax
  100032:	8d 0d bb 90 10 00    	lea    0x1090bb,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 6c 02 00 00       	call   1002b0 <kprintf>
  100044:	8d 0d cf 90 10 00    	lea    0x1090cf,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 5b 02 00 00       	call   1002b0 <kprintf>
  100055:	8d 0d 0e 91 10 00    	lea    0x10910e,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 4a 02 00 00       	call   1002b0 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 b2 0f 00 00       	call   101020 <init_gdt>
  10006e:	8d 05 23 91 10 00    	lea    0x109123,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 34 02 00 00       	call   1002b0 <kprintf>
  10007c:	8d 0d 38 91 10 00    	lea    0x109138,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 b3 11 00 00       	call   101240 <init_idt>

	kprintf("Initializing Kernel...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 18 02 00 00       	call   1002b0 <kprintf>

	pmm_print_stats();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 70 2c 00 00       	call   102d10 <pmm_print_stats>

	kernel_main(mb_info);
  1000a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000a3:	89 04 24             	mov    %eax,(%esp)
  1000a6:	e8 a5 28 00 00       	call   102950 <kernel_main>

	return;
  1000ab:	83 c4 28             	add    $0x28,%esp
  1000ae:	5d                   	pop    %ebp
  1000af:	c3                   	ret    

001000b0 <in_cod>:
#include "catofdeath.h"

static uint32_t icod = 0;

uint32_t in_cod() {
  1000b0:	55                   	push   %ebp
  1000b1:	89 e5                	mov    %esp,%ebp
    return icod;
  1000b3:	a1 00 a0 10 00       	mov    0x10a000,%eax
  1000b8:	5d                   	pop    %ebp
  1000b9:	c3                   	ret    
  1000ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001000c0 <show_cod>:
}

void show_cod(struct cpu_state* cpu, char* fstr) {
  1000c0:	55                   	push   %ebp
  1000c1:	89 e5                	mov    %esp,%ebp
  1000c3:	56                   	push   %esi
  1000c4:	83 ec 24             	sub    $0x24,%esp
  1000c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1000cd:	ba 04 00 00 00       	mov    $0x4,%edx
  1000d2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1000d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    icod = 1;
  1000d8:	c7 05 00 a0 10 00 01 	movl   $0x1,0x10a000
  1000df:	00 00 00 
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  1000e2:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1000e9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1000ec:	e8 9f 01 00 00       	call   100290 <setclr>
    kprintf(fstr);
  1000f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000f4:	89 04 24             	mov    %eax,(%esp)
  1000f7:	e8 b4 01 00 00       	call   1002b0 <kprintf>
  1000fc:	8d 0d 50 91 10 00    	lea    0x109150,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  100102:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100105:	8b 52 1c             	mov    0x1c(%edx),%edx
  100108:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10010b:	8b 76 20             	mov    0x20(%esi),%esi
  10010e:	89 0c 24             	mov    %ecx,(%esp)
  100111:	89 54 24 04          	mov    %edx,0x4(%esp)
  100115:	89 74 24 08          	mov    %esi,0x8(%esp)
  100119:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011c:	e8 8f 01 00 00       	call   1002b0 <kprintf>
    show_dump(cpu);
  100121:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100124:	89 0c 24             	mov    %ecx,(%esp)
  100127:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10012a:	e8 11 00 00 00       	call   100140 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  10012f:	fa                   	cli    
  100130:	f4                   	hlt    
    }
  100131:	e9 f9 ff ff ff       	jmp    10012f <show_cod+0x6f>
  100136:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10013d:	00 00 00 

00100140 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  100140:	55                   	push   %ebp
  100141:	89 e5                	mov    %esp,%ebp
  100143:	53                   	push   %ebx
  100144:	57                   	push   %edi
  100145:	56                   	push   %esi
  100146:	83 ec 2c             	sub    $0x2c,%esp
  100149:	8b 45 08             	mov    0x8(%ebp),%eax
  10014c:	8d 0d 75 91 10 00    	lea    0x109175,%ecx
  100152:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  100155:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100158:	8b 00                	mov    (%eax),%eax
  10015a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10015d:	8b 52 04             	mov    0x4(%edx),%edx
  100160:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100163:	8b 76 08             	mov    0x8(%esi),%esi
  100166:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100169:	8b 7f 0c             	mov    0xc(%edi),%edi
  10016c:	89 0c 24             	mov    %ecx,(%esp)
  10016f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100173:	89 54 24 08          	mov    %edx,0x8(%esp)
  100177:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10017b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10017f:	e8 2c 01 00 00       	call   1002b0 <kprintf>
  100184:	8d 0d 96 91 10 00    	lea    0x109196,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10018a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10018d:	8b 52 10             	mov    0x10(%edx),%edx
  100190:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100193:	8b 76 14             	mov    0x14(%esi),%esi
  100196:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100199:	8b 7f 18             	mov    0x18(%edi),%edi
  10019c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10019f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  1001a2:	89 0c 24             	mov    %ecx,(%esp)
  1001a5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001a9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001ad:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001b1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1001b8:	e8 f3 00 00 00       	call   1002b0 <kprintf>
  1001bd:	8d 0d b7 91 10 00    	lea    0x1091b7,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  1001c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1001c6:	8b 52 28             	mov    0x28(%edx),%edx
  1001c9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1001cc:	8b 76 2c             	mov    0x2c(%esi),%esi
  1001cf:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1001d2:	8b 7f 30             	mov    0x30(%edi),%edi
  1001d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1001d8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1001db:	89 0c 24             	mov    %ecx,(%esp)
  1001de:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001e2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001e6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001ea:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1001f1:	e8 ba 00 00 00       	call   1002b0 <kprintf>
  1001f6:	8d 0d d9 91 10 00    	lea    0x1091d9,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  1001fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  100203:	0f 20 d2             	mov    %cr2,%edx
  100206:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  100209:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10020c:	89 0c 24             	mov    %ecx,(%esp)
  10020f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100213:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100216:	e8 95 00 00 00       	call   1002b0 <kprintf>
}
  10021b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10021e:	83 c4 2c             	add    $0x2c,%esp
  100221:	5e                   	pop    %esi
  100222:	5f                   	pop    %edi
  100223:	5b                   	pop    %ebx
  100224:	5d                   	pop    %ebp
  100225:	c3                   	ret    
  100226:	66 90                	xchg   %ax,%ax
  100228:	66 90                	xchg   %ax,%ax
  10022a:	66 90                	xchg   %ax,%ax
  10022c:	66 90                	xchg   %ax,%ax
  10022e:	66 90                	xchg   %ax,%ax

00100230 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100233:	50                   	push   %eax
  100234:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10023b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  100242:	0f 8d 1d 00 00 00    	jge    100265 <clrscr+0x35>
        video[i] = 0;
  100248:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10024b:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  100251:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100255:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100258:	05 01 00 00 00       	add    $0x1,%eax
  10025d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100260:	e9 d6 ff ff ff       	jmp    10023b <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100265:	c6 05 04 80 10 00 07 	movb   $0x7,0x108004

    x = y = 0;
  10026c:	c7 05 04 a0 10 00 00 	movl   $0x0,0x10a004
  100273:	00 00 00 
  100276:	c7 05 08 a0 10 00 00 	movl   $0x0,0x10a008
  10027d:	00 00 00 
}
  100280:	83 c4 04             	add    $0x4,%esp
  100283:	5d                   	pop    %ebp
  100284:	c3                   	ret    
  100285:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10028c:	00 00 00 00 

00100290 <setclr>:

void setclr(char clr) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	8a 45 08             	mov    0x8(%ebp),%al
  100297:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10029a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10029d:	a2 04 80 10 00       	mov    %al,0x108004
}
  1002a2:	83 c4 04             	add    $0x4,%esp
  1002a5:	5d                   	pop    %ebp
  1002a6:	c3                   	ret    
  1002a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1002ae:	00 00 

001002b0 <kprintf>:

int kprintf(const char* fmt, ...) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	83 ec 58             	sub    $0x58,%esp
  1002b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1002b9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1002bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002bf:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  1002c2:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  1002c4:	c7 05 0c a0 10 00 00 	movl   $0x0,0x10a00c
  1002cb:	00 00 00 
    while (*fmt) {
  1002ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002d1:	80 38 00             	cmpb   $0x0,(%eax)
  1002d4:	0f 84 dd 01 00 00    	je     1004b7 <kprintf+0x207>
        if (*fmt == '%') {
  1002da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002dd:	0f be 00             	movsbl (%eax),%eax
  1002e0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1002e5:	0f 85 ae 01 00 00    	jne    100499 <kprintf+0x1e9>
            fmt++;
  1002eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ee:	89 c1                	mov    %eax,%ecx
  1002f0:	41                   	inc    %ecx
  1002f1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  1002f4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1002f8:	89 c1                	mov    %eax,%ecx
  1002fa:	83 e9 24             	sub    $0x24,%ecx
  1002fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100300:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100303:	0f 8f 15 00 00 00    	jg     10031e <kprintf+0x6e>
  100309:	e9 00 00 00 00       	jmp    10030e <kprintf+0x5e>
  10030e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100311:	85 c0                	test   %eax,%eax
  100313:	0f 84 54 01 00 00    	je     10046d <kprintf+0x1bd>
  100319:	e9 54 01 00 00       	jmp    100472 <kprintf+0x1c2>
  10031e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100321:	83 e8 62             	sub    $0x62,%eax
  100324:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100327:	0f 8f 19 00 00 00    	jg     100346 <kprintf+0x96>
  10032d:	e9 00 00 00 00       	jmp    100332 <kprintf+0x82>
  100332:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100335:	83 e8 25             	sub    $0x25,%eax
  100338:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10033b:	0f 84 13 01 00 00    	je     100454 <kprintf+0x1a4>
  100341:	e9 2c 01 00 00       	jmp    100472 <kprintf+0x1c2>
  100346:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100349:	83 e8 6f             	sub    $0x6f,%eax
  10034c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10034f:	0f 8f 2d 00 00 00    	jg     100382 <kprintf+0xd2>
  100355:	e9 00 00 00 00       	jmp    10035a <kprintf+0xaa>
  10035a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10035d:	83 e8 63             	sub    $0x63,%eax
  100360:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100363:	0f 84 c5 00 00 00    	je     10042e <kprintf+0x17e>
  100369:	e9 00 00 00 00       	jmp    10036e <kprintf+0xbe>
  10036e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100371:	83 e8 64             	sub    $0x64,%eax
  100374:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100377:	0f 84 4b 00 00 00    	je     1003c8 <kprintf+0x118>
  10037d:	e9 f0 00 00 00       	jmp    100472 <kprintf+0x1c2>
  100382:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100385:	83 c0 90             	add    $0xffffff90,%eax
  100388:	89 c1                	mov    %eax,%ecx
  10038a:	83 e9 08             	sub    $0x8,%ecx
  10038d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100390:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100393:	0f 87 d9 00 00 00    	ja     100472 <kprintf+0x1c2>
  100399:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10039c:	8b 0c 85 00 90 10 00 	mov    0x109000(,%eax,4),%ecx
  1003a3:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  1003a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1003a8:	89 c1                	mov    %eax,%ecx
  1003aa:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1003b0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1003b3:	8b 00                	mov    (%eax),%eax
  1003b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  1003b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003bb:	89 04 24             	mov    %eax,(%esp)
  1003be:	e8 0d 01 00 00       	call   1004d0 <kputs>
                break;
  1003c3:	e9 cc 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003c8:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  1003cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003d0:	89 ca                	mov    %ecx,%edx
  1003d2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1003d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1003db:	8b 09                	mov    (%ecx),%ecx
  1003dd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  1003e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003e3:	89 0c 24             	mov    %ecx,(%esp)
  1003e6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1003ed:	00 
  1003ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1003f1:	e8 1a 01 00 00       	call   100510 <kputn>
                break;
  1003f6:	e9 99 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003fb:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  100400:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100403:	89 ca                	mov    %ecx,%edx
  100405:	81 c2 04 00 00 00    	add    $0x4,%edx
  10040b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10040e:	8b 09                	mov    (%ecx),%ecx
  100410:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  100413:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100416:	89 0c 24             	mov    %ecx,(%esp)
  100419:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100420:	00 
  100421:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100424:	e8 e7 00 00 00       	call   100510 <kputn>
                break;
  100429:	e9 66 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  10042e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100431:	89 c1                	mov    %eax,%ecx
  100433:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100439:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10043c:	8b 00                	mov    (%eax),%eax
  10043e:	88 c2                	mov    %al,%dl
  100440:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  100443:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100447:	89 04 24             	mov    %eax,(%esp)
  10044a:	e8 61 01 00 00       	call   1005b0 <kputc>
                break;
  10044f:	e9 40 00 00 00       	jmp    100494 <kprintf+0x1e4>
  100454:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  100459:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100460:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100463:	e8 48 01 00 00       	call   1005b0 <kputc>
                break;
  100468:	e9 27 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case '\0':
                goto out;
  10046d:	e9 4a 00 00 00       	jmp    1004bc <kprintf+0x20c>
  100472:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100477:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10047e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100481:	e8 2a 01 00 00       	call   1005b0 <kputc>
                kputc(*fmt);
  100486:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100489:	0f be 00             	movsbl (%eax),%eax
  10048c:	89 04 24             	mov    %eax,(%esp)
  10048f:	e8 1c 01 00 00       	call   1005b0 <kputc>
                break;
            }
        } else {
  100494:	e9 0e 00 00 00       	jmp    1004a7 <kprintf+0x1f7>
            kputc(*fmt);
  100499:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10049c:	0f be 00             	movsbl (%eax),%eax
  10049f:	89 04 24             	mov    %eax,(%esp)
  1004a2:	e8 09 01 00 00       	call   1005b0 <kputc>
        }

        fmt++;
  1004a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004aa:	05 01 00 00 00       	add    $0x1,%eax
  1004af:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  1004b2:	e9 17 fe ff ff       	jmp    1002ce <kprintf+0x1e>
  1004b7:	e9 00 00 00 00       	jmp    1004bc <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  1004bc:	a1 0c a0 10 00       	mov    0x10a00c,%eax
  1004c1:	83 c4 58             	add    $0x58,%esp
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1004cd:	00 00 00 

001004d0 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	83 ec 08             	sub    $0x8,%esp
  1004d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1004dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004df:	80 38 00             	cmpb   $0x0,(%eax)
  1004e2:	0f 84 1e 00 00 00    	je     100506 <kputs+0x36>
        kputc(*s++);
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	89 c1                	mov    %eax,%ecx
  1004ed:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1004f3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1004f6:	0f be 00             	movsbl (%eax),%eax
  1004f9:	89 04 24             	mov    %eax,(%esp)
  1004fc:	e8 af 00 00 00       	call   1005b0 <kputc>
    }
  100501:	e9 d6 ff ff ff       	jmp    1004dc <kputs+0xc>
}
  100506:	83 c4 08             	add    $0x8,%esp
  100509:	5d                   	pop    %ebp
  10050a:	c3                   	ret    
  10050b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100510 <kputn>:

static void kputn(unsigned long x, int base) {
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	56                   	push   %esi
  100514:	83 ec 64             	sub    $0x64,%esp
  100517:	8b 45 0c             	mov    0xc(%ebp),%eax
  10051a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10051d:	8d 15 e3 91 10 00    	lea    0x1091e3,%edx
  100523:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100526:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  100529:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10052c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  100533:	0f 8e 05 00 00 00    	jle    10053e <kputn+0x2e>
        return;
  100539:	e9 5d 00 00 00       	jmp    10059b <kputn+0x8b>
  10053e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  100541:	05 40 00 00 00       	add    $0x40,%eax
  100546:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  100549:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10054c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10054f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100552:	31 d2                	xor    %edx,%edx
  100554:	f7 75 f4             	divl   -0xc(%ebp)
  100557:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10055a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10055d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100560:	89 c2                	mov    %eax,%edx
  100562:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100568:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10056b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10056e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100571:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100574:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100577:	89 d0                	mov    %edx,%eax
  100579:	31 d2                	xor    %edx,%edx
  10057b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10057e:	f7 f6                	div    %esi
  100580:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100583:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10058a:	0f 85 bf ff ff ff    	jne    10054f <kputn+0x3f>
    kputs(p);
  100590:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100593:	89 04 24             	mov    %eax,(%esp)
  100596:	e8 35 ff ff ff       	call   1004d0 <kputs>
}
  10059b:	83 c4 64             	add    $0x64,%esp
  10059e:	5e                   	pop    %esi
  10059f:	5d                   	pop    %ebp
  1005a0:	c3                   	ret    
  1005a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1005a8:	0f 1f 84 00 00 00 00 
  1005af:	00 

001005b0 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1005b0:	55                   	push   %ebp
  1005b1:	89 e5                	mov    %esp,%ebp
  1005b3:	83 ec 38             	sub    $0x38,%esp
  1005b6:	8a 45 08             	mov    0x8(%ebp),%al
  1005b9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if(in_cod()) {
  1005bc:	e8 ef fa ff ff       	call   1000b0 <in_cod>
  1005c1:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005c6:	0f 84 05 00 00 00    	je     1005d1 <kputc+0x21>
        goto doKPutc;
  1005cc:	e9 e3 00 00 00       	jmp    1006b4 <kputc+0x104>
    }

    if(get_current_task() != 0) {
  1005d1:	e8 ea 3a 00 00       	call   1040c0 <get_current_task>
  1005d6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005db:	0f 84 b9 00 00 00    	je     10069a <kputc+0xea>
        if(get_current_task()->stdout != 0) {
  1005e1:	e8 da 3a 00 00       	call   1040c0 <get_current_task>
  1005e6:	81 78 28 00 00 00 00 	cmpl   $0x0,0x28(%eax)
  1005ed:	0f 84 a2 00 00 00    	je     100695 <kputc+0xe5>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1005f3:	e8 c8 3a 00 00       	call   1040c0 <get_current_task>
  1005f8:	8d 4d fe             	lea    -0x2(%ebp),%ecx
  1005fb:	ba 01 00 00 00       	mov    $0x1,%edx
  100600:	8b 40 28             	mov    0x28(%eax),%eax
  100603:	c6 45 fe 11          	movb   $0x11,-0x2(%ebp)
  100607:	89 04 24             	mov    %eax,(%esp)
  10060a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10060e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100615:	00 
  100616:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10061d:	00 
  10061e:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100621:	e8 7a 51 00 00       	call   1057a0 <vfs_write>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  100626:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100629:	e8 92 3a 00 00       	call   1040c0 <get_current_task>
  10062e:	8d 0d 04 80 10 00    	lea    0x108004,%ecx
  100634:	ba 01 00 00 00       	mov    $0x1,%edx
  100639:	8b 40 28             	mov    0x28(%eax),%eax
  10063c:	89 04 24             	mov    %eax,(%esp)
  10063f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100643:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10064a:	00 
  10064b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100652:	00 
  100653:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100656:	e8 45 51 00 00       	call   1057a0 <vfs_write>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10065b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10065e:	e8 5d 3a 00 00       	call   1040c0 <get_current_task>
  100663:	8d 4d ff             	lea    -0x1(%ebp),%ecx
  100666:	ba 01 00 00 00       	mov    $0x1,%edx
  10066b:	8b 40 28             	mov    0x28(%eax),%eax
  10066e:	89 04 24             	mov    %eax,(%esp)
  100671:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100675:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10067c:	00 
  10067d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100684:	00 
  100685:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100688:	e8 13 51 00 00       	call   1057a0 <vfs_write>

            return;
  10068d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100690:	e9 5e 01 00 00       	jmp    1007f3 <kputc+0x243>
        }
    }
  100695:	e9 00 00 00 00       	jmp    10069a <kputc+0xea>

    if(ramfs_vga_writers()) {
  10069a:	e8 f1 39 00 00       	call   104090 <ramfs_vga_writers>
  10069f:	3d 00 00 00 00       	cmp    $0x0,%eax
  1006a4:	0f 84 05 00 00 00    	je     1006af <kputc+0xff>
        return;
  1006aa:	e9 44 01 00 00       	jmp    1007f3 <kputc+0x243>
    }
  1006af:	e9 00 00 00 00       	jmp    1006b4 <kputc+0x104>

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  1006b4:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006b8:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006bd:	0f 84 10 00 00 00    	je     1006d3 <kputc+0x123>
  1006c3:	81 3d 08 a0 10 00 4f 	cmpl   $0x4f,0x10a008
  1006ca:	00 00 00 
  1006cd:	0f 8e 19 00 00 00    	jle    1006ec <kputc+0x13c>
        x = 0;
  1006d3:	c7 05 08 a0 10 00 00 	movl   $0x0,0x10a008
  1006da:	00 00 00 
        y++;
  1006dd:	a1 04 a0 10 00       	mov    0x10a004,%eax
  1006e2:	05 01 00 00 00       	add    $0x1,%eax
  1006e7:	a3 04 a0 10 00       	mov    %eax,0x10a004
    }

    if (c == '\n') {
  1006ec:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006f0:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006f5:	0f 85 05 00 00 00    	jne    100700 <kputc+0x150>
        return;
  1006fb:	e9 f3 00 00 00       	jmp    1007f3 <kputc+0x243>
    }

    if (y > 24) {
  100700:	81 3d 04 a0 10 00 18 	cmpl   $0x18,0x10a004
  100707:	00 00 00 
  10070a:	0f 8e 7e 00 00 00    	jle    10078e <kputc+0x1de>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100710:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100717:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  10071e:	0f 8d 2c 00 00 00    	jge    100750 <kputc+0x1a0>
            video[i] = video[i + 160];
  100724:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100727:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10072d:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  100734:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100737:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10073d:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100740:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100743:	05 01 00 00 00       	add    $0x1,%eax
  100748:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10074b:	e9 c7 ff ff ff       	jmp    100717 <kputc+0x167>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100750:	e9 00 00 00 00       	jmp    100755 <kputc+0x1a5>
  100755:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  10075c:	0f 8d 1d 00 00 00    	jge    10077f <kputc+0x1cf>
            video[i] = 0;
  100762:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100765:	8b 0d 00 80 10 00    	mov    0x108000,%ecx
  10076b:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10076f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100772:	05 01 00 00 00       	add    $0x1,%eax
  100777:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10077a:	e9 d6 ff ff ff       	jmp    100755 <kputc+0x1a5>
            video[i] = 0;
        }
        y--;
  10077f:	a1 04 a0 10 00       	mov    0x10a004,%eax
  100784:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100789:	a3 04 a0 10 00       	mov    %eax,0x10a004
    }

    video[2 * (y * 80 + x)] = c;
  10078e:	8a 45 ff             	mov    -0x1(%ebp),%al
  100791:	69 0d 04 a0 10 00 50 	imul   $0x50,0x10a004,%ecx
  100798:	00 00 00 
  10079b:	03 0d 08 a0 10 00    	add    0x10a008,%ecx
  1007a1:	c1 e1 01             	shl    $0x1,%ecx
  1007a4:	8b 15 00 80 10 00    	mov    0x108000,%edx
  1007aa:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  1007ad:	a0 04 80 10 00       	mov    0x108004,%al
  1007b2:	69 0d 04 a0 10 00 50 	imul   $0x50,0x10a004,%ecx
  1007b9:	00 00 00 
  1007bc:	03 0d 08 a0 10 00    	add    0x10a008,%ecx
  1007c2:	c1 e1 01             	shl    $0x1,%ecx
  1007c5:	8b 15 00 80 10 00    	mov    0x108000,%edx
  1007cb:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1007cf:	8b 0d 08 a0 10 00    	mov    0x10a008,%ecx
  1007d5:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007db:	89 0d 08 a0 10 00    	mov    %ecx,0x10a008
    kprintf_res++;
  1007e1:	8b 0d 0c a0 10 00    	mov    0x10a00c,%ecx
  1007e7:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007ed:	89 0d 0c a0 10 00    	mov    %ecx,0x10a00c
}
  1007f3:	83 c4 38             	add    $0x38,%esp
  1007f6:	5d                   	pop    %ebp
  1007f7:	c3                   	ret    
  1007f8:	66 90                	xchg   %ax,%ax
  1007fa:	66 90                	xchg   %ax,%ax
  1007fc:	66 90                	xchg   %ax,%ax
  1007fe:	66 90                	xchg   %ax,%ax

00100800 <irq_handler>:
        while ((inb(0x64) & 0x1) == 0) {
        }
    } while (inb(0x60) == 0xfe);
}

void irq_handler() {
  100800:	55                   	push   %ebp
  100801:	89 e5                	mov    %esp,%ebp
    uint8_t scancode;
    uint8_t keycode = 0;
  100803:	57                   	push   %edi
  100804:	56                   	push   %esi
  100805:	83 ec 40             	sub    $0x40,%esp
  100808:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
    int break_code = 0;
  10080c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    static int      e0_code = 0;
    static int      e1_code = 0;
    static uint16_t e1_prev = 0;

    if(!init_done) return;
  100813:	81 3d 10 a0 10 00 00 	cmpl   $0x0,0x10a010
  10081a:	00 00 00 
  10081d:	0f 85 05 00 00 00    	jne    100828 <irq_handler+0x28>
  100823:	e9 bf 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  100828:	b8 60 00 00 00       	mov    $0x60,%eax

    scancode = inb(0x60);
  10082d:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100834:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100837:	e8 b4 02 00 00       	call   100af0 <inb>
  10083c:	88 45 f7             	mov    %al,-0x9(%ebp)

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
  10083f:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
  100843:	81 e1 80 00 00 00    	and    $0x80,%ecx
  100849:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10084f:	0f 84 53 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100855:	81 3d 1c a0 10 00 00 	cmpl   $0x0,0x10a01c
  10085c:	00 00 00 
  10085f:	0f 85 0f 00 00 00    	jne    100874 <irq_handler+0x74>
  100865:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100869:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10086e:	0f 84 34 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100874:	81 3d 18 a0 10 00 00 	cmpl   $0x0,0x10a018
  10087b:	00 00 00 
  10087e:	0f 85 0f 00 00 00    	jne    100893 <irq_handler+0x93>
  100884:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100888:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10088d:	0f 84 15 00 00 00    	je     1008a8 <irq_handler+0xa8>
        (e1_code || (scancode != 0xE1)) &&
        (e0_code || (scancode != 0xE0)))
    {
        break_code = 1;
  100893:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
        scancode &= ~0x80;
  10089a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10089e:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  1008a3:	88 c1                	mov    %al,%cl
  1008a5:	88 4d f7             	mov    %cl,-0x9(%ebp)
    }

    if (e0_code) {
  1008a8:	81 3d 18 a0 10 00 00 	cmpl   $0x0,0x10a018
  1008af:	00 00 00 
  1008b2:	0f 84 63 00 00 00    	je     10091b <irq_handler+0x11b>
        // Fake shift abfangen und ignorieren
        if ((scancode == 0x2A) || (scancode == 0x36)) {
  1008b8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008bc:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  1008c1:	0f 84 0f 00 00 00    	je     1008d6 <irq_handler+0xd6>
  1008c7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008cb:	3d 36 00 00 00       	cmp    $0x36,%eax
  1008d0:	0f 85 0f 00 00 00    	jne    1008e5 <irq_handler+0xe5>
            e0_code = 0;
  1008d6:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  1008dd:	00 00 00 
            return;
  1008e0:	e9 02 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  1008e5:	b8 01 00 00 00       	mov    $0x1,%eax
        }

        keycode = translate_scancode(1, scancode);
  1008ea:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1008ed:	0f b6 d1             	movzbl %cl,%edx
  1008f0:	66 89 d6             	mov    %dx,%si
  1008f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1008fa:	0f b7 d6             	movzwl %si,%edx
  1008fd:	89 54 24 04          	mov    %edx,0x4(%esp)
  100901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100904:	e8 07 02 00 00       	call   100b10 <translate_scancode>
  100909:	88 45 f6             	mov    %al,-0xa(%ebp)
        e0_code = 0;
  10090c:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  100913:	00 00 00 
    } else if (e1_code == 2) {
  100916:	e9 11 01 00 00       	jmp    100a2c <irq_handler+0x22c>
  10091b:	81 3d 1c a0 10 00 02 	cmpl   $0x2,0x10a01c
  100922:	00 00 00 
  100925:	0f 85 53 00 00 00    	jne    10097e <irq_handler+0x17e>
  10092b:	b8 02 00 00 00       	mov    $0x2,%eax
        // Fertiger e1-Scancode
        // Zweiten Scancode in hoeherwertiges Byte packen
        e1_prev |= ((uint16_t) scancode << 8);
  100930:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100933:	0f b6 d1             	movzbl %cl,%edx
  100936:	66 89 d6             	mov    %dx,%si
  100939:	0f b7 d6             	movzwl %si,%edx
  10093c:	c1 e2 08             	shl    $0x8,%edx
  10093f:	0f b7 3d 20 a0 10 00 	movzwl 0x10a020,%edi
  100946:	09 d7                	or     %edx,%edi
  100948:	66 89 fe             	mov    %di,%si
  10094b:	66 89 35 20 a0 10 00 	mov    %si,0x10a020
        keycode = translate_scancode(2, e1_prev);
  100952:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100959:	0f b7 15 20 a0 10 00 	movzwl 0x10a020,%edx
  100960:	89 54 24 04          	mov    %edx,0x4(%esp)
  100964:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100967:	e8 a4 01 00 00       	call   100b10 <translate_scancode>
  10096c:	88 45 f6             	mov    %al,-0xa(%ebp)
        e1_code = 0;
  10096f:	c7 05 1c a0 10 00 00 	movl   $0x0,0x10a01c
  100976:	00 00 00 
    } else if (e1_code == 1) {
  100979:	e9 a9 00 00 00       	jmp    100a27 <irq_handler+0x227>
  10097e:	81 3d 1c a0 10 00 01 	cmpl   $0x1,0x10a01c
  100985:	00 00 00 
  100988:	0f 85 27 00 00 00    	jne    1009b5 <irq_handler+0x1b5>
        // Erstes Byte fuer e1-Scancode
        e1_prev = scancode;
  10098e:	8a 45 f7             	mov    -0x9(%ebp),%al
  100991:	0f b6 c8             	movzbl %al,%ecx
  100994:	66 89 ca             	mov    %cx,%dx
  100997:	66 89 15 20 a0 10 00 	mov    %dx,0x10a020
        e1_code++;
  10099e:	8b 0d 1c a0 10 00    	mov    0x10a01c,%ecx
  1009a4:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1009aa:	89 0d 1c a0 10 00    	mov    %ecx,0x10a01c
    } else if (scancode == 0xE0) {
  1009b0:	e9 6d 00 00 00       	jmp    100a22 <irq_handler+0x222>
  1009b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009b9:	3d e0 00 00 00       	cmp    $0xe0,%eax
  1009be:	0f 85 0f 00 00 00    	jne    1009d3 <irq_handler+0x1d3>
        // Anfang eines e0-Codes
        e0_code = 1;
  1009c4:	c7 05 18 a0 10 00 01 	movl   $0x1,0x10a018
  1009cb:	00 00 00 
    } else if (scancode == 0xE1) {
  1009ce:	e9 4a 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  1009d3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009d7:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1009dc:	0f 85 0f 00 00 00    	jne    1009f1 <irq_handler+0x1f1>
        // Anfang eines e1-Codes
        e1_code = 1;
  1009e2:	c7 05 1c a0 10 00 01 	movl   $0x1,0x10a01c
  1009e9:	00 00 00 
    } else {
  1009ec:	e9 27 00 00 00       	jmp    100a18 <irq_handler+0x218>
  1009f1:	b8 00 00 00 00       	mov    $0x0,%eax
        // Normaler Scancode
        keycode = translate_scancode(0, scancode);
  1009f6:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1009f9:	0f b6 d1             	movzbl %cl,%edx
  1009fc:	66 89 d6             	mov    %dx,%si
  1009ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100a06:	0f b7 d6             	movzwl %si,%edx
  100a09:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a10:	e8 fb 00 00 00       	call   100b10 <translate_scancode>
  100a15:	88 45 f6             	mov    %al,-0xa(%ebp)
  100a18:	e9 00 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  100a1d:	e9 00 00 00 00       	jmp    100a22 <irq_handler+0x222>
  100a22:	e9 00 00 00 00       	jmp    100a27 <irq_handler+0x227>
  100a27:	e9 00 00 00 00       	jmp    100a2c <irq_handler+0x22c>
    }

    if(break_code) {
  100a2c:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a33:	0f 84 1d 00 00 00    	je     100a56 <irq_handler+0x256>
        key_flags[keycode] &= ~KF_PRESSED;
  100a39:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a3d:	8b 0c 85 68 a4 12 00 	mov    0x12a468(,%eax,4),%ecx
  100a44:	81 e1 fe ff ff ff    	and    $0xfffffffe,%ecx
  100a4a:	89 0c 85 68 a4 12 00 	mov    %ecx,0x12a468(,%eax,4)
    }
  100a51:	e9 18 00 00 00       	jmp    100a6e <irq_handler+0x26e>
    else
    {
        key_flags[keycode] |= KF_PRESSED;
  100a56:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a5a:	8b 0c 85 68 a4 12 00 	mov    0x12a468(,%eax,4),%ecx
  100a61:	81 c9 01 00 00 00    	or     $0x1,%ecx
  100a67:	89 0c 85 68 a4 12 00 	mov    %ecx,0x12a468(,%eax,4)
    }

    char chr = getchar(keycode);
  100a6e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a72:	89 04 24             	mov    %eax,(%esp)
  100a75:	e8 76 01 00 00       	call   100bf0 <getchar>
  100a7a:	88 45 ef             	mov    %al,-0x11(%ebp)

    if(!break_code && chr) {
  100a7d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a84:	0f 85 5d 00 00 00    	jne    100ae7 <irq_handler+0x2e7>
  100a8a:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100a8e:	3d 00 00 00 00       	cmp    $0x0,%eax
  100a93:	0f 84 4e 00 00 00    	je     100ae7 <irq_handler+0x2e7>
  100a99:	8d 45 ef             	lea    -0x11(%ebp),%eax
  100a9c:	b9 01 00 00 00       	mov    $0x1,%ecx
        if(vfs_write(charout, &chr, sizeof(char), 1)) {
  100aa1:	8b 15 14 a0 10 00    	mov    0x10a014,%edx
  100aa7:	89 14 24             	mov    %edx,(%esp)
  100aaa:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100ab5:	00 
  100ab6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100abd:	00 
  100abe:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  100ac1:	e8 da 4c 00 00       	call   1057a0 <vfs_write>
  100ac6:	3d 00 00 00 00       	cmp    $0x0,%eax
  100acb:	0f 84 11 00 00 00    	je     100ae2 <irq_handler+0x2e2>
  100ad1:	8d 05 08 92 10 00    	lea    0x109208,%eax
            kprintf("[keyboard] BUFFER OVERFLOW! \n");
  100ad7:	89 04 24             	mov    %eax,(%esp)
  100ada:	e8 d1 f7 ff ff       	call   1002b0 <kprintf>
  100adf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        }
    }
  100ae2:	e9 00 00 00 00       	jmp    100ae7 <irq_handler+0x2e7>
}
  100ae7:	83 c4 40             	add    $0x40,%esp
  100aea:	5e                   	pop    %esi
  100aeb:	5f                   	pop    %edi
  100aec:	5d                   	pop    %ebp
  100aed:	c3                   	ret    
  100aee:	66 90                	xchg   %ax,%ax

00100af0 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100af0:	55                   	push   %ebp
  100af1:	89 e5                	mov    %esp,%ebp
  100af3:	50                   	push   %eax
  100af4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100af8:	66 89 c1             	mov    %ax,%cx
  100afb:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100aff:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100b03:	ec                   	in     (%dx),%al
  100b04:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  100b07:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  100b0b:	83 c4 04             	add    $0x4,%esp
  100b0e:	5d                   	pop    %ebp
  100b0f:	c3                   	ret    

00100b10 <translate_scancode>:
uint32_t key_flags[256];

struct res_handle* charout = 0;

static uint8_t translate_scancode(int set, uint16_t scancode)
{
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	83 ec 28             	sub    $0x28,%esp
  100b16:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  100b1a:	66 89 c1             	mov    %ax,%cx
  100b1d:	8b 45 08             	mov    0x8(%ebp),%eax
  100b20:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100b23:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
    uint8_t keycode = 0;
  100b27:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

    switch (set) {
  100b2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b2e:	89 c2                	mov    %eax,%edx
  100b30:	83 ea 02             	sub    $0x2,%edx
  100b33:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b36:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100b39:	0f 84 4f 00 00 00    	je     100b8e <translate_scancode+0x7e>
  100b3f:	e9 00 00 00 00       	jmp    100b44 <translate_scancode+0x34>
  100b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b47:	83 e8 01             	sub    $0x1,%eax
  100b4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100b4d:	0f 84 28 00 00 00    	je     100b7b <translate_scancode+0x6b>
  100b53:	e9 00 00 00 00       	jmp    100b58 <translate_scancode+0x48>
  100b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b5b:	85 c0                	test   %eax,%eax
  100b5d:	0f 85 54 00 00 00    	jne    100bb7 <translate_scancode+0xa7>
  100b63:	e9 00 00 00 00       	jmp    100b68 <translate_scancode+0x58>
        // Normal scancodes
        case 0:
            keycode = sc_to_kc[0][scancode];
  100b68:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b6c:	8a 0c 05 08 81 10 00 	mov    0x108108(,%eax,1),%cl
  100b73:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b76:	e9 3c 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e0-Scancodes
        case 1:
            keycode = sc_to_kc[1][scancode];
  100b7b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b7f:	8a 0c 05 88 81 10 00 	mov    0x108188(,%eax,1),%cl
  100b86:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b89:	e9 29 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e1-Scancodes
        case 2:
            switch (scancode) {
  100b8e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b92:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100b97:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100b9a:	0f 85 0e 00 00 00    	jne    100bae <translate_scancode+0x9e>
  100ba0:	e9 00 00 00 00       	jmp    100ba5 <translate_scancode+0x95>
                // Pause
                case 0x451D:
                    keycode = 119;
  100ba5:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
                    break;
  100ba9:	e9 04 00 00 00       	jmp    100bb2 <translate_scancode+0xa2>

                default:
                    keycode = 0x0;
  100bae:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
            };
            break;
  100bb2:	e9 00 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>
    }

    if (keycode == 0) {
  100bb7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bbb:	3d 00 00 00 00       	cmp    $0x0,%eax
  100bc0:	0f 85 20 00 00 00    	jne    100be6 <translate_scancode+0xd6>
  100bc6:	8d 05 34 92 10 00    	lea    0x109234,%eax
        kprintf("kbc: Unknown Scancode: 0x%x (%d)\n", scancode, set);
  100bcc:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  100bd0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100bd3:	89 04 24             	mov    %eax,(%esp)
  100bd6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100bda:	89 54 24 08          	mov    %edx,0x8(%esp)
  100bde:	e8 cd f6 ff ff       	call   1002b0 <kprintf>
  100be3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    return keycode;
  100be6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bea:	83 c4 28             	add    $0x28,%esp
  100bed:	5d                   	pop    %ebp
  100bee:	c3                   	ret    
  100bef:	90                   	nop

00100bf0 <getchar>:
}

static char getchar(uint8_t keycode) {
  100bf0:	55                   	push   %ebp
  100bf1:	89 e5                	mov    %esp,%ebp
  100bf3:	83 ec 08             	sub    $0x8,%esp
  100bf6:	8a 45 08             	mov    0x8(%ebp),%al
  100bf9:	88 45 ff             	mov    %al,-0x1(%ebp)
    uint32_t index = 0;
  100bfc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    if(key_flags[0x2A] & KF_PRESSED) index = 1; //LSHIFT
  100c03:	8b 0d 10 a5 12 00    	mov    0x12a510,%ecx
  100c09:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100c0f:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100c15:	0f 84 07 00 00 00    	je     100c22 <getchar+0x32>
  100c1b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    if(key_flags[0x36] & KF_PRESSED) index = 1; //RSHIFT
  100c22:	a1 40 a5 12 00       	mov    0x12a540,%eax
  100c27:	25 01 00 00 00       	and    $0x1,%eax
  100c2c:	3d 00 00 00 00       	cmp    $0x0,%eax
  100c31:	0f 84 07 00 00 00    	je     100c3e <getchar+0x4e>
  100c37:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  100c3e:	8d 05 08 80 10 00    	lea    0x108008,%eax

    return kc_to_char[index][keycode];
  100c44:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100c48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100c4b:	c1 e2 07             	shl    $0x7,%edx
  100c4e:	01 d0                	add    %edx,%eax
  100c50:	0f be 04 08          	movsbl (%eax,%ecx,1),%eax
  100c54:	83 c4 08             	add    $0x8,%esp
  100c57:	5d                   	pop    %ebp
  100c58:	c3                   	ret    
  100c59:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100c60 <driver_keyboard_init>:
        }
    }
}

void driver_keyboard_init(void)
{
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	56                   	push   %esi
  100c64:	83 ec 54             	sub    $0x54,%esp
  100c67:	b8 21 00 00 00       	mov    $0x21,%eax
  100c6c:	8d 0d 00 08 10 00    	lea    0x100800,%ecx
    register_intr_handler(0x21, &irq_handler);
  100c72:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100c79:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100c80:	e8 eb 11 00 00       	call   101e70 <register_intr_handler>
  100c85:	b8 64 00 00 00       	mov    $0x64,%eax

    while (inb(0x64) & 0x1) {
  100c8a:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100c94:	e8 57 fe ff ff       	call   100af0 <inb>
  100c99:	0f b6 c8             	movzbl %al,%ecx
  100c9c:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100ca2:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100ca8:	0f 84 1c 00 00 00    	je     100cca <driver_keyboard_init+0x6a>
  100cae:	b8 60 00 00 00       	mov    $0x60,%eax
        inb(0x60);
  100cb3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100cba:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100cbd:	e8 2e fe ff ff       	call   100af0 <inb>
    }
  100cc2:	88 45 eb             	mov    %al,-0x15(%ebp)
  100cc5:	e9 bb ff ff ff       	jmp    100c85 <driver_keyboard_init+0x25>
  100cca:	b8 ed 00 00 00       	mov    $0xed,%eax
  100ccf:	8d 0d 68 a4 12 00    	lea    0x12a468,%ecx
  100cd5:	ba 00 00 00 00       	mov    $0x0,%edx
  100cda:	be 00 04 00 00       	mov    $0x400,%esi

    memset(key_flags, 0, 256 * sizeof(uint32_t));
  100cdf:	89 0c 24             	mov    %ecx,(%esp)
  100ce2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ce9:	00 
  100cea:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
  100cf1:	00 
  100cf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100cf5:	89 75 e0             	mov    %esi,-0x20(%ebp)
  100cf8:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100cfb:	e8 a0 40 00 00       	call   104da0 <memset>

    // Leds alle ausloeschen
    send_command(0xED);
  100d00:	c7 04 24 ed 00 00 00 	movl   $0xed,(%esp)
  100d07:	e8 c4 00 00 00       	call   100dd0 <send_command>
  100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d11:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d18:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100d1b:	e8 b0 00 00 00       	call   100dd0 <send_command>
  100d20:	b8 f3 00 00 00       	mov    $0xf3,%eax

    // Schnellste Wiederholrate
    send_command(0xF3);
  100d25:	c7 04 24 f3 00 00 00 	movl   $0xf3,(%esp)
  100d2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100d2f:	e8 9c 00 00 00       	call   100dd0 <send_command>
  100d34:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d39:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d40:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100d43:	e8 88 00 00 00       	call   100dd0 <send_command>
  100d48:	b8 f4 00 00 00       	mov    $0xf4,%eax

    send_command(0xF4);
  100d4d:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100d54:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100d57:	e8 74 00 00 00       	call   100dd0 <send_command>
  100d5c:	8d 05 26 92 10 00    	lea    0x109226,%eax
  100d62:	8d 4d f8             	lea    -0x8(%ebp),%ecx

    vfs_create_kfile("/dev/keyboard", ramfs_fifo_driver_struct(), &(uint32_t){512});
  100d65:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100d68:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100d6b:	e8 a0 2d 00 00       	call   103b10 <ramfs_fifo_driver_struct>
  100d70:	c7 45 f8 00 02 00 00 	movl   $0x200,-0x8(%ebp)
  100d77:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  100d7a:	89 0c 24             	mov    %ecx,(%esp)
  100d7d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100d81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100d84:	89 44 24 08          	mov    %eax,0x8(%esp)
  100d88:	e8 63 47 00 00       	call   1054f0 <vfs_create_kfile>
  100d8d:	8d 0d 26 92 10 00    	lea    0x109226,%ecx
  100d93:	ba 02 00 00 00       	mov    $0x2,%edx
    charout = vfs_open("/dev/keyboard", FM_WRITE);
  100d98:	89 0c 24             	mov    %ecx,(%esp)
  100d9b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100da2:	00 
  100da3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100da6:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100da9:	e8 22 48 00 00       	call   1055d0 <vfs_open>
  100dae:	a3 14 a0 10 00       	mov    %eax,0x10a014

    init_done = 1;
  100db3:	c7 05 10 a0 10 00 01 	movl   $0x1,0x10a010
  100dba:	00 00 00 
}
  100dbd:	83 c4 54             	add    $0x54,%esp
  100dc0:	5e                   	pop    %esi
  100dc1:	5d                   	pop    %ebp
  100dc2:	c3                   	ret    
  100dc3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100dca:	84 00 00 00 00 00 

00100dd0 <send_command>:

    return kc_to_char[index][keycode];
}

static void send_command(uint8_t command)
{
  100dd0:	55                   	push   %ebp
  100dd1:	89 e5                	mov    %esp,%ebp
  100dd3:	83 ec 28             	sub    $0x28,%esp
  100dd6:	8a 45 08             	mov    0x8(%ebp),%al
  100dd9:	88 45 ff             	mov    %al,-0x1(%ebp)
    do {
        while (inb(0x64) & 0x2) {
  100ddc:	e9 00 00 00 00       	jmp    100de1 <send_command+0x11>
  100de1:	b8 64 00 00 00       	mov    $0x64,%eax
  100de6:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100ded:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100df0:	e8 fb fc ff ff       	call   100af0 <inb>
  100df5:	0f b6 c8             	movzbl %al,%ecx
  100df8:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100dfe:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e04:	0f 84 05 00 00 00    	je     100e0f <send_command+0x3f>
        }
  100e0a:	e9 d2 ff ff ff       	jmp    100de1 <send_command+0x11>
  100e0f:	b8 60 00 00 00       	mov    $0x60,%eax

        outb(0x60, command);
  100e14:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e1b:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100e1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100e23:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100e26:	e8 65 00 00 00       	call   100e90 <outb>
  100e2b:	b8 64 00 00 00       	mov    $0x64,%eax

        while ((inb(0x64) & 0x1) == 0) {
  100e30:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100e3a:	e8 b1 fc ff ff       	call   100af0 <inb>
  100e3f:	0f b6 c8             	movzbl %al,%ecx
  100e42:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100e48:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e4e:	0f 85 05 00 00 00    	jne    100e59 <send_command+0x89>
        }
  100e54:	e9 d2 ff ff ff       	jmp    100e2b <send_command+0x5b>
    } while (inb(0x60) == 0xfe);
  100e59:	e9 00 00 00 00       	jmp    100e5e <send_command+0x8e>
  100e5e:	b8 60 00 00 00       	mov    $0x60,%eax
  100e63:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100e6d:	e8 7e fc ff ff       	call   100af0 <inb>
  100e72:	0f b6 c8             	movzbl %al,%ecx
  100e75:	81 f9 fe 00 00 00    	cmp    $0xfe,%ecx
  100e7b:	0f 84 5b ff ff ff    	je     100ddc <send_command+0xc>
}
  100e81:	83 c4 28             	add    $0x28,%esp
  100e84:	5d                   	pop    %ebp
  100e85:	c3                   	ret    
  100e86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100e8d:	00 00 00 

00100e90 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  100e90:	55                   	push   %ebp
  100e91:	89 e5                	mov    %esp,%ebp
  100e93:	50                   	push   %eax
  100e94:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100e98:	66 89 c1             	mov    %ax,%cx
  100e9b:	8a 55 0c             	mov    0xc(%ebp),%dl
  100e9e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  100ea2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100ea5:	8a 45 fd             	mov    -0x3(%ebp),%al
  100ea8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100eac:	ee                   	out    %al,(%dx)
}
  100ead:	83 c4 04             	add    $0x4,%esp
  100eb0:	5d                   	pop    %ebp
  100eb1:	c3                   	ret    
  100eb2:	66 90                	xchg   %ax,%ax
  100eb4:	66 90                	xchg   %ax,%ax
  100eb6:	66 90                	xchg   %ax,%ax
  100eb8:	66 90                	xchg   %ax,%ax
  100eba:	66 90                	xchg   %ax,%ax
  100ebc:	66 90                	xchg   %ax,%ax
  100ebe:	66 90                	xchg   %ax,%ax

00100ec0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  100ec0:	55                   	push   %ebp
  100ec1:	89 e5                	mov    %esp,%ebp
	struct {
  100ec3:	83 ec 08             	sub    $0x8,%esp
  100ec6:	a1 24 90 10 00       	mov    0x109024,%eax
  100ecb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100ece:	66 8b 0d 28 90 10 00 	mov    0x109028,%cx
  100ed5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  100ed9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  100edd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100ee1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  100ee4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  100ee7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  100eea:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  100eed:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  100ef0:	83 c4 08             	add    $0x8,%esp
  100ef3:	5d                   	pop    %ebp
  100ef4:	c3                   	ret    
  100ef5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100efc:	00 00 00 00 

00100f00 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100f00:	55                   	push   %ebp
  100f01:	89 e5                	mov    %esp,%ebp
  100f03:	56                   	push   %esi
  100f04:	83 ec 10             	sub    $0x10,%esp
  100f07:	8b 45 14             	mov    0x14(%ebp),%eax
  100f0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100f0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100f10:	8b 75 08             	mov    0x8(%ebp),%esi
  100f13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100f16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100f19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100f1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100f1f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100f23:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f26:	89 04 cd 68 a8 12 00 	mov    %eax,0x12a868(,%ecx,8)
  100f2d:	c7 04 cd 6c a8 12 00 	movl   $0x0,0x12a86c(,%ecx,8)
  100f34:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f3b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100f40:	89 c1                	mov    %eax,%ecx
  100f42:	c1 e1 10             	shl    $0x10,%ecx
  100f45:	c1 e8 10             	shr    $0x10,%eax
  100f48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100f4b:	8b 34 d5 6c a8 12 00 	mov    0x12a86c(,%edx,8),%esi
  100f52:	09 f0                	or     %esi,%eax
  100f54:	8b 34 d5 68 a8 12 00 	mov    0x12a868(,%edx,8),%esi
  100f5b:	09 ce                	or     %ecx,%esi
  100f5d:	89 04 d5 6c a8 12 00 	mov    %eax,0x12a86c(,%edx,8)
  100f64:	89 34 d5 68 a8 12 00 	mov    %esi,0x12a868(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100f6b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100f6f:	c1 e0 08             	shl    $0x8,%eax
  100f72:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f75:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100f7c:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100f83:	09 c6                	or     %eax,%esi
  100f85:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100f8c:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100f93:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100f97:	83 e0 0f             	and    $0xf,%eax
  100f9a:	c1 e0 10             	shl    $0x10,%eax
  100f9d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fa0:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100fa7:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100fae:	09 c6                	or     %eax,%esi
  100fb0:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100fb7:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100fc1:	c1 e0 0c             	shl    $0xc,%eax
  100fc4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100fc9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fcc:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100fd3:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  100fda:	09 c6                	or     %eax,%esi
  100fdc:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  100fe3:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100fea:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100fee:	c1 e0 18             	shl    $0x18,%eax
  100ff1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100ff4:	8b 14 cd 68 a8 12 00 	mov    0x12a868(,%ecx,8),%edx
  100ffb:	8b 34 cd 6c a8 12 00 	mov    0x12a86c(,%ecx,8),%esi
  101002:	09 c6                	or     %eax,%esi
  101004:	89 14 cd 68 a8 12 00 	mov    %edx,0x12a868(,%ecx,8)
  10100b:	89 34 cd 6c a8 12 00 	mov    %esi,0x12a86c(,%ecx,8)
}
  101012:	83 c4 10             	add    $0x10,%esp
  101015:	5e                   	pop    %esi
  101016:	5d                   	pop    %ebp
  101017:	c3                   	ret    
  101018:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10101f:	00 

00101020 <init_gdt>:

void init_gdt(void) {
  101020:	55                   	push   %ebp
  101021:	89 e5                	mov    %esp,%ebp
  101023:	56                   	push   %esi
  101024:	83 ec 54             	sub    $0x54,%esp
  101027:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  10102c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101033:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10103a:	00 
  10103b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101042:	00 
  101043:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10104a:	00 
  10104b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10104e:	e8 ad fe ff ff       	call   100f00 <set_gdt_entry>
  101053:	b8 01 00 00 00       	mov    $0x1,%eax
  101058:	b9 00 00 00 00       	mov    $0x0,%ecx
  10105d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  101062:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101067:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10106e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101075:	00 
  101076:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10107d:	00 
  10107e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  101085:	00 
  101086:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101089:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10108c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10108f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  101092:	e8 69 fe ff ff       	call   100f00 <set_gdt_entry>
  101097:	b8 02 00 00 00       	mov    $0x2,%eax
  10109c:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010a1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010a6:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1010b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010b9:	00 
  1010ba:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1010c1:	00 
  1010c2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  1010c9:	00 
  1010ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1010cd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1010d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  1010d3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  1010d6:	e8 25 fe ff ff       	call   100f00 <set_gdt_entry>
  1010db:	b8 03 00 00 00       	mov    $0x3,%eax
  1010e0:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010e5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010ea:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ef:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1010f6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010fd:	00 
  1010fe:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101105:	00 
  101106:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10110d:	00 
  10110e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101111:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  101114:	89 55 cc             	mov    %edx,-0x34(%ebp)
  101117:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10111a:	e8 e1 fd ff ff       	call   100f00 <set_gdt_entry>
  10111f:	b8 04 00 00 00       	mov    $0x4,%eax
  101124:	b9 00 00 00 00       	mov    $0x0,%ecx
  101129:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10112e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101133:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10113a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101141:	00 
  101142:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101149:	00 
  10114a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  101151:	00 
  101152:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101155:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  101158:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10115b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10115e:	e8 9d fd ff ff       	call   100f00 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  101163:	e8 58 fd ff ff       	call   100ec0 <load_gdt>
}
  101168:	83 c4 54             	add    $0x54,%esp
  10116b:	5e                   	pop    %esi
  10116c:	5d                   	pop    %ebp
  10116d:	c3                   	ret    
  10116e:	66 90                	xchg   %ax,%ax

00101170 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101170:	55                   	push   %ebp
  101171:	89 e5                	mov    %esp,%ebp
  101173:	53                   	push   %ebx
  101174:	57                   	push   %edi
  101175:	56                   	push   %esi
  101176:	83 ec 10             	sub    $0x10,%esp
  101179:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10117d:	66 89 c1             	mov    %ax,%cx
  101180:	8a 55 14             	mov    0x14(%ebp),%dl
  101183:	8b 45 0c             	mov    0xc(%ebp),%eax
  101186:	8b 75 08             	mov    0x8(%ebp),%esi
  101189:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10118c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10118f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101193:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101196:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10119c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1011a0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011a3:	89 04 f5 28 a0 10 00 	mov    %eax,0x10a028(,%esi,8)
  1011aa:	c7 04 f5 2c a0 10 00 	movl   $0x0,0x10a02c(,%esi,8)
  1011b1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  1011b5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  1011b9:	c1 e0 10             	shl    $0x10,%eax
  1011bc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011bf:	8b 3c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%edi
  1011c6:	8b 1c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%ebx
  1011cd:	09 c3                	or     %eax,%ebx
  1011cf:	89 3c f5 2c a0 10 00 	mov    %edi,0x10a02c(,%esi,8)
  1011d6:	89 1c f5 28 a0 10 00 	mov    %ebx,0x10a028(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1011dd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  1011e1:	c1 e0 08             	shl    $0x8,%eax
  1011e4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011e7:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  1011ee:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  1011f5:	09 c3                	or     %eax,%ebx
  1011f7:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  1011fe:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  101205:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101209:	c1 e0 10             	shl    $0x10,%eax
  10120c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10120f:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  101216:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  10121d:	09 c3                	or     %eax,%ebx
  10121f:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  101226:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
}
  10122d:	83 c4 10             	add    $0x10,%esp
  101230:	5e                   	pop    %esi
  101231:	5f                   	pop    %edi
  101232:	5b                   	pop    %ebx
  101233:	5d                   	pop    %ebp
  101234:	c3                   	ret    
  101235:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10123c:	00 00 00 00 

00101240 <init_idt>:

void init_idt() {
  101240:	55                   	push   %ebp
  101241:	89 e5                	mov    %esp,%ebp
	struct {
  101243:	56                   	push   %esi
  101244:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10124a:	a1 2a 90 10 00       	mov    0x10902a,%eax
  10124f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101252:	66 8b 0d 2e 90 10 00 	mov    0x10902e,%cx
  101259:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  10125d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  101264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10126b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101272:	0f 8d 1e 00 00 00    	jge    101296 <init_idt+0x56>
		handler_set[i] = 0;
  101278:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10127b:	c7 04 85 28 a2 10 00 	movl   $0x0,0x10a228(,%eax,4)
  101282:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  101286:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101289:	05 01 00 00 00       	add    $0x1,%eax
  10128e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101291:	e9 d5 ff ff ff       	jmp    10126b <init_idt+0x2b>
  101296:	b8 20 00 00 00       	mov    $0x20,%eax
  10129b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1012a0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1012a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1012ae:	00 
  1012af:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1012b2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1012b5:	e8 86 0b 00 00       	call   101e40 <outb>
  1012ba:	b8 21 00 00 00       	mov    $0x21,%eax
  1012bf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1012c4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012cb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1012d2:	00 
  1012d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1012d6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1012d9:	e8 62 0b 00 00       	call   101e40 <outb>
  1012de:	b8 21 00 00 00       	mov    $0x21,%eax
  1012e3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1012e8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012ef:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1012f6:	00 
  1012f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1012fa:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1012fd:	e8 3e 0b 00 00       	call   101e40 <outb>
  101302:	b8 21 00 00 00       	mov    $0x21,%eax
  101307:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  10130c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101313:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10131a:	00 
  10131b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10131e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101321:	e8 1a 0b 00 00       	call   101e40 <outb>
  101326:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10132b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101330:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101337:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10133e:	00 
  10133f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101342:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101345:	e8 f6 0a 00 00       	call   101e40 <outb>
  10134a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10134f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101354:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10135b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101362:	00 
  101363:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101366:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101369:	e8 d2 0a 00 00       	call   101e40 <outb>
  10136e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101373:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101378:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10137f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101386:	00 
  101387:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10138a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10138d:	e8 ae 0a 00 00       	call   101e40 <outb>
  101392:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101397:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  10139c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1013aa:	00 
  1013ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1013ae:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1013b1:	e8 8a 0a 00 00       	call   101e40 <outb>
  1013b6:	b8 20 00 00 00       	mov    $0x20,%eax
  1013bb:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  1013c0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1013c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013ce:	00 
  1013cf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1013d2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1013d5:	e8 66 0a 00 00       	call   101e40 <outb>
  1013da:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1013df:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  1013e4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1013eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013f2:	00 
  1013f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1013f6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1013f9:	e8 42 0a 00 00       	call   101e40 <outb>
  1013fe:	b8 00 00 00 00       	mov    $0x0,%eax
  101403:	8d 0d 1c 20 10 00    	lea    0x10201c,%ecx
  101409:	ba 08 00 00 00       	mov    $0x8,%edx
  10140e:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  101413:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10141a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10141e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101425:	00 
  101426:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10142d:	00 
  10142e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101431:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101434:	89 55 90             	mov    %edx,-0x70(%ebp)
  101437:	e8 34 fd ff ff       	call   101170 <idt_set_entry>
  10143c:	b8 01 00 00 00       	mov    $0x1,%eax
  101441:	8d 0d 25 20 10 00    	lea    0x102025,%ecx
  101447:	ba 08 00 00 00       	mov    $0x8,%edx
  10144c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  101451:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101458:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10145c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101463:	00 
  101464:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10146b:	00 
  10146c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10146f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101472:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101475:	e8 f6 fc ff ff       	call   101170 <idt_set_entry>
  10147a:	b8 02 00 00 00       	mov    $0x2,%eax
  10147f:	8d 0d 2e 20 10 00    	lea    0x10202e,%ecx
  101485:	ba 08 00 00 00       	mov    $0x8,%edx
  10148a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  10148f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101496:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10149a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014a1:	00 
  1014a2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014a9:	00 
  1014aa:	89 45 80             	mov    %eax,-0x80(%ebp)
  1014ad:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1014b3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1014b9:	e8 b2 fc ff ff       	call   101170 <idt_set_entry>
  1014be:	b8 03 00 00 00       	mov    $0x3,%eax
  1014c3:	8d 0d 37 20 10 00    	lea    0x102037,%ecx
  1014c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1014ce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  1014d3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1014da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014e5:	00 
  1014e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014ed:	00 
  1014ee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1014f4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1014fa:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101500:	e8 6b fc ff ff       	call   101170 <idt_set_entry>
  101505:	b8 04 00 00 00       	mov    $0x4,%eax
  10150a:	8d 0d 40 20 10 00    	lea    0x102040,%ecx
  101510:	ba 08 00 00 00       	mov    $0x8,%edx
  101515:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10151a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101521:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101525:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10152c:	00 
  10152d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101534:	00 
  101535:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10153b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101541:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101547:	e8 24 fc ff ff       	call   101170 <idt_set_entry>
  10154c:	b8 05 00 00 00       	mov    $0x5,%eax
  101551:	8d 0d 49 20 10 00    	lea    0x102049,%ecx
  101557:	ba 08 00 00 00       	mov    $0x8,%edx
  10155c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101561:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101568:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10156c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101573:	00 
  101574:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10157b:	00 
  10157c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101582:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101588:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10158e:	e8 dd fb ff ff       	call   101170 <idt_set_entry>
  101593:	b8 06 00 00 00       	mov    $0x6,%eax
  101598:	8d 0d 52 20 10 00    	lea    0x102052,%ecx
  10159e:	ba 08 00 00 00       	mov    $0x8,%edx
  1015a3:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  1015a8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1015af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015ba:	00 
  1015bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015c2:	00 
  1015c3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1015c9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1015cf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1015d5:	e8 96 fb ff ff       	call   101170 <idt_set_entry>
  1015da:	b8 07 00 00 00       	mov    $0x7,%eax
  1015df:	8d 0d 5b 20 10 00    	lea    0x10205b,%ecx
  1015e5:	ba 08 00 00 00       	mov    $0x8,%edx
  1015ea:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1015ef:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1015f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101601:	00 
  101602:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101609:	00 
  10160a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101610:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101616:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10161c:	e8 4f fb ff ff       	call   101170 <idt_set_entry>
  101621:	b8 08 00 00 00       	mov    $0x8,%eax
  101626:	8d 0d 64 20 10 00    	lea    0x102064,%ecx
  10162c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101631:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101638:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10163c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101643:	00 
  101644:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10164b:	00 
  10164c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101652:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101658:	e8 13 fb ff ff       	call   101170 <idt_set_entry>
  10165d:	b8 09 00 00 00       	mov    $0x9,%eax
  101662:	8d 0d 6b 20 10 00    	lea    0x10206b,%ecx
  101668:	ba 08 00 00 00       	mov    $0x8,%edx
  10166d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101672:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101679:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10167d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101684:	00 
  101685:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10168c:	00 
  10168d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101693:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101699:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10169f:	e8 cc fa ff ff       	call   101170 <idt_set_entry>
  1016a4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1016a9:	8d 0d 74 20 10 00    	lea    0x102074,%ecx
  1016af:	ba 08 00 00 00       	mov    $0x8,%edx
  1016b4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1016b9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1016c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016c4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016cb:	00 
  1016cc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016d3:	00 
  1016d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1016da:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1016e0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1016e6:	e8 85 fa ff ff       	call   101170 <idt_set_entry>
  1016eb:	b8 0b 00 00 00       	mov    $0xb,%eax
  1016f0:	8d 0d 7b 20 10 00    	lea    0x10207b,%ecx
  1016f6:	ba 08 00 00 00       	mov    $0x8,%edx
  1016fb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  101700:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101707:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10170b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101712:	00 
  101713:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10171a:	00 
  10171b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101721:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101727:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10172d:	e8 3e fa ff ff       	call   101170 <idt_set_entry>
  101732:	b8 0c 00 00 00       	mov    $0xc,%eax
  101737:	8d 0d 82 20 10 00    	lea    0x102082,%ecx
  10173d:	ba 08 00 00 00       	mov    $0x8,%edx
  101742:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101747:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10174e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101752:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101759:	00 
  10175a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101761:	00 
  101762:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101768:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10176e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101774:	e8 f7 f9 ff ff       	call   101170 <idt_set_entry>
  101779:	b8 0d 00 00 00       	mov    $0xd,%eax
  10177e:	8d 0d 89 20 10 00    	lea    0x102089,%ecx
  101784:	ba 08 00 00 00       	mov    $0x8,%edx
  101789:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10178e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101795:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101799:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a0:	00 
  1017a1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017a8:	00 
  1017a9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1017af:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1017b5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1017bb:	e8 b0 f9 ff ff       	call   101170 <idt_set_entry>
  1017c0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1017c5:	8d 0d 90 20 10 00    	lea    0x102090,%ecx
  1017cb:	ba 08 00 00 00       	mov    $0x8,%edx
  1017d0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1017d5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1017dc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017e0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017e7:	00 
  1017e8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017ef:	00 
  1017f0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1017f6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1017fc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101802:	e8 69 f9 ff ff       	call   101170 <idt_set_entry>
  101807:	b8 0f 00 00 00       	mov    $0xf,%eax
  10180c:	8d 0d 94 20 10 00    	lea    0x102094,%ecx
  101812:	ba 08 00 00 00       	mov    $0x8,%edx
  101817:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10181c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101823:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101827:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10182e:	00 
  10182f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101836:	00 
  101837:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10183d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101843:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101849:	e8 22 f9 ff ff       	call   101170 <idt_set_entry>
  10184e:	b8 10 00 00 00       	mov    $0x10,%eax
  101853:	8d 0d 9a 20 10 00    	lea    0x10209a,%ecx
  101859:	ba 08 00 00 00       	mov    $0x8,%edx
  10185e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101863:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10186a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10186e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101875:	00 
  101876:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187d:	00 
  10187e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101884:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10188a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101890:	e8 db f8 ff ff       	call   101170 <idt_set_entry>
  101895:	b8 11 00 00 00       	mov    $0x11,%eax
  10189a:	8d 0d a0 20 10 00    	lea    0x1020a0,%ecx
  1018a0:	ba 08 00 00 00       	mov    $0x8,%edx
  1018a5:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  1018aa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1018b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018b5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018bc:	00 
  1018bd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c4:	00 
  1018c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1018cb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1018d1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1018d7:	e8 94 f8 ff ff       	call   101170 <idt_set_entry>
  1018dc:	b8 12 00 00 00       	mov    $0x12,%eax
  1018e1:	8d 0d a4 20 10 00    	lea    0x1020a4,%ecx
  1018e7:	ba 08 00 00 00       	mov    $0x8,%edx
  1018ec:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1018f1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1018f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018fc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101903:	00 
  101904:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190b:	00 
  10190c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101912:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101918:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10191e:	e8 4d f8 ff ff       	call   101170 <idt_set_entry>
  101923:	b8 20 00 00 00       	mov    $0x20,%eax
  101928:	8d 0d aa 20 10 00    	lea    0x1020aa,%ecx
  10192e:	ba 08 00 00 00       	mov    $0x8,%edx
  101933:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101938:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10193f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101943:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10194a:	00 
  10194b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101952:	00 
  101953:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101959:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10195f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101965:	e8 06 f8 ff ff       	call   101170 <idt_set_entry>
  10196a:	b8 21 00 00 00       	mov    $0x21,%eax
  10196f:	8d 0d b0 20 10 00    	lea    0x1020b0,%ecx
  101975:	ba 08 00 00 00       	mov    $0x8,%edx
  10197a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10197f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101986:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10198a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101991:	00 
  101992:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101999:	00 
  10199a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1019a0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  1019a6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  1019ac:	e8 bf f7 ff ff       	call   101170 <idt_set_entry>
  1019b1:	b8 22 00 00 00       	mov    $0x22,%eax
  1019b6:	8d 0d b6 20 10 00    	lea    0x1020b6,%ecx
  1019bc:	ba 08 00 00 00       	mov    $0x8,%edx
  1019c1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1019c6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1019cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019d1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019d8:	00 
  1019d9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019e0:	00 
  1019e1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1019e7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1019ed:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1019f3:	e8 78 f7 ff ff       	call   101170 <idt_set_entry>
  1019f8:	b8 23 00 00 00       	mov    $0x23,%eax
  1019fd:	8d 0d bc 20 10 00    	lea    0x1020bc,%ecx
  101a03:	ba 08 00 00 00       	mov    $0x8,%edx
  101a08:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  101a0d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101a14:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a18:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a1f:	00 
  101a20:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a27:	00 
  101a28:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101a2e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101a34:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101a3a:	e8 31 f7 ff ff       	call   101170 <idt_set_entry>
  101a3f:	b8 24 00 00 00       	mov    $0x24,%eax
  101a44:	8d 0d c2 20 10 00    	lea    0x1020c2,%ecx
  101a4a:	ba 08 00 00 00       	mov    $0x8,%edx
  101a4f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101a54:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101a5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a5f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a66:	00 
  101a67:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a6e:	00 
  101a6f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101a75:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101a7b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101a81:	e8 ea f6 ff ff       	call   101170 <idt_set_entry>
  101a86:	b8 25 00 00 00       	mov    $0x25,%eax
  101a8b:	8d 0d c8 20 10 00    	lea    0x1020c8,%ecx
  101a91:	ba 08 00 00 00       	mov    $0x8,%edx
  101a96:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  101a9b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101aa2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aa6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aad:	00 
  101aae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab5:	00 
  101ab6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101abc:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101ac2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101ac8:	e8 a3 f6 ff ff       	call   101170 <idt_set_entry>
  101acd:	b8 26 00 00 00       	mov    $0x26,%eax
  101ad2:	8d 0d ce 20 10 00    	lea    0x1020ce,%ecx
  101ad8:	ba 08 00 00 00       	mov    $0x8,%edx
  101add:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  101ae2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101ae9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af4:	00 
  101af5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101afc:	00 
  101afd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101b03:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101b09:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101b0f:	e8 5c f6 ff ff       	call   101170 <idt_set_entry>
  101b14:	b8 27 00 00 00       	mov    $0x27,%eax
  101b19:	8d 0d d4 20 10 00    	lea    0x1020d4,%ecx
  101b1f:	ba 08 00 00 00       	mov    $0x8,%edx
  101b24:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101b29:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101b30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b34:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b3b:	00 
  101b3c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b43:	00 
  101b44:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101b4a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101b50:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101b56:	e8 15 f6 ff ff       	call   101170 <idt_set_entry>
  101b5b:	b8 28 00 00 00       	mov    $0x28,%eax
  101b60:	8d 0d da 20 10 00    	lea    0x1020da,%ecx
  101b66:	ba 08 00 00 00       	mov    $0x8,%edx
  101b6b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101b70:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101b77:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b7b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b82:	00 
  101b83:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b8a:	00 
  101b8b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101b91:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101b97:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101b9d:	e8 ce f5 ff ff       	call   101170 <idt_set_entry>
  101ba2:	b8 29 00 00 00       	mov    $0x29,%eax
  101ba7:	8d 0d e0 20 10 00    	lea    0x1020e0,%ecx
  101bad:	ba 08 00 00 00       	mov    $0x8,%edx
  101bb2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  101bb7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101bbe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bc2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bc9:	00 
  101bca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bd1:	00 
  101bd2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101bd8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101bde:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101be4:	e8 87 f5 ff ff       	call   101170 <idt_set_entry>
  101be9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101bee:	8d 0d e6 20 10 00    	lea    0x1020e6,%ecx
  101bf4:	ba 08 00 00 00       	mov    $0x8,%edx
  101bf9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  101bfe:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101c05:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c09:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c10:	00 
  101c11:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c18:	00 
  101c19:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101c1f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101c25:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101c2b:	e8 40 f5 ff ff       	call   101170 <idt_set_entry>
  101c30:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101c35:	8d 0d ec 20 10 00    	lea    0x1020ec,%ecx
  101c3b:	ba 08 00 00 00       	mov    $0x8,%edx
  101c40:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101c45:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101c4c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c50:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c57:	00 
  101c58:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c5f:	00 
  101c60:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101c66:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101c6c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101c72:	e8 f9 f4 ff ff       	call   101170 <idt_set_entry>
  101c77:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101c7c:	8d 0d f2 20 10 00    	lea    0x1020f2,%ecx
  101c82:	ba 08 00 00 00       	mov    $0x8,%edx
  101c87:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  101c8c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101c93:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c97:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c9e:	00 
  101c9f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ca6:	00 
  101ca7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101cad:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101cb3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101cb9:	e8 b2 f4 ff ff       	call   101170 <idt_set_entry>
  101cbe:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101cc3:	8d 0d f8 20 10 00    	lea    0x1020f8,%ecx
  101cc9:	ba 08 00 00 00       	mov    $0x8,%edx
  101cce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  101cd3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101cda:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cde:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ce5:	00 
  101ce6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ced:	00 
  101cee:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101cf4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101cfa:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101d00:	e8 6b f4 ff ff       	call   101170 <idt_set_entry>
  101d05:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101d0a:	8d 0d fe 20 10 00    	lea    0x1020fe,%ecx
  101d10:	ba 08 00 00 00       	mov    $0x8,%edx
  101d15:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  101d1a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101d21:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d25:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d2c:	00 
  101d2d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d34:	00 
  101d35:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101d3b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101d41:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101d47:	e8 24 f4 ff ff       	call   101170 <idt_set_entry>
  101d4c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101d51:	8d 0d 04 21 10 00    	lea    0x102104,%ecx
  101d57:	ba 08 00 00 00       	mov    $0x8,%edx
  101d5c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101d61:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101d68:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d6c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d73:	00 
  101d74:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d7b:	00 
  101d7c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101d82:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101d88:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101d8e:	e8 dd f3 ff ff       	call   101170 <idt_set_entry>
  101d93:	b8 30 00 00 00       	mov    $0x30,%eax
  101d98:	8d 0d 0a 21 10 00    	lea    0x10210a,%ecx
  101d9e:	ba 08 00 00 00       	mov    $0x8,%edx
  101da3:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101da8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101daf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101db3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dba:	00 
  101dbb:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101dc2:	00 
  101dc3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101dc9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101dcf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101dd5:	e8 96 f3 ff ff       	call   101170 <idt_set_entry>
  101dda:	b8 05 00 00 00       	mov    $0x5,%eax
  101ddf:	8d 0d 08 82 10 00    	lea    0x108208,%ecx
  101de5:	ba 80 00 00 00       	mov    $0x80,%edx
  101dea:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  101def:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101df6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dfa:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101e01:	00 
  101e02:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101e09:	00 
  101e0a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101e10:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101e16:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101e1c:	e8 df f0 ff ff       	call   100f00 <set_gdt_entry>
  101e21:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101e26:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101e29:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101e2d:	fb                   	sti    
}
  101e2e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101e34:	5e                   	pop    %esi
  101e35:	5d                   	pop    %ebp
  101e36:	c3                   	ret    
  101e37:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101e3e:	00 00 

00101e40 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101e40:	55                   	push   %ebp
  101e41:	89 e5                	mov    %esp,%ebp
  101e43:	50                   	push   %eax
  101e44:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101e48:	66 89 c1             	mov    %ax,%cx
  101e4b:	8a 55 0c             	mov    0xc(%ebp),%dl
  101e4e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101e52:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101e55:	8a 45 fd             	mov    -0x3(%ebp),%al
  101e58:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101e5c:	ee                   	out    %al,(%dx)
}
  101e5d:	83 c4 04             	add    $0x4,%esp
  101e60:	5d                   	pop    %ebp
  101e61:	c3                   	ret    
  101e62:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101e69:	1f 84 00 00 00 00 00 

00101e70 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101e70:	55                   	push   %ebp
  101e71:	89 e5                	mov    %esp,%ebp
  101e73:	83 ec 08             	sub    $0x8,%esp
  101e76:	8b 45 0c             	mov    0xc(%ebp),%eax
  101e79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101e7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101e7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101e82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e85:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101e88:	89 04 8d 28 a3 10 00 	mov    %eax,0x10a328(,%ecx,4)
	handler_set[i] = 1;
  101e8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101e92:	c7 04 85 28 a2 10 00 	movl   $0x1,0x10a228(,%eax,4)
  101e99:	01 00 00 00 
}
  101e9d:	83 c4 08             	add    $0x8,%esp
  101ea0:	5d                   	pop    %ebp
  101ea1:	c3                   	ret    
  101ea2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101ea9:	1f 84 00 00 00 00 00 

00101eb0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  101eb0:	55                   	push   %ebp
  101eb1:	89 e5                	mov    %esp,%ebp
  101eb3:	83 ec 28             	sub    $0x28,%esp
  101eb6:	8b 45 08             	mov    0x8(%ebp),%eax
  101eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  101ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ebf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  101ec2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ec5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  101ecc:	0f 87 3d 00 00 00    	ja     101f0f <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  101ed2:	e8 d9 21 00 00       	call   1040b0 <isSchedulingEnabled>
  101ed7:	3d 00 00 00 00       	cmp    $0x0,%eax
  101edc:	0f 85 1a 00 00 00    	jne    101efc <handle_interrupt+0x4c>
  101ee2:	8d 05 56 92 10 00    	lea    0x109256,%eax
			show_cod(cpu, "Kernel PANIC!");
  101ee8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101eeb:	89 0c 24             	mov    %ecx,(%esp)
  101eee:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ef2:	e8 c9 e1 ff ff       	call   1000c0 <show_cod>
		} else {
  101ef7:	e9 0e 00 00 00       	jmp    101f0a <handle_interrupt+0x5a>
			new_cpu = schedule_exception(cpu);
  101efc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101eff:	89 04 24             	mov    %eax,(%esp)
  101f02:	e8 19 23 00 00       	call   104220 <schedule_exception>
  101f07:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101f0a:	e9 03 01 00 00       	jmp    102012 <handle_interrupt+0x162>
  101f0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f12:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f19:	0f 82 b1 00 00 00    	jb     101fd0 <handle_interrupt+0x120>
  101f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f22:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101f29:	0f 87 a1 00 00 00    	ja     101fd0 <handle_interrupt+0x120>
		if (cpu->intr >= 0x28) {
  101f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f32:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101f39:	0f 82 24 00 00 00    	jb     101f63 <handle_interrupt+0xb3>
  101f3f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101f44:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101f49:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101f50:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101f57:	00 
  101f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f5b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101f5e:	e8 dd fe ff ff       	call   101e40 <outb>
		}

		if (cpu->intr == 0x20) {
  101f63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f66:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f6d:	0f 85 13 00 00 00    	jne    101f86 <handle_interrupt+0xd6>
			new_cpu = schedule(cpu);
  101f73:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f76:	89 04 24             	mov    %eax,(%esp)
  101f79:	e8 e2 26 00 00       	call   104660 <schedule>
  101f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  101f81:	e9 29 00 00 00       	jmp    101faf <handle_interrupt+0xff>
		else
		{
            if (handler_set[cpu->intr]) {
  101f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f89:	8b 40 1c             	mov    0x1c(%eax),%eax
  101f8c:	81 3c 85 28 a2 10 00 	cmpl   $0x0,0x10a228(,%eax,4)
  101f93:	00 00 00 00 
  101f97:	0f 84 0d 00 00 00    	je     101faa <handle_interrupt+0xfa>
                handlers[cpu->intr]();
  101f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fa0:	8b 40 1c             	mov    0x1c(%eax),%eax
  101fa3:	ff 14 85 28 a3 10 00 	call   *0x10a328(,%eax,4)
  101faa:	e9 00 00 00 00       	jmp    101faf <handle_interrupt+0xff>
  101faf:	b8 20 00 00 00       	mov    $0x20,%eax
            }
		}

        outb(0x20, 0x20);
  101fb4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101fbb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101fc2:	00 
  101fc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101fc6:	e8 75 fe ff ff       	call   101e40 <outb>
	} else if (cpu->intr == 0x30) {
  101fcb:	e9 3d 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  101fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fd3:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101fda:	0f 85 13 00 00 00    	jne    101ff3 <handle_interrupt+0x143>
		new_cpu = syscall(new_cpu);
  101fe0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fe3:	89 04 24             	mov    %eax,(%esp)
  101fe6:	e8 55 01 00 00       	call   102140 <syscall>
  101feb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101fee:	e9 15 00 00 00       	jmp    102008 <handle_interrupt+0x158>
  101ff3:	8d 05 64 92 10 00    	lea    0x109264,%eax
		show_cod(cpu, "Unknown Interrupt!");
  101ff9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101ffc:	89 0c 24             	mov    %ecx,(%esp)
  101fff:	89 44 24 04          	mov    %eax,0x4(%esp)
  102003:	e8 b8 e0 ff ff       	call   1000c0 <show_cod>
  102008:	e9 00 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  10200d:	e9 00 00 00 00       	jmp    102012 <handle_interrupt+0x162>
	}

	return new_cpu;
  102012:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102015:	83 c4 28             	add    $0x28,%esp
  102018:	5d                   	pop    %ebp
  102019:	c3                   	ret    
  10201a:	66 90                	xchg   %ax,%ax

0010201c <intr_stub_0>:
  10201c:	6a 00                	push   $0x0
  10201e:	6a 00                	push   $0x0
  102020:	e9 eb 00 00 00       	jmp    102110 <intr_common_handler>

00102025 <intr_stub_1>:
  102025:	6a 00                	push   $0x0
  102027:	6a 01                	push   $0x1
  102029:	e9 e2 00 00 00       	jmp    102110 <intr_common_handler>

0010202e <intr_stub_2>:
  10202e:	6a 00                	push   $0x0
  102030:	6a 02                	push   $0x2
  102032:	e9 d9 00 00 00       	jmp    102110 <intr_common_handler>

00102037 <intr_stub_3>:
  102037:	6a 00                	push   $0x0
  102039:	6a 03                	push   $0x3
  10203b:	e9 d0 00 00 00       	jmp    102110 <intr_common_handler>

00102040 <intr_stub_4>:
  102040:	6a 00                	push   $0x0
  102042:	6a 04                	push   $0x4
  102044:	e9 c7 00 00 00       	jmp    102110 <intr_common_handler>

00102049 <intr_stub_5>:
  102049:	6a 00                	push   $0x0
  10204b:	6a 05                	push   $0x5
  10204d:	e9 be 00 00 00       	jmp    102110 <intr_common_handler>

00102052 <intr_stub_6>:
  102052:	6a 00                	push   $0x0
  102054:	6a 06                	push   $0x6
  102056:	e9 b5 00 00 00       	jmp    102110 <intr_common_handler>

0010205b <intr_stub_7>:
  10205b:	6a 00                	push   $0x0
  10205d:	6a 07                	push   $0x7
  10205f:	e9 ac 00 00 00       	jmp    102110 <intr_common_handler>

00102064 <intr_stub_8>:
  102064:	6a 08                	push   $0x8
  102066:	e9 a5 00 00 00       	jmp    102110 <intr_common_handler>

0010206b <intr_stub_9>:
  10206b:	6a 00                	push   $0x0
  10206d:	6a 09                	push   $0x9
  10206f:	e9 9c 00 00 00       	jmp    102110 <intr_common_handler>

00102074 <intr_stub_10>:
  102074:	6a 0a                	push   $0xa
  102076:	e9 95 00 00 00       	jmp    102110 <intr_common_handler>

0010207b <intr_stub_11>:
  10207b:	6a 0b                	push   $0xb
  10207d:	e9 8e 00 00 00       	jmp    102110 <intr_common_handler>

00102082 <intr_stub_12>:
  102082:	6a 0c                	push   $0xc
  102084:	e9 87 00 00 00       	jmp    102110 <intr_common_handler>

00102089 <intr_stub_13>:
  102089:	6a 0d                	push   $0xd
  10208b:	e9 80 00 00 00       	jmp    102110 <intr_common_handler>

00102090 <intr_stub_14>:
  102090:	6a 0e                	push   $0xe
  102092:	eb 7c                	jmp    102110 <intr_common_handler>

00102094 <intr_stub_15>:
  102094:	6a 00                	push   $0x0
  102096:	6a 0f                	push   $0xf
  102098:	eb 76                	jmp    102110 <intr_common_handler>

0010209a <intr_stub_16>:
  10209a:	6a 00                	push   $0x0
  10209c:	6a 10                	push   $0x10
  10209e:	eb 70                	jmp    102110 <intr_common_handler>

001020a0 <intr_stub_17>:
  1020a0:	6a 11                	push   $0x11
  1020a2:	eb 6c                	jmp    102110 <intr_common_handler>

001020a4 <intr_stub_18>:
  1020a4:	6a 00                	push   $0x0
  1020a6:	6a 12                	push   $0x12
  1020a8:	eb 66                	jmp    102110 <intr_common_handler>

001020aa <intr_stub_32>:
  1020aa:	6a 00                	push   $0x0
  1020ac:	6a 20                	push   $0x20
  1020ae:	eb 60                	jmp    102110 <intr_common_handler>

001020b0 <intr_stub_33>:
  1020b0:	6a 00                	push   $0x0
  1020b2:	6a 21                	push   $0x21
  1020b4:	eb 5a                	jmp    102110 <intr_common_handler>

001020b6 <intr_stub_34>:
  1020b6:	6a 00                	push   $0x0
  1020b8:	6a 22                	push   $0x22
  1020ba:	eb 54                	jmp    102110 <intr_common_handler>

001020bc <intr_stub_35>:
  1020bc:	6a 00                	push   $0x0
  1020be:	6a 23                	push   $0x23
  1020c0:	eb 4e                	jmp    102110 <intr_common_handler>

001020c2 <intr_stub_36>:
  1020c2:	6a 00                	push   $0x0
  1020c4:	6a 24                	push   $0x24
  1020c6:	eb 48                	jmp    102110 <intr_common_handler>

001020c8 <intr_stub_37>:
  1020c8:	6a 00                	push   $0x0
  1020ca:	6a 25                	push   $0x25
  1020cc:	eb 42                	jmp    102110 <intr_common_handler>

001020ce <intr_stub_38>:
  1020ce:	6a 00                	push   $0x0
  1020d0:	6a 26                	push   $0x26
  1020d2:	eb 3c                	jmp    102110 <intr_common_handler>

001020d4 <intr_stub_39>:
  1020d4:	6a 00                	push   $0x0
  1020d6:	6a 27                	push   $0x27
  1020d8:	eb 36                	jmp    102110 <intr_common_handler>

001020da <intr_stub_40>:
  1020da:	6a 00                	push   $0x0
  1020dc:	6a 28                	push   $0x28
  1020de:	eb 30                	jmp    102110 <intr_common_handler>

001020e0 <intr_stub_41>:
  1020e0:	6a 00                	push   $0x0
  1020e2:	6a 29                	push   $0x29
  1020e4:	eb 2a                	jmp    102110 <intr_common_handler>

001020e6 <intr_stub_42>:
  1020e6:	6a 00                	push   $0x0
  1020e8:	6a 2a                	push   $0x2a
  1020ea:	eb 24                	jmp    102110 <intr_common_handler>

001020ec <intr_stub_43>:
  1020ec:	6a 00                	push   $0x0
  1020ee:	6a 2b                	push   $0x2b
  1020f0:	eb 1e                	jmp    102110 <intr_common_handler>

001020f2 <intr_stub_44>:
  1020f2:	6a 00                	push   $0x0
  1020f4:	6a 2c                	push   $0x2c
  1020f6:	eb 18                	jmp    102110 <intr_common_handler>

001020f8 <intr_stub_45>:
  1020f8:	6a 00                	push   $0x0
  1020fa:	6a 2d                	push   $0x2d
  1020fc:	eb 12                	jmp    102110 <intr_common_handler>

001020fe <intr_stub_46>:
  1020fe:	6a 00                	push   $0x0
  102100:	6a 2e                	push   $0x2e
  102102:	eb 0c                	jmp    102110 <intr_common_handler>

00102104 <intr_stub_47>:
  102104:	6a 00                	push   $0x0
  102106:	6a 2f                	push   $0x2f
  102108:	eb 06                	jmp    102110 <intr_common_handler>

0010210a <intr_stub_48>:
  10210a:	6a 00                	push   $0x0
  10210c:	6a 30                	push   $0x30
  10210e:	eb 00                	jmp    102110 <intr_common_handler>

00102110 <intr_common_handler>:
  102110:	55                   	push   %ebp
  102111:	57                   	push   %edi
  102112:	56                   	push   %esi
  102113:	52                   	push   %edx
  102114:	51                   	push   %ecx
  102115:	53                   	push   %ebx
  102116:	50                   	push   %eax
  102117:	54                   	push   %esp
  102118:	66 b8 10 00          	mov    $0x10,%ax
  10211c:	66 8e d8             	mov    %ax,%ds
  10211f:	66 8e c0             	mov    %ax,%es
  102122:	e8 89 fd ff ff       	call   101eb0 <handle_interrupt>
  102127:	89 c4                	mov    %eax,%esp
  102129:	66 b8 23 00          	mov    $0x23,%ax
  10212d:	66 8e d8             	mov    %ax,%ds
  102130:	66 8e c0             	mov    %ax,%es
  102133:	58                   	pop    %eax
  102134:	5b                   	pop    %ebx
  102135:	59                   	pop    %ecx
  102136:	5a                   	pop    %edx
  102137:	5e                   	pop    %esi
  102138:	5f                   	pop    %edi
  102139:	5d                   	pop    %ebp
  10213a:	83 c4 08             	add    $0x8,%esp
  10213d:	cf                   	iret   
  10213e:	66 90                	xchg   %ax,%ax

00102140 <syscall>:
    char* stdin;
    char* stdout;
    char* stderr;
};

struct cpu_state* syscall(struct cpu_state* cpu) {
  102140:	55                   	push   %ebp
  102141:	89 e5                	mov    %esp,%ebp
  102143:	53                   	push   %ebx
  102144:	57                   	push   %edi
  102145:	56                   	push   %esi
  102146:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
  10214c:	8b 45 08             	mov    0x8(%ebp),%eax
  10214f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    save_cpu_state(cpu);
  102152:	89 e1                	mov    %esp,%ecx
  102154:	89 01                	mov    %eax,(%ecx)
  102156:	e8 c5 24 00 00       	call   104620 <save_cpu_state>

    cpu = get_current_task()->cpuState;
  10215b:	e8 60 1f 00 00       	call   1040c0 <get_current_task>
  102160:	8b 40 04             	mov    0x4(%eax),%eax
  102163:	89 45 ec             	mov    %eax,-0x14(%ebp)

	switch (cpu->eax) {
  102166:	8b 00                	mov    (%eax),%eax
  102168:	89 c1                	mov    %eax,%ecx
  10216a:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  102170:	89 45 88             	mov    %eax,-0x78(%ebp)
  102173:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  102176:	0f 8f 29 00 00 00    	jg     1021a5 <syscall+0x65>
  10217c:	e9 00 00 00 00       	jmp    102181 <syscall+0x41>
  102181:	8b 45 88             	mov    -0x78(%ebp),%eax
  102184:	48                   	dec    %eax
  102185:	89 c1                	mov    %eax,%ecx
  102187:	83 e9 14             	sub    $0x14,%ecx
  10218a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10218d:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  102193:	0f 87 7e 07 00 00    	ja     102917 <syscall+0x7d7>
  102199:	8b 45 80             	mov    -0x80(%ebp),%eax
  10219c:	8b 0c 85 44 90 10 00 	mov    0x109044(,%eax,4),%ecx
  1021a3:	ff e1                	jmp    *%ecx
  1021a5:	8b 45 88             	mov    -0x78(%ebp),%eax
  1021a8:	05 37 ff ff ff       	add    $0xffffff37,%eax
  1021ad:	89 c1                	mov    %eax,%ecx
  1021af:	83 e9 04             	sub    $0x4,%ecx
  1021b2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  1021b8:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  1021be:	0f 87 53 07 00 00    	ja     102917 <syscall+0x7d7>
  1021c4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  1021ca:	8b 0c 85 30 90 10 00 	mov    0x109030(,%eax,4),%ecx
  1021d1:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		return terminate_current(cpu);
  1021d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1021d6:	89 04 24             	mov    %eax,(%esp)
  1021d9:	e8 82 21 00 00       	call   104360 <terminate_current>
  1021de:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1021e1:	e9 54 07 00 00       	jmp    10293a <syscall+0x7fa>

    case 3: /* exec */
    {
        char* path = strclone((char*) cpu->ebx);
  1021e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1021e9:	8b 40 04             	mov    0x4(%eax),%eax
  1021ec:	89 04 24             	mov    %eax,(%esp)
  1021ef:	e8 ac 2e 00 00       	call   1050a0 <strclone>
  1021f4:	b9 00 00 00 00       	mov    $0x0,%ecx
  1021f9:	ba 10 00 00 00       	mov    $0x10,%edx
  1021fe:	8d 75 d0             	lea    -0x30(%ebp),%esi
  102201:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct exec_info* einp = (void*) cpu->edx;
  102204:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102207:	8b 40 0c             	mov    0xc(%eax),%eax
  10220a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        struct exec_info ein = {
  10220d:	89 34 24             	mov    %esi,(%esp)
  102210:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102217:	00 
  102218:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  10221f:	00 
  102220:	89 95 70 ff ff ff    	mov    %edx,-0x90(%ebp)
  102226:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10222c:	e8 6f 2b 00 00       	call   104da0 <memset>
            .stdin = 0,
            .stdout = 0,
            .stderr = 0
        };

        if(einp != 0) {
  102231:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  102238:	0f 84 43 00 00 00    	je     102281 <syscall+0x141>
            ein.execPath = strclone(einp->execPath);
  10223e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102241:	8b 00                	mov    (%eax),%eax
  102243:	89 04 24             	mov    %eax,(%esp)
  102246:	e8 55 2e 00 00       	call   1050a0 <strclone>
  10224b:	89 45 d0             	mov    %eax,-0x30(%ebp)
            ein.stdin = strclone(einp->stdin);
  10224e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102251:	8b 40 04             	mov    0x4(%eax),%eax
  102254:	89 04 24             	mov    %eax,(%esp)
  102257:	e8 44 2e 00 00       	call   1050a0 <strclone>
  10225c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            ein.stdout = strclone(einp->stdout);
  10225f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102262:	8b 40 08             	mov    0x8(%eax),%eax
  102265:	89 04 24             	mov    %eax,(%esp)
  102268:	e8 33 2e 00 00       	call   1050a0 <strclone>
  10226d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            ein.stderr = strclone(einp->stderr);
  102270:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102273:	8b 40 0c             	mov    0xc(%eax),%eax
  102276:	89 04 24             	mov    %eax,(%esp)
  102279:	e8 22 2e 00 00       	call   1050a0 <strclone>
  10227e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        }

        cpu->eax = vfs_exec(path, (char**) cpu->ecx, ein.execPath, ein.stdin, ein.stdout, ein.stderr);
  102281:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102284:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102287:	8b 49 08             	mov    0x8(%ecx),%ecx
  10228a:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10228d:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  102290:	8b 7d d8             	mov    -0x28(%ebp),%edi
  102293:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  102296:	89 04 24             	mov    %eax,(%esp)
  102299:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10229d:	89 54 24 08          	mov    %edx,0x8(%esp)
  1022a1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1022a5:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1022a9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
  1022ad:	e8 ee 36 00 00       	call   1059a0 <vfs_exec>
  1022b2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1022b5:	89 01                	mov    %eax,(%ecx)

        if(einp != 0) {
  1022b7:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  1022be:	0f 84 2c 00 00 00    	je     1022f0 <syscall+0x1b0>
            free(ein.execPath);
  1022c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1022c7:	89 04 24             	mov    %eax,(%esp)
  1022ca:	e8 31 28 00 00       	call   104b00 <free>
            free(ein.stdin);
  1022cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1022d2:	89 04 24             	mov    %eax,(%esp)
  1022d5:	e8 26 28 00 00       	call   104b00 <free>
            free(ein.stdout);
  1022da:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1022dd:	89 04 24             	mov    %eax,(%esp)
  1022e0:	e8 1b 28 00 00       	call   104b00 <free>
            free(ein.stderr);
  1022e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1022e8:	89 04 24             	mov    %eax,(%esp)
  1022eb:	e8 10 28 00 00       	call   104b00 <free>
        }

        free(path);
  1022f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1022f3:	89 04 24             	mov    %eax,(%esp)
  1022f6:	e8 05 28 00 00       	call   104b00 <free>
    }
        break;
  1022fb:	e9 34 06 00 00       	jmp    102934 <syscall+0x7f4>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  102300:	e8 bb 1d 00 00       	call   1040c0 <get_current_task>
  102305:	8b 40 18             	mov    0x18(%eax),%eax
  102308:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10230b:	89 01                	mov    %eax,(%ecx)
    }
        break;
  10230d:	e9 22 06 00 00       	jmp    102934 <syscall+0x7f4>

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  102312:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102315:	89 04 24             	mov    %eax,(%esp)
  102318:	e8 43 23 00 00       	call   104660 <schedule>
  10231d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
        break;
  102320:	e9 0f 06 00 00       	jmp    102934 <syscall+0x7f4>

    case 6: /* getExecPath */
    {
        char* dest = (char*)cpu->ebx;
  102325:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102328:	8b 40 04             	mov    0x4(%eax),%eax
  10232b:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if(get_current_task()->execPath != 0) strcpy(dest, get_current_task()->execPath);
  10232e:	e8 8d 1d 00 00       	call   1040c0 <get_current_task>
  102333:	81 78 20 00 00 00 00 	cmpl   $0x0,0x20(%eax)
  10233a:	0f 84 29 00 00 00    	je     102369 <syscall+0x229>
  102340:	8b 45 cc             	mov    -0x34(%ebp),%eax
  102343:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  102349:	e8 72 1d 00 00       	call   1040c0 <get_current_task>
  10234e:	8b 40 20             	mov    0x20(%eax),%eax
  102351:	89 e1                	mov    %esp,%ecx
  102353:	89 41 04             	mov    %eax,0x4(%ecx)
  102356:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
  10235c:	89 01                	mov    %eax,(%ecx)
  10235e:	e8 dd 2c 00 00       	call   105040 <strcpy>
  102363:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
    }
        break;
  102369:	e9 c6 05 00 00       	jmp    102934 <syscall+0x7f4>

    case 7: /* changeExecPath */
    {
        vfs_reset_error();
  10236e:	e8 ad 2f 00 00       	call   105320 <vfs_reset_error>
        char* path = strclone((char*) cpu->ebx);
  102373:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102376:	8b 40 04             	mov    0x4(%eax),%eax
  102379:	89 04 24             	mov    %eax,(%esp)
  10237c:	e8 1f 2d 00 00       	call   1050a0 <strclone>
  102381:	89 45 c8             	mov    %eax,-0x38(%ebp)

        if(get_current_task()->execPath != 0) free(get_current_task()->execPath);
  102384:	e8 37 1d 00 00       	call   1040c0 <get_current_task>
  102389:	81 78 20 00 00 00 00 	cmpl   $0x0,0x20(%eax)
  102390:	0f 84 10 00 00 00    	je     1023a6 <syscall+0x266>
  102396:	e8 25 1d 00 00       	call   1040c0 <get_current_task>
  10239b:	8b 40 20             	mov    0x20(%eax),%eax
  10239e:	89 04 24             	mov    %eax,(%esp)
  1023a1:	e8 5a 27 00 00       	call   104b00 <free>

        char* new = vfs_resolve_path(path);
  1023a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1023a9:	89 04 24             	mov    %eax,(%esp)
  1023ac:	e8 4f 3c 00 00       	call   106000 <vfs_resolve_path>
  1023b1:	89 45 c4             	mov    %eax,-0x3c(%ebp)

        cpu->eax = 0;
  1023b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1023b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        if(new) {
  1023bd:	81 7d c4 00 00 00 00 	cmpl   $0x0,-0x3c(%ebp)
  1023c4:	0f 84 20 00 00 00    	je     1023ea <syscall+0x2aa>
            get_current_task()->execPath = new;
  1023ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1023cd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1023d3:	e8 e8 1c 00 00       	call   1040c0 <get_current_task>
  1023d8:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
  1023de:	89 48 20             	mov    %ecx,0x20(%eax)
            cpu->eax = 1;
  1023e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1023e4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        }

        free(path);
  1023ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1023ed:	89 04 24             	mov    %eax,(%esp)
  1023f0:	e8 0b 27 00 00       	call   104b00 <free>
    }
        break;
  1023f5:	e9 3a 05 00 00       	jmp    102934 <syscall+0x7f4>

	case 10: /* fopen */
	{
        vfs_reset_error();
  1023fa:	e8 21 2f 00 00       	call   105320 <vfs_reset_error>
	    char* name = strclone((char*) cpu->ebx);
  1023ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102402:	8b 40 04             	mov    0x4(%eax),%eax
  102405:	89 04 24             	mov    %eax,(%esp)
  102408:	e8 93 2c 00 00       	call   1050a0 <strclone>
  10240d:	89 45 c0             	mov    %eax,-0x40(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  102410:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102413:	8b 40 08             	mov    0x8(%eax),%eax
  102416:	89 45 bc             	mov    %eax,-0x44(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  102419:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10241c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10241f:	89 04 24             	mov    %eax,(%esp)
  102422:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102426:	e8 a5 31 00 00       	call   1055d0 <vfs_open>
  10242b:	89 45 b8             	mov    %eax,-0x48(%ebp)
	    if(handle) {
  10242e:	81 7d b8 00 00 00 00 	cmpl   $0x0,-0x48(%ebp)
  102435:	0f 84 1e 00 00 00    	je     102459 <syscall+0x319>
	        register_handle(handle);
  10243b:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10243e:	89 04 24             	mov    %eax,(%esp)
  102441:	e8 8a 1c 00 00       	call   1040d0 <register_handle>
	        cpu->eax = (uint32_t) handle;
  102446:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102449:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10244c:	89 0a                	mov    %ecx,(%edx)
	    }
  10244e:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  102454:	e9 09 00 00 00       	jmp    102462 <syscall+0x322>
	    else
	    {
	        cpu->eax = 0;
  102459:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10245c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  102462:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102465:	89 04 24             	mov    %eax,(%esp)
  102468:	e8 93 26 00 00       	call   104b00 <free>
	}
	    break;
  10246d:	e9 c2 04 00 00       	jmp    102934 <syscall+0x7f4>

	case 11: /* fclose */
	{
        vfs_reset_error();
  102472:	e8 a9 2e 00 00       	call   105320 <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  102477:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10247a:	8b 40 04             	mov    0x4(%eax),%eax
  10247d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	    if(!unregister_handle(handle)) {
  102480:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102483:	89 04 24             	mov    %eax,(%esp)
  102486:	e8 a5 1c 00 00       	call   104130 <unregister_handle>
  10248b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102490:	0f 85 1f 00 00 00    	jne    1024b5 <syscall+0x375>
	        vfs_close(handle);
  102496:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102499:	89 04 24             	mov    %eax,(%esp)
  10249c:	e8 af 31 00 00       	call   105650 <vfs_close>

	        cpu->eax = 0;
  1024a1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1024a4:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  1024aa:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  1024b0:	e9 09 00 00 00       	jmp    1024be <syscall+0x37e>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  1024b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1024b8:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  1024be:	e9 71 04 00 00       	jmp    102934 <syscall+0x7f4>

	case 12: /* fwrite */
	{
        vfs_reset_error();
  1024c3:	e8 58 2e 00 00       	call   105320 <vfs_reset_error>
	    struct res_handle* handle = (void*) cpu->ebx;
  1024c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1024cb:	8b 40 04             	mov    0x4(%eax),%eax
  1024ce:	89 45 b0             	mov    %eax,-0x50(%ebp)
	    if(handle != 0) {
  1024d1:	81 7d b0 00 00 00 00 	cmpl   $0x0,-0x50(%ebp)
  1024d8:	0f 84 3c 00 00 00    	je     10251a <syscall+0x3da>
  1024de:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  1024e3:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  1024e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1024e9:	8b 52 08             	mov    0x8(%edx),%edx
  1024ec:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1024ef:	8b 76 0c             	mov    0xc(%esi),%esi
  1024f2:	89 0c 24             	mov    %ecx,(%esp)
  1024f5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1024f9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1024fd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102504:	00 
  102505:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  10250b:	e8 90 32 00 00       	call   1057a0 <vfs_write>
  102510:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102513:	89 01                	mov    %eax,(%ecx)
	    }
  102515:	e9 09 00 00 00       	jmp    102523 <syscall+0x3e3>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  10251a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10251d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  102523:	e9 0c 04 00 00       	jmp    102934 <syscall+0x7f4>

	case 13: /* fread */
	{
        vfs_reset_error();
  102528:	e8 f3 2d 00 00       	call   105320 <vfs_reset_error>
        struct res_handle* handle = (void*) cpu->ebx;
  10252d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102530:	8b 40 04             	mov    0x4(%eax),%eax
  102533:	89 45 ac             	mov    %eax,-0x54(%ebp)
        if(handle != 0) {
  102536:	81 7d ac 00 00 00 00 	cmpl   $0x0,-0x54(%ebp)
  10253d:	0f 84 3c 00 00 00    	je     10257f <syscall+0x43f>
  102543:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  102548:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  10254b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10254e:	8b 52 08             	mov    0x8(%edx),%edx
  102551:	8b 75 ec             	mov    -0x14(%ebp),%esi
  102554:	8b 76 0c             	mov    0xc(%esi),%esi
  102557:	89 0c 24             	mov    %ecx,(%esp)
  10255a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10255e:	89 74 24 08          	mov    %esi,0x8(%esp)
  102562:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102569:	00 
  10256a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  102570:	e8 2b 31 00 00       	call   1056a0 <vfs_read>
  102575:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102578:	89 01                	mov    %eax,(%ecx)
        }
  10257a:	e9 09 00 00 00       	jmp    102588 <syscall+0x448>
        else
        {
            cpu->eax = RW_ERR_VFS;
  10257f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102582:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  102588:	e9 a7 03 00 00       	jmp    102934 <syscall+0x7f4>

	case 14: /* fmkfifo */
	{
        vfs_reset_error();
  10258d:	e8 8e 2d 00 00       	call   105320 <vfs_reset_error>
        char* name = strclone((char*) cpu->ebx);
  102592:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102595:	8b 40 04             	mov    0x4(%eax),%eax
  102598:	89 04 24             	mov    %eax,(%esp)
  10259b:	e8 00 2b 00 00       	call   1050a0 <strclone>
  1025a0:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
  1025a3:	89 45 a8             	mov    %eax,-0x58(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  1025a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1025a9:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  1025af:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  1025b5:	e8 56 15 00 00       	call   103b10 <ramfs_fifo_driver_struct>
  1025ba:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
  1025c1:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
  1025c7:	89 0c 24             	mov    %ecx,(%esp)
  1025ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  1025ce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
  1025d4:	89 44 24 08          	mov    %eax,0x8(%esp)
  1025d8:	e8 13 2f 00 00       	call   1054f0 <vfs_create_kfile>
  1025dd:	b9 03 00 00 00       	mov    $0x3,%ecx

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  1025e2:	8b 55 a8             	mov    -0x58(%ebp),%edx
  1025e5:	89 14 24             	mov    %edx,(%esp)
  1025e8:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  1025ef:	00 
  1025f0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  1025f6:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
  1025fc:	e8 cf 2f 00 00       	call   1055d0 <vfs_open>
  102601:	89 45 a0             	mov    %eax,-0x60(%ebp)
        if(handle) {
  102604:	81 7d a0 00 00 00 00 	cmpl   $0x0,-0x60(%ebp)
  10260b:	0f 84 1e 00 00 00    	je     10262f <syscall+0x4ef>
            register_handle(handle);
  102611:	8b 45 a0             	mov    -0x60(%ebp),%eax
  102614:	89 04 24             	mov    %eax,(%esp)
  102617:	e8 b4 1a 00 00       	call   1040d0 <register_handle>
            cpu->eax = (uint32_t) handle;
  10261c:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  10261f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102622:	89 0a                	mov    %ecx,(%edx)
        }
  102624:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  10262a:	e9 09 00 00 00       	jmp    102638 <syscall+0x4f8>
        else
        {
            cpu->eax = 0;
  10262f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102632:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  102638:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10263b:	89 04 24             	mov    %eax,(%esp)
  10263e:	e8 bd 24 00 00       	call   104b00 <free>
	}
	    break;
  102643:	e9 ec 02 00 00       	jmp    102934 <syscall+0x7f4>

	case 15: /* getLastVFSErr */
	{
	    cpu->eax = get_current_task()->vfserr;
  102648:	e8 73 1a 00 00       	call   1040c0 <get_current_task>
  10264d:	8b 40 24             	mov    0x24(%eax),%eax
  102650:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102653:	89 01                	mov    %eax,(%ecx)
        vfs_reset_error();
  102655:	e8 c6 2c 00 00       	call   105320 <vfs_reset_error>
	}
	    break;
  10265a:	e9 d5 02 00 00       	jmp    102934 <syscall+0x7f4>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  10265f:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)

	    switch(cpu->ebx) {
  102666:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102669:	8b 40 04             	mov    0x4(%eax),%eax
  10266c:	89 c1                	mov    %eax,%ecx
  10266e:	83 e9 02             	sub    $0x2,%ecx
  102671:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  102677:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
  10267d:	0f 84 52 00 00 00    	je     1026d5 <syscall+0x595>
  102683:	e9 00 00 00 00       	jmp    102688 <syscall+0x548>
  102688:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
  10268e:	83 e8 01             	sub    $0x1,%eax
  102691:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  102697:	0f 84 28 00 00 00    	je     1026c5 <syscall+0x585>
  10269d:	e9 00 00 00 00       	jmp    1026a2 <syscall+0x562>
  1026a2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
  1026a8:	85 c0                	test   %eax,%eax
  1026aa:	0f 85 35 00 00 00    	jne    1026e5 <syscall+0x5a5>
  1026b0:	e9 00 00 00 00       	jmp    1026b5 <syscall+0x575>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  1026b5:	e8 06 1a 00 00       	call   1040c0 <get_current_task>
  1026ba:	8b 40 28             	mov    0x28(%eax),%eax
  1026bd:	89 45 9c             	mov    %eax,-0x64(%ebp)
	        break;
  1026c0:	e9 2b 00 00 00       	jmp    1026f0 <syscall+0x5b0>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  1026c5:	e8 f6 19 00 00       	call   1040c0 <get_current_task>
  1026ca:	8b 40 30             	mov    0x30(%eax),%eax
  1026cd:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
  1026d0:	e9 1b 00 00 00       	jmp    1026f0 <syscall+0x5b0>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  1026d5:	e8 e6 19 00 00       	call   1040c0 <get_current_task>
  1026da:	8b 40 2c             	mov    0x2c(%eax),%eax
  1026dd:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
  1026e0:	e9 0b 00 00 00       	jmp    1026f0 <syscall+0x5b0>
        default:
            handle = get_current_task()->stdout;
  1026e5:	e8 d6 19 00 00       	call   1040c0 <get_current_task>
  1026ea:	8b 40 28             	mov    0x28(%eax),%eax
  1026ed:	89 45 9c             	mov    %eax,-0x64(%ebp)
            break;
	    }

	    cpu->eax = (uint32_t) handle;
  1026f0:	8b 45 9c             	mov    -0x64(%ebp),%eax
  1026f3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1026f6:	89 01                	mov    %eax,(%ecx)
	}
	    break;
  1026f8:	e9 37 02 00 00       	jmp    102934 <syscall+0x7f4>

	case 21: /* fopenpmhandle */
	{
	    vfs_reset_error();
  1026fd:	e8 1e 2c 00 00       	call   105320 <vfs_reset_error>
	    char* path = strclone((char*)cpu->ecx);
  102702:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102705:	8b 40 08             	mov    0x8(%eax),%eax
  102708:	89 04 24             	mov    %eax,(%esp)
  10270b:	e8 90 29 00 00       	call   1050a0 <strclone>
  102710:	89 45 98             	mov    %eax,-0x68(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  102713:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  10271a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10271d:	81 78 04 01 00 00 00 	cmpl   $0x1,0x4(%eax)
  102724:	0f 85 07 00 00 00    	jne    102731 <syscall+0x5f1>
	        fm = FM_READ;
  10272a:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%ebp)
	    }

	    open = vfs_open(path, fm);
  102731:	8b 45 98             	mov    -0x68(%ebp),%eax
  102734:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  102737:	89 04 24             	mov    %eax,(%esp)
  10273a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10273e:	e8 8d 2e 00 00       	call   1055d0 <vfs_open>
  102743:	89 45 94             	mov    %eax,-0x6c(%ebp)

	    free(path);
  102746:	8b 45 98             	mov    -0x68(%ebp),%eax
  102749:	89 04 24             	mov    %eax,(%esp)
  10274c:	e8 af 23 00 00       	call   104b00 <free>

	    if(!open) {
  102751:	81 7d 94 00 00 00 00 	cmpl   $0x0,-0x6c(%ebp)
  102758:	0f 85 0e 00 00 00    	jne    10276c <syscall+0x62c>
	        cpu->eax = (uint32_t) -1;
  10275e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102761:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  102767:	e9 c8 01 00 00       	jmp    102934 <syscall+0x7f4>
	    }

	    struct res_handle* oldhandle = 0;
  10276c:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)

        switch(cpu->ebx) {
  102773:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102776:	8b 40 04             	mov    0x4(%eax),%eax
  102779:	89 c1                	mov    %eax,%ecx
  10277b:	83 e9 02             	sub    $0x2,%ecx
  10277e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  102784:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
  10278a:	0f 84 80 00 00 00    	je     102810 <syscall+0x6d0>
  102790:	e9 00 00 00 00       	jmp    102795 <syscall+0x655>
  102795:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  10279b:	83 e8 01             	sub    $0x1,%eax
  10279e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1027a4:	0f 84 3f 00 00 00    	je     1027e9 <syscall+0x6a9>
  1027aa:	e9 00 00 00 00       	jmp    1027af <syscall+0x66f>
  1027af:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  1027b5:	85 c0                	test   %eax,%eax
  1027b7:	0f 85 7a 00 00 00    	jne    102837 <syscall+0x6f7>
  1027bd:	e9 00 00 00 00       	jmp    1027c2 <syscall+0x682>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  1027c2:	e8 f9 18 00 00       	call   1040c0 <get_current_task>
  1027c7:	8b 40 28             	mov    0x28(%eax),%eax
  1027ca:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdout = open;
  1027cd:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1027d0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
  1027d6:	e8 e5 18 00 00       	call   1040c0 <get_current_task>
  1027db:	8b 8d 20 ff ff ff    	mov    -0xe0(%ebp),%ecx
  1027e1:	89 48 28             	mov    %ecx,0x28(%eax)
            break;
  1027e4:	e9 70 00 00 00       	jmp    102859 <syscall+0x719>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  1027e9:	e8 d2 18 00 00       	call   1040c0 <get_current_task>
  1027ee:	8b 40 30             	mov    0x30(%eax),%eax
  1027f1:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdin = open;
  1027f4:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1027f7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
  1027fd:	e8 be 18 00 00       	call   1040c0 <get_current_task>
  102802:	8b 8d 1c ff ff ff    	mov    -0xe4(%ebp),%ecx
  102808:	89 48 30             	mov    %ecx,0x30(%eax)
            break;
  10280b:	e9 49 00 00 00       	jmp    102859 <syscall+0x719>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  102810:	e8 ab 18 00 00       	call   1040c0 <get_current_task>
  102815:	8b 40 2c             	mov    0x2c(%eax),%eax
  102818:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stderr = open;
  10281b:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10281e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  102824:	e8 97 18 00 00       	call   1040c0 <get_current_task>
  102829:	8b 8d 18 ff ff ff    	mov    -0xe8(%ebp),%ecx
  10282f:	89 48 2c             	mov    %ecx,0x2c(%eax)
            break;
  102832:	e9 22 00 00 00       	jmp    102859 <syscall+0x719>
        default:
            oldhandle = get_current_task()->stdout;
  102837:	e8 84 18 00 00       	call   1040c0 <get_current_task>
  10283c:	8b 40 28             	mov    0x28(%eax),%eax
  10283f:	89 45 8c             	mov    %eax,-0x74(%ebp)
            get_current_task()->stdout = open;
  102842:	8b 45 94             	mov    -0x6c(%ebp),%eax
  102845:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
  10284b:	e8 70 18 00 00       	call   1040c0 <get_current_task>
  102850:	8b 8d 14 ff ff ff    	mov    -0xec(%ebp),%ecx
  102856:	89 48 28             	mov    %ecx,0x28(%eax)
            break;
        }

        if(oldhandle != 0) {
  102859:	81 7d 8c 00 00 00 00 	cmpl   $0x0,-0x74(%ebp)
  102860:	0f 84 11 00 00 00    	je     102877 <syscall+0x737>
            vfs_close(oldhandle);
  102866:	8b 45 8c             	mov    -0x74(%ebp),%eax
  102869:	89 04 24             	mov    %eax,(%esp)
  10286c:	e8 df 2d 00 00       	call   105650 <vfs_close>
  102871:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
        }

        cpu->eax = 0;
  102877:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10287a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  102880:	e9 af 00 00 00       	jmp    102934 <syscall+0x7f4>
  102885:	8d 05 77 92 10 00    	lea    0x109277,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  10288b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10288e:	8b 49 04             	mov    0x4(%ecx),%ecx
  102891:	89 04 24             	mov    %eax,(%esp)
  102894:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102898:	e8 13 da ff ff       	call   1002b0 <kprintf>
  10289d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028a0:	89 01                	mov    %eax,(%ecx)
		break;
  1028a2:	e9 8d 00 00 00       	jmp    102934 <syscall+0x7f4>
  1028a7:	8d 05 7a 92 10 00    	lea    0x10927a,%eax

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  1028ad:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028b0:	8b 49 04             	mov    0x4(%ecx),%ecx
  1028b3:	89 04 24             	mov    %eax,(%esp)
  1028b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1028ba:	e8 f1 d9 ff ff       	call   1002b0 <kprintf>
  1028bf:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028c2:	89 01                	mov    %eax,(%ecx)
		break;
  1028c4:	e9 6b 00 00 00       	jmp    102934 <syscall+0x7f4>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  1028c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028cc:	8b 40 04             	mov    0x4(%eax),%eax
  1028cf:	89 04 24             	mov    %eax,(%esp)
  1028d2:	e8 39 46 00 00       	call   106f10 <vmm_alloc_ucont>
  1028d7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028da:	89 01                	mov    %eax,(%ecx)
		break;
  1028dc:	e9 53 00 00 00       	jmp    102934 <syscall+0x7f4>

	case 204: /* vmm_free */
		cpu->eax = 0;
  1028e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  1028ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028ed:	81 78 04 00 10 40 01 	cmpl   $0x1401000,0x4(%eax)
  1028f4:	0f 82 0e 00 00 00    	jb     102908 <syscall+0x7c8>
			vmm_free((void*) cpu->ebx);
  1028fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028fd:	8b 40 04             	mov    0x4(%eax),%eax
  102900:	89 04 24             	mov    %eax,(%esp)
  102903:	e8 88 42 00 00       	call   106b90 <vmm_free>
		}
		break;
  102908:	e9 27 00 00 00       	jmp    102934 <syscall+0x7f4>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  10290d:	e8 fe 03 00 00       	call   102d10 <pmm_print_stats>
		break;
  102912:	e9 1d 00 00 00       	jmp    102934 <syscall+0x7f4>
  102917:	8d 05 7d 92 10 00    	lea    0x10927d,%eax

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  10291d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102920:	8b 09                	mov    (%ecx),%ecx
  102922:	89 04 24             	mov    %eax,(%esp)
  102925:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102929:	e8 82 d9 ff ff       	call   1002b0 <kprintf>
  10292e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		break;
	}

	return cpu;
  102934:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102937:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  10293a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10293d:	81 c4 0c 01 00 00    	add    $0x10c,%esp
  102943:	5e                   	pop    %esi
  102944:	5f                   	pop    %edi
  102945:	5b                   	pop    %ebx
  102946:	5d                   	pop    %ebp
  102947:	c3                   	ret    
  102948:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10294f:	00 

00102950 <kernel_main>:

void kernel_main(struct multiboot_info* mb_info) {
  102950:	55                   	push   %ebp
  102951:	89 e5                	mov    %esp,%ebp
  102953:	57                   	push   %edi
  102954:	56                   	push   %esi
  102955:	83 ec 70             	sub    $0x70,%esp
  102958:	8b 45 08             	mov    0x8(%ebp),%eax
  10295b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  10295e:	e8 fd 48 00 00       	call   107260 <vmm_init>
  102963:	8d 0d 93 92 10 00    	lea    0x109293,%ecx
  102969:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kprintf("Setting PIT interval...\n");
  10296c:	89 0c 24             	mov    %ecx,(%esp)
  10296f:	e8 3c d9 ff ff       	call   1002b0 <kprintf>
  102974:	b9 43 00 00 00       	mov    $0x43,%ecx
  102979:	ba 36 00 00 00       	mov    $0x36,%edx

	outb(0x43, 0x36);
  10297e:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  102985:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
  10298c:	00 
  10298d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102990:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102993:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  102996:	e8 25 02 00 00       	call   102bc0 <outb>
  10299b:	b8 40 00 00 00       	mov    $0x40,%eax
  1029a0:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
	outw(0x40, 1000);
  1029a5:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  1029ac:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  1029b3:	00 
  1029b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1029b7:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1029ba:	e8 31 02 00 00       	call   102bf0 <outw>
  1029bf:	8d 05 ac 92 10 00    	lea    0x1092ac,%eax

    kprintf("Initializing vfs...\n");
  1029c5:	89 04 24             	mov    %eax,(%esp)
  1029c8:	e8 e3 d8 ff ff       	call   1002b0 <kprintf>

    vfs_init_root();
  1029cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1029d0:	e8 1b 37 00 00       	call   1060f0 <vfs_init_root>
    ramfs_fifo_init();
  1029d5:	e8 c6 0b 00 00       	call   1035a0 <ramfs_fifo_init>
    ramfs_block_init();
  1029da:	e8 11 07 00 00       	call   1030f0 <ramfs_block_init>

    driver_keyboard_init();
  1029df:	e8 7c e2 ff ff       	call   100c60 <driver_keyboard_init>
  1029e4:	b8 00 00 00 00       	mov    $0x0,%eax


    map_address_active((uint32_t) mb_info,
  1029e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1029ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1029ef:	89 0c 24             	mov    %ecx,(%esp)
  1029f2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1029f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1029fd:	00 
  1029fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102a01:	e8 0a 42 00 00       	call   106c10 <map_address_active>
  102a06:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  102a0b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102a0e:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a11:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102a14:	8b 52 18             	mov    0x18(%edx),%edx
  102a17:	89 0c 24             	mov    %ecx,(%esp)
  102a1a:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a1e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a25:	00 
  102a26:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102a29:	e8 e2 41 00 00       	call   106c10 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a31:	8b 00                	mov    (%eax),%eax
  102a33:	25 08 00 00 00       	and    $0x8,%eax
  102a38:	3d 00 00 00 00       	cmp    $0x0,%eax
  102a3d:	0f 84 aa 00 00 00    	je     102aed <kernel_main+0x19d>
  102a43:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  102a48:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102a4b:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a4e:	8b 09                	mov    (%ecx),%ecx
  102a50:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102a53:	8b 52 18             	mov    0x18(%edx),%edx
  102a56:	8b 12                	mov    (%edx),%edx
  102a58:	8b 75 f4             	mov    -0xc(%ebp),%esi
  102a5b:	8b 76 18             	mov    0x18(%esi),%esi
  102a5e:	8b 76 04             	mov    0x4(%esi),%esi
  102a61:	8b 7d f4             	mov    -0xc(%ebp),%edi
  102a64:	8b 7f 18             	mov    0x18(%edi),%edi
  102a67:	8b 3f                	mov    (%edi),%edi
  102a69:	29 fe                	sub    %edi,%esi
  102a6b:	89 0c 24             	mov    %ecx,(%esp)
  102a6e:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a72:	89 74 24 08          	mov    %esi,0x8(%esp)
  102a76:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102a7d:	00 
  102a7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102a81:	e8 ea 42 00 00       	call   106d70 <vmm_map_range>
  102a86:	8d 05 c1 92 10 00    	lea    0x1092c1,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  102a8c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102a8f:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a92:	8b 49 04             	mov    0x4(%ecx),%ecx
  102a95:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102a98:	8b 52 18             	mov    0x18(%edx),%edx
  102a9b:	8b 12                	mov    (%edx),%edx
  102a9d:	29 d1                	sub    %edx,%ecx
  102a9f:	89 04 24             	mov    %eax,(%esp)
  102aa2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102aa6:	e8 05 d8 ff ff       	call   1002b0 <kprintf>
  102aab:	8d 0d 01 93 10 00    	lea    0x109301,%ecx
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  102ab1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102ab4:	8b 52 18             	mov    0x18(%edx),%edx
  102ab7:	8b 12                	mov    (%edx),%edx
  102ab9:	8b 75 f4             	mov    -0xc(%ebp),%esi
  102abc:	8b 76 18             	mov    0x18(%esi),%esi
  102abf:	8b 76 04             	mov    0x4(%esi),%esi
  102ac2:	89 0c 24             	mov    %ecx,(%esp)
  102ac5:	89 54 24 04          	mov    %edx,0x4(%esp)
  102ac9:	89 74 24 08          	mov    %esi,0x8(%esp)
  102acd:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102ad0:	e8 db d7 ff ff       	call   1002b0 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  102ad5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102ad8:	8b 49 18             	mov    0x18(%ecx),%ecx
  102adb:	8b 09                	mov    (%ecx),%ecx
  102add:	89 0c 24             	mov    %ecx,(%esp)
  102ae0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102ae3:	e8 38 10 00 00       	call   103b20 <tar_load_ramfs>
    } else {
  102ae8:	e9 11 00 00 00       	jmp    102afe <kernel_main+0x1ae>
  102aed:	8d 05 1b 93 10 00    	lea    0x10931b,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  102af3:	89 04 24             	mov    %eax,(%esp)
  102af6:	e8 b5 d7 ff ff       	call   1002b0 <kprintf>
  102afb:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102afe:	8d 05 4d 93 10 00    	lea    0x10934d,%eax
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  102b04:	89 04 24             	mov    %eax,(%esp)
  102b07:	e8 a4 d7 ff ff       	call   1002b0 <kprintf>
  102b0c:	8d 0d 6d 93 10 00    	lea    0x10936d,%ecx
  102b12:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  102b17:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102b1a:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  102b1d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  102b20:	e8 5b 15 00 00       	call   104080 <ramfs_vga_driver_struct>
  102b25:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102b28:	89 0c 24             	mov    %ecx,(%esp)
  102b2b:	89 44 24 04          	mov    %eax,0x4(%esp)
  102b2f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102b36:	00 
  102b37:	e8 b4 29 00 00       	call   1054f0 <vfs_create_kfile>
  102b3c:	8d 0d 76 93 10 00    	lea    0x109376,%ecx

    if(vfs_exists("/ibin/init")) {
  102b42:	89 0c 24             	mov    %ecx,(%esp)
  102b45:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102b48:	e8 c3 2d 00 00       	call   105910 <vfs_exists>
  102b4d:	3d 00 00 00 00       	cmp    $0x0,%eax
  102b52:	0f 84 57 00 00 00    	je     102baf <kernel_main+0x25f>
  102b58:	8d 05 81 93 10 00    	lea    0x109381,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  102b5e:	89 04 24             	mov    %eax,(%esp)
  102b61:	e8 4a d7 ff ff       	call   1002b0 <kprintf>
  102b66:	8d 0d 76 93 10 00    	lea    0x109376,%ecx
  102b6c:	ba 00 00 00 00       	mov    $0x0,%edx

        vfs_exec("/ibin/init", 0, 0, 0, 0, 0);
  102b71:	89 0c 24             	mov    %ecx,(%esp)
  102b74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102b7b:	00 
  102b7c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102b83:	00 
  102b84:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102b8b:	00 
  102b8c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  102b93:	00 
  102b94:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  102b9b:	00 
  102b9c:	89 45 ac             	mov    %eax,-0x54(%ebp)
  102b9f:	89 55 a8             	mov    %edx,-0x58(%ebp)
  102ba2:	e8 f9 2d 00 00       	call   1059a0 <vfs_exec>
        enableScheduling();
  102ba7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102baa:	e8 f1 14 00 00       	call   1040a0 <enableScheduling>
    }

	while(1);
  102baf:	e9 00 00 00 00       	jmp    102bb4 <kernel_main+0x264>
  102bb4:	e9 fb ff ff ff       	jmp    102bb4 <kernel_main+0x264>
  102bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102bc0 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  102bc0:	55                   	push   %ebp
  102bc1:	89 e5                	mov    %esp,%ebp
  102bc3:	50                   	push   %eax
  102bc4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102bc8:	66 89 c1             	mov    %ax,%cx
  102bcb:	8a 55 0c             	mov    0xc(%ebp),%dl
  102bce:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102bd2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102bd5:	8a 45 fd             	mov    -0x3(%ebp),%al
  102bd8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  102bdc:	ee                   	out    %al,(%dx)
}
  102bdd:	83 c4 04             	add    $0x4,%esp
  102be0:	5d                   	pop    %ebp
  102be1:	c3                   	ret    
  102be2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102be9:	1f 84 00 00 00 00 00 

00102bf0 <outw>:
    uint32_t result;
    asm volatile ("inl %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline void outw(uint16_t _port, uint16_t _data) {
  102bf0:	55                   	push   %ebp
  102bf1:	89 e5                	mov    %esp,%ebp
  102bf3:	50                   	push   %eax
  102bf4:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  102bf8:	66 89 c1             	mov    %ax,%cx
  102bfb:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102bff:	66 89 c2             	mov    %ax,%dx
  102c02:	66 89 55 fe          	mov    %dx,-0x2(%ebp)
  102c06:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
  102c0a:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
  102c0e:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  102c12:	66 ef                	out    %ax,(%dx)
}
  102c14:	83 c4 04             	add    $0x4,%esp
  102c17:	5d                   	pop    %ebp
  102c18:	c3                   	ret    
  102c19:	66 90                	xchg   %ax,%ax
  102c1b:	66 90                	xchg   %ax,%ax
  102c1d:	66 90                	xchg   %ax,%ax
  102c1f:	90                   	nop

00102c20 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  102c20:	55                   	push   %ebp
  102c21:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102c23:	56                   	push   %esi
  102c24:	83 ec 10             	sub    $0x10,%esp
  102c27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102c2e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102c35:	0f 8d b7 00 00 00    	jge    102cf2 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  102c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c3e:	81 3c 85 98 a8 12 00 	cmpl   $0x0,0x12a898(,%eax,4)
  102c45:	00 00 00 00 
  102c49:	0f 84 8e 00 00 00    	je     102cdd <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  102c4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102c56:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102c5d:	0f 8d 75 00 00 00    	jge    102cd8 <pmm_alloc+0xb8>
  102c63:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102c68:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102c6b:	8b 0c 8d 98 a8 12 00 	mov    0x12a898(,%ecx,4),%ecx
  102c72:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102c75:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102c78:	89 d1                	mov    %edx,%ecx
  102c7a:	d3 e0                	shl    %cl,%eax
  102c7c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c7f:	21 c2                	and    %eax,%edx
  102c81:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102c87:	0f 84 36 00 00 00    	je     102cc3 <pmm_alloc+0xa3>
  102c8d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  102c92:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102c95:	d3 e0                	shl    %cl,%eax
  102c97:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102c9f:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  102ca6:	21 c6                	and    %eax,%esi
  102ca8:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  102caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102cb2:	c1 e0 05             	shl    $0x5,%eax
  102cb5:	03 45 f0             	add    -0x10(%ebp),%eax
  102cb8:	c1 e0 0c             	shl    $0xc,%eax
  102cbb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102cbe:	e9 36 00 00 00       	jmp    102cf9 <pmm_alloc+0xd9>
				}
			}
  102cc3:	e9 00 00 00 00       	jmp    102cc8 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  102cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ccb:	05 01 00 00 00       	add    $0x1,%eax
  102cd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102cd3:	e9 7e ff ff ff       	jmp    102c56 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  102cd8:	e9 00 00 00 00       	jmp    102cdd <pmm_alloc+0xbd>
	}
  102cdd:	e9 00 00 00 00       	jmp    102ce2 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ce5:	05 01 00 00 00       	add    $0x1,%eax
  102cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102ced:	e9 3c ff ff ff       	jmp    102c2e <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  102cf2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  102cf9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cfc:	83 c4 10             	add    $0x10,%esp
  102cff:	5e                   	pop    %esi
  102d00:	5d                   	pop    %ebp
  102d01:	c3                   	ret    
  102d02:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102d09:	1f 84 00 00 00 00 00 

00102d10 <pmm_print_stats>:

void pmm_print_stats() {
  102d10:	55                   	push   %ebp
  102d11:	89 e5                	mov    %esp,%ebp
  102d13:	56                   	push   %esi
  102d14:	83 ec 34             	sub    $0x34,%esp
  102d17:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  102d1c:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  102d23:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102d26:	e8 65 00 00 00       	call   102d90 <pmm_get_free_space>
  102d2b:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102d30:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  102d36:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102d39:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102d40:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102d43:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102d46:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102d49:	e8 42 00 00 00       	call   102d90 <pmm_get_free_space>
  102d4e:	8d 0d a8 93 10 00    	lea    0x1093a8,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102d54:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  102d5a:	c1 ea 0a             	shr    $0xa,%edx
  102d5d:	89 0c 24             	mov    %ecx,(%esp)
  102d60:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102d63:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102d67:	8b 75 ec             	mov    -0x14(%ebp),%esi
  102d6a:	89 74 24 08          	mov    %esi,0x8(%esp)
  102d6e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102d72:	89 54 24 10          	mov    %edx,0x10(%esp)
  102d76:	e8 35 d5 ff ff       	call   1002b0 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  102d7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102d7e:	83 c4 34             	add    $0x34,%esp
  102d81:	5e                   	pop    %esi
  102d82:	5d                   	pop    %ebp
  102d83:	c3                   	ret    
  102d84:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102d8b:	00 00 00 00 00 

00102d90 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102d90:	55                   	push   %ebp
  102d91:	89 e5                	mov    %esp,%ebp
  102d93:	83 ec 14             	sub    $0x14,%esp
  102d96:	8b 45 08             	mov    0x8(%ebp),%eax
  102d99:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  102d9c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102da3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102daa:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102db1:	0f 83 73 00 00 00    	jae    102e2a <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  102db7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102dbe:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102dc5:	0f 83 4a 00 00 00    	jae    102e15 <pmm_get_free_space+0x85>
  102dcb:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  102dd0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102dd3:	8b 0c 8d 98 a8 12 00 	mov    0x12a898(,%ecx,4),%ecx
  102dda:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102ddd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102de0:	89 d1                	mov    %edx,%ecx
  102de2:	d3 e0                	shl    %cl,%eax
  102de4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102de7:	21 c2                	and    %eax,%edx
  102de9:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102def:	0f 84 0b 00 00 00    	je     102e00 <pmm_get_free_space+0x70>
				free += 0x1000;
  102df5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102df8:	05 00 10 00 00       	add    $0x1000,%eax
  102dfd:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  102e00:	e9 00 00 00 00       	jmp    102e05 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  102e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e08:	05 01 00 00 00       	add    $0x1,%eax
  102e0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102e10:	e9 a9 ff ff ff       	jmp    102dbe <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  102e15:	e9 00 00 00 00       	jmp    102e1a <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e1d:	05 01 00 00 00       	add    $0x1,%eax
  102e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102e25:	e9 80 ff ff ff       	jmp    102daa <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  102e2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e2d:	31 d2                	xor    %edx,%edx
  102e2f:	f7 75 fc             	divl   -0x4(%ebp)
  102e32:	83 c4 14             	add    $0x14,%esp
  102e35:	5d                   	pop    %ebp
  102e36:	c3                   	ret    
  102e37:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102e3e:	00 00 

00102e40 <pmm_free>:
}

void pmm_free(void* addr) {
  102e40:	55                   	push   %ebp
  102e41:	89 e5                	mov    %esp,%ebp
  102e43:	56                   	push   %esi
  102e44:	83 ec 14             	sub    $0x14,%esp
  102e47:	8b 45 08             	mov    0x8(%ebp),%eax
  102e4a:	b9 01 00 00 00       	mov    $0x1,%ecx
  102e4f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e55:	c1 e8 0c             	shr    $0xc,%eax
  102e58:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  102e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e5e:	25 1f 00 00 00       	and    $0x1f,%eax
  102e63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e69:	c1 e8 05             	shr    $0x5,%eax
  102e6c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  102e6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e72:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102e75:	89 c1                	mov    %eax,%ecx
  102e77:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102e7a:	d3 e0                	shl    %cl,%eax
  102e7c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102e7f:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  102e86:	09 c6                	or     %eax,%esi
  102e88:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
}
  102e8f:	83 c4 14             	add    $0x14,%esp
  102e92:	5e                   	pop    %esi
  102e93:	5d                   	pop    %ebp
  102e94:	c3                   	ret    
  102e95:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102e9c:	00 00 00 00 

00102ea0 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102ea0:	55                   	push   %ebp
  102ea1:	89 e5                	mov    %esp,%ebp
  102ea3:	56                   	push   %esi
  102ea4:	83 ec 14             	sub    $0x14,%esp
  102ea7:	8b 45 08             	mov    0x8(%ebp),%eax
  102eaa:	b9 01 00 00 00       	mov    $0x1,%ecx
  102eaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102eb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102eb5:	c1 e8 0c             	shr    $0xc,%eax
  102eb8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  102ebb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ebe:	25 1f 00 00 00       	and    $0x1f,%eax
  102ec3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ec9:	c1 e8 05             	shr    $0x5,%eax
  102ecc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  102ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ed2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102ed5:	89 c1                	mov    %eax,%ecx
  102ed7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102eda:	d3 e0                	shl    %cl,%eax
  102edc:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102ee1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102ee4:	8b 34 95 98 a8 12 00 	mov    0x12a898(,%edx,4),%esi
  102eeb:	21 c6                	and    %eax,%esi
  102eed:	89 34 95 98 a8 12 00 	mov    %esi,0x12a898(,%edx,4)
}
  102ef4:	83 c4 14             	add    $0x14,%esp
  102ef7:	5e                   	pop    %esi
  102ef8:	5d                   	pop    %ebp
  102ef9:	c3                   	ret    
  102efa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102f00 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  102f00:	55                   	push   %ebp
  102f01:	89 e5                	mov    %esp,%ebp
  102f03:	53                   	push   %ebx
  102f04:	57                   	push   %edi
  102f05:	56                   	push   %esi
  102f06:	83 ec 5c             	sub    $0x5c,%esp
  102f09:	8b 45 08             	mov    0x8(%ebp),%eax
  102f0c:	8d 0d e5 93 10 00    	lea    0x1093e5,%ecx
  102f12:	8d 15 98 a8 12 00    	lea    0x12a898,%edx
  102f18:	89 d6                	mov    %edx,%esi
  102f1a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  102f20:	89 d7                	mov    %edx,%edi
  102f22:	bb 00 00 00 00       	mov    $0x0,%ebx
  102f27:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102f2a:	b8 00 00 02 00       	mov    $0x20000,%eax
  102f2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102f32:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102f35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  102f38:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f3b:	8b 40 30             	mov    0x30(%eax),%eax
  102f3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  102f41:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f44:	8b 40 30             	mov    0x30(%eax),%eax
  102f47:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f4d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102f50:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102f53:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102f56:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102f59:	03 41 2c             	add    0x2c(%ecx),%eax
  102f5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  102f5f:	89 3c 24             	mov    %edi,(%esp)
  102f62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f69:	00 
  102f6a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102f71:	00 
  102f72:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102f75:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102f78:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  102f7b:	e8 20 1e 00 00       	call   104da0 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  102f80:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102f83:	89 04 24             	mov    %eax,(%esp)
  102f86:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102f89:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102f8d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  102f90:	89 54 24 08          	mov    %edx,0x8(%esp)
  102f94:	e8 17 d3 ff ff       	call   1002b0 <kprintf>
  102f99:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  102f9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f9f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102fa2:	0f 83 77 00 00 00    	jae    10301f <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  102fa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102fab:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  102fb2:	0f 85 57 00 00 00    	jne    10300f <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  102fb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102fbb:	8b 40 04             	mov    0x4(%eax),%eax
  102fbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  102fc1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102fc4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  102fc7:	01 c8                	add    %ecx,%eax
  102fc9:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  102fcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102fcf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  102fd2:	0f 83 32 00 00 00    	jae    10300a <pmm_init+0x10a>
				pmm_free((void*) addr);
  102fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102fdb:	89 04 24             	mov    %eax,(%esp)
  102fde:	e8 5d fe ff ff       	call   102e40 <pmm_free>
				if (addr > upper_limit)
  102fe3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102fe6:	3b 05 28 a4 10 00    	cmp    0x10a428,%eax
  102fec:	0f 86 08 00 00 00    	jbe    102ffa <pmm_init+0xfa>
					upper_limit = addr;
  102ff2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102ff5:	a3 28 a4 10 00       	mov    %eax,0x10a428
				addr += 0x1000;
  102ffa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102ffd:	05 00 10 00 00       	add    $0x1000,%eax
  103002:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  103005:	e9 c2 ff ff ff       	jmp    102fcc <pmm_init+0xcc>
		}
  10300a:	e9 00 00 00 00       	jmp    10300f <pmm_init+0x10f>
		mmap++;
  10300f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103012:	05 18 00 00 00       	add    $0x18,%eax
  103017:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  10301a:	e9 7d ff ff ff       	jmp    102f9c <pmm_init+0x9c>
  10301f:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  103025:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103028:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  10302e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  103031:	0f 83 1b 00 00 00    	jae    103052 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  103037:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10303a:	89 04 24             	mov    %eax,(%esp)
  10303d:	e8 5e fe ff ff       	call   102ea0 <pmm_mark_used>
		addr += 0x1000;
  103042:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103045:	05 00 10 00 00       	add    $0x1000,%eax
  10304a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  10304d:	e9 d6 ff ff ff       	jmp    103028 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  103052:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103055:	8b 40 18             	mov    0x18(%eax),%eax
  103058:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  10305b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10305e:	89 04 24             	mov    %eax,(%esp)
  103061:	e8 3a fe ff ff       	call   102ea0 <pmm_mark_used>
	pmm_mark_used(modules);
  103066:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103069:	89 04 24             	mov    %eax,(%esp)
  10306c:	e8 2f fe ff ff       	call   102ea0 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  103071:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  103078:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10307b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10307e:	3b 41 14             	cmp    0x14(%ecx),%eax
  103081:	0f 83 59 00 00 00    	jae    1030e0 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  103087:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10308a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10308d:	c1 e0 04             	shl    $0x4,%eax
  103090:	01 c1                	add    %eax,%ecx
  103092:	8b 01                	mov    (%ecx),%eax
  103094:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  103097:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10309a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10309d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1030a0:	c1 e1 04             	shl    $0x4,%ecx
  1030a3:	01 ca                	add    %ecx,%edx
  1030a5:	8b 4a 04             	mov    0x4(%edx),%ecx
  1030a8:	39 c8                	cmp    %ecx,%eax
  1030aa:	0f 83 1b 00 00 00    	jae    1030cb <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  1030b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1030b3:	89 04 24             	mov    %eax,(%esp)
  1030b6:	e8 e5 fd ff ff       	call   102ea0 <pmm_mark_used>
			addr += 0x1000;
  1030bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1030be:	05 00 10 00 00       	add    $0x1000,%eax
  1030c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  1030c6:	e9 cc ff ff ff       	jmp    103097 <pmm_init+0x197>
	}
  1030cb:	e9 00 00 00 00       	jmp    1030d0 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1030d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1030d3:	05 01 00 00 00       	add    $0x1,%eax
  1030d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1030db:	e9 98 ff ff ff       	jmp    103078 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  1030e0:	83 c4 5c             	add    $0x5c,%esp
  1030e3:	5e                   	pop    %esi
  1030e4:	5f                   	pop    %edi
  1030e5:	5b                   	pop    %ebx
  1030e6:	5d                   	pop    %ebp
  1030e7:	c3                   	ret    
  1030e8:	66 90                	xchg   %ax,%ax
  1030ea:	66 90                	xchg   %ax,%ax
  1030ec:	66 90                	xchg   %ax,%ax
  1030ee:	66 90                	xchg   %ax,%ax

001030f0 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  1030f0:	55                   	push   %ebp
  1030f1:	89 e5                	mov    %esp,%ebp
  1030f3:	83 ec 18             	sub    $0x18,%esp
  1030f6:	8d 05 98 a8 14 00    	lea    0x14a898,%eax
  1030fc:	b9 00 00 00 00       	mov    $0x0,%ecx
  103101:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  103106:	89 04 24             	mov    %eax,(%esp)
  103109:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103110:	00 
  103111:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  103118:	00 
  103119:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10311c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10311f:	e8 7c 1c 00 00       	call   104da0 <memset>
}
  103124:	83 c4 18             	add    $0x18,%esp
  103127:	5d                   	pop    %ebp
  103128:	c3                   	ret    
  103129:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103130 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  103130:	55                   	push   %ebp
  103131:	89 e5                	mov    %esp,%ebp
  103133:	83 ec 28             	sub    $0x28,%esp
  103136:	8b 45 10             	mov    0x10(%ebp),%eax
  103139:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10313c:	8b 55 08             	mov    0x8(%ebp),%edx
  10313f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103142:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103145:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103148:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10314b:	8b 40 04             	mov    0x4(%eax),%eax
  10314e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103151:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103154:	8b 00                	mov    (%eax),%eax
  103156:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10315d:	00 00 00 00 
  103161:	0f 84 70 00 00 00    	je     1031d7 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  103167:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10316a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10316d:	8b 09                	mov    (%ecx),%ecx
  10316f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103176:	8b 49 04             	mov    0x4(%ecx),%ecx
  103179:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10317c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10317f:	39 c8                	cmp    %ecx,%eax
  103181:	0f 86 0c 00 00 00    	jbe    103193 <ramfs_block_read+0x63>
  103187:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10318e:	e9 4b 00 00 00       	jmp    1031de <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  103193:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103196:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103199:	8b 09                	mov    (%ecx),%ecx
  10319b:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1031a2:	8b 09                	mov    (%ecx),%ecx
  1031a4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1031a7:	03 4a 08             	add    0x8(%edx),%ecx
  1031aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1031ad:	89 04 24             	mov    %eax,(%esp)
  1031b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1031b4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1031b8:	e8 43 1c 00 00       	call   104e00 <memcpy>
        handle->position += length;
  1031bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1031c0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1031c3:	8b 51 08             	mov    0x8(%ecx),%edx
  1031c6:	01 c2                	add    %eax,%edx
  1031c8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1031cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1031d2:	e9 07 00 00 00       	jmp    1031de <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1031d7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1031de:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1031e1:	83 c4 28             	add    $0x28,%esp
  1031e4:	5d                   	pop    %ebp
  1031e5:	c3                   	ret    
  1031e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1031ed:	00 00 00 

001031f0 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  1031f0:	55                   	push   %ebp
  1031f1:	89 e5                	mov    %esp,%ebp
  1031f3:	83 ec 28             	sub    $0x28,%esp
  1031f6:	8b 45 10             	mov    0x10(%ebp),%eax
  1031f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1031fc:	8b 55 08             	mov    0x8(%ebp),%edx
  1031ff:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103202:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103205:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103208:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10320b:	8b 40 04             	mov    0x4(%eax),%eax
  10320e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103211:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103214:	8b 00                	mov    (%eax),%eax
  103216:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10321d:	00 00 00 00 
  103221:	0f 84 70 00 00 00    	je     103297 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  103227:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10322a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10322d:	8b 09                	mov    (%ecx),%ecx
  10322f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103236:	8b 49 04             	mov    0x4(%ecx),%ecx
  103239:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10323c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10323f:	39 c8                	cmp    %ecx,%eax
  103241:	0f 86 0c 00 00 00    	jbe    103253 <ramfs_block_write+0x63>
  103247:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10324e:	e9 4b 00 00 00       	jmp    10329e <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  103253:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103256:	8b 00                	mov    (%eax),%eax
  103258:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10325f:	8b 00                	mov    (%eax),%eax
  103261:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103264:	03 41 08             	add    0x8(%ecx),%eax
  103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10326a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10326d:	89 04 24             	mov    %eax,(%esp)
  103270:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103274:	89 54 24 08          	mov    %edx,0x8(%esp)
  103278:	e8 83 1b 00 00       	call   104e00 <memcpy>
        handle->position += length;
  10327d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103280:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103283:	8b 51 08             	mov    0x8(%ecx),%edx
  103286:	01 c2                	add    %eax,%edx
  103288:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10328b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103292:	e9 07 00 00 00       	jmp    10329e <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103297:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10329e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032a1:	83 c4 28             	add    $0x28,%esp
  1032a4:	5d                   	pop    %ebp
  1032a5:	c3                   	ret    
  1032a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1032ad:	00 00 00 

001032b0 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  1032b0:	55                   	push   %ebp
  1032b1:	89 e5                	mov    %esp,%ebp
  1032b3:	83 ec 18             	sub    $0x18,%esp
  1032b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1032b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1032bc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1032bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  1032c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032c5:	8b 00                	mov    (%eax),%eax
  1032c7:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1032ce:	00 00 00 00 
  1032d2:	0f 84 9d 00 00 00    	je     103375 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  1032d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032db:	25 01 00 00 00       	and    $0x1,%eax
  1032e0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1032e5:	0f 84 18 00 00 00    	je     103303 <ramfs_block_open+0x53>
  1032eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032ee:	8b 00                	mov    (%eax),%eax
  1032f0:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1032f7:	8b 48 08             	mov    0x8(%eax),%ecx
  1032fa:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103300:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103306:	25 02 00 00 00       	and    $0x2,%eax
  10330b:	3d 00 00 00 00       	cmp    $0x0,%eax
  103310:	0f 84 18 00 00 00    	je     10332e <ramfs_block_open+0x7e>
  103316:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103319:	8b 00                	mov    (%eax),%eax
  10331b:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103322:	8b 48 0c             	mov    0xc(%eax),%ecx
  103325:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10332b:	89 48 0c             	mov    %ecx,0xc(%eax)
  10332e:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  103333:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10333a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10333d:	e8 ee 13 00 00       	call   104730 <malloc>
  103342:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  103345:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103348:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10334b:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  10334e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103351:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  103358:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10335b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  103361:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103364:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103367:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  10336a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10336d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103370:	e9 08 00 00 00       	jmp    10337d <ramfs_block_open+0xcd>
  103375:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  10337a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10337d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103380:	83 c4 18             	add    $0x18,%esp
  103383:	5d                   	pop    %ebp
  103384:	c3                   	ret    
  103385:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10338c:	00 00 00 00 

00103390 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  103390:	55                   	push   %ebp
  103391:	89 e5                	mov    %esp,%ebp
  103393:	83 ec 18             	sub    $0x18,%esp
  103396:	8b 45 08             	mov    0x8(%ebp),%eax
  103399:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10339c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10339f:	8b 40 04             	mov    0x4(%eax),%eax
  1033a2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  1033a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033a8:	8b 00                	mov    (%eax),%eax
  1033aa:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1033b1:	00 00 00 00 
  1033b5:	0f 84 61 00 00 00    	je     10341c <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  1033bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1033be:	8b 40 0c             	mov    0xc(%eax),%eax
  1033c1:	25 01 00 00 00       	and    $0x1,%eax
  1033c6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1033cb:	0f 84 18 00 00 00    	je     1033e9 <ramfs_block_close+0x59>
  1033d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033d4:	8b 00                	mov    (%eax),%eax
  1033d6:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1033dd:	8b 48 08             	mov    0x8(%eax),%ecx
  1033e0:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1033e6:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  1033e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1033ec:	8b 40 0c             	mov    0xc(%eax),%eax
  1033ef:	25 02 00 00 00       	and    $0x2,%eax
  1033f4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1033f9:	0f 84 18 00 00 00    	je     103417 <ramfs_block_close+0x87>
  1033ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103402:	8b 00                	mov    (%eax),%eax
  103404:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10340b:	8b 48 0c             	mov    0xc(%eax),%ecx
  10340e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103414:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  103417:	e9 00 00 00 00       	jmp    10341c <ramfs_block_close+0x8c>

    free(handle);
  10341c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10341f:	89 04 24             	mov    %eax,(%esp)
  103422:	e8 d9 16 00 00       	call   104b00 <free>
  103427:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  10342c:	83 c4 18             	add    $0x18,%esp
  10342f:	5d                   	pop    %ebp
  103430:	c3                   	ret    
  103431:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103438:	0f 1f 84 00 00 00 00 
  10343f:	00 

00103440 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  103440:	55                   	push   %ebp
  103441:	89 e5                	mov    %esp,%ebp
  103443:	83 ec 0c             	sub    $0xc,%esp
  103446:	8b 45 08             	mov    0x8(%ebp),%eax
  103449:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10344c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10344f:	8b 40 04             	mov    0x4(%eax),%eax
  103452:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  103455:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103458:	8b 00                	mov    (%eax),%eax
  10345a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103461:	00 00 00 00 
  103465:	0f 84 1d 00 00 00    	je     103488 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  10346b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10346e:	8b 00                	mov    (%eax),%eax
  103470:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103477:	8b 40 04             	mov    0x4(%eax),%eax
  10347a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10347d:	2b 41 08             	sub    0x8(%ecx),%eax
  103480:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103483:	e9 07 00 00 00       	jmp    10348f <ramfs_block_available+0x4f>
    }

    return 0;
  103488:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10348f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103492:	83 c4 0c             	add    $0xc,%esp
  103495:	5d                   	pop    %ebp
  103496:	c3                   	ret    
  103497:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10349e:	00 00 

001034a0 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  1034a0:	55                   	push   %ebp
  1034a1:	89 e5                	mov    %esp,%ebp
  1034a3:	83 ec 28             	sub    $0x28,%esp
  1034a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1034a9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1034ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  1034b1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1034b8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1034bb:	e8 70 12 00 00       	call   104730 <malloc>
  1034c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  1034c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1034ca:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  1034d1:	0f 8d a7 00 00 00    	jge    10357e <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  1034d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034da:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1034e1:	00 00 00 00 
  1034e5:	0f 85 7e 00 00 00    	jne    103569 <ramfs_block_create+0xc9>
  1034eb:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  1034f0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1034f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1034fa:	e8 31 12 00 00       	call   104730 <malloc>
  1034ff:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103502:	89 04 8d 98 a8 14 00 	mov    %eax,0x14a898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103509:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10350c:	8b 00                	mov    (%eax),%eax
  10350e:	89 04 24             	mov    %eax,(%esp)
  103511:	e8 1a 12 00 00       	call   104730 <malloc>
  103516:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103519:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103520:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  103522:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103525:	8b 00                	mov    (%eax),%eax
  103527:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10352a:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103531:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  103534:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103537:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10353e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  103545:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103548:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10354f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  103556:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103559:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10355c:	89 01                	mov    %eax,(%ecx)

            return kfret;
  10355e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103561:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103564:	e9 1c 00 00 00       	jmp    103585 <ramfs_block_create+0xe5>
        }
    }
  103569:	e9 00 00 00 00       	jmp    10356e <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  10356e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103571:	05 01 00 00 00       	add    $0x1,%eax
  103576:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103579:	e9 4c ff ff ff       	jmp    1034ca <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  10357e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103585:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103588:	83 c4 28             	add    $0x28,%esp
  10358b:	5d                   	pop    %ebp
  10358c:	c3                   	ret    
  10358d:	0f 1f 00             	nopl   (%eax)

00103590 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  103590:	55                   	push   %ebp
  103591:	89 e5                	mov    %esp,%ebp
  103593:	8d 05 88 82 10 00    	lea    0x108288,%eax
    return &block_driver;
  103599:	5d                   	pop    %ebp
  10359a:	c3                   	ret    
  10359b:	66 90                	xchg   %ax,%ax
  10359d:	66 90                	xchg   %ax,%ax
  10359f:	90                   	nop

001035a0 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  1035a0:	55                   	push   %ebp
  1035a1:	89 e5                	mov    %esp,%ebp
  1035a3:	83 ec 18             	sub    $0x18,%esp
  1035a6:	8d 05 98 a8 14 00    	lea    0x14a898,%eax
  1035ac:	b9 00 00 00 00       	mov    $0x0,%ecx
  1035b1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  1035b6:	89 04 24             	mov    %eax,(%esp)
  1035b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1035c0:	00 
  1035c1:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  1035c8:	00 
  1035c9:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1035cc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1035cf:	e8 cc 17 00 00       	call   104da0 <memset>
}
  1035d4:	83 c4 18             	add    $0x18,%esp
  1035d7:	5d                   	pop    %ebp
  1035d8:	c3                   	ret    
  1035d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

001035e0 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  1035e0:	55                   	push   %ebp
  1035e1:	89 e5                	mov    %esp,%ebp
  1035e3:	83 ec 28             	sub    $0x28,%esp
  1035e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1035e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1035ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1035ef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1035f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1035f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1035f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035fb:	8b 40 04             	mov    0x4(%eax),%eax
  1035fe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103601:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103604:	8b 00                	mov    (%eax),%eax
  103606:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10360d:	00 00 00 00 
  103611:	0f 84 d0 00 00 00    	je     1036e7 <ramfs_fifo_read+0x107>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  103617:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10361a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10361d:	8b 09                	mov    (%ecx),%ecx
  10361f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103626:	3b 41 04             	cmp    0x4(%ecx),%eax
  103629:	0f 86 0c 00 00 00    	jbe    10363b <ramfs_fifo_read+0x5b>
  10362f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103636:	e9 b3 00 00 00       	jmp    1036ee <ramfs_fifo_read+0x10e>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  10363b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10363e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103641:	8b 09                	mov    (%ecx),%ecx
  103643:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10364a:	3b 41 08             	cmp    0x8(%ecx),%eax
  10364d:	0f 86 0c 00 00 00    	jbe    10365f <ramfs_fifo_read+0x7f>
  103653:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  10365a:	e9 8f 00 00 00       	jmp    1036ee <ramfs_fifo_read+0x10e>

        memcpy(dest, buffer[kf->id]->buffer, length);
  10365f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103662:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103665:	8b 09                	mov    (%ecx),%ecx
  103667:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10366e:	8b 09                	mov    (%ecx),%ecx
  103670:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103673:	89 04 24             	mov    %eax,(%esp)
  103676:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10367a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10367e:	e8 7d 17 00 00       	call   104e00 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  103683:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103686:	8b 00                	mov    (%eax),%eax
  103688:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10368f:	8b 00                	mov    (%eax),%eax
  103691:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103694:	8b 09                	mov    (%ecx),%ecx
  103696:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10369d:	8b 09                	mov    (%ecx),%ecx
  10369f:	03 4d f0             	add    -0x10(%ebp),%ecx
  1036a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1036a5:	8b 12                	mov    (%edx),%edx
  1036a7:	8b 14 95 98 a8 14 00 	mov    0x14a898(,%edx,4),%edx
  1036ae:	8b 52 08             	mov    0x8(%edx),%edx
  1036b1:	2b 55 f0             	sub    -0x10(%ebp),%edx
  1036b4:	89 04 24             	mov    %eax,(%esp)
  1036b7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1036bb:	89 54 24 08          	mov    %edx,0x8(%esp)
  1036bf:	e8 3c 17 00 00       	call   104e00 <memcpy>
        buffer[kf->id]->pos -= length;
  1036c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1036c7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1036ca:	8b 09                	mov    (%ecx),%ecx
  1036cc:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1036d3:	8b 51 08             	mov    0x8(%ecx),%edx
  1036d6:	29 c2                	sub    %eax,%edx
  1036d8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1036db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1036e2:	e9 07 00 00 00       	jmp    1036ee <ramfs_fifo_read+0x10e>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1036e7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1036ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036f1:	83 c4 28             	add    $0x28,%esp
  1036f4:	5d                   	pop    %ebp
  1036f5:	c3                   	ret    
  1036f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1036fd:	00 00 00 

00103700 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  103700:	55                   	push   %ebp
  103701:	89 e5                	mov    %esp,%ebp
  103703:	83 ec 28             	sub    $0x28,%esp
  103706:	8b 45 10             	mov    0x10(%ebp),%eax
  103709:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10370c:	8b 55 08             	mov    0x8(%ebp),%edx
  10370f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103712:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103715:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103718:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10371b:	8b 40 04             	mov    0x4(%eax),%eax
  10371e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103721:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103724:	8b 00                	mov    (%eax),%eax
  103726:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10372d:	00 00 00 00 
  103731:	0f 84 af 00 00 00    	je     1037e6 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  103737:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10373a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10373d:	8b 09                	mov    (%ecx),%ecx
  10373f:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103746:	3b 41 04             	cmp    0x4(%ecx),%eax
  103749:	0f 86 0c 00 00 00    	jbe    10375b <ramfs_fifo_write+0x5b>
  10374f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103756:	e9 92 00 00 00       	jmp    1037ed <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  10375b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10375e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103761:	8b 09                	mov    (%ecx),%ecx
  103763:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  10376a:	8b 49 04             	mov    0x4(%ecx),%ecx
  10376d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103770:	8b 12                	mov    (%edx),%edx
  103772:	8b 14 95 98 a8 14 00 	mov    0x14a898(,%edx,4),%edx
  103779:	2b 4a 08             	sub    0x8(%edx),%ecx
  10377c:	39 c8                	cmp    %ecx,%eax
  10377e:	0f 86 0c 00 00 00    	jbe    103790 <ramfs_fifo_write+0x90>
  103784:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  10378b:	e9 5d 00 00 00       	jmp    1037ed <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  103790:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103793:	8b 00                	mov    (%eax),%eax
  103795:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10379c:	8b 00                	mov    (%eax),%eax
  10379e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1037a1:	8b 09                	mov    (%ecx),%ecx
  1037a3:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1037aa:	03 41 08             	add    0x8(%ecx),%eax
  1037ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1037b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1037b3:	89 04 24             	mov    %eax,(%esp)
  1037b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1037ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1037be:	e8 3d 16 00 00       	call   104e00 <memcpy>
        buffer[kf->id]->pos += length;
  1037c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037c6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1037c9:	8b 09                	mov    (%ecx),%ecx
  1037cb:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  1037d2:	8b 51 08             	mov    0x8(%ecx),%edx
  1037d5:	01 c2                	add    %eax,%edx
  1037d7:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1037da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1037e1:	e9 07 00 00 00       	jmp    1037ed <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  1037e6:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1037ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1037f0:	83 c4 28             	add    $0x28,%esp
  1037f3:	5d                   	pop    %ebp
  1037f4:	c3                   	ret    
  1037f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1037fc:	00 00 00 00 

00103800 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  103800:	55                   	push   %ebp
  103801:	89 e5                	mov    %esp,%ebp
  103803:	83 ec 18             	sub    $0x18,%esp
  103806:	8b 45 0c             	mov    0xc(%ebp),%eax
  103809:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10380c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10380f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  103812:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103815:	8b 00                	mov    (%eax),%eax
  103817:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  10381e:	00 00 00 00 
  103822:	0f 84 bc 00 00 00    	je     1038e4 <ramfs_fifo_open+0xe4>
        if(filemode & FM_EXEC) return 0;
  103828:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10382b:	25 04 00 00 00       	and    $0x4,%eax
  103830:	3d 00 00 00 00       	cmp    $0x0,%eax
  103835:	0f 84 0c 00 00 00    	je     103847 <ramfs_fifo_open+0x47>
  10383b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103842:	e9 a4 00 00 00       	jmp    1038eb <ramfs_fifo_open+0xeb>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  103847:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10384a:	25 01 00 00 00       	and    $0x1,%eax
  10384f:	3d 00 00 00 00       	cmp    $0x0,%eax
  103854:	0f 84 18 00 00 00    	je     103872 <ramfs_fifo_open+0x72>
  10385a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10385d:	8b 00                	mov    (%eax),%eax
  10385f:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103866:	8b 48 0c             	mov    0xc(%eax),%ecx
  103869:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10386f:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  103872:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103875:	25 02 00 00 00       	and    $0x2,%eax
  10387a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10387f:	0f 84 18 00 00 00    	je     10389d <ramfs_fifo_open+0x9d>
  103885:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103888:	8b 00                	mov    (%eax),%eax
  10388a:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103891:	8b 48 10             	mov    0x10(%eax),%ecx
  103894:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10389a:	89 48 10             	mov    %ecx,0x10(%eax)
  10389d:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1038a2:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1038a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1038ac:	e8 7f 0e 00 00       	call   104730 <malloc>
  1038b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  1038b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1038b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1038ba:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  1038bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038c0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  1038c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038ca:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  1038d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1038d3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1038d6:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  1038d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1038df:	e9 07 00 00 00       	jmp    1038eb <ramfs_fifo_open+0xeb>
    }

    return 0;
  1038e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1038eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038ee:	83 c4 18             	add    $0x18,%esp
  1038f1:	5d                   	pop    %ebp
  1038f2:	c3                   	ret    
  1038f3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1038fa:	84 00 00 00 00 00 

00103900 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  103900:	55                   	push   %ebp
  103901:	89 e5                	mov    %esp,%ebp
  103903:	83 ec 18             	sub    $0x18,%esp
  103906:	8b 45 08             	mov    0x8(%ebp),%eax
  103909:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10390c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10390f:	8b 40 04             	mov    0x4(%eax),%eax
  103912:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  103915:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103918:	8b 00                	mov    (%eax),%eax
  10391a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103921:	00 00 00 00 
  103925:	0f 84 61 00 00 00    	je     10398c <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  10392b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10392e:	8b 40 0c             	mov    0xc(%eax),%eax
  103931:	25 01 00 00 00       	and    $0x1,%eax
  103936:	3d 00 00 00 00       	cmp    $0x0,%eax
  10393b:	0f 84 18 00 00 00    	je     103959 <ramfs_fifo_close+0x59>
  103941:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103944:	8b 00                	mov    (%eax),%eax
  103946:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10394d:	8b 48 0c             	mov    0xc(%eax),%ecx
  103950:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103956:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  103959:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10395c:	8b 40 0c             	mov    0xc(%eax),%eax
  10395f:	25 02 00 00 00       	and    $0x2,%eax
  103964:	3d 00 00 00 00       	cmp    $0x0,%eax
  103969:	0f 84 18 00 00 00    	je     103987 <ramfs_fifo_close+0x87>
  10396f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103972:	8b 00                	mov    (%eax),%eax
  103974:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  10397b:	8b 48 10             	mov    0x10(%eax),%ecx
  10397e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103984:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  103987:	e9 00 00 00 00       	jmp    10398c <ramfs_fifo_close+0x8c>

    free(handle);
  10398c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10398f:	89 04 24             	mov    %eax,(%esp)
  103992:	e8 69 11 00 00       	call   104b00 <free>
  103997:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  10399c:	83 c4 18             	add    $0x18,%esp
  10399f:	5d                   	pop    %ebp
  1039a0:	c3                   	ret    
  1039a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1039a8:	0f 1f 84 00 00 00 00 
  1039af:	00 

001039b0 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  1039b0:	55                   	push   %ebp
  1039b1:	89 e5                	mov    %esp,%ebp
  1039b3:	83 ec 0c             	sub    $0xc,%esp
  1039b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1039b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1039bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039bf:	8b 40 04             	mov    0x4(%eax),%eax
  1039c2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  1039c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1039c8:	8b 00                	mov    (%eax),%eax
  1039ca:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  1039d1:	00 00 00 00 
  1039d5:	0f 84 17 00 00 00    	je     1039f2 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  1039db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1039de:	8b 00                	mov    (%eax),%eax
  1039e0:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  1039e7:	8b 40 08             	mov    0x8(%eax),%eax
  1039ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1039ed:	e9 07 00 00 00       	jmp    1039f9 <ramfs_fifo_available+0x49>
    }

    return 0;
  1039f2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1039f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1039fc:	83 c4 0c             	add    $0xc,%esp
  1039ff:	5d                   	pop    %ebp
  103a00:	c3                   	ret    
  103a01:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103a08:	0f 1f 84 00 00 00 00 
  103a0f:	00 

00103a10 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  103a10:	55                   	push   %ebp
  103a11:	89 e5                	mov    %esp,%ebp
  103a13:	83 ec 28             	sub    $0x28,%esp
  103a16:	8b 45 08             	mov    0x8(%ebp),%eax
  103a19:	b9 08 00 00 00       	mov    $0x8,%ecx
  103a1e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103a21:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103a28:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  103a2b:	e8 00 0d 00 00       	call   104730 <malloc>
  103a30:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103a33:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  103a3a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103a41:	0f 8d b8 00 00 00    	jge    103aff <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  103a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a4a:	81 3c 85 98 a8 14 00 	cmpl   $0x0,0x14a898(,%eax,4)
  103a51:	00 00 00 00 
  103a55:	0f 85 8f 00 00 00    	jne    103aea <ramfs_fifo_create+0xda>
  103a5b:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  103a60:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  103a67:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103a6a:	e8 c1 0c 00 00       	call   104730 <malloc>
  103a6f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a72:	89 04 8d 98 a8 14 00 	mov    %eax,0x14a898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103a79:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a7c:	8b 00                	mov    (%eax),%eax
  103a7e:	89 04 24             	mov    %eax,(%esp)
  103a81:	e8 aa 0c 00 00       	call   104730 <malloc>
  103a86:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a89:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103a90:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  103a92:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a95:	8b 00                	mov    (%eax),%eax
  103a97:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a9a:	8b 0c 8d 98 a8 14 00 	mov    0x14a898(,%ecx,4),%ecx
  103aa1:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  103aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103aa7:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103aae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  103ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ab8:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103abf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  103ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ac9:	8b 04 85 98 a8 14 00 	mov    0x14a898(,%eax,4),%eax
  103ad0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  103ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ada:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103add:	89 01                	mov    %eax,(%ecx)

            return kfret;
  103adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ae2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103ae5:	e9 1c 00 00 00       	jmp    103b06 <ramfs_fifo_create+0xf6>
        }
    }
  103aea:	e9 00 00 00 00       	jmp    103aef <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  103aef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103af2:	05 01 00 00 00       	add    $0x1,%eax
  103af7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103afa:	e9 3b ff ff ff       	jmp    103a3a <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  103aff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103b06:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103b09:	83 c4 28             	add    $0x28,%esp
  103b0c:	5d                   	pop    %ebp
  103b0d:	c3                   	ret    
  103b0e:	66 90                	xchg   %ax,%ax

00103b10 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  103b10:	55                   	push   %ebp
  103b11:	89 e5                	mov    %esp,%ebp
  103b13:	8d 05 a4 82 10 00    	lea    0x1082a4,%eax
    return &fifo_driver;
  103b19:	5d                   	pop    %ebp
  103b1a:	c3                   	ret    
  103b1b:	90                   	nop
  103b1c:	66 90                	xchg   %ax,%ax
  103b1e:	66 90                	xchg   %ax,%ax

00103b20 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  103b20:	55                   	push   %ebp
  103b21:	89 e5                	mov    %esp,%ebp
  103b23:	56                   	push   %esi
  103b24:	83 ec 64             	sub    $0x64,%esp
  103b27:	8b 45 08             	mov    0x8(%ebp),%eax
  103b2a:	8d 0d 08 94 10 00    	lea    0x109408,%ecx
  103b30:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  103b33:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103b36:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  103b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b3c:	89 0c 24             	mov    %ecx,(%esp)
  103b3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103b43:	e8 68 c7 ff ff       	call   1002b0 <kprintf>

    for (i = 0; ; i++)
  103b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  103b4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  103b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b55:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  103b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b5b:	0f be 00             	movsbl (%eax),%eax
  103b5e:	3d 00 00 00 00       	cmp    $0x0,%eax
  103b63:	0f 85 05 00 00 00    	jne    103b6e <tar_load_ramfs+0x4e>
            break;
  103b69:	e9 67 01 00 00       	jmp    103cd5 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  103b6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b71:	05 7c 00 00 00       	add    $0x7c,%eax
  103b76:	89 04 24             	mov    %eax,(%esp)
  103b79:	e8 72 01 00 00       	call   103cf0 <tar_parse_number>
  103b7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  103b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b84:	05 00 02 00 00       	add    $0x200,%eax
  103b89:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  103b8c:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  103b93:	0f 84 cb 00 00 00    	je     103c64 <tar_load_ramfs+0x144>
  103b99:	8d 05 34 94 10 00    	lea    0x109434,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  103b9f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103ba2:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103ba5:	89 04 24             	mov    %eax,(%esp)
  103ba8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103bac:	89 54 24 08          	mov    %edx,0x8(%esp)
  103bb0:	e8 fb c6 ff ff       	call   1002b0 <kprintf>
  103bb5:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  103bb8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103bbb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103bbe:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  103bc1:	89 55 d0             	mov    %edx,-0x30(%ebp)
  103bc4:	e8 c7 f9 ff ff       	call   103590 <ramfs_block_driver_struct>
  103bc9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  103bcc:	89 0c 24             	mov    %ecx,(%esp)
  103bcf:	89 44 24 04          	mov    %eax,0x4(%esp)
  103bd3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  103bd6:	89 44 24 08          	mov    %eax,0x8(%esp)
  103bda:	e8 11 19 00 00       	call   1054f0 <vfs_create_kfile>
  103bdf:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  103be4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103be7:	89 14 24             	mov    %edx,(%esp)
  103bea:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  103bf1:	00 
  103bf2:	89 45 cc             	mov    %eax,-0x34(%ebp)
  103bf5:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  103bf8:	e8 d3 19 00 00       	call   1055d0 <vfs_open>
  103bfd:	b9 01 00 00 00       	mov    $0x1,%ecx
  103c02:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  103c05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c08:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103c0b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  103c0e:	89 04 24             	mov    %eax,(%esp)
  103c11:	89 54 24 04          	mov    %edx,0x4(%esp)
  103c15:	89 74 24 08          	mov    %esi,0x8(%esp)
  103c19:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103c20:	00 
  103c21:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  103c24:	e8 77 1b 00 00       	call   1057a0 <vfs_write>
  103c29:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  103c2c:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  103c33:	0f 84 18 00 00 00    	je     103c51 <tar_load_ramfs+0x131>
  103c39:	8d 05 58 94 10 00    	lea    0x109458,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  103c3f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103c42:	89 04 24             	mov    %eax,(%esp)
  103c45:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103c49:	e8 62 c6 ff ff       	call   1002b0 <kprintf>
  103c4e:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  103c51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c54:	89 04 24             	mov    %eax,(%esp)
  103c57:	e8 f4 19 00 00       	call   105650 <vfs_close>
        }
  103c5c:	89 45 bc             	mov    %eax,-0x44(%ebp)
  103c5f:	e9 2d 00 00 00       	jmp    103c91 <tar_load_ramfs+0x171>
  103c64:	8d 05 71 94 10 00    	lea    0x109471,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  103c6a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103c6d:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103c70:	89 04 24             	mov    %eax,(%esp)
  103c73:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103c77:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c7b:	e8 30 c6 ff ff       	call   1002b0 <kprintf>
            vfs_create_dir(header->name);
  103c80:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103c83:	89 0c 24             	mov    %ecx,(%esp)
  103c86:	89 45 b8             	mov    %eax,-0x48(%ebp)
  103c89:	e8 c2 16 00 00       	call   105350 <vfs_create_dir>
  103c8e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  103c91:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103c94:	c1 e8 09             	shr    $0x9,%eax
  103c97:	c1 e0 09             	shl    $0x9,%eax
  103c9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103c9d:	01 c1                	add    %eax,%ecx
  103c9f:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  103ca2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103ca5:	25 ff 01 00 00       	and    $0x1ff,%eax
  103caa:	3d 00 00 00 00       	cmp    $0x0,%eax
  103caf:	0f 84 0b 00 00 00    	je     103cc0 <tar_load_ramfs+0x1a0>
            address += 512;
  103cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cb8:	05 00 02 00 00       	add    $0x200,%eax
  103cbd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  103cc0:	e9 00 00 00 00       	jmp    103cc5 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  103cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103cc8:	05 01 00 00 00       	add    $0x1,%eax
  103ccd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103cd0:	e9 7d fe ff ff       	jmp    103b52 <tar_load_ramfs+0x32>
  103cd5:	8d 05 97 94 10 00    	lea    0x109497,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  103cdb:	89 04 24             	mov    %eax,(%esp)
  103cde:	e8 cd c5 ff ff       	call   1002b0 <kprintf>
}
  103ce3:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103ce6:	83 c4 64             	add    $0x64,%esp
  103ce9:	5e                   	pop    %esi
  103cea:	5d                   	pop    %ebp
  103ceb:	c3                   	ret    
  103cec:	0f 1f 40 00          	nopl   0x0(%eax)

00103cf0 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  103cf0:	55                   	push   %ebp
  103cf1:	89 e5                	mov    %esp,%ebp
  103cf3:	83 ec 10             	sub    $0x10,%esp
  103cf6:	8b 45 08             	mov    0x8(%ebp),%eax
  103cf9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  103cfc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  103d03:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  103d0a:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103d11:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103d18:	0f 86 39 00 00 00    	jbe    103d57 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  103d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d21:	2d 01 00 00 00       	sub    $0x1,%eax
  103d26:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103d29:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  103d2d:	2d 30 00 00 00       	sub    $0x30,%eax
  103d32:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103d36:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103d39:	01 c1                	add    %eax,%ecx
  103d3b:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  103d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d41:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103d46:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d4c:	c1 e0 03             	shl    $0x3,%eax
  103d4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103d52:	e9 ba ff ff ff       	jmp    103d11 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  103d57:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d5a:	83 c4 10             	add    $0x10,%esp
  103d5d:	5d                   	pop    %ebp
  103d5e:	c3                   	ret    
  103d5f:	90                   	nop

00103d60 <ramfs_vga_read>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
    return malloc(sizeof(struct res_kfile));
}

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  103d60:	55                   	push   %ebp
  103d61:	89 e5                	mov    %esp,%ebp
  103d63:	56                   	push   %esi
  103d64:	83 ec 0c             	sub    $0xc,%esp
  103d67:	8b 45 10             	mov    0x10(%ebp),%eax
  103d6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103d6d:	8b 55 08             	mov    0x8(%ebp),%edx
  103d70:	be 03 00 00 00       	mov    $0x3,%esi
  103d75:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103d78:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103d7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103d7e:	89 f0                	mov    %esi,%eax
  103d80:	83 c4 0c             	add    $0xc,%esp
  103d83:	5e                   	pop    %esi
  103d84:	5d                   	pop    %ebp
  103d85:	c3                   	ret    
  103d86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103d8d:	00 00 00 

00103d90 <ramfs_vga_write>:
}

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  103d90:	55                   	push   %ebp
  103d91:	89 e5                	mov    %esp,%ebp
  103d93:	83 ec 1c             	sub    $0x1c,%esp
  103d96:	8b 45 10             	mov    0x10(%ebp),%eax
  103d99:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103d9c:	8b 55 08             	mov    0x8(%ebp),%edx
  103d9f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103da2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103da5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  103da8:	81 7d f0 06 00 00 00 	cmpl   $0x6,-0x10(%ebp)
  103daf:	0f 84 0c 00 00 00    	je     103dc1 <ramfs_vga_write+0x31>
  103db5:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103dbc:	e9 1f 01 00 00       	jmp    103ee0 <ramfs_vga_write+0x150>

    struct vga_command* vgac = src;
  103dc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103dc4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(vgac->command == CMD_SET) {
  103dc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103dca:	0f b7 00             	movzwl (%eax),%eax
  103dcd:	3d 00 00 00 00       	cmp    $0x0,%eax
  103dd2:	0f 85 2f 00 00 00    	jne    103e07 <ramfs_vga_write+0x77>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  103dd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ddb:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103ddf:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  103de4:	0f 8d 18 00 00 00    	jge    103e02 <ramfs_vga_write+0x72>
  103dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ded:	66 8b 48 04          	mov    0x4(%eax),%cx
  103df1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103df4:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103df8:	8b 15 c0 82 10 00    	mov    0x1082c0,%edx
  103dfe:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    }
  103e02:	e9 00 00 00 00       	jmp    103e07 <ramfs_vga_write+0x77>

    if(vgac->command == CMD_CLEAR) {
  103e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e0a:	0f b7 00             	movzwl (%eax),%eax
  103e0d:	3d 01 00 00 00       	cmp    $0x1,%eax
  103e12:	0f 85 38 00 00 00    	jne    103e50 <ramfs_vga_write+0xc0>
        for(int i = 0; i < (80 * 25); i++) {
  103e18:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  103e1f:	81 7d e8 d0 07 00 00 	cmpl   $0x7d0,-0x18(%ebp)
  103e26:	0f 8d 1f 00 00 00    	jge    103e4b <ramfs_vga_write+0xbb>
            vga_buffer[i] = 0;
  103e2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103e2f:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103e35:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  103e3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103e3e:	05 01 00 00 00       	add    $0x1,%eax
  103e43:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103e46:	e9 d4 ff ff ff       	jmp    103e1f <ramfs_vga_write+0x8f>
            vga_buffer[i] = 0;
        }
    }
  103e4b:	e9 00 00 00 00       	jmp    103e50 <ramfs_vga_write+0xc0>

    if(vgac->command == CMD_SCROLL) {
  103e50:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e53:	0f b7 00             	movzwl (%eax),%eax
  103e56:	3d 02 00 00 00       	cmp    $0x2,%eax
  103e5b:	0f 85 78 00 00 00    	jne    103ed9 <ramfs_vga_write+0x149>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103e61:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103e68:	81 7d e4 80 07 00 00 	cmpl   $0x780,-0x1c(%ebp)
  103e6f:	0f 8d 2e 00 00 00    	jge    103ea3 <ramfs_vga_write+0x113>
            vga_buffer[i] = vga_buffer[i + 80];
  103e75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103e78:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103e7e:	66 8b 94 41 a0 00 00 	mov    0xa0(%ecx,%eax,2),%dx
  103e85:	00 
  103e86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103e89:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103e8f:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103e96:	05 01 00 00 00       	add    $0x1,%eax
  103e9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103e9e:	e9 c5 ff ff ff       	jmp    103e68 <ramfs_vga_write+0xd8>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  103ea3:	e9 00 00 00 00       	jmp    103ea8 <ramfs_vga_write+0x118>
  103ea8:	81 7d e4 d0 07 00 00 	cmpl   $0x7d0,-0x1c(%ebp)
  103eaf:	0f 8d 1f 00 00 00    	jge    103ed4 <ramfs_vga_write+0x144>
            vga_buffer[i] = 0;
  103eb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103eb8:	8b 0d c0 82 10 00    	mov    0x1082c0,%ecx
  103ebe:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  103ec4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103ec7:	05 01 00 00 00       	add    $0x1,%eax
  103ecc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103ecf:	e9 d4 ff ff ff       	jmp    103ea8 <ramfs_vga_write+0x118>
            vga_buffer[i] = 0;
        }
    }
  103ed4:	e9 00 00 00 00       	jmp    103ed9 <ramfs_vga_write+0x149>

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103ed9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103ee0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ee3:	83 c4 1c             	add    $0x1c,%esp
  103ee6:	5d                   	pop    %ebp
  103ee7:	c3                   	ret    
  103ee8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  103eef:	00 

00103ef0 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  103ef0:	55                   	push   %ebp
  103ef1:	89 e5                	mov    %esp,%ebp
  103ef3:	83 ec 18             	sub    $0x18,%esp
  103ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ef9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103efc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103eff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(filemode & FM_EXEC) return 0;
  103f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f05:	25 04 00 00 00       	and    $0x4,%eax
  103f0a:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f0f:	0f 84 0c 00 00 00    	je     103f21 <ramfs_vga_open+0x31>
  103f15:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103f1c:	e9 b2 00 00 00       	jmp    103fd3 <ramfs_vga_open+0xe3>
    if(filemode & FM_READ) return 0;
  103f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f24:	25 01 00 00 00       	and    $0x1,%eax
  103f29:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f2e:	0f 84 0c 00 00 00    	je     103f40 <ramfs_vga_open+0x50>
  103f34:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103f3b:	e9 93 00 00 00       	jmp    103fd3 <ramfs_vga_open+0xe3>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  103f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f43:	25 02 00 00 00       	and    $0x2,%eax
  103f48:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f4d:	0f 84 1c 00 00 00    	je     103f6f <ramfs_vga_open+0x7f>
  103f53:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  103f5a:	00 00 00 
  103f5d:	0f 84 0c 00 00 00    	je     103f6f <ramfs_vga_open+0x7f>
  103f63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103f6a:	e9 64 00 00 00       	jmp    103fd3 <ramfs_vga_open+0xe3>
    if((filemode & FM_WRITE)) vga_writers++;
  103f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f72:	25 02 00 00 00       	and    $0x2,%eax
  103f77:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f7c:	0f 84 0f 00 00 00    	je     103f91 <ramfs_vga_open+0xa1>
  103f82:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  103f87:	05 01 00 00 00       	add    $0x1,%eax
  103f8c:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  103f91:	b8 10 00 00 00       	mov    $0x10,%eax

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  103f96:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103fa0:	e8 8b 07 00 00       	call   104730 <malloc>
  103fa5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rethandle->filemode = filemode;
  103fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103fab:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103fae:	89 41 0c             	mov    %eax,0xc(%ecx)
    rethandle->position = 0;
  103fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fb4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  103fbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fbe:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  103fc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103fc7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103fca:	89 41 04             	mov    %eax,0x4(%ecx)

    return rethandle;
  103fcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fd0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103fd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103fd6:	83 c4 18             	add    $0x18,%esp
  103fd9:	5d                   	pop    %ebp
  103fda:	c3                   	ret    
  103fdb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103fe0 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  103fe0:	55                   	push   %ebp
  103fe1:	89 e5                	mov    %esp,%ebp
  103fe3:	83 ec 08             	sub    $0x8,%esp
  103fe6:	8b 45 08             	mov    0x8(%ebp),%eax
  103fe9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(handle->filemode & FM_WRITE) vga_writers--;
  103fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103fef:	8b 40 0c             	mov    0xc(%eax),%eax
  103ff2:	25 02 00 00 00       	and    $0x2,%eax
  103ff7:	3d 00 00 00 00       	cmp    $0x0,%eax
  103ffc:	0f 84 0f 00 00 00    	je     104011 <ramfs_vga_close+0x31>
  104002:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  104007:	05 ff ff ff ff       	add    $0xffffffff,%eax
  10400c:	a3 2c a4 10 00       	mov    %eax,0x10a42c

    free(handle);
  104011:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104014:	89 04 24             	mov    %eax,(%esp)
  104017:	e8 e4 0a 00 00       	call   104b00 <free>
  10401c:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  104021:	83 c4 08             	add    $0x8,%esp
  104024:	5d                   	pop    %ebp
  104025:	c3                   	ret    
  104026:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10402d:	00 00 00 

00104030 <ramfs_vga_available>:

uint32_t ramfs_vga_writers() {
    return vga_writers;
}

uint32_t ramfs_vga_available(struct res_handle* handle) {
  104030:	55                   	push   %ebp
  104031:	89 e5                	mov    %esp,%ebp
  104033:	50                   	push   %eax
  104034:	8b 45 08             	mov    0x8(%ebp),%eax
  104037:	b9 06 00 00 00       	mov    $0x6,%ecx
  10403c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sizeof(struct vga_command);
  10403f:	89 c8                	mov    %ecx,%eax
  104041:	83 c4 04             	add    $0x4,%esp
  104044:	5d                   	pop    %ebp
  104045:	c3                   	ret    
  104046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10404d:	00 00 00 

00104050 <ramfs_vga_create>:
}

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  104050:	55                   	push   %ebp
  104051:	89 e5                	mov    %esp,%ebp
  104053:	83 ec 18             	sub    $0x18,%esp
  104056:	8b 45 08             	mov    0x8(%ebp),%eax
  104059:	b9 08 00 00 00       	mov    $0x8,%ecx
  10405e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return malloc(sizeof(struct res_kfile));
  104061:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  104068:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10406b:	e8 c0 06 00 00       	call   104730 <malloc>
  104070:	83 c4 18             	add    $0x18,%esp
  104073:	5d                   	pop    %ebp
  104074:	c3                   	ret    
  104075:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10407c:	00 00 00 00 

00104080 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  104080:	55                   	push   %ebp
  104081:	89 e5                	mov    %esp,%ebp
  104083:	8d 05 c4 82 10 00    	lea    0x1082c4,%eax
    return &vga_driver;
  104089:	5d                   	pop    %ebp
  10408a:	c3                   	ret    
  10408b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104090 <ramfs_vga_writers>:
}

uint32_t ramfs_vga_writers() {
  104090:	55                   	push   %ebp
  104091:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  104093:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  104098:	5d                   	pop    %ebp
  104099:	c3                   	ret    
  10409a:	66 90                	xchg   %ax,%ax
  10409c:	66 90                	xchg   %ax,%ax
  10409e:	66 90                	xchg   %ax,%ax

001040a0 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enableScheduling(void) {
  1040a0:	55                   	push   %ebp
  1040a1:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  1040a3:	c7 05 30 a4 10 00 01 	movl   $0x1,0x10a430
  1040aa:	00 00 00 
}
  1040ad:	5d                   	pop    %ebp
  1040ae:	c3                   	ret    
  1040af:	90                   	nop

001040b0 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  1040b0:	55                   	push   %ebp
  1040b1:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  1040b3:	a1 30 a4 10 00       	mov    0x10a430,%eax
  1040b8:	5d                   	pop    %ebp
  1040b9:	c3                   	ret    
  1040ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001040c0 <get_current_task>:
}

struct task* get_current_task(void) {
  1040c0:	55                   	push   %ebp
  1040c1:	89 e5                	mov    %esp,%ebp
    return current_task;
  1040c3:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1040c8:	5d                   	pop    %ebp
  1040c9:	c3                   	ret    
  1040ca:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001040d0 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  1040d0:	55                   	push   %ebp
  1040d1:	89 e5                	mov    %esp,%ebp
  1040d3:	83 ec 18             	sub    $0x18,%esp
  1040d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1040d9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1040de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  1040e1:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1040e6:	8b 40 34             	mov    0x34(%eax),%eax
  1040e9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  1040ec:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1040f3:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1040f6:	e8 35 06 00 00       	call   104730 <malloc>
  1040fb:	b9 00 00 00 00       	mov    $0x0,%ecx
  104100:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  104106:	89 42 34             	mov    %eax,0x34(%edx)
    current_task->handle_list->next = old;
  104109:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10410c:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  104112:	8b 52 34             	mov    0x34(%edx),%edx
  104115:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  104118:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10411b:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  104121:	8b 52 34             	mov    0x34(%edx),%edx
  104124:	89 02                	mov    %eax,(%edx)

    return 0;
  104126:	89 c8                	mov    %ecx,%eax
  104128:	83 c4 18             	add    $0x18,%esp
  10412b:	5d                   	pop    %ebp
  10412c:	c3                   	ret    
  10412d:	0f 1f 00             	nopl   (%eax)

00104130 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  104130:	55                   	push   %ebp
  104131:	89 e5                	mov    %esp,%ebp
  104133:	83 ec 18             	sub    $0x18,%esp
  104136:	8b 45 08             	mov    0x8(%ebp),%eax
  104139:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  10413c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104141:	8b 40 34             	mov    0x34(%eax),%eax
  104144:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  104147:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10414e:	0f 85 0c 00 00 00    	jne    104160 <unregister_handle+0x30>
  104154:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  10415b:	e9 b4 00 00 00       	jmp    104214 <unregister_handle+0xe4>
    if(cur == 0) return 1;
  104160:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104167:	0f 85 0c 00 00 00    	jne    104179 <unregister_handle+0x49>
  10416d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104174:	e9 9b 00 00 00       	jmp    104214 <unregister_handle+0xe4>

    if(cur->handle == h) {
  104179:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10417c:	8b 00                	mov    (%eax),%eax
  10417e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104181:	0f 85 26 00 00 00    	jne    1041ad <unregister_handle+0x7d>
        current_task->handle_list = cur->next;
  104187:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10418a:	8b 40 04             	mov    0x4(%eax),%eax
  10418d:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  104193:	89 41 34             	mov    %eax,0x34(%ecx)
        free(cur);
  104196:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104199:	89 04 24             	mov    %eax,(%esp)
  10419c:	e8 5f 09 00 00       	call   104b00 <free>

        return 0;
  1041a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1041a8:	e9 67 00 00 00       	jmp    104214 <unregister_handle+0xe4>
    }

    while(cur != 0) {
  1041ad:	e9 00 00 00 00       	jmp    1041b2 <unregister_handle+0x82>
  1041b2:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1041b9:	0f 84 4e 00 00 00    	je     10420d <unregister_handle+0xdd>
        if(cur->next->handle == h) {
  1041bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041c2:	8b 40 04             	mov    0x4(%eax),%eax
  1041c5:	8b 00                	mov    (%eax),%eax
  1041c7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1041ca:	0f 85 2f 00 00 00    	jne    1041ff <unregister_handle+0xcf>
            void* next = cur->next;
  1041d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041d3:	8b 40 04             	mov    0x4(%eax),%eax
  1041d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  1041d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041dc:	8b 40 04             	mov    0x4(%eax),%eax
  1041df:	8b 40 04             	mov    0x4(%eax),%eax
  1041e2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1041e5:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  1041e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1041eb:	89 04 24             	mov    %eax,(%esp)
  1041ee:	e8 0d 09 00 00       	call   104b00 <free>

            return 0;
  1041f3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1041fa:	e9 15 00 00 00       	jmp    104214 <unregister_handle+0xe4>
        }

        cur = cur->next;
  1041ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104202:	8b 40 04             	mov    0x4(%eax),%eax
  104205:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  104208:	e9 a5 ff ff ff       	jmp    1041b2 <unregister_handle+0x82>

    return 3;
  10420d:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  104214:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104217:	83 c4 18             	add    $0x18,%esp
  10421a:	5d                   	pop    %ebp
  10421b:	c3                   	ret    
  10421c:	0f 1f 40 00          	nopl   0x0(%eax)

00104220 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  104220:	55                   	push   %ebp
  104221:	89 e5                	mov    %esp,%ebp
  104223:	57                   	push   %edi
  104224:	56                   	push   %esi
  104225:	83 ec 40             	sub    $0x40,%esp
  104228:	8b 45 08             	mov    0x8(%ebp),%eax
  10422b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  10422e:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104233:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  104239:	0f 85 85 00 00 00    	jne    1042c4 <schedule_exception+0xa4>
  10423f:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104244:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  10424b:	0f 85 73 00 00 00    	jne    1042c4 <schedule_exception+0xa4>
  104251:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  104256:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10425d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104260:	e8 2b c0 ff ff       	call   100290 <setclr>
  104265:	8d 05 c9 94 10 00    	lea    0x1094c9,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  10426b:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  104271:	8b 09                	mov    (%ecx),%ecx
  104273:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  104279:	8b 52 1c             	mov    0x1c(%edx),%edx
  10427c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10427f:	8b 76 1c             	mov    0x1c(%esi),%esi
  104282:	8b 7d f0             	mov    -0x10(%ebp),%edi
  104285:	8b 7f 20             	mov    0x20(%edi),%edi
  104288:	89 04 24             	mov    %eax,(%esp)
  10428b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10428f:	89 54 24 08          	mov    %edx,0x8(%esp)
  104293:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104297:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10429b:	e8 10 c0 ff ff       	call   1002b0 <kprintf>
  1042a0:	8d 0d 08 95 10 00    	lea    0x109508,%ecx
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  1042a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1042a9:	89 14 24             	mov    %edx,(%esp)
  1042ac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1042b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1042b3:	e8 08 be ff ff       	call   1000c0 <show_cod>

        //will never occur cause COD terminates execution
        return 0;
  1042b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1042bf:	e9 90 00 00 00       	jmp    104354 <schedule_exception+0x134>
  1042c4:	b8 04 00 00 00       	mov    $0x4,%eax
    } else {
        //Potential security leaks available in following code.
        setclr(0x04);
  1042c9:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1042d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1042d3:	e8 b8 bf ff ff       	call   100290 <setclr>
  1042d8:	8d 05 c9 94 10 00    	lea    0x1094c9,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->filePath, cpu->intr, cpu->error);
  1042de:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  1042e4:	8b 09                	mov    (%ecx),%ecx
  1042e6:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  1042ec:	8b 52 1c             	mov    0x1c(%edx),%edx
  1042ef:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1042f2:	8b 76 1c             	mov    0x1c(%esi),%esi
  1042f5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1042f8:	8b 7f 20             	mov    0x20(%edi),%edi
  1042fb:	89 04 24             	mov    %eax,(%esp)
  1042fe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104302:	89 54 24 08          	mov    %edx,0x8(%esp)
  104306:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10430a:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10430e:	e8 9d bf ff ff       	call   1002b0 <kprintf>
  104313:	8d 0d 24 92 10 00    	lea    0x109224,%ecx
        kprintf("\n");
  104319:	89 0c 24             	mov    %ecx,(%esp)
  10431c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10431f:	e8 8c bf ff ff       	call   1002b0 <kprintf>
        show_dump(cpu);
  104324:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104327:	89 0c 24             	mov    %ecx,(%esp)
  10432a:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10432d:	e8 0e be ff ff       	call   100140 <show_dump>
  104332:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  104337:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10433e:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104341:	e8 4a bf ff ff       	call   100290 <setclr>

        return terminate_current(cpu);
  104346:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104349:	89 04 24             	mov    %eax,(%esp)
  10434c:	e8 0f 00 00 00       	call   104360 <terminate_current>
  104351:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
}
  104354:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104357:	83 c4 40             	add    $0x40,%esp
  10435a:	5e                   	pop    %esi
  10435b:	5f                   	pop    %edi
  10435c:	5d                   	pop    %ebp
  10435d:	c3                   	ret    
  10435e:	66 90                	xchg   %ax,%ax

00104360 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  104360:	55                   	push   %ebp
  104361:	89 e5                	mov    %esp,%ebp
  104363:	83 ec 18             	sub    $0x18,%esp
  104366:	8b 45 08             	mov    0x8(%ebp),%eax
  104369:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  10436c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104371:	8b 40 08             	mov    0x8(%eax),%eax
  104374:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  104377:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10437c:	8b 40 0c             	mov    0xc(%eax),%eax
  10437f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* old = current_task;
  104382:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104387:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vmm_free_current_pagetables();
  10438a:	e8 41 26 00 00       	call   1069d0 <vmm_free_current_pagetables>

    if (current_task == first_task) {
  10438f:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104394:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  10439a:	0f 85 0d 00 00 00    	jne    1043ad <terminate_current+0x4d>
        first_task = current_task->next;
  1043a0:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1043a5:	8b 40 08             	mov    0x8(%eax),%eax
  1043a8:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    if (next != 0) {
  1043ad:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1043b4:	0f 84 09 00 00 00    	je     1043c3 <terminate_current+0x63>
        next->prev = prev;
  1043ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1043bd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1043c0:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  1043c3:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1043ca:	0f 84 09 00 00 00    	je     1043d9 <terminate_current+0x79>
        prev->next = next;
  1043d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1043d3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1043d6:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if (next == 0)
  1043d9:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1043e0:	0f 85 08 00 00 00    	jne    1043ee <terminate_current+0x8e>
        next = first_task;
  1043e6:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1043eb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  1043ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1043f1:	a3 38 a4 10 00       	mov    %eax,0x10a438

    free(old->cpuState);
  1043f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043f9:	8b 40 04             	mov    0x4(%eax),%eax
  1043fc:	89 04 24             	mov    %eax,(%esp)
  1043ff:	e8 fc 06 00 00       	call   104b00 <free>
    free(old);
  104404:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104407:	89 04 24             	mov    %eax,(%esp)
  10440a:	e8 f1 06 00 00       	call   104b00 <free>

    if(current_task == 0) {
  10440f:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  104416:	00 00 00 
  104419:	0f 85 15 00 00 00    	jne    104434 <terminate_current+0xd4>
  10441f:	8d 05 31 95 10 00    	lea    0x109531,%eax
        show_cod(cpu, "Last task terminated.");
  104425:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104428:	89 0c 24             	mov    %ecx,(%esp)
  10442b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10442f:	e8 8c bc ff ff       	call   1000c0 <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  104434:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104439:	8b 40 14             	mov    0x14(%eax),%eax
  10443c:	89 04 24             	mov    %eax,(%esp)
  10443f:	e8 fc 2d 00 00       	call   107240 <vmm_activate_pagedir>
    return current_task->cpuState;
  104444:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104449:	8b 40 04             	mov    0x4(%eax),%eax
  10444c:	83 c4 18             	add    $0x18,%esp
  10444f:	5d                   	pop    %ebp
  104450:	c3                   	ret    
  104451:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104458:	0f 1f 84 00 00 00 00 
  10445f:	00 

00104460 <init_task>:
}

struct task* init_task(uint32_t task_pagedir, void* entry) {
  104460:	55                   	push   %ebp
  104461:	89 e5                	mov    %esp,%ebp
  104463:	56                   	push   %esi
  104464:	83 ec 74             	sub    $0x74,%esp
  104467:	8b 45 0c             	mov    0xc(%ebp),%eax
  10446a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10446d:	ba 38 00 00 00       	mov    $0x38,%edx
  104472:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104475:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  104478:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  10447f:	89 55 ac             	mov    %edx,-0x54(%ebp)
  104482:	e8 a9 02 00 00       	call   104730 <malloc>
  104487:	b9 38 00 00 00       	mov    $0x38,%ecx
  10448c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ntask->cpuState = malloc(sizeof(struct cpu_state));
  10448f:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  104496:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  104499:	e8 92 02 00 00       	call   104730 <malloc>
  10449e:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  1044a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1044a6:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  1044a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1044ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1044af:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  1044b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044b5:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  1044b8:	a1 e0 82 10 00       	mov    0x1082e0,%eax
  1044bd:	89 c1                	mov    %eax,%ecx
  1044bf:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1044c5:	89 0d e0 82 10 00    	mov    %ecx,0x1082e0
  1044cb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1044ce:	89 01                	mov    %eax,(%ecx)

    ntask->stdin  = 0;
  1044d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044d3:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    ntask->stdout = 0;
  1044da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044dd:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    ntask->stderr = 0;
  1044e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044e7:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)

    ntask->next = (void*) 0;
  1044ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044f1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  1044f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044fb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  104502:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  104509:	00 00 00 
  10450c:	0f 85 0d 00 00 00    	jne    10451f <init_task+0xbf>
        first_task = ntask;
  104512:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104515:	a3 34 a4 10 00       	mov    %eax,0x10a434
    } else {
  10451a:	e9 1f 00 00 00       	jmp    10453e <init_task+0xde>
        ntask->next = first_task;
  10451f:	a1 34 a4 10 00       	mov    0x10a434,%eax
  104524:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104527:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  10452a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10452d:	8b 0d 34 a4 10 00    	mov    0x10a434,%ecx
  104533:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  104536:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104539:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  10453e:	e8 2d 21 00 00       	call   106670 <vmm_get_current_pagedir>
  104543:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vmm_activate_pagedir(task_pagedir);
  104546:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104549:	89 04 24             	mov    %eax,(%esp)
  10454c:	e8 ef 2c 00 00       	call   107240 <vmm_activate_pagedir>
  104551:	b8 00 00 00 00       	mov    $0x0,%eax

    vmm_alloc_addr(ntask->user_stack_bottom, 0);
  104556:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104559:	8b 49 10             	mov    0x10(%ecx),%ecx
  10455c:	89 0c 24             	mov    %ecx,(%esp)
  10455f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104566:	00 
  104567:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10456a:	e8 d1 2b 00 00       	call   107140 <vmm_alloc_addr>
  10456f:	b9 38 00 00 00       	mov    $0x38,%ecx
  104574:	8d 55 b0             	lea    -0x50(%ebp),%edx

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  104577:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10457e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  104585:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10458c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  104593:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10459a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  1045a1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  1045a8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  1045af:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  1045b6:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1045b9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  1045bc:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  1045c3:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
  1045ca:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1045cd:	8b 76 10             	mov    0x10(%esi),%esi
  1045d0:	81 c6 00 10 00 00    	add    $0x1000,%esi
  1045d6:	89 75 e0             	mov    %esi,-0x20(%ebp)
  1045d9:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  1045e0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1045e3:	8b 76 04             	mov    0x4(%esi),%esi
  1045e6:	89 34 24             	mov    %esi,(%esp)
  1045e9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1045ed:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1045f4:	00 
  1045f5:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1045f8:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1045fb:	e8 00 08 00 00       	call   104e00 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  104600:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104603:	89 04 24             	mov    %eax,(%esp)
  104606:	e8 35 2c 00 00       	call   107240 <vmm_activate_pagedir>

    return ntask;
  10460b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10460e:	83 c4 74             	add    $0x74,%esp
  104611:	5e                   	pop    %esi
  104612:	5d                   	pop    %ebp
  104613:	c3                   	ret    
  104614:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10461b:	00 00 00 00 00 

00104620 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  104620:	55                   	push   %ebp
  104621:	89 e5                	mov    %esp,%ebp
  104623:	83 ec 18             	sub    $0x18,%esp
  104626:	8b 45 08             	mov    0x8(%ebp),%eax
  104629:	b9 38 00 00 00       	mov    $0x38,%ecx
  10462e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  104631:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104636:	8b 40 04             	mov    0x4(%eax),%eax
  104639:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10463c:	89 04 24             	mov    %eax,(%esp)
  10463f:	89 54 24 04          	mov    %edx,0x4(%esp)
  104643:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10464a:	00 
  10464b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10464e:	e8 ad 07 00 00       	call   104e00 <memcpy>
}
  104653:	83 c4 18             	add    $0x18,%esp
  104656:	5d                   	pop    %ebp
  104657:	c3                   	ret    
  104658:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10465f:	00 

00104660 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  104660:	55                   	push   %ebp
  104661:	89 e5                	mov    %esp,%ebp
  104663:	83 ec 18             	sub    $0x18,%esp
  104666:	8b 45 08             	mov    0x8(%ebp),%eax
  104669:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  10466c:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  104673:	00 00 00 
  104676:	0f 84 9d 00 00 00    	je     104719 <schedule+0xb9>
  10467c:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  104683:	00 00 00 
  104686:	0f 84 8d 00 00 00    	je     104719 <schedule+0xb9>
        if (current_task == 0) {
  10468c:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  104693:	00 00 00 
  104696:	0f 85 2a 00 00 00    	jne    1046c6 <schedule+0x66>
            current_task = first_task;
  10469c:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1046a1:	a3 38 a4 10 00       	mov    %eax,0x10a438
            vmm_activate_pagedir(current_task->phys_pdir);
  1046a6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1046ab:	8b 40 14             	mov    0x14(%eax),%eax
  1046ae:	89 04 24             	mov    %eax,(%esp)
  1046b1:	e8 8a 2b 00 00       	call   107240 <vmm_activate_pagedir>
            return current_task->cpuState;
  1046b6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1046bb:	8b 40 04             	mov    0x4(%eax),%eax
  1046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1046c1:	e9 59 00 00 00       	jmp    10471f <schedule+0xbf>
        }

        struct task* next = current_task->next;
  1046c6:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1046cb:	8b 40 08             	mov    0x8(%eax),%eax
  1046ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  1046d1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1046d8:	0f 85 08 00 00 00    	jne    1046e6 <schedule+0x86>
            next = first_task;
  1046de:	a1 34 a4 10 00       	mov    0x10a434,%eax
  1046e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  1046e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1046e9:	89 04 24             	mov    %eax,(%esp)
  1046ec:	e8 2f ff ff ff       	call   104620 <save_cpu_state>

        current_task = next;
  1046f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1046f4:	a3 38 a4 10 00       	mov    %eax,0x10a438
        vmm_activate_pagedir(current_task->phys_pdir);
  1046f9:	a1 38 a4 10 00       	mov    0x10a438,%eax
  1046fe:	8b 40 14             	mov    0x14(%eax),%eax
  104701:	89 04 24             	mov    %eax,(%esp)
  104704:	e8 37 2b 00 00       	call   107240 <vmm_activate_pagedir>
        return current_task->cpuState;
  104709:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10470e:	8b 40 04             	mov    0x4(%eax),%eax
  104711:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104714:	e9 06 00 00 00       	jmp    10471f <schedule+0xbf>
    }
    return cpu;
  104719:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10471c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10471f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104722:	83 c4 18             	add    $0x18,%esp
  104725:	5d                   	pop    %ebp
  104726:	c3                   	ret    
  104727:	66 90                	xchg   %ax,%ax
  104729:	66 90                	xchg   %ax,%ax
  10472b:	66 90                	xchg   %ax,%ax
  10472d:	66 90                	xchg   %ax,%ax
  10472f:	90                   	nop

00104730 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  104730:	55                   	push   %ebp
  104731:	89 e5                	mov    %esp,%ebp
  104733:	83 ec 38             	sub    $0x38,%esp
  104736:	8b 45 08             	mov    0x8(%ebp),%eax
  104739:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  10473c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104743:	0f 85 0c 00 00 00    	jne    104755 <malloc+0x25>
  104749:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104750:	e9 95 01 00 00       	jmp    1048ea <malloc+0x1ba>

    struct memory_node* last = 0;
  104755:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  10475c:	a1 44 a4 10 00       	mov    0x10a444,%eax
  104761:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104764:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10476b:	0f 84 27 00 00 00    	je     104798 <malloc+0x68>
        if (cur->size >= size) {
  104771:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104774:	8b 00                	mov    (%eax),%eax
  104776:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104779:	0f 82 05 00 00 00    	jb     104784 <malloc+0x54>
            break;
  10477f:	e9 14 00 00 00       	jmp    104798 <malloc+0x68>
        }
        last = cur;
  104784:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104787:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10478a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10478d:	8b 40 08             	mov    0x8(%eax),%eax
  104790:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104793:	e9 cc ff ff ff       	jmp    104764 <malloc+0x34>

    if (cur == 0) {
  104798:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10479f:	0f 85 bc 00 00 00    	jne    104861 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  1047a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1047a8:	c1 e8 0c             	shr    $0xc,%eax
  1047ab:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  1047ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1047b1:	25 ff 0f 00 00       	and    $0xfff,%eax
  1047b6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1047bb:	0f 84 0b 00 00 00    	je     1047cc <malloc+0x9c>
            pgs++;
  1047c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047c4:	05 01 00 00 00       	add    $0x1,%eax
  1047c9:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  1047cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047cf:	89 04 24             	mov    %eax,(%esp)
  1047d2:	e8 19 29 00 00       	call   1070f0 <vmm_alloc_cont>
  1047d7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  1047da:	e8 81 04 00 00       	call   104c60 <pop_unused_node>
  1047df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  1047e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1047e5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1047e8:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  1047eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1047ee:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1047f1:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  1047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047f6:	c1 e0 0c             	shl    $0xc,%eax
  1047f9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1047fc:	0f 86 3c 00 00 00    	jbe    10483e <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  104802:	e8 59 04 00 00       	call   104c60 <pop_unused_node>
  104807:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  10480d:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  104810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104813:	8b 40 04             	mov    0x4(%eax),%eax
  104816:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  104819:	03 02                	add    (%edx),%eax
  10481b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10481e:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  104821:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104824:	c1 e0 0c             	shl    $0xc,%eax
  104827:	2b 45 f8             	sub    -0x8(%ebp),%eax
  10482a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10482d:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  10482f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104832:	89 0c 24             	mov    %ecx,(%esp)
  104835:	89 44 24 04          	mov    %eax,0x4(%esp)
  104839:	e8 c2 00 00 00       	call   104900 <append_to_list>
  10483e:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        }

        append_to_list(&first_used, fill);
  104844:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104847:	89 04 24             	mov    %eax,(%esp)
  10484a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10484e:	e8 ad 00 00 00       	call   104900 <append_to_list>

        return (void*) fill->address;
  104853:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104856:	8b 40 04             	mov    0x4(%eax),%eax
  104859:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10485c:	e9 89 00 00 00       	jmp    1048ea <malloc+0x1ba>
  104861:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
    } else {
        uint32_t freesize = cur->size - size;
  104867:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10486a:	8b 09                	mov    (%ecx),%ecx
  10486c:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  10486f:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  104872:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104875:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104878:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  10487a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10487d:	89 04 24             	mov    %eax,(%esp)
  104880:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104884:	e8 a7 00 00 00       	call   104930 <remove_from_list>
  104889:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        append_to_list(&first_used, cur);
  10488f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104892:	89 04 24             	mov    %eax,(%esp)
  104895:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104899:	e8 62 00 00 00       	call   104900 <append_to_list>

        if (freesize > 0) {
  10489e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  1048a5:	0f 86 36 00 00 00    	jbe    1048e1 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  1048ab:	e8 b0 03 00 00       	call   104c60 <pop_unused_node>
  1048b0:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  1048b6:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  1048b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1048bc:	8b 40 04             	mov    0x4(%eax),%eax
  1048bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1048c2:	03 02                	add    (%edx),%eax
  1048c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1048c7:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  1048ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1048cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1048d0:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  1048d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1048d5:	89 0c 24             	mov    %ecx,(%esp)
  1048d8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1048dc:	e8 1f 00 00 00       	call   104900 <append_to_list>
        }

        return (void*) cur->address;
  1048e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1048e4:	8b 40 04             	mov    0x4(%eax),%eax
  1048e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  1048ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1048ed:	83 c4 38             	add    $0x38,%esp
  1048f0:	5d                   	pop    %ebp
  1048f1:	c3                   	ret    
  1048f2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1048f9:	1f 84 00 00 00 00 00 

00104900 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  104900:	55                   	push   %ebp
  104901:	89 e5                	mov    %esp,%ebp
  104903:	83 ec 08             	sub    $0x8,%esp
  104906:	8b 45 0c             	mov    0xc(%ebp),%eax
  104909:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10490c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10490f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  104912:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104915:	8b 00                	mov    (%eax),%eax
  104917:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10491a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  10491d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104920:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104923:	89 01                	mov    %eax,(%ecx)
}
  104925:	83 c4 08             	add    $0x8,%esp
  104928:	5d                   	pop    %ebp
  104929:	c3                   	ret    
  10492a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104930 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  104930:	55                   	push   %ebp
  104931:	89 e5                	mov    %esp,%ebp
  104933:	83 ec 10             	sub    $0x10,%esp
  104936:	8b 45 0c             	mov    0xc(%ebp),%eax
  104939:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10493c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10493f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  104942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  104949:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10494c:	8b 00                	mov    (%eax),%eax
  10494e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104951:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104958:	0f 84 4e 00 00 00    	je     1049ac <remove_from_list+0x7c>
        if (cur == element) {
  10495e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104961:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104964:	0f 85 2e 00 00 00    	jne    104998 <remove_from_list+0x68>
            if (last == 0) {
  10496a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104971:	0f 85 10 00 00 00    	jne    104987 <remove_from_list+0x57>
                *root = cur->next;
  104977:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10497a:	8b 40 08             	mov    0x8(%eax),%eax
  10497d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104980:	89 01                	mov    %eax,(%ecx)
                return;
  104982:	e9 25 00 00 00       	jmp    1049ac <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  104987:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10498a:	8b 40 08             	mov    0x8(%eax),%eax
  10498d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104990:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  104993:	e9 14 00 00 00       	jmp    1049ac <remove_from_list+0x7c>
            }
        }
        last = cur;
  104998:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10499b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10499e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1049a1:	8b 40 08             	mov    0x8(%eax),%eax
  1049a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  1049a7:	e9 a5 ff ff ff       	jmp    104951 <remove_from_list+0x21>
}
  1049ac:	83 c4 10             	add    $0x10,%esp
  1049af:	5d                   	pop    %ebp
  1049b0:	c3                   	ret    
  1049b1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1049b8:	0f 1f 84 00 00 00 00 
  1049bf:	00 

001049c0 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  1049c0:	55                   	push   %ebp
  1049c1:	89 e5                	mov    %esp,%ebp
  1049c3:	83 ec 28             	sub    $0x28,%esp
  1049c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1049c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1049cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1049cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  1049d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1049d5:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  1049d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  1049dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1049df:	89 04 24             	mov    %eax,(%esp)
  1049e2:	e8 49 fd ff ff       	call   104730 <malloc>
  1049e7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  1049ea:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1049f1:	0f 84 22 00 00 00    	je     104a19 <calloc+0x59>
  1049f7:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  1049fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104a02:	89 0c 24             	mov    %ecx,(%esp)
  104a05:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104a0c:	00 
  104a0d:	89 54 24 08          	mov    %edx,0x8(%esp)
  104a11:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104a14:	e8 87 03 00 00       	call   104da0 <memset>
    }

    return p;
  104a19:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104a1c:	83 c4 28             	add    $0x28,%esp
  104a1f:	5d                   	pop    %ebp
  104a20:	c3                   	ret    
  104a21:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104a28:	0f 1f 84 00 00 00 00 
  104a2f:	00 

00104a30 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  104a30:	55                   	push   %ebp
  104a31:	89 e5                	mov    %esp,%ebp
  104a33:	83 ec 28             	sub    $0x28,%esp
  104a36:	8b 45 0c             	mov    0xc(%ebp),%eax
  104a39:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104a3c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104a3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  104a42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  104a49:	a1 40 a4 10 00       	mov    0x10a440,%eax
  104a4e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  104a51:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104a58:	0f 84 8e 00 00 00    	je     104aec <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  104a5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104a61:	8b 40 04             	mov    0x4(%eax),%eax
  104a64:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104a67:	39 c8                	cmp    %ecx,%eax
  104a69:	0f 85 69 00 00 00    	jne    104ad8 <realloc+0xa8>
            if (size == 0) {
  104a6f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104a76:	0f 85 17 00 00 00    	jne    104a93 <realloc+0x63>
                free(ptr);
  104a7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a7f:	89 04 24             	mov    %eax,(%esp)
  104a82:	e8 79 00 00 00       	call   104b00 <free>
                return 0;
  104a87:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104a8e:	e9 60 00 00 00       	jmp    104af3 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  104a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104a96:	89 04 24             	mov    %eax,(%esp)
  104a99:	e8 92 fc ff ff       	call   104730 <malloc>
  104a9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  104aa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104aa4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104aa7:	8b 49 04             	mov    0x4(%ecx),%ecx
  104aaa:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104aad:	8b 12                	mov    (%edx),%edx
  104aaf:	89 04 24             	mov    %eax,(%esp)
  104ab2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104ab6:	89 54 24 08          	mov    %edx,0x8(%esp)
  104aba:	e8 41 03 00 00       	call   104e00 <memcpy>
                free((void*) cur->address);
  104abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ac2:	8b 40 04             	mov    0x4(%eax),%eax
  104ac5:	89 04 24             	mov    %eax,(%esp)
  104ac8:	e8 33 00 00 00       	call   104b00 <free>

                return new;
  104acd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104ad0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104ad3:	e9 1b 00 00 00       	jmp    104af3 <realloc+0xc3>
            }
        }
        last = cur;
  104ad8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104adb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  104ade:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ae1:	8b 40 08             	mov    0x8(%eax),%eax
  104ae4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  104ae7:	e9 65 ff ff ff       	jmp    104a51 <realloc+0x21>
    return 0;
  104aec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104af3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104af6:	83 c4 28             	add    $0x28,%esp
  104af9:	5d                   	pop    %ebp
  104afa:	c3                   	ret    
  104afb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104b00 <free>:

void free(void* ptr) {
  104b00:	55                   	push   %ebp
  104b01:	89 e5                	mov    %esp,%ebp
  104b03:	83 ec 18             	sub    $0x18,%esp
  104b06:	8b 45 08             	mov    0x8(%ebp),%eax
  104b09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  104b0c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  104b13:	a1 40 a4 10 00       	mov    0x10a440,%eax
  104b18:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  104b1b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104b22:	0f 84 35 00 00 00    	je     104b5d <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  104b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104b2b:	8b 40 04             	mov    0x4(%eax),%eax
  104b2e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104b31:	39 c8                	cmp    %ecx,%eax
  104b33:	0f 85 10 00 00 00    	jne    104b49 <free+0x49>
            merge_into_frees(cur);
  104b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104b3c:	89 04 24             	mov    %eax,(%esp)
  104b3f:	e8 2c 00 00 00       	call   104b70 <merge_into_frees>
            break;
  104b44:	e9 14 00 00 00       	jmp    104b5d <free+0x5d>
        }
        last = cur;
  104b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104b4c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  104b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104b52:	8b 40 08             	mov    0x8(%eax),%eax
  104b55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  104b58:	e9 be ff ff ff       	jmp    104b1b <free+0x1b>
}
  104b5d:	83 c4 18             	add    $0x18,%esp
  104b60:	5d                   	pop    %ebp
  104b61:	c3                   	ret    
  104b62:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104b69:	1f 84 00 00 00 00 00 

00104b70 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  104b70:	55                   	push   %ebp
  104b71:	89 e5                	mov    %esp,%ebp
  104b73:	56                   	push   %esi
  104b74:	83 ec 14             	sub    $0x14,%esp
  104b77:	8b 45 08             	mov    0x8(%ebp),%eax
  104b7a:	8d 0d 40 a4 10 00    	lea    0x10a440,%ecx
  104b80:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  104b83:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b86:	89 0c 24             	mov    %ecx,(%esp)
  104b89:	89 44 24 04          	mov    %eax,0x4(%esp)
  104b8d:	e8 9e fd ff ff       	call   104930 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  104b92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  104b99:	a1 44 a4 10 00       	mov    0x10a444,%eax
  104b9e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104ba1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104ba8:	0f 84 92 00 00 00    	je     104c40 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  104bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bb1:	8b 40 04             	mov    0x4(%eax),%eax
  104bb4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104bb7:	03 01                	add    (%ecx),%eax
  104bb9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104bbc:	3b 41 04             	cmp    0x4(%ecx),%eax
  104bbf:	0f 85 26 00 00 00    	jne    104beb <merge_into_frees+0x7b>
  104bc5:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->address = cur->address;
  104bcb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104bce:	8b 49 04             	mov    0x4(%ecx),%ecx
  104bd1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104bd4:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  104bd7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104bda:	89 04 24             	mov    %eax,(%esp)
  104bdd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104be1:	e8 4a fd ff ff       	call   104930 <remove_from_list>
            goto editedList;
  104be6:	e9 a7 ff ff ff       	jmp    104b92 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  104beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bee:	8b 40 04             	mov    0x4(%eax),%eax
  104bf1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104bf4:	8b 49 04             	mov    0x4(%ecx),%ecx
  104bf7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104bfa:	03 0a                	add    (%edx),%ecx
  104bfc:	39 c8                	cmp    %ecx,%eax
  104bfe:	0f 85 28 00 00 00    	jne    104c2c <merge_into_frees+0xbc>
  104c04:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->size += cur->size;
  104c0a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104c0d:	8b 09                	mov    (%ecx),%ecx
  104c0f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104c12:	8b 32                	mov    (%edx),%esi
  104c14:	01 ce                	add    %ecx,%esi
  104c16:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  104c18:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104c1b:	89 04 24             	mov    %eax,(%esp)
  104c1e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c22:	e8 09 fd ff ff       	call   104930 <remove_from_list>
            goto editedList;
  104c27:	e9 66 ff ff ff       	jmp    104b92 <merge_into_frees+0x22>
        }

        last = cur;
  104c2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  104c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c35:	8b 40 08             	mov    0x8(%eax),%eax
  104c38:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104c3b:	e9 61 ff ff ff       	jmp    104ba1 <merge_into_frees+0x31>
  104c40:	8d 05 44 a4 10 00    	lea    0x10a444,%eax

    append_to_list(&first_free, tf);
  104c46:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104c49:	89 04 24             	mov    %eax,(%esp)
  104c4c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c50:	e8 ab fc ff ff       	call   104900 <append_to_list>
}
  104c55:	83 c4 14             	add    $0x14,%esp
  104c58:	5e                   	pop    %esi
  104c59:	5d                   	pop    %ebp
  104c5a:	c3                   	ret    
  104c5b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104c60 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  104c60:	55                   	push   %ebp
  104c61:	89 e5                	mov    %esp,%ebp
  104c63:	83 ec 08             	sub    $0x8,%esp
  104c66:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  104c6c:	89 04 24             	mov    %eax,(%esp)
  104c6f:	e8 3c 00 00 00       	call   104cb0 <pop_from_list>
  104c74:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  104c77:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  104c7e:	0f 85 1b 00 00 00    	jne    104c9f <pop_unused_node+0x3f>
        allocate_unused_nodes();
  104c84:	e8 77 00 00 00       	call   104d00 <allocate_unused_nodes>
  104c89:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        ret = pop_from_list(&first_unused);
  104c8f:	89 04 24             	mov    %eax,(%esp)
  104c92:	e8 19 00 00 00       	call   104cb0 <pop_from_list>
  104c97:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  104c9a:	e9 d8 ff ff ff       	jmp    104c77 <pop_unused_node+0x17>

    return ret;
  104c9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104ca2:	83 c4 08             	add    $0x8,%esp
  104ca5:	5d                   	pop    %ebp
  104ca6:	c3                   	ret    
  104ca7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  104cae:	00 00 

00104cb0 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  104cb0:	55                   	push   %ebp
  104cb1:	89 e5                	mov    %esp,%ebp
  104cb3:	83 ec 18             	sub    $0x18,%esp
  104cb6:	8b 45 08             	mov    0x8(%ebp),%eax
  104cb9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  104cbc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104cbf:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  104cc5:	0f 85 0c 00 00 00    	jne    104cd7 <pop_from_list+0x27>
        return 0;
  104ccb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104cd2:	e9 20 00 00 00       	jmp    104cf7 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  104cd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104cda:	8b 00                	mov    (%eax),%eax
  104cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  104cdf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ce2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ce5:	89 04 24             	mov    %eax,(%esp)
  104ce8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104cec:	e8 3f fc ff ff       	call   104930 <remove_from_list>
    return pop;
  104cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104cf4:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104cf7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104cfa:	83 c4 18             	add    $0x18,%esp
  104cfd:	5d                   	pop    %ebp
  104cfe:	c3                   	ret    
  104cff:	90                   	nop

00104d00 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  104d00:	55                   	push   %ebp
  104d01:	89 e5                	mov    %esp,%ebp
  104d03:	83 ec 28             	sub    $0x28,%esp
  104d06:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  104d0b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104d12:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104d15:	e8 d6 23 00 00       	call   1070f0 <vmm_alloc_cont>
  104d1a:	b9 00 00 00 00       	mov    $0x0,%ecx
  104d1f:	ba 00 10 00 00       	mov    $0x1000,%edx
  104d24:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  104d27:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104d2a:	89 04 24             	mov    %eax,(%esp)
  104d2d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104d34:	00 
  104d35:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  104d3c:	00 
  104d3d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104d40:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104d43:	e8 58 00 00 00       	call   104da0 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  104d48:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104d4f:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  104d56:	0f 83 30 00 00 00    	jae    104d8c <allocate_unused_nodes+0x8c>
  104d5c:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  104d62:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104d65:	8b 55 fc             	mov    -0x4(%ebp),%edx
  104d68:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  104d6e:	01 ca                	add    %ecx,%edx
  104d70:	89 04 24             	mov    %eax,(%esp)
  104d73:	89 54 24 04          	mov    %edx,0x4(%esp)
  104d77:	e8 84 fb ff ff       	call   104900 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  104d7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104d7f:	05 01 00 00 00       	add    $0x1,%eax
  104d84:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104d87:	e9 c3 ff ff ff       	jmp    104d4f <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  104d8c:	83 c4 28             	add    $0x28,%esp
  104d8f:	5d                   	pop    %ebp
  104d90:	c3                   	ret    
  104d91:	66 90                	xchg   %ax,%ax
  104d93:	66 90                	xchg   %ax,%ax
  104d95:	66 90                	xchg   %ax,%ax
  104d97:	66 90                	xchg   %ax,%ax
  104d99:	66 90                	xchg   %ax,%ax
  104d9b:	66 90                	xchg   %ax,%ax
  104d9d:	66 90                	xchg   %ax,%ax
  104d9f:	90                   	nop

00104da0 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  104da0:	55                   	push   %ebp
  104da1:	89 e5                	mov    %esp,%ebp
  104da3:	83 ec 10             	sub    $0x10,%esp
  104da6:	8b 45 10             	mov    0x10(%ebp),%eax
  104da9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104dac:	8b 55 08             	mov    0x8(%ebp),%edx
  104daf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104db2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104db5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  104db8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104dbb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  104dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104dc1:	89 c1                	mov    %eax,%ecx
  104dc3:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104dc9:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104dcc:	3d 00 00 00 00       	cmp    $0x0,%eax
  104dd1:	0f 84 1a 00 00 00    	je     104df1 <memset+0x51>
        *p++ = c;
  104dd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104dda:	88 c1                	mov    %al,%cl
  104ddc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ddf:	89 c2                	mov    %eax,%edx
  104de1:	81 c2 01 00 00 00    	add    $0x1,%edx
  104de7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104dea:	88 08                	mov    %cl,(%eax)
    }
  104dec:	e9 cd ff ff ff       	jmp    104dbe <memset+0x1e>

    return buf;
  104df1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104df4:	83 c4 10             	add    $0x10,%esp
  104df7:	5d                   	pop    %ebp
  104df8:	c3                   	ret    
  104df9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00104e00 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  104e00:	55                   	push   %ebp
  104e01:	89 e5                	mov    %esp,%ebp
  104e03:	83 ec 14             	sub    $0x14,%esp
  104e06:	8b 45 10             	mov    0x10(%ebp),%eax
  104e09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104e0c:	8b 55 08             	mov    0x8(%ebp),%edx
  104e0f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104e12:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  104e18:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  104e1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e21:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  104e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e27:	89 c1                	mov    %eax,%ecx
  104e29:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104e2f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104e32:	3d 00 00 00 00       	cmp    $0x0,%eax
  104e37:	0f 84 25 00 00 00    	je     104e62 <memcpy+0x62>
        *(d++) = *(s++);
  104e3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e40:	89 c1                	mov    %eax,%ecx
  104e42:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104e48:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104e4b:	8a 10                	mov    (%eax),%dl
  104e4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e50:	89 c1                	mov    %eax,%ecx
  104e52:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104e58:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104e5b:	88 10                	mov    %dl,(%eax)
    }
  104e5d:	e9 c2 ff ff ff       	jmp    104e24 <memcpy+0x24>

    return dest;
  104e62:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e65:	83 c4 14             	add    $0x14,%esp
  104e68:	5d                   	pop    %ebp
  104e69:	c3                   	ret    
  104e6a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104e70 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  104e70:	55                   	push   %ebp
  104e71:	89 e5                	mov    %esp,%ebp
  104e73:	83 ec 1c             	sub    $0x1c,%esp
  104e76:	8b 45 10             	mov    0x10(%ebp),%eax
  104e79:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104e7c:	8b 55 08             	mov    0x8(%ebp),%edx
  104e7f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  104e82:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  104e88:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104e8f:	0f 85 0c 00 00 00    	jne    104ea1 <memcmp+0x31>
        return -1;
  104e95:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  104e9c:	e9 a7 00 00 00       	jmp    104f48 <memcmp+0xd8>
    if (ptr2 == 0)
  104ea1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104ea8:	0f 85 0c 00 00 00    	jne    104eba <memcmp+0x4a>
        return 1;
  104eae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104eb5:	e9 8e 00 00 00       	jmp    104f48 <memcmp+0xd8>
    if (num == 0)
  104eba:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104ec1:	0f 85 0c 00 00 00    	jne    104ed3 <memcmp+0x63>
        return 0;
  104ec7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104ece:	e9 75 00 00 00       	jmp    104f48 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  104ed3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  104ed9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104edc:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  104edf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104ee6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104ee9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  104eec:	0f 83 4f 00 00 00    	jae    104f41 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  104ef2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104ef5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104ef8:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104efc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104eff:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104f02:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104f06:	39 c8                	cmp    %ecx,%eax
  104f08:	0f 84 1e 00 00 00    	je     104f2c <memcmp+0xbc>
            return pa[i] - pb[i];
  104f0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104f11:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104f14:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104f18:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104f1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104f1e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104f22:	29 c8                	sub    %ecx,%eax
  104f24:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104f27:	e9 1c 00 00 00       	jmp    104f48 <memcmp+0xd8>
        }
    }
  104f2c:	e9 00 00 00 00       	jmp    104f31 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  104f31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104f34:	05 01 00 00 00       	add    $0x1,%eax
  104f39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104f3c:	e9 a5 ff ff ff       	jmp    104ee6 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  104f41:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104f48:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f4b:	83 c4 1c             	add    $0x1c,%esp
  104f4e:	5d                   	pop    %ebp
  104f4f:	c3                   	ret    

00104f50 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  104f50:	55                   	push   %ebp
  104f51:	89 e5                	mov    %esp,%ebp
  104f53:	56                   	push   %esi
  104f54:	83 ec 24             	sub    $0x24,%esp
  104f57:	8b 45 0c             	mov    0xc(%ebp),%eax
  104f5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104f5d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104f60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  104f63:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f66:	89 e1                	mov    %esp,%ecx
  104f68:	89 01                	mov    %eax,(%ecx)
  104f6a:	e8 61 00 00 00       	call   104fd0 <strlen>
  104f6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  104f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f75:	89 e1                	mov    %esp,%ecx
  104f77:	89 01                	mov    %eax,(%ecx)
  104f79:	e8 52 00 00 00       	call   104fd0 <strlen>
  104f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  104f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104f84:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104f87:	0f 8d 0b 00 00 00    	jge    104f98 <strcmp+0x48>
  104f8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104f90:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104f93:	e9 06 00 00 00       	jmp    104f9e <strcmp+0x4e>
  104f98:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104f9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104f9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104fa1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, (l1 + 1) * sizeof(char));
  104fa4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104fa7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104faa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104fad:	81 c2 01 00 00 00    	add    $0x1,%edx
  104fb3:	c1 e2 00             	shl    $0x0,%edx
  104fb6:	89 e6                	mov    %esp,%esi
  104fb8:	89 56 08             	mov    %edx,0x8(%esi)
  104fbb:	89 4e 04             	mov    %ecx,0x4(%esi)
  104fbe:	89 06                	mov    %eax,(%esi)
  104fc0:	e8 ab fe ff ff       	call   104e70 <memcmp>
  104fc5:	83 c4 24             	add    $0x24,%esp
  104fc8:	5e                   	pop    %esi
  104fc9:	5d                   	pop    %ebp
  104fca:	c3                   	ret    
  104fcb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104fd0 <strlen>:
}

unsigned int strlen(const char* str) {
  104fd0:	55                   	push   %ebp
  104fd1:	89 e5                	mov    %esp,%ebp
  104fd3:	83 ec 0c             	sub    $0xc,%esp
  104fd6:	8b 45 08             	mov    0x8(%ebp),%eax
  104fd9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  104fdc:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104fe3:	0f 85 0c 00 00 00    	jne    104ff5 <strlen+0x25>
        return 0;
  104fe9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104ff0:	e9 37 00 00 00       	jmp    10502c <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  104ff5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fff:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105002:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  105006:	3d 00 00 00 00       	cmp    $0x0,%eax
  10500b:	0f 84 15 00 00 00    	je     105026 <strlen+0x56>
  105011:	e9 00 00 00 00       	jmp    105016 <strlen+0x46>
  105016:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105019:	05 01 00 00 00       	add    $0x1,%eax
  10501e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105021:	e9 d6 ff ff ff       	jmp    104ffc <strlen+0x2c>
        ;
    return i;
  105026:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105029:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10502c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10502f:	83 c4 0c             	add    $0xc,%esp
  105032:	5d                   	pop    %ebp
  105033:	c3                   	ret    
  105034:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10503b:	00 00 00 00 00 

00105040 <strcpy>:

char* strcpy(char* dest, const char* src) {
  105040:	55                   	push   %ebp
  105041:	89 e5                	mov    %esp,%ebp
  105043:	56                   	push   %esi
  105044:	83 ec 24             	sub    $0x24,%esp
  105047:	8b 45 0c             	mov    0xc(%ebp),%eax
  10504a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10504d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105050:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  105053:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105056:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105059:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10505c:	89 e6                	mov    %esp,%esi
  10505e:	89 16                	mov    %edx,(%esi)
  105060:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105063:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105066:	e8 65 ff ff ff       	call   104fd0 <strlen>
  10506b:	c1 e0 00             	shl    $0x0,%eax
  10506e:	05 01 00 00 00       	add    $0x1,%eax
  105073:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105076:	89 0c 24             	mov    %ecx,(%esp)
  105079:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10507c:	89 54 24 04          	mov    %edx,0x4(%esp)
  105080:	89 44 24 08          	mov    %eax,0x8(%esp)
  105084:	e8 77 fd ff ff       	call   104e00 <memcpy>
    return dest;
  105089:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10508c:	83 c4 24             	add    $0x24,%esp
  10508f:	5e                   	pop    %esi
  105090:	5d                   	pop    %ebp
  105091:	c3                   	ret    
  105092:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105099:	1f 84 00 00 00 00 00 

001050a0 <strclone>:
}

char* strclone(char* str) {
  1050a0:	55                   	push   %ebp
  1050a1:	89 e5                	mov    %esp,%ebp
  1050a3:	83 ec 18             	sub    $0x18,%esp
  1050a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1050a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  1050ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1050af:	89 e1                	mov    %esp,%ecx
  1050b1:	89 01                	mov    %eax,(%ecx)
  1050b3:	e8 18 ff ff ff       	call   104fd0 <strlen>
  1050b8:	c1 e0 00             	shl    $0x0,%eax
  1050bb:	05 01 00 00 00       	add    $0x1,%eax
  1050c0:	89 04 24             	mov    %eax,(%esp)
  1050c3:	e8 68 f6 ff ff       	call   104730 <malloc>
  1050c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  1050cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050ce:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1050d1:	89 e2                	mov    %esp,%edx
  1050d3:	89 4a 04             	mov    %ecx,0x4(%edx)
  1050d6:	89 02                	mov    %eax,(%edx)
  1050d8:	e8 63 ff ff ff       	call   105040 <strcpy>

    return ret;
  1050dd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1050e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1050e3:	89 c8                	mov    %ecx,%eax
  1050e5:	83 c4 18             	add    $0x18,%esp
  1050e8:	5d                   	pop    %ebp
  1050e9:	c3                   	ret    
  1050ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001050f0 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  1050f0:	55                   	push   %ebp
  1050f1:	89 e5                	mov    %esp,%ebp
  1050f3:	83 ec 18             	sub    $0x18,%esp
  1050f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1050f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1050fc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1050ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) { //TODO no way to free the cloned string :|
  105102:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105109:	0f 84 22 00 00 00    	je     105131 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  10510f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105112:	89 04 24             	mov    %eax,(%esp)
  105115:	e8 86 ff ff ff       	call   1050a0 <strclone>
  10511a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10511d:	89 04 24             	mov    %eax,(%esp)
  105120:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105124:	e8 37 00 00 00       	call   105160 <strtoknc>
  105129:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10512c:	e9 1e 00 00 00       	jmp    10514f <strtok+0x5f>
  105131:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  105136:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105139:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105140:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105144:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105147:	e8 14 00 00 00       	call   105160 <strtoknc>
  10514c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10514f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105152:	83 c4 18             	add    $0x18,%esp
  105155:	5d                   	pop    %ebp
  105156:	c3                   	ret    
  105157:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10515e:	00 00 

00105160 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  105160:	55                   	push   %ebp
  105161:	89 e5                	mov    %esp,%ebp
  105163:	83 ec 28             	sub    $0x28,%esp
  105166:	8b 45 0c             	mov    0xc(%ebp),%eax
  105169:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10516c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10516f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  105172:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  105179:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10517c:	89 e1                	mov    %esp,%ecx
  10517e:	89 01                	mov    %eax,(%ecx)
  105180:	e8 4b fe ff ff       	call   104fd0 <strlen>
  105185:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  105188:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  10518f:	0f 85 0c 00 00 00    	jne    1051a1 <strtoknc+0x41>
        return 0;
  105195:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10519c:	e9 70 01 00 00       	jmp    105311 <strtoknc+0x1b1>

    /* if the original string has nothing left */
    if (!str && !sp)
  1051a1:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1051a8:	0f 85 1c 00 00 00    	jne    1051ca <strtoknc+0x6a>
  1051ae:	81 3d 48 a4 10 00 00 	cmpl   $0x0,0x10a448
  1051b5:	00 00 00 
  1051b8:	0f 85 0c 00 00 00    	jne    1051ca <strtoknc+0x6a>
        return 0;
  1051be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1051c5:	e9 47 01 00 00       	jmp    105311 <strtoknc+0x1b1>

    /* initialize the sp during the first call */
    if (str)
  1051ca:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1051d1:	0f 84 08 00 00 00    	je     1051df <strtoknc+0x7f>
        sp = str;
  1051d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1051da:	a3 48 a4 10 00       	mov    %eax,0x10a448

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  1051df:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1051e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  1051e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1051ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1051f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1051f4:	0f 8d 3d 00 00 00    	jge    105237 <strtoknc+0xd7>
            if (*p_start == delimiters[i]) {
  1051fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051fd:	0f be 00             	movsbl (%eax),%eax
  105200:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105203:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105206:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10520a:	39 c8                	cmp    %ecx,%eax
  10520c:	0f 85 10 00 00 00    	jne    105222 <strtoknc+0xc2>
                p_start++;
  105212:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105215:	05 01 00 00 00       	add    $0x1,%eax
  10521a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  10521d:	e9 15 00 00 00       	jmp    105237 <strtoknc+0xd7>
            }
        }
  105222:	e9 00 00 00 00       	jmp    105227 <strtoknc+0xc7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  105227:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10522a:	05 01 00 00 00       	add    $0x1,%eax
  10522f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105232:	e9 b7 ff ff ff       	jmp    1051ee <strtoknc+0x8e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  105237:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10523a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10523d:	0f 85 0d 00 00 00    	jne    105250 <strtoknc+0xf0>
            sp = p_start;
  105243:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105246:	a3 48 a4 10 00       	mov    %eax,0x10a448
            break;
  10524b:	e9 05 00 00 00       	jmp    105255 <strtoknc+0xf5>
        }
    }
  105250:	e9 92 ff ff ff       	jmp    1051e7 <strtoknc+0x87>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  105255:	a1 48 a4 10 00       	mov    0x10a448,%eax
  10525a:	0f be 00             	movsbl (%eax),%eax
  10525d:	3d 00 00 00 00       	cmp    $0x0,%eax
  105262:	0f 85 17 00 00 00    	jne    10527f <strtoknc+0x11f>
        sp = NULL;
  105268:	c7 05 48 a4 10 00 00 	movl   $0x0,0x10a448
  10526f:	00 00 00 
        return sp;
  105272:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105277:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10527a:	e9 92 00 00 00       	jmp    105311 <strtoknc+0x1b1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  10527f:	e9 00 00 00 00       	jmp    105284 <strtoknc+0x124>
  105284:	a1 48 a4 10 00       	mov    0x10a448,%eax
  105289:	0f be 00             	movsbl (%eax),%eax
  10528c:	3d 00 00 00 00       	cmp    $0x0,%eax
  105291:	0f 84 74 00 00 00    	je     10530b <strtoknc+0x1ab>
        for (i = 0; i < len; i++) {
  105297:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10529e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1052a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1052a4:	0f 8d 3c 00 00 00    	jge    1052e6 <strtoknc+0x186>
            if (*sp == delimiters[i]) {
  1052aa:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1052af:	0f be 00             	movsbl (%eax),%eax
  1052b2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1052b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1052b8:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  1052bc:	39 c8                	cmp    %ecx,%eax
  1052be:	0f 85 0d 00 00 00    	jne    1052d1 <strtoknc+0x171>
                *sp = '\0';
  1052c4:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1052c9:	c6 00 00             	movb   $0x0,(%eax)
                break;
  1052cc:	e9 15 00 00 00       	jmp    1052e6 <strtoknc+0x186>
            }
        }
  1052d1:	e9 00 00 00 00       	jmp    1052d6 <strtoknc+0x176>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  1052d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1052d9:	05 01 00 00 00       	add    $0x1,%eax
  1052de:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1052e1:	e9 b8 ff ff ff       	jmp    10529e <strtoknc+0x13e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  1052e6:	a1 48 a4 10 00       	mov    0x10a448,%eax
  1052eb:	05 01 00 00 00       	add    $0x1,%eax
  1052f0:	a3 48 a4 10 00       	mov    %eax,0x10a448
        if (i < len)
  1052f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1052f8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1052fb:	0f 8d 05 00 00 00    	jge    105306 <strtoknc+0x1a6>
            break;
  105301:	e9 05 00 00 00       	jmp    10530b <strtoknc+0x1ab>
    }
  105306:	e9 79 ff ff ff       	jmp    105284 <strtoknc+0x124>

    return p_start;
  10530b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10530e:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  105311:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105314:	83 c4 28             	add    $0x28,%esp
  105317:	5d                   	pop    %ebp
  105318:	c3                   	ret    
  105319:	66 90                	xchg   %ax,%ax
  10531b:	66 90                	xchg   %ax,%ax
  10531d:	66 90                	xchg   %ax,%ax
  10531f:	90                   	nop

00105320 <vfs_reset_error>:
            get_current_task()->vfserr = code;
        }
    }
}

void vfs_reset_error() {
  105320:	55                   	push   %ebp
  105321:	89 e5                	mov    %esp,%ebp
    if(get_current_task()) {
  105323:	83 ec 08             	sub    $0x8,%esp
  105326:	e8 95 ed ff ff       	call   1040c0 <get_current_task>
  10532b:	3d 00 00 00 00       	cmp    $0x0,%eax
  105330:	0f 84 0c 00 00 00    	je     105342 <vfs_reset_error+0x22>
        get_current_task()->vfserr = PE_NO_ERROR;
  105336:	e8 85 ed ff ff       	call   1040c0 <get_current_task>
  10533b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    }
}
  105342:	83 c4 08             	add    $0x8,%esp
  105345:	5d                   	pop    %ebp
  105346:	c3                   	ret    
  105347:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10534e:	00 00 

00105350 <vfs_create_dir>:
    }

    return created;
}

uint32_t vfs_create_dir(char* path) {
  105350:	55                   	push   %ebp
  105351:	89 e5                	mov    %esp,%ebp
  105353:	83 ec 08             	sub    $0x8,%esp
  105356:	8b 45 08             	mov    0x8(%ebp),%eax
  105359:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  10535c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10535f:	89 04 24             	mov    %eax,(%esp)
  105362:	e8 09 00 00 00       	call   105370 <vfs_create_path>
  105367:	83 c4 08             	add    $0x8,%esp
  10536a:	5d                   	pop    %ebp
  10536b:	c3                   	ret    
  10536c:	0f 1f 40 00          	nopl   0x0(%eax)

00105370 <vfs_create_path>:

static struct res_node* vfs_get_node(char* path) {
    return vfs_get_relative_node(vfs_get_current_task_root_node_for_path(path), path);
}

static int vfs_create_path(char* path) {
  105370:	55                   	push   %ebp
  105371:	89 e5                	mov    %esp,%ebp
  105373:	83 ec 38             	sub    $0x38,%esp
  105376:	8b 45 08             	mov    0x8(%ebp),%eax
  105379:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = vfs_get_current_task_root_node_for_path(path);
  10537c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10537f:	89 04 24             	mov    %eax,(%esp)
  105382:	e8 49 10 00 00       	call   1063d0 <vfs_get_current_task_root_node_for_path>
  105387:	8d 0d 61 95 10 00    	lea    0x109561,%ecx
  10538d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  105390:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  105397:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  10539e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1053a1:	89 04 24             	mov    %eax,(%esp)
  1053a4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053a8:	e8 43 fd ff ff       	call   1050f0 <strtok>
  1053ad:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  1053b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1053b3:	0f be 00             	movsbl (%eax),%eax
  1053b6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1053bb:	0f 85 21 00 00 00    	jne    1053e2 <vfs_create_path+0x72>
  1053c1:	b8 00 00 00 00       	mov    $0x0,%eax
  1053c6:	8d 0d 61 95 10 00    	lea    0x109561,%ecx
  1053cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1053d3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1053da:	e8 11 fd ff ff       	call   1050f0 <strtok>
  1053df:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  1053e2:	e9 00 00 00 00       	jmp    1053e7 <vfs_create_path+0x77>
  1053e7:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1053ee:	0f 84 e8 00 00 00    	je     1054dc <vfs_create_path+0x16c>
    {
        child = vfs_find_node(parent, sub);
  1053f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1053f7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1053fa:	89 04 24             	mov    %eax,(%esp)
  1053fd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105401:	e8 9a 10 00 00       	call   1064a0 <vfs_find_node>
  105406:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  105409:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105410:	0f 85 9a 00 00 00    	jne    1054b0 <vfs_create_path+0x140>
  105416:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  10541b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  105422:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105425:	e8 06 f3 ff ff       	call   104730 <malloc>
  10542a:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  10542d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105430:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105433:	89 e2                	mov    %esp,%edx
  105435:	89 4a 04             	mov    %ecx,0x4(%edx)
  105438:	89 02                	mov    %eax,(%edx)
  10543a:	e8 01 fc ff ff       	call   105040 <strcpy>
            child->res_type = RES_SUBDIR;
  10543f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105442:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  105449:	00 00 00 
            child->res_ptr = 0;
  10544c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10544f:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  105456:	00 00 00 

            created++;
  105459:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10545c:	81 c1 01 00 00 00    	add    $0x1,%ecx
  105462:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  105465:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105468:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10546b:	89 0c 24             	mov    %ecx,(%esp)
  10546e:	89 54 24 04          	mov    %edx,0x4(%esp)
  105472:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105475:	e8 66 11 00 00       	call   1065e0 <vfs_insert_node>
  10547a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10547f:	0f 84 26 00 00 00    	je     1054ab <vfs_create_path+0x13b>
  105485:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  10548a:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  105491:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105494:	e8 97 f2 ff ff       	call   104730 <malloc>
  105499:	8d 0d 63 95 10 00    	lea    0x109563,%ecx
  10549f:	89 04 24             	mov    %eax,(%esp)
  1054a2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1054a6:	e8 15 ac ff ff       	call   1000c0 <show_cod>
            }
        }
  1054ab:	e9 00 00 00 00       	jmp    1054b0 <vfs_create_path+0x140>
  1054b0:	b8 00 00 00 00       	mov    $0x0,%eax
  1054b5:	8d 0d 61 95 10 00    	lea    0x109561,%ecx

        parent = child;
  1054bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1054be:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  1054c1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1054c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1054cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1054cf:	e8 1c fc ff ff       	call   1050f0 <strtok>
  1054d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  1054d7:	e9 0b ff ff ff       	jmp    1053e7 <vfs_create_path+0x77>

    return created;
  1054dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1054df:	83 c4 38             	add    $0x38,%esp
  1054e2:	5d                   	pop    %ebp
  1054e3:	c3                   	ret    
  1054e4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1054eb:	00 00 00 00 00 

001054f0 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  1054f0:	55                   	push   %ebp
  1054f1:	89 e5                	mov    %esp,%ebp
  1054f3:	83 ec 28             	sub    $0x28,%esp
  1054f6:	8b 45 10             	mov    0x10(%ebp),%eax
  1054f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1054fc:	8b 55 08             	mov    0x8(%ebp),%edx
  1054ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105502:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105505:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  105508:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10550b:	89 e1                	mov    %esp,%ecx
  10550d:	89 01                	mov    %eax,(%ecx)
  10550f:	e8 bc fa ff ff       	call   104fd0 <strlen>
  105514:	05 01 00 00 00       	add    $0x1,%eax
  105519:	89 04 24             	mov    %eax,(%esp)
  10551c:	e8 0f f2 ff ff       	call   104730 <malloc>
  105521:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  105524:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105527:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10552a:	89 e2                	mov    %esp,%edx
  10552c:	89 4a 04             	mov    %ecx,0x4(%edx)
  10552f:	89 02                	mov    %eax,(%edx)
  105531:	e8 0a fb ff ff       	call   105040 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  105536:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105539:	89 0c 24             	mov    %ecx,(%esp)
  10553c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10553f:	e8 2c fe ff ff       	call   105370 <vfs_create_path>
  105544:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  105547:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10554a:	89 04 24             	mov    %eax,(%esp)
  10554d:	e8 4e 00 00 00       	call   1055a0 <vfs_get_node>
  105552:	a3 58 a4 10 00       	mov    %eax,0x10a458

    node->res_type = RES_KERNDRV;
  105557:	a1 58 a4 10 00       	mov    0x10a458,%eax
  10555c:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  105563:	00 00 00 
    node->res_ptr = driver->create(params);
  105566:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105569:	8b 40 14             	mov    0x14(%eax),%eax
  10556c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10556f:	89 0c 24             	mov    %ecx,(%esp)
  105572:	ff d0                	call   *%eax
  105574:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  10557a:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  105580:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105583:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  105589:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  10558f:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  105592:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105595:	83 c4 28             	add    $0x28,%esp
  105598:	5d                   	pop    %ebp
  105599:	c3                   	ret    
  10559a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001055a0 <vfs_get_node>:

    return vfs_get_relative_node(root, get_current_task()->execPath);

}

static struct res_node* vfs_get_node(char* path) {
  1055a0:	55                   	push   %ebp
  1055a1:	89 e5                	mov    %esp,%ebp
  1055a3:	83 ec 18             	sub    $0x18,%esp
  1055a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1055a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_get_relative_node(vfs_get_current_task_root_node_for_path(path), path);
  1055ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1055af:	89 04 24             	mov    %eax,(%esp)
  1055b2:	e8 19 0e 00 00       	call   1063d0 <vfs_get_current_task_root_node_for_path>
  1055b7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1055ba:	89 04 24             	mov    %eax,(%esp)
  1055bd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1055c1:	e8 9a 0c 00 00       	call   106260 <vfs_get_relative_node>
  1055c6:	83 c4 18             	add    $0x18,%esp
  1055c9:	5d                   	pop    %ebp
  1055ca:	c3                   	ret    
  1055cb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001055d0 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  1055d0:	55                   	push   %ebp
  1055d1:	89 e5                	mov    %esp,%ebp
  1055d3:	83 ec 28             	sub    $0x28,%esp
  1055d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1055d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1055dc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1055df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  1055e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1055e5:	89 04 24             	mov    %eax,(%esp)
  1055e8:	e8 b3 ff ff ff       	call   1055a0 <vfs_get_node>
  1055ed:	a3 5c a4 10 00       	mov    %eax,0x10a45c

    if(node->res_type == RES_KERNDRV) {
  1055f2:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  1055f7:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  1055fe:	00 00 00 
  105601:	0f 85 34 00 00 00    	jne    10563b <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  105607:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  10560c:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105612:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  105615:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105618:	8b 40 04             	mov    0x4(%eax),%eax
  10561b:	8b 40 08             	mov    0x8(%eax),%eax
  10561e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105621:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105624:	89 0c 24             	mov    %ecx,(%esp)
  105627:	89 54 24 04          	mov    %edx,0x4(%esp)
  10562b:	ff d0                	call   *%eax
  10562d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  105630:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105633:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105636:	e9 07 00 00 00       	jmp    105642 <vfs_open+0x72>
    }

    return 0;
  10563b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105642:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105645:	83 c4 28             	add    $0x28,%esp
  105648:	5d                   	pop    %ebp
  105649:	c3                   	ret    
  10564a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105650 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  105650:	55                   	push   %ebp
  105651:	89 e5                	mov    %esp,%ebp
  105653:	83 ec 18             	sub    $0x18,%esp
  105656:	8b 45 08             	mov    0x8(%ebp),%eax
  105659:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  10565c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10565f:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105665:	0f 85 22 00 00 00    	jne    10568d <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  10566b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10566e:	8b 40 04             	mov    0x4(%eax),%eax
  105671:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  105674:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105677:	8b 40 04             	mov    0x4(%eax),%eax
  10567a:	8b 40 0c             	mov    0xc(%eax),%eax
  10567d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105680:	89 0c 24             	mov    %ecx,(%esp)
  105683:	ff d0                	call   *%eax
  105685:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105688:	e9 07 00 00 00       	jmp    105694 <vfs_close+0x44>
    }

    return 0;
  10568d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105694:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105697:	83 c4 18             	add    $0x18,%esp
  10569a:	5d                   	pop    %ebp
  10569b:	c3                   	ret    
  10569c:	0f 1f 40 00          	nopl   0x0(%eax)

001056a0 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  1056a0:	55                   	push   %ebp
  1056a1:	89 e5                	mov    %esp,%ebp
  1056a3:	56                   	push   %esi
  1056a4:	83 ec 34             	sub    $0x34,%esp
  1056a7:	8b 45 14             	mov    0x14(%ebp),%eax
  1056aa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1056ad:	8b 55 0c             	mov    0xc(%ebp),%edx
  1056b0:	8b 75 08             	mov    0x8(%ebp),%esi
  1056b3:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1056b6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1056b9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1056bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  1056bf:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1056c6:	0f 85 0c 00 00 00    	jne    1056d8 <vfs_read+0x38>
  1056cc:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  1056d3:	e9 b6 00 00 00       	jmp    10578e <vfs_read+0xee>

    if(!(handle->filemode & FM_READ)) return RW_NOFM_READ;
  1056d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1056db:	8b 40 0c             	mov    0xc(%eax),%eax
  1056de:	25 01 00 00 00       	and    $0x1,%eax
  1056e3:	3d 00 00 00 00       	cmp    $0x0,%eax
  1056e8:	0f 85 0c 00 00 00    	jne    1056fa <vfs_read+0x5a>
  1056ee:	c7 45 f8 04 00 00 00 	movl   $0x4,-0x8(%ebp)
  1056f5:	e9 94 00 00 00       	jmp    10578e <vfs_read+0xee>

    if(handle->res_type == RES_KERNDRV) {
  1056fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1056fd:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105703:	0f 85 7e 00 00 00    	jne    105787 <vfs_read+0xe7>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105709:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10570c:	8b 40 04             	mov    0x4(%eax),%eax
  10570f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105712:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105715:	8b 40 04             	mov    0x4(%eax),%eax
  105718:	8b 00                	mov    (%eax),%eax
  10571a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10571d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105720:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105723:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105727:	89 0c 24             	mov    %ecx,(%esp)
  10572a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10572e:	89 74 24 08          	mov    %esi,0x8(%esp)
  105732:	ff d0                	call   *%eax
  105734:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105737:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10573e:	0f 85 1e 00 00 00    	jne    105762 <vfs_read+0xc2>
           handle->position += size * count;
  105744:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105747:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  10574b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10574e:	8b 51 08             	mov    0x8(%ecx),%edx
  105751:	01 c2                	add    %eax,%edx
  105753:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  105756:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10575d:	e9 2c 00 00 00       	jmp    10578e <vfs_read+0xee>
       }

       if(res == RW_BLOCK) {
  105762:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  105769:	0f 85 0c 00 00 00    	jne    10577b <vfs_read+0xdb>
           return RW_BLOCK;
  10576f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105776:	e9 13 00 00 00       	jmp    10578e <vfs_read+0xee>
       }

       return RW_ERR_DRIVER;
  10577b:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105782:	e9 07 00 00 00       	jmp    10578e <vfs_read+0xee>
    }

    return RW_ERR_VFS;
  105787:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  10578e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105791:	83 c4 34             	add    $0x34,%esp
  105794:	5e                   	pop    %esi
  105795:	5d                   	pop    %ebp
  105796:	c3                   	ret    
  105797:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10579e:	00 00 

001057a0 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  1057a0:	55                   	push   %ebp
  1057a1:	89 e5                	mov    %esp,%ebp
  1057a3:	56                   	push   %esi
  1057a4:	83 ec 34             	sub    $0x34,%esp
  1057a7:	8b 45 14             	mov    0x14(%ebp),%eax
  1057aa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1057ad:	8b 55 0c             	mov    0xc(%ebp),%edx
  1057b0:	8b 75 08             	mov    0x8(%ebp),%esi
  1057b3:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1057b6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1057b9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1057bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  1057bf:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1057c6:	0f 85 0c 00 00 00    	jne    1057d8 <vfs_write+0x38>
  1057cc:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  1057d3:	e9 b7 00 00 00       	jmp    10588f <vfs_write+0xef>

    if(!(handle->filemode & FM_WRITE)) return RW_NOFM_WRITE;
  1057d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1057db:	8b 40 0c             	mov    0xc(%eax),%eax
  1057de:	25 02 00 00 00       	and    $0x2,%eax
  1057e3:	3d 00 00 00 00       	cmp    $0x0,%eax
  1057e8:	0f 85 0c 00 00 00    	jne    1057fa <vfs_write+0x5a>
  1057ee:	c7 45 f8 05 00 00 00 	movl   $0x5,-0x8(%ebp)
  1057f5:	e9 95 00 00 00       	jmp    10588f <vfs_write+0xef>

    if(handle->res_type == RES_KERNDRV) {
  1057fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1057fd:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105803:	0f 85 7f 00 00 00    	jne    105888 <vfs_write+0xe8>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10580c:	8b 40 04             	mov    0x4(%eax),%eax
  10580f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105812:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105815:	8b 40 04             	mov    0x4(%eax),%eax
  105818:	8b 40 04             	mov    0x4(%eax),%eax
  10581b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10581e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105821:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105824:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105828:	89 0c 24             	mov    %ecx,(%esp)
  10582b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10582f:	89 74 24 08          	mov    %esi,0x8(%esp)
  105833:	ff d0                	call   *%eax
  105835:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105838:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10583f:	0f 85 1e 00 00 00    	jne    105863 <vfs_write+0xc3>
           handle->position += size * count;
  105845:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105848:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  10584c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10584f:	8b 51 08             	mov    0x8(%ecx),%edx
  105852:	01 c2                	add    %eax,%edx
  105854:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  105857:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10585e:	e9 2c 00 00 00       	jmp    10588f <vfs_write+0xef>
       }

       if(res == RW_BLOCK) {
  105863:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  10586a:	0f 85 0c 00 00 00    	jne    10587c <vfs_write+0xdc>
           return RW_BLOCK;
  105870:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105877:	e9 13 00 00 00       	jmp    10588f <vfs_write+0xef>
       }

       return RW_ERR_DRIVER;
  10587c:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105883:	e9 07 00 00 00       	jmp    10588f <vfs_write+0xef>
    }

    return RW_ERR_VFS;
  105888:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  10588f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105892:	83 c4 34             	add    $0x34,%esp
  105895:	5e                   	pop    %esi
  105896:	5d                   	pop    %ebp
  105897:	c3                   	ret    
  105898:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10589f:	00 

001058a0 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  1058a0:	55                   	push   %ebp
  1058a1:	89 e5                	mov    %esp,%ebp
  1058a3:	83 ec 18             	sub    $0x18,%esp
  1058a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1058a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  1058ac:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1058b3:	0f 85 0c 00 00 00    	jne    1058c5 <vfs_available+0x25>
  1058b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1058c0:	e9 38 00 00 00       	jmp    1058fd <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  1058c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058c8:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1058ce:	0f 85 22 00 00 00    	jne    1058f6 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1058d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058d7:	8b 40 04             	mov    0x4(%eax),%eax
  1058da:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  1058dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1058e0:	8b 40 04             	mov    0x4(%eax),%eax
  1058e3:	8b 40 10             	mov    0x10(%eax),%eax
  1058e6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1058e9:	89 0c 24             	mov    %ecx,(%esp)
  1058ec:	ff d0                	call   *%eax
  1058ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1058f1:	e9 07 00 00 00       	jmp    1058fd <vfs_available+0x5d>
    }

    return 0;
  1058f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1058fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105900:	83 c4 18             	add    $0x18,%esp
  105903:	5d                   	pop    %ebp
  105904:	c3                   	ret    
  105905:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10590c:	00 00 00 00 

00105910 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  105910:	55                   	push   %ebp
  105911:	89 e5                	mov    %esp,%ebp
  105913:	83 ec 18             	sub    $0x18,%esp
  105916:	8b 45 08             	mov    0x8(%ebp),%eax
  105919:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  10591c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10591f:	89 04 24             	mov    %eax,(%esp)
  105922:	e8 79 fc ff ff       	call   1055a0 <vfs_get_node>
  105927:	3d 00 00 00 00       	cmp    $0x0,%eax
  10592c:	0f 84 0c 00 00 00    	je     10593e <vfs_exists+0x2e>
  105932:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  105939:	e9 07 00 00 00       	jmp    105945 <vfs_exists+0x35>
    return 0;
  10593e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105945:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105948:	83 c4 18             	add    $0x18,%esp
  10594b:	5d                   	pop    %ebp
  10594c:	c3                   	ret    
  10594d:	0f 1f 00             	nopl   (%eax)

00105950 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  105950:	55                   	push   %ebp
  105951:	89 e5                	mov    %esp,%ebp
  105953:	83 ec 0c             	sub    $0xc,%esp
  105956:	8b 45 10             	mov    0x10(%ebp),%eax
  105959:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10595c:	8b 55 08             	mov    0x8(%ebp),%edx
  10595f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105962:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105965:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  105968:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10596f:	0f 85 09 00 00 00    	jne    10597e <vfs_seek+0x2e>
        handle->position = offset;
  105975:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105978:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10597b:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  10597e:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  105985:	0f 85 0e 00 00 00    	jne    105999 <vfs_seek+0x49>
        handle->position += offset;
  10598b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10598e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105991:	8b 51 08             	mov    0x8(%ecx),%edx
  105994:	01 c2                	add    %eax,%edx
  105996:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  105999:	83 c4 0c             	add    $0xc,%esp
  10599c:	5d                   	pop    %ebp
  10599d:	c3                   	ret    
  10599e:	66 90                	xchg   %ax,%ax

001059a0 <vfs_exec>:

uint32_t vfs_exec(char* path, char* args[], char* execPath, char* stdin, char* stdout, char* stderr) {
  1059a0:	55                   	push   %ebp
  1059a1:	89 e5                	mov    %esp,%ebp
  1059a3:	53                   	push   %ebx
  1059a4:	57                   	push   %edi
  1059a5:	56                   	push   %esi
  1059a6:	81 ec cc 00 00 00    	sub    $0xcc,%esp
  1059ac:	8b 45 1c             	mov    0x1c(%ebp),%eax
  1059af:	8b 4d 18             	mov    0x18(%ebp),%ecx
  1059b2:	8b 55 14             	mov    0x14(%ebp),%edx
  1059b5:	8b 75 10             	mov    0x10(%ebp),%esi
  1059b8:	8b 7d 0c             	mov    0xc(%ebp),%edi
  1059bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  1059be:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  1059c1:	89 7d e8             	mov    %edi,-0x18(%ebp)
  1059c4:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  1059c7:	89 55 e0             	mov    %edx,-0x20(%ebp)
  1059ca:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1059cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    path = strclone(path);
  1059d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1059d3:	89 04 24             	mov    %eax,(%esp)
  1059d6:	e8 c5 f6 ff ff       	call   1050a0 <strclone>
  1059db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(!vfs_exists(path)) {
  1059de:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1059e1:	89 04 24             	mov    %eax,(%esp)
  1059e4:	e8 27 ff ff ff       	call   105910 <vfs_exists>
  1059e9:	3d 00 00 00 00       	cmp    $0x0,%eax
  1059ee:	0f 85 23 00 00 00    	jne    105a17 <vfs_exec+0x77>
  1059f4:	b8 01 00 00 00       	mov    $0x1,%eax
        vfs_set_error(PE_FILE_NOT_FOUND);
  1059f9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105a00:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  105a06:	e8 a5 05 00 00       	call   105fb0 <vfs_set_error>
        return 0;
  105a0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105a12:	e9 7e 05 00 00       	jmp    105f95 <vfs_exec+0x5f5>
    }

    uint32_t elf_mod_pdir;

    elf_mod_pdir = vmm_create_pagedir();
  105a17:	e8 64 0c 00 00       	call   106680 <vmm_create_pagedir>
  105a1c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    //Copy args into kernel memory
    uint32_t argc = 0;
  105a1f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)

    if(args != 0) {
  105a26:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  105a2d:	0f 84 2d 00 00 00    	je     105a60 <vfs_exec+0xc0>
        while(args[argc] != 0) {
  105a33:	e9 00 00 00 00       	jmp    105a38 <vfs_exec+0x98>
  105a38:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105a3b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105a3e:	81 3c 81 00 00 00 00 	cmpl   $0x0,(%ecx,%eax,4)
  105a45:	0f 84 10 00 00 00    	je     105a5b <vfs_exec+0xbb>
            argc++;
  105a4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105a4e:	05 01 00 00 00       	add    $0x1,%eax
  105a53:	89 45 d0             	mov    %eax,-0x30(%ebp)
        }
  105a56:	e9 dd ff ff ff       	jmp    105a38 <vfs_exec+0x98>
    }
  105a5b:	e9 00 00 00 00       	jmp    105a60 <vfs_exec+0xc0>

    char** kargs = malloc((sizeof(char*)) * (argc + 1));
  105a60:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105a63:	05 01 00 00 00       	add    $0x1,%eax
  105a68:	c1 e0 02             	shl    $0x2,%eax
  105a6b:	89 04 24             	mov    %eax,(%esp)
  105a6e:	e8 bd ec ff ff       	call   104730 <malloc>
  105a73:	89 45 cc             	mov    %eax,-0x34(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  105a76:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  105a7d:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105a80:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  105a83:	0f 83 5c 00 00 00    	jae    105ae5 <vfs_exec+0x145>
        kargs[i] = malloc(strlen(args[i]) + 1);
  105a89:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105a8c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105a8f:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105a92:	89 e1                	mov    %esp,%ecx
  105a94:	89 01                	mov    %eax,(%ecx)
  105a96:	e8 35 f5 ff ff       	call   104fd0 <strlen>
  105a9b:	05 01 00 00 00       	add    $0x1,%eax
  105aa0:	89 04 24             	mov    %eax,(%esp)
  105aa3:	e8 88 ec ff ff       	call   104730 <malloc>
  105aa8:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  105aab:	8b 55 cc             	mov    -0x34(%ebp),%edx
  105aae:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(kargs[i], args[i]);
  105ab1:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105ab4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  105ab7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105aba:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  105abd:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105ac0:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105ac3:	89 e2                	mov    %esp,%edx
  105ac5:	89 4a 04             	mov    %ecx,0x4(%edx)
  105ac8:	89 02                	mov    %eax,(%edx)
  105aca:	e8 71 f5 ff ff       	call   105040 <strcpy>
  105acf:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
        }
    }

    char** kargs = malloc((sizeof(char*)) * (argc + 1));

    for(uint32_t i = 0; i < argc; i++) {
  105ad5:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105ad8:	05 01 00 00 00       	add    $0x1,%eax
  105add:	89 45 c8             	mov    %eax,-0x38(%ebp)
  105ae0:	e9 98 ff ff ff       	jmp    105a7d <vfs_exec+0xdd>
  105ae5:	b8 05 00 00 00       	mov    $0x5,%eax
        kargs[i] = malloc(strlen(args[i]) + 1);
        strcpy(kargs[i], args[i]);
    }

    kargs[argc] = 0;
  105aea:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  105aed:	8b 55 cc             	mov    -0x34(%ebp),%edx
  105af0:	c7 04 8a 00 00 00 00 	movl   $0x0,(%edx,%ecx,4)

    //Execute file
    struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  105af7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105afa:	89 0c 24             	mov    %ecx,(%esp)
  105afd:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  105b04:	00 
  105b05:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  105b0b:	e8 c0 fa ff ff       	call   1055d0 <vfs_open>
  105b10:	89 45 c4             	mov    %eax,-0x3c(%ebp)

    if(!handle) {
  105b13:	81 7d c4 00 00 00 00 	cmpl   $0x0,-0x3c(%ebp)
  105b1a:	0f 85 23 00 00 00    	jne    105b43 <vfs_exec+0x1a3>
  105b20:	b8 02 00 00 00       	mov    $0x2,%eax
        vfs_set_error(PE_PERM_DENIED);
  105b25:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  105b2c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  105b32:	e8 79 04 00 00       	call   105fb0 <vfs_set_error>
        return 0;
  105b37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105b3e:	e9 52 04 00 00       	jmp    105f95 <vfs_exec+0x5f5>
    }

    uint32_t size = vfs_available(handle);
  105b43:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105b46:	89 04 24             	mov    %eax,(%esp)
  105b49:	e8 52 fd ff ff       	call   1058a0 <vfs_available>
  105b4e:	89 45 c0             	mov    %eax,-0x40(%ebp)
    if(size == 0) {
  105b51:	81 7d c0 00 00 00 00 	cmpl   $0x0,-0x40(%ebp)
  105b58:	0f 85 23 00 00 00    	jne    105b81 <vfs_exec+0x1e1>
  105b5e:	b8 03 00 00 00       	mov    $0x3,%eax
        vfs_set_error(PE_CORRUPT_FILE);
  105b63:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  105b6a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  105b70:	e8 3b 04 00 00       	call   105fb0 <vfs_set_error>
        return 0;
  105b75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105b7c:	e9 14 04 00 00       	jmp    105f95 <vfs_exec+0x5f5>
    }

    void* modsrc = malloc(size);
  105b81:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105b84:	89 04 24             	mov    %eax,(%esp)
  105b87:	e8 a4 eb ff ff       	call   104730 <malloc>
  105b8c:	b9 01 00 00 00       	mov    $0x1,%ecx
  105b91:	89 45 bc             	mov    %eax,-0x44(%ebp)

    uint32_t res = vfs_read(handle, modsrc, size, 1);
  105b94:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105b97:	8b 55 bc             	mov    -0x44(%ebp),%edx
  105b9a:	8b 75 c0             	mov    -0x40(%ebp),%esi
  105b9d:	89 04 24             	mov    %eax,(%esp)
  105ba0:	89 54 24 04          	mov    %edx,0x4(%esp)
  105ba4:	89 74 24 08          	mov    %esi,0x8(%esp)
  105ba8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105baf:	00 
  105bb0:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  105bb6:	e8 e5 fa ff ff       	call   1056a0 <vfs_read>
  105bbb:	89 45 b8             	mov    %eax,-0x48(%ebp)

    if(res != RW_OK) {
  105bbe:	81 7d b8 00 00 00 00 	cmpl   $0x0,-0x48(%ebp)
  105bc5:	0f 84 2e 00 00 00    	je     105bf9 <vfs_exec+0x259>
        free(modsrc);
  105bcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105bce:	89 04 24             	mov    %eax,(%esp)
  105bd1:	e8 2a ef ff ff       	call   104b00 <free>
  105bd6:	b8 04 00 00 00       	mov    $0x4,%eax
        vfs_set_error(PE_FILESYSTEM);
  105bdb:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  105be2:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  105be8:	e8 c3 03 00 00       	call   105fb0 <vfs_set_error>
        return 0;
  105bed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105bf4:	e9 9c 03 00 00       	jmp    105f95 <vfs_exec+0x5f5>
    }

    uint32_t old_pdir = vmm_get_current_pagedir();
  105bf9:	e8 72 0a 00 00       	call   106670 <vmm_get_current_pagedir>
  105bfe:	89 45 b4             	mov    %eax,-0x4c(%ebp)

    //**********************************************************************************************************
    vmm_activate_pagedir(elf_mod_pdir);
  105c01:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105c04:	89 04 24             	mov    %eax,(%esp)
  105c07:	e8 34 16 00 00       	call   107240 <vmm_activate_pagedir>

    struct elf_header* header = modsrc;
  105c0c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105c0f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    struct elf_program_header* ph;

    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  105c12:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105c15:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  105c1b:	0f 84 2e 00 00 00    	je     105c4f <vfs_exec+0x2af>
        free(modsrc);
  105c21:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105c24:	89 04 24             	mov    %eax,(%esp)
  105c27:	e8 d4 ee ff ff       	call   104b00 <free>
  105c2c:	b8 03 00 00 00       	mov    $0x3,%eax
        vfs_set_error(PE_CORRUPT_FILE);
  105c31:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  105c38:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  105c3e:	e8 6d 03 00 00       	call   105fb0 <vfs_set_error>
        return 0;
  105c43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105c4a:	e9 46 03 00 00       	jmp    105f95 <vfs_exec+0x5f5>
    }

    void* elf_mod_entry = (void*) (header->entry);
  105c4f:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105c52:	8b 40 18             	mov    0x18(%eax),%eax
  105c55:	89 45 a8             	mov    %eax,-0x58(%ebp)

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  105c58:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105c5b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  105c5e:	03 41 1c             	add    0x1c(%ecx),%eax
  105c61:	89 45 ac             	mov    %eax,-0x54(%ebp)

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105c64:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  105c6b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105c6e:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  105c71:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  105c75:	39 c8                	cmp    %ecx,%eax
  105c77:	0f 83 bb 00 00 00    	jae    105d38 <vfs_exec+0x398>
        void* dest = (void*) ph->virt_addr;
  105c7d:	8b 45 ac             	mov    -0x54(%ebp),%eax
  105c80:	8b 40 08             	mov    0x8(%eax),%eax
  105c83:	89 45 a0             	mov    %eax,-0x60(%ebp)
        void* src = ((char*) header) + ph->offset;
  105c86:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105c89:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  105c8c:	03 41 04             	add    0x4(%ecx),%eax
  105c8f:	89 45 9c             	mov    %eax,-0x64(%ebp)

        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  105c92:	8b 45 ac             	mov    -0x54(%ebp),%eax
  105c95:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105c9b:	0f 84 05 00 00 00    	je     105ca6 <vfs_exec+0x306>
            continue;
  105ca1:	e9 77 00 00 00       	jmp    105d1d <vfs_exec+0x37d>
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105ca6:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
  105cad:	8b 45 98             	mov    -0x68(%ebp),%eax
  105cb0:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  105cb3:	3b 41 14             	cmp    0x14(%ecx),%eax
  105cb6:	0f 83 45 00 00 00    	jae    105d01 <vfs_exec+0x361>
            vmm_free(dest + offset);
  105cbc:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105cbf:	03 45 98             	add    -0x68(%ebp),%eax
  105cc2:	89 04 24             	mov    %eax,(%esp)
  105cc5:	e8 c6 0e 00 00       	call   106b90 <vmm_free>
  105cca:	b8 00 00 00 00       	mov    $0x0,%eax
            vmm_alloc_addr(dest + offset, 0);
  105ccf:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  105cd2:	03 4d 98             	add    -0x68(%ebp),%ecx
  105cd5:	89 0c 24             	mov    %ecx,(%esp)
  105cd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  105cdf:	00 
  105ce0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  105ce6:	e8 55 14 00 00       	call   107140 <vmm_alloc_addr>
  105ceb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105cf1:	8b 45 98             	mov    -0x68(%ebp),%eax
  105cf4:	05 00 10 00 00       	add    $0x1000,%eax
  105cf9:	89 45 98             	mov    %eax,-0x68(%ebp)
  105cfc:	e9 ac ff ff ff       	jmp    105cad <vfs_exec+0x30d>
            vmm_free(dest + offset);
            vmm_alloc_addr(dest + offset, 0);
        }

        memcpy(dest, src, ph->file_size);
  105d01:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105d04:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105d07:	8b 55 ac             	mov    -0x54(%ebp),%edx
  105d0a:	8b 52 10             	mov    0x10(%edx),%edx
  105d0d:	89 04 24             	mov    %eax,(%esp)
  105d10:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105d14:	89 54 24 08          	mov    %edx,0x8(%esp)
  105d18:	e8 e3 f0 ff ff       	call   104e00 <memcpy>

    void* elf_mod_entry = (void*) (header->entry);

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105d1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105d20:	05 01 00 00 00       	add    $0x1,%eax
  105d25:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  105d28:	8b 45 ac             	mov    -0x54(%ebp),%eax
  105d2b:	05 20 00 00 00       	add    $0x20,%eax
  105d30:	89 45 ac             	mov    %eax,-0x54(%ebp)
  105d33:	e9 33 ff ff ff       	jmp    105c6b <vfs_exec+0x2cb>
  105d38:	b8 01 00 00 00       	mov    $0x1,%eax

        memcpy(dest, src, ph->file_size);
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);
  105d3d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105d44:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  105d4a:	e8 c1 11 00 00       	call   106f10 <vmm_alloc_ucont>
  105d4f:	89 45 94             	mov    %eax,-0x6c(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  105d52:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  105d59:	8b 45 90             	mov    -0x70(%ebp),%eax
  105d5c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  105d5f:	0f 83 54 00 00 00    	jae    105db9 <vfs_exec+0x419>
  105d65:	b8 01 00 00 00       	mov    $0x1,%eax
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
  105d6a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105d71:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  105d77:	e8 94 11 00 00       	call   106f10 <vmm_alloc_ucont>
  105d7c:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  105d7f:	8b 55 94             	mov    -0x6c(%ebp),%edx
  105d82:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(usargs[i], kargs[i]);
  105d85:	8b 45 90             	mov    -0x70(%ebp),%eax
  105d88:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  105d8b:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105d8e:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  105d91:	8b 55 cc             	mov    -0x34(%ebp),%edx
  105d94:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105d97:	89 e2                	mov    %esp,%edx
  105d99:	89 4a 04             	mov    %ecx,0x4(%edx)
  105d9c:	89 02                	mov    %eax,(%edx)
  105d9e:	e8 9d f2 ff ff       	call   105040 <strcpy>
  105da3:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);

    for(uint32_t i = 0; i < argc; i++) {
  105da9:	8b 45 90             	mov    -0x70(%ebp),%eax
  105dac:	05 01 00 00 00       	add    $0x1,%eax
  105db1:	89 45 90             	mov    %eax,-0x70(%ebp)
  105db4:	e9 a0 ff ff ff       	jmp    105d59 <vfs_exec+0x3b9>
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
        strcpy(usargs[i], kargs[i]);
    }

    usargs[argc] = 0;
  105db9:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105dbc:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  105dbf:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)

    struct task* task = init_task(elf_mod_pdir, elf_mod_entry);
  105dc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105dc9:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  105dcc:	89 04 24             	mov    %eax,(%esp)
  105dcf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105dd3:	e8 88 e6 ff ff       	call   104460 <init_task>
  105dd8:	89 45 8c             	mov    %eax,-0x74(%ebp)
    if(get_current_task() != 0) {
  105ddb:	e8 e0 e2 ff ff       	call   1040c0 <get_current_task>
  105de0:	3d 00 00 00 00       	cmp    $0x0,%eax
  105de5:	0f 84 38 00 00 00    	je     105e23 <vfs_exec+0x483>
        task->stdin = get_current_task()->stdin;
  105deb:	e8 d0 e2 ff ff       	call   1040c0 <get_current_task>
  105df0:	8b 40 30             	mov    0x30(%eax),%eax
  105df3:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105df6:	89 41 30             	mov    %eax,0x30(%ecx)
        task->stdout = get_current_task()->stdout;
  105df9:	e8 c2 e2 ff ff       	call   1040c0 <get_current_task>
  105dfe:	8b 40 28             	mov    0x28(%eax),%eax
  105e01:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105e04:	89 41 28             	mov    %eax,0x28(%ecx)
        task->stderr = get_current_task()->stderr;
  105e07:	e8 b4 e2 ff ff       	call   1040c0 <get_current_task>
  105e0c:	8b 40 2c             	mov    0x2c(%eax),%eax
  105e0f:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105e12:	89 41 2c             	mov    %eax,0x2c(%ecx)
        task->execPath = get_current_task()->execPath;
  105e15:	e8 a6 e2 ff ff       	call   1040c0 <get_current_task>
  105e1a:	8b 40 20             	mov    0x20(%eax),%eax
  105e1d:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105e20:	89 41 20             	mov    %eax,0x20(%ecx)
    }

    if(execPath != 0) {
  105e23:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  105e2a:	0f 84 09 00 00 00    	je     105e39 <vfs_exec+0x499>
        task->execPath = execPath;
  105e30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105e33:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105e36:	89 41 20             	mov    %eax,0x20(%ecx)
    }

    if(stdin != 0) {
  105e39:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  105e40:	0f 84 57 00 00 00    	je     105e9d <vfs_exec+0x4fd>
        if(vfs_exists(stdin)) {
  105e46:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105e49:	89 04 24             	mov    %eax,(%esp)
  105e4c:	e8 bf fa ff ff       	call   105910 <vfs_exists>
  105e51:	3d 00 00 00 00       	cmp    $0x0,%eax
  105e56:	0f 84 3c 00 00 00    	je     105e98 <vfs_exec+0x4f8>
  105e5c:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stdin, FM_READ);
  105e61:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105e64:	89 0c 24             	mov    %ecx,(%esp)
  105e67:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  105e6e:	00 
  105e6f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  105e75:	e8 56 f7 ff ff       	call   1055d0 <vfs_open>
  105e7a:	89 45 88             	mov    %eax,-0x78(%ebp)
            if(f) task->stdin = f;
  105e7d:	81 7d 88 00 00 00 00 	cmpl   $0x0,-0x78(%ebp)
  105e84:	0f 84 09 00 00 00    	je     105e93 <vfs_exec+0x4f3>
  105e8a:	8b 45 88             	mov    -0x78(%ebp),%eax
  105e8d:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105e90:	89 41 30             	mov    %eax,0x30(%ecx)
        }
  105e93:	e9 00 00 00 00       	jmp    105e98 <vfs_exec+0x4f8>
    }
  105e98:	e9 00 00 00 00       	jmp    105e9d <vfs_exec+0x4fd>

    if(stdout != 0) {
  105e9d:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  105ea4:	0f 84 57 00 00 00    	je     105f01 <vfs_exec+0x561>
        if(vfs_exists(stdout)) {
  105eaa:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105ead:	89 04 24             	mov    %eax,(%esp)
  105eb0:	e8 5b fa ff ff       	call   105910 <vfs_exists>
  105eb5:	3d 00 00 00 00       	cmp    $0x0,%eax
  105eba:	0f 84 3c 00 00 00    	je     105efc <vfs_exec+0x55c>
  105ec0:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stdout, FM_READ);
  105ec5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105ec8:	89 0c 24             	mov    %ecx,(%esp)
  105ecb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  105ed2:	00 
  105ed3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  105ed9:	e8 f2 f6 ff ff       	call   1055d0 <vfs_open>
  105ede:	89 45 84             	mov    %eax,-0x7c(%ebp)
            if(f) task->stdout = f;
  105ee1:	81 7d 84 00 00 00 00 	cmpl   $0x0,-0x7c(%ebp)
  105ee8:	0f 84 09 00 00 00    	je     105ef7 <vfs_exec+0x557>
  105eee:	8b 45 84             	mov    -0x7c(%ebp),%eax
  105ef1:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105ef4:	89 41 28             	mov    %eax,0x28(%ecx)
        }
  105ef7:	e9 00 00 00 00       	jmp    105efc <vfs_exec+0x55c>
    }
  105efc:	e9 00 00 00 00       	jmp    105f01 <vfs_exec+0x561>

    if(stderr != 0) {
  105f01:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  105f08:	0f 84 57 00 00 00    	je     105f65 <vfs_exec+0x5c5>
        if(vfs_exists(stderr)) {
  105f0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105f11:	89 04 24             	mov    %eax,(%esp)
  105f14:	e8 f7 f9 ff ff       	call   105910 <vfs_exists>
  105f19:	3d 00 00 00 00       	cmp    $0x0,%eax
  105f1e:	0f 84 3c 00 00 00    	je     105f60 <vfs_exec+0x5c0>
  105f24:	b8 01 00 00 00       	mov    $0x1,%eax
            struct res_handle* f = vfs_open(stderr, FM_READ);
  105f29:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105f2c:	89 0c 24             	mov    %ecx,(%esp)
  105f2f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  105f36:	00 
  105f37:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  105f3d:	e8 8e f6 ff ff       	call   1055d0 <vfs_open>
  105f42:	89 45 80             	mov    %eax,-0x80(%ebp)
            if(f) task->stderr = f;
  105f45:	81 7d 80 00 00 00 00 	cmpl   $0x0,-0x80(%ebp)
  105f4c:	0f 84 09 00 00 00    	je     105f5b <vfs_exec+0x5bb>
  105f52:	8b 45 80             	mov    -0x80(%ebp),%eax
  105f55:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105f58:	89 41 2c             	mov    %eax,0x2c(%ecx)
        }
  105f5b:	e9 00 00 00 00       	jmp    105f60 <vfs_exec+0x5c0>
    }
  105f60:	e9 00 00 00 00       	jmp    105f65 <vfs_exec+0x5c5>


    //TODO change stdio if requested and free kargs

    task->args = usargs;
  105f65:	8b 45 94             	mov    -0x6c(%ebp),%eax
  105f68:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105f6b:	89 41 18             	mov    %eax,0x18(%ecx)
    task->filePath = path;
  105f6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105f71:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105f74:	89 41 1c             	mov    %eax,0x1c(%ecx)

    vmm_activate_pagedir(old_pdir);
  105f77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  105f7a:	89 04 24             	mov    %eax,(%esp)
  105f7d:	e8 be 12 00 00       	call   107240 <vmm_activate_pagedir>

    free(modsrc);
  105f82:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105f85:	89 04 24             	mov    %eax,(%esp)
  105f88:	e8 73 eb ff ff       	call   104b00 <free>

    return task->PID;
  105f8d:	8b 45 8c             	mov    -0x74(%ebp),%eax
  105f90:	8b 00                	mov    (%eax),%eax
  105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105f98:	81 c4 cc 00 00 00    	add    $0xcc,%esp
  105f9e:	5e                   	pop    %esi
  105f9f:	5f                   	pop    %edi
  105fa0:	5b                   	pop    %ebx
  105fa1:	5d                   	pop    %ebp
  105fa2:	c3                   	ret    
  105fa3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105faa:	84 00 00 00 00 00 

00105fb0 <vfs_set_error>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static void vfs_set_error(uint32_t code) {
  105fb0:	55                   	push   %ebp
  105fb1:	89 e5                	mov    %esp,%ebp
  105fb3:	83 ec 08             	sub    $0x8,%esp
  105fb6:	8b 45 08             	mov    0x8(%ebp),%eax
  105fb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(get_current_task()) {
  105fbc:	e8 ff e0 ff ff       	call   1040c0 <get_current_task>
  105fc1:	3d 00 00 00 00       	cmp    $0x0,%eax
  105fc6:	0f 84 28 00 00 00    	je     105ff4 <vfs_set_error+0x44>
        if(get_current_task()->vfserr == PE_NO_ERROR) {
  105fcc:	e8 ef e0 ff ff       	call   1040c0 <get_current_task>
  105fd1:	81 78 24 00 00 00 00 	cmpl   $0x0,0x24(%eax)
  105fd8:	0f 85 11 00 00 00    	jne    105fef <vfs_set_error+0x3f>
            get_current_task()->vfserr = code;
  105fde:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105fe1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105fe4:	e8 d7 e0 ff ff       	call   1040c0 <get_current_task>
  105fe9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105fec:	89 48 24             	mov    %ecx,0x24(%eax)
        }
    }
  105fef:	e9 00 00 00 00       	jmp    105ff4 <vfs_set_error+0x44>
}
  105ff4:	83 c4 08             	add    $0x8,%esp
  105ff7:	5d                   	pop    %ebp
  105ff8:	c3                   	ret    
  105ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00106000 <vfs_resolve_path>:
    free(modsrc);

    return task->PID;
}

char* vfs_resolve_path(char* path) {
  106000:	55                   	push   %ebp
  106001:	89 e5                	mov    %esp,%ebp
  106003:	83 ec 18             	sub    $0x18,%esp
  106006:	8b 45 08             	mov    0x8(%ebp),%eax
  106009:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_node* node = vfs_get_node(path);
  10600c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10600f:	89 04 24             	mov    %eax,(%esp)
  106012:	e8 89 f5 ff ff       	call   1055a0 <vfs_get_node>
  106017:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(node == 0) return 0;
  10601a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  106021:	0f 85 0c 00 00 00    	jne    106033 <vfs_resolve_path+0x33>
  106027:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10602e:	e9 0e 00 00 00       	jmp    106041 <vfs_resolve_path+0x41>
    return vfs_construct_absolute_path_for_node(node);
  106033:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106036:	89 04 24             	mov    %eax,(%esp)
  106039:	e8 12 00 00 00       	call   106050 <vfs_construct_absolute_path_for_node>
  10603e:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  106041:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106044:	83 c4 18             	add    $0x18,%esp
  106047:	5d                   	pop    %ebp
  106048:	c3                   	ret    
  106049:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00106050 <vfs_construct_absolute_path_for_node>:
    }
}

char capfn_buf[513];

static char* vfs_construct_absolute_path_for_node(struct res_node* node) {
  106050:	55                   	push   %ebp
  106051:	89 e5                	mov    %esp,%ebp
  106053:	83 ec 18             	sub    $0x18,%esp
  106056:	8b 45 08             	mov    0x8(%ebp),%eax
  106059:	8d 0d 98 a8 18 00    	lea    0x18a898,%ecx
  10605f:	81 c1 ff 01 00 00    	add    $0x1ff,%ecx
  106065:	89 45 fc             	mov    %eax,-0x4(%ebp)
    capfn_buf[512] = '\0';
  106068:	c6 05 98 aa 18 00 00 	movb   $0x0,0x18aa98
    char* out =  &(capfn_buf[511]);
  10606f:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    *out = '/';
  106072:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106075:	c6 00 2f             	movb   $0x2f,(%eax)

    while(node != root) {
  106078:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10607b:	3b 05 4c a4 10 00    	cmp    0x10a44c,%eax
  106081:	0f 84 59 00 00 00    	je     1060e0 <vfs_construct_absolute_path_for_node+0x90>
  106087:	b8 00 00 00 00       	mov    $0x0,%eax
        out -= strlen(node->name);
  10608c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10608f:	89 e2                	mov    %esp,%edx
  106091:	89 0a                	mov    %ecx,(%edx)
  106093:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106096:	e8 35 ef ff ff       	call   104fd0 <strlen>
  10609b:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10609e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1060a1:	29 c2                	sub    %eax,%edx
  1060a3:	01 d1                	add    %edx,%ecx
  1060a5:	89 4d f8             	mov    %ecx,-0x8(%ebp)
        strcpy(out, node->name);
  1060a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1060ab:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1060ae:	89 e2                	mov    %esp,%edx
  1060b0:	89 4a 04             	mov    %ecx,0x4(%edx)
  1060b3:	89 02                	mov    %eax,(%edx)
  1060b5:	e8 86 ef ff ff       	call   105040 <strcpy>
        *--out = '/';
  1060ba:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1060bd:	89 ca                	mov    %ecx,%edx
  1060bf:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  1060c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1060c8:	c6 41 ff 2f          	movb   $0x2f,-0x1(%ecx)

        node = node->parent;
  1060cc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1060cf:	8b 89 0c 01 00 00    	mov    0x10c(%ecx),%ecx
  1060d5:	89 4d fc             	mov    %ecx,-0x4(%ebp)
    }
  1060d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1060db:	e9 98 ff ff ff       	jmp    106078 <vfs_construct_absolute_path_for_node+0x28>

    return strclone(out);
  1060e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1060e3:	89 04 24             	mov    %eax,(%esp)
  1060e6:	e8 b5 ef ff ff       	call   1050a0 <strclone>
  1060eb:	83 c4 18             	add    $0x18,%esp
  1060ee:	5d                   	pop    %ebp
  1060ef:	c3                   	ret    

001060f0 <vfs_init_root>:
    struct res_node* node = vfs_get_node(path);
    if(node == 0) return 0;
    return vfs_construct_absolute_path_for_node(node);
}

void vfs_init_root() {
  1060f0:	55                   	push   %ebp
  1060f1:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  1060f3:	83 ec 18             	sub    $0x18,%esp
  1060f6:	81 3d 4c a4 10 00 00 	cmpl   $0x0,0x10a44c
  1060fd:	00 00 00 
  106100:	0f 85 6f 00 00 00    	jne    106175 <vfs_init_root+0x85>
  106106:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  10610b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  106112:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106115:	e8 16 e6 ff ff       	call   104730 <malloc>
  10611a:	a3 4c a4 10 00       	mov    %eax,0x10a44c
        root->next = 0;
  10611f:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106124:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  10612b:	00 00 00 
        root->parent = 0;
  10612e:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106133:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  10613a:	00 00 00 
        strcpy(root->name, "$");
  10613d:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106142:	89 e1                	mov    %esp,%ecx
  106144:	89 01                	mov    %eax,(%ecx)
  106146:	c7 41 04 47 95 10 00 	movl   $0x109547,0x4(%ecx)
  10614d:	e8 ee ee ff ff       	call   105040 <strcpy>
        root->res_ptr = 0;
  106152:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  106158:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  10615f:	00 00 00 
        root->res_type = RES_SUBDIR;
  106162:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  106168:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  10616f:	00 00 00 
  106172:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  106175:	83 c4 18             	add    $0x18,%esp
  106178:	5d                   	pop    %ebp
  106179:	c3                   	ret    
  10617a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00106180 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  106180:	55                   	push   %ebp
  106181:	89 e5                	mov    %esp,%ebp
  106183:	56                   	push   %esi
  106184:	83 ec 24             	sub    $0x24,%esp
  106187:	8b 45 08             	mov    0x8(%ebp),%eax
  10618a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  10618d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106190:	89 04 24             	mov    %eax,(%esp)
  106193:	e8 08 f4 ff ff       	call   1055a0 <vfs_get_node>
  106198:	a3 60 a4 10 00       	mov    %eax,0x10a460
    node = node->res_ptr;
  10619d:	a1 60 a4 10 00       	mov    0x10a460,%eax
  1061a2:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1061a8:	a3 60 a4 10 00       	mov    %eax,0x10a460

    while(node != 0) {
  1061ad:	81 3d 60 a4 10 00 00 	cmpl   $0x0,0x10a460
  1061b4:	00 00 00 
  1061b7:	0f 84 90 00 00 00    	je     10624d <vfs_debug_ls+0xcd>
  1061bd:	8d 05 49 95 10 00    	lea    0x109549,%eax
        char* type = "N/A";
  1061c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  1061c6:	a1 60 a4 10 00       	mov    0x10a460,%eax
  1061cb:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  1061d2:	00 00 00 
  1061d5:	0f 85 09 00 00 00    	jne    1061e4 <vfs_debug_ls+0x64>
  1061db:	8d 05 4d 95 10 00    	lea    0x10954d,%eax
            type = "DIR";
  1061e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  1061e4:	a1 60 a4 10 00       	mov    0x10a460,%eax
  1061e9:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  1061f0:	00 00 00 
  1061f3:	0f 85 14 00 00 00    	jne    10620d <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  1061f9:	a1 60 a4 10 00       	mov    0x10a460,%eax
  1061fe:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106204:	8b 40 04             	mov    0x4(%eax),%eax
  106207:	8b 40 18             	mov    0x18(%eax),%eax
  10620a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10620d:	8d 05 51 95 10 00    	lea    0x109551,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  106213:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106216:	8b 15 60 a4 10 00    	mov    0x10a460,%edx
  10621c:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10621f:	89 04 24             	mov    %eax,(%esp)
  106222:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106226:	89 54 24 08          	mov    %edx,0x8(%esp)
  10622a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10622e:	e8 7d a0 ff ff       	call   1002b0 <kprintf>

        node = node->next;
  106233:	8b 0d 60 a4 10 00    	mov    0x10a460,%ecx
  106239:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  10623f:	89 0d 60 a4 10 00    	mov    %ecx,0x10a460
    }
  106245:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106248:	e9 60 ff ff ff       	jmp    1061ad <vfs_debug_ls+0x2d>
}
  10624d:	83 c4 24             	add    $0x24,%esp
  106250:	5e                   	pop    %esi
  106251:	5d                   	pop    %ebp
  106252:	c3                   	ret    
  106253:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10625a:	84 00 00 00 00 00 

00106260 <vfs_get_relative_node>:

    return 1;
}


static struct res_node* vfs_get_relative_node(struct res_node* parent, char* path) {
  106260:	55                   	push   %ebp
  106261:	89 e5                	mov    %esp,%ebp
  106263:	83 ec 38             	sub    $0x38,%esp
  106266:	8b 45 0c             	mov    0xc(%ebp),%eax
  106269:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10626c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10626f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* sub;
    struct res_node* child = 0;
  106272:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    if(path == 0) {
  106279:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  106280:	0f 85 20 00 00 00    	jne    1062a6 <vfs_get_relative_node+0x46>
  106286:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  10628b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  106292:	89 45 e8             	mov    %eax,-0x18(%ebp)
  106295:	e8 16 fd ff ff       	call   105fb0 <vfs_set_error>
        return 0;
  10629a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1062a1:	e9 1d 01 00 00       	jmp    1063c3 <vfs_get_relative_node+0x163>
    }

    if(path[0] == 0) {
  1062a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1062a9:	0f be 00             	movsbl (%eax),%eax
  1062ac:	3d 00 00 00 00       	cmp    $0x0,%eax
  1062b1:	0f 85 20 00 00 00    	jne    1062d7 <vfs_get_relative_node+0x77>
  1062b7:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  1062bc:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1062c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1062c6:	e8 e5 fc ff ff       	call   105fb0 <vfs_set_error>
        return 0;
  1062cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1062d2:	e9 ec 00 00 00       	jmp    1063c3 <vfs_get_relative_node+0x163>
  1062d7:	8d 05 61 95 10 00    	lea    0x109561,%eax
    }

    sub = strtok(path, "/");
  1062dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1062e0:	89 0c 24             	mov    %ecx,(%esp)
  1062e3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1062e7:	e8 04 ee ff ff       	call   1050f0 <strtok>
  1062ec:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(sub == NULL) {
  1062ef:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1062f6:	0f 85 0b 00 00 00    	jne    106307 <vfs_get_relative_node+0xa7>
        return parent;
  1062fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1062ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106302:	e9 bc 00 00 00       	jmp    1063c3 <vfs_get_relative_node+0x163>
    }

    if(sub[0] == 0) sub = strtok(0, "/");
  106307:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10630a:	0f be 00             	movsbl (%eax),%eax
  10630d:	3d 00 00 00 00       	cmp    $0x0,%eax
  106312:	0f 85 21 00 00 00    	jne    106339 <vfs_get_relative_node+0xd9>
  106318:	b8 00 00 00 00       	mov    $0x0,%eax
  10631d:	8d 0d 61 95 10 00    	lea    0x109561,%ecx
  106323:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10632a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10632e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  106331:	e8 ba ed ff ff       	call   1050f0 <strtok>
  106336:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(sub == NULL) {
  106339:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106340:	0f 85 0b 00 00 00    	jne    106351 <vfs_get_relative_node+0xf1>
        return parent;
  106346:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106349:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10634c:	e9 72 00 00 00       	jmp    1063c3 <vfs_get_relative_node+0x163>
    }

    while (sub != NULL)
  106351:	e9 00 00 00 00       	jmp    106356 <vfs_get_relative_node+0xf6>
  106356:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10635d:	0f 84 5a 00 00 00    	je     1063bd <vfs_get_relative_node+0x15d>
    {
        if(parent == 0) return 0;
  106363:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10636a:	0f 85 0c 00 00 00    	jne    10637c <vfs_get_relative_node+0x11c>
  106370:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106377:	e9 47 00 00 00       	jmp    1063c3 <vfs_get_relative_node+0x163>

        child = vfs_find_node(parent, sub);
  10637c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10637f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106382:	89 04 24             	mov    %eax,(%esp)
  106385:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106389:	e8 12 01 00 00       	call   1064a0 <vfs_find_node>
  10638e:	b9 00 00 00 00       	mov    $0x0,%ecx
  106393:	8d 15 61 95 10 00    	lea    0x109561,%edx
  106399:	89 45 ec             	mov    %eax,-0x14(%ebp)
        parent = child;
  10639c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10639f:	89 45 f8             	mov    %eax,-0x8(%ebp)

        sub = strtok(0, "/");
  1063a2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1063a9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1063ad:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1063b0:	e8 3b ed ff ff       	call   1050f0 <strtok>
  1063b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  1063b8:	e9 99 ff ff ff       	jmp    106356 <vfs_get_relative_node+0xf6>

    return child;
  1063bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1063c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1063c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1063c6:	83 c4 38             	add    $0x38,%esp
  1063c9:	5d                   	pop    %ebp
  1063ca:	c3                   	ret    
  1063cb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001063d0 <vfs_get_current_task_root_node_for_path>:

static struct res_node* vfs_get_current_task_root_node_for_path(char* path) {
  1063d0:	55                   	push   %ebp
  1063d1:	89 e5                	mov    %esp,%ebp
  1063d3:	83 ec 18             	sub    $0x18,%esp
  1063d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1063d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(path == 0 || path[0] == '\0') {
  1063dc:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1063e3:	0f 84 11 00 00 00    	je     1063fa <vfs_get_current_task_root_node_for_path+0x2a>
  1063e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1063ec:	0f be 00             	movsbl (%eax),%eax
  1063ef:	3d 00 00 00 00       	cmp    $0x0,%eax
  1063f4:	0f 85 20 00 00 00    	jne    10641a <vfs_get_current_task_root_node_for_path+0x4a>
  1063fa:	b8 05 00 00 00       	mov    $0x5,%eax
        vfs_set_error(PE_INVALID);
  1063ff:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  106406:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106409:	e8 a2 fb ff ff       	call   105fb0 <vfs_set_error>
        return 0;
  10640e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106415:	e9 7c 00 00 00       	jmp    106496 <vfs_get_current_task_root_node_for_path+0xc6>
    }

    if(path[0] == '/') return root;
  10641a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10641d:	0f be 00             	movsbl (%eax),%eax
  106420:	3d 2f 00 00 00       	cmp    $0x2f,%eax
  106425:	0f 85 0d 00 00 00    	jne    106438 <vfs_get_current_task_root_node_for_path+0x68>
  10642b:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106430:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106433:	e9 5e 00 00 00       	jmp    106496 <vfs_get_current_task_root_node_for_path+0xc6>
    if(get_current_task() == 0) return root;
  106438:	e8 83 dc ff ff       	call   1040c0 <get_current_task>
  10643d:	3d 00 00 00 00       	cmp    $0x0,%eax
  106442:	0f 85 0d 00 00 00    	jne    106455 <vfs_get_current_task_root_node_for_path+0x85>
  106448:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  10644d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106450:	e9 41 00 00 00       	jmp    106496 <vfs_get_current_task_root_node_for_path+0xc6>
    if(get_current_task()->execPath == 0) return root;
  106455:	e8 66 dc ff ff       	call   1040c0 <get_current_task>
  10645a:	81 78 20 00 00 00 00 	cmpl   $0x0,0x20(%eax)
  106461:	0f 85 0d 00 00 00    	jne    106474 <vfs_get_current_task_root_node_for_path+0xa4>
  106467:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  10646c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10646f:	e9 22 00 00 00       	jmp    106496 <vfs_get_current_task_root_node_for_path+0xc6>

    return vfs_get_relative_node(root, get_current_task()->execPath);
  106474:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  106479:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10647c:	e8 3f dc ff ff       	call   1040c0 <get_current_task>
  106481:	8b 40 20             	mov    0x20(%eax),%eax
  106484:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106487:	89 0c 24             	mov    %ecx,(%esp)
  10648a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10648e:	e8 cd fd ff ff       	call   106260 <vfs_get_relative_node>
  106493:	89 45 fc             	mov    %eax,-0x4(%ebp)

}
  106496:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106499:	83 c4 18             	add    $0x18,%esp
  10649c:	5d                   	pop    %ebp
  10649d:	c3                   	ret    
  10649e:	66 90                	xchg   %ax,%ax

001064a0 <vfs_find_node>:
    }

    return strclone(out);
}

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  1064a0:	55                   	push   %ebp
  1064a1:	89 e5                	mov    %esp,%ebp
  1064a3:	83 ec 18             	sub    $0x18,%esp
  1064a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1064a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1064ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1064af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(name == 0) return parent;
  1064b2:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1064b9:	0f 85 0b 00 00 00    	jne    1064ca <vfs_find_node+0x2a>
  1064bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1064c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1064c5:	e9 ff 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>
    if(name[0] == '\0') return parent;
  1064ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1064cd:	0f be 00             	movsbl (%eax),%eax
  1064d0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1064d5:	0f 85 0b 00 00 00    	jne    1064e6 <vfs_find_node+0x46>
  1064db:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1064de:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1064e1:	e9 e3 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>

    if(!strcmp(name, ".")) return parent;
  1064e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1064e9:	89 e1                	mov    %esp,%ecx
  1064eb:	89 01                	mov    %eax,(%ecx)
  1064ed:	c7 41 04 91 92 10 00 	movl   $0x109291,0x4(%ecx)
  1064f4:	e8 57 ea ff ff       	call   104f50 <strcmp>
  1064f9:	3d 00 00 00 00       	cmp    $0x0,%eax
  1064fe:	0f 85 0b 00 00 00    	jne    10650f <vfs_find_node+0x6f>
  106504:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106507:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10650a:	e9 ba 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>
    if(!strcmp(name, "..")) {
  10650f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106512:	89 e1                	mov    %esp,%ecx
  106514:	89 01                	mov    %eax,(%ecx)
  106516:	c7 41 04 90 92 10 00 	movl   $0x109290,0x4(%ecx)
  10651d:	e8 2e ea ff ff       	call   104f50 <strcmp>
  106522:	3d 00 00 00 00       	cmp    $0x0,%eax
  106527:	0f 85 2b 00 00 00    	jne    106558 <vfs_find_node+0xb8>
        if(parent == root) return parent;
  10652d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106530:	3b 05 4c a4 10 00    	cmp    0x10a44c,%eax
  106536:	0f 85 0b 00 00 00    	jne    106547 <vfs_find_node+0xa7>
  10653c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10653f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106542:	e9 82 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>
        return parent->parent;
  106547:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10654a:	8b 80 0c 01 00 00    	mov    0x10c(%eax),%eax
  106550:	89 45 fc             	mov    %eax,-0x4(%ebp)
  106553:	e9 71 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>
    }

    if(parent->res_type == RES_SUBDIR) {
  106558:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10655b:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  106562:	00 00 00 
  106565:	0f 85 57 00 00 00    	jne    1065c2 <vfs_find_node+0x122>
        struct res_node* ptr = parent->res_ptr;
  10656b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10656e:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  106574:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  106577:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10657e:	0f 84 39 00 00 00    	je     1065bd <vfs_find_node+0x11d>
            if(strcmp(name, ptr->name) == 0) {
  106584:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106587:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10658a:	89 e2                	mov    %esp,%edx
  10658c:	89 4a 04             	mov    %ecx,0x4(%edx)
  10658f:	89 02                	mov    %eax,(%edx)
  106591:	e8 ba e9 ff ff       	call   104f50 <strcmp>
  106596:	3d 00 00 00 00       	cmp    $0x0,%eax
  10659b:	0f 85 0b 00 00 00    	jne    1065ac <vfs_find_node+0x10c>
                return ptr;
  1065a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1065a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1065a7:	e9 1d 00 00 00       	jmp    1065c9 <vfs_find_node+0x129>
            }

            ptr = ptr->next;
  1065ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1065af:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  1065b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  1065b8:	e9 ba ff ff ff       	jmp    106577 <vfs_find_node+0xd7>
    }
  1065bd:	e9 00 00 00 00       	jmp    1065c2 <vfs_find_node+0x122>

    return 0;
  1065c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1065c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1065cc:	83 c4 18             	add    $0x18,%esp
  1065cf:	5d                   	pop    %ebp
  1065d0:	c3                   	ret    
  1065d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1065d8:	0f 1f 84 00 00 00 00 
  1065df:	00 

001065e0 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  1065e0:	55                   	push   %ebp
  1065e1:	89 e5                	mov    %esp,%ebp
  1065e3:	83 ec 0c             	sub    $0xc,%esp
  1065e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1065e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1065ec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1065ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  1065f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1065f5:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  1065fc:	00 00 00 
  1065ff:	0f 85 0d 00 00 00    	jne    106612 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  106605:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106608:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  10660f:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  106612:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106615:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10661c:	00 00 00 
  10661f:	0f 85 36 00 00 00    	jne    10665b <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  106625:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106628:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10662e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106631:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  106637:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10663a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10663d:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  106643:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106646:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106649:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  10664f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  106656:	e9 07 00 00 00       	jmp    106662 <vfs_insert_node+0x82>
    }

    return 1;
  10665b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  106662:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106665:	83 c4 0c             	add    $0xc,%esp
  106668:	5d                   	pop    %ebp
  106669:	c3                   	ret    
  10666a:	66 90                	xchg   %ax,%ax
  10666c:	66 90                	xchg   %ax,%ax
  10666e:	66 90                	xchg   %ax,%ax

00106670 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  106670:	55                   	push   %ebp
  106671:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  106673:	a1 64 a4 10 00       	mov    0x10a464,%eax
  106678:	5d                   	pop    %ebp
  106679:	c3                   	ret    
  10667a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00106680 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir() {
  106680:	55                   	push   %ebp
  106681:	89 e5                	mov    %esp,%ebp
  106683:	83 ec 18             	sub    $0x18,%esp
  106686:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  106689:	89 04 24             	mov    %eax,(%esp)
  10668c:	e8 1f 00 00 00       	call   1066b0 <vmm_create_vpdraw>
  106691:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  106694:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106697:	89 04 24             	mov    %eax,(%esp)
  10669a:	e8 d1 02 00 00       	call   106970 <vmm_free_pdptr>

	return phys_pagedir;
  10669f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1066a2:	83 c4 18             	add    $0x18,%esp
  1066a5:	5d                   	pop    %ebp
  1066a6:	c3                   	ret    
  1066a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1066ae:	00 00 

001066b0 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  1066b0:	55                   	push   %ebp
  1066b1:	89 e5                	mov    %esp,%ebp
  1066b3:	53                   	push   %ebx
  1066b4:	57                   	push   %edi
  1066b5:	56                   	push   %esi
  1066b6:	83 ec 4c             	sub    $0x4c,%esp
  1066b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1066bc:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  1066bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  1066c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  1066c9:	89 0c 24             	mov    %ecx,(%esp)
  1066cc:	e8 6f 04 00 00       	call   106b40 <vmm_alloc>
  1066d1:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  1066d4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  1066d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  1066de:	89 0c 24             	mov    %ecx,(%esp)
  1066e1:	e8 5a 04 00 00       	call   106b40 <vmm_alloc>
  1066e6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1066e9:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  1066eb:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1066f2:	0f 84 08 00 00 00    	je     106700 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  1066f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1066fb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1066fe:	89 01                	mov    %eax,(%ecx)
  106700:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  106705:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10670c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10670f:	e8 2c 04 00 00       	call   106b40 <vmm_alloc>
  106714:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  106717:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10671e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  106725:	0f 83 25 01 00 00    	jae    106850 <vmm_create_vpdraw+0x1a0>
  10672b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10672e:	89 04 24             	mov    %eax,(%esp)
  106731:	e8 0a 04 00 00       	call   106b40 <vmm_alloc>
  106736:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106739:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10673c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  10673f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  106746:	0f 83 4d 00 00 00    	jae    106799 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  10674c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10674f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106752:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106755:	89 04 24             	mov    %eax,(%esp)
  106758:	e8 33 04 00 00       	call   106b90 <vmm_free>
  10675d:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  106762:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106765:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106768:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10676b:	8b 55 d8             	mov    -0x28(%ebp),%edx
  10676e:	8b 14 95 9c aa 18 00 	mov    0x18aa9c(,%edx,4),%edx
  106775:	89 0c 24             	mov    %ecx,(%esp)
  106778:	89 54 24 04          	mov    %edx,0x4(%esp)
  10677c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106783:	00 
  106784:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  106787:	e8 84 04 00 00       	call   106c10 <map_address_active>
			paddr = kernel_pagetables[i];
  10678c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10678f:	8b 04 85 9c aa 18 00 	mov    0x18aa9c(,%eax,4),%eax
  106796:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  106799:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10679c:	0d 01 00 00 00       	or     $0x1,%eax
  1067a1:	0d 02 00 00 00       	or     $0x2,%eax
  1067a6:	0d 04 00 00 00       	or     $0x4,%eax
  1067ab:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1067ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1067b1:	8b 12                	mov    (%edx),%edx
  1067b3:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  1067b6:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  1067bd:	0f 82 78 00 00 00    	jb     10683b <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  1067c3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  1067ca:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  1067d1:	0f 83 5f 00 00 00    	jae    106836 <vmm_create_vpdraw+0x186>
  1067d7:	b8 04 00 00 00       	mov    $0x4,%eax
  1067dc:	b9 00 00 00 00       	mov    $0x0,%ecx
  1067e1:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  1067e6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1067e9:	c1 e6 16             	shl    $0x16,%esi
  1067ec:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  1067ef:	c1 e7 0c             	shl    $0xc,%edi
  1067f2:	01 fe                	add    %edi,%esi
  1067f4:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  1067f7:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  1067fe:	0f 97 c3             	seta   %bl
  106801:	84 db                	test   %bl,%bl
  106803:	0f 44 d1             	cmove  %ecx,%edx
  106806:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  10680d:	0f 97 c3             	seta   %bl
  106810:	84 db                	test   %bl,%bl
  106812:	0f 44 c1             	cmove  %ecx,%eax
  106815:	09 c2                	or     %eax,%edx
  106817:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10681a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10681d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  106820:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106823:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  106826:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106829:	05 01 00 00 00       	add    $0x1,%eax
  10682e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  106831:	e9 94 ff ff ff       	jmp    1067ca <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  106836:	e9 00 00 00 00       	jmp    10683b <vmm_create_vpdraw+0x18b>
	}
  10683b:	e9 00 00 00 00       	jmp    106840 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  106840:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106843:	05 01 00 00 00       	add    $0x1,%eax
  106848:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10684b:	e9 ce fe ff ff       	jmp    10671e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  106850:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  106857:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  10685e:	0f 83 58 00 00 00    	jae    1068bc <vmm_create_vpdraw+0x20c>
  106864:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  106869:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10686c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10686f:	8b 12                	mov    (%edx),%edx
  106871:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106874:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10687a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  10687d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106880:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106886:	8b 75 d8             	mov    -0x28(%ebp),%esi
  106889:	c1 e6 0c             	shl    $0xc,%esi
  10688c:	01 f2                	add    %esi,%edx
  10688e:	8b 75 dc             	mov    -0x24(%ebp),%esi
  106891:	89 0c 24             	mov    %ecx,(%esp)
  106894:	89 54 24 04          	mov    %edx,0x4(%esp)
  106898:	89 74 24 08          	mov    %esi,0x8(%esp)
  10689c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1068a3:	00 
  1068a4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1068a7:	e8 64 05 00 00       	call   106e10 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  1068ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1068af:	05 01 00 00 00       	add    $0x1,%eax
  1068b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1068b7:	e9 9b ff ff ff       	jmp    106857 <vmm_create_vpdraw+0x1a7>
  1068bc:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  1068c1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1068c4:	8b 15 e8 82 10 00    	mov    0x1082e8,%edx
  1068ca:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1068cd:	89 0c 24             	mov    %ecx,(%esp)
  1068d0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1068d4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1068d8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1068df:	00 
  1068e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1068e3:	e8 28 05 00 00       	call   106e10 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1068e8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  1068ef:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  1068f5:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  1068f8:	0f 83 39 00 00 00    	jae    106937 <vmm_create_vpdraw+0x287>
  1068fe:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  106903:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106906:	8b 55 d8             	mov    -0x28(%ebp),%edx
  106909:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10690c:	89 0c 24             	mov    %ecx,(%esp)
  10690f:	89 54 24 04          	mov    %edx,0x4(%esp)
  106913:	89 74 24 08          	mov    %esi,0x8(%esp)
  106917:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10691e:	00 
  10691f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  106922:	e8 e9 04 00 00       	call   106e10 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106927:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10692a:	05 00 10 00 00       	add    $0x1000,%eax
  10692f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106932:	e9 b8 ff ff ff       	jmp    1068ef <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  106937:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10693a:	8b 00                	mov    (%eax),%eax
  10693c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  10693f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106942:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  106945:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  106947:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10694a:	89 04 24             	mov    %eax,(%esp)
  10694d:	e8 4e 05 00 00       	call   106ea0 <vmm_unmap>
	vmm_unmap(context);
  106952:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106955:	89 04 24             	mov    %eax,(%esp)
  106958:	e8 43 05 00 00       	call   106ea0 <vmm_unmap>

	return pagedir_ptr;
  10695d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106960:	83 c4 4c             	add    $0x4c,%esp
  106963:	5e                   	pop    %esi
  106964:	5f                   	pop    %edi
  106965:	5b                   	pop    %ebx
  106966:	5d                   	pop    %ebp
  106967:	c3                   	ret    
  106968:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10696f:	00 

00106970 <vmm_free_pdptr>:
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  106970:	55                   	push   %ebp
  106971:	89 e5                	mov    %esp,%ebp
  106973:	83 ec 18             	sub    $0x18,%esp
  106976:	8b 45 08             	mov    0x8(%ebp),%eax
  106979:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  10697c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  106983:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  10698a:	0f 83 21 00 00 00    	jae    1069b1 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  106990:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106993:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106996:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106999:	89 04 24             	mov    %eax,(%esp)
  10699c:	e8 ff 04 00 00       	call   106ea0 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  1069a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1069a4:	05 01 00 00 00       	add    $0x1,%eax
  1069a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1069ac:	e9 d2 ff ff ff       	jmp    106983 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  1069b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1069b4:	89 04 24             	mov    %eax,(%esp)
  1069b7:	e8 e4 04 00 00       	call   106ea0 <vmm_unmap>
}
  1069bc:	83 c4 18             	add    $0x18,%esp
  1069bf:	5d                   	pop    %ebp
  1069c0:	c3                   	ret    
  1069c1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1069c8:	0f 1f 84 00 00 00 00 
  1069cf:	00 

001069d0 <vmm_free_current_pagetables>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

void vmm_free_current_pagetables() {
  1069d0:	55                   	push   %ebp
  1069d1:	89 e5                	mov    %esp,%ebp
  1069d3:	56                   	push   %esi
  1069d4:	83 ec 34             	sub    $0x34,%esp
  1069d7:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t* ppd = vmm_alloc(0);
  1069dc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1069e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1069e6:	e8 55 01 00 00       	call   106b40 <vmm_alloc>
  1069eb:	b9 00 00 00 00       	mov    $0x0,%ecx
  1069f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    uint32_t* ppt = vmm_alloc(0);
  1069f3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1069fa:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1069fd:	e8 3e 01 00 00       	call   106b40 <vmm_alloc>
  106a02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vmm_free(ppd);
  106a05:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106a08:	89 04 24             	mov    %eax,(%esp)
  106a0b:	e8 80 01 00 00       	call   106b90 <vmm_free>
    vmm_free(ppt);
  106a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106a13:	89 04 24             	mov    %eax,(%esp)
  106a16:	e8 75 01 00 00       	call   106b90 <vmm_free>

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);
  106a1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106a1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  106a21:	e8 9a d6 ff ff       	call   1040c0 <get_current_task>
  106a26:	b9 00 00 00 00       	mov    $0x0,%ecx
  106a2b:	8b 40 14             	mov    0x14(%eax),%eax
  106a2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106a31:	89 14 24             	mov    %edx,(%esp)
  106a34:	89 44 24 04          	mov    %eax,0x4(%esp)
  106a38:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106a3f:	00 
  106a40:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  106a43:	e8 c8 01 00 00       	call   106c10 <map_address_active>

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  106a48:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
  106a4f:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  106a56:	0f 83 ca 00 00 00    	jae    106b26 <vmm_free_current_pagetables+0x156>
  106a5c:	b8 00 00 00 00       	mov    $0x0,%eax
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);
  106a61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106a64:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106a67:	8b 75 f8             	mov    -0x8(%ebp),%esi
  106a6a:	8b 14 96             	mov    (%esi,%edx,4),%edx
  106a6d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  106a73:	89 0c 24             	mov    %ecx,(%esp)
  106a76:	89 54 24 04          	mov    %edx,0x4(%esp)
  106a7a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106a81:	00 
  106a82:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106a85:	e8 86 01 00 00       	call   106c10 <map_address_active>

        for(uint32_t n = 0; n < 1024; n++) {
  106a8a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106a91:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106a98:	0f 83 44 00 00 00    	jae    106ae2 <vmm_free_current_pagetables+0x112>
            if(ppt[n] & PT_PRESENT) {
  106a9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106aa1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106aa4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106aa7:	25 01 00 00 00       	and    $0x1,%eax
  106aac:	3d 00 00 00 00       	cmp    $0x0,%eax
  106ab1:	0f 84 16 00 00 00    	je     106acd <vmm_free_current_pagetables+0xfd>

                //kprintf("[exit] should free %x:%d->%x:%d->%x\n", vmm_resolve(ppd), i, ppd[i], n, ppt[n]);

                pmm_free((void*)(ppt[n] & 0xFFFF000));
  106ab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106aba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106abd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106ac0:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  106ac5:	89 04 24             	mov    %eax,(%esp)
  106ac8:	e8 73 c3 ff ff       	call   102e40 <pmm_free>
            }
        }
  106acd:	e9 00 00 00 00       	jmp    106ad2 <vmm_free_current_pagetables+0x102>
    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);

        for(uint32_t n = 0; n < 1024; n++) {
  106ad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106ad5:	05 01 00 00 00       	add    $0x1,%eax
  106ada:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106add:	e9 af ff ff ff       	jmp    106a91 <vmm_free_current_pagetables+0xc1>

                pmm_free((void*)(ppt[n] & 0xFFFF000));
            }
        }

        if(ppd[i] & PD_PRESENT) {
  106ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106ae5:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106ae8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106aeb:	25 01 00 00 00       	and    $0x1,%eax
  106af0:	3d 00 00 00 00       	cmp    $0x0,%eax
  106af5:	0f 84 16 00 00 00    	je     106b11 <vmm_free_current_pagetables+0x141>
            pmm_free((void*)(ppd[i] & (~0xFFF)));
  106afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106afe:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106b01:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106b04:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106b09:	89 04 24             	mov    %eax,(%esp)
  106b0c:	e8 2f c3 ff ff       	call   102e40 <pmm_free>
        }
    }
  106b11:	e9 00 00 00 00       	jmp    106b16 <vmm_free_current_pagetables+0x146>
    vmm_free(ppd);
    vmm_free(ppt);

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  106b16:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106b19:	05 01 00 00 00       	add    $0x1,%eax
  106b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106b21:	e9 29 ff ff ff       	jmp    106a4f <vmm_free_current_pagetables+0x7f>

        if(ppd[i] & PD_PRESENT) {
            pmm_free((void*)(ppd[i] & (~0xFFF)));
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
  106b26:	e8 95 d5 ff ff       	call   1040c0 <get_current_task>
  106b2b:	8b 40 14             	mov    0x14(%eax),%eax
  106b2e:	89 04 24             	mov    %eax,(%esp)
  106b31:	e8 0a c3 ff ff       	call   102e40 <pmm_free>
}
  106b36:	83 c4 34             	add    $0x34,%esp
  106b39:	5e                   	pop    %esi
  106b3a:	5d                   	pop    %ebp
  106b3b:	c3                   	ret    
  106b3c:	0f 1f 40 00          	nopl   0x0(%eax)

00106b40 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  106b40:	55                   	push   %ebp
  106b41:	89 e5                	mov    %esp,%ebp
  106b43:	56                   	push   %esi
  106b44:	83 ec 24             	sub    $0x24,%esp
  106b47:	8b 45 08             	mov    0x8(%ebp),%eax
  106b4a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  106b4f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  106b54:	be 01 00 00 00       	mov    $0x1,%esi
  106b59:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  106b5c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106b5f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  106b66:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  106b6d:	20 
  106b6e:	89 44 24 08          	mov    %eax,0x8(%esp)
  106b72:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  106b79:	00 
  106b7a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  106b7d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106b80:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106b83:	e8 d8 03 00 00       	call   106f60 <vmm_alloc_in_range>
  106b88:	83 c4 24             	add    $0x24,%esp
  106b8b:	5e                   	pop    %esi
  106b8c:	5d                   	pop    %ebp
  106b8d:	c3                   	ret    
  106b8e:	66 90                	xchg   %ax,%ax

00106b90 <vmm_free>:
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  106b90:	55                   	push   %ebp
  106b91:	89 e5                	mov    %esp,%ebp
  106b93:	83 ec 18             	sub    $0x18,%esp
  106b96:	8b 45 08             	mov    0x8(%ebp),%eax
  106b99:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  106b9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106b9f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  106ba2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106ba5:	c1 e8 0c             	shr    $0xc,%eax
  106ba8:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106bae:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106bb1:	25 01 02 00 00       	and    $0x201,%eax
  106bb6:	3d 01 02 00 00       	cmp    $0x201,%eax
  106bbb:	0f 85 4a 00 00 00    	jne    106c0b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  106bc1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106bc4:	c1 e8 0c             	shr    $0xc,%eax
  106bc7:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106bcd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106bd0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106bd5:	89 04 24             	mov    %eax,(%esp)
  106bd8:	e8 63 c2 ff ff       	call   102e40 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  106bdd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106be0:	c1 e8 0c             	shr    $0xc,%eax
  106be3:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106be9:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106bec:	25 04 00 00 00       	and    $0x4,%eax
  106bf1:	0d 00 02 00 00       	or     $0x200,%eax
  106bf6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106bf9:	c1 e9 0c             	shr    $0xc,%ecx
  106bfc:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106c02:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106c05:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106c08:	0f 01 38             	invlpg (%eax)
	}
}
  106c0b:	83 c4 18             	add    $0x18,%esp
  106c0e:	5d                   	pop    %ebp
  106c0f:	c3                   	ret    

00106c10 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  106c10:	55                   	push   %ebp
  106c11:	89 e5                	mov    %esp,%ebp
  106c13:	83 ec 0c             	sub    $0xc,%esp
  106c16:	8b 45 10             	mov    0x10(%ebp),%eax
  106c19:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  106c1c:	8b 55 08             	mov    0x8(%ebp),%edx
  106c1f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  106c22:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106c25:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  106c28:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106c2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106c30:	0d 01 00 00 00       	or     $0x1,%eax
  106c35:	0d 02 00 00 00       	or     $0x2,%eax
  106c3a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106c3d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  106c43:	09 c8                	or     %ecx,%eax
  106c45:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106c48:	c1 e9 0c             	shr    $0xc,%ecx
  106c4b:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106c51:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106c54:	81 e1 04 02 00 00    	and    $0x204,%ecx
  106c5a:	09 c8                	or     %ecx,%eax
  106c5c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106c5f:	c1 e9 0c             	shr    $0xc,%ecx
  106c62:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106c68:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106c6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106c6e:	0f 01 38             	invlpg (%eax)
}
  106c71:	83 c4 0c             	add    $0xc,%esp
  106c74:	5d                   	pop    %ebp
  106c75:	c3                   	ret    
  106c76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  106c7d:	00 00 00 

00106c80 <vmm_resolve>:
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
}

uint32_t vmm_resolve(void* vaddr) {
  106c80:	55                   	push   %ebp
  106c81:	89 e5                	mov    %esp,%ebp
  106c83:	50                   	push   %eax
  106c84:	8b 45 08             	mov    0x8(%ebp),%eax
  106c87:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  106c8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106c8d:	c1 e8 0c             	shr    $0xc,%eax
  106c90:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106c96:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106c99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106c9e:	83 c4 04             	add    $0x4,%esp
  106ca1:	5d                   	pop    %ebp
  106ca2:	c3                   	ret    
  106ca3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  106caa:	84 00 00 00 00 00 

00106cb0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  106cb0:	55                   	push   %ebp
  106cb1:	89 e5                	mov    %esp,%ebp
  106cb3:	83 ec 38             	sub    $0x38,%esp
  106cb6:	8b 45 0c             	mov    0xc(%ebp),%eax
  106cb9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  106cbc:	ba 00 00 00 00       	mov    $0x0,%edx
  106cc1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  106cc4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  106cc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106cca:	c1 e8 16             	shr    $0x16,%eax
  106ccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  106cd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106cd3:	c1 e8 0c             	shr    $0xc,%eax
  106cd6:	25 ff 03 00 00       	and    $0x3ff,%eax
  106cdb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  106cde:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  106ce5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  106ce8:	e8 53 fe ff ff       	call   106b40 <vmm_alloc>
  106ced:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  106cf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106cf3:	89 04 24             	mov    %eax,(%esp)
  106cf6:	e8 95 fe ff ff       	call   106b90 <vmm_free>
  106cfb:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  106d00:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106d03:	8b 55 fc             	mov    -0x4(%ebp),%edx
  106d06:	89 0c 24             	mov    %ecx,(%esp)
  106d09:	89 54 24 04          	mov    %edx,0x4(%esp)
  106d0d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106d14:	00 
  106d15:	89 45 dc             	mov    %eax,-0x24(%ebp)
  106d18:	e8 f3 fe ff ff       	call   106c10 <map_address_active>
  106d1d:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  106d22:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106d25:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106d28:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106d2b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  106d31:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  106d34:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106d37:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106d3a:	89 0c 24             	mov    %ecx,(%esp)
  106d3d:	89 54 24 04          	mov    %edx,0x4(%esp)
  106d41:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106d48:	00 
  106d49:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106d4c:	e8 bf fe ff ff       	call   106c10 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  106d51:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106d54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106d57:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106d5a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106d5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  106d62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106d6a:	83 c4 38             	add    $0x38,%esp
  106d6d:	5d                   	pop    %ebp
  106d6e:	c3                   	ret    
  106d6f:	90                   	nop

00106d70 <vmm_map_range>:
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  106d70:	55                   	push   %ebp
  106d71:	89 e5                	mov    %esp,%ebp
  106d73:	56                   	push   %esi
  106d74:	83 ec 24             	sub    $0x24,%esp
  106d77:	8b 45 14             	mov    0x14(%ebp),%eax
  106d7a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  106d7d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106d80:	8b 75 08             	mov    0x8(%ebp),%esi
  106d83:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106d86:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106d89:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106d8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  106d8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106d92:	25 ff 0f 00 00       	and    $0xfff,%eax
  106d97:	3d 00 00 00 00       	cmp    $0x0,%eax
  106d9c:	0f 84 05 00 00 00    	je     106da7 <vmm_map_range+0x37>
		return;
  106da2:	e9 5a 00 00 00       	jmp    106e01 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  106da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106daa:	25 ff 0f 00 00       	and    $0xfff,%eax
  106daf:	3d 00 00 00 00       	cmp    $0x0,%eax
  106db4:	0f 84 05 00 00 00    	je     106dbf <vmm_map_range+0x4f>
		return;
  106dba:	e9 42 00 00 00       	jmp    106e01 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  106dbf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  106dc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106dc9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  106dcc:	0f 83 2f 00 00 00    	jae    106e01 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  106dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106dd5:	03 45 e8             	add    -0x18(%ebp),%eax
  106dd8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106ddb:	03 4d e8             	add    -0x18(%ebp),%ecx
  106dde:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106de1:	89 04 24             	mov    %eax,(%esp)
  106de4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106de8:	89 54 24 08          	mov    %edx,0x8(%esp)
  106dec:	e8 1f fe ff ff       	call   106c10 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  106df1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106df4:	05 00 10 00 00       	add    $0x1000,%eax
  106df9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  106dfc:	e9 c5 ff ff ff       	jmp    106dc6 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  106e01:	83 c4 24             	add    $0x24,%esp
  106e04:	5e                   	pop    %esi
  106e05:	5d                   	pop    %ebp
  106e06:	c3                   	ret    
  106e07:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  106e0e:	00 00 

00106e10 <map_address_context>:

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  106e10:	55                   	push   %ebp
  106e11:	89 e5                	mov    %esp,%ebp
  106e13:	56                   	push   %esi
  106e14:	83 ec 18             	sub    $0x18,%esp
  106e17:	8b 45 14             	mov    0x14(%ebp),%eax
  106e1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  106e1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106e20:	8b 75 08             	mov    0x8(%ebp),%esi
  106e23:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106e26:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106e29:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  106e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106e32:	c1 e8 16             	shr    $0x16,%eax
  106e35:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  106e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106e3b:	c1 e8 0c             	shr    $0xc,%eax
  106e3e:	25 ff 03 00 00       	and    $0x3ff,%eax
  106e43:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  106e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106e49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106e4e:	0d 01 00 00 00       	or     $0x1,%eax
  106e53:	0d 02 00 00 00       	or     $0x2,%eax
  106e58:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106e5b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  106e61:	09 c8                	or     %ecx,%eax
  106e63:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106e66:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106e69:	8b 75 f8             	mov    -0x8(%ebp),%esi
  106e6c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  106e6f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  106e75:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106e78:	81 e1 04 02 00 00    	and    $0x204,%ecx
  106e7e:	09 c8                	or     %ecx,%eax
  106e80:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106e83:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106e86:	8b 75 f8             	mov    -0x8(%ebp),%esi
  106e89:	8b 14 96             	mov    (%esi,%edx,4),%edx
  106e8c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  106e92:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  106e95:	83 c4 18             	add    $0x18,%esp
  106e98:	5e                   	pop    %esi
  106e99:	5d                   	pop    %ebp
  106e9a:	c3                   	ret    
  106e9b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00106ea0 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  106ea0:	55                   	push   %ebp
  106ea1:	89 e5                	mov    %esp,%ebp
  106ea3:	83 ec 08             	sub    $0x8,%esp
  106ea6:	8b 45 08             	mov    0x8(%ebp),%eax
  106ea9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  106eac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106eaf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  106eb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106eb5:	c1 e8 0c             	shr    $0xc,%eax
  106eb8:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106ebe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106ec1:	25 01 02 00 00       	and    $0x201,%eax
  106ec6:	3d 01 02 00 00       	cmp    $0x201,%eax
  106ecb:	0f 85 2e 00 00 00    	jne    106eff <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  106ed1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106ed4:	c1 e8 0c             	shr    $0xc,%eax
  106ed7:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106edd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106ee0:	25 04 00 00 00       	and    $0x4,%eax
  106ee5:	0d 00 02 00 00       	or     $0x200,%eax
  106eea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106eed:	c1 e9 0c             	shr    $0xc,%ecx
  106ef0:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  106ef6:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106ef9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106efc:	0f 01 38             	invlpg (%eax)
	}
}
  106eff:	83 c4 08             	add    $0x8,%esp
  106f02:	5d                   	pop    %ebp
  106f03:	c3                   	ret    
  106f04:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  106f0b:	00 00 00 00 00 

00106f10 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  106f10:	55                   	push   %ebp
  106f11:	89 e5                	mov    %esp,%ebp
  106f13:	56                   	push   %esi
  106f14:	83 ec 24             	sub    $0x24,%esp
  106f17:	8b 45 08             	mov    0x8(%ebp),%eax
  106f1a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  106f1f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  106f24:	be 00 00 00 00       	mov    $0x0,%esi
  106f29:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  106f2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106f2f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  106f36:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  106f3d:	ff 
  106f3e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106f45:	00 
  106f46:	89 44 24 0c          	mov    %eax,0xc(%esp)
  106f4a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  106f4d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106f50:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106f53:	e8 08 00 00 00       	call   106f60 <vmm_alloc_in_range>
  106f58:	83 c4 24             	add    $0x24,%esp
  106f5b:	5e                   	pop    %esi
  106f5c:	5d                   	pop    %ebp
  106f5d:	c3                   	ret    
  106f5e:	66 90                	xchg   %ax,%ax

00106f60 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  106f60:	55                   	push   %ebp
  106f61:	89 e5                	mov    %esp,%ebp
  106f63:	56                   	push   %esi
  106f64:	83 ec 34             	sub    $0x34,%esp
  106f67:	8b 45 14             	mov    0x14(%ebp),%eax
  106f6a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  106f6d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106f70:	8b 75 08             	mov    0x8(%ebp),%esi
  106f73:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106f76:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106f79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106f7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  106f7f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  106f86:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  106f8d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  106f94:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106f97:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106f9c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  106f9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106fa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  106fa5:	0f 83 6f 00 00 00    	jae    10701a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  106fab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106fae:	c1 e8 0c             	shr    $0xc,%eax
  106fb1:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  106fb7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106fba:	25 01 02 00 00       	and    $0x201,%eax
  106fbf:	3d 00 02 00 00       	cmp    $0x200,%eax
  106fc4:	0f 85 34 00 00 00    	jne    106ffe <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  106fca:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  106fd1:	0f 85 06 00 00 00    	jne    106fdd <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  106fd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106fda:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  106fdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106fe0:	05 01 00 00 00       	add    $0x1,%eax
  106fe5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  106fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106feb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106fee:	0f 82 05 00 00 00    	jb     106ff9 <vmm_alloc_in_range+0x99>
				break;
  106ff4:	e9 21 00 00 00       	jmp    10701a <vmm_alloc_in_range+0xba>
		} else {
  106ff9:	e9 07 00 00 00       	jmp    107005 <vmm_alloc_in_range+0xa5>
			c = 0;
  106ffe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  107005:	e9 00 00 00 00       	jmp    10700a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10700a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10700d:	05 00 10 00 00       	add    $0x1000,%eax
  107012:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  107015:	e9 85 ff ff ff       	jmp    106f9f <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  10701a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  107021:	8b 45 e0             	mov    -0x20(%ebp),%eax
  107024:	89 c1                	mov    %eax,%ecx
  107026:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10702c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10702f:	3d 00 00 00 00       	cmp    $0x0,%eax
  107034:	0f 84 59 00 00 00    	je     107093 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  10703a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10703d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  107040:	c1 e1 0c             	shl    $0xc,%ecx
  107043:	01 c8                	add    %ecx,%eax
  107045:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  10704c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10704f:	0f 85 0b 00 00 00    	jne    107060 <vmm_alloc_in_range+0x100>
  107055:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107058:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10705b:	e9 0d 00 00 00       	jmp    10706d <vmm_alloc_in_range+0x10d>
  107060:	b8 00 00 00 00       	mov    $0x0,%eax
  107065:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  107068:	e9 00 00 00 00       	jmp    10706d <vmm_alloc_in_range+0x10d>
  10706d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  107070:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  107073:	89 0c 24             	mov    %ecx,(%esp)
  107076:	89 44 24 04          	mov    %eax,0x4(%esp)
  10707a:	e8 c1 00 00 00       	call   107140 <vmm_alloc_addr>
		off++;
  10707f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  107082:	81 c1 01 00 00 00    	add    $0x1,%ecx
  107088:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  10708b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10708e:	e9 8e ff ff ff       	jmp    107021 <vmm_alloc_in_range+0xc1>

	return vaddr;
  107093:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107096:	83 c4 34             	add    $0x34,%esp
  107099:	5e                   	pop    %esi
  10709a:	5d                   	pop    %ebp
  10709b:	c3                   	ret    
  10709c:	0f 1f 40 00          	nopl   0x0(%eax)

001070a0 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  1070a0:	55                   	push   %ebp
  1070a1:	89 e5                	mov    %esp,%ebp
  1070a3:	56                   	push   %esi
  1070a4:	83 ec 24             	sub    $0x24,%esp
  1070a7:	8b 45 08             	mov    0x8(%ebp),%eax
  1070aa:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  1070af:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  1070b4:	be 01 00 00 00       	mov    $0x1,%esi
  1070b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  1070bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1070bf:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1070c6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1070cd:	ff 
  1070ce:	89 44 24 08          	mov    %eax,0x8(%esp)
  1070d2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1070d9:	00 
  1070da:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1070dd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1070e0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1070e3:	e8 78 fe ff ff       	call   106f60 <vmm_alloc_in_range>
  1070e8:	83 c4 24             	add    $0x24,%esp
  1070eb:	5e                   	pop    %esi
  1070ec:	5d                   	pop    %ebp
  1070ed:	c3                   	ret    
  1070ee:	66 90                	xchg   %ax,%ax

001070f0 <vmm_alloc_cont>:
}

void* vmm_alloc_cont(uint32_t cont) {
  1070f0:	55                   	push   %ebp
  1070f1:	89 e5                	mov    %esp,%ebp
  1070f3:	56                   	push   %esi
  1070f4:	83 ec 24             	sub    $0x24,%esp
  1070f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1070fa:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  1070ff:	ba 00 00 00 20       	mov    $0x20000000,%edx
  107104:	be 00 00 00 00       	mov    $0x0,%esi
  107109:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10710c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10710f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  107116:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10711d:	20 
  10711e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  107125:	00 
  107126:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10712a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10712d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  107130:	89 55 ec             	mov    %edx,-0x14(%ebp)
  107133:	e8 28 fe ff ff       	call   106f60 <vmm_alloc_in_range>
  107138:	83 c4 24             	add    $0x24,%esp
  10713b:	5e                   	pop    %esi
  10713c:	5d                   	pop    %ebp
  10713d:	c3                   	ret    
  10713e:	66 90                	xchg   %ax,%ax

00107140 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  107140:	55                   	push   %ebp
  107141:	89 e5                	mov    %esp,%ebp
  107143:	56                   	push   %esi
  107144:	83 ec 34             	sub    $0x34,%esp
  107147:	8b 45 0c             	mov    0xc(%ebp),%eax
  10714a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10714d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  107150:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  107153:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10715a:	0f 85 34 00 00 00    	jne    107194 <vmm_alloc_addr+0x54>
  107160:	8d 05 95 95 10 00    	lea    0x109595,%eax
  107166:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  10716b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10716e:	89 04 24             	mov    %eax,(%esp)
  107171:	89 54 24 04          	mov    %edx,0x4(%esp)
  107175:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10717c:	00 
  10717d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  107180:	e8 2b 91 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  107185:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10718c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10718f:	e9 9b 00 00 00       	jmp    10722f <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  107194:	8b 45 f4             	mov    -0xc(%ebp),%eax
  107197:	c1 e8 0c             	shr    $0xc,%eax
  10719a:	8b 0d e4 82 10 00    	mov    0x1082e4,%ecx
  1071a0:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1071a3:	25 01 02 00 00       	and    $0x201,%eax
  1071a8:	3d 00 02 00 00       	cmp    $0x200,%eax
  1071ad:	0f 84 37 00 00 00    	je     1071ea <vmm_alloc_addr+0xaa>
  1071b3:	8d 05 95 95 10 00    	lea    0x109595,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  1071b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1071bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1071bf:	c1 ea 0c             	shr    $0xc,%edx
  1071c2:	8b 35 e4 82 10 00    	mov    0x1082e4,%esi
  1071c8:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1071cb:	89 04 24             	mov    %eax,(%esp)
  1071ce:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1071d2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1071d6:	e8 d5 90 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  1071db:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1071e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1071e5:	e9 45 00 00 00       	jmp    10722f <vmm_alloc_addr+0xef>
  1071ea:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  1071ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1071f2:	e8 29 ba ff ff       	call   102c20 <pmm_alloc>
  1071f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  1071fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1071fd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107200:	89 04 24             	mov    %eax,(%esp)
  107203:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  107207:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10720e:	00 
  10720f:	e8 fc f9 ff ff       	call   106c10 <map_address_active>

	if (retpaddr != 0)
  107214:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10721b:	0f 84 08 00 00 00    	je     107229 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  107221:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107224:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107227:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  107229:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10722c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10722f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  107232:	83 c4 34             	add    $0x34,%esp
  107235:	5e                   	pop    %esi
  107236:	5d                   	pop    %ebp
  107237:	c3                   	ret    
  107238:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10723f:	00 

00107240 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  107240:	55                   	push   %ebp
  107241:	89 e5                	mov    %esp,%ebp
  107243:	50                   	push   %eax
  107244:	8b 45 08             	mov    0x8(%ebp),%eax
  107247:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  10724a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10724d:	a3 64 a4 10 00       	mov    %eax,0x10a464
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  107252:	8b 45 fc             	mov    -0x4(%ebp),%eax
  107255:	0f 22 d8             	mov    %eax,%cr3
}
  107258:	83 c4 04             	add    $0x4,%esp
  10725b:	5d                   	pop    %ebp
  10725c:	c3                   	ret    
  10725d:	0f 1f 00             	nopl   (%eax)

00107260 <vmm_init>:

uint32_t vmm_init(void) {
  107260:	55                   	push   %ebp
  107261:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  107263:	53                   	push   %ebx
  107264:	57                   	push   %edi
  107265:	56                   	push   %esi
  107266:	83 ec 3c             	sub    $0x3c,%esp
  107269:	e8 b2 b9 ff ff       	call   102c20 <pmm_alloc>
  10726e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  107271:	e8 aa b9 ff ff       	call   102c20 <pmm_alloc>
  107276:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107279:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  10727b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  107282:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  107289:	0f 83 d6 00 00 00    	jae    107365 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  10728f:	e8 8c b9 ff ff       	call   102c20 <pmm_alloc>
  107294:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107297:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10729a:	8b 12                	mov    (%edx),%edx
  10729c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  10729f:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  1072a6:	0f 83 15 00 00 00    	jae    1072c1 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  1072ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1072af:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1072b2:	8b 09                	mov    (%ecx),%ecx
  1072b4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1072b7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1072ba:	89 04 8d 9c aa 18 00 	mov    %eax,0x18aa9c(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1072c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1072c4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1072c7:	8b 09                	mov    (%ecx),%ecx
  1072c9:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  1072cc:	81 ca 07 00 00 00    	or     $0x7,%edx
  1072d2:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  1072d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1072dc:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  1072e3:	0f 83 67 00 00 00    	jae    107350 <vmm_init+0xf0>
  1072e9:	b8 04 00 00 00       	mov    $0x4,%eax
  1072ee:	b9 00 00 00 00       	mov    $0x0,%ecx
  1072f3:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  1072f8:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1072fb:	c1 e6 16             	shl    $0x16,%esi
  1072fe:	8b 7d e8             	mov    -0x18(%ebp),%edi
  107301:	c1 e7 0c             	shl    $0xc,%edi
  107304:	01 fe                	add    %edi,%esi
  107306:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  107309:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  107310:	0f 97 c3             	seta   %bl
  107313:	84 db                	test   %bl,%bl
  107315:	0f 44 d1             	cmove  %ecx,%edx
  107318:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  10731f:	0f 97 c3             	seta   %bl
  107322:	84 db                	test   %bl,%bl
  107324:	0f 44 c1             	cmove  %ecx,%eax
  107327:	09 c2                	or     %eax,%edx
  107329:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10732c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10732f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  107332:	8b 36                	mov    (%esi),%esi
  107334:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  107337:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10733d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  107340:	8b 45 e8             	mov    -0x18(%ebp),%eax
  107343:	05 01 00 00 00       	add    $0x1,%eax
  107348:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10734b:	e9 8c ff ff ff       	jmp    1072dc <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  107350:	e9 00 00 00 00       	jmp    107355 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  107355:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107358:	05 01 00 00 00       	add    $0x1,%eax
  10735d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  107360:	e9 1d ff ff ff       	jmp    107282 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  107365:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10736c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  107373:	0f 83 5a 00 00 00    	jae    1073d3 <vmm_init+0x173>
  107379:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  10737e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107381:	8b 55 f0             	mov    -0x10(%ebp),%edx
  107384:	8b 12                	mov    (%edx),%edx
  107386:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  107389:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10738f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  107392:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  107395:	8b 09                	mov    (%ecx),%ecx
  107397:	8b 15 e4 82 10 00    	mov    0x1082e4,%edx
  10739d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1073a0:	c1 e6 0c             	shl    $0xc,%esi
  1073a3:	01 f2                	add    %esi,%edx
  1073a5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1073a8:	89 0c 24             	mov    %ecx,(%esp)
  1073ab:	89 54 24 04          	mov    %edx,0x4(%esp)
  1073af:	89 74 24 08          	mov    %esi,0x8(%esp)
  1073b3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1073ba:	00 
  1073bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1073be:	e8 4d fa ff ff       	call   106e10 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  1073c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1073c6:	05 01 00 00 00       	add    $0x1,%eax
  1073cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1073ce:	e9 99 ff ff ff       	jmp    10736c <vmm_init+0x10c>
  1073d3:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  1073d8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1073db:	8b 09                	mov    (%ecx),%ecx
  1073dd:	8b 15 e8 82 10 00    	mov    0x1082e8,%edx
  1073e3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1073e6:	89 0c 24             	mov    %ecx,(%esp)
  1073e9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1073ed:	89 74 24 08          	mov    %esi,0x8(%esp)
  1073f1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1073f8:	00 
  1073f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1073fc:	e8 0f fa ff ff       	call   106e10 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107401:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  107408:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  10740e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  107411:	0f 83 3b 00 00 00    	jae    107452 <vmm_init+0x1f2>
  107417:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  10741c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10741f:	8b 09                	mov    (%ecx),%ecx
  107421:	8b 55 ec             	mov    -0x14(%ebp),%edx
  107424:	8b 75 ec             	mov    -0x14(%ebp),%esi
  107427:	89 0c 24             	mov    %ecx,(%esp)
  10742a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10742e:	89 74 24 08          	mov    %esi,0x8(%esp)
  107432:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  107439:	00 
  10743a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10743d:	e8 ce f9 ff ff       	call   106e10 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  107442:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107445:	05 00 10 00 00       	add    $0x1000,%eax
  10744a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10744d:	e9 b6 ff ff ff       	jmp    107408 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  107452:	8b 45 f0             	mov    -0x10(%ebp),%eax
  107455:	8b 00                	mov    (%eax),%eax
  107457:	89 04 24             	mov    %eax,(%esp)
  10745a:	e8 e1 fd ff ff       	call   107240 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  10745f:	0f 20 c0             	mov    %cr0,%eax
  107462:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  107465:	8b 45 dc             	mov    -0x24(%ebp),%eax
  107468:	0d 00 00 00 80       	or     $0x80000000,%eax
  10746d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  107470:	8b 45 dc             	mov    -0x24(%ebp),%eax
  107473:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  107476:	a1 e8 82 10 00       	mov    0x1082e8,%eax
  10747b:	8b 00                	mov    (%eax),%eax
  10747d:	83 c4 3c             	add    $0x3c,%esp
  107480:	5e                   	pop    %esi
  107481:	5f                   	pop    %edi
  107482:	5b                   	pop    %ebx
  107483:	5d                   	pop    %ebp
  107484:	c3                   	ret    
  107485:	66 90                	xchg   %ax,%ax
  107487:	90                   	nop

00107488 <_start>:
  107488:	bc 68 a4 11 00       	mov    $0x11a468,%esp
  10748d:	53                   	push   %ebx
  10748e:	e8 7d 8b ff ff       	call   100010 <init>

00107493 <_stop>:
  107493:	fa                   	cli    
  107494:	f4                   	hlt    
  107495:	eb fc                	jmp    107493 <_stop>
